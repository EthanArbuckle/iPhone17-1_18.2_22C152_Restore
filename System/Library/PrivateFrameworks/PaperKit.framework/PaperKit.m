uint64_t partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)()
{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  v3 = *v0;
  swift_task_dealloc();
  v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t objectdestroy_206Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR10Foundation4DataV_So6CGSizeVtSg_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR10Foundation4DataV_So6CGSizeVtSg_Tg5(uint64_t a1, int *a2)
{
  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR10Foundation4DataV_So6CGSizeVtSg_Tg5TQ0_;
  return v6(a1);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t type metadata instantiation function for CanvasView()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance PaperDocument()
{
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for TaggedStroke()
{
  return &type metadata for TaggedStroke;
}

ValueMetadata *type metadata accessor for CanvasCalculateDocumentIndex()
{
  return &type metadata for CanvasCalculateDocumentIndex;
}

uint64_t ObjC metadata update function for PKDrawingCoherence()
{
  return type metadata accessor for PKDrawingCoherence(0);
}

ValueMetadata *type metadata accessor for TaggedStroke.Enum()
{
  return &type metadata for TaggedStroke.Enum;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance VisualIntelligenceFeatureFlags()
{
  return "Cling";
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance VisualIntelligenceFeatureFlags()
{
  return "VisualIntelligence";
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance PencilAndPaperFeatureFlags()
{
  return "PencilAndPaper";
}

uint64_t type metadata accessor for TiledSelectionInteractionDelegate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for PKDrawingCoherence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for PKDrawingCoherenceVersion(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for Capsule<PKDrawingStruct>);
}

uint64_t @objc closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()(const void *a1)
{
  *(void *)(v1 + 16) = _Block_copy(a1);
  return MEMORY[0x270FA2498](@objc closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool(), 0, 0);
}

uint64_t partial apply for @objc closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  uint64_t v4 = (uint64_t (*)(const void *))((char *)&async function pointer to @objc closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()
                                            + async function pointer to @objc closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool());
  return v4(v2);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu);
  return v6(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu);
  return v6(v2, v3, v4);
}

uint64_t storeEnumTagSinglePayload for PKDrawingStruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C751908);
}

uint64_t associated type witness table accessor for CRStruct_Base_2.Type_2 : CRDT in PKDrawingStruct()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
}

uint64_t associated type witness table accessor for CRStruct_Base_5.Type_1 : CRDT in Signature()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<CGRect> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CGRect>);
}

uint64_t base witness table accessor for CRCodable in CGRect()
{
  return _sSo7CGPointVABSE12CoreGraphicsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, type metadata accessor for CGRect);
}

uint64_t base witness table accessor for CRType in CGRect()
{
  return _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, type metadata accessor for CGRect);
}

uint64_t base witness table accessor for CRCodable in PKDrawingStruct()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
}

uint64_t base witness table accessor for CRStruct_Base_2 in PKDrawingStruct()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
}

uint64_t base witness table accessor for CRType in PKDrawingStruct()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance PKDrawingStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F16FD0](a1, a2, v4);
}

uint64_t base witness table accessor for CRMergeable in PKDrawingStruct()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
}

uint64_t base witness table accessor for CRDT in PKDrawingStruct()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
}

uint64_t base witness table accessor for CRStruct_Base in PKDrawingStruct()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
}

uint64_t type metadata completion function for PKDrawingCoherenceVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void type metadata accessor for Capsule<PKDrawingStruct>()
{
  if (!lazy cache variable for type metadata for Capsule<PKDrawingStruct>)
  {
    type metadata accessor for PKDrawingStruct();
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
    unint64_t v0 = type metadata accessor for Capsule();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Capsule<PKDrawingStruct>);
    }
  }
}

void type metadata completion function for PKDrawingStruct()
{
  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for CRRegister<CGRect>()
{
  if (!lazy cache variable for type metadata for CRRegister<CGRect>)
  {
    type metadata accessor for CGRect(255);
    lazy protocol witness table accessor for type CGRect and conformance CGRect((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
    unint64_t v0 = type metadata accessor for CRRegister();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<CGRect>);
    }
  }
}

id PKDrawingCoherence.init()()
{
  uint64_t v1 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v5 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v8 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  long long v15 = *MEMORY[0x263F001A0];
  long long v16 = v8;
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  id v9 = v0;
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  CROrderedSet.init()();
  *(void *)&v4[*(int *)(v2 + 24)] = MEMORY[0x263F8EE80];
  static CRKeyPath.unique.getter();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Capsule<>.init(_:id:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))((uint64_t)v9 + OBJC_IVAR___PKDrawingCoherence_model, v7, v13);

  v10 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  v14.receiver = v9;
  v14.super_class = v10;
  return objc_msgSendSuper2(&v14, sel_init);
}

uint64_t lazy protocol witness table accessor for type CGRect and conformance CGRect(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_12(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for PKDrawingStruct()
{
  uint64_t result = type metadata singleton initialization cache for PKDrawingStruct;
  if (!type metadata singleton initialization cache for PKDrawingStruct) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CGPoint and conformance CGPoint(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo7CGPointVABSE12CoreGraphicsWlTm_0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo7CGPointVABSE12CoreGraphicsWlTm_1(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CGPoint(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for UIRectEdge(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t type metadata accessor for PKStrokeProperties(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for PKDrawingCoherence(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKDrawingCoherence);
}

void type metadata accessor for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>()
{
  if (!lazy cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    unint64_t v0 = type metadata accessor for CROrderedSet();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    }
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

Swift::Void __swiftcall TiledTextView.didMoveToWindow()()
{
  uint64_t v1 = v0;
  v13.receiver = v0;
  v13.super_class = (Class)type metadata accessor for TiledTextView();
  objc_msgSendSuper2(&v13, sel_didMoveToWindow);
  id v2 = objc_msgSend(v0, sel_window);

  if (v2)
  {
    uint64_t v3 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TiledSelectionInteractionDelegate<TiledTextView>);
    id v4 = objc_allocWithZone(v3);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    v12.receiver = v4;
    v12.super_class = v3;
    id v5 = objc_msgSendSuper2(&v12, sel_init);
    uint64_t v6 = OBJC_IVAR____TtC8PaperKit13TiledTextView_selectionInteractionDelegate;
    uint64_t v7 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_selectionInteractionDelegate];
    *(void *)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_selectionInteractionDelegate] = v5;

    id v8 = objc_msgSend(v1, sel_selectionInteraction);
    objc_msgSend(v8, sel_setDelegate_, *(void *)&v1[v6]);

    *(void *)(*(void *)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_canvasElementController]
              + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate
              + 8) = &protocol witness table for TiledTextView;
    swift_unknownObjectWeakAssign();
    id v9 = v1;
    CanvasElementController.delegate.didset();

    id v10 = TiledTextView.canvasGenerationToolOverlayController.getter();
    CanvasGenerationToolOverlayController.updateUI()();
  }
  else
  {
    id v11 = objc_msgSend(v1, sel_selectionInteraction);
    objc_msgSend(v11, sel_setDelegate_, 0);

    *(void *)(*(void *)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_canvasElementController]
              + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate
              + 8) = 0;
    swift_unknownObjectWeakAssign();
    CanvasElementController.delegate.didset();
    id v10 = TiledTextView.canvasGenerationToolOverlayController.getter();
    CanvasGenerationToolOverlayController.removeUI()();
  }
}

void CanvasElementController.delegate.didset()
{
  uint64_t v1 = MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]);
  swift_unknownObjectRelease();
  if (v1)
  {
    id v2 = (char *)objc_allocWithZone((Class)type metadata accessor for ToolPickerController());
    uint64_t v3 = v0;
    id v4 = specialized ToolPickerController.init(delegate:)(v3, v2);
    uint64_t v5 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController;
    uint64_t v6 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
    *(void *)&v3[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController] = v4;

    uint64_t v7 = *(void **)&v3[v5];
    if (v7)
    {
      char v8 = v3[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditDescription];
      id v9 = v7;
      id v10 = ToolPickerController.textToolListViewController.getter();
      v10[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_descriptionItemVisible] = v8;
      TextToolListViewController.updateUI()();

      char v11 = v3[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditVellumOpacity];
      objc_super v12 = ToolPickerController.textToolListViewController.getter();
      v12[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible] = v11;
      TextToolListViewController.updateUI()();

      objc_super v13 = ToolPickerController.textToolListViewController.getter();
      char v14 = v13[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addStickerListItemVisible];
      v13[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addStickerListItemVisible] = 1;
      TextToolListViewController.addStickerListItemVisible.didset(v14);

      v19 = &type metadata for PencilAndPaperFeatureFlags;
      unint64_t v20 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
      v18[0] = 5;
      char v15 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      long long v16 = ToolPickerController.textToolListViewController.getter();
      v16[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_graphItemVisible] = v15 & 1;
      TextToolListViewController.updateUI()();
    }
  }
  else
  {
    v17 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
    *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController] = 0;
  }
}

char *ToolPickerController.textToolListViewController.getter(uint64_t *a1, void (*a2)(void), void *a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void **)(v4 + *a1);
  if (v6)
  {
    uint64_t v7 = *(char **)(v4 + *a1);
  }
  else
  {
    a2(0);
    id v10 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    *(void *)&v10[*a3 + 8] = a4;
    swift_unknownObjectWeakAssign();
    char v11 = *(void **)(v4 + v5);
    *(void *)(v4 + v5) = v10;
    uint64_t v7 = v10;

    uint64_t v6 = 0;
  }
  id v12 = v6;
  return v7;
}

char *ToolPickerController.textToolListViewController.getter()
{
  return ToolPickerController.textToolListViewController.getter(&OBJC_IVAR____TtC8PaperKit20ToolPickerController____lazy_storage___textToolListViewController, (void (*)(void))type metadata accessor for TextToolListViewController, &OBJC_IVAR____TtC8PaperKit26TextToolListViewController_delegate, (uint64_t)&protocol witness table for ToolPickerController);
}

unint64_t TextToolListViewController.updateUI()()
{
  uint64_t v1 = v0;
  unint64_t result = (unint64_t)objc_msgSend(v0, sel_isViewLoaded);
  if (!result) {
    return result;
  }
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_stackView];
  id v4 = objc_msgSend(v3, sel_arrangedSubviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = result;
    if (!result) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_11;
    }
  }
  if (v6 < 1)
  {
    __break(1u);
LABEL_42:
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0) {
      id v8 = (id)MEMORY[0x21054E050](i, v5);
    }
    else {
      id v8 = *(id *)(v5 + 8 * i + 32);
    }
    id v9 = v8;
    objc_msgSend(v8, sel_removeFromSuperview);
  }
LABEL_11:
  swift_bridgeObjectRelease_n();
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___listItemViews] = TextToolListViewController.configuredListItemViews()();
  swift_bridgeObjectRelease();
  unint64_t result = TextToolListViewController.listItemViews.getter();
  unint64_t v10 = result;
  if (result >> 62) {
    goto LABEL_36;
  }
  uint64_t v11 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v11)
  {
    do
    {
      if (v11 < 1) {
        goto LABEL_42;
      }
      uint64_t v12 = 0;
      double v13 = *(double *)&v1[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_minimumItemHeight];
      while (1)
      {
        id v19 = (v10 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x21054E050](v12, v10)
            : *(id *)(v10 + 8 * v12 + 32);
        unint64_t v20 = v19;
        id v21 = objc_msgSend(v19, sel_heightAnchor);
        id v22 = objc_msgSend(v21, sel_constraintGreaterThanOrEqualToConstant_, v13);

        objc_msgSend(v22, sel_setActive_, 1);
        objc_msgSend(v20, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
        objc_msgSend(v3, sel_addArrangedSubview_, v20);
        id v23 = v20;
        unint64_t v24 = TextToolListViewController.listItemViews.getter();
        unint64_t v25 = v24;
        if (v24 >> 62)
        {
          uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
          if (!v26)
          {
LABEL_15:

            swift_bridgeObjectRelease();
LABEL_16:
            id v14 = objc_msgSend(self, sel_separatorColor);
            char v15 = (objc_class *)type metadata accessor for SeparatorView();
            v34.receiver = objc_allocWithZone(v15);
            v34.super_class = v15;
            id v16 = objc_msgSendSuper2(&v34, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
            objc_msgSend(v16, sel_setBackgroundColor_, v14);

            objc_msgSend(v16, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
            id v17 = objc_msgSend(v16, sel_heightAnchor);
            id v18 = objc_msgSend(v17, sel_constraintEqualToConstant_, 1.0);

            objc_msgSend(v18, sel_setActive_, 1);
            objc_msgSend(v3, sel_addArrangedSubview_, v16);

            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v26 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v26) {
            goto LABEL_15;
          }
        }
        BOOL v27 = __OFSUB__(v26, 1);
        unint64_t v28 = v26 - 1;
        if (v27) {
          break;
        }
        if ((v25 & 0xC000000000000001) != 0)
        {
          id v29 = (id)MEMORY[0x21054E050](v28, v25);
        }
        else
        {
          if ((v28 & 0x8000000000000000) != 0) {
            goto LABEL_34;
          }
          if (v28 >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_35;
          }
          id v29 = *(id *)(v25 + 8 * v28 + 32);
        }
        v30 = v29;
        swift_bridgeObjectRelease();
        type metadata accessor for TextToolListItemView();
        id v31 = v23;
        char v32 = static NSObject.== infix(_:_:)();

        if ((v32 & 1) == 0) {
          goto LABEL_16;
        }
LABEL_17:
        ++v12;

        if (v11 == v12) {
          goto LABEL_37;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      unint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v11 = result;
    }
    while (result);
  }
LABEL_37:
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_systemLayoutSizeFittingSize_, *MEMORY[0x263F83810], *(double *)(MEMORY[0x263F83810] + 8));
  if (*(double *)&v1[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_minimumPreferredContentSizeWidth] > v33) {
    double v33 = *(double *)&v1[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_minimumPreferredContentSizeWidth];
  }
  return (unint64_t)objc_msgSend(v1, sel_setPreferredContentSize_, v33);
}

uint64_t type metadata accessor for ToolPickerController()
{
  return self;
}

uint64_t type metadata accessor for TextToolListViewController()
{
  return self;
}

id TextToolListViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v9 = OBJC_IVAR____TtC8PaperKit26TextToolListViewController_stackView;
  id v10 = objc_allocWithZone(MEMORY[0x263F82BF8]);
  uint64_t v11 = v4;
  *(void *)&v4[v9] = objc_msgSend(v10, sel_init);
  *(void *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_minimumItemHeight] = 0x4046000000000000;
  *(void *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_minimumPreferredContentSizeWidth] = 0x406DC00000000000;
  *(void *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_autoFillFormListItemVisible] = 0;
  v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addStickerListItemVisible] = 0;
  v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addShapeListItemVisible] = 0;
  v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible] = 0;
  v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_descriptionItemVisible] = 0;
  v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_graphItemVisible] = 0;
  *(void *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___listItemViews] = 0;
  *(void *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addTextBoxListItemView] = 0;
  *(void *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___autoFillFormListItemView] = 0;
  *(void *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addSignatureListItemView] = 0;
  *(void *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addStickerListItemView] = 0;
  *(void *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___opacityListItemView] = 0;
  *(void *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___descriptionListItemView] = 0;
  *(void *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addShapeListItemView] = 0;

  if (a2)
  {
    uint64_t v12 = (void *)MEMORY[0x21054D080](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
  }
  v15.receiver = v11;
  v15.super_class = ObjectType;
  id v13 = objc_msgSendSuper2(&v15, sel_initWithNibName_bundle_, v12, a3);

  return v13;
}

void TextToolListViewController.addStickerListItemVisible.didset(char a1)
{
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addStickerListItemVisible;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addStickerListItemVisible) != (a1 & 1))
  {
    uint64_t v9 = &type metadata for VisualIntelligenceFeatureFlags;
    unint64_t v10 = lazy protocol witness table accessor for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags();
    char v3 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    if (v3)
    {
      TextToolListViewController.updateUI()();
    }
    else
    {
      *(unsigned char *)(v1 + v2) = 0;
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)logger);
      unint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl(&dword_20C2D7000, v5, v6, "TextTool: Can't change Add Sticker element visibility if feature flag is disabled.", v7, 2u);
        MEMORY[0x210550270](v7, -1, -1);
      }
    }
  }
}

unint64_t lazy protocol witness table accessor for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags;
  if (!lazy protocol witness table cache variable for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags;
  if (!lazy protocol witness table cache variable for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags);
  }
  return result;
}

id specialized ToolPickerController.init(delegate:)(void *a1, char *a2)
{
  *(void *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate + 8] = 0;
  uint64_t v4 = swift_unknownObjectWeakInit();
  *(void *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_stickerPickerVC] = 0;
  *(void *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC] = 0;
  *(void *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController____lazy_storage___textToolListViewController] = 0;
  *(void *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController____lazy_storage___shapeButtonListViewController] = 0;
  *(void *)(v4 + 8) = &protocol witness table for CanvasElementController;
  swift_unknownObjectWeakAssign();
  v15.receiver = a2;
  v15.super_class = (Class)type metadata accessor for ToolPickerController();
  id v5 = objc_msgSendSuper2(&v15, sel_init);
  os_log_type_t v6 = self;
  id v7 = v5;
  id v8 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v8, sel_addObserver_selector_name_object_, v7, sel_toolPickerWillShowNotification_, *MEMORY[0x263F14D08], 0);

  id v9 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v9, sel_addObserver_selector_name_object_, v7, sel_toolPickerDidShowNotification_, *MEMORY[0x263F14CF8], 0);

  id v10 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v10, sel_addObserver_selector_name_object_, v7, sel_toolPickerDidHideNotification_, *MEMORY[0x263F14CF0], 0);

  id v11 = objc_msgSend(v6, sel_defaultCenter);
  uint64_t v12 = *MEMORY[0x263F14CD0];
  id v13 = v7;
  objc_msgSend(v11, sel_addObserver_selector_name_object_, v13, sel_handleSqueezeInteractionDidChangePaletteViewVisibilityNotification_, v12, 0);

  return v13;
}

{
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  objc_super v15;

  *(void *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate + 8] = 0;
  uint64_t v4 = swift_unknownObjectWeakInit();
  *(void *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_stickerPickerVC] = 0;
  *(void *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC] = 0;
  *(void *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController____lazy_storage___textToolListViewController] = 0;
  *(void *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController____lazy_storage___shapeButtonListViewController] = 0;
  *(void *)(v4 + 8) = &protocol witness table for InlineDrawingCanvasElementController;
  swift_unknownObjectWeakAssign();
  v15.receiver = a2;
  v15.super_class = (Class)type metadata accessor for ToolPickerController();
  id v5 = objc_msgSendSuper2(&v15, sel_init);
  os_log_type_t v6 = self;
  id v7 = v5;
  id v8 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v8, sel_addObserver_selector_name_object_, v7, sel_toolPickerWillShowNotification_, *MEMORY[0x263F14D08], 0);

  id v9 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v9, sel_addObserver_selector_name_object_, v7, sel_toolPickerDidShowNotification_, *MEMORY[0x263F14CF8], 0);

  id v10 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v10, sel_addObserver_selector_name_object_, v7, sel_toolPickerDidHideNotification_, *MEMORY[0x263F14CF0], 0);

  id v11 = objc_msgSend(v6, sel_defaultCenter);
  uint64_t v12 = *MEMORY[0x263F14CD0];
  id v13 = v7;
  objc_msgSend(v11, sel_addObserver_selector_name_object_, v13, sel_handleSqueezeInteractionDidChangePaletteViewVisibilityNotification_, v12, 0);

  return v13;
}

uint64_t one-time initialization function for generativeLogger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, generativeLogger);
  __swift_project_value_buffer(v0, (uint64_t)generativeLogger);
  return Logger.init(subsystem:category:)();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(a1, a2, a3);
}

uint64_t outlined destroy of StocksKitCurrencyCache.Provider?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags;
  if (!lazy protocol witness table cache variable for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags;
  if (!lazy protocol witness table cache variable for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags);
  }
  return result;
}

uint64_t @objc static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _Block_copy(a3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = a1;
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 1, 1, v10);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = &async function pointer to partial apply for @objc closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool();
  v11[5] = v9;
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  uint64_t v12[3] = 0;
  v12[4] = &_sIeghH_IeAgH_TRTATu;
  v12[5] = v11;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5((uint64_t)v7, (uint64_t)&_sIeAgH_ytIeAgHr_TRTATu, (uint64_t)v12);
  return swift_release();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for PKDrawingStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PKDrawingStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t @objc static PKTextAttachmentDrawingViewProvider.tiledViewClassForPaper()()
{
  type metadata accessor for TiledTextView();
  return swift_getObjCClassFromMetadata();
}

id specialized TiledTextView.init(in:sixChannelBlending:defaultDrawing:readOnly:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  *(void *)&v4[OBJC_IVAR____TtC8PaperKit13TiledTextView_currentPaperView + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v4[OBJC_IVAR____TtC8PaperKit13TiledTextView_paperLinedPaper] = 0;
  uint64_t v8 = OBJC_IVAR____TtC8PaperKit13TiledTextView_canvasElementController;
  id v9 = objc_allocWithZone((Class)type metadata accessor for CanvasElementController());
  uint64_t v10 = v4;
  *(void *)&v4[v8] = objc_msgSend(v9, sel_init);
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit13TiledTextView_selectionInteractionDelegate] = 0;
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit13TiledTextView____lazy_storage___imageWandTipController] = 0;
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit13TiledTextView____lazy_storage___canvasGenerationToolOverlayController] = 0;
  uint64_t v11 = &v10[OBJC_IVAR____TtC8PaperKit13TiledTextView_magicGenerativePlaygroundTokenProvider];
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((void *)v11 + 4) = 0;
  uint64_t v12 = &v10[OBJC_IVAR____TtC8PaperKit13TiledTextView_magicGenerativePlaygroundContainerStateObserver];
  *(_OWORD *)uint64_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((void *)v12 + 4) = 0;

  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v15.receiver = v10;
  v15.super_class = (Class)type metadata accessor for TiledTextView();
  return objc_msgSendSuper2(&v15, sel_initInScrollView_sixChannelBlending_defaultDrawingClass_readOnly_, a1, a2 & 1, ObjCClassFromMetadata, a4 & 1);
}

uint64_t type metadata accessor for TiledTextView()
{
  return self;
}

uint64_t type metadata accessor for CanvasElementController()
{
  return self;
}

id CanvasElementController.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_shapeStyleController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_textStyleController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_signatureStyleController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController] = 0;
  v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle] = 0;
  v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditVellumOpacity] = 0;
  v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditDescription] = 0;
  v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden] = 1;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_activeToolPickerItem] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_editingContainerView] = 0;
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return v7();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t getEnumTagSinglePayload for PKDrawingStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C7517EC);
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu + _sIeAgH_ytIeAgHr_TRTu);
  return v8(a1, v4, v5, v6);
}

BOOL protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance CGRect()
{
  v2.origin.x = 0.0;
  v2.origin.y = 0.0;
  v2.size.width = 0.0;
  v2.size.height = 0.0;
  return CGRectEqualToRect(*v0, v2);
}

uint64_t type metadata completion function for TiledSelectionInteractionDelegate()
{
  return swift_initClassMetadata2();
}

unint64_t lazy protocol witness table accessor for type TaggedStroke.Enum and conformance TaggedStroke.Enum()
{
  unint64_t result = lazy protocol witness table cache variable for type TaggedStroke.Enum and conformance TaggedStroke.Enum;
  if (!lazy protocol witness table cache variable for type TaggedStroke.Enum and conformance TaggedStroke.Enum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedStroke.Enum and conformance TaggedStroke.Enum);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaggedStroke.Enum and conformance TaggedStroke.Enum;
  if (!lazy protocol witness table cache variable for type TaggedStroke.Enum and conformance TaggedStroke.Enum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedStroke.Enum and conformance TaggedStroke.Enum);
  }
  return result;
}

uint64_t one-time initialization function for fields()
{
  strcpy((char *)&static PKDrawingStruct.fields, "canvasBounds");
  unk_26ACB4825 = 0;
  unk_26ACB4826 = -5120;
  qword_26ACB4828 = swift_getKeyPath();
  unk_26ACB4830 = 0x73656B6F727473;
  qword_26ACB4838 = 0xE700000000000000;
  uint64_t result = swift_getKeyPath();
  qword_26ACB4840 = result;
  return result;
}

{
  uint64_t result;

  static PKStrokeInheritedProperties.fields = 0x6574697265686E69;
  unk_26ACB21D0 = 0xE900000000000064;
  qword_26ACB21D8 = swift_getKeyPath();
  unk_26ACB21E0 = 7040617;
  qword_26ACB21E8 = 0xE300000000000000;
  qword_26ACB21F0 = swift_getKeyPath();
  qword_26ACB21F8 = 0x726F66736E617274;
  qword_26ACB2200 = 0xE90000000000006DLL;
  uint64_t result = swift_getKeyPath();
  qword_26ACB2208 = result;
  return result;
}

{
  uint64_t result;

  static PKStrokeStruct.fields = 0x6574697265686E69;
  qword_26ACB1948 = 0xE900000000000064;
  qword_26ACB1950 = swift_getKeyPath();
  unk_26ACB1958 = 0x69747265706F7270;
  qword_26ACB1960 = 0xEA00000000007365;
  uint64_t result = swift_getKeyPath();
  qword_26ACB1968 = result;
  return result;
}

{
  uint64_t result;

  static Signature.fields = 0x656D617266;
  *(void *)algn_2676C8868 = 0xE500000000000000;
  qword_2676C8870 = swift_getKeyPath();
  unk_2676C8878 = 0x6E6F697461746F72;
  qword_2676C8880 = 0xE800000000000000;
  qword_2676C8888 = swift_getKeyPath();
  strcpy((char *)&qword_2676C8890, "signatureItem");
  HIWORD(qword_2676C8898) = -4864;
  qword_2676C88A0 = swift_getKeyPath();
  unk_2676C88A8 = 0x726F6C6F63;
  qword_2676C88B0 = 0xE500000000000000;
  qword_2676C88B8 = swift_getKeyPath();
  qword_2676C88C0 = 0x6874646977;
  qword_2676C88C8 = 0xE500000000000000;
  uint64_t result = swift_getKeyPath();
  qword_2676C88D0 = result;
  return result;
}

{
  uint64_t result;

  *(void *)&static PDFAnnotationElement.fields = 7102838;
  *((void *)&static PDFAnnotationElement.fields + 1) = 0xE300000000000000;
  qword_2676C99D0 = swift_getKeyPath();
  unk_2676C99D8 = 7500915;
  *(void *)&xmmword_2676C99E0 = 0xE300000000000000;
  *((void *)&xmmword_2676C99E0 + 1) = swift_getKeyPath();
  unk_2676C99F0 = 67;
  qword_2676C99F8 = 0xE100000000000000;
  *(void *)&xmmword_2676C9A00 = swift_getKeyPath();
  *((void *)&xmmword_2676C9A00 + 1) = 70;
  qword_2676C9A10 = 0xE100000000000000;
  qword_2676C9A18 = swift_getKeyPath();
  unk_2676C9A20 = 77;
  qword_2676C9A28 = 0xE100000000000000;
  qword_2676C9A30 = swift_getKeyPath();
  unk_2676C9A38 = 0x6570616873;
  *(void *)&xmmword_2676C9A40 = 0xE500000000000000;
  *((void *)&xmmword_2676C9A40 + 1) = swift_getKeyPath();
  unk_2676C9A50 = 0x65707974627573;
  qword_2676C9A58 = 0xE700000000000000;
  *(void *)&xmmword_2676C9A60 = swift_getKeyPath();
  *((void *)&xmmword_2676C9A60 + 1) = 0x7075706F70;
  qword_2676C9A70 = 0xE500000000000000;
  uint64_t result = swift_getKeyPath();
  qword_2676C9A78 = result;
  return result;
}

{
  uint64_t result;

  static GraphElement.fields = 0x656D617266;
  *(void *)algn_26ACB1728 = 0xE500000000000000;
  qword_26ACB1730 = swift_getKeyPath();
  unk_26ACB1738 = 0x6E6F697461746F72;
  qword_26ACB1740 = 0xE800000000000000;
  qword_26ACB1748 = swift_getKeyPath();
  qword_26ACB1750 = 0x6973736572707865;
  qword_26ACB1758 = 0xEB00000000736E6FLL;
  qword_26ACB1760 = swift_getKeyPath();
  strcpy(byte_26ACB1768, "visibleRange");
  BYTE5(qword_26ACB1770) = 0;
  HIWORD(qword_26ACB1770) = -5120;
  uint64_t result = swift_getKeyPath();
  qword_26ACB1778 = result;
  return result;
}

{
  uint64_t result;

  static GraphableExpression.fields = 0x6973736572707865;
  unk_26ACB26E0 = 0xEA00000000006E6FLL;
  qword_26ACB26E8 = swift_getKeyPath();
  unk_26ACB26F0 = 0x696669746E656469;
  qword_26ACB26F8 = 0xEA00000000007265;
  qword_26ACB2700 = swift_getKeyPath();
  qword_26ACB2708 = 0x726F6C6F63;
  qword_26ACB2710 = 0xE500000000000000;
  qword_26ACB2718 = swift_getKeyPath();
  unk_26ACB2720 = 0xD000000000000011;
  qword_26ACB2728 = 0x800000020C8520A0;
  uint64_t result = swift_getKeyPath();
  qword_26ACB2730 = result;
  return result;
}

{
  uint64_t result;

  *(void *)&static PaperDocumentPage.fields = 0x73646E756F62;
  *((void *)&static PaperDocumentPage.fields + 1) = 0xE600000000000000;
  qword_2676CA8A8 = swift_getKeyPath();
  unk_2676CA8B0 = 0x656D617266;
  *(void *)&xmmword_2676CA8B8 = 0xE500000000000000;
  *((void *)&xmmword_2676CA8B8 + 1) = swift_getKeyPath();
  unk_2676CA8C8 = 0x6E6F697461746F72;
  qword_2676CA8D0 = 0xE800000000000000;
  *(void *)&xmmword_2676CA8D8 = swift_getKeyPath();
  *((void *)&xmmword_2676CA8D8 + 1) = 0x65676150666470;
  qword_2676CA8E8 = 0xE700000000000000;
  qword_2676CA8F0 = swift_getKeyPath();
  unk_2676CA8F8 = 0x676E6977617264;
  qword_2676CA900 = 0xE700000000000000;
  qword_2676CA908 = swift_getKeyPath();
  unk_2676CA910 = 0x656D656C65627573;
  *(void *)&xmmword_2676CA918 = 0xEB0000000073746ELL;
  *((void *)&xmmword_2676CA918 + 1) = swift_getKeyPath();
  unk_2676CA928 = 0x7344496F6E6E61;
  qword_2676CA930 = 0xE700000000000000;
  *(void *)&xmmword_2676CA938 = swift_getKeyPath();
  *((void *)&xmmword_2676CA938 + 1) = 0x73646E756F4263;
  qword_2676CA948 = 0xE700000000000000;
  qword_2676CA950 = swift_getKeyPath();
  unk_2676CA958 = 0x7367616C66;
  qword_2676CA960 = 0xE500000000000000;
  uint64_t result = swift_getKeyPath();
  qword_2676CA968 = result;
  return result;
}

{
  uint64_t result;

  static TextBox.fields = 0x656D617266;
  *(void *)algn_2676CB738 = 0xE500000000000000;
  qword_2676CB740 = swift_getKeyPath();
  unk_2676CB748 = 0x6E6F697461746F72;
  qword_2676CB750 = 0xE800000000000000;
  qword_2676CB758 = swift_getKeyPath();
  qword_2676CB760 = 1954047348;
  qword_2676CB768 = 0xE400000000000000;
  qword_2676CB770 = swift_getKeyPath();
  strcpy(byte_2676CB778, "isFixedWidth");
  BYTE5(qword_2676CB780) = 0;
  HIWORD(qword_2676CB780) = -5120;
  uint64_t result = swift_getKeyPath();
  qword_2676CB788 = result;
  return result;
}

{
  uint64_t result;

  *(void *)&static Image.fields = 0x73646E756F62;
  *((void *)&static Image.fields + 1) = 0xE600000000000000;
  qword_26ACB3F28 = swift_getKeyPath();
  unk_26ACB3F30 = 0x656D617266;
  *(void *)&xmmword_26ACB3F38 = 0xE500000000000000;
  *((void *)&xmmword_26ACB3F38 + 1) = swift_getKeyPath();
  unk_26ACB3F48 = 0x6E6F697461746F72;
  qword_26ACB3F50 = 0xE800000000000000;
  *(void *)&xmmword_26ACB3F58 = swift_getKeyPath();
  *((void *)&xmmword_26ACB3F58 + 1) = 0x6567616D69;
  qword_26ACB3F68 = 0xE500000000000000;
  qword_26ACB3F70 = swift_getKeyPath();
  unk_26ACB3F78 = 0x7470697263736564;
  qword_26ACB3F80 = 0xEB000000006E6F69;
  qword_26ACB3F88 = swift_getKeyPath();
  unk_26ACB3F90 = 0x676E6977617264;
  *(void *)&xmmword_26ACB3F98 = 0xE700000000000000;
  *((void *)&xmmword_26ACB3F98 + 1) = swift_getKeyPath();
  unk_26ACB3FA8 = 7234919;
  qword_26ACB3FB0 = 0xE300000000000000;
  *(void *)&xmmword_26ACB3FB8 = swift_getKeyPath();
  *((void *)&xmmword_26ACB3FB8 + 1) = 0x656D656C65627573;
  qword_26ACB3FC8 = 0xEB0000000073746ELL;
  qword_26ACB3FD0 = swift_getKeyPath();
  unk_26ACB3FD8 = 0x73646E756F4263;
  qword_26ACB3FE0 = 0xE700000000000000;
  qword_26ACB3FE8 = swift_getKeyPath();
  unk_26ACB3FF0 = 0x7265746C6966;
  *(void *)&xmmword_26ACB3FF8 = 0xE600000000000000;
  uint64_t result = swift_getKeyPath();
  *((void *)&xmmword_26ACB3FF8 + 1) = result;
  return result;
}

{
  uint64_t result;

  static PaperDocument.fields = 0x7365676170;
  unk_26ACB5140 = 0xE500000000000000;
  qword_26ACB5148 = swift_getKeyPath();
  unk_26ACB5150 = 6710384;
  qword_26ACB5158 = 0xE300000000000000;
  uint64_t result = swift_getKeyPath();
  qword_26ACB5160 = result;
  return result;
}

{
  uint64_t result;

  *(void *)&static Paper.fields = 0x73646E756F62;
  *((void *)&static Paper.fields + 1) = 0xE600000000000000;
  qword_26ACAFA68 = swift_getKeyPath();
  unk_26ACAFA70 = 0x656D617266;
  *(void *)&xmmword_26ACAFA78 = 0xE500000000000000;
  *((void *)&xmmword_26ACAFA78 + 1) = swift_getKeyPath();
  unk_26ACAFA88 = 0x6E6F697461746F72;
  qword_26ACAFA90 = 0xE800000000000000;
  *(void *)&xmmword_26ACAFA98 = swift_getKeyPath();
  *((void *)&xmmword_26ACAFA98 + 1) = 0x676E6977617264;
  qword_26ACAFAA8 = 0xE700000000000000;
  qword_26ACAFAB0 = swift_getKeyPath();
  unk_26ACAFAB8 = 0x756F72676B636162;
  qword_26ACAFAC0 = 0xEF726F6C6F43646ELL;
  qword_26ACAFAC8 = swift_getKeyPath();
  unk_26ACAFAD0 = 1701667182;
  *(void *)&xmmword_26ACAFAD8 = 0xE400000000000000;
  *((void *)&xmmword_26ACAFAD8 + 1) = swift_getKeyPath();
  unk_26ACAFAE8 = 0x7367616C66;
  qword_26ACAFAF0 = 0xE500000000000000;
  *(void *)&xmmword_26ACAFAF8 = swift_getKeyPath();
  *((void *)&xmmword_26ACAFAF8 + 1) = 0x656D656C65627573;
  qword_26ACAFB08 = 0xEB0000000073746ELL;
  uint64_t result = swift_getKeyPath();
  qword_26ACAFB10 = result;
  return result;
}

{
  uint64_t result;

  static Link.fields = 0x656D617266;
  unk_2676CD7D0 = 0xE500000000000000;
  qword_2676CD7D8 = swift_getKeyPath();
  unk_2676CD7E0 = 0x6E6F697461746F72;
  qword_2676CD7E8 = 0xE800000000000000;
  qword_2676CD7F0 = swift_getKeyPath();
  qword_2676CD7F8 = 0xD000000000000019;
  qword_2676CD800 = 0x800000020C85B4D0;
  uint64_t result = swift_getKeyPath();
  qword_2676CD808 = result;
  return result;
}

{
  uint64_t result;

  static UnknownPage.fields = 0x656D617266;
  *(void *)algn_2676CE868 = 0xE500000000000000;
  uint64_t result = swift_getKeyPath();
  qword_2676CE870 = result;
  return result;
}

{
  uint64_t result;

  static UnknownCanvasElement.fields = 0x656D617266;
  unk_2676CEAC0 = 0xE500000000000000;
  qword_2676CEAC8 = swift_getKeyPath();
  unk_2676CEAD0 = 0x6E6F697461746F72;
  qword_2676CEAD8 = 0xE800000000000000;
  qword_2676CEAE0 = swift_getKeyPath();
  qword_2676CEAE8 = 0x69616E626D756874;
  qword_2676CEAF0 = 0xE90000000000006CLL;
  qword_2676CEAF8 = swift_getKeyPath();
  strcpy(byte_2676CEB00, "minAppVersion");
  HIWORD(qword_2676CEB08) = -4864;
  uint64_t result = swift_getKeyPath();
  qword_2676CEB10 = result;
  return result;
}

{
  uint64_t result;

  static CanvasState.fields = 0x6F697463656C6573;
  unk_26ACB4770 = 0xEA0000000000736ELL;
  uint64_t result = swift_getKeyPath();
  qword_26ACB4778 = result;
  return result;
}

{
  uint64_t result;

  *(void *)&static Shape.fields = 0x656D617266;
  *((void *)&static Shape.fields + 1) = 0xE500000000000000;
  qword_26ACB29B8 = swift_getKeyPath();
  unk_26ACB29C0 = 0x6E6F697461746F72;
  *(void *)&xmmword_26ACB29C8 = 0xE800000000000000;
  *((void *)&xmmword_26ACB29C8 + 1) = swift_getKeyPath();
  unk_26ACB29D8 = 0x6F6C6F436C6C6966;
  qword_26ACB29E0 = 0xE900000000000072;
  *(void *)&xmmword_26ACB29E8 = swift_getKeyPath();
  *((void *)&xmmword_26ACB29E8 + 1) = 0x6F43656B6F727473;
  qword_26ACB29F8 = 0xEB00000000726F6CLL;
  qword_26ACB2A00 = swift_getKeyPath();
  unk_26ACB2A08 = 0x6957656B6F727473;
  qword_26ACB2A10 = 0xEB00000000687464;
  qword_26ACB2A18 = swift_getKeyPath();
  unk_26ACB2A20 = 1701869940;
  *(void *)&xmmword_26ACB2A28 = 0xE400000000000000;
  *((void *)&xmmword_26ACB2A28 + 1) = swift_getKeyPath();
  unk_26ACB2A38 = 0x7974696361706FLL;
  qword_26ACB2A40 = 0xE700000000000000;
  *(void *)&xmmword_26ACB2A48 = swift_getKeyPath();
  *((void *)&xmmword_26ACB2A48 + 1) = 0x6E694C7472617473;
  qword_26ACB2A58 = 0xEC000000646E4565;
  qword_26ACB2A60 = swift_getKeyPath();
  unk_26ACB2A68 = 0x45656E694C646E65;
  qword_26ACB2A70 = 0xEA0000000000646ELL;
  qword_26ACB2A78 = swift_getKeyPath();
  unk_26ACB2A80 = 0xD000000000000013;
  *(void *)&xmmword_26ACB2A88 = 0x800000020C85E880;
  uint64_t result = swift_getKeyPath();
  *((void *)&xmmword_26ACB2A88 + 1) = result;
  return result;
}

{
  uint64_t result;

  *(void *)&static ShapeSecondaryProperties.fields = 1954047348;
  *((void *)&static ShapeSecondaryProperties.fields + 1) = 0xE400000000000000;
  qword_26ACB2850 = swift_getKeyPath();
  unk_26ACB2858 = 0xD000000000000015;
  *(void *)&xmmword_26ACB2860 = 0x800000020C860D70;
  *((void *)&xmmword_26ACB2860 + 1) = swift_getKeyPath();
  strcpy(byte_26ACB2870, "resizeBehavior");
  HIBYTE(qword_26ACB2878) = -18;
  *(void *)&xmmword_26ACB2880 = swift_getKeyPath();
  *((void *)&xmmword_26ACB2880 + 1) = 7894369;
  qword_26ACB2890 = 0xE300000000000000;
  qword_26ACB2898 = swift_getKeyPath();
  unk_26ACB28A0 = 0x7367616C66;
  qword_26ACB28A8 = 0xE500000000000000;
  qword_26ACB28B0 = swift_getKeyPath();
  unk_26ACB28B8 = 0x7453656B6F727473;
  *(void *)&xmmword_26ACB28C0 = 0xEB00000000656C79;
  *((void *)&xmmword_26ACB28C0 + 1) = swift_getKeyPath();
  unk_26ACB28D0 = 0x776F64616873;
  qword_26ACB28D8 = 0xE600000000000000;
  uint64_t result = swift_getKeyPath();
  qword_26ACB28E0 = result;
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance PencilAndPaperFeatureFlags()
{
  return PencilAndPaperFeatureFlags.feature.getter(*v0);
}

const char *PencilAndPaperFeatureFlags.feature.getter(char a1)
{
  uint64_t result = "SelectionRewrite";
  switch(a1)
  {
    case 1:
      uint64_t result = "ReflowOnResize";
      break;
    case 2:
      uint64_t result = "GenerationTool";
      break;
    case 3:
      uint64_t result = "CatalystDrawing";
      break;
    case 4:
      uint64_t result = "DoubleTapAnywhereForFormField";
      break;
    case 5:
      uint64_t result = "MathPaper";
      break;
    case 6:
      uint64_t result = "PasteAsHandwriting";
      break;
    case 7:
      uint64_t result = "HandwritingEditing";
      break;
    case 8:
      uint64_t result = "GraphableVariables";
      break;
    case 9:
      uint64_t result = "StickerFromPKDrawing";
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static CRStruct_Base_2.fields.getter in conformance PKDrawingStruct@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26ACB4820;
  uint64_t v4 = qword_26ACB4828;
  uint64_t v3 = unk_26ACB4830;
  uint64_t v5 = qword_26ACB4838;
  uint64_t v6 = qword_26ACB4840;
  *a1 = static PKDrawingStruct.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

void TiledTextView.linedPaper.setter(void *a1)
{
  uint64_t v2 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_paperLinedPaper];
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_paperLinedPaper] = a1;
  id v18 = a1;
  if (v2)
  {
    id v3 = v2;
    objc_msgSend(v3, sel_lineSpacing);
    if (v4 > 0.0)
    {

      goto LABEL_7;
    }
    objc_msgSend(v3, sel_lineSpacing);
    double v6 = v5;

    if (v6 > 0.0) {
      goto LABEL_7;
    }
  }
  objc_msgSend(v18, sel_lineSpacing);
  if (v7 > 0.0 || (objc_msgSend(v18, sel_lineSpacing), v8 > 0.0))
  {
LABEL_7:
    unint64_t v9 = TiledTextView.paperAttachments.getter();
    unint64_t v10 = v9;
    if (v9 >> 62)
    {
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      if (v11) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v11)
      {
LABEL_9:
        if (v11 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v11; ++i)
        {
          if ((v10 & 0xC000000000000001) != 0) {
            id v13 = (id)MEMORY[0x21054E050](i, v10);
          }
          else {
            id v13 = *(id *)(v10 + 8 * i + 32);
          }
          uint64_t v14 = v13;
          objc_msgSend(v13, sel_setNeedsLayout);
        }
      }
    }
    swift_bridgeObjectRelease();
    id v15 = objc_msgSend(v1, sel_standInAttachmentView);
    if (v15)
    {
      id v16 = v15;
      id v17 = objc_msgSend(v15, sel_attachmentContainerView);

      objc_msgSend(v17, sel_setNeedsLayout);
    }
  }
}

CGPath *ppk_bezierPathWithContinuousCornerRoundedRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  return ppk_bezierPathWithRoundedRect(0, 0, a1, a2, a3, a4, a5, a5, a5, a5);
}

CGPath *ppk_bezierPathWithRoundedRect(int a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8, double a9, double a10)
{
  Mutable = CGPathCreateMutable();
  if (a1)
  {
    _sanitizeRadiusForRect(a7, a3, a4, a5, a6);
    double v40 = v21;
    _sanitizeRadiusForRect(a8, a3, a4, a5, a6);
    double v42 = v22;
    _sanitizeRadiusForRect(a9, a3, a4, a5, a6);
    double v44 = v23;
    _sanitizeRadiusForRect(a10, a3, a4, a5, a6);
    double v25 = v24;
    v46.origin.x = a3;
    v46.origin.y = a4;
    v46.size.width = a5;
    v46.size.height = a6;
    double MinX = CGRectGetMinX(v46);
    v47.origin.x = a3;
    v47.origin.y = a4;
    v47.size.width = a5;
    v47.size.height = a6;
    CGFloat MinY = CGRectGetMinY(v47);
    CGPathMoveToPoint(Mutable, 0, v25 + MinX, MinY);
    _addLegacyRectangleQuarterThroughCorner(Mutable, 0, a2, a3, a4, a5, a6, v40);
    _addLegacyRectangleQuarterThroughCorner(Mutable, 1, a2, a3, a4, a5, a6, v42);
    _addLegacyRectangleQuarterThroughCorner(Mutable, 2, a2, a3, a4, a5, a6, v44);
    _addLegacyRectangleQuarterThroughCorner(Mutable, 3, a2, a3, a4, a5, a6, v25);
  }
  else
  {
    _sanitizeRadiusForRect(a7, a3, a4, a5, a6);
    double v41 = v28;
    _sanitizeRadiusForRect(a8, a3, a4, a5, a6);
    double v43 = v29;
    _sanitizeRadiusForRect(a9, a3, a4, a5, a6);
    double v45 = v30;
    _sanitizeRadiusForRect(a10, a3, a4, a5, a6);
    double v32 = v31;
    v48.origin.x = a3;
    v48.origin.y = a4;
    v48.size.width = a5;
    v48.size.height = a6;
    CGFloat Width = CGRectGetWidth(v48);
    double v34 = Width * 0.5;
    double v35 = Width - v41 * 1.528665;
    if (v34 >= v35) {
      double v35 = v34;
    }
    if (v35 >= v32 * 1.528665) {
      double v36 = v32 * 1.528665;
    }
    else {
      double v36 = v35;
    }
    v49.origin.x = a3;
    v49.origin.y = a4;
    v49.size.width = a5;
    v49.size.height = a6;
    double v37 = CGRectGetMinX(v49);
    v50.origin.x = a3;
    v50.origin.y = a4;
    v50.size.width = a5;
    v50.size.height = a6;
    CGFloat v38 = CGRectGetMinY(v50);
    CGPathMoveToPoint(Mutable, 0, v37 + v36, v38);
    _addContinuousRectangleQuarterThroughCorner(Mutable, 0, a2, a3, a4, a5, a6, v41, v32, v43);
    _addContinuousRectangleQuarterThroughCorner(Mutable, 1, a2, a3, a4, a5, a6, v43, v45, v41);
    _addContinuousRectangleQuarterThroughCorner(Mutable, 2, a2, a3, a4, a5, a6, v45, v43, v32);
    _addContinuousRectangleQuarterThroughCorner(Mutable, 3, a2, a3, a4, a5, a6, v32, v41, v45);
  }
  CGPathCloseSubpath(Mutable);
  return Mutable;
}

CGPath *ppk_bezierPathWithLegacyRoundedRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  return ppk_bezierPathWithRoundedRect(1, 0, a1, a2, a3, a4, a5, a5, a5, a5);
}

double ppk_minimumLengthForSideToHaveFullContinuityWithCornerRadius(double a1, double a2)
{
  return a2 * 1.528665 + a1 * 1.528665;
}

void _sanitizeRadiusForRect(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  v9.origin.x = a2;
  v9.origin.y = a3;
  v9.size.width = a4;
  v9.size.height = a5;
  CGRectGetWidth(v9);
  v10.origin.x = a2;
  v10.origin.y = a3;
  v10.size.width = a4;
  v10.size.height = a5;
  CGRectGetHeight(v10);
}

double _cornerPointOnRect(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  switch(a1)
  {
    case 0:
      double MaxX = CGRectGetMaxX(*(CGRect *)&a2);
      goto LABEL_7;
    case 1:
      double MinX = CGRectGetMaxX(*(CGRect *)&a2);
      goto LABEL_5;
    case 2:
      double MinX = CGRectGetMinX(*(CGRect *)&a2);
LABEL_5:
      double v5 = MinX;
      v13.origin.x = a2;
      v13.origin.y = a3;
      v13.size.width = a4;
      v13.size.height = a5;
      CGRectGetMaxY(v13);
      break;
    case 3:
      double MaxX = CGRectGetMinX(*(CGRect *)&a2);
LABEL_7:
      double v5 = MaxX;
      v14.origin.x = a2;
      v14.origin.y = a3;
      v14.size.width = a4;
      v14.size.height = a5;
      CGRectGetMinY(v14);
      break;
    default:
      return v5;
  }
  return v5;
}

void _addContinuousRectangleQuarterThroughCorner(CGPath *a1, uint64_t a2, char a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9, double a10)
{
  double Width = CGRectGetWidth(*(CGRect *)&a4);
  v73.origin.x = a4;
  v73.origin.y = a5;
  v73.size.width = a6;
  v73.size.height = a7;
  double Height = CGRectGetHeight(v73);
  double v22 = Width * 0.5;
  double v23 = Height * 0.5;
  if (Width * 0.5 < Width - a9 * 1.528665) {
    double v22 = Width - a9 * 1.528665;
  }
  double v24 = Height - a10 * 1.528665;
  if (v23 < v24) {
    double v23 = v24;
  }
  double v25 = a8 * 1.528665;
  if (v22 >= a8 * 1.528665) {
    double v26 = a8 * 1.528665;
  }
  else {
    double v26 = v22;
  }
  if (v23 >= v25) {
    double v27 = a8 * 1.528665;
  }
  else {
    double v27 = v23;
  }
  double v67 = a8;
  double v28 = v25 - a8;
  double v70 = 0.0;
  double v64 = 0.0;
  if (v25 - a8 != 0.0)
  {
    double v64 = 1.0 - (v25 - v26) / v28;
    double v70 = 1.0 - (v25 - v27) / v28;
  }
  double v29 = _cornerPointOnRect(a2, a4, a5, a6, a7);
  double v31 = v30;
  double v32 = _insetCorner(a2, v29, v30, v26);
  unint64_t v34 = a2 & 0xFFFFFFFFFFFFFFFDLL;
  double v68 = v31;
  double v65 = v33;
  double v66 = v32;
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
    CGFloat v35 = v33;
  }
  else {
    CGFloat v35 = v31;
  }
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
    CGFloat v36 = v29;
  }
  else {
    CGFloat v36 = v32;
  }
  if (a3)
  {
    CGPathAddLineToPoint(a1, 0, v36, v35);
LABEL_30:
    if ((unint64_t)(a2 - 1) > 2) {
      double v38 = 290.0;
    }
    else {
      double v38 = dbl_20C830728[a2 - 1];
    }
    double v39 = v70;
    if (v64 < v70) {
      double v39 = v64;
    }
    double v40 = 1.0 - v39;
    double v41 = _insetCorner(a2, v29, v68, ((1.0 - v39) * 0.05 + 0.95) * v67);
    double v43 = v42;
    double v44 = v40 * 0.06875015 + 0.93124985;
    double v45 = v38 * 0.0174532925;
    double v46 = (v38 + 50.0) * 0.0174532925;
    double v47 = v44 * v67;
    __double2 v48 = __sincos_stret(v45);
    double v61 = v43 + v47 * v48.__sinval;
    double v62 = v41 + v47 * v48.__cosval;
    __double2 v49 = __sincos_stret(v46);
    if (v34) {
      double v50 = v64;
    }
    else {
      double v50 = v70;
    }
    double v63 = v50;
    if (v34) {
      double v51 = v70;
    }
    else {
      double v51 = v64;
    }
    if (v34) {
      double v52 = v66;
    }
    else {
      double v52 = v29;
    }
    double v53 = v65;
    if (v34) {
      double v53 = v68;
    }
    CGFloat v69 = v53;
    CGFloat v71 = v52;
    _addContinuationSegment(a1, a2, 1, v62, v61, v67, v51);
    __double2 v54 = __sincos_stret((v46 - v45) * 0.5);
    double v55 = v47 * ((1.0 - v54.__cosval) * 4.0 / (v54.__sinval * 3.0));
    CGPathAddCurveToPoint(a1, 0, v62 - v55 * v48.__sinval, v61 + v55 * v48.__cosval, v41 + v47 * v49.__cosval + v55 * v49.__sinval, v43 + v47 * v49.__sinval - v55 * v49.__cosval, v41 + v47 * v49.__cosval, v43 + v47 * v49.__sinval);
    _addContinuationSegment(a1, a2, 0, v71, v69, v67, v63);
    return;
  }
  CGPoint CurrentPoint = CGPathGetCurrentPoint(a1);
  if (CurrentPoint.x != v36 && vabdd_f64(CurrentPoint.x, v36) >= 0.1
    || CurrentPoint.y != v35 && vabdd_f64(CurrentPoint.y, v35) >= 0.1
    || ((CGFloat v56 = a4, v57 = a5, v58 = a6, v59 = a7, !v34)
      ? (double v60 = CGRectGetWidth(*(CGRect *)&v56))
      : (double v60 = CGRectGetHeight(*(CGRect *)&v56)),
        v60 == 0.0 || fabs(v60) < 0.00999999978))
  {
    CGPathAddLineToPoint(a1, 0, v36, v35);
  }
  if (v29 != v66 && vabdd_f64(v29, v66) >= 0.1 || v31 != v65 && vabdd_f64(v31, v65) >= 0.1) {
    goto LABEL_30;
  }
}

double _insetCorner(uint64_t a1, double result, double a3, double a4)
{
  switch(a1)
  {
    case 0:
      uint64_t result = result - a4;
      break;
    case 1:
      uint64_t result = result - a4;
      break;
    case 2:
      uint64_t result = result + a4;
      break;
    case 3:
      uint64_t result = result + a4;
      break;
    default:
      return result;
  }
  return result;
}

void _addContinuationSegment(const CGPath *a1, uint64_t a2, int a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  CGPoint CurrentPoint = CGPathGetCurrentPoint(a1);
  if ((unint64_t)(a2 - 1) > 2) {
    double v15 = 270.0;
  }
  else {
    double v15 = dbl_20C830740[a2 - 1];
  }
  int v16 = (a2 & 0xFFFFFFFFFFFFFFFDLL) != 0;
  double v17 = 0.8;
  double v18 = 0.0;
  if (v16 != a3) {
    double v19 = 0.0;
  }
  else {
    double v19 = 0.8;
  }
  if (v16 != a3) {
    double v20 = 0.0;
  }
  else {
    double v20 = 0.5;
  }
  if (v16 != a3) {
    double v18 = 0.5;
  }
  else {
    double v17 = 0.0;
  }
  if (a3) {
    double y = a5;
  }
  else {
    double y = CurrentPoint.y;
  }
  if (a3) {
    double v22 = CurrentPoint.y;
  }
  else {
    double v22 = a5;
  }
  double v23 = y - v22;
  double v24 = v22 + v23 * v19;
  double v25 = v22 + v23 * v20;
  if (a3) {
    double v26 = v24;
  }
  else {
    double v26 = v25;
  }
  double v42 = v26;
  if (a3) {
    double x = a4;
  }
  else {
    double x = CurrentPoint.x;
  }
  if (a3) {
    double v28 = CurrentPoint.x;
  }
  else {
    double v28 = a4;
  }
  double v29 = x - v28;
  double v30 = v28 + v29 * v17;
  double v31 = v28 + v29 * v18;
  if (a3) {
    double v32 = v30;
  }
  else {
    double v32 = v31;
  }
  if (a3) {
    double v24 = v25;
  }
  double v40 = v24;
  double v41 = v32;
  if (a3) {
    double v30 = v31;
  }
  double v39 = v30;
  if (!a3) {
    double v15 = v15 + 50.0 + 20.0;
  }
  double v33 = v15 * 0.0174532925;
  double v34 = (v15 + 20.0) * 0.0174532925;
  __double2 v35 = __sincos_stret((v34 - v15 * 0.0174532925) * 0.5);
  double v36 = (1.0 - v35.__cosval) * 4.0 / (v35.__sinval * 3.0) * a6;
  __double2 v37 = __sincos_stret(v33);
  __double2 v38 = __sincos_stret(v34);
  CGPathAddCurveToPoint(a1, 0, v39 * a7 + (CurrentPoint.x - v36 * v37.__sinval) * (1.0 - a7), v40 * a7 + (CurrentPoint.y + v36 * v37.__cosval) * (1.0 - a7), v41 * a7 + (a4 + v36 * v38.__sinval) * (1.0 - a7), v42 * a7 + (a5 - v36 * v38.__cosval) * (1.0 - a7), a4, a5);
}

void _addLegacyRectangleQuarterThroughCorner(CGPath *a1, uint64_t a2, char a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8)
{
  double v16 = _cornerPointOnRect(a2, a4, a5, a6, a7);
  double v18 = v17;
  double v38 = a8;
  double v19 = _insetCorner(a2, v16, v17, a8);
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
    CGFloat v21 = v16;
  }
  else {
    CGFloat v21 = v19;
  }
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
    CGFloat v22 = v20;
  }
  else {
    CGFloat v22 = v18;
  }
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
    double v16 = v19;
  }
  else {
    double v18 = v20;
  }
  if (a3)
  {
    CGPathAddLineToPoint(a1, 0, v21, v22);
LABEL_21:
    CGPoint CurrentPoint = CGPathGetCurrentPoint(a1);
    double v25 = v18;
    if ((unint64_t)(a2 - 1) > 2) {
      double v26 = 270.0;
    }
    else {
      double v26 = dbl_20C830740[a2 - 1];
    }
    double v27 = v26 * 0.0174532925;
    double v28 = (v26 + 90.0) * 0.0174532925;
    __double2 v29 = __sincos_stret((v28 - v26 * 0.0174532925) * 0.5);
    __double2 v31 = __sincos_stret(v27);
    __double2 v32 = __sincos_stret(v28);
    double v30 = (1.0 - v29.__cosval) * 4.0 / (v29.__sinval * 3.0) * v38;
    CGPathAddCurveToPoint(a1, 0, CurrentPoint.x - v30 * v31.__sinval, CurrentPoint.y + v30 * v31.__cosval, v16 + v30 * v32.__sinval, v25 - v30 * v32.__cosval, v16, v25);
    return;
  }
  CGPoint v23 = CGPathGetCurrentPoint(a1);
  if (v23.x != v21 && vabdd_f64(v23.x, v21) >= 0.1
    || v23.y != v22 && vabdd_f64(v23.y, v22) >= 0.1
    || ((CGFloat v33 = a4, v34 = a5, v35 = a6, v36 = a7, (a2 & 0xFFFFFFFFFFFFFFFDLL) == 0)
      ? (double Width = CGRectGetWidth(*(CGRect *)&v33))
      : (double Width = CGRectGetHeight(*(CGRect *)&v33)),
        Width == 0.0 || fabs(Width) < 0.00999999978))
  {
    CGPathAddLineToPoint(a1, 0, v21, v22);
  }
  if (v21 != v16 && vabdd_f64(v21, v16) >= 0.1 || v22 != v18 && vabdd_f64(v22, v18) >= 0.1) {
    goto LABEL_21;
  }
}

void generateRandomKey(void *__buf)
{
  do
  {
    arc4random_buf(__buf, 0x10uLL);
    if (*__buf) {
      BOOL v2 = 0;
    }
    else {
      BOOL v2 = __buf[1] == 0;
    }
  }
  while (v2 || (*__buf & __buf[1]) == -1);
}

void sub_20C2E0198(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id getMUImageReaderClass()
{
  uint64_t v4 = 0;
  double v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getMUImageReaderClass_softClass;
  uint64_t v7 = getMUImageReaderClass_softClass;
  if (!getMUImageReaderClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMUImageReaderClass_block_invoke;
    v3[3] = &unk_2640D3AD8;
    v3[4] = &v4;
    __getMUImageReaderClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20C2E1D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMUImageReaderClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MarkupUILibraryCore_frameworkLibrary)
  {
    v4[1] = MEMORY[0x263EF8330];
    v4[2] = 3221225472;
    v4[3] = __MarkupUILibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_2640D3AF8;
    uint64_t v6 = 0;
    MarkupUILibraryCore_frameworkLibrardouble y = _sl_dlopen();
    BOOL v2 = (void *)v4[0];
    if (!MarkupUILibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("MUImageReader");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    BOOL v2 = (void *)__getMUImageReaderClass_block_invoke_cold_1();
LABEL_8:
    free(v2);
  }
  getMUImageReaderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MarkupUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MarkupUILibraryCore_frameworkLibrardouble y = result;
  return result;
}

double PDFDegToRad(double a1)
{
  return a1 / 180.0 * 3.14159265;
}

void sub_20C2E4568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
}

void sub_20C2E4764(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_20C2E4DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, id *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20,id a21)
{
}

void sub_20C2E5020(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_20C2E5E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_20C2E6038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_20C2E6DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_20C2E7604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_20C2E8640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMAImageCaptioningSetCaptionIntoMetadataSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!MediaAccessibilityLibraryCore_frameworkLibrary)
  {
    v5[1] = MEMORY[0x263EF8330];
    v5[2] = 3221225472;
    v5[3] = __MediaAccessibilityLibraryCore_block_invoke;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_2640D3D38;
    uint64_t v7 = 0;
    MediaAccessibilityLibraryCore_frameworkLibrardouble y = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    BOOL v2 = (void *)MediaAccessibilityLibraryCore_frameworkLibrary;
    if (MediaAccessibilityLibraryCore_frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  BOOL v2 = (void *)MediaAccessibilityLibraryCore_frameworkLibrary;
LABEL_5:
  uint64_t result = dlsym(v2, "MAImageCaptioningSetCaptionIntoMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMAImageCaptioningSetCaptionIntoMetadataSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MediaAccessibilityLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaAccessibilityLibraryCore_frameworkLibrardouble y = result;
  return result;
}

void sub_20C2E99FC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id getPXFileBackedUIMediaProviderClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getPXFileBackedUIMediaProviderClass_softClass;
  uint64_t v7 = getPXFileBackedUIMediaProviderClass_softClass;
  if (!getPXFileBackedUIMediaProviderClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPXFileBackedUIMediaProviderClass_block_invoke;
    v3[3] = &unk_2640D3AD8;
    v3[4] = &v4;
    __getPXFileBackedUIMediaProviderClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20C2E9C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getPXFileBackedAssetClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getPXFileBackedAssetClass_softClass;
  uint64_t v7 = getPXFileBackedAssetClass_softClass;
  if (!getPXFileBackedAssetClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPXFileBackedAssetClass_block_invoke;
    v3[3] = &unk_2640D3AD8;
    v3[4] = &v4;
    __getPXFileBackedAssetClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20C2E9CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20C2EA8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void sub_20C2EB0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  _Block_object_dispose((const void *)(v15 - 80), 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __getPXDisplayAssetViewClass_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PXDisplayAssetView");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPXDisplayAssetViewClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    __getPXDisplayAssetViewClass_block_invoke_cold_1();
    PhotosUICoreLibrary();
  }
}

void PhotosUICoreLibrary()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v1[0] = 0;
  if (!PhotosUICoreLibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x263EF8330];
    v1[2] = 3221225472;
    v1[3] = __PhotosUICoreLibraryCore_block_invoke;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_2640D3E78;
    uint64_t v3 = 0;
    PhotosUICoreLibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  uint64_t v0 = (void *)v1[0];
  if (!PhotosUICoreLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __PhotosUICoreLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PhotosUICoreLibraryCore_frameworkLibrardouble y = result;
  return result;
}

Class __getPXFileBackedUIMediaProviderClass_block_invoke(uint64_t a1)
{
  PhotosUICoreLibrary();
  Class result = objc_getClass("PXFileBackedUIMediaProvider");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPXFileBackedUIMediaProviderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = __getPXFileBackedUIMediaProviderClass_block_invoke_cold_1();
    return (Class)__getPXFileBackedAssetClass_block_invoke(v3);
  }
  return result;
}

Class __getPXFileBackedAssetClass_block_invoke(uint64_t a1)
{
  PhotosUICoreLibrary();
  Class result = objc_getClass("PXFileBackedAsset");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPXFileBackedAssetClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = __getPXFileBackedAssetClass_block_invoke_cold_1();
    return (Class)__getVKCImageAnalyzerClass_block_invoke(v3);
  }
  return result;
}

void __getVKCImageAnalyzerClass_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("VKCImageAnalyzer");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVKCImageAnalyzerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    __getVKCImageAnalyzerClass_block_invoke_cold_1();
    VisionKitCoreLibrary();
  }
}

void VisionKitCoreLibrary()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v1[0] = 0;
  if (!VisionKitCoreLibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x263EF8330];
    v1[2] = 3221225472;
    v1[3] = __VisionKitCoreLibraryCore_block_invoke;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_2640D3E90;
    uint64_t v3 = 0;
    VisionKitCoreLibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  uint64_t v0 = (void *)v1[0];
  if (!VisionKitCoreLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __VisionKitCoreLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  VisionKitCoreLibraryCore_frameworkLibrardouble y = result;
  return result;
}

Class __getVKCImageAnalysisInteractionClass_block_invoke(uint64_t a1)
{
  VisionKitCoreLibrary();
  Class result = objc_getClass("VKCImageAnalysisInteraction");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVKCImageAnalysisInteractionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = __getVKCImageAnalysisInteractionClass_block_invoke_cold_1();
    return (Class)__getVKCImageAnalyzerRequestClass_block_invoke(v3);
  }
  return result;
}

NSArray *__getVKCImageAnalyzerRequestClass_block_invoke(uint64_t a1)
{
  VisionKitCoreLibrary();
  Class result = (NSArray *)objc_getClass("VKCImageAnalyzerRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVKCImageAnalyzerRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = (void *)__getVKCImageAnalyzerRequestClass_block_invoke_cold_1();
    return +[PKStrokeSelectionCoherence readableTypeIdentifiersForItemProvider];
  }
  return result;
}

id PPKGPInProcessMagicPaperViewControllerLogger()
{
  if (PPKGPInProcessMagicPaperViewControllerLogger_onceToken != -1) {
    dispatch_once(&PPKGPInProcessMagicPaperViewControllerLogger_onceToken, &__block_literal_global_3);
  }
  uint64_t v0 = (void *)PPKGPInProcessMagicPaperViewControllerLogger_log;
  return v0;
}

uint64_t __PPKGPInProcessMagicPaperViewControllerLogger_block_invoke()
{
  PPKGPInProcessMagicPaperViewControllerLogger_log = (uint64_t)os_log_create("com.apple.PaperKit", "PPKGPInProcessMagicPaperViewController");
  return MEMORY[0x270F9A758]();
}

id getGPAppleConnectTokenProviderClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getGPAppleConnectTokenProviderClass_softClass;
  uint64_t v7 = getGPAppleConnectTokenProviderClass_softClass;
  if (!getGPAppleConnectTokenProviderClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getGPAppleConnectTokenProviderClass_block_invoke;
    v3[3] = &unk_2640D3AD8;
    v3[4] = &v4;
    __getGPAppleConnectTokenProviderClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20C2ED0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getGPInProcessMagicPaperViewControllerClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getGPInProcessMagicPaperViewControllerClass_softClass;
  uint64_t v7 = getGPInProcessMagicPaperViewControllerClass_softClass;
  if (!getGPInProcessMagicPaperViewControllerClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getGPInProcessMagicPaperViewControllerClass_block_invoke;
    v3[3] = &unk_2640D3AD8;
    v3[4] = &v4;
    __getGPInProcessMagicPaperViewControllerClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20C2ED190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getGPRecipeClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getGPRecipeClass_softClass;
  uint64_t v7 = getGPRecipeClass_softClass;
  if (!getGPRecipeClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getGPRecipeClass_block_invoke;
    v3[3] = &unk_2640D3AD8;
    v3[4] = &v4;
    __getGPRecipeClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20C2ED274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20C2ED5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20C2EDB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_20C2EE4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getGPPromptElementClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getGPPromptElementClass_softClass;
  uint64_t v7 = getGPPromptElementClass_softClass;
  if (!getGPPromptElementClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getGPPromptElementClass_block_invoke;
    v3[3] = &unk_2640D3AD8;
    v3[4] = &v4;
    __getGPPromptElementClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20C2EF100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getGPGenerationRecipeDataClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getGPGenerationRecipeDataClass_softClass;
  uint64_t v7 = getGPGenerationRecipeDataClass_softClass;
  if (!getGPGenerationRecipeDataClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getGPGenerationRecipeDataClass_block_invoke;
    v3[3] = &unk_2640D3AD8;
    v3[4] = &v4;
    __getGPGenerationRecipeDataClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20C2F0040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getGPAppleConnectTokenProviderClass_block_invoke(uint64_t a1)
{
  ImagePlaygroundLibrary();
  Class result = objc_getClass("GPAppleConnectTokenProvider");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getGPAppleConnectTokenProviderClass_block_invoke_cold_1();
  }
  getGPAppleConnectTokenProviderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void ImagePlaygroundLibrary()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v1[0] = 0;
  if (!ImagePlaygroundLibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x263EF8330];
    v1[2] = 3221225472;
    v1[3] = __ImagePlaygroundLibraryCore_block_invoke;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_2640D3F20;
    uint64_t v3 = 0;
    ImagePlaygroundLibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  uint64_t v0 = (void *)v1[0];
  if (!ImagePlaygroundLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __ImagePlaygroundLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ImagePlaygroundLibraryCore_frameworkLibrardouble y = result;
  return result;
}

Class __getGPInProcessMagicPaperViewControllerClass_block_invoke(uint64_t a1)
{
  ImagePlaygroundLibrary();
  Class result = objc_getClass("GPInProcessMagicPaperViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getGPInProcessMagicPaperViewControllerClass_block_invoke_cold_1();
  }
  getGPInProcessMagicPaperViewControllerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getGPRecipeClass_block_invoke(uint64_t a1)
{
  ImagePlaygroundLibrary();
  Class result = objc_getClass("GPRecipe");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getGPRecipeClass_block_invoke_cold_1();
  }
  getGPRecipeClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getGPDrawOnImageRecipeClass_block_invoke(uint64_t a1)
{
  ImagePlaygroundLibrary();
  Class result = objc_getClass("GPDrawOnImageRecipe");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getGPDrawOnImageRecipeClass_block_invoke_cold_1();
  }
  getGPDrawOnImageRecipeClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getGPMagicPaperStateClass_block_invoke(uint64_t a1)
{
  ImagePlaygroundLibrary();
  Class result = objc_getClass("GPMagicPaperState");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getGPMagicPaperStateClass_block_invoke_cold_1();
  }
  getGPMagicPaperStateClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getGPPromptElementClass_block_invoke(uint64_t a1)
{
  ImagePlaygroundLibrary();
  Class result = objc_getClass("GPPromptElement");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getGPPromptElementClass_block_invoke_cold_1();
  }
  getGPPromptElementClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getGPGenerationRecipeDataClass_block_invoke(uint64_t a1)
{
  ImagePlaygroundLibrary();
  Class result = objc_getClass("GPGenerationRecipeData");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getGPGenerationRecipeDataClass_block_invoke_cold_1();
  }
  getGPGenerationRecipeDataClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t one-time initialization function for mathLogger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, mathLogger);
  __swift_project_value_buffer(v0, (uint64_t)mathLogger);
  return Logger.init(subsystem:category:)();
}

uint64_t AnyCanvas.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v5 = (int64_t)v4;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v8 = type metadata accessor for PKDrawing();
  uint64_t v9 = *(void *)(v8 - 8);
  v10.n128_f64[0] = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRect v13 = (void *)MEMORY[0x263F8EED0];
  uint64_t result = (*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *v4) + 0x738))(v10);
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v17 = v15;
    double v18 = (void *)(*(uint64_t (**)(void))((*v13 & *v4) + 0x2F8))();
    uint64_t v20 = v19;
    uint64_t ObjectType = swift_getObjectType();
    CGFloat v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(ObjectType, v20);

    if (v22)
    {
      id v23 = objc_msgSend(v22, sel_drawing);

      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
      PKDrawing._bridgeToObjectiveC()(v24);
      double v26 = v25;
      id v27 = objc_msgSend(v25, sel_uuid);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      CGFloat v36 = &unk_26C1C1038;
      uint64_t v28 = swift_dynamicCastObjCProtocolConditional();
      if (v28
        && ((__double2 v29 = (void *)v28,
             swift_getObjectType(),
             type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject), swift_dynamicCastMetatype())? (double v30 = v29): (double v30 = 0), v30))
      {
        __double2 v31 = specialized static CalculateDocumentController.controllerForDrawingUUID(_:document:observer:)(v30, v16, v17, v5);
        unint64_t v32 = specialized _arrayForceCast<A, B>(_:)(a4);
        CalculateDocumentController.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:)(a1, v34, v35, v32);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        return swift_bridgeObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

void AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v36 = a1;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v12.n128_f64[0] = MEMORY[0x270FA5388](v11 - 8);
  CGRect v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)(*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *v4) + 0x2F8))(v12);
  uint64_t v17 = v16;
  uint64_t ObjectType = swift_getObjectType();
  double v38 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(ObjectType, v17);

  uint64_t v19 = v38;
  if (v38)
  {
    uint64_t v37 = a3;
    uint64_t v20 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate;
    uint64_t v21 = *(void *)&v38[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
    if (v21)
    {
      CGFloat v22 = *(void **)(v21 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
      if (v22)
      {
        id v23 = v22;
        if (a2) {
          a2 = (void *)MEMORY[0x21054D080](v36, a2);
        }
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v22, sel_mathResult_itemUUID_, a2, isa);

        uint64_t v19 = v38;
      }
    }
    if (a4)
    {
      uint64_t v25 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v14, 1, 1, v25);
      uint64_t v26 = swift_allocObject();
      swift_unknownObjectWeakInit();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v37, v8);
      type metadata accessor for MainActor();
      swift_retain();
      uint64_t v27 = static MainActor.shared.getter();
      unint64_t v28 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      __double2 v29 = (char *)swift_allocObject();
      uint64_t v30 = MEMORY[0x263F8F500];
      *((void *)v29 + 2) = v27;
      *((void *)v29 + 3) = v30;
      *((void *)v29 + 4) = v26;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v29[v28], (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      swift_release();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:), (uint64_t)v29);

      swift_release();
    }
    else
    {
      uint64_t v31 = *(void *)&v19[v20];
      if (v31)
      {
        unint64_t v32 = *(void **)(v31 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
        if (v32)
        {
          id v33 = v32;
          Class v34 = UUID._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v33, sel_mathResultAttributionImage_darkModeImage_string_date_itemUUID_, 0, 0, 0, 0, v34);

          uint64_t v19 = v38;
        }
      }
    }
  }
}

uint64_t closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  void v5[6] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5[7] = swift_task_alloc();
  v5[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StocksKitCurrencyCache.Provider?);
  v5[9] = swift_task_alloc();
  v5[10] = type metadata accessor for MainActor();
  v5[11] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[12] = v7;
  v5[13] = v6;
  return MEMORY[0x270FA2498](closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:), v7, v6);
}

uint64_t closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)()
{
  uint64_t v1 = v0[5] + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  v0[14] = v2;
  if (v2)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v6 = (uint64_t (*)(void))((char *)&async function pointer to specialized CalculateResultAttributionHandler.lightModeImage()
                           + async function pointer to specialized CalculateResultAttributionHandler.lightModeImage());
    uint64_t v3 = (void *)swift_task_alloc();
    v0[15] = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
    return v6();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (__cdecl *v3)();
  uint64_t v4;

  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CalculateResultAttributionHandler.darkModeImage()
                             + async function pointer to specialized CalculateResultAttributionHandler.darkModeImage());
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v0[19] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[20] = v2;
  v0[21] = v1;
  return MEMORY[0x270FA2498](closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:), v2, v1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  v0[22] = type metadata accessor for StocksKitCurrencyCache();
  v0[23] = static StocksKitCurrencyCache.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[24] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  uint64_t v2 = v0[9];
  return MEMORY[0x270F13598](v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 184);
  swift_task_dealloc();

  uint64_t v3 = *(void *)(v1 + 168);
  uint64_t v4 = *(void *)(v1 + 160);
  return MEMORY[0x270FA2498](closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:), v4, v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v1 = v0[9];
  swift_release();
  uint64_t v2 = type metadata accessor for StocksKitCurrencyCache.Provider();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  int64_t v5 = v0[9];
  if (v4 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0[9], &demangling cache variable for type metadata for StocksKitCurrencyCache.Provider?);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = StocksKitCurrencyCache.Provider.name.getter();
    uint64_t v7 = v8;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
  }
  v0[25] = v6;
  v0[26] = v7;
  uint64_t v9 = v0[12];
  uint64_t v10 = v0[13];
  return MEMORY[0x270FA2498](closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:), v9, v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v0[27] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[28] = v2;
  v0[29] = v1;
  return MEMORY[0x270FA2498](closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:), v2, v1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  v0[30] = static StocksKitCurrencyCache.shared.getter();
  uint64_t v4 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x263F2FC90] + MEMORY[0x263F2FC90]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[31] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  uint64_t v2 = v0[8];
  return v4(v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 240);
  swift_task_dealloc();

  uint64_t v3 = *(void *)(v1 + 232);
  uint64_t v4 = *(void *)(v1 + 224);
  return MEMORY[0x270FA2498](closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:), v4, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  return MEMORY[0x270FA2498](closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:), v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  Class v25;
  uint64_t (*v26)(void);
  uint64_t v28;

  uint64_t v1 = *(void *)(v0 + 112);
  swift_release();
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate);
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
    uint64_t v4 = *(void *)(v0 + 208);
    if (v3)
    {
      if (v4)
      {
        int64_t v5 = *(void *)(v0 + 200);
        uint64_t v6 = v3;
        uint64_t v7 = (void *)MEMORY[0x21054D080](v5, v4);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v15 = v3;
        uint64_t v7 = 0;
      }
      uint64_t v16 = *(void *)(v0 + 56);
      outlined init with copy of Date?(*(void *)(v0 + 64), v16);
      uint64_t v17 = type metadata accessor for Date();
      double v18 = *(void *)(v17 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
      {
        uint64_t v20 = *(void *)(v0 + 56);
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v17);
      }
      uint64_t v21 = *(void **)(v0 + 144);
      CGFloat v22 = *(void **)(v0 + 128);
      id v23 = *(void **)(v0 + 112);
      double v24 = *(void *)(v0 + 64);
      uint64_t v25 = UUID._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v3, sel_mathResultAttributionImage_darkModeImage_string_date_itemUUID_, v22, v21, v7, isa, v25);

      CGRect v14 = v24;
    }
    else
    {
      uint64_t v11 = *(void **)(v0 + 144);
      __n128 v12 = *(void **)(v0 + 128);
      uint64_t v13 = *(void *)(v0 + 64);

      swift_bridgeObjectRelease();
      CGRect v14 = v13;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v14, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    uint64_t v8 = *(void **)(v0 + 144);
    uint64_t v9 = *(void **)(v0 + 128);
    uint64_t v10 = *(void **)(v0 + 112);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 64), &demangling cache variable for type metadata for Date?);

    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

uint64_t closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)(void *a1)
{
  uint64_t v3 = *v1;
  *(void *)(*v1 + 128) = a1;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v3 + 104);
  uint64_t v5 = *(void *)(v3 + 96);
  id v6 = a1;
  return MEMORY[0x270FA2498](closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:), v5, v4);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v8;

  uint64_t v3 = *v1;
  *(void *)(*v1 + 144) = a1;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v3 + 104);
  uint64_t v5 = *(void *)(v3 + 96);
  id v6 = a1;
  return MEMORY[0x270FA2498](closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:), v5, v4);
}

void AnyCanvas.calculateDocumentSetTokens(_:itemUUID:graphable:graphableVariables:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x2F8))();
  uint64_t v7 = v6;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);

  uint64_t v9 = v16;
  if (v16)
  {
    uint64_t v10 = *(void *)&v16[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
    if (v10)
    {
      uint64_t v11 = *(void **)(v10 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
      if (v11)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKMathRecognitionToken);
        id v12 = v11;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        Class v14 = UUID._bridgeToObjectiveC()().super.isa;
        Class v15 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v12, sel_setTokens_forItemUUID_graphable_graphableVariables_, isa, v14, a3 & 1, v15);

        uint64_t v9 = v16;
      }
    }
  }
}

Swift::Void __swiftcall AnyCanvas.calculateDocumentExpressionsChanged()()
{
  uint64_t v1 = type metadata accessor for PKDrawing();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v0) + 0x2F8))(v3);
  uint64_t v8 = v7;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);

  if (!v10) {
    return;
  }
  id v11 = objc_msgSend(v10, sel_drawing);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  PKDrawing._bridgeToObjectiveC()(v12);
  Class v14 = v13;
  id v15 = objc_msgSend(v13, sel_uuid);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  double v40 = &unk_26C1C1038;
  uint64_t v16 = swift_dynamicCastObjCProtocolConditional();
  if (!v16
    || ((uint64_t v17 = (void *)v16,
         swift_getObjectType(),
         type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject), swift_dynamicCastMetatype())? (double v18 = v17): (double v18 = 0), !v18))
  {
    swift_unknownObjectRelease();

    return;
  }
  uint64_t v19 = one-time initialization token for controllers;
  swift_unknownObjectRetain();
  if (v19 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v20 = static CalculateDocumentController.controllers;
  if (!*((void *)static CalculateDocumentController.controllers + 2))
  {
LABEL_19:
    swift_endAccess();

    swift_unknownObjectRelease_n();
    return;
  }
  swift_unknownObjectRetain();
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18);
  if ((v22 & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_19;
  }
  id v23 = *(void **)(v20[7] + 8 * v21);
  swift_endAccess();
  id v24 = v23;
  swift_unknownObjectRelease_n();
  uint64_t v25 = (void *)CalculateDocumentController.calculateDocumentProvider.getter();
  if (one-time initialization token for mathLogger != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)mathLogger);
  swift_unknownObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 134218240;
    id v30 = objc_msgSend(v25, sel_recognizedExpressions);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CHMathExpression);
    unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v38 = v24;
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v39 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    *(_WORD *)(v29 + 12) = 2048;
    id v33 = objc_msgSend(v25, sel_declaredVariables);
    uint64_t v34 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v35 = *(void *)(v34 + 16);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v39 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    _os_log_impl(&dword_20C2D7000, v27, v28, "Updating CalculateDocumentProvider: %ld, %ld", (uint8_t *)v29, 0x16u);
    MEMORY[0x210550270](v29, -1, -1);

    id v24 = v38;
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  id v36 = objc_msgSend(v10, sel_recognitionController);
  objc_msgSend(v36, sel_setCalculateDocumentProvider_, v25);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t sub_20C2F52DC()
{
  return swift_getOpaqueTypeMetadata2();
}

uint64_t sub_20C2F5370()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t default argument 1 of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)@<X0>(uint64_t *a1@<X8>)
{
  *a1 = static Anchor.Source<A>.bounds.getter();
  uint64_t v2 = *MEMORY[0x263F1A030];
  uint64_t v3 = type metadata accessor for PopoverAttachmentAnchor();
  uint64_t v4 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t lazy protocol witness table accessor for type FontPicker and conformance FontPicker(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GraphableExpressionsView, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<GraphableExpressionsView, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GraphableExpressionsView, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<GraphableExpressionsView, _FlexFrameLayout>);
    lazy protocol witness table accessor for type GraphableExpressionsView and conformance GraphableExpressionsView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GraphableExpressionsView, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphableExpressionsView and conformance GraphableExpressionsView()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphableExpressionsView and conformance GraphableExpressionsView;
  if (!lazy protocol witness table cache variable for type GraphableExpressionsView and conformance GraphableExpressionsView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionsView and conformance GraphableExpressionsView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, _ContentShapeKindModifier<Circle>>, <<opaque return type of View.allowsSecureDrawing()>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, _ContentShapeKindModifier<Circle>>, <<opaque return type of View.allowsSecureDrawing()>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, _ContentShapeKindModifier<Circle>>, <<opaque return type of View.allowsSecureDrawing()>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, _ContentShapeKindModifier<Circle>>, <<opaque return type of View.allowsSecureDrawing()>>.0>, _AlignmentWritingModifier>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, _ContentShapeKindModifier<Circle>>, <<opaque return type of View.allowsSecureDrawing()>>.0> and conformance MiniPopoverButton<A, B>, &demangling cache variable for type metadata for MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, _ContentShapeKindModifier<Circle>>, <<opaque return type of View.allowsSecureDrawing()>>.0>);
    lazy protocol witness table accessor for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, _ContentShapeKindModifier<Circle>>, <<opaque return type of View.allowsSecureDrawing()>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier;
  if (!lazy protocol witness table cache variable for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier);
  }
  return result;
}

uint64_t View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 != 4) {
    MEMORY[0x21054A350](a5);
  }
  return View.popoverCore<A>(isPresented:attachmentAnchor:arrowEdges:isDetachable:content:)();
}

void type metadata accessor for UIRectEdge(uint64_t a1)
{
}

void type metadata accessor for PKGenerationModelAvailabilityStatus(uint64_t a1)
{
}

void type metadata accessor for CGMutablePathRef(uint64_t a1)
{
}

uint64_t type metadata completion function for CGMutablePathRef(uint64_t a1)
{
  type metadata accessor for CGPathRef(255);
  *(void *)(a1 + 16) = v2;
  return 0;
}

void type metadata accessor for CGPathRef(uint64_t a1)
{
}

void type metadata accessor for UIKeyModifierFlags(uint64_t a1)
{
}

void type metadata accessor for PDFDisplayBox(uint64_t a1)
{
}

void type metadata accessor for CGContextRef(uint64_t a1)
{
}

void type metadata accessor for CalculateKey(uint64_t a1)
{
}

void type metadata accessor for UITextContentType(uint64_t a1)
{
}

void type metadata accessor for UITextStorageDirection(uint64_t a1)
{
}

void type metadata accessor for CHMathExpressionType(uint64_t a1)
{
}

void type metadata accessor for CHCanvasAttachmentObjectType(uint64_t a1)
{
}

void type metadata accessor for UILayoutConstraintAxis(uint64_t a1)
{
}

void type metadata accessor for NSDirectionalEdgeInsets(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for UIEdgeInsets(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTagSinglePayload for UIEdgeInsets(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for UIEdgeInsets(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for NSWritingDirection(uint64_t a1)
{
}

void type metadata accessor for CGLineCap(uint64_t a1)
{
}

void type metadata accessor for CGImageRef(uint64_t a1)
{
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CGPathElement(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)(a1 + 8)) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for CGPathElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = 0;
    }
  }
  return result;
}

void type metadata accessor for CGPathElement(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for PDFDocumentWriteOption(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for NSTextAlignment(uint64_t a1)
{
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CGAffineTransform(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGAffineTransform(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(a1, a2, MEMORY[0x263F07B58]);
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIFontWeight()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance UIFontWeight(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  char v7 = 1;
  uint64_t result = MEMORY[0x210549260](a1, &v6);
  char v4 = v7;
  uint64_t v5 = v6;
  if (v7) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UIFontWeight(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  char v8 = 1;
  char v3 = MEMORY[0x210549270](a1, &v7);
  char v4 = v8;
  uint64_t v5 = v7;
  if (v8) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v4;
  return v3 & 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UIFontWeight(double *a1@<X8>)
{
  *a1 = MEMORY[0x210549280]();
}

void protocol witness for SetAlgebra.init() in conformance UIRectCorner(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for SetAlgebra.union(_:) in conformance UIRectCorner@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance UIRectCorner@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance UIRectCorner@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance UIRectCorner(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance UIRectCorner@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance UIRectCorner@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance UIRectCorner(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance UIRectCorner(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance UIRectCorner(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance UIRectCorner@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance UIRectCorner(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance UIRectCorner(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance UIRectCorner(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance UIRectCorner()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance UIRectCorner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance UIRectCorner(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CalculateKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef();
}

{
  Hasher.init(_seed:)();
  swift_getWitnessTable();
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CGContextType(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UILayoutPriority()
{
  return Float._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance UILayoutPriority(uint64_t a1, uint64_t a2)
{
  int v6 = 0;
  char v7 = 1;
  uint64_t result = MEMORY[0x21054D640](a1, &v6);
  char v4 = v7;
  int v5 = v6;
  if (v7) {
    int v5 = 0;
  }
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v4;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UILayoutPriority(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  char v8 = 1;
  char v3 = MEMORY[0x21054D650](a1, &v7);
  char v4 = v8;
  int v5 = v7;
  if (v8) {
    int v5 = 0;
  }
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v4;
  return v3 & 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UILayoutPriority(float *a1@<X8>)
{
  *a1 = MEMORY[0x21054D660]();
}

void protocol witness for Hashable.hash(into:) in conformance NSTextAlignment()
{
  Hasher._combine(_:)(*v0);
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance UIRectEdge@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UIRectEdge(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CGColorRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CGColorRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGColorRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CGLineCap()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CGLineCap()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGLineCap()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSTextAlignment()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSTextAlignment()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id protocol witness for _BridgedStoredNSError._nsError.getter in conformance related decl 'e' for SYErrorCode()
{
  return *v0;
}

uint64_t protocol witness for _BridgedStoredNSError.init(_nsError:) in conformance related decl 'e' for SYErrorCode@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance related decl 'e' for SYErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, type metadata accessor for related decl 'e' for SYErrorCode);
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t protocol witness for Error._code.getter in conformance related decl 'e' for SYErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, type metadata accessor for related decl 'e' for SYErrorCode);
  return MEMORY[0x270EF2668](a1, v2);
}

uint64_t protocol witness for Error._userInfo.getter in conformance related decl 'e' for SYErrorCode()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance related decl 'e' for SYErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, type metadata accessor for related decl 'e' for SYErrorCode);
  return MEMORY[0x270EEF788](a1, v2);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSAttributedStringKey(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSAttributedStringKey(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSAttributedStringKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = MEMORY[0x21054D080](v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIRectEdge(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance UIRectCorner@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = specialized SetAlgebra<>.init(arrayLiteral:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance UIRectCorner@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CGContextType(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CGPathRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CGPathRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGPathRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CGColorRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance related decl 'e' for SYErrorCode()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance related decl 'e' for SYErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, type metadata accessor for related decl 'e' for SYErrorCode);
  return MEMORY[0x270EEF7E8](a1, v2);
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance related decl 'e' for SYErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, type metadata accessor for related decl 'e' for SYErrorCode);
  return MEMORY[0x270EEF7A0](a1, v2);
}

uint64_t protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance related decl 'e' for SYErrorCode(void *a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, type metadata accessor for related decl 'e' for SYErrorCode);
  id v5 = a1;
  return MEMORY[0x270EEF790](v5, a2, v4);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance related decl 'e' for SYErrorCode()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance related decl 'e' for SYErrorCode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, type metadata accessor for related decl 'e' for SYErrorCode);
  return MEMORY[0x270EEF7D0](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance related decl 'e' for SYErrorCode()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance UIKeyModifierFlags@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CGImageRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CGImageRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGImageRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey()
{
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for Equatable in CGColorRef()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
}

double protocol witness for RawRepresentable.rawValue.getter in conformance UIFontWeight@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontWeight()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSNotificationName()
{
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CalculateKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CalculateKey()
{
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type CalculateKey and conformance CalculateKey, type metadata accessor for CalculateKey);
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type CalculateKey and conformance CalculateKey, type metadata accessor for CalculateKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance UILayoutPriority@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

float protocol witness for RawRepresentable.rawValue.getter in conformance UILayoutPriority@<S0>(_DWORD *a1@<X8>)
{
  float result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UILayoutPriority()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance PDFDocumentWriteOption()
{
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, type metadata accessor for PDFDocumentWriteOption);
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker((unint64_t *)&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, type metadata accessor for PDFDocumentWriteOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t base witness table accessor for RawRepresentable in PDFDocumentWriteOption()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, type metadata accessor for PDFDocumentWriteOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in PDFDocumentWriteOption()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker((unint64_t *)&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, type metadata accessor for PDFDocumentWriteOption);
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AFTextContentType()
{
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type AFTextContentType and conformance AFTextContentType, type metadata accessor for AFTextContentType);
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker((unint64_t *)&lazy protocol witness table cache variable for type AFTextContentType and conformance AFTextContentType, type metadata accessor for AFTextContentType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CGPathRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UITextContentType()
{
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UITextContentType and conformance UITextContentType, type metadata accessor for UITextContentType);
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UITextContentType and conformance UITextContentType, type metadata accessor for UITextContentType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontDescriptorAttributeName()
{
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker((unint64_t *)&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance PDFPageImageInitializationOption()
{
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type PDFPageImageInitializationOption and conformance PDFPageImageInitializationOption, type metadata accessor for PDFPageImageInitializationOption);
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type PDFPageImageInitializationOption and conformance PDFPageImageInitializationOption, type metadata accessor for PDFPageImageInitializationOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance related decl 'e' for SYErrorCode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, type metadata accessor for related decl 'e' for SYErrorCode);
  return MEMORY[0x270EEF7B8](a1, a2, a3, v6);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontDescriptorTraitKey()
{
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UITextContentType@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x21054D080](*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey()
{
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CGImageRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

uint64_t base witness table accessor for Equatable in CGImageRef()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type CGImageRef and conformance CGImageRef, type metadata accessor for CGImageRef);
}

uint64_t base witness table accessor for Hashable in CGImageRef()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type CGImageRef and conformance CGImageRef, type metadata accessor for CGImageRef);
}

uint64_t base witness table accessor for Equatable in CGLineCap()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type CGLineCap and conformance CGLineCap, type metadata accessor for CGLineCap);
}

uint64_t base witness table accessor for RawRepresentable in UITextContentType()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UITextContentType and conformance UITextContentType, type metadata accessor for UITextContentType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UITextContentType()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UITextContentType and conformance UITextContentType, type metadata accessor for UITextContentType);
}

uint64_t base witness table accessor for Equatable in UITextContentType()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UITextContentType and conformance UITextContentType, type metadata accessor for UITextContentType);
}

uint64_t base witness table accessor for RawRepresentable in CalculateKey()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type CalculateKey and conformance CalculateKey, type metadata accessor for CalculateKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CalculateKey()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type CalculateKey and conformance CalculateKey, type metadata accessor for CalculateKey);
}

uint64_t base witness table accessor for Equatable in CalculateKey()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type CalculateKey and conformance CalculateKey, type metadata accessor for CalculateKey);
}

uint64_t base witness table accessor for Equatable in UIKeyModifierFlags()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIKeyModifierFlags and conformance UIKeyModifierFlags, type metadata accessor for UIKeyModifierFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in UIKeyModifierFlags()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIKeyModifierFlags and conformance UIKeyModifierFlags, type metadata accessor for UIKeyModifierFlags);
}

uint64_t base witness table accessor for RawRepresentable in UIKeyModifierFlags()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIKeyModifierFlags and conformance UIKeyModifierFlags, type metadata accessor for UIKeyModifierFlags);
}

uint64_t base witness table accessor for SetAlgebra in UIKeyModifierFlags()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIKeyModifierFlags and conformance UIKeyModifierFlags, type metadata accessor for UIKeyModifierFlags);
}

uint64_t base witness table accessor for Equatable in CGPathRef()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker((unint64_t *)&lazy protocol witness table cache variable for type CGPathRef and conformance CGPathRef, type metadata accessor for CGPathRef);
}

uint64_t base witness table accessor for Equatable in NSTextAlignment()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, type metadata accessor for NSTextAlignment);
}

uint64_t base witness table accessor for Equatable in NSWritingDirection()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, type metadata accessor for NSWritingDirection);
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

uint64_t base witness table accessor for Hashable in CGPathRef()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type CGPathRef and conformance CGPathRef, type metadata accessor for CGPathRef);
}

uint64_t base witness table accessor for Equatable in PDFDocumentWriteOption()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, type metadata accessor for PDFDocumentWriteOption);
}

uint64_t base witness table accessor for Hashable in CGColorRef()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UIFontWeight()
{
  return MEMORY[0x270F9DDC0](*v0);
}

void protocol witness for Hashable.hash(into:) in conformance UIFontWeight()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance UIFontWeight()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UILayoutPriority()
{
  return MEMORY[0x270F9DE70](*v0);
}

void protocol witness for Hashable.hash(into:) in conformance UILayoutPriority()
{
  if ((*v0 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v1 = *v0;
  }
  else {
    Swift::UInt32 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance UILayoutPriority()
{
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CalculateKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CalculateKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIFontWeight(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AFTextContentType()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UILayoutPriority(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_20C2F8130()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C2F8168()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)(a1, v5, v6, v7, v8);
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NSObject(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for CGImageSourceRef(uint64_t a1)
{
}

void type metadata accessor for CFDictionaryRef(uint64_t a1)
{
}

void type metadata accessor for UIFontWeight(uint64_t a1)
{
}

void type metadata accessor for UIFontDescriptorTraitKey(uint64_t a1)
{
}

void type metadata accessor for CFDataRef(uint64_t a1)
{
}

void type metadata accessor for UILayoutPriority(uint64_t a1)
{
}

void type metadata accessor for PDFDocumentPermissions(uint64_t a1)
{
}

void type metadata accessor for NSNotificationName(uint64_t a1)
{
}

void type metadata accessor for PDFPageImageInitializationOption(uint64_t a1)
{
}

void type metadata accessor for related decl 'e' for SYErrorCode(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
}

void type metadata accessor for AFTextContentType(uint64_t a1)
{
}

void type metadata accessor for PPKGPMagicPaperImageGenerationInvocation(uint64_t a1)
{
}

void type metadata accessor for UIPopoverArrowDirection(uint64_t a1)
{
}

void type metadata accessor for UIFontDescriptorAttributeName(uint64_t a1)
{
}

void type metadata accessor for CGPathElementType(uint64_t a1)
{
}

void type metadata accessor for UIRectCorner(uint64_t a1)
{
}

uint64_t base witness table accessor for Equatable in UIRectCorner()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIRectCorner and conformance UIRectCorner, type metadata accessor for UIRectCorner);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in UIRectCorner()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIRectCorner and conformance UIRectCorner, type metadata accessor for UIRectCorner);
}

uint64_t base witness table accessor for RawRepresentable in UIRectCorner()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIRectCorner and conformance UIRectCorner, type metadata accessor for UIRectCorner);
}

uint64_t base witness table accessor for SetAlgebra in UIRectCorner()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIRectCorner and conformance UIRectCorner, type metadata accessor for UIRectCorner);
}

uint64_t base witness table accessor for RawRepresentable in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
}

uint64_t base witness table accessor for Equatable in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for RawRepresentable in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for SetAlgebra in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for RawRepresentable in AFTextContentType()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type AFTextContentType and conformance AFTextContentType, type metadata accessor for AFTextContentType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AFTextContentType()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type AFTextContentType and conformance AFTextContentType, type metadata accessor for AFTextContentType);
}

uint64_t base witness table accessor for Equatable in AFTextContentType()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type AFTextContentType and conformance AFTextContentType, type metadata accessor for AFTextContentType);
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in related decl 'e' for SYErrorCode()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, type metadata accessor for related decl 'e' for SYErrorCode);
}

uint64_t base witness table accessor for Error in related decl 'e' for SYErrorCode()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, type metadata accessor for related decl 'e' for SYErrorCode);
}

uint64_t base witness table accessor for RawRepresentable in PDFPageImageInitializationOption()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type PDFPageImageInitializationOption and conformance PDFPageImageInitializationOption, type metadata accessor for PDFPageImageInitializationOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in PDFPageImageInitializationOption()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type PDFPageImageInitializationOption and conformance PDFPageImageInitializationOption, type metadata accessor for PDFPageImageInitializationOption);
}

uint64_t base witness table accessor for RawRepresentable in NSNotificationName()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSNotificationName()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
}

uint64_t base witness table accessor for Equatable in NSNotificationName()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
}

uint64_t base witness table accessor for RawRepresentable in UILayoutPriority()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority, type metadata accessor for UILayoutPriority);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UILayoutPriority()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority, type metadata accessor for UILayoutPriority);
}

uint64_t base witness table accessor for Equatable in UILayoutPriority()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority, type metadata accessor for UILayoutPriority);
}

uint64_t base witness table accessor for RawRepresentable in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for Equatable in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for RawRepresentable in UIFontWeight()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, type metadata accessor for UIFontWeight);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontWeight()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, type metadata accessor for UIFontWeight);
}

uint64_t base witness table accessor for Equatable in UIFontWeight()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, type metadata accessor for UIFontWeight);
}

uint64_t base witness table accessor for Equatable in PDFPageImageInitializationOption()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type PDFPageImageInitializationOption and conformance PDFPageImageInitializationOption, type metadata accessor for PDFPageImageInitializationOption);
}

uint64_t base witness table accessor for CustomNSError in related decl 'e' for SYErrorCode()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, type metadata accessor for related decl 'e' for SYErrorCode);
}

uint64_t base witness table accessor for _ObjectiveCBridgeableError in related decl 'e' for SYErrorCode()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, type metadata accessor for related decl 'e' for SYErrorCode);
}

uint64_t base witness table accessor for Hashable in related decl 'e' for SYErrorCode()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, type metadata accessor for related decl 'e' for SYErrorCode);
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : _ErrorCodeProtocol in related decl 'e' for SYErrorCode()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type SYErrorCode and conformance SYErrorCode, type metadata accessor for SYErrorCode);
}

void type metadata accessor for SYErrorCode(uint64_t a1)
{
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : RawRepresentable in related decl 'e' for SYErrorCode()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type SYErrorCode and conformance SYErrorCode, type metadata accessor for SYErrorCode);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in SYErrorCode()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type SYErrorCode and conformance SYErrorCode, type metadata accessor for SYErrorCode);
}

uint64_t associated type witness table accessor for _ErrorCodeProtocol._ErrorType : _BridgedStoredNSError in SYErrorCode()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, type metadata accessor for related decl 'e' for SYErrorCode);
}

uint64_t base witness table accessor for Equatable in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type FontPicker and conformance FontPicker(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

void type metadata accessor for PKSelectionType(uint64_t a1)
{
}

void one-time initialization function for sidebarAttributedString()
{
  closure #1 in variable initialization expression of static PageLabelView.sidebarAttributedString();
  static PageLabelView.sidebarAttributedString = v0;
}

void closure #1 in variable initialization expression of static PageLabelView.sidebarAttributedString()
{
  uint64_t v0 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84F540);
  id v1 = objc_msgSend(self, sel_systemImageNamed_, v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_textAttachmentWithImage_, v1);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
    id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_attributedStringWithAttachment_, v2);
    id v4 = objc_allocWithZone(MEMORY[0x263F086A0]);
    id v5 = v3;
    uint64_t v6 = (void *)MEMORY[0x21054D080](32, 0xE100000000000000);
    id v7 = objc_msgSend(v4, sel_initWithString_, v6);

    objc_msgSend(v5, sel_appendAttributedString_, v7);
  }
  else
  {
    __break(1u);
  }
}

char *PageLabelView.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC8PaperKit13PageLabelView_blurEffect;
  uint64_t v10 = self;
  uint64_t v11 = v4;
  *(void *)&v4[v9] = objc_msgSend(v10, sel_effectWithStyle_, 0);
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit13PageLabelView_blurView;
  *(void *)&v11[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E50]), sel_initWithEffect_, 0);
  *(void *)&v11[OBJC_IVAR____TtC8PaperKit13PageLabelView_timer] = 0;
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_initWithFrame_, 0.0, 0.0, 50.0, 50.0);
  uint64_t v14 = OBJC_IVAR____TtC8PaperKit13PageLabelView_label;
  *(void *)&v11[OBJC_IVAR____TtC8PaperKit13PageLabelView_label] = v13;
  objc_msgSend(v13, sel_setOpaque_, 0);
  objc_msgSend(v13, sel_setBackgroundColor_, 0);
  objc_msgSend(v13, sel_setTextAlignment_, 1);
  id v15 = self;
  id v16 = v13;
  id v17 = objc_msgSend(v15, sel_boldSystemFontOfSize_, 16.0);
  objc_msgSend(v16, sel_setFont_, v17);

  double v18 = *(void **)&v11[v14];
  uint64_t v19 = self;
  id v20 = v18;
  id v21 = objc_msgSend(v19, sel_blackColor);
  objc_msgSend(v20, sel_setTextColor_, v21);

  id v22 = *(id *)&v11[v14];
  objc_msgSend(v22, sel_setAlpha_, 0.0);

  v58.receiver = v11;
  v58.super_class = (Class)type metadata accessor for PageLabelView();
  id v23 = (char *)objc_msgSendSuper2(&v58, sel_initWithFrame_, a1, a2, a3, a4);
  uint64_t v24 = OBJC_IVAR____TtC8PaperKit13PageLabelView_blurView;
  uint64_t v25 = *(void **)&v23[OBJC_IVAR____TtC8PaperKit13PageLabelView_blurView];
  uint64_t v26 = v23;
  objc_msgSend(v26, sel_addSubview_, v25);
  id v27 = objc_msgSend(v25, sel_contentView);
  uint64_t v28 = OBJC_IVAR____TtC8PaperKit13PageLabelView_label;
  objc_msgSend(v27, sel_addSubview_, *(void *)&v26[OBJC_IVAR____TtC8PaperKit13PageLabelView_label]);

  uint64_t v29 = *(void **)&v23[v24];
  objc_msgSend(v29, sel__setContinuousCornerRadius_, 7.0);
  objc_msgSend(*(id *)&v26[v28], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v29, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v57 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_20C832BD0;
  id v31 = objc_msgSend(v29, sel_topAnchor);
  id v32 = objc_msgSend(v26, sel_topAnchor);
  id v33 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v32);

  *(void *)(v30 + 32) = v33;
  id v34 = objc_msgSend(*(id *)&v23[v24], sel_bottomAnchor);
  id v35 = objc_msgSend(v26, sel_bottomAnchor);
  id v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_, v35);

  *(void *)(v30 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = v36;
  id v37 = objc_msgSend(*(id *)&v23[v24], sel_trailingAnchor);
  id v38 = objc_msgSend(v26, (SEL)&selRef_setCornerCurve_ + 4);
  id v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_, v38);

  *(void *)(v30 + 48) = v39;
  id v40 = objc_msgSend(*(id *)&v23[v24], sel_leadingAnchor);
  id v41 = objc_msgSend(v26, sel_leadingAnchor);
  id v42 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v41);

  *(void *)(v30 + 56) = v42;
  id v43 = objc_msgSend(*(id *)&v26[v28], sel_topAnchor);
  id v44 = objc_msgSend(*(id *)&v23[v24], sel_topAnchor);
  id v45 = objc_msgSend(v43, sel_constraintEqualToAnchor_constant_, v44, 6.0);

  *(void *)(v30 + 64) = v45;
  id v46 = objc_msgSend(*(id *)&v26[v28], sel_bottomAnchor);
  id v47 = objc_msgSend(*(id *)&v23[v24], sel_bottomAnchor);
  id v48 = objc_msgSend(v46, sel_constraintEqualToAnchor_constant_, v47, -6.0);

  *(void *)(v30 + 72) = v48;
  id v49 = objc_msgSend(*(id *)&v26[v28], sel_leadingAnchor);
  id v50 = objc_msgSend(*(id *)&v23[v24], sel_leadingAnchor);
  id v51 = objc_msgSend(v49, sel_constraintEqualToAnchor_constant_, v50, 10.0);

  *(void *)(v30 + 8__isPlatformVersionAtLeast(2, 18, 1, 0) = v51;
  id v52 = objc_msgSend(*(id *)&v26[v28], sel_trailingAnchor);
  id v53 = objc_msgSend(*(id *)&v23[v24], sel_trailingAnchor);
  id v54 = objc_msgSend(v52, sel_constraintEqualToAnchor_constant_, v53, -10.0);

  *(void *)(v30 + 88) = v54;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v57, sel_activateConstraints_, isa);

  return v26;
}

id PageLabelView.__deallocating_deinit()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit13PageLabelView_timer;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8PaperKit13PageLabelView_timer], sel_invalidate);
  id v2 = *(void **)&v0[v1];
  *(void *)&v0[v1] = 0;

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for PageLabelView();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

Swift::Void __swiftcall PageLabelView.showNow(in:with:)(UIView *in, Swift::String with)
{
  id v3 = v2;
  object = with._object;
  uint64_t countAndFlagsBits = with._countAndFlagsBits;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit13PageLabelView_label];
  objc_msgSend(v11, sel_setAlpha_, 0.4);
  objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8PaperKit13PageLabelView_blurView], sel_setEffect_, *(void *)&v3[OBJC_IVAR____TtC8PaperKit13PageLabelView_blurEffect]);
  if (one-time initialization token for sidebarAttributedString != -1) {
    swift_once();
  }
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F089B8]), sel_initWithAttributedString_, static PageLabelView.sidebarAttributedString);
  id v13 = objc_allocWithZone(MEMORY[0x263F086A0]);
  swift_bridgeObjectRetain();
  uint64_t v14 = (void *)MEMORY[0x21054D080](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v13, sel_initWithString_, v14);

  objc_msgSend(v12, sel_appendAttributedString_, v15);
  objc_msgSend(v11, sel_setAttributedText_, v12);
  id v16 = objc_msgSend(v3, sel_superview);
  id v17 = &selRef_addSubview_;
  if (v16)
  {
    double v18 = v16;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    uint64_t v19 = in;
    char v20 = static NSObject.== infix(_:_:)();

    if (v20) {
      id v17 = &selRef_bringSubviewToFront_;
    }
  }
  objc_msgSend(in, *v17, v3);
  uint64_t v21 = OBJC_IVAR____TtC8PaperKit13PageLabelView_timer;
  id v22 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit13PageLabelView_timer];
  if (v22)
  {
    id v23 = v22;
    Date.init(timeIntervalSinceNow:)();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    objc_msgSend(v23, sel_setFireDate_, isa);
  }
  else
  {
    id v25 = objc_msgSend(self, sel_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_, v3, sel_fadeOut, 0, 1, 2.0);
    uint64_t v28 = *(void **)&v3[v21];
    *(void *)&v3[v21] = v25;

    uint64_t v26 = v28;
  }
}

Swift::Void __swiftcall PageLabelView.fadeOut()()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC8PaperKit13PageLabelView_timer))
  {
    uint64_t v1 = self;
    uint64_t v2 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v10 = partial apply for closure #1 in PageLabelView.fadeOut();
    uint64_t v11 = v2;
    uint64_t v6 = MEMORY[0x263EF8330];
    uint64_t v7 = 1107296256;
    uint64_t v8 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v9 = &block_descriptor;
    id v3 = _Block_copy(&v6);
    swift_release();
    uint64_t v4 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v10 = partial apply for closure #2 in PageLabelView.fadeOut();
    uint64_t v11 = v4;
    uint64_t v6 = MEMORY[0x263EF8330];
    uint64_t v7 = 1107296256;
    uint64_t v8 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    uint64_t v9 = &block_descriptor_8;
    id v5 = _Block_copy(&v6);
    swift_release();
    objc_msgSend(v1, sel_animateWithDuration_animations_completion_, v3, v5, 0.5);
    _Block_release(v5);
    _Block_release(v3);
  }
}

void closure #1 in PageLabelView.fadeOut()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    id v3 = (char *)v2;
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8PaperKit13PageLabelView_label), sel_setAlpha_, 0.0);
    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8PaperKit13PageLabelView_blurView], sel_setEffect_, 0);
  }
}

void closure #2 in PageLabelView.fadeOut()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  id v3 = (char *)MEMORY[0x210550400](v2);
  if (v3)
  {
    uint64_t v4 = v3;
    objc_msgSend(v3, sel_removeFromSuperview);
    uint64_t v5 = OBJC_IVAR____TtC8PaperKit13PageLabelView_timer;
    objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC8PaperKit13PageLabelView_timer], sel_invalidate);
    uint64_t v6 = *(void **)&v4[v5];
    *(void *)&v4[v5] = 0;
  }
}

uint64_t type metadata accessor for PageLabelView()
{
  return self;
}

uint64_t sub_20C2FA2CC()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in PageLabelView.fadeOut()()
{
  closure #1 in PageLabelView.fadeOut()(v0);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void partial apply for closure #2 in PageLabelView.fadeOut()(uint64_t a1)
{
  closure #2 in PageLabelView.fadeOut()(a1, v1);
}

void specialized PageLabelView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit13PageLabelView_blurEffect;
  *(void *)&v0[v1] = objc_msgSend(self, sel_effectWithStyle_, 0);
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit13PageLabelView_blurView;
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E50]), sel_initWithEffect_, 0);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit13PageLabelView_timer] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CanvasGenerationTool.magicPaperViewController(_:didGenerate:)(PPKGPInProcessMagicPaperViewController *_, UIImage didGenerate)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)generativeLogger);
  id v9 = v2;
  uint64_t v10 = didGenerate.super.isa;
  id v11 = v9;
  id v12 = v10;
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    id v31 = _;
    uint64_t v16 = v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v33 = v17;
    *(_DWORD *)uint64_t v16 = 136315650;
    uint64_t v18 = CanvasGenerationTool.nameAndPointerDescription.getter();
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x800000020C84F610, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2080;
    [(objc_class *)v12 size];
    uint64_t v20 = CGSize.debugDescription.getter();
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v13, v14, "%s - %s: (image.size = %s)", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v17, -1, -1);
    uint64_t v22 = v16;
    _ = v31;
    MEMORY[0x210550270](v22, -1, -1);
  }
  else
  {
  }
  uint64_t v23 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v7, 1, 1, v23);
  uint64_t v24 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  id v25 = v12;
  swift_retain();
  uint64_t v26 = _;
  uint64_t v27 = static MainActor.shared.getter();
  uint64_t v28 = (void *)swift_allocObject();
  uint64_t v29 = MEMORY[0x263F8F500];
  v28[2] = v27;
  v28[3] = v29;
  v28[4] = v24;
  v28[5] = v26;
  v28[6] = v25;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasGenerationTool.magicPaperViewController(_:didGenerate:), (uint64_t)v28);
  swift_release();
}

uint64_t closure #1 in CanvasGenerationTool.magicPaperViewController(_:didGenerate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[18] = a5;
  v6[19] = a6;
  v6[17] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  v6[20] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  v6[21] = v7;
  v6[22] = *(void *)(v7 - 8);
  v6[23] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[24] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in CanvasGenerationTool.magicPaperViewController(_:didGenerate:), v9, v8);
}

uint64_t closure #1 in CanvasGenerationTool.magicPaperViewController(_:didGenerate:)()
{
  v78 = v0;
  uint64_t v1 = v0[17];
  swift_release();
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1 + 16);
  if (v2)
  {
    id v3 = (void *)v2;
    uint64_t v5 = v0[21];
    uint64_t v4 = v0[22];
    uint64_t v6 = v0[20];
    uint64_t v7 = v2 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation;
    swift_beginAccess();
    outlined init with copy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(v7, v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
    {
      outlined destroy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(v0[20]);
      if (one-time initialization token for generativeLogger != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)generativeLogger);
      id v9 = v3;
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        uint64_t v77 = v13;
        *(_DWORD *)id v12 = 136315138;
        uint64_t v14 = CanvasGenerationTool.nameAndPointerDescription.getter();
        v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_20C2D7000, v10, v11, "%s returning (continuation is nil)", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x210550270](v13, -1, -1);
        MEMORY[0x210550270](v12, -1, -1);
      }
      else
      {
      }
    }
    else
    {
      unint64_t v21 = (void *)v0[18];
      (*(void (**)(void, void, void))(v0[22] + 32))(v0[23], v0[20], v0[21]);
      id v22 = objc_msgSend(v21, sel_encodedRecipe);
      if (v22)
      {
        uint64_t v23 = v22;
        uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v26 = v25;

        switch(*((unsigned char *)v3 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState))
        {
          case 8:
            outlined copy of Data._Representation(v24, v26);
            swift_bridgeObjectRelease();
            goto LABEL_23;
          default:
            char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
            outlined copy of Data._Representation(v24, v26);
            swift_bridgeObjectRelease();
            if (v35)
            {
LABEL_23:
              unint64_t v76 = v26;
              if (one-time initialization token for generativeLogger != -1) {
                swift_once();
              }
              uint64_t v36 = type metadata accessor for Logger();
              __swift_project_value_buffer(v36, (uint64_t)generativeLogger);
              id v37 = v3;
              id v38 = Logger.logObject.getter();
              os_log_type_t v39 = static os_log_type_t.error.getter();
              BOOL v40 = os_log_type_enabled(v38, v39);
              uint64_t v41 = v0[22];
              uint64_t v42 = v0[23];
              uint64_t v75 = v0[21];
              if (v40)
              {
                uint64_t v72 = v24;
                id v43 = (uint8_t *)swift_slowAlloc();
                uint64_t v71 = swift_slowAlloc();
                uint64_t v77 = v71;
                *(_DWORD *)id v43 = 136315138;
                uint64_t v44 = CanvasGenerationTool.nameAndPointerDescription.getter();
                v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v77);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();

                _os_log_impl(&dword_20C2D7000, v38, v39, "%s returning (image has been generated already)", v43, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x210550270](v71, -1, -1);
                MEMORY[0x210550270](v43, -1, -1);

                outlined consume of Data._Representation(v72, v76);
                outlined consume of Data._Representation(v72, v76);

                (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v75);
              }
              else
              {

                outlined consume of Data._Representation(v24, v76);
                outlined consume of Data._Representation(v24, v76);

                (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v75);
              }
            }
            else
            {
              uint64_t v47 = v0[22];
              uint64_t v46 = v0[23];
              uint64_t v48 = v0[21];
              uint64_t v49 = v24;
              id v50 = (void *)v0[19];
              LOBYTE(v77) = 8;
              CanvasGenerationTool.magicGenerativeState.setter((unsigned __int8 *)&v77);
              v0[5] = v50;
              v0[6] = v49;
              v0[7] = v26;
              id v51 = v50;
              CheckedContinuation.resume(returning:)();
              outlined consume of Data._Representation(v49, v26);

              (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
            }
            break;
        }
      }
      else
      {
        if (one-time initialization token for generativeLogger != -1) {
          swift_once();
        }
        uint64_t v27 = type metadata accessor for Logger();
        __swift_project_value_buffer(v27, (uint64_t)generativeLogger);
        id v28 = v3;
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v29, v30))
        {
          id v31 = (uint8_t *)swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          uint64_t v77 = v32;
          *(_DWORD *)id v31 = 136315138;
          uint64_t v33 = CanvasGenerationTool.nameAndPointerDescription.getter();
          v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_20C2D7000, v29, v30, "%s returning (encodedRecipe is nil)", v31, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x210550270](v32, -1, -1);
          MEMORY[0x210550270](v31, -1, -1);
        }
        else
        {
        }
        switch(*((unsigned char *)v28 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState))
        {
          case 9:
            swift_bridgeObjectRelease();
            goto LABEL_30;
          default:
            char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v52)
            {
LABEL_30:
              id v53 = v28;
              id v54 = Logger.logObject.getter();
              os_log_type_t v55 = static os_log_type_t.error.getter();
              BOOL v56 = os_log_type_enabled(v54, v55);
              uint64_t v58 = v0[22];
              uint64_t v57 = v0[23];
              uint64_t v59 = v0[21];
              if (v56)
              {
                uint64_t v74 = v0[23];
                double v60 = (uint8_t *)swift_slowAlloc();
                uint64_t v73 = v59;
                uint64_t v61 = swift_slowAlloc();
                uint64_t v77 = v61;
                *(_DWORD *)double v60 = 136315138;
                uint64_t v62 = CanvasGenerationTool.nameAndPointerDescription.getter();
                v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &v77);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();

                _os_log_impl(&dword_20C2D7000, v54, v55, "%s returning (image generation has already failed)", v60, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x210550270](v61, -1, -1);
                MEMORY[0x210550270](v60, -1, -1);

                (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v74, v73);
              }
              else
              {

                (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
              }
            }
            else
            {
              uint64_t v65 = v0[22];
              uint64_t v64 = v0[23];
              uint64_t v66 = v0[21];
              LOBYTE(v77) = 9;
              CanvasGenerationTool.magicGenerativeState.setter((unsigned __int8 *)&v77);
              lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
              uint64_t v67 = swift_allocError();
              *(void *)uint64_t v68 = 0xD000000000000015;
              *(void *)(v68 + 8) = 0x800000020C84F640;
              *(unsigned char *)(v68 + 16) = 1;
              v0[12] = v67;
              CheckedContinuation.resume(throwing:)();

              (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
            }
            break;
        }
      }
    }
  }
  else
  {
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)generativeLogger);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v77 = v20;
      *(_DWORD *)unint64_t v19 = 136315138;
      v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000020C84F5F0, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v17, v18, "%s returning (self is nil)", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v20, -1, -1);
      MEMORY[0x210550270](v19, -1, -1);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  CGFloat v69 = (uint64_t (*)(void))v0[1];
  return v69();
}

uint64_t closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[12] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  v4[13] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  v4[14] = v5;
  v4[15] = *(void *)(v5 - 8);
  v4[16] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[17] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:), v7, v6);
}

uint64_t closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:)()
{
  uint64_t v44 = v0;
  uint64_t v1 = v0[12];
  swift_release();
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1 + 16);
  if (v2)
  {
    id v3 = (void *)v2;
    uint64_t v4 = v0[14];
    uint64_t v5 = v0[15];
    uint64_t v6 = v0[13];
    uint64_t v7 = v2 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation;
    swift_beginAccess();
    outlined init with copy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(v7, v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
    {
      outlined destroy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(v0[13]);
      if (one-time initialization token for generativeLogger != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)generativeLogger);
      id v9 = v3;
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        uint64_t v13 = v43;
        *(_DWORD *)id v12 = 136315138;
        uint64_t v14 = CanvasGenerationTool.nameAndPointerDescription.getter();
        v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_20C2D7000, v10, v11, "%s returning (continuation is nil)", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x210550270](v13, -1, -1);
        MEMORY[0x210550270](v12, -1, -1);
      }
      else
      {
      }
    }
    else
    {
      (*(void (**)(void, void, void))(v0[15] + 32))(v0[16], v0[13], v0[14]);
      switch(*((unsigned char *)v3 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState))
      {
        case 7:
          swift_bridgeObjectRelease();
          goto LABEL_16;
        default:
          char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v21)
          {
LABEL_16:
            if (one-time initialization token for generativeLogger != -1) {
              swift_once();
            }
            uint64_t v22 = type metadata accessor for Logger();
            __swift_project_value_buffer(v22, (uint64_t)generativeLogger);
            id v23 = v3;
            uint64_t v24 = Logger.logObject.getter();
            os_log_type_t v25 = static os_log_type_t.error.getter();
            BOOL v26 = os_log_type_enabled(v24, v25);
            uint64_t v28 = v0[15];
            uint64_t v27 = v0[16];
            uint64_t v29 = v0[14];
            if (v26)
            {
              uint64_t v42 = v0[16];
              uint64_t v41 = v0[14];
              os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
              uint64_t v40 = swift_slowAlloc();
              uint64_t v43 = v40;
              *(_DWORD *)os_log_type_t v30 = 136315138;
              uint64_t v31 = CanvasGenerationTool.nameAndPointerDescription.getter();
              v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v43);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();

              _os_log_impl(&dword_20C2D7000, v24, v25, "%s returning (continuation has been cancelled already)", v30, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x210550270](v40, -1, -1);
              MEMORY[0x210550270](v30, -1, -1);

              (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v42, v41);
            }
            else
            {

              (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
            }
          }
          else
          {
            uint64_t v34 = v0[15];
            uint64_t v33 = v0[16];
            uint64_t v35 = v0[14];
            LOBYTE(v43) = 7;
            CanvasGenerationTool.magicGenerativeState.setter((unsigned __int8 *)&v43);
            lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
            uint64_t v36 = swift_allocError();
            *(void *)uint64_t v37 = 0;
            *(void *)(v37 + 8) = 0;
            *(unsigned char *)(v37 + 16) = 2;
            v0[10] = v36;
            CheckedContinuation.resume(throwing:)();

            (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
          }
          break;
      }
    }
  }
  else
  {
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)generativeLogger);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v43 = v20;
      *(_DWORD *)unint64_t v19 = 136315138;
      v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000020C84F5F0, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v17, v18, "%s returning (self is nil)", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v20, -1, -1);
      MEMORY[0x210550270](v19, -1, -1);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  id v38 = (uint64_t (*)(void))v0[1];
  return v38();
}

uint64_t specialized CanvasGenerationTool.magicPaperViewControllerDidCancel(_:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v1 - 8);
  id v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)generativeLogger);
  id v5 = v0;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v19 = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = CanvasGenerationTool.nameAndPointerDescription.getter();
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x800000020C84F5C0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v6, v7, "%s - %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v9, -1, -1);
    MEMORY[0x210550270](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v3, 1, 1, v12);
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v14 = static MainActor.shared.getter();
  unint64_t v15 = (void *)swift_allocObject();
  uint64_t v16 = MEMORY[0x263F8F500];
  v15[2] = v14;
  v15[3] = v16;
  v15[4] = v13;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:), (uint64_t)v15);
  return swift_release();
}

uint64_t sub_20C2FC250()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C2FC288()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  os_log_type_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *os_log_type_t v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:)(a1, v4, v5, v6);
}

uint64_t outlined init with copy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError()
{
  unint64_t result = lazy protocol witness table cache variable for type CanvasGenerationToolError and conformance CanvasGenerationToolError;
  if (!lazy protocol witness table cache variable for type CanvasGenerationToolError and conformance CanvasGenerationToolError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasGenerationToolError and conformance CanvasGenerationToolError);
  }
  return result;
}

uint64_t sub_20C2FC498()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.magicPaperViewController(_:didGenerate:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in CanvasGenerationTool.magicPaperViewController(_:didGenerate:)(a1, v4, v5, v6, v7, v8);
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t destroy for GraphableVariablesView()
{
  swift_release();
  swift_release();
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for GraphableVariablesView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for GraphableVariablesView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for GraphableVariablesView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphableVariablesView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphableVariablesView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphableVariablesView()
{
  return &type metadata for GraphableVariablesView;
}

uint64_t associated type witness table accessor for View.Body : View in GraphableVariablesView()
{
  return swift_getOpaqueTypeConformance2();
}

double one-time initialization function for checkmarkSize(uint64_t a1)
{
  return one-time initialization function for checkmarkSize(a1, &one-time initialization token for checkmarkSize, (double *)&static GraphableExpressionView.checkmarkSize, &static GraphableVariablesView.checkmarkSize);
}

double one-time initialization function for viewPadding(uint64_t a1)
{
  return one-time initialization function for checkmarkSize(a1, &one-time initialization token for viewPadding, (double *)&static GraphableExpressionView.viewPadding, &static GraphableVariablesView.viewPadding);
}

double one-time initialization function for leadingInset(uint64_t a1)
{
  return one-time initialization function for checkmarkSize(a1, &one-time initialization token for insetForColorButton, (double *)&static GraphableExpressionView.insetForColorButton, &static GraphableVariablesView.leadingInset);
}

double one-time initialization function for checkmarkSize(uint64_t a1, void *a2, double *a3, void *a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  double result = *a3;
  *a4 = *(void *)a3;
  return result;
}

uint64_t one-time initialization function for labelFont()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v0 - 8);
  unint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = static Font.system(size:weight:design:)();
  uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v2, &demangling cache variable for type metadata for Font.Design?);
  static GraphableVariablesView.labelFont = v4;
  return result;
}

uint64_t GraphableVariablesView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = specialized Collection.count.getter(v9, v10, v11);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_getKeyPath();
    uint64_t v8 = (void *)swift_allocObject();
    v8[2] = a1;
    v8[3] = a2;
    v8[4] = a3;
    swift_retain();
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Range<Int>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.onTapGesture(count:perform:)>>.0);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>, _PaddingLayout>);
    lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    swift_getOpaqueTypeConformance2();
    return ForEach<>.init(_:id:content:)();
  }
  return result;
}

uint64_t closure #1 in GraphableVariablesView.body.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v61 = a5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>);
  MEMORY[0x270FA5388](v9 - 8);
  char v52 = (uint64_t *)((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>, _PaddingLayout>);
  MEMORY[0x270FA5388](v56);
  uint64_t v55 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.onTapGesture(count:perform:)>>.0);
  uint64_t v54 = *(void *)(v57 - 8);
  MEMORY[0x270FA5388](v57);
  id v53 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *a1;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  uint64_t v64 = a4;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
  MEMORY[0x21054A870](v65);
  uint64_t v15 = v65[0];
  swift_getKeyPath();
  uint64_t v62 = v15;
  lazy protocol witness table accessor for type GraphableExpressionState and conformance GraphableExpressionState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v16 = *(void *)(v15 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariable);
  uint64_t v17 = *(void *)(v15 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariable + 8);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  uint64_t v60 = a4;
  uint64_t v64 = a4;
  MEMORY[0x21054A870](v65, v14);
  uint64_t v18 = v65[0];
  swift_getKeyPath();
  uint64_t v19 = v18 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState___observationRegistrar;
  uint64_t v62 = v18;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v20 = *(void *)(v18 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariables);
  swift_bridgeObjectRetain();
  swift_release();
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v13 >= *(void *)(v20 + 16))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_11;
  }
  uint64_t v21 = v20 + 16 * v13;
  uint64_t v19 = *(void *)(v21 + 32);
  uint64_t v18 = *(void *)(v21 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v17)
  {
    if (v16 == v19 && v17 == v18) {
      LOBYTE(v16) = 1;
    }
    else {
      LOBYTE(v16) = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v16) = 0;
  }
  if (one-time initialization token for paperKitBundle != -1) {
    goto LABEL_14;
  }
LABEL_11:
  v66._uint64_t countAndFlagsBits = 0xD00000000000004CLL;
  v66._object = (void *)0x800000020C84F680;
  v22._object = (void *)0x800000020C84F660;
  v22._uint64_t countAndFlagsBits = 0xD000000000000011;
  v23.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v23.value._object = (void *)0xEB00000000656C62;
  v24._uint64_t countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, paperKitBundle, v24, v66);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_20C832C20;
  *(void *)(v25 + 56) = MEMORY[0x263F8D310];
  *(void *)(v25 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v25 + 32) = v19;
  *(void *)(v25 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = v18;
  swift_bridgeObjectRetain();
  uint64_t v26 = String.init(format:_:)();
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  uint64_t v62 = v26;
  uint64_t v63 = v28;
  uint64_t v29 = static VerticalAlignment.center.getter();
  uint64_t v30 = v18;
  uint64_t v51 = v18;
  uint64_t v31 = v19;
  uint64_t v32 = (uint64_t)v52;
  *char v52 = v29;
  *(void *)(v32 + 8) = 0;
  *(unsigned char *)(v32 + 16) = 1;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>);
  LOBYTE(v26) = v16 & 1;
  uint64_t v35 = v58;
  uint64_t v34 = v59;
  uint64_t v36 = v60;
  specialized closure #1 in closure #1 in GraphableVariablesView.body.getter(&v62, v16 & 1, v58, v59, v60, v31, v30, v32 + *(int *)(v33 + 44));
  char v37 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v46 = v55;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v32, v55, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>);
  uint64_t v47 = v46 + *(int *)(v56 + 36);
  *(unsigned char *)uint64_t v47 = v37;
  *(void *)(v47 + 8) = v39;
  *(void *)(v47 + 16) = v41;
  *(void *)(v47 + 24) = v43;
  *(void *)(v47 + 32) = v45;
  *(unsigned char *)(v47 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?(v32, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>);
  uint64_t v48 = swift_allocObject();
  *(unsigned char *)(v48 + 16) = v26;
  *(void *)(v48 + 24) = v35;
  *(void *)(v48 + 32) = v34;
  *(void *)(v48 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = v36;
  *(void *)(v48 + 48) = v31;
  *(void *)(v48 + 56) = v51;
  lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v49 = v53;
  View.onTapGesture(count:perform:)();
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>, _PaddingLayout>);
  (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v61, v49, v57);
  return swift_bridgeObjectRelease();
}

uint64_t specialized getter of attrString #1 in closure #1 in GraphableVariablesView.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v127 = a2;
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index));
  uint64_t v3 = MEMORY[0x270FA5388](v105);
  v104 = (char *)v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  v103 = (char *)v101 - v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for AttributedString();
  uint64_t v125 = *(void *)(v126 - 8);
  MEMORY[0x270FA5388](v126);
  uint64_t v10 = (char *)v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v128 = v11;
  uint64_t v129 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v107 = (uint64_t)v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v111 = (uint64_t)v101 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v106 = (uint64_t)v101 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v121 = (uint64_t)v101 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<AttributedString.Index>?);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v119 = (uint64_t)v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v102 = (uint64_t)v101 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  v110 = (char *)v101 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)v101 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)v101 - v30;
  uint64_t v32 = type metadata accessor for AttributeContainer();
  MEMORY[0x270FA5388](v32 - 8);
  uint64_t v34 = (char *)v101 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v120 = a1;
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  uint64_t v35 = v127;
  v116 = v34;
  AttributedString.init(_:attributes:)();
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v123 = v31;
  v101[1] = v12 + 56;
  v101[0] = v36;
  v36(v31, 1, 1, v11);
  uint64_t v37 = v125;
  uint64_t v38 = v35;
  uint64_t v39 = v126;
  v109 = *(char **)(v125 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v109)(v10, v38, v126);
  uint64_t v130 = 91;
  unint64_t v131 = 0xE100000000000000;
  uint64_t v40 = type metadata accessor for Locale();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56);
  uint64_t v122 = v41 + 56;
  v124 = v42;
  v42((uint64_t)v8, 1, 1, v40);
  uint64_t v43 = lazy protocol witness table accessor for type GraphableExpressionState and conformance GraphableExpressionState(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x263F06828]);
  unint64_t v44 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v45 = v39;
  uint64_t v108 = v43;
  AttributedStringProtocol.range<A>(of:options:locale:)();
  uint64_t v46 = (uint64_t)v8;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for Locale?);
  swift_bridgeObjectRelease();
  uint64_t v47 = v37 + 8;
  uint64_t v48 = *(void (**)(char *, uint64_t))(v37 + 8);
  uint64_t v49 = v10;
  id v50 = v10;
  uint64_t v51 = v45;
  v48(v50, v45);
  char v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48);
  v129 += 48;
  unsigned int v53 = v52(v29, 1, v128);
  v118 = v49;
  v117 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v52;
  uint64_t v115 = v47;
  v114 = (void (*)(uint64_t, uint64_t))v48;
  uint64_t v113 = v40;
  unint64_t v112 = v44;
  if (v53 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v29, &demangling cache variable for type metadata for Range<AttributedString.Index>?);
    uint64_t v54 = v120;
    uint64_t v55 = v46;
  }
  else
  {
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v29, v121, &demangling cache variable for type metadata for Range<AttributedString.Index>);
    uint64_t v56 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v109)(v49, v127, v51);
    uint64_t v130 = 93;
    unint64_t v131 = 0xE100000000000000;
    v124(v46, 1, 1, v40);
    uint64_t v57 = (uint64_t)v110;
    AttributedStringProtocol.range<A>(of:options:locale:)();
    outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for Locale?);
    swift_bridgeObjectRelease();
    v48(v49, v56);
    uint64_t v58 = v128;
    unsigned int v59 = v52((char *)v57, 1, v128);
    uint64_t v55 = v46;
    if (v59 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v121, &demangling cache variable for type metadata for Range<AttributedString.Index>);
      outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for Range<AttributedString.Index>?);
      uint64_t v54 = v120;
    }
    else
    {
      uint64_t v60 = v106;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v57, v106, &demangling cache variable for type metadata for Range<AttributedString.Index>);
      uint64_t v61 = v60 + *(int *)(v58 + 36);
      uint64_t v62 = type metadata accessor for AttributedString.Index();
      lazy protocol witness table accessor for type GraphableExpressionState and conformance GraphableExpressionState(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F067E8]);
      char v63 = dispatch thunk of static Comparable.<= infix(_:_:)();
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v123, &demangling cache variable for type metadata for Range<AttributedString.Index>?);
      uint64_t v54 = v120;
      if ((v63 & 1) == 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v65 = v105;
      Swift::String v66 = v103;
      uint64_t v67 = v61;
      uint64_t v68 = &v103[*(int *)(v105 + 48)];
      uint64_t v69 = *(void *)(v62 - 8);
      v110 = (char *)v55;
      uint64_t v70 = v69;
      uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
      uint64_t v72 = v121;
      v71(v103, v121, v62);
      outlined destroy of StocksKitCurrencyCache.Provider?(v72, &demangling cache variable for type metadata for Range<AttributedString.Index>);
      v109 = v68;
      v71(v68, v67, v62);
      outlined destroy of StocksKitCurrencyCache.Provider?(v106, &demangling cache variable for type metadata for Range<AttributedString.Index>);
      uint64_t v73 = *(int *)(v65 + 48);
      uint64_t v74 = v104;
      uint64_t v75 = &v104[v73];
      v71(v104, (uint64_t)v66, v62);
      v71(v75, (uint64_t)v68, v62);
      unint64_t v76 = *(void (**)(uint64_t, char *, uint64_t))(v70 + 32);
      uint64_t v77 = v111;
      v76(v111, v74, v62);
      v78 = *(void (**)(char *, uint64_t))(v70 + 8);
      v78(v75, v62);
      uint64_t v79 = &v74[*(int *)(v105 + 48)];
      v76((uint64_t)v74, v66, v62);
      v76((uint64_t)v79, v109, v62);
      v76(v77 + *(int *)(v128 + 36), v79, v62);
      v78(v74, v62);
      uint64_t v55 = (uint64_t)v110;
      uint64_t v80 = v102;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v77, v102, &demangling cache variable for type metadata for Range<AttributedString.Index>);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v101[0])(v80, 0, 1, v128);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v80, (uint64_t)v123, &demangling cache variable for type metadata for Range<AttributedString.Index>?);
    }
  }
  swift_beginAccess();
  unint64_t v81 = v54[1];
  uint64_t v130 = *v54;
  unint64_t v131 = v81;
  uint64_t v133 = 91;
  unint64_t v134 = 0xE100000000000000;
  uint64_t v82 = v113;
  v83 = v124;
  v124(v55, 1, 1, v113);
  swift_bridgeObjectRetain();
  StringProtocol.range<A>(of:options:range:locale:)();
  char v85 = v84;
  outlined destroy of StocksKitCurrencyCache.Provider?(v55, &demangling cache variable for type metadata for Locale?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v85 & 1) == 0)
  {
    swift_beginAccess();
    unint64_t v86 = v54[1];
    uint64_t v130 = *v54;
    unint64_t v131 = v86;
    uint64_t v133 = 93;
    unint64_t v134 = 0xE100000000000000;
    v83(v55, 1, 1, v82);
    swift_bridgeObjectRetain();
    StringProtocol.range<A>(of:options:range:locale:)();
    LOBYTE(v86) = v87;
    outlined destroy of StocksKitCurrencyCache.Provider?(v55, &demangling cache variable for type metadata for Locale?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v86 & 1) == 0)
    {
      uint64_t v133 = 32;
      unint64_t v134 = 0xE100000000000000;
      swift_beginAccess();
      lazy protocol witness table accessor for type String and conformance String();
      String.replaceSubrange<A>(_:with:)();
      uint64_t v133 = 32;
      unint64_t v134 = 0xE100000000000000;
      String.replaceSubrange<A>(_:with:)();
      swift_endAccess();
    }
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  v88 = v118;
  AttributedString.init(_:attributes:)();
  uint64_t v89 = v126;
  uint64_t v90 = v127;
  v114(v127, v126);
  (*(void (**)(uint64_t, char *, uint64_t))(v125 + 32))(v90, v88, v89);
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  swift_getKeyPath();
  if (one-time initialization token for labelFont != -1) {
    swift_once();
  }
  uint64_t v130 = static GraphableVariablesView.labelFont;
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute();
  swift_retain();
  AttributedString.subscript.setter();
  uint64_t v92 = swift_getKeyPath();
  MEMORY[0x270FA5388](v92);
  swift_getKeyPath();
  v93 = self;
  uint64_t v130 = MEMORY[0x21054A5D0](objc_msgSend(v93, sel_secondaryLabelColor));
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
  AttributedString.subscript.setter();
  uint64_t v94 = (uint64_t)v123;
  uint64_t v95 = v119;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v123, v119, &demangling cache variable for type metadata for Range<AttributedString.Index>?);
  if (v117(v95, 1, v128) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v94, &demangling cache variable for type metadata for Range<AttributedString.Index>?);
    uint64_t v96 = v95;
  }
  else
  {
    uint64_t v97 = v107;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v95, v107, &demangling cache variable for type metadata for Range<AttributedString.Index>);
    uint64_t v98 = v111;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v97, v111, &demangling cache variable for type metadata for Range<AttributedString.Index>);
    uint64_t v99 = swift_getKeyPath();
    MEMORY[0x270FA5388](v99);
    swift_getKeyPath();
    uint64_t v132 = MEMORY[0x21054A5D0](objc_msgSend(v93, sel_labelColor));
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, &demangling cache variable for type metadata for Range<AttributedString.Index>);
    v100 = (void (*)(uint64_t *, void))AttributedString.subscript.modify();
    AttributedSubstring.subscript.setter();
    v100(&v130, 0);
    outlined destroy of StocksKitCurrencyCache.Provider?(v98, &demangling cache variable for type metadata for Range<AttributedString.Index>);
    outlined destroy of StocksKitCurrencyCache.Provider?(v97, &demangling cache variable for type metadata for Range<AttributedString.Index>);
    uint64_t v96 = v94;
  }
  return outlined destroy of StocksKitCurrencyCache.Provider?(v96, &demangling cache variable for type metadata for Range<AttributedString.Index>?);
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t specialized closure #1 in closure #1 in GraphableVariablesView.body.getter@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v83 = a7;
  uint64_t v80 = a6;
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>);
  uint64_t v81 = *(void *)(v85 - 8);
  MEMORY[0x270FA5388](v85);
  uint64_t v15 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>);
  MEMORY[0x270FA5388](v84);
  uint64_t v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>);
  MEMORY[0x270FA5388](v86);
  uint64_t v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>);
  MEMORY[0x270FA5388](v88);
  uint64_t v82 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  uint64_t v21 = MEMORY[0x270FA5388](v92);
  uint64_t v98 = (uint64_t)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v91 = (char *)&v80 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v90 = (char *)&v80 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v97 = (uint64_t)&v80 - v27;
  uint64_t v28 = type metadata accessor for AttributedString();
  MEMORY[0x270FA5388](v28 - 8);
  specialized getter of attrString #1 in closure #1 in GraphableVariablesView.body.getter(a1, (uint64_t)&v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v94 = Text.init(_:)();
  uint64_t v93 = v30;
  int v87 = v31;
  uint64_t v95 = v32;
  int v89 = static Edge.Set.leading.getter();
  if (one-time initialization token for leadingInset != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v41 = swift_allocObject();
  int v96 = a2;
  *(unsigned char *)(v41 + 16) = a2 & 1;
  *(void *)(v41 + 24) = a3;
  *(void *)(v41 + 32) = a4;
  uint64_t v42 = v80;
  *(void *)(v41 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = a5;
  *(void *)(v41 + 48) = v42;
  *(void *)(v41 + 56) = v83;
  MEMORY[0x270FA5388](a3);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>);
  lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>> and conformance <> _ConditionalContent<A, B>();
  Button.init(action:label:)();
  if (one-time initialization token for checkmarkSize != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v43 = v81;
  uint64_t v44 = v85;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v17, v15, v85);
  uint64_t v45 = &v17[*(int *)(v84 + 36)];
  long long v46 = v101;
  *(_OWORD *)uint64_t v45 = v100;
  *((_OWORD *)v45 + 1) = v46;
  *((_OWORD *)v45 + 2) = v102;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v44);
  char v47 = static Edge.Set.leading.getter();
  uint64_t v48 = (uint64_t)v91;
  uint64_t v49 = v88;
  uint64_t v50 = (uint64_t)v82;
  if (one-time initialization token for viewPadding != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v17, (uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>);
  unsigned int v59 = &v19[*(int *)(v86 + 36)];
  *unsigned int v59 = v47;
  *((void *)v59 + 1) = v52;
  *((void *)v59 + 2) = v54;
  *((void *)v59 + 3) = v56;
  *((void *)v59 + 4) = v58;
  v59[40] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v19, v50, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>);
  *(unsigned char *)(v50 + *(int *)(v49 + 36)) = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>);
  char v60 = v96;
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v103._object = (void *)0x800000020C84F6D0;
  v61._uint64_t countAndFlagsBits = 0x64657463656C6553;
  v61._object = (void *)0xE800000000000000;
  v62.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v62.value._object = (void *)0xEB00000000656C62;
  v63._uint64_t countAndFlagsBits = 0;
  v63._object = (void *)0xE000000000000000;
  v103._uint64_t countAndFlagsBits = 0xD000000000000028;
  Swift::String v99 = NSLocalizedString(_:tableName:bundle:value:comment:)(v61, v62, paperKitBundle, v63, v103);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type String and conformance String();
  View.accessibilityLabel<A>(_:)();
  swift_bridgeObjectRelease();
  outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>);
  unint64_t v79 = 0x800000020C84F6D0;
  if (v60)
  {
    uint64_t v64 = 0x64657463656C6553;
    unint64_t v65 = 0xE800000000000000;
  }
  else
  {
    uint64_t v64 = 0x656C655320746F4ELL;
    unint64_t v65 = 0xEC00000064657463;
  }
  v66.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v66.value._object = (void *)0xEB00000000656C62;
  v67._uint64_t countAndFlagsBits = 0;
  v67._object = (void *)0xE000000000000000;
  unint64_t v68 = 0xD000000000000028;
  Swift::String v69 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v64, v66, paperKitBundle, v67, *(Swift::String *)(&v79 - 1));
  char v70 = v87 & 1;
  Swift::String v99 = v69;
  uint64_t v71 = (uint64_t)v90;
  ModifiedContent<>.accessibilityValue<A>(_:)();
  swift_bridgeObjectRelease();
  outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  uint64_t v72 = v97;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v71, v97, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  uint64_t v73 = v98;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v72, v98, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  uint64_t v75 = v94;
  uint64_t v74 = v95;
  uint64_t v76 = v93;
  *(void *)a8 = v94;
  *(void *)(a8 + 8) = v76;
  *(unsigned char *)(a8 + 16) = v70;
  *(void *)(a8 + 24) = v74;
  *(unsigned char *)(a8 + 32) = v89;
  *(void *)(a8 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = v34;
  *(void *)(a8 + 48) = v36;
  *(void *)(a8 + 56) = v38;
  *(void *)(a8 + 64) = v40;
  *(unsigned char *)(a8 + 72) = 0;
  *(void *)(a8 + 8__isPlatformVersionAtLeast(2, 18, 1, 0) = 0;
  *(unsigned char *)(a8 + 88) = 1;
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>));
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v73, a8 + *(int *)(v77 + 64), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  outlined copy of Text.Storage(v75, v76, v70);
  swift_bridgeObjectRetain();
  outlined destroy of StocksKitCurrencyCache.Provider?(v72, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v73, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  outlined consume of Text.Storage(v75, v76, v70);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in closure #1 in GraphableVariablesView.body.getter(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = a4;
  if (a1)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
    MEMORY[0x21054A870](&v29);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    char v22 = 0;
    lazy protocol witness table accessor for type GraphableExpressionState and conformance GraphableExpressionState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    uint64_t v27 = a3;
    uint64_t v28 = v25;
    MEMORY[0x21054A870](&v29, v8);
    uint64_t v10 = v29;
    uint64_t v11 = swift_getKeyPath();
    MEMORY[0x270FA5388](v11);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = v10;
  }
  else
  {
    uint64_t v26 = a2;
    uint64_t v27 = a3;
    uint64_t v28 = a4;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
    MEMORY[0x21054A870](&v29);
    uint64_t v14 = v29;
    uint64_t v15 = swift_getKeyPath();
    uint64_t v23 = (uint64_t)&v23;
    MEMORY[0x270FA5388](v15);
    uint64_t v19 = v14;
    uint64_t v20 = a5;
    uint64_t v21 = a6;
    uint64_t v26 = v14;
    lazy protocol witness table accessor for type GraphableExpressionState and conformance GraphableExpressionState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
    swift_bridgeObjectRetain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v26 = a2;
    uint64_t v27 = a3;
    uint64_t v28 = v25;
    MEMORY[0x21054A870](&v29, v24);
    uint64_t v10 = v29;
    uint64_t v16 = swift_getKeyPath();
    MEMORY[0x270FA5388](v16);
    *(void *)&v18[-16] = v10;
    v18[-8] = 1;
  }
  uint64_t v26 = v10;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in closure #1 in closure #1 in GraphableVariablesView.body.getter@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v31 = a1;
  uint64_t v33 = a2;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
  uint64_t v2 = MEMORY[0x270FA5388](v34);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v30 = (uint64_t)&v29 - v5;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>.Storage);
  MEMORY[0x270FA5388](v32);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DynamicTypeSize();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.dynamicTypeSize(_:)>>.0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v29 - v17;
  uint64_t v19 = (void (**)(char *, void, uint64_t))(v9 + 104);
  uint64_t v20 = (void (**)(char *, uint64_t))(v9 + 8);
  if (v31)
  {
    uint64_t v35 = Image.init(systemName:)();
    (*v19)(v11, *MEMORY[0x263F18D38], v8);
    uint64_t v21 = MEMORY[0x263F1B558];
    View.dynamicTypeSize(_:)();
    (*v20)(v11, v8);
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v16, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v7, v18, v12);
    swift_storeEnumTagMultiPayload();
    uint64_t v35 = MEMORY[0x263F1B570];
    uint64_t v36 = v21;
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
  else
  {
    uint64_t v35 = Image.init(systemName:)();
    (*v19)(v11, *MEMORY[0x263F18D38], v8);
    View.dynamicTypeSize(_:)();
    (*v20)(v11, v8);
    swift_release();
    id v23 = objc_msgSend(self, sel_separatorColor);
    uint64_t v24 = MEMORY[0x21054A5D0](v23);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v35 = v24;
    swift_retain();
    uint64_t v26 = AnyShapeStyle.init<A>(_:)();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v4, v18, v12);
    swift_release();
    uint64_t v27 = (uint64_t *)&v4[*(int *)(v34 + 36)];
    *uint64_t v27 = KeyPath;
    v27[1] = v26;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    uint64_t v28 = v30;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v4, v30, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v28, (uint64_t)v7, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
    swift_storeEnumTagMultiPayload();
    uint64_t v35 = MEMORY[0x263F1B570];
    uint64_t v36 = MEMORY[0x263F1B558];
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>();
    _ConditionalContent<>.init(storage:)();
    return outlined destroy of StocksKitCurrencyCache.Provider?(v28, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
  }
}

uint64_t closure #2 in closure #1 in GraphableVariablesView.body.getter(char a1)
{
  if (a1)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
    MEMORY[0x21054A870](&v6, v1);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    lazy protocol witness table accessor for type GraphableExpressionState and conformance GraphableExpressionState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
    MEMORY[0x21054A870](&v6, v4);
    uint64_t v5 = swift_getKeyPath();
    MEMORY[0x270FA5388](v5);
    lazy protocol witness table accessor for type GraphableExpressionState and conformance GraphableExpressionState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
    swift_bridgeObjectRetain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GraphableVariablesView()
{
  return MEMORY[0x270F032C0]();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GraphableVariablesView()
{
  return MEMORY[0x270F032D0]();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GraphableVariablesView()
{
  return static View._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance GraphableVariablesView()
{
  return GraphableVariablesView.body.getter(*v0, v0[1], v0[2]);
}

uint64_t sub_20C2FF5B0()
{
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in GraphableVariablesView.body.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in GraphableVariablesView.body.getter(a1, v2[2], v2[3], v2[4], a2);
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>, _PaddingLayout>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t partial apply for closure #2 in closure #1 in GraphableVariablesView.body.getter()
{
  return partial apply for closure #2 in closure #1 in GraphableVariablesView.body.getter((uint64_t (*)(void, void, void, void, void, void))closure #2 in closure #1 in GraphableVariablesView.body.getter);
}

uint64_t partial apply for closure #1 in GraphableExpressionState.graphableVariable.setter()
{
  return closure #1 in GraphableExpressionState.graphableVariable.setter(v0[2], v0[3], v0[4]);
}

uint64_t objectdestroy_9Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in GraphableVariablesView.body.getter()
{
  return partial apply for closure #2 in closure #1 in GraphableVariablesView.body.getter((uint64_t (*)(void, void, void, void, void, void))closure #1 in closure #1 in closure #1 in GraphableVariablesView.body.getter);
}

uint64_t partial apply for closure #2 in closure #1 in GraphableVariablesView.body.getter(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(*(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in GraphableVariablesView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in closure #1 in closure #1 in GraphableVariablesView.body.getter(*(unsigned __int8 *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type _ContentShapeModifier<Rectangle> and conformance _ContentShapeModifier<A>, &demangling cache variable for type metadata for _ContentShapeModifier<Rectangle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>);
    lazy protocol witness table accessor for type ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined copy of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t outlined consume of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t partial apply for closure #1 in GraphableExpressionState.enabled.setter()
{
  return closure #1 in GraphableExpressionState.enabled.setter(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void sub_20C2FFC78()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute);
  }
  return result;
}

void sub_20C2FFCEC()
{
}

uint64_t sub_20C2FFD14()
{
  return 8;
}

uint64_t sub_20C2FFD20()
{
  return swift_release();
}

uint64_t sub_20C2FFD28(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_20C2FFD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>)(a1, a2, a3, &demangling cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>) & 1;
}

uint64_t sub_20C2FFD58(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &demangling cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>);
}

void *sub_20C2FFD64(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_20C2FFD70()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute);
  }
  return result;
}

void sub_20C2FFDE4()
{
}

uint64_t sub_20C2FFE0C()
{
  return 8;
}

uint64_t sub_20C2FFE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>)(a1, a2, a3, &demangling cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>) & 1;
}

uint64_t sub_20C2FFE3C(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &demangling cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>);
}

uint64_t keypath_hashTm(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type GraphableExpressionState and conformance GraphableExpressionState(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, <<opaque return type of View.onTapGesture(count:perform:)>>.0> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, <<opaque return type of View.onTapGesture(count:perform:)>>.0> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, <<opaque return type of View.onTapGesture(count:perform:)>>.0> and conformance <> ForEach<A, B, C>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ForEach<Range<Int>, Int, <<opaque return type of View.onTapGesture(count:perform:)>>.0>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>, _PaddingLayout>);
    lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, <<opaque return type of View.onTapGesture(count:perform:)>>.0> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

uint64_t closure #1 in GraphableExpressionState.enabled.setterpartial apply()
{
  return partial apply for closure #1 in GraphableExpressionState.enabled.setter();
}

uint64_t closure #1 in GraphableExpressionState.graphableVariable.setterpartial apply()
{
  return partial apply for closure #1 in GraphableExpressionState.graphableVariable.setter();
}

id TiledDocumentView.init(in:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_currentPaperView + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController;
  id v4 = objc_allocWithZone((Class)type metadata accessor for CanvasElementController());
  uint64_t v5 = v1;
  *(void *)&v1[v3] = objc_msgSend(v4, sel_init);
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_toolPicker] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_selectionInteractionDelegate] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments] = MEMORY[0x263F8EE78];

  type metadata accessor for PKDrawingCoherence(0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v12.receiver = v5;
  v12.super_class = (Class)type metadata accessor for TiledDocumentView();
  id v7 = objc_msgSendSuper2(&v12, sel_initInScrollView_sixChannelBlending_defaultDrawingClass_readOnly_, a1, 1, ObjCClassFromMetadata, 0);
  id v8 = objc_msgSend(v7, sel_canvasView);
  if (v8)
  {
    uint64_t v9 = v8;
    objc_msgSend(v8, sel_setOpaque_, 0);
  }
  id v10 = v7;
  objc_msgSend(v10, sel_setCanvasViewZOrderPolicy_, 1);

  return v10;
}

Swift::Void __swiftcall TiledDocumentView.didMoveToWindow()()
{
  uint64_t v1 = v0;
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for TiledDocumentView();
  objc_msgSendSuper2(&v12, sel_didMoveToWindow);
  id v2 = objc_msgSend(v0, sel_window);

  if (v2)
  {
    uint64_t v3 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TiledSelectionInteractionDelegate<TiledDocumentView>);
    id v4 = objc_allocWithZone(v3);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    v11.receiver = v4;
    v11.super_class = v3;
    id v5 = objc_msgSendSuper2(&v11, sel_init);
    uint64_t v6 = OBJC_IVAR____TtC8PaperKit17TiledDocumentView_selectionInteractionDelegate;
    id v7 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_selectionInteractionDelegate];
    *(void *)&v1[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_selectionInteractionDelegate] = v5;

    id v8 = objc_msgSend(v1, sel_selectionInteraction);
    objc_msgSend(v8, sel_setDelegate_, *(void *)&v1[v6]);

    *(void *)(*(void *)&v1[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController]
              + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate
              + 8) = &protocol witness table for TiledDocumentView;
    swift_unknownObjectWeakAssign();
    uint64_t v9 = v1;
    CanvasElementController.delegate.didset();
  }
  else
  {
    id v10 = objc_msgSend(v0, sel_selectionInteraction);
    objc_msgSend(v10, sel_setDelegate_, 0);

    *(void *)(*(void *)&v0[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController]
              + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate
              + 8) = 0;
    swift_unknownObjectWeakAssign();
    CanvasElementController.delegate.didset();
  }
}

uint64_t TiledDocumentView.paperAttachments.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v12 = MEMORY[0x263F8EE78];
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    id v5 = (uint64_t *)(v2 + 40);
    do
    {
      uint64_t v6 = (void *)*(v5 - 1);
      uint64_t v7 = *v5;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 104);
      id v10 = v6;
      unint64_t v11 = v9(ObjectType, v7);

      specialized Array.append<A>(contentsOf:)(v11);
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v12;
  }
  return result;
}

char *TiledDocumentView.paperAttachmentsIncludingSubAttachments.getter()
{
  uint64_t v1 = v0;
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    id v3 = (id)v2;
    id v4 = v1;
LABEL_7:

    id v6 = v4;
    uint64_t v7 = specialized UIView.firstDescendent(where:)(v3);

    if (v7)
    {
      type metadata accessor for TiledTextView();
      if (swift_dynamicCastClass())
      {
        id v8 = v7;
        uint64_t v9 = TiledTextView.paperAttachmentsIncludingSubAttachments.getter();

        return v9;
      }
    }
  }
  else
  {
    id v4 = v1;
    while (1)
    {
      id v3 = objc_msgSend(v4, sel_superview);

      if (!v3) {
        break;
      }
      id v4 = v3;
      self;
      uint64_t v5 = swift_dynamicCastObjCClass();
      if (v5)
      {
        id v3 = (id)v5;
        goto LABEL_7;
      }
    }
  }
  unint64_t v11 = &v1[OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments];
  swift_beginAccess();
  uint64_t v12 = *(void *)v11;
  uint64_t v21 = MEMORY[0x263F8EE78];
  uint64_t v13 = *(void *)(*(void *)v11 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = (uint64_t *)(v12 + 40);
    do
    {
      uint64_t v15 = (void *)*(v14 - 1);
      uint64_t v16 = *v14;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 104);
      id v19 = v15;
      unint64_t v20 = v18(ObjectType, v16);

      specialized Array.append<A>(contentsOf:)(v20);
      v14 += 2;
      --v13;
    }
    while (v13);

    swift_bridgeObjectRelease();
  }
  else
  {
  }
  return (char *)v21;
}

uint64_t TiledDocumentView.attachments()()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments);
  swift_beginAccess();
  uint64_t v2 = *v1;
  unint64_t v3 = MEMORY[0x263F8EE78];
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v5 = (uint64_t *)(v2 + 40);
    unint64_t v6 = MEMORY[0x263F8EE78];
    do
    {
      id v8 = (void *)*(v5 - 1);
      uint64_t v9 = *v5;
      uint64_t ObjectType = swift_getObjectType();
      id v11 = v8;
      id v12 = objc_msgSend(v11, sel_window);

      if (v12) {
        unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 96))(ObjectType, v9);
      }
      else {
        unint64_t v7 = v6;
      }

      specialized Array.append<A>(contentsOf:)(v7);
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease_n();
    unint64_t v3 = v15;
  }
  swift_bridgeObjectRetain();
  if (v3 >> 62)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKAttachment);
    uint64_t v13 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    uint64_t v13 = v3;
  }
  swift_bridgeObjectRelease();
  return v13;
}

char *specialized TiledPaperKitView.selectedOrMostVisibleAttachment()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  char v47 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  long long v46 = (char *)&v33 - v5;
  uint64_t v45 = type metadata accessor for CRKeyPath();
  uint64_t v48 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  unint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = v0;
  unint64_t v8 = TiledTextView.paperAttachments.getter();
  unint64_t v9 = v8;
  if (!(v8 >> 62))
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_3;
    }
LABEL_24:
    swift_bridgeObjectRelease_n();
    return (char *)specialized TiledPaperKitView.mostVisibleAttachment()((uint64_t (*)(void))TiledTextView.paperAttachmentsIncludingSubAttachments.getter);
  }
LABEL_31:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  if (!v10) {
    goto LABEL_24;
  }
LABEL_3:
  uint64_t v11 = 0;
  unint64_t v36 = v9;
  unint64_t v37 = v9 & 0xC000000000000001;
  unint64_t v34 = v9 + 32;
  uint64_t v35 = v10;
  uint64_t v42 = v2 + 32;
  uint64_t v43 = v2 + 16;
  uint64_t v40 = v48 + 32;
  uint64_t v41 = v2 + 8;
  uint64_t v44 = v7;
  while (1)
  {
    if (v37) {
      uint64_t result = (char *)MEMORY[0x21054E050](v11, v9);
    }
    else {
      uint64_t result = (char *)*(id *)(v34 + 8 * v11);
    }
    uint64_t v13 = result;
    if (__OFADD__(v11++, 1)) {
      goto LABEL_30;
    }
    uint64_t v15 = *(void *)&result[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
    if (!v15) {
      break;
    }
    uint64_t v16 = *(void *)(v15 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    int64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      id v38 = result;
      uint64_t v39 = v11;
      uint64_t v50 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
      uint64_t v18 = specialized Set.startIndex.getter(v16);
      uint64_t v20 = v19;
      char v22 = v21 & 1;
      uint64_t v49 = v16 + 56;
      while ((v18 & 0x8000000000000000) == 0 && v18 < 1 << *(unsigned char *)(v16 + 32))
      {
        if (((*(void *)(v49 + (((unint64_t)v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
          goto LABEL_28;
        }
        if (*(_DWORD *)(v16 + 36) != v20) {
          goto LABEL_29;
        }
        id v23 = v46;
        (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v46, *(void *)(v16 + 48) + *(void *)(v2 + 72) * v18, v1);
        uint64_t v24 = v47;
        (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v47, v23, v1);
        MEMORY[0x21054BA70](v1);
        (*(void (**)(char *, uint64_t))(v2 + 8))(v24, v1);
        uint64_t v25 = v50;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1);
          uint64_t v25 = v50;
        }
        unint64_t v27 = *(void *)(v25 + 16);
        unint64_t v26 = *(void *)(v25 + 24);
        unint64_t v9 = v27 + 1;
        if (v27 >= v26 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
          uint64_t v25 = v50;
        }
        *(void *)(v25 + 16) = v9;
        unint64_t v28 = v25
            + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))
            + *(void *)(v48 + 72) * v27;
        unint64_t v7 = v44;
        (*(void (**)(unint64_t, char *, uint64_t))(v48 + 32))(v28, v44, v45);
        uint64_t v50 = v25;
        uint64_t v29 = specialized _NativeSet.index(after:)(v18, v20, v22 & 1, v16);
        uint64_t v18 = v29;
        uint64_t v20 = v30;
        char v22 = v31 & 1;
        if (!--v17)
        {
          outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(v29, v30, v31 & 1);
          swift_bridgeObjectRelease();
          uint64_t v10 = v35;
          unint64_t v9 = v36;
          uint64_t v13 = v38;
          uint64_t v11 = v39;
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    uint64_t v25 = MEMORY[0x263F8EE78];
LABEL_22:
    uint64_t v32 = *(void *)(v25 + 16);
    swift_bridgeObjectRelease();
    if (v32)
    {
      swift_bridgeObjectRelease_n();
      return (char *)v13;
    }

    if (v11 == v10) {
      goto LABEL_24;
    }
  }
  __break(1u);
  return result;
}

void specialized TiledPaperKitView.selectedOrMostVisibleAttachment()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v55 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v54 = (char *)&v42 - v5;
  uint64_t v53 = type metadata accessor for CRKeyPath();
  uint64_t v56 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v58 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v0;
  unint64_t v7 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments);
  swift_beginAccess();
  uint64_t v8 = *v7;
  unint64_t v9 = MEMORY[0x263F8EE78];
  unint64_t v59 = MEMORY[0x263F8EE78];
  uint64_t v10 = *(void *)(v8 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = (uint64_t *)(v8 + 40);
    do
    {
      id v12 = (void *)*(v11 - 1);
      uint64_t v13 = *v11;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 104);
      id v16 = v12;
      unint64_t v17 = v15(ObjectType, v13);

      specialized Array.append<A>(contentsOf:)(v17);
      v11 += 2;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    unint64_t v18 = v59;
    unint64_t v9 = MEMORY[0x263F8EE78];
  }
  else
  {
    unint64_t v18 = MEMORY[0x263F8EE78];
  }
  unint64_t v44 = v18;
  if (!(v18 >> 62))
  {
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v45 = v19;
    if (v19) {
      goto LABEL_8;
    }
LABEL_26:
    swift_bridgeObjectRelease_n();
    specialized TiledPaperKitView.mostVisibleAttachment()((uint64_t (*)(void))TiledDocumentView.paperAttachmentsIncludingSubAttachments.getter);
    return;
  }
LABEL_32:
  swift_bridgeObjectRetain();
  uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
  if (!v45) {
    goto LABEL_26;
  }
LABEL_8:
  uint64_t v20 = 0;
  unint64_t v46 = v44 + 32;
  uint64_t v51 = v2 + 32;
  uint64_t v52 = v2 + 16;
  uint64_t v49 = v56 + 32;
  uint64_t v50 = v2 + 8;
  while (1)
  {
    uint64_t v21 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      goto LABEL_31;
    }
    char v22 = *(char **)(v46 + 8 * v20);
    uint64_t v23 = *(void *)&v22[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
    if (!v23) {
      break;
    }
    uint64_t v24 = *(void *)(v23 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    int64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      uint64_t v47 = v21;
      uint64_t v48 = v22;
      unint64_t v59 = v9;
      unint64_t v26 = v22;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0);
      uint64_t v27 = specialized Set.startIndex.getter(v24);
      uint64_t v29 = v28;
      char v31 = v30 & 1;
      uint64_t v57 = v24 + 56;
      while ((v27 & 0x8000000000000000) == 0 && v27 < 1 << *(unsigned char *)(v24 + 32))
      {
        if (((*(void *)(v57 + (((unint64_t)v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v27) & 1) == 0) {
          goto LABEL_29;
        }
        if (*(_DWORD *)(v24 + 36) != v29) {
          goto LABEL_30;
        }
        uint64_t v32 = v54;
        (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v54, *(void *)(v24 + 48) + *(void *)(v2 + 72) * v27, v1);
        uint64_t v33 = v55;
        (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v55, v32, v1);
        MEMORY[0x21054BA70](v1);
        (*(void (**)(char *, uint64_t))(v2 + 8))(v33, v1);
        unint64_t v34 = v59;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1);
          unint64_t v34 = v59;
        }
        unint64_t v36 = *(void *)(v34 + 16);
        unint64_t v35 = *(void *)(v34 + 24);
        unint64_t v9 = v36 + 1;
        if (v36 >= v35 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
          unint64_t v34 = v59;
        }
        *(void *)(v34 + 16) = v9;
        (*(void (**)(unint64_t, char *, uint64_t))(v56 + 32))(v34+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(void *)(v56 + 72) * v36, v58, v53);
        unint64_t v59 = v34;
        uint64_t v37 = specialized _NativeSet.index(after:)(v27, v29, v31 & 1, v24);
        uint64_t v27 = v37;
        uint64_t v29 = v38;
        char v31 = v39 & 1;
        if (!--v25)
        {
          outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(v37, v38, v39 & 1);
          swift_bridgeObjectRelease();
          unint64_t v9 = MEMORY[0x263F8EE78];
          uint64_t v21 = v47;
          char v22 = v48;
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    uint64_t v40 = v22;
    unint64_t v34 = v9;
LABEL_24:
    uint64_t v41 = *(void *)(v34 + 16);
    swift_bridgeObjectRelease();
    if (v41)
    {
      swift_bridgeObjectRelease_n();
      return;
    }

    uint64_t v20 = v21;
    if (v21 == v45) {
      goto LABEL_26;
    }
  }
  __break(1u);
}

id specialized TiledPaperKitView.mostVisibleAttachment()()
{
  return specialized TiledPaperKitView.mostVisibleAttachment()((uint64_t (*)(void))TiledTextView.paperAttachmentsIncludingSubAttachments.getter);
}

{
  return specialized TiledPaperKitView.mostVisibleAttachment()((uint64_t (*)(void))TiledDocumentView.paperAttachmentsIncludingSubAttachments.getter);
}

id specialized TiledPaperKitView.mostVisibleAttachment()(uint64_t (*a1)(void))
{
  id v3 = objc_msgSend(v1, sel_window);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  unint64_t v5 = specialized TiledPaperKitView.paperAttachments(includeStandInAttachment:)(1, a1);
  objc_msgSend(v4, sel_bounds);
  CGFloat x = v23.origin.x;
  CGFloat y = v23.origin.y;
  CGFloat width = v23.size.width;
  CGFloat height = v23.size.height;
  double MidX = CGRectGetMidX(v23);
  v24.origin.CGFloat x = x;
  v24.origin.CGFloat y = y;
  v24.size.CGFloat width = width;
  v24.size.CGFloat height = height;
  double MidY = CGRectGetMidY(v24);
  id v12 = v4;
  uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8PaperKit9AnyCanvasCG_AH_12CoreGraphics7CGFloatVts5NeverOTg503_s8d47Kit05TiledaB4ViewPAAE21mostVisibleAttachmentAA9fg10CSgyFAF_12h9Graphics7J9VtAFXEfU_So8UIWindowCSo7CGPointVTf1cn_nTf4ngn_n(v5, (uint64_t)v12, MidX, MidY);
  swift_bridgeObjectRelease();

  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    swift_bridgeObjectRelease();

    return 0;
  }
  uint64_t v15 = *(void **)(v13 + 32);
  uint64_t v16 = v14 - 1;
  if (v14 == 1)
  {
    id v17 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    double v18 = *(double *)(v13 + 40);
    id v19 = v15;
    swift_bridgeObjectRetain();
    uint64_t v20 = (double *)(v13 + 56);
    id v17 = v19;
    do
    {
      double v21 = *v20;
      if (*v20 < v18)
      {
        id v17 = *((id *)v20 - 1);

        id v19 = v17;
        double v18 = v21;
      }
      v20 += 2;
      --v16;
    }
    while (v16);

    swift_bridgeObjectRelease_n();
  }
  return v17;
}

id TiledDocumentView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TiledDocumentView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TiledDocumentView()
{
  return self;
}

uint64_t protocol witness for TiledPaperKitView.currentPaperView.getter in conformance TiledDocumentView()
{
  return MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_currentPaperView);
}

void protocol witness for TiledPaperKitView.currentPaperView.setter in conformance TiledDocumentView(void *a1, uint64_t a2)
{
  *(void *)(v2 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_currentPaperView + 8) = a2;
  swift_unknownObjectWeakAssign();
}

id protocol witness for TiledPaperKitView.canvasElementController.getter in conformance TiledDocumentView()
{
  return *(id *)(v0 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController);
}

id protocol witness for CanvasElementControllerDelegate.canvasElementControllerCanvasForInsertion.getter in conformance TiledDocumentView()
{
  return specialized TiledPaperKitView.mostVisibleAttachment()((uint64_t (*)(void))TiledDocumentView.paperAttachmentsIncludingSubAttachments.getter);
}

void *protocol witness for CanvasElementControllerDelegate.canvasElementControllerToolPicker.getter in conformance TiledDocumentView()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_toolPicker);
  id v2 = v1;
  return v1;
}

id protocol witness for CanvasElementControllerDelegate.canvasElementControllerWindow(_:) in conformance TiledDocumentView()
{
  id v1 = objc_msgSend(v0, sel_window);
  return v1;
}

uint64_t specialized TiledPaperKitView.paperAttachments(includeStandInAttachment:)(char a1, uint64_t (*a2)(void))
{
  uint64_t v4 = a2();
  uint64_t v21 = v4;
  if (a1)
  {
    unint64_t v5 = specialized TiledPaperKitView.visibleStandInPaperAttachmentView()();
    if (v5)
    {
      uint64_t v6 = v5;
      objc_msgSend(v5, sel_bounds);
      objc_msgSend(v6, sel_convertRect_toCoordinateSpace_, v2);
      CGFloat v8 = v7;
      CGFloat v10 = v9;
      CGFloat v12 = v11;
      CGFloat v14 = v13;
      objc_msgSend(v2, sel_bounds);
      v23.origin.CGFloat x = v15;
      v23.origin.CGFloat y = v16;
      v23.size.CGFloat width = v17;
      v23.size.CGFloat height = v18;
      v22.origin.CGFloat x = v8;
      v22.origin.CGFloat y = v10;
      v22.size.CGFloat width = v12;
      v22.size.CGFloat height = v14;
      if (CGRectIntersectsRect(v22, v23))
      {
        id v19 = v6;
        MEMORY[0x21054D330]();
        if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        return v21;
      }
      else
      {
      }
    }
  }
  return v4;
}

void *specialized TiledPaperKitView.visibleStandInPaperAttachmentView()()
{
  objc_msgSend(v0, sel_updateEndAttachment);
  id v1 = objc_msgSend(v0, sel_standInAttachmentView);
  id v2 = v1;
  if (v1)
  {
    id v3 = objc_msgSend(v1, sel_attachmentContainerView);

    if (!v3) {
      return 0;
    }
    type metadata accessor for AnyCanvas();
    uint64_t v4 = (void *)swift_dynamicCastClass();
    id v2 = v4;
    if (!v4)
    {

      return v2;
    }
    if (objc_msgSend(v4, sel_isHidden))
    {

      return 0;
    }
  }
  return v2;
}

void specialized TiledDocumentView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_currentPaperView + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasElementController()), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_toolPicker] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_selectionInteractionDelegate] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments] = MEMORY[0x263F8EE78];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8PaperKit9AnyCanvasCG_AH_12CoreGraphics7CGFloatVts5NeverOTg503_s8d47Kit05TiledaB4ViewPAAE21mostVisibleAttachmentAA9fg10CSgyFAF_12h9Graphics7J9VtAFXEfU_So8UIWindowCSo7CGPointVTf1cn_nTf4ngn_n(unint64_t a1, uint64_t a2, double a3, double a4)
{
  if (a1 >> 62) {
    goto LABEL_26;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    if (!v8) {
      return v9;
    }
    uint64_t v33 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0) {
      break;
    }
    uint64_t v11 = 0;
    uint64_t v9 = v33;
    while (v8 != v11)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v12 = (id)MEMORY[0x21054E050](v11, a1);
      }
      else {
        id v12 = *(id *)(a1 + 8 * v11 + 32);
      }
      double v13 = v12;
      objc_msgSend(v12, sel_bounds);
      objc_msgSend(v13, sel_convertRect_toCoordinateSpace_, a2);
      CGFloat v15 = v14;
      CGFloat v17 = v16;
      CGFloat v19 = v18;
      CGFloat v21 = v20;
      id v22 = v13;
      v34.origin.CGFloat x = v15;
      v34.origin.CGFloat y = v17;
      v34.size.CGFloat width = v19;
      v34.size.CGFloat height = v21;
      double MinX = CGRectGetMinX(v34);
      v35.origin.CGFloat x = v15;
      v35.origin.CGFloat y = v17;
      v35.size.CGFloat width = v19;
      v35.size.CGFloat height = v21;
      double MaxX = CGRectGetMaxX(v35);
      if (MaxX >= a3) {
        double MaxX = a3;
      }
      if (MinX <= a3) {
        double v25 = MaxX;
      }
      else {
        double v25 = MinX;
      }
      v36.origin.CGFloat x = v15;
      v36.origin.CGFloat y = v17;
      v36.size.CGFloat width = v19;
      v36.size.CGFloat height = v21;
      double MinY = CGRectGetMinY(v36);
      v37.origin.CGFloat x = v15;
      v37.origin.CGFloat y = v17;
      v37.size.CGFloat width = v19;
      v37.size.CGFloat height = v21;
      double MaxY = CGRectGetMaxY(v37);

      if (MaxY >= a4) {
        double v28 = a4;
      }
      else {
        double v28 = MaxY;
      }
      if (MinY <= a4) {
        double v29 = v28;
      }
      else {
        double v29 = MinY;
      }
      unint64_t v31 = *(void *)(v33 + 16);
      unint64_t v30 = *(void *)(v33 + 24);
      if (v31 >= v30 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
      }
      ++v11;
      *(void *)(v33 + 16) = v31 + 1;
      uint64_t v32 = v33 + 16 * v31;
      *(void *)(v32 + 32) = v22;
      *(double *)(v32 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = (v25 - a3) * (v25 - a3) + (v29 - a4) * (v29 - a4);
      if (v8 == v11) {
        return v9;
      }
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized TiledDocumentView._canvasView(_:didCompleteRefinementEntry:)(void *a1)
{
  id v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  double v7 = &v39[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v39[-v8];
  objc_msgSend(a1, sel_duration);
  double v11 = v10;
  id v12 = objc_msgSend(a1, sel_refinedStrokes);
  type metadata accessor for PKStroke();
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = *(void *)(v13 + 16);
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(a1, sel_originalStrokes);
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = *(void *)(v16 + 16);
  swift_bridgeObjectRelease();
  id v18 = objc_msgSend(a1, sel_refinedWordCount);
  objc_msgSend(a1, sel_tokenDeviation);
  double v20 = v19;
  objc_msgSend(a1, sel_tokenTranslation);
  double v22 = v21;
  id v23 = objc_msgSend(a1, sel_locale);
  if (v23)
  {
    CGRect v24 = v23;
    static Locale._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v25 = type metadata accessor for Locale();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 0, 1, v25);
  }
  else
  {
    uint64_t v25 = type metadata accessor for Locale();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 1, 1, v25);
  }
  uint64_t v26 = v14 - v17;
  outlined init with take of Locale?((uint64_t)v7, (uint64_t)v9);
  type metadata accessor for Locale();
  uint64_t v27 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48))(v9, 1, v25) == 1)
  {
    outlined destroy of Locale?((uint64_t)v9);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v28 = Locale.identifier.getter();
    uint64_t v29 = v30;
    (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v9, v25);
  }
  char v33 = objc_msgSend(a1, sel_isAutoRefined) ^ 1;
  v39[0] = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  char v51 = 0;
  swift_unknownObjectWeakInit();
  float v34 = v11 * 1000.0;
  float v42 = v34;
  char v45 = v33;
  uint64_t v43 = v26;
  id v44 = v18;
  float v31 = v20;
  float v47 = v31;
  float v32 = v22;
  float v48 = v32;
  id v35 = v2;
  unsigned __int8 v46 = objc_msgSend(v35, sel_isAutoRefineEnabled);
  swift_unknownObjectWeakAssign();

  swift_bridgeObjectRelease();
  *(void *)&long long v41 = v28;
  *((void *)&v41 + 1) = v29;
  if ((v51 & 1) == 0) {
    MagicPaperUsageAutoRefineEvent.finalize()();
  }
  CGRect v36 = (void *)MEMORY[0x21054D080](0xD000000000000024, 0x800000020C84F860);
  if (specialized AnalyticsEvent.caEventPayload.getter())
  {
    type metadata accessor for NSObject();
    v37.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v37.super.Class isa = 0;
  }
  AnalyticsSendEvent();

  return outlined destroy of MagicPaperUsageAutoRefineEvent((uint64_t)v39);
}

uint64_t outlined init with take of Locale?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of MagicPaperUsageAutoRefineEvent(uint64_t a1)
{
  return a1;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t outlined destroy of weak AnyContainerCanvasElementView?(uint64_t a1)
{
  return a1;
}

uint64_t GraphableExpressionState.expression.getter()
{
  return swift_retain();
}

uint64_t closure #1 in GraphableExpressionState.expression.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  swift_retain();
  return swift_release();
}

uint64_t GraphableExpressionState.enabled.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t closure #1 in GraphableExpressionState.enabled.setter(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

uint64_t GraphableExpressionState.color.getter()
{
  return swift_retain();
}

uint64_t closure #1 in GraphableExpressionState.color.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  swift_retain();
  return swift_release();
}

uint64_t GraphableExpressionState.id.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t key path getter for GraphableExpressionState.id : GraphableExpressionState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t key path setter for GraphableExpressionState.id : GraphableExpressionState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v8 = *a2;
  swift_getKeyPath();
  uint64_t v11 = v8;
  id v12 = v7;
  uint64_t v13 = v8;
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t closure #1 in GraphableExpressionState.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess();
}

uint64_t GraphableExpressionState.graphableVariable.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariable);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in GraphableExpressionState.graphableVariable.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)(a1 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariable);
  *uint64_t v3 = a2;
  v3[1] = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t GraphableExpressionState.graphableVariables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in GraphableExpressionState.graphableVariables.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariables) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t GraphableExpressionState.shouldBeObserved.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__shouldBeObserved);
}

uint64_t closure #1 in GraphableExpressionState.shouldBeObserved.setter(uint64_t result, char a2)
{
  *(unsigned char *)(result + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__shouldBeObserved) = a2;
  return result;
}

uint64_t GraphableExpressionState.__deallocating_deinit()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState___observationRegistrar;
  uint64_t v4 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for GraphableExpressionState()
{
  return type metadata accessor for GraphableExpressionState();
}

uint64_t type metadata accessor for GraphableExpressionState()
{
  uint64_t result = type metadata singleton initialization cache for GraphableExpressionState;
  if (!type metadata singleton initialization cache for GraphableExpressionState) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for GraphableExpressionState()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ObservationRegistrar();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in GraphableExpressionState()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
}

uint64_t protocol witness for Identifiable.id.getter in conformance GraphableExpressionState@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, v4, v5);
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in GraphableExpressionState.id.setter()
{
  return closure #1 in GraphableExpressionState.id.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t specialized GraphableExpressionState.init(expression:enabled:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v2 + 32) = 0;
  double v10 = (void *)(v2 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariable);
  void *v10 = 0;
  v10[1] = 0;
  *(void *)(v2 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariables) = MEMORY[0x263F8EE78];
  ObservationRegistrar.init()();
  *(void *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 24) = a2;
  swift_retain();
  CalculateExpression.id.getter();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v2 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id, v9, v6);
  *(unsigned char *)(v2 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__shouldBeObserved) = 0;
  unint64_t v11 = *(void *)(CalculateExpression.graphableVariables.getter() + 16);
  swift_bridgeObjectRelease();
  if (v11 >= 2)
  {
    if (a2)
    {
      uint64_t v12 = CalculateExpression.graphableVariable.getter();
      uint64_t v14 = v13;
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x270FA5388](KeyPath);
      *(&v19 - 4) = v3;
      *(&v19 - 3) = v12;
      *(&v19 - 2) = v14;
      uint64_t v20 = v3;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v16 = CalculateExpression.graphableVariables.getter();
    uint64_t v17 = swift_getKeyPath();
    MEMORY[0x270FA5388](v17);
    *(&v19 - 2) = v3;
    *(&v19 - 1) = v16;
    uint64_t v20 = v3;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t partial apply for closure #1 in GraphableExpressionState.graphableVariables.setter()
{
  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariables) = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t _s8PaperKit24GraphableExpressionStateC17graphableVariableSSSgvsyyXEfU_TA_0()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)(v0[2] + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariable);
  *uint64_t v2 = v0[3];
  v2[1] = v1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void one-time initialization function for spacing()
{
  static AttributeStylingButton.spacing = 0x4000000000000000;
}

UIColor_optional __swiftcall AttributeStylingButton.resolvedBackgroundColor()()
{
  v7.receiver = v0;
  v7.super_class = (Class)swift_getObjectType();
  if ((objc_msgSendSuper2(&v7, sel_isSelected) & 1) != 0
    || objc_msgSend(v0, sel_isHighlighted))
  {
    uint64_t v1 = self;
    uint64_t v2 = &selRef_systemBlueColor;
  }
  else
  {
    int v3 = v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_useCompactStyle];
    uint64_t v1 = self;
    uint64_t v2 = &selRef_tertiarySystemFillColor;
    if (v3) {
      uint64_t v2 = &selRef_quaternarySystemFillColor;
    }
  }
  id v4 = [v1 *v2];
  uint64_t v5 = (objc_class *)v4;
  result.value.super.Class isa = v5;
  result.is_nil = v6;
  return result;
}

id AttributeStylingButton.resolvedTintColor()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (!objc_msgSend(v0, sel_isEnabled)) {
    return objc_msgSend(self, sel_systemGray2Color);
  }
  int v2 = v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_useCompactStyle];
  int v3 = self;
  id v4 = &selRef_systemGray3Color;
  if (!v2) {
    id v4 = &selRef_secondaryLabelColor;
  }
  id v5 = [v3 *v4];
  v8.receiver = v0;
  v8.super_class = ObjectType;
  if ((objc_msgSendSuper2(&v8, sel_isSelected) & 1) != 0
    || objc_msgSend(v0, sel_isHighlighted))
  {
    id v6 = objc_msgSend(self, sel_whiteColor);

    return v6;
  }
  return v5;
}

Swift::Void __swiftcall AttributeStylingButton.updateTintColor()()
{
  if (v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_useCompactStyle] == 1)
  {
    id v1 = objc_msgSend(v0, sel_traitCollection);
    id v2 = objc_msgSend(v1, sel_userInterfaceStyle);

    int v3 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_imageView];
    id v4 = AttributeStylingButton.resolvedTintColor()();
    objc_msgSend(v3, sel_setTintColor_, v4);

    if (v2 == (id)2) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = 2;
    }
    objc_msgSend(v3, sel_setOverrideUserInterfaceStyle_, v5);
  }
  else
  {
    id v6 = AttributeStylingButton.resolvedTintColor()();
    objc_msgSend(v0, sel_setTintColor_, v6);
  }
}

id AttributeStylingButton.isSelected.didset()
{
  v10.receiver = v0;
  v10.super_class = (Class)swift_getObjectType();
  unsigned __int8 v1 = objc_msgSendSuper2(&v10, sel_isSelected);
  uint64_t v2 = *MEMORY[0x263F832A8];
  unint64_t v3 = (unint64_t)objc_msgSend(v0, sel_accessibilityTraits);
  if ((v3 & v2) == v2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v2;
  }
  unint64_t v5 = v4 | v3;
  uint64_t v6 = -1;
  if ((v3 & v2) != 0) {
    uint64_t v6 = ~v2;
  }
  unint64_t v7 = v6 & v3;
  if (v1) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v7;
  }
  return objc_msgSend(v0, sel_setAccessibilityTraits_, v8);
}

id AttributeStylingButton.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AttributeStylingButton()
{
  return self;
}

unint64_t type metadata accessor for UIPointerRegion()
{
  unint64_t result = lazy cache variable for type metadata for UIPointerRegion;
  if (!lazy cache variable for type metadata for UIPointerRegion)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIPointerRegion);
  }
  return result;
}

uint64_t UnknownCanvasElementView.sharedCanvasElement.getter()
{
  uint64_t v1 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[4] = *(void *)((char *)v0 + direct field offset for UnknownCanvasElementView.canvasElementTag);
  char v9 = 1;
  uint64_t v6 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v6, v2);
  lazy protocol witness table accessor for type UnknownCanvasElement and conformance UnknownCanvasElement((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  Capsule<>.rootID.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

void *UnknownCanvasElementView.init(canvasElement:tag:canvas:parentCanvasElement:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v41 = a4;
  id v42 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  objc_super v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = &v4[direct field offset for UnknownCanvasElementView.displayedAsset];
  uint64_t v12 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(void *)&v4[direct field offset for UnknownCanvasElementView.displayedMaxDimensionInPixels] = 0;
  *(void *)&v4[direct field offset for UnknownCanvasElementView.getImageTask] = 0;
  *(void *)&v4[direct field offset for UnknownCanvasElementView.appearanceStreamView] = 0;
  *(void *)&v4[direct field offset for UnknownCanvasElementView.canvasElementTag] = a2;
  swift_getKeyPath();
  lazy protocol witness table accessor for type UnknownCanvasElement and conformance UnknownCanvasElement((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  uint64_t v13 = v4;
  Capsule<>.subscript.getter();
  swift_release();
  double v14 = v45;
  double v15 = v46;
  double v16 = v47;
  double v17 = v48;
  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithFrame_, v45, v46, v47, v48);
  uint64_t v19 = direct field offset for UnknownCanvasElementView.thumbnailView;
  *(void *)&v13[direct field offset for UnknownCanvasElementView.thumbnailView] = v18;
  objc_msgSend(v18, sel_setContentMode_, 2);
  objc_msgSend(*(id *)&v13[v19], sel_setClipsToBounds_, 1);
  id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithFrame_, v14, v15, v16, v17);
  uint64_t v21 = direct field offset for UnknownCanvasElementView.questionMarkView;
  *(void *)&v13[direct field offset for UnknownCanvasElementView.questionMarkView] = v20;
  objc_msgSend(v20, sel_setContentMode_, 1);
  objc_msgSend(*(id *)&v13[v21], sel_setClipsToBounds_, 1);
  id v22 = *(id *)&v13[v21];
  id v23 = (void *)MEMORY[0x21054D080](0xD00000000000001ALL, 0x800000020C84FB10);
  id v24 = objc_msgSend(self, sel_systemImageNamed_, v23);

  objc_msgSend(v22, sel_setImage_, v24);
  id v25 = objc_msgSend(self, sel_effectWithStyle_, 18);
  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E50]), sel_initWithEffect_, v25);
  *(void *)&v13[direct field offset for UnknownCanvasElementView.blurEffectView] = v26;
  objc_msgSend(v26, sel_setMaskView_, *(void *)&v13[v21]);
  id v27 = v26;
  objc_msgSend(v27, sel_setFrame_, v14, v15, v16, v17);

  uint64_t v43 = v8;
  uint64_t v44 = v7;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v29 = a1;
  v28(v10, a1, v7);
  id v30 = v41;
  id v31 = v41;
  id v32 = v42;
  id v33 = v42;
  float v34 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v10, v32, v30, v14, v15, v16, v17);

  uint64_t v35 = *(void *)((char *)v34 + direct field offset for UnknownCanvasElementView.thumbnailView);
  CGRect v36 = v34;
  objc_msgSend(v36, sel_addSubview_, v35);
  objc_msgSend(v36, sel_addSubview_, *(void *)((char *)v36 + direct field offset for UnknownCanvasElementView.blurEffectView));
  uint64_t v37 = one-time initialization token for imageMissingBackgroundColor;
  uint64_t v38 = v36;
  if (v37 != -1) {
    swift_once();
  }
  objc_msgSend(v38, sel_setBackgroundColor_, static UIConstants.imageMissingBackgroundColor, v41);
  char v39 = (void *)MEMORY[0x21054D080](0xD000000000000028, 0x800000020C84FB30);
  objc_msgSend(v38, sel_setAccessibilityIdentifier_, v39);

  specialized AppearanceStreamViewSupport.setupAppearanceStreamIfNeeded()();
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v29, v44);
  return v38;
}

void @objc UnknownCanvasElementView.init(coder:)(char *a1, uint64_t a2, void *a3)
{
  unint64_t v5 = &a1[direct field offset for UnknownCanvasElementView.displayedAsset];
  uint64_t v6 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(void *)&a1[direct field offset for UnknownCanvasElementView.displayedMaxDimensionInPixels] = 0;
  *(void *)&a1[direct field offset for UnknownCanvasElementView.getImageTask] = 0;
  *(void *)&a1[direct field offset for UnknownCanvasElementView.appearanceStreamView] = 0;
  id v7 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void UnknownCanvasElementView.__ivar_destroyer()
{
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + direct field offset for UnknownCanvasElementView.displayedAsset, &demangling cache variable for type metadata for CRAsset?);
  swift_release();
  uint64_t v1 = *(void **)(v0 + direct field offset for UnknownCanvasElementView.appearanceStreamView);
}

id UnknownCanvasElementView.__deallocating_deinit()
{
  if (*(void *)&v0[direct field offset for UnknownCanvasElementView.getImageTask])
  {
    uint64_t v1 = swift_retain();
    MEMORY[0x21054D560](v1, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
    swift_release();
  }
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for UnknownCanvasElementView();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id @objc UnknownCanvasElementView.__deallocating_deinit(char *a1)
{
  if (*(void *)&a1[direct field offset for UnknownCanvasElementView.getImageTask])
  {
    uint64_t v2 = a1;
    uint64_t v3 = swift_retain();
    MEMORY[0x21054D560](v3, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
    swift_release();
  }
  else
  {
    uint64_t v4 = a1;
  }
  v6.receiver = a1;
  v6.super_class = (Class)type metadata accessor for UnknownCanvasElementView();
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

void @objc UnknownCanvasElementView.__ivar_destroyer(uint64_t a1)
{
  outlined destroy of StocksKitCurrencyCache.Provider?(a1 + direct field offset for UnknownCanvasElementView.displayedAsset, &demangling cache variable for type metadata for CRAsset?);
  swift_release();
  uint64_t v2 = *(void **)(a1 + direct field offset for UnknownCanvasElementView.appearanceStreamView);
}

Swift::Void __swiftcall UnknownCanvasElementView.layoutSubviews()()
{
  v16.receiver = v0;
  v16.super_class = (Class)type metadata accessor for UnknownCanvasElementView();
  objc_msgSendSuper2(&v16, sel_layoutSubviews);
  id v1 = *(id *)&v0[direct field offset for UnknownCanvasElementView.thumbnailView];
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setFrame_);

  uint64_t v2 = *(void **)&v0[direct field offset for UnknownCanvasElementView.blurEffectView];
  objc_msgSend(v0, sel_bounds);
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  objc_msgSend(v0, sel_bounds);
  CGFloat v12 = v11 * 0.2;
  objc_msgSend(v0, sel_bounds);
  CGFloat v14 = v13 * 0.2;
  v17.origin.CGFloat x = v4;
  v17.origin.CGFloat y = v6;
  v17.size.CGFloat width = v8;
  v17.size.CGFloat height = v10;
  CGRect v18 = CGRectInset(v17, v12, v14);
  objc_msgSend(v2, sel_setFrame_, v18.origin.x, v18.origin.y, v18.size.width, v18.size.height);
  id v15 = *(id *)&v0[direct field offset for UnknownCanvasElementView.questionMarkView];
  objc_msgSend(v2, sel_bounds);
  objc_msgSend(v15, sel_setFrame_);

  specialized AppearanceStreamViewSupport.updateAppearanceStreamView()();
}

void @objc UnknownCanvasElementView.layoutSubviews()(void *a1)
{
  id v1 = a1;
  UnknownCanvasElementView.layoutSubviews()();
}

uint64_t type metadata accessor for UnknownCanvasElementView()
{
  uint64_t result = type metadata singleton initialization cache for UnknownCanvasElementView;
  if (!type metadata singleton initialization cache for UnknownCanvasElementView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for UnknownCanvasElementView()
{
  type metadata accessor for CRAsset?();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

Swift::Void __swiftcall UnknownCanvasElementView.updateUI()()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v83 = (char *)v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRAsset?, CRAsset?));
  MEMORY[0x270FA5388](v84);
  uint64_t v85 = (void (*)(uint64_t, char *, uint64_t))((char *)v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v94 = (char *)v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v80 = (char *)v79 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v87 = (uint64_t)v79 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v93 = (char *)v79 - v12;
  uint64_t v95 = type metadata accessor for CRAsset();
  uint64_t v99 = *(void *)(v95 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v95);
  uint64_t v86 = (char *)v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = v14;
  MEMORY[0x270FA5388](v13);
  int v96 = (char *)v79 - v15;
  uint64_t v16 = type metadata accessor for UnknownCanvasElement();
  MEMORY[0x270FA5388](v16 - 8);
  CGRect v18 = (char *)v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  uint64_t v19 = *(void *)(v97 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v97);
  id v22 = (char *)v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v98 = (char *)v79 - v23;
  specialized CanvasElementView.updateGestures()();
  specialized CanvasElementView.updateFrame()();
  id v24 = (void *)MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
  id v25 = (void *)MEMORY[0x263F8EED0];
  if (v24)
  {
    id v26 = v24;
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v24) + 0x680))();
  }
  id v27 = &v1[*(void *)((*v25 & *(void *)v1) + 0x380)];
  swift_beginAccess();
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  uint64_t v29 = v97;
  id v30 = v98;
  v28(v98, v27, v97);
  uint64_t v31 = lazy protocol witness table accessor for type UnknownCanvasElement and conformance UnknownCanvasElement((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  Capsule<>.root.getter();
  uint64_t v92 = v1;
  id v32 = *(void (**)(char *, uint64_t))(v19 + 8);
  v32(v30, v29);
  outlined destroy of UnknownCanvasElement((uint64_t)v18);
  uint64_t v90 = v27;
  uint64_t v89 = v19 + 16;
  uint64_t v88 = v28;
  v28(v22, v27, v29);
  swift_getKeyPath();
  id v33 = v93;
  Capsule<>.subscript.getter();
  uint64_t v34 = (uint64_t)v33;
  swift_release();
  uint64_t v91 = v19 + 8;
  v32(v22, v29);
  uint64_t v35 = v32;
  uint64_t v36 = v99;
  uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v99 + 48);
  uint64_t v38 = v95;
  char v39 = (void *)&unk_2676E8000;
  if (v37(v34, 1, v95) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v34, &demangling cache variable for type metadata for CRAsset?);
    long long v40 = v92;
    objc_msgSend(*(id *)&v92[direct field offset for UnknownCanvasElementView.thumbnailView], sel_setImage_, 0);
    id v41 = 0;
    uint64_t v42 = (uint64_t)v94;
LABEL_26:
    *(void *)&v40[v39[504]] = v41;
    uint64_t v76 = v97;
    uint64_t v77 = v98;
    v88(v98, v90, v97);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v35(v77, v76);
    uint64_t v78 = (uint64_t)&v40[direct field offset for UnknownCanvasElementView.displayedAsset];
    swift_beginAccess();
    outlined assign with take of CRAsset?(v42, v78);
    swift_endAccess();
    specialized AppearanceStreamViewSupport.updateAppearanceStreamView()();
    return;
  }
  uint64_t v81 = v32;
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 32);
  v79[1] = v36 + 32;
  v79[0] = v43;
  v43(v96, v34, v38);
  long long v40 = v92;
  objc_msgSend(v92, sel_bounds);
  double Width = CGRectGetWidth(v100);
  objc_msgSend(v40, sel_bounds);
  double Height = CGRectGetHeight(v101);
  if (Width > Height) {
    double v46 = Width;
  }
  else {
    double v46 = Height;
  }
  id v47 = objc_msgSend(v40, sel_window);
  if (v47)
  {
    double v48 = v47;
    id v49 = objc_msgSend(v47, sel_screen);

    objc_msgSend(v49, sel_scale);
    double v51 = v50;
  }
  else
  {
    double v51 = 1.0;
  }
  uint64_t v52 = (uint64_t)v85;
  uint64_t v53 = v87;
  double v54 = v46 * v51;
  if ((~COERCE__INT64(v46 * v51) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v54 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v54 < 9.22337204e18)
  {
    uint64_t v93 = (char *)(uint64_t)v54;
    uint64_t v55 = v99;
    uint64_t v85 = *(void (**)(uint64_t, char *, uint64_t))(v99 + 16);
    v85(v87, v96, v38);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v53, 0, 1, v38);
    uint64_t v56 = (uint64_t)&v40[direct field offset for UnknownCanvasElementView.displayedAsset];
    swift_beginAccess();
    uint64_t v57 = v52 + *(int *)(v84 + 48);
    outlined init with copy of CRAsset?(v53, v52);
    outlined init with copy of CRAsset?(v56, v57);
    if (v37(v52, 1, v38) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v53, &demangling cache variable for type metadata for CRAsset?);
      unsigned int v58 = v37(v57, 1, v38);
      id v41 = v93;
      uint64_t v42 = (uint64_t)v94;
      uint64_t v35 = v81;
      if (v58 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v52, &demangling cache variable for type metadata for CRAsset?);
LABEL_21:
        if (*(char **)&v40[direct field offset for UnknownCanvasElementView.displayedMaxDimensionInPixels] == v41)
        {
LABEL_25:
          (*(void (**)(char *, uint64_t))(v99 + 8))(v96, v38);
          char v39 = &unk_2676E8000;
          goto LABEL_26;
        }
LABEL_22:
        uint64_t v87 = v31;
        uint64_t v64 = direct field offset for UnknownCanvasElementView.getImageTask;
        if (*(void *)&v40[direct field offset for UnknownCanvasElementView.getImageTask])
        {
          uint64_t v65 = swift_retain();
          MEMORY[0x21054D560](v65, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
          swift_release();
        }
        uint64_t v66 = type metadata accessor for TaskPriority();
        uint64_t v67 = (uint64_t)v83;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v83, 1, 1, v66);
        uint64_t v68 = swift_allocObject();
        swift_unknownObjectWeakInit();
        Swift::String v69 = v86;
        uint64_t v38 = v95;
        v85((uint64_t)v86, v96, v95);
        unint64_t v70 = (*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
        unint64_t v71 = (v82 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v72 = (v71 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v73 = swift_allocObject();
        *(void *)(v73 + 16) = 0;
        *(void *)(v73 + 24) = 0;
        ((void (*)(unint64_t, char *, uint64_t))v79[0])(v73 + v70, v69, v38);
        uint64_t v74 = v93;
        *(void *)(v73 + v71) = v93;
        id v41 = v74;
        *(void *)(v73 + v72) = v68;
        uint64_t v75 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v67, (uint64_t)&async function pointer to partial apply for closure #1 in UnknownCanvasElementView.updateUI(), v73);
        outlined destroy of StocksKitCurrencyCache.Provider?(v67, &demangling cache variable for type metadata for TaskPriority?);
        *(void *)&v40[v64] = v75;
        swift_release();
        uint64_t v42 = (uint64_t)v94;
        uint64_t v35 = v81;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v59 = (uint64_t)v80;
      outlined init with copy of CRAsset?(v52, (uint64_t)v80);
      unsigned int v60 = v37(v57, 1, v38);
      uint64_t v35 = v81;
      if (v60 != 1)
      {
        Swift::String v61 = v86;
        ((void (*)(char *, uint64_t, uint64_t))v79[0])(v86, v57, v38);
        lazy protocol witness table accessor for type UnknownCanvasElement and conformance UnknownCanvasElement(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
        char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
        Swift::String v63 = *(void (**)(char *, uint64_t))(v99 + 8);
        v63(v61, v38);
        outlined destroy of StocksKitCurrencyCache.Provider?(v87, &demangling cache variable for type metadata for CRAsset?);
        v63(v80, v38);
        outlined destroy of StocksKitCurrencyCache.Provider?(v52, &demangling cache variable for type metadata for CRAsset?);
        id v41 = v93;
        uint64_t v42 = (uint64_t)v94;
        if ((v62 & 1) == 0) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v87, &demangling cache variable for type metadata for CRAsset?);
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v59, v38);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v52, &demangling cache variable for type metadata for (CRAsset?, CRAsset?));
    goto LABEL_22;
  }
LABEL_29:
  __break(1u);
}

uint64_t closure #1 in UnknownCanvasElementView.updateUI()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = a6;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v6 + 48) = v8;
  *uint64_t v8 = v6;
  v8[1] = closure #1 in UnknownCanvasElementView.updateUI();
  return CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(a5, 1, 0);
}

uint64_t closure #1 in UnknownCanvasElementView.updateUI()(uint64_t a1)
{
  *(void *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in UnknownCanvasElementView.updateUI(), 0, 0);
}

uint64_t closure #1 in UnknownCanvasElementView.updateUI()()
{
  uint64_t v1 = (void *)v0[7];
  if (v1)
  {
    uint64_t v2 = v0[5] + 16;
    swift_beginAccess();
    uint64_t v3 = MEMORY[0x210550400](v2);
    v0[8] = v3;
    if (v3)
    {
      type metadata accessor for MainActor();
      v0[9] = static MainActor.shared.getter();
      uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
      return MEMORY[0x270FA2498](closure #1 in UnknownCanvasElementView.updateUI(), v5, v4);
    }
  }
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v8;

  uint64_t v1 = *(char **)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 56);
  swift_release();
  uint64_t v3 = *(void **)&v1[direct field offset for UnknownCanvasElementView.thumbnailView];
  uint64_t v4 = objc_allocWithZone(MEMORY[0x263F827E8]);
  uint64_t v5 = v3;
  uint64_t v6 = objc_msgSend(v4, sel_initWithCGImage_, v2);
  objc_msgSend(v5, sel_setImage_, v6);

  return MEMORY[0x270FA2498](closure #1 in UnknownCanvasElementView.updateUI(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void UnknownCanvasElementView.flags.getter(uint64_t *a1@<X8>)
{
  uint64_t v1 = unk_26C14CF30;
  if ((unk_26C14CF30 & ~qword_26C14CF28) == 0) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = v1 | qword_26C14CF28;
  uint64_t v4 = qword_26C14CF38;
  uint64_t v3 = unk_26C14CF40;
  if ((qword_26C14CF38 & ~v2) == 0) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4 | v2;
  if ((unk_26C14CF40 & ~v5) == 0) {
    uint64_t v3 = 0;
  }
  *a1 = v3 | v5;
}

uint64_t (*UnknownCanvasElementView.flags.modify(uint64_t *a1))()
{
  uint64_t v1 = unk_26C14CF70;
  if ((unk_26C14CF70 & ~qword_26C14CF68) == 0) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = v1 | qword_26C14CF68;
  uint64_t v4 = qword_26C14CF78;
  uint64_t v3 = unk_26C14CF80;
  if ((qword_26C14CF78 & ~v2) == 0) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4 | v2;
  if ((unk_26C14CF80 & ~v5) == 0) {
    uint64_t v3 = 0;
  }
  *a1 = v3 | v5;
  return UnknownCanvasElementView.flags.modify;
}

void type metadata accessor for CRAsset?()
{
  if (!lazy cache variable for type metadata for CRAsset?)
  {
    type metadata accessor for CRAsset();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRAsset?);
    }
  }
}

uint64_t ObjC metadata update function for UnknownCanvasElementView()
{
  return type metadata accessor for UnknownCanvasElementView();
}

uint64_t outlined destroy of UnknownCanvasElement(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownCanvasElement();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of CRAsset?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CRAsset?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C30576C()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C3057A4()
{
  uint64_t v1 = type metadata accessor for CRAsset();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in UnknownCanvasElementView.updateUI()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CRAsset() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in UnknownCanvasElementView.updateUI()(a1, v7, v8, v9, v10, v11);
}

uint64_t lazy protocol witness table accessor for type UnknownCanvasElement and conformance UnknownCanvasElement(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement()
{
  unint64_t result = lazy protocol witness table cache variable for type TaggedCanvasElement and conformance TaggedCanvasElement;
  if (!lazy protocol witness table cache variable for type TaggedCanvasElement and conformance TaggedCanvasElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedCanvasElement and conformance TaggedCanvasElement);
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<DrawingIdentifier, CalculateDocumentController>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    unint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v1__isPlatformVersionAtLeast(2, 18, 1, 0) = v6;
    *(void *)(v2[7] + v1__isPlatformVersionAtLeast(2, 18, 1, 0) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CalculateKey, Any>, &demangling cache variable for type metadata for (CalculateKey, Any), (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void v24[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, String));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    id v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, String>);
  id v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  BOOL v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, String));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    CGRect v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = (void *)(v7[7] + 16 * v16);
    uint64_t v20 = *((void *)v9 + 1);
    char *v19 = *(void *)v9;
    v19[1] = v20;
    uint64_t v21 = v7[2];
    id v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView), &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, AnyCanvasElementView>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), MEMORY[0x263F330F8]);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingUserInfoKey, Any));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    id v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  id v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  BOOL v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v12, (uint64_t)v5, &demangling cache variable for type metadata for (CodingUserInfoKey, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    CGRect v18 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = (unint64_t)outlined init with take of Any(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>, &demangling cache variable for type metadata for (NSAttributedStringKey, Any), (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    unint64_t v5 = *(v4 - 3);
    id v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    id v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, MEMORY[0x263F8D2A8], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    BOOL v12 = (void *)(v2[7] + 16 * result);
    *BOOL v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, CalculateGraphExpression), &demangling cache variable for type metadata for _DictionaryStorage<UUID, CalculateGraphExpression>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), MEMORY[0x263F07508]);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  void v25[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UUID));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    id v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UUID>);
  id v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  BOOL v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v12, (uint64_t)v5, &demangling cache variable for type metadata for (String, UUID));
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v15, MEMORY[0x263F8D2A8], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if (v17) {
      break;
    }
    CGRect v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    char *v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, v9, v21);
    id v22 = v7[2];
    uint64_t v23 = __OFADD__(v22, 1);
    id v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  unint64_t v5 = v2 + 64;
  id v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    char v9 = v3[6] + 40 * result;
    uint64_t v10 = v15[0];
    uint64_t v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)char v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    BOOL v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRKeyPath, FormPageAnalytics), &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, FormPageAnalytics>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), MEMORY[0x263F330F8]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, (_:)>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, ()>);
}

{
  void *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  long long v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, (CGRect, CGFloat)>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 64);
  while (1)
  {
    unint64_t v5 = *((void *)v4 - 3);
    id v6 = *((void *)v4 - 2);
    id v7 = *((void *)v4 - 1);
    uint64_t v15 = *v4;
    uint64_t v8 = *((id *)v4 - 4);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v8;
    uint64_t v11 = v2[7] + 40 * result;
    *(void *)uint64_t v11 = v5;
    *(void *)(v11 + 8) = v6;
    *(void *)(v11 + 16) = v7;
    *(_OWORD *)(v11 + 24) = v15;
    BOOL v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  long long v13;
  long long v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, StickerDropPreviewInfo>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 64);
  while (1)
  {
    unint64_t v5 = *((void *)v4 - 3);
    uint64_t v13 = *v4;
    uint64_t v14 = *(v4 - 1);
    id v6 = *((id *)v4 - 4);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v6;
    char v9 = v2[7] + 40 * result;
    *(void *)char v9 = v5;
    *(_OWORD *)(v9 + 8) = v14;
    *(_OWORD *)(v9 + 24) = v13;
    uint64_t v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<FormAnalyticsKeys, NSObject>, (void (*)(uint64_t))FormAnalyticsKeys.rawValue.getter, (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void v27[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, SortableCalculateExpression));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    id v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, SortableCalculateExpression>);
  id v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27[1] = a1;
  BOOL v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, SortableCalculateExpression));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    CGRect v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = (void *)(v7[7] + 40 * v16);
    uint64_t v20 = *((void *)v9 + 1);
    uint64_t v21 = *((void *)v9 + 2);
    id v22 = *((void *)v9 + 3);
    uint64_t v23 = *((void *)v9 + 4);
    char *v19 = *(void *)v9;
    v19[1] = v20;
    v19[2] = v21;
    v19[3] = v22;
    v19[4] = v23;
    id v24 = v7[2];
    id v25 = __OFADD__(v24, 1);
    id v26 = v24 + 1;
    if (v25) {
      goto LABEL_11;
    }
    v7[2] = v26;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  id *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, UIFont?>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (id *)(a1 + 40);
  while (1)
  {
    unint64_t v5 = *(v4 - 1);
    id v6 = *v4;
    id v7 = *v4;
    uint64_t v8 = v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = 8 * result;
    *(void *)(v2[6] + v11) = v8;
    *(void *)(v2[7] + v11) = v6;
    BOOL v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  long long v20;
  long long v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  void v25[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, CGAffineTransform));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    id v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, CGAffineTransform>);
  id v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  BOOL v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v12, (uint64_t)v5, &demangling cache variable for type metadata for (Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, CGAffineTransform));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    CGRect v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = (_OWORD *)(v7[7] + 48 * v16);
    uint64_t v20 = *((_OWORD *)v9 + 1);
    uint64_t v21 = *((_OWORD *)v9 + 2);
    char *v19 = *(_OWORD *)v9;
    v19[1] = v20;
    v19[2] = v21;
    id v22 = v7[2];
    uint64_t v23 = __OFADD__(v22, 1);
    id v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  unint64_t v5 = v2 + 64;
  id v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    id v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16, MEMORY[0x263F8D2A8], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    BOOL v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  unint64_t v5 = v2 + 64;
  id v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v6, (uint64_t)&v13, &demangling cache variable for type metadata for (CFStringRef, Any));
    id v7 = v13;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  id *v4;
  char v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Bool>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (id *)(a1 + 40);
  while (1)
  {
    unint64_t v5 = *(unsigned char *)v4;
    id v6 = *(v4 - 1);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v6;
    *(unsigned char *)(v2[7] + result) = v5;
    char v9 = v2[2];
    uint64_t v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Swift.AnyObject>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    unint64_t v5 = *(v4 - 2);
    id v6 = *(v4 - 1);
    id v7 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, MEMORY[0x263F8D2A8], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    char *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    unint64_t v5 = *(v4 - 3);
    id v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    id v7 = *v4;
    outlined copy of Data._Representation(v5, v6);
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, MEMORY[0x263F06F38], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    BOOL v12 = (void *)(v2[7] + 16 * result);
    *BOOL v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRKeyPath, Ref<PDFAnnotationElement>), &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Ref<PDFAnnotationElement>>, (uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Swift.AnyObject>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    unint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRAsset, PaperKitPDFDocument), &demangling cache variable for type metadata for _DictionaryStorage<CRAsset, PaperKitPDFDocument>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), MEMORY[0x263F33060]);
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    unint64_t v5 = (uint64_t)*(v4 - 2);
    id v6 = (uint64_t)*(v4 - 1);
    id v7 = *v4;
    swift_bridgeObjectRetain();
    uint64_t v8 = v7;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, MEMORY[0x263F8D2A8], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    BOOL v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, CFDataRef>, (uint64_t (*)(id))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (PDFPageID, Int));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (void *)((char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    id v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFPageID, Int>);
  id v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  BOOL v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v12, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for (PDFPageID, Int));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    CGRect v18 = type metadata accessor for PDFPageID();
    unint64_t result = outlined init with take of PKStrokeStruct((uint64_t)v5, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    *(void *)(v7[7] + 8 * v16) = *(Swift::UInt *)((char *)v5 + v9);
    uint64_t v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRKeyPath, Int), &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Int>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), MEMORY[0x263F330F8]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UIColor, UIImage>, (uint64_t (*)(id))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRKeyPath, SharedTagged_9<TaggedCanvasElement>), &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, SharedTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<AnalyticsKeys, NSObject>, (void (*)(uint64_t))AnalyticsKeys.rawValue.getter, (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRAsset, Int), &demangling cache variable for type metadata for _DictionaryStorage<CRAsset, Int>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), MEMORY[0x263F33060]);
}

{
  void *v2;
  uint64_t v3;
  _OWORD *v4;
  id v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  long long v12;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PaperKitPDFPage, PageOverlayView>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 40);
  while (1)
  {
    BOOL v12 = *v4;
    unint64_t v5 = *((id *)v4 - 1);
    id v6 = (id)v12;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v5;
    *(_OWORD *)(v2[7] + 16 * result) = v12;
    char v9 = v2[2];
    uint64_t v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    uint64_t v4 = (_OWORD *)((char *)v4 + 24);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRKeyPath, PDFAnnotation), &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, PDFAnnotation>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), MEMORY[0x263F330F8]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<PDFDocumentWriteOption, Any>, &demangling cache variable for type metadata for (PDFDocumentWriteOption, Any), (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFDocumentWriteOption, Swift.AnyObject>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    unint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, WeakCalculateExpression));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    id v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, WeakCalculateExpression>);
  id v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  BOOL v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, WeakCalculateExpression));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    CGRect v18 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = outlined init with take of WeakCalculateExpression(v9, v7[7] + 8 * v16);
    uint64_t v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, NSNumber), &demangling cache variable for type metadata for _DictionaryStorage<UUID, NSNumber>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), MEMORY[0x263F07508]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, PKDrawing), &demangling cache variable for type metadata for _DictionaryStorage<UUID, PKDrawing>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), MEMORY[0x263F07508]);
}

{
  void *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, AsyncCache<Data, CGImageRef>.CacheState>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (char *)(a1 + 64);
  while (1)
  {
    unint64_t v5 = *((void *)v4 - 4);
    id v6 = *((void *)v4 - 3);
    id v7 = *((void *)v4 - 2);
    uint64_t v8 = (void *)*((void *)v4 - 1);
    char v9 = *v4;
    outlined copy of Data._Representation(v5, v6);
    outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v7, v8, v9);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, MEMORY[0x263F06F38], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v12 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v12 = v5;
    v12[1] = v6;
    uint64_t v13 = v2[7] + 24 * result;
    *(void *)uint64_t v13 = v7;
    *(void *)(v13 + 8) = v8;
    *(unsigned char *)(v13 + 16) = v9;
    uint64_t v14 = v2[2];
    uint64_t v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v2[2] = v16;
    v4 += 40;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  long long v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CRAttributeStringDecodingKey.Type>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    unint64_t v5 = *((void *)v4 - 2);
    id v6 = *((void *)v4 - 1);
    uint64_t v13 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, MEMORY[0x263F8D2A8], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v9 = (uint64_t *)(v2[6] + 16 * result);
    *char v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorTraitKey, UIFontWeight>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    unint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorAttributeName, [UIFontDescriptorTraitKey : UIFontWeight]>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    unint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<PDFAnnotation, AnyCanvasElementView>, (uint64_t (*)(id))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void v24[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, CheckedContinuation<CGImageRef?, Never>));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    id v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, CheckedContinuation<CGImageRef?, Never>>);
  id v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  BOOL v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, CheckedContinuation<CGImageRef?, Never>));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    CGRect v18 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v16, v9, v20);
    uint64_t v21 = v7[2];
    id v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  long long v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void v24[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, CanvasCollaborationStateView.CollaborationCursor));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    id v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, CanvasCollaborationStateView.CollaborationCursor>);
  id v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  BOOL v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, CanvasCollaborationStateView.CollaborationCursor));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    CGRect v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = (_OWORD *)(v7[7] + 32 * v16);
    uint64_t v20 = *((_OWORD *)v9 + 1);
    char *v19 = *(_OWORD *)v9;
    v19[1] = v20;
    uint64_t v21 = v7[2];
    id v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, AnyCRValue));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v6 = *(void *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, AnyCRValue>);
    id v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v8 = (char *)v5 + *(int *)(v2 + 48);
    char v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v9, (uint64_t)v5, &demangling cache variable for type metadata for (Int, AnyCRValue));
      uint64_t v11 = *v5;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5);
      if (v13) {
        break;
      }
      uint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v7[6] + 8 * result) = v11;
      uint64_t v15 = v7[7];
      uint64_t v16 = type metadata accessor for AnyCRValue();
      unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v8, v16);
      uint64_t v17 = v7[2];
      CGRect v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      v7[2] = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *), uint64_t (*a5)(void))
{
  uint64_t v29 = a5;
  id v30 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v12 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v13 = (void *)v12;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v13;
  }
  uint64_t v15 = *(int *)(v8 + 48);
  uint64_t v16 = v12 + 64;
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v28[1] = a1;
  uint64_t v18 = a1 + v17;
  uint64_t v19 = *(void *)(v9 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v18, (uint64_t)v11, a2);
    unint64_t result = v30(v11);
    if (v21) {
      break;
    }
    unint64_t v22 = result;
    *(void *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v23 = v13[6];
    uint64_t v24 = v29(0);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v23 + *(void *)(*(void *)(v24 - 8) + 72) * v22, v11, v24);
    *(void *)(v13[7] + 8 * v22) = *(void *)&v11[v15];
    uint64_t v25 = v13[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_11;
    }
    v13[2] = v27;
    v18 += v19;
    if (!--v14)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void v28[2];
  uint64_t (*v29)(void);
  uint64_t (*v30)(char *);

  uint64_t v29 = a5;
  id v30 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v12 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v13 = (void *)v12;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v13;
  }
  uint64_t v15 = *(int *)(v8 + 48);
  uint64_t v16 = v12 + 64;
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v28[1] = a1;
  uint64_t v18 = a1 + v17;
  uint64_t v19 = *(void *)(v9 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v18, (uint64_t)v11, a2);
    unint64_t result = v30(v11);
    if (v21) {
      break;
    }
    unint64_t v22 = result;
    *(void *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v23 = v13[6];
    uint64_t v24 = v29(0);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v23 + *(void *)(*(void *)(v24 - 8) + 72) * v22, v11, v24);
    *(void *)(v13[7] + 8 * v22) = *(void *)&v11[v15];
    uint64_t v25 = v13[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_11;
    }
    v13[2] = v27;
    v18 += v19;
    if (!--v14)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  unint64_t v5 = (_OWORD *)(a1 + 40);
  while (1)
  {
    long long v12 = *v5;
    id v6 = *((id *)v5 - 1);
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v6;
    *(_OWORD *)(v3[7] + 16 * result) = v12;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v3[2] = v11;
    unint64_t v5 = (_OWORD *)((char *)v5 + 24);
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  id v30 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  BOOL v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    long long v12 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v11 = static _DictionaryStorage.allocate(capacity:)();
  long long v12 = (void *)v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  uint64_t v14 = &v10[*(int *)(v7 + 48)];
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v29 = a1;
  uint64_t v17 = a1 + v16;
  uint64_t v18 = *(void *)(v8 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v17, (uint64_t)v10, a2);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
    if (v20) {
      break;
    }
    unint64_t v21 = result;
    *(void *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v22 = v12[6];
    uint64_t v23 = type metadata accessor for CRKeyPath();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v22 + *(void *)(*(void *)(v23 - 8) + 72) * v21, v10, v23);
    uint64_t v24 = v12[7];
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(v30);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v24 + *(void *)(*(void *)(v25 - 8) + 72) * v21, v14, v25);
    uint64_t v26 = v12[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_11;
    }
    v12[2] = v28;
    v17 += v18;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t), uint64_t (*a4)(uint64_t, Swift::Int))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  swift_retain();
  uint64_t v9 = (id *)(a1 + 40);
  while (1)
  {
    uint64_t v10 = *((unsigned __int8 *)v9 - 8);
    id v11 = *v9;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v10, a3, a4);
    if (v13) {
      break;
    }
    *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v7[6] + result) = v10;
    *(void *)(v7[7] + 8 * result) = v11;
    uint64_t v14 = v7[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v7[2] = v16;
    v9 += 2;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v11, (uint64_t)&v18, a3);
    uint64_t v12 = v18;
    unint64_t result = a4(v18);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v12;
    unint64_t result = (unint64_t)outlined init with take of Any(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v5 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  unint64_t v5 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  uint64_t v7 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v8 = *v7;
    id v9 = *(v7 - 1);
    id v10 = v8;
    unint64_t result = a3(v9);
    if (v12) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v13 = 8 * result;
    *(void *)(v5[6] + v13) = v9;
    *(void *)(v5[7] + v13) = v10;
    uint64_t v14 = v5[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v5[2] = v16;
    v7 += 2;
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t PKStrokeProperties.additionalFields.getter()
{
  type metadata accessor for PKStrokeProperties(0);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for PKStrokeProperties(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokeProperties);
}

uint64_t PKStrokeProperties.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for PKStrokeProperties(0) + 48);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*PKStrokeProperties.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

PaperKit::PKStrokeProperties::CodingKeys_optional __swiftcall PKStrokeProperties.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)(rawValue + 1) > 8) {
    *uint64_t v1 = 9;
  }
  else {
    *uint64_t v1 = byte_20C833C72[rawValue + 1];
  }
  return (PaperKit::PKStrokeProperties::CodingKeys_optional)rawValue;
}

PaperKit::PKStrokeProperties::CodingKeys_optional __swiftcall PKStrokeProperties.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  uint64_t v2 = v1;
  BOOL v3 = stringValue._countAndFlagsBits == 0x7367616C665FLL && stringValue._object == (void *)0xE600000000000000;
  if (v3
    || (object = stringValue._object,
        uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 0x444970756F7267 && object == (void *)0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else if (countAndFlagsBits == 0x7079546570616873 && object == (void *)0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 2;
  }
  else if (countAndFlagsBits == 1752457584 && object == (void *)0xE400000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 3;
  }
  else if (countAndFlagsBits == 1802723693 && object == (void *)0xE400000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 4;
  }
  else if (countAndFlagsBits == 0x6E616C5070696C63 && object == (void *)0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 5;
  }
  else if (countAndFlagsBits == 0x6E6172546B6E695FLL && object == (void *)0xED00006D726F6673 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 6;
  }
  else if (countAndFlagsBits == 0x72477265646E6572 && object == (void *)0xED0000444970756FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 7;
  }
  else if (countAndFlagsBits == 0xD000000000000010 && object == (void *)0x800000020C84FB60)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 8;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 8;
    }
    else {
      char v7 = 9;
    }
  }
  *uint64_t v2 = v7;
  return result;
}

PaperKit::PKStrokeProperties::CodingKeys_optional __swiftcall PKStrokeProperties.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  if ((unint64_t)(intValue + 1) > 8) {
    *uint64_t v1 = 9;
  }
  else {
    *uint64_t v1 = byte_20C833C72[intValue + 1];
  }
  return (PaperKit::PKStrokeProperties::CodingKeys_optional)intValue;
}

void *static PKStrokeProperties.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static PKStrokeProperties.CodingKeys.allCases.getter;
}

uint64_t PKStrokeProperties.CodingKeys.intValue.getter()
{
  return qword_20C833C80[*v0];
}

uint64_t PKStrokeProperties.CodingKeys.rawValue.getter()
{
  return qword_20C833C80[*v0];
}

unint64_t PKStrokeProperties.CodingKeys.stringValue.getter()
{
  unint64_t result = 0x7367616C665FLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x444970756F7267;
      break;
    case 2:
      unint64_t result = 0x7079546570616873;
      break;
    case 3:
      unint64_t result = 1752457584;
      break;
    case 4:
      unint64_t result = 1802723693;
      break;
    case 5:
      unint64_t result = 0x6E616C5070696C63;
      break;
    case 6:
      unint64_t result = 0x6E6172546B6E695FLL;
      break;
    case 7:
      unint64_t result = 0x72477265646E6572;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PKStrokeProperties.CodingKeys(char *a1, char *a2)
{
  return qword_20C833C80[*a1] == qword_20C833C80[*a2];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PKStrokeProperties.CodingKeys()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_20C833C80[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PKStrokeProperties.CodingKeys()
{
  Hasher._combine(_:)(qword_20C833C80[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PKStrokeProperties.CodingKeys()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_20C833C80[v1]);
  return Hasher._finalize()();
}

PaperKit::PKStrokeProperties::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PKStrokeProperties.CodingKeys(Swift::Int *a1)
{
  return PKStrokeProperties.CodingKeys.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PKStrokeProperties.CodingKeys(void *a1@<X8>)
{
  *a1 = qword_20C833C80[*v1];
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance PKStrokeProperties.CodingKeys()
{
  return qword_20C833C80[*v0];
}

void protocol witness for static CaseIterable.allCases.getter in conformance PKStrokeProperties.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PKStrokeProperties.CodingKeys.allCases.getter;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance PKStrokeProperties.CodingKeys(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys();
  unint64_t v5 = lazy protocol witness table accessor for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys();
  return MEMORY[0x270F180C8](a1, a2, v4, v5);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PKStrokeProperties.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PKStrokeProperties.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t PKStrokeProperties.visitReferences(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AnyCRValue();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: AnyCRValue)?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  id v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  char v12 = (char *)&v32 - v11;
  uint64_t v13 = type metadata accessor for PKStrokeProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v40 = a1;
  Ref.visitReferences(_:)();
  uint64_t v14 = *(void *)(v1 + *(int *)(v13 + 48));
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v34 = v14 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v36 = v4 + 16;
  uint64_t v37 = v4;
  uint64_t v38 = v14;
  char v39 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  long long v19 = (uint64_t (**)(char *, uint64_t))(v4 + 8);
  int64_t v35 = (unint64_t)(v16 + 63) >> 6;
  int64_t v33 = v35 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v41 = 0;
  uint64_t v21 = v37;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v23 = v22 | (v41 << 6);
  while (2)
  {
    uint64_t v24 = *(void *)(v38 + 56);
    *(void *)id v10 = *(void *)(*(void *)(v38 + 48) + 8 * v23);
    uint64_t v25 = v24 + *(void *)(v21 + 72) * v23;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: AnyCRValue));
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(&v10[*(int *)(v26 + 48)], v25, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v10, 0, 1, v26);
    while (1)
    {
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v10, (uint64_t)v12, &demangling cache variable for type metadata for (key: Int, value: AnyCRValue)?);
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: AnyCRValue));
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v12, 1, v31) == 1) {
        return swift_release();
      }
      (*v39)(v6, &v12[*(int *)(v31 + 48)], v3);
      AnyCRValue.visitReferences(_:)();
      uint64_t result = (*v19)(v6, v3);
      if (v18) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v27 = v41 + 1;
      if (__OFADD__(v41, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v27 < v35)
      {
        unint64_t v28 = *(void *)(v34 + 8 * v27);
        if (v28) {
          goto LABEL_11;
        }
        int64_t v29 = v41 + 2;
        ++v41;
        if (v27 + 1 < v35)
        {
          unint64_t v28 = *(void *)(v34 + 8 * v29);
          if (v28) {
            goto LABEL_14;
          }
          int64_t v41 = v27 + 1;
          if (v27 + 2 < v35)
          {
            unint64_t v28 = *(void *)(v34 + 8 * (v27 + 2));
            if (v28)
            {
              v27 += 2;
              goto LABEL_11;
            }
            int64_t v29 = v27 + 3;
            int64_t v41 = v27 + 2;
            if (v27 + 3 < v35) {
              break;
            }
          }
        }
      }
LABEL_25:
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: AnyCRValue));
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v10, 1, 1, v30);
      unint64_t v18 = 0;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v29);
    if (v28)
    {
LABEL_14:
      int64_t v27 = v29;
LABEL_11:
      unint64_t v18 = (v28 - 1) & v28;
      unint64_t v23 = __clz(__rbit64(v28)) + (v27 << 6);
      int64_t v41 = v27;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= v35)
    {
      int64_t v41 = v33;
      goto LABEL_25;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_11;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t PKStrokeProperties.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(v2, a2, type metadata accessor for PKStrokeProperties);
  uint64_t v9 = type metadata accessor for PKStrokeProperties(0);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<PKStrokePathStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  CRType.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(a2 + *(int *)(v9 + 32), v8, v5);
  uint64_t v10 = *(void *)(v2 + *(int *)(v9 + 48));
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized _NativeDictionary.mapValues<A>(_:)(v10, a1);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(v9 + 48);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + v12) = v11;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int *v43;
  uint64_t v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(char *, uint64_t, uint64_t);
  int v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  char *v57;
  void (*v58)(uint64_t, char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, void, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  char *v76;
  int v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  char *v87;
  char *v88;
  void (*v89)(uint64_t, char *, uint64_t);
  uint64_t v90;
  void (*v92)(char *, uint64_t, uint64_t);
  char *v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  int *v109;
  void (*v110)(char *, uint64_t, uint64_t);
  char *v111;
  int v112;
  void (*v113)(uint64_t, char *, uint64_t);
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t);
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, char *, uint64_t);
  void *v127;
  void (*v128)(uint64_t, void, uint64_t, uint64_t);
  void (*v129)(char *, char *, uint64_t);
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  void *v140;
  uint64_t (*v141)(uint64_t, uint64_t, uint64_t);
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;

  uint64_t v3 = v2;
  v153 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  v135 = (char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  v139 = (char *)&v125 - v9;
  MEMORY[0x270FA5388](v8);
  v136 = (char *)&v125 - v10;
  uint64_t v11 = type metadata accessor for CRKeyPath();
  uint64_t v12 = *(void *)(v11 - 8);
  v150 = v11;
  v151 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  v149 = (char *)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  v147 = (char *)&v125 - v16;
  MEMORY[0x270FA5388](v15);
  v137 = (char *)&v125 - v17;
  unint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  long long v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v133 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v143 = (char *)&v125 - v22;
  unint64_t v23 = MEMORY[0x270FA5388](v21);
  unint64_t v134 = (char *)&v125 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v125 - v25;
  v146 = type metadata accessor for UUID();
  v154 = *(void *)(v146 - 8);
  int64_t v27 = MEMORY[0x270FA5388](v146);
  uint64_t v132 = (char *)&v125 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v29 = MEMORY[0x270FA5388](v27);
  v144 = (char *)&v125 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  v138 = (char *)&v125 - v32;
  int64_t v33 = MEMORY[0x270FA5388](v31);
  int64_t v35 = (char *)&v125 - v34;
  uint64_t v36 = MEMORY[0x270FA5388](v33);
  unint64_t v131 = (char *)&v125 - v37;
  MEMORY[0x270FA5388](v36);
  v142 = (char *)&v125 - v38;
  char v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v40 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v42 = (char *)&v125 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(v2, a2, type metadata accessor for PKStrokeProperties);
  uint64_t v43 = (int *)type metadata accessor for PKStrokeProperties(0);
  uint64_t v44 = v153;
  Ref.copy(renamingReferences:)();
  double v45 = v42;
  double v46 = (void *)v154;
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 40))(a2 + v43[8], v45, v39);
  id v47 = specialized _NativeDictionary.mapValues<A>(_:)(*(void *)(v2 + v43[12]), v44);
  double v48 = v43[12];
  swift_bridgeObjectRelease();
  v145 = a2;
  *(void *)(a2 + v48) = v47;
  id v49 = v3;
  v152 = v43;
  double v50 = v43[5];
  double v51 = v146;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v3 + v50, (uint64_t)v26, &demangling cache variable for type metadata for UUID?);
  uint64_t v52 = (uint64_t (*)(char *, uint64_t, uint64_t))v46[6];
  uint64_t v53 = v52(v26, 1, v51);
  v148 = v35;
  v140 = v46 + 6;
  v141 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v52;
  if (v53 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, &demangling cache variable for type metadata for UUID?);
    double v54 = (uint64_t)v149;
    uint64_t v55 = (uint64_t)v143;
    uint64_t v56 = v152;
    goto LABEL_15;
  }
  uint64_t v57 = v136;
  unsigned int v58 = (void (*)(uint64_t, char *, uint64_t))v46[4];
  uint64_t v59 = v142;
  uint64_t v127 = v46 + 4;
  uint64_t v126 = v58;
  v58((uint64_t)v142, v26, v51);
  uint64_t v129 = (void (*)(char *, char *, uint64_t))v46[2];
  v129(v35, v59, v51);
  unsigned int v60 = (uint64_t)v137;
  CRKeyPath.init(_:)();
  Swift::String v61 = *(void *)v44;
  char v62 = *(void *)(*(void *)v44 + 16);
  uint64_t v130 = v49;
  if (v62)
  {
    Swift::String v63 = specialized __RawDictionaryStorage.find<A>(_:)(v60);
    uint64_t v64 = v60;
    if (v65)
    {
      uint64_t v66 = *(void *)(v61 + 56);
      uint64_t v67 = v150;
      uint64_t v68 = v151;
      Swift::String v69 = (uint64_t)v57;
      (*(void (**)(char *, unint64_t, uint64_t))(v151 + 16))(v57, v66 + *(void *)(v151 + 72) * v63, v150);
      unint64_t v70 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v68 + 56);
      unint64_t v71 = v57;
      unint64_t v72 = 0;
      goto LABEL_9;
    }
    uint64_t v68 = v151;
    unint64_t v70 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v151 + 56);
  }
  else
  {
    uint64_t v68 = v151;
    unint64_t v70 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v151 + 56);
    uint64_t v64 = v60;
  }
  Swift::String v69 = (uint64_t)v57;
  unint64_t v71 = v57;
  unint64_t v72 = 1;
  uint64_t v67 = v150;
LABEL_9:
  uint64_t v128 = v70;
  v70((uint64_t)v71, v72, 1, v67);
  uint64_t v73 = v154;
  uint64_t v74 = (uint64_t)v134;
  uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
  v75(v64, v67);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v69, 1, v67))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v69, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v74, 1, 1, v51);
    uint64_t v44 = v153;
  }
  else
  {
    uint64_t v76 = v147;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v147, v69, v67);
    outlined destroy of StocksKitCurrencyCache.Provider?(v69, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    CRKeyPath.uuid.getter();
    uint64_t v73 = v154;
    v75((uint64_t)v76, v67);
    uint64_t v77 = v141(v74, 1, v51);
    uint64_t v44 = v153;
    if (v77 != 1)
    {
      (*(void (**)(char *, uint64_t))(v73 + 8))(v142, v51);
      uint64_t v88 = v131;
      uint64_t v89 = v126;
      v126((uint64_t)v131, (char *)v74, v51);
      uint64_t v56 = v152;
      uint64_t v90 = v145 + v152[5];
      outlined destroy of StocksKitCurrencyCache.Provider?(v90, &demangling cache variable for type metadata for UUID?);
      v89(v90, v88, v51);
      double v46 = (void *)v73;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56))(v90, 0, 1, v51);
      goto LABEL_14;
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v74, &demangling cache variable for type metadata for UUID?);
  uint64_t v78 = v148;
  UUID.init()();
  unint64_t v79 = v145 + v152[5];
  outlined destroy of StocksKitCurrencyCache.Provider?(v79, &demangling cache variable for type metadata for UUID?);
  uint64_t v80 = v129;
  v129((char *)v79, v78, v51);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56))(v79, 0, 1, v51);
  uint64_t v81 = v44;
  uint64_t v82 = v138;
  uint64_t v83 = v142;
  v80(v138, v142, v51);
  uint64_t v84 = (uint64_t)v147;
  CRKeyPath.init(_:)();
  v80(v82, v78, v51);
  uint64_t v85 = (uint64_t)v139;
  uint64_t v44 = v81;
  CRKeyPath.init(_:)();
  v128(v85, 0, 1, v150);
  specialized Dictionary.subscript.setter(v85, v84);
  double v46 = (void *)v73;
  uint64_t v86 = *(void (**)(char *, uint64_t))(v73 + 8);
  uint64_t v87 = v78;
  uint64_t v56 = v152;
  v86(v87, v51);
  v86(v83, v51);
LABEL_14:
  double v54 = (uint64_t)v149;
  id v49 = v130;
  uint64_t v55 = (uint64_t)v143;
  uint64_t v52 = (uint64_t (*)(char *, uint64_t, uint64_t))v141;
LABEL_15:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v49 + v56[6], v55, &demangling cache variable for type metadata for UUID?);
  if (v52((char *)v55, 1, v51) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?(v55, &demangling cache variable for type metadata for UUID?);
  }
  uint64_t v92 = (void (*)(char *, uint64_t, uint64_t))v46[4];
  uint64_t v93 = v144;
  v92(v144, v55, v51);
  uint64_t v94 = (void (*)(char *, char *, uint64_t))v46[2];
  v94(v148, v93, v51);
  CRKeyPath.init(_:)();
  uint64_t v95 = *(void *)v44;
  int v96 = *(void *)(*(void *)v44 + 16);
  v142 = (char *)v92;
  if (v96 && (uint64_t v97 = specialized __RawDictionaryStorage.find<A>(_:)(v54), (v98 & 1) != 0))
  {
    uint64_t v99 = *(void *)(v95 + 56);
    CGRect v100 = v150;
    CGRect v101 = v151;
    long long v102 = (uint64_t)v135;
    (*(void (**)(char *, unint64_t, uint64_t))(v151 + 16))(v135, v99 + *(void *)(v151 + 72) * v97, v150);
    Swift::String v103 = *(char **)(v101 + 56);
    v104 = (char *)v102;
    uint64_t v105 = 0;
  }
  else
  {
    CGRect v100 = v150;
    CGRect v101 = v151;
    Swift::String v103 = *(char **)(v151 + 56);
    long long v102 = (uint64_t)v135;
    v104 = v135;
    uint64_t v105 = 1;
  }
  v143 = v103;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v103)(v104, v105, 1, v100);
  uint64_t v106 = *(void (**)(char *, uint64_t))(v101 + 8);
  v106(v149, v100);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v102, 1, v100))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v102, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    uint64_t v107 = v154;
    uint64_t v108 = (uint64_t)v133;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v154 + 56))(v133, 1, 1, v51);
    v109 = v152;
LABEL_24:
    uint64_t v113 = (void (*)(uint64_t, char *, uint64_t))v94;
    v114 = v100;
    outlined destroy of StocksKitCurrencyCache.Provider?(v108, &demangling cache variable for type metadata for UUID?);
    uint64_t v115 = v148;
    UUID.init()();
    v116 = v145 + v109[6];
    outlined destroy of StocksKitCurrencyCache.Provider?(v116, &demangling cache variable for type metadata for UUID?);
    v113(v116, v115, v51);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v107 + 56))(v116, 0, 1, v51);
    v117 = v138;
    v118 = v144;
    v113((uint64_t)v138, v144, v51);
    uint64_t v119 = (uint64_t)v147;
    CRKeyPath.init(_:)();
    v113((uint64_t)v117, v115, v51);
    v120 = (uint64_t)v139;
    CRKeyPath.init(_:)();
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v143)(v120, 0, 1, v114);
    specialized Dictionary.subscript.setter(v120, v119);
    uint64_t v121 = *(void (**)(char *, uint64_t))(v107 + 8);
    v121(v115, v51);
    return ((uint64_t (*)(char *, uint64_t))v121)(v118, v51);
  }
  v110 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 16);
  uint64_t v111 = v147;
  v110(v147, v102, v100);
  outlined destroy of StocksKitCurrencyCache.Provider?(v102, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  uint64_t v108 = (uint64_t)v133;
  CRKeyPath.uuid.getter();
  CGRect v100 = v150;
  v106(v111, v150);
  unint64_t v112 = v141(v108, 1, v51);
  uint64_t v107 = v154;
  v109 = v152;
  if (v112 == 1) {
    goto LABEL_24;
  }
  (*(void (**)(char *, uint64_t))(v154 + 8))(v144, v51);
  uint64_t v122 = v132;
  v123 = v142;
  ((void (*)(char *, uint64_t, uint64_t))v142)(v132, v108, v51);
  v124 = v145 + v109[6];
  outlined destroy of StocksKitCurrencyCache.Provider?(v124, &demangling cache variable for type metadata for UUID?);
  ((void (*)(uint64_t, char *, uint64_t))v123)(v124, v122, v51);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v107 + 56))(v124, 0, 1, v51);
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for WeakCalculateExpression?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v9);
    uint64_t v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a2, v4);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakCalculateExpression?);
  }
  else
  {
    outlined init with take of WeakCalculateExpression(a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v7 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CRKeyPath();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(a1, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v8);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v16;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, double))(v10 + 48))(a1, 1, v9, v11) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v8);
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a2, v14);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v13, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    long long v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v19;
    swift_bridgeObjectRelease();
    uint64_t v17 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a2, v17);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v6;

    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)a2, v7);

    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v9);
    swift_bridgeObjectRelease();
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t PKStrokeProperties.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PKStrokeProperties.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for PKStrokeProperties(0);
    LOBYTE(v18) = 1;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v17[1] = v3 + v9[8];
    LOBYTE(v18) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<PKStrokePathStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v18 = *(void *)(v3 + v9[9]);
    char v22 = 4;
    type metadata accessor for PKStrokeMaskStruct();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeMaskStruct and conformance PKStrokeMaskStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeMaskStruct);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v10 = (long long *)(v3 + v9[10]);
    char v11 = *((unsigned char *)v10 + 32);
    long long v12 = v10[1];
    long long v18 = *v10;
    long long v19 = v12;
    LOBYTE(v2__isPlatformVersionAtLeast(2, 18, 1, 0) = v11;
    char v22 = 5;
    lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v13 = (long long *)(v3 + v9[11]);
    char v14 = *((unsigned char *)v13 + 48);
    long long v15 = v13[1];
    long long v18 = *v13;
    long long v19 = v15;
    long long v20 = v13[2];
    char v21 = v14;
    char v22 = 6;
    type metadata accessor for CGAffineTransform(0);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, type metadata accessor for CGAffineTransform);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v18 = *(void *)(v3 + v9[12]);
    char v22 = 8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : AnyCRValue]);
    lazy protocol witness table accessor for type [Int : AnyCRValue] and conformance <> [A : B]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PKStrokeProperties.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v52 = *(void *)(v3 - 8);
  uint64_t v53 = v3;
  MEMORY[0x270FA5388](v3);
  double v51 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  double v48 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  double v50 = (char *)v45 - v8;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<PKStrokeProperties.CodingKeys>);
  uint64_t v49 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v10 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = (int *)type metadata accessor for PKStrokeProperties(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  char v14 = (void *)((char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = (uint64_t)v14 + *(int *)(v12 + 20);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void (**)(void))(*(void *)(v16 - 8) + 56);
  uint64_t v60 = v15;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v17)(v15, 1, 1, v16);
  uint64_t v56 = (char *)v14 + v11[6];
  v17();
  uint64_t v62 = v11[9];
  Swift::String v63 = v11;
  *(uint64_t *)((char *)v14 + v62) = 0;
  long long v18 = (char *)v14 + v11[10];
  *(_OWORD *)long long v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  v18[32] = 1;
  long long v19 = (char *)v14 + v11[11];
  *((_OWORD *)v19 + 1) = 0u;
  *((_OWORD *)v19 + 2) = 0u;
  *(_OWORD *)long long v19 = 0u;
  v19[48] = 1;
  uint64_t v20 = v11[12];
  unint64_t v21 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v57 = v20;
  unsigned int v58 = a1;
  uint64_t v59 = v14;
  *(uint64_t *)((char *)v14 + v2__isPlatformVersionAtLeast(2, 18, 1, 0) = v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys();
  uint64_t v55 = v10;
  char v22 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22)
  {
    uint64_t v26 = v60;
    uint64_t v27 = (uint64_t)v56;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    outlined destroy of StocksKitCurrencyCache.Provider?(v26, &demangling cache variable for type metadata for UUID?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v27, &demangling cache variable for type metadata for UUID?);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = (uint64_t)v50;
    double v46 = v19;
    Swift::String v61 = v18;
    uint64_t v24 = v49;
    LOBYTE(v64) = 0;
    uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v28 = (uint64_t)v59;
    *uint64_t v59 = v25;
    LOBYTE(v64) = 1;
    v45[1] = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of UUID?(v23, v60);
    LOBYTE(v64) = 2;
    uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v30 = v63;
    *(void *)(v28 + v63[7]) = v29;
    LOBYTE(v64) = 3;
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<PKStrokePathStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
    uint64_t v31 = v53;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v28 + v30[8], v51, v31);
    type metadata accessor for PKStrokeMaskStruct();
    char v68 = 4;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeMaskStruct and conformance PKStrokeMaskStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeMaskStruct);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v32 = v64;
    uint64_t v33 = v62;
    swift_release();
    *(void *)(v28 + v33) = v32;
    char v68 = 5;
    lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v34 = v66;
    long long v35 = v65;
    uint64_t v36 = v61;
    *(_OWORD *)Swift::String v61 = v64;
    *((_OWORD *)v36 + 1) = v35;
    v36[32] = v34;
    type metadata accessor for CGAffineTransform(0);
    char v68 = 6;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, type metadata accessor for CGAffineTransform);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v37 = v67;
    long long v38 = v65;
    char v39 = v46;
    *(_OWORD *)double v46 = v64;
    *((_OWORD *)v39 + 1) = v38;
    *((_OWORD *)v39 + 2) = v66;
    v39[48] = v37;
    LOBYTE(v64) = 7;
    uint64_t v40 = (uint64_t)v48;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v41 = v57;
    outlined assign with take of UUID?(v40, (uint64_t)v56);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : AnyCRValue]);
    char v68 = 8;
    lazy protocol witness table accessor for type [Int : AnyCRValue] and conformance <> [A : B]();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v42 = (uint64_t)v58;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v55, v54);
    uint64_t v43 = v64;
    swift_bridgeObjectRelease();
    *(void *)(v28 + v41) = v43;
    outlined init with copy of PKStrokeProperties(v28, v47, type metadata accessor for PKStrokeProperties);
    __swift_destroy_boxed_opaque_existential_1(v42);
    return outlined destroy of PKStrokeProperties(v28, type metadata accessor for PKStrokeProperties);
  }
}

uint64_t protocol witness for CRValue.__hasDelta(from:) in conformance PKStrokeProperties()
{
  return 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PKStrokeProperties@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PKStrokeProperties.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PKStrokeProperties(void *a1)
{
  return PKStrokeProperties.encode(to:)(a1);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PKStrokeProperties@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(v3, a3, type metadata accessor for PKStrokeProperties);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<PKStrokePathStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  CRType.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(a3 + *(int *)(a2 + 32), v10, v7);
  uint64_t v11 = *(void *)(v3 + *(int *)(a2 + 48));
  swift_bridgeObjectRetain();
  uint64_t v12 = specialized _NativeDictionary.mapValues<A>(_:)(v11, a1);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(int *)(a2 + 48);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a3 + v13) = v12;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PKStrokeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeProperties);
  uint64_t v7 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeProperties);
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for static CRType.canContainAssets.getter in conformance PKStrokeProperties()
{
  return MEMORY[0x270F17CA8]();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokeProperties()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKStrokeProperties()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.hasEncodedData.getter in conformance PKStrokeProperties()
{
  return MEMORY[0x270F17F68]();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeProperties(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeProperties);
  return MEMORY[0x270F17688](a1, v2);
}

uint64_t protocol witness for CRCodable.minAppFormatVersion.getter in conformance PKStrokeProperties()
{
  return MEMORY[0x270F17F78]();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PKStrokeStructCache.BoundsParameters(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = a1[3];
  _OWORD v7[2] = a1[2];
  v7[3] = v3;
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  long long v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return specialized static PKStrokeStructCache.BoundsParameters.== infix(_:_:)((uint64_t)v7, (uint64_t)v8);
}

uint64_t PKStrokeStructCache.__deallocating_deinit()
{
  uint64_t v1 = *(void **)(v0 + 104);

  return swift_deallocClassInstance();
}

PaperKit::TaggedStroke::Enum_optional __swiftcall TaggedStroke.Enum.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return (PaperKit::TaggedStroke::Enum_optional)rawValue;
}

uint64_t TaggedStroke.Enum.rawValue.getter()
{
  return *v0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TaggedStroke.Enum(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TaggedStroke.Enum()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TaggedStroke.Enum()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TaggedStroke.Enum()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance TaggedStroke.Enum@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TaggedStroke.Enum(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t PKStrokeInheritedProperties.ink.getter()
{
  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double PKStrokeInheritedProperties.transform.getter@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  CRRegister.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

__C::CGRect __swiftcall PKStrokeStruct.bounds(path:ink:transform:)(PKStrokePath_optional path, PKInk_optional ink, CGAffineTransform *transform)
{
  long long v4 = *(void **)&path.is_nil;
  Class isa = path.value.super.isa;
  uint64_t v6 = *(void *)ink.value.super.isa;
  uint64_t v7 = *((void *)ink.value.super.isa + 1);
  uint64_t v62 = *((void *)ink.value.super.isa + 2);
  uint64_t v8 = *((void *)ink.value.super.isa + 4);
  uint64_t v61 = *((void *)ink.value.super.isa + 3);
  uint64_t v63 = *((void *)ink.value.super.isa + 5);
  uint64_t v9 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  char v14 = (char *)&v56 - v13;
  if (one-time initialization token for unfairLock != -1) {
    swift_once();
  }
  swift_beginAccess();
  os_unfair_lock_lock(&static PKStrokeStruct.unfairLock);
  uint64_t v15 = *(int *)(type metadata accessor for PKStrokeStruct(0) + 24);
  uint64_t v16 = *(void *)(v3 + v15);
  CGFloat v18 = *(double *)(v16 + 16);
  CGFloat v17 = *(double *)(v16 + 24);
  CGFloat v19 = *(double *)(v16 + 32);
  CGFloat v20 = *(double *)(v16 + 40);
  long long v22 = *(_OWORD *)(v16 + 48);
  long long v21 = *(_OWORD *)(v16 + 64);
  long long v23 = *(_OWORD *)(v16 + 96);
  v66[2] = *(_OWORD *)(v16 + 80);
  v66[3] = v23;
  v66[1] = v21;
  v66[0] = v22;
  outlined retain of PKStrokeStructCache.BoundsParameters((void **)v66);
  os_unfair_lock_unlock(&static PKStrokeStruct.unfairLock);
  swift_endAccess();
  *(void *)&long long v67 = isa;
  *((void *)&v67 + 1) = v6;
  *(void *)&long long v68 = v7;
  uint64_t v59 = v7;
  uint64_t v24 = v61;
  *((void *)&v68 + 1) = v62;
  *(void *)&long long v69 = v61;
  uint64_t v58 = v8;
  *((void *)&v69 + 1) = v8;
  *(void *)&long long v70 = v63;
  *((void *)&v70 + 1) = v4;
  uint64_t v25 = isa;
  id v26 = v4;
  v71.origin.CGFloat x = v18;
  v71.origin.CGFloat y = v17;
  v71.size.CGFloat width = v19;
  v71.size.CGFloat height = v20;
  if (CGRectIsNull(v71)
    || !specialized static PKStrokeStructCache.BoundsParameters.== infix(_:_:)((uint64_t)v66, (uint64_t)&v67))
  {
    uint64_t v57 = v6;
    uint64_t v60 = v25;
    uint64_t v27 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    CRRegister.wrappedValue.getter();
    uint64_t v28 = &v14[*(int *)(v9 + 44)];
    if (v28[48])
    {
      double v29 = 1.0;
      double v30 = 0.0;
      double v31 = 0.0;
      double v32 = 0.0;
      double v33 = 0.0;
      double v34 = 1.0;
    }
    else
    {
      double v31 = *((double *)v28 + 4);
      double v30 = *((double *)v28 + 5);
      double v32 = *((double *)v28 + 2);
      double v29 = *((double *)v28 + 3);
      double v34 = *(double *)v28;
      double v33 = *((double *)v28 + 1);
    }
    uint64_t v35 = v59;
    outlined destroy of PKStrokeProperties((uint64_t)v14, type metadata accessor for PKStrokeProperties);
    if (v4 && isa)
    {
      uint64_t v36 = v60;
      id v37 = v26;
      CRRegister.wrappedValue.getter();
      uint64_t v38 = *(void *)&v11[*(int *)(v9 + 36)];
      swift_retain();
      outlined destroy of PKStrokeProperties((uint64_t)v11, type metadata accessor for PKStrokeProperties);
      if (v38)
      {
        id v39 = *(id *)(*(void *)(v38 + 16) + 16);
        swift_release();
      }
      else
      {
        id v39 = 0;
      }
      uint64_t v40 = self;
      v65[0] = v57;
      v65[1] = v35;
      void v65[2] = v62;
      v65[3] = v24;
      v65[4] = v58;
      v65[5] = v63;
      v64[0] = v34;
      v64[1] = v33;
      v64[2] = v32;
      v64[3] = v29;
      v64[4] = v31;
      v64[5] = v30;
      objc_msgSend(v40, sel__calculateBounds_transform_ink_inkTransform_strokePath_, v39, v65, v37, v64, v36);
      CGFloat v18 = v41;
      CGFloat v17 = v42;
      CGFloat v19 = v43;
      CGFloat v20 = v44;
    }
    else
    {
      CGFloat v18 = *MEMORY[0x263F001A0];
      CGFloat v17 = *(double *)(MEMORY[0x263F001A0] + 8);
      CGFloat v19 = *(double *)(MEMORY[0x263F001A0] + 16);
      CGFloat v20 = *(double *)(MEMORY[0x263F001A0] + 24);
    }
    swift_beginAccess();
    os_unfair_lock_lock(&static PKStrokeStruct.unfairLock);
    swift_endAccess();
    uint64_t v45 = *(void *)(v27 + v15);
    *(CGFloat *)(v45 + 16) = v18;
    *(CGFloat *)(v45 + 24) = v17;
    *(CGFloat *)(v45 + 32) = v19;
    *(CGFloat *)(v45 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = v20;
    double v46 = *(void **)(v45 + 48);
    uint64_t v47 = *(void **)(v45 + 104);
    long long v48 = v68;
    *(_OWORD *)(v45 + 48) = v67;
    *(_OWORD *)(v45 + 64) = v48;
    long long v49 = v70;
    *(_OWORD *)(v45 + 8__isPlatformVersionAtLeast(2, 18, 1, 0) = v69;
    *(_OWORD *)(v45 + 96) = v49;
    uint64_t v25 = v60;
    double v50 = v60;
    id v51 = v26;

    swift_beginAccess();
    os_unfair_lock_unlock(&static PKStrokeStruct.unfairLock);
    swift_endAccess();
  }

  outlined release of PKStrokeStructCache.BoundsParameters((uint64_t)v66);
  double v52 = v18;
  double v53 = v17;
  double v54 = v19;
  double v55 = v20;
  result.size.CGFloat height = v55;
  result.size.CGFloat width = v54;
  result.origin.CGFloat y = v53;
  result.origin.CGFloat x = v52;
  return result;
}

void closure #1 in CRRegister<>.bounds(in:)(CGFloat *a1@<X0>, void *a2@<X2>, CGRect *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGFloat v10 = *a1;
  CGFloat v11 = a1[1];
  CGFloat v12 = a1[2];
  CGFloat v13 = a1[3];
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  uint64_t v14 = a2[3];
  uint64_t v15 = a2[4];
  uint64_t v16 = __swift_project_boxed_opaque_existential_1(a2, v14);
  double v17 = specialized CRRegister<>.bounds(in:)(v16, (uint64_t)v9, v14, v15);
  CGFloat v19 = v18;
  CGFloat v21 = v20;
  CGFloat v23 = v22;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v25.origin.CGFloat x = v10;
  v25.origin.CGFloat y = v11;
  v25.size.CGFloat width = v12;
  v25.size.CGFloat height = v13;
  v26.origin.CGFloat x = v17;
  v26.origin.CGFloat y = v19;
  v26.size.CGFloat width = v21;
  v26.size.CGFloat height = v23;
  *a3 = CGRectUnion(v25, v26);
}

uint64_t CRRegister<>.requiredContentVersion<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v125 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v89 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  v118 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v119 = *(void *)(v109 - 8);
  MEMORY[0x270FA5388](v109);
  v123 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v122 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v99 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  uint64_t v98 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v97 = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121);
  v120 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v108 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  uint64_t v113 = *(void *)(v14 - 8);
  uint64_t v114 = v14;
  MEMORY[0x270FA5388](v14);
  v104 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v16 - 8);
  int v96 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v92);
  uint64_t v93 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v94 = *(void *)(v95 - 8);
  MEMORY[0x270FA5388](v95);
  uint64_t v91 = (char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v20 - 8);
  double v22 = (char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v102);
  Swift::String v103 = (char *)&v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  CGRect v26 = (char *)&v88 - v25;
  uint64_t v126 = a2;
  uint64_t v127 = a3;
  uint64_t v27 = type metadata accessor for Capsule();
  uint64_t v116 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v115 = (char *)&v88 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v101 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  double v31 = (char *)&v88 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v35 = (char *)&v88 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v36 - 8);
  uint64_t v38 = (char *)&v88 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v90);
  uint64_t v112 = (uint64_t)&v88 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  uint64_t v111 = (uint64_t)&v88 - v41;
  uint64_t v124 = v5;
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  double v42 = *(void (**)(char *, uint64_t))(v33 + 8);
  v110 = v35;
  uint64_t v107 = v32;
  uint64_t v106 = v33 + 8;
  uint64_t v105 = v42;
  v42(v35, v32);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v44 = *(void *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v38, 1, v43) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v38, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  }
  else
  {
    uint64_t v45 = v125;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v43);
    outlined init with take of PKStrokeStruct(v112, v111, type metadata accessor for PKStrokeStruct);
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v115, v45, v27);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    CRRegister.wrappedValue.getter();
    double v46 = (unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48);
    uint64_t v47 = (void (**)(char *, uint64_t))(v101 + 8);
    long long v48 = (void (**)(char *, char *, uint64_t))(v101 + 32);
    long long v49 = v115;
    while (1)
    {
      swift_getWitnessTable();
      Ref.subscript.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties((uint64_t)v26, type metadata accessor for PKStrokeInheritedProperties);
      if ((*v46)(v22, 1, v29) == 1) {
        break;
      }
      (*v47)(v31, v29);
      (*v48)(v31, v22, v29);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v49, v27);
    uint64_t v50 = (uint64_t)v103;
    Ref.subscript.getter();
    (*v47)(v31, v29);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
    CRRegister.wrappedValue.getter();
    id v51 = v128;
    outlined destroy of PKStrokeProperties(v50, type metadata accessor for PKStrokeInheritedProperties);
    if (v51)
    {
      double v52 = self;
      uint64_t v53 = v111;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
      uint64_t v54 = (uint64_t)v93;
      CRRegister.wrappedValue.getter();
      uint64_t v55 = v94;
      uint64_t v56 = v91;
      uint64_t v57 = v95;
      (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v91, v54 + *(int *)(v92 + 32), v95);
      outlined destroy of PKStrokeProperties(v54, type metadata accessor for PKStrokeProperties);
      uint64_t v58 = v96;
      Ref.subscript.getter();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
      Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
      uint64_t v60 = type metadata accessor for PKStrokePath();
      (*(void (**)(char *, uint64_t))(*(void *)(v60 - 8) + 8))(v58, v60);
      uint64_t v61 = (uint64_t)objc_msgSend(v52, sel__requiredContentVersionForStrokePath_ink_, isa, v51);

      outlined destroy of PKStrokeProperties(v53, type metadata accessor for PKStrokeStruct);
      return v61;
    }
    outlined destroy of PKStrokeProperties(v111, type metadata accessor for PKStrokeStruct);
  }
  uint64_t v62 = v123;
  uint64_t v63 = (uint64_t)v108;
  uint64_t v64 = v109;
  long long v65 = v122;
  uint64_t v66 = v113;
  uint64_t v67 = v107;
  long long v68 = v105;
  long long v69 = v110;
  CRRegister.value.getter();
  SharedTagged_2.tagged2.getter();
  v68(v69, v67);
  uint64_t v70 = v66;
  CGRect v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
  uint64_t v72 = v114;
  if (v71(v63, 1, v114) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v63, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    return 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v104, v63, v72);
    uint64_t v73 = v98;
    Ref.subscript.getter();
    uint64_t v74 = v100;
    CRSequence.makeIterator()();
    (*(void (**)(char *, uint64_t))(v99 + 8))(v73, v74);
    CRSequence.Iterator.next()();
    uint64_t v75 = v119;
    uint64_t v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 48);
    uint64_t v61 = 1;
    if (v76(v65, 1, v64) != 1)
    {
      uint64_t v78 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
      uint64_t v77 = v75 + 32;
      v117 = v78;
      uint64_t v115 = (char *)(v77 - 24);
      uint64_t v116 = v89 + 8;
      uint64_t v61 = 1;
      uint64_t v119 = v77;
      uint64_t v80 = v125;
      uint64_t v79 = v126;
      uint64_t v81 = v127;
      v78(v62, v65, v64);
      while (1)
      {
        uint64_t v84 = v64;
        uint64_t v85 = v118;
        Ref.subscript.getter();
        uint64_t v86 = CRRegister<>.requiredContentVersion<A>(in:)(v80, v79, v81);
        (*(void (**)(char *, uint64_t))v116)(v85, v124);
        if (v61 >= v86)
        {
          (*(void (**)(char *, uint64_t))v115)(v62, v84);
          uint64_t v64 = v84;
        }
        else
        {
          (*(void (**)(char *, uint64_t))v115)(v62, v84);
          uint64_t v61 = v86;
          uint64_t v64 = v84;
          if (v86 == 3) {
            break;
          }
        }
        uint64_t v82 = v122;
        CRSequence.Iterator.next()();
        int v83 = v76(v82, 1, v64);
        uint64_t v62 = v123;
        if (v83 == 1) {
          break;
        }
        v117(v123, v82, v64);
      }
    }
    (*(void (**)(char *, uint64_t))(v97 + 8))(v120, v121);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v104, v114);
  }
  return v61;
}

uint64_t Ref<>.getAllStrokes<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v54 = a4;
  uint64_t v53 = a3;
  uint64_t v57 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v52 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v45 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v51 = (uint64_t)&v44 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v9 - 8);
  double v46 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v47 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v58 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v48 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v49 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v44 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  CGRect v26 = (char *)&v44 - v25;
  uint64_t v56 = a2;
  uint64_t v50 = v5;
  uint64_t v27 = v55;
  Ref.subscript.getter();
  CRRegister.value.getter();
  SharedTagged_2.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v21, 1, v28) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    uint64_t v30 = v52;
    double v31 = v45;
    uint64_t v32 = v50;
    (*(void (**)(char *, uint64_t (*)(void, void, void), uint64_t))(v52 + 16))(v45, v27, v50);
    uint64_t v33 = v51;
    specialized Set._Variant.insert(_:)(v51, v31);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v33, v32);
  }
  else
  {
    uint64_t v35 = v44;
    uint64_t v37 = v53;
    uint64_t v36 = v54;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v28);
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v26, v35, v22);
    uint64_t v48 = v22;
    uint64_t v45 = v26;
    CRSequence.makeIterator()();
    uint64_t v38 = v46;
    CRSequence.Iterator.next()();
    uint64_t v39 = v50;
    uint64_t v55 = *(uint64_t (**)(void, void, void))(v52 + 48);
    int v40 = v55(v38, 1, v50);
    uint64_t v41 = v51;
    if (v40 != 1)
    {
      double v42 = *(void (**)(uint64_t, char *, uint64_t))(v52 + 32);
      uint64_t v43 = (void (**)(uint64_t, uint64_t))(v52 + 8);
      do
      {
        v42(v41, v38, v39);
        Ref<>.getAllStrokes<A>(_:in:)(v57, v56, v37, v36);
        (*v43)(v41, v39);
        CRSequence.Iterator.next()();
      }
      while (v55(v38, 1, v39) != 1);
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v58, v59);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v45, v48);
  }
}

uint64_t PKStrokeInheritedProperties.inherited.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for PKStrokeInheritedProperties.inherited : PKStrokeInheritedProperties(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v5, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
}

uint64_t PKStrokeInheritedProperties.inherited.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
}

uint64_t (*PKStrokeInheritedProperties.inherited.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PKStrokeInheritedProperties.$inherited.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  return CRRegister.projectedValue.getter();
}

uint64_t PKStrokeInheritedProperties.$inherited.setter(uint64_t a1)
{
  return PKStrokeInheritedProperties.$inherited.setter(a1, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
}

uint64_t (*PKStrokeInheritedProperties.$inherited.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t key path getter for PKStrokeInheritedProperties.ink : PKStrokeInheritedProperties@<X0>(void *a1@<X8>)
{
  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PKStrokeInheritedProperties.ink : PKStrokeInheritedProperties(void **a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for PKStrokeInheritedProperties(0);
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PKStrokeInheritedProperties.ink.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PKStrokeInheritedProperties.ink.modify(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PKStrokeInheritedProperties.$ink.getter()
{
  return PKStrokeInheritedProperties.$ink.getter((void (*)(void))type metadata accessor for PKStrokeInheritedProperties, &demangling cache variable for type metadata for CRRegister<PKInk?>, MEMORY[0x263F32C38]);
}

uint64_t PKStrokeInheritedProperties.$ink.setter(uint64_t a1)
{
  return PKStrokeInheritedProperties.$ink.setter(a1, &demangling cache variable for type metadata for CRRegister<PKInk?>, (void (*)(void))type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t (*PKStrokeInheritedProperties.$ink.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PKStrokeInheritedProperties(0) + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

double key path getter for PKStrokeInheritedProperties.transform : PKStrokeInheritedProperties@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  CRRegister.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t key path setter for PKStrokeInheritedProperties.transform : PKStrokeInheritedProperties()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t PKStrokeInheritedProperties.transform.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PKStrokeInheritedProperties.transform.modify(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PKStrokeInheritedProperties.$transform.getter()
{
  return PKStrokeInheritedProperties.$transform.getter(MEMORY[0x263F32C38]);
}

uint64_t key path setter for PKStrokeInheritedProperties.$transform : PKStrokeInheritedProperties(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  size_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  type metadata accessor for PKStrokeInheritedProperties(0);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t PKStrokeInheritedProperties.$transform.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  type metadata accessor for PKStrokeInheritedProperties(0);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PKStrokeInheritedProperties.$transform.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PKStrokeInheritedProperties(0) + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PKStrokeInheritedProperties.additionalFields.getter()
{
  return PKStrokeInheritedProperties.additionalFields.getter((void (*)(void))type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t PKStrokeInheritedProperties.additionalFields.setter(uint64_t a1)
{
  return PKStrokeInheritedProperties.additionalFields.setter(a1, type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t (*PKStrokeInheritedProperties.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static PKStrokeInheritedProperties.fields.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26ACB21D0;
  uint64_t v4 = qword_26ACB21D8;
  uint64_t v3 = unk_26ACB21E0;
  uint64_t v5 = qword_26ACB21E8;
  uint64_t v6 = qword_26ACB21F0;
  uint64_t v7 = qword_26ACB21F8;
  uint64_t v8 = qword_26ACB2200;
  uint64_t v9 = qword_26ACB2208;
  *a1 = static PKStrokeInheritedProperties.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t PKStrokeInheritedProperties.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v11 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v5, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  lazy protocol witness table accessor for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  uint64_t v9 = type metadata accessor for PKStrokeInheritedProperties(0);
  v11[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  lazy protocol witness table accessor for type PKInk? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  v11[0] = 0x3FF0000000000000;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = 0x3FF0000000000000;
  type metadata accessor for CGAffineTransform(0);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, type metadata accessor for CGAffineTransform);
  v11[4] = 0;
  v11[5] = 0;
  uint64_t result = CRRegister.init(wrappedValue:)();
  *(void *)(a1 + *(int *)(v9 + 28)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t PKStrokeInheritedProperties.init(ink:transform:)@<X0>(void *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = a2;
  id v34 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v38 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v35 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  MEMORY[0x270FA5388](v6);
  double v31 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v28 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  v27(v15, 1, 1, v16);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v15, (uint64_t)v12, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  lazy protocol witness table accessor for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  uint64_t v17 = (int *)type metadata accessor for PKStrokeInheritedProperties(0);
  uint64_t v26 = a3 + v17[5];
  *(void *)&long long v39 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  lazy protocol witness table accessor for type PKInk? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  uint64_t v18 = a3 + v17[6];
  long long v39 = 0x3FF0000000000000uLL;
  *(void *)&long long v40 = 0;
  *((void *)&v40 + 1) = 0x3FF0000000000000;
  type metadata accessor for CGAffineTransform(0);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, type metadata accessor for CGAffineTransform);
  long long v41 = 0uLL;
  CRRegister.init(wrappedValue:)();
  *(void *)(a3 + v17[7]) = MEMORY[0x263F8EE80];
  v27(v15, 1, 1, v16);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v19 = v28;
  CRRegister.init<A>(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 40))(a3, v19, v30);
  *(void *)&long long v39 = v34;
  id v20 = v34;
  uint64_t v21 = v31;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 40))(v26, v21, v33);
  uint64_t v22 = v35;
  long long v23 = v36[1];
  long long v39 = *v36;
  long long v40 = v23;
  long long v41 = v36[2];
  CRRegister.init(_:)();

  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v37 + 40))(v18, v22, v38);
}

uint64_t PKStrokeInheritedProperties.init(inherited:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  uint64_t v36 = *(void *)(v3 - 8);
  uint64_t v37 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v35 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  MEMORY[0x270FA5388](v5);
  double v31 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v30 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v28 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v26);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v27(v13, 1, 1, v14);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v13, (uint64_t)v10, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  unint64_t v25 = lazy protocol witness table accessor for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  uint64_t v16 = (int *)type metadata accessor for PKStrokeInheritedProperties(0);
  uint64_t v24 = a2 + v16[5];
  uint64_t v38 = 0;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  lazy protocol witness table accessor for type PKInk? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  uint64_t v17 = a2 + v16[6];
  uint64_t v38 = 0x3FF0000000000000;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0x3FF0000000000000;
  type metadata accessor for CGAffineTransform(0);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, type metadata accessor for CGAffineTransform);
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  CRRegister.init(wrappedValue:)();
  *(void *)(a2 + v16[7]) = MEMORY[0x263F8EE80];
  uint64_t v18 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, v32, v14);
  v27(v13, 0, 1, v14);
  uint64_t v19 = v28;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 40))(a2, v19, v30);
  uint64_t v38 = 0;
  id v20 = v31;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 40))(v24, v20, v34);
  uint64_t v38 = 0x3FF0000000000000;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0x3FF0000000000000;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v21 = v35;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v14);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 40))(v17, v21, v37);
}

uint64_t PKStrokeInheritedProperties.inkTimestamp.getter()
{
  return PKStrokeInheritedProperties.$ink.getter((void (*)(void))type metadata accessor for PKStrokeInheritedProperties, &demangling cache variable for type metadata for CRRegister<PKInk?>, MEMORY[0x263F32C48]);
}

uint64_t PKStrokeInheritedProperties.$ink.getter(void (*a1)(void), uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  a1(0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  return a3(v5);
}

uint64_t PKStrokeInheritedProperties.transformTimestamp.getter()
{
  return PKStrokeInheritedProperties.$transform.getter(MEMORY[0x263F32C48]);
}

uint64_t PKStrokeInheritedProperties.$transform.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for PKStrokeInheritedProperties(0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  return a1(v2);
}

uint64_t PKStrokeInheritedProperties.minAppFormatVersion.getter()
{
  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  if (!v3) {
    return 0;
  }
  id v0 = objc_msgSend(v3, sel_requiredContentVersion);
  uint64_t v1 = (uint64_t)objc_msgSend(v3, sel_inkFormatVersion);

  if (v1 <= 1)
  {
    if (v1 == 1)
    {
      if (v0 == (id)3) {
        return 5;
      }
      else {
        return 3;
      }
    }
    goto LABEL_11;
  }
  if (v1 != 2)
  {
    if (v1 == 250) {
      return 250;
    }
LABEL_11:
    if (v0 == (id)3) {
      return 5;
    }
    else {
      return 0;
    }
  }
  if (v0 == (id)3) {
    return 5;
  }
  else {
    return 4;
  }
}

uint64_t protocol witness for static CRStruct_Base_3.fields.getter in conformance PKStrokeInheritedProperties@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26ACB21D0;
  uint64_t v4 = qword_26ACB21D8;
  uint64_t v3 = unk_26ACB21E0;
  uint64_t v5 = qword_26ACB21E8;
  uint64_t v6 = qword_26ACB21F0;
  uint64_t v7 = qword_26ACB21F8;
  uint64_t v8 = qword_26ACB2200;
  uint64_t v9 = qword_26ACB2208;
  *a1 = static PKStrokeInheritedProperties.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance PKStrokeInheritedProperties(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F170D8](a1, v2);
}

uint64_t (*protocol witness for CRStruct_Base.additionalFields.modify in conformance PKStrokeInheritedProperties())()
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CRDT.context.getter in conformance PKStrokeInheritedProperties(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance PKStrokeInheritedProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F17078](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance PKStrokeInheritedProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F170A0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance PKStrokeInheritedProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F170D0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F170A8](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance PKStrokeInheritedProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F170C8](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance PKStrokeInheritedProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F170B0](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PKStrokeInheritedProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F17090](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F17088](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F17070](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance PKStrokeInheritedProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F17058](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return CRStruct_3.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance PKStrokeInheritedProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F17060](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance PKStrokeInheritedProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F170B8](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance PKStrokeInheritedProperties()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance PKStrokeInheritedProperties()
{
  return CRDT.init(serializedData:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokeInheritedProperties()
{
  return CRStruct_3.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKStrokeInheritedProperties()
{
  return CRStruct_3.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeInheritedProperties(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  return MEMORY[0x270F17068](a1, v2);
}

uint64_t PKStrokeStruct.inherited.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for PKStrokeStruct.inherited : PKStrokeStruct(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t PKStrokeStruct.inherited.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PKStrokeStruct.inherited.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PKStrokeStruct.$inherited.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PKStrokeInheritedProperties.$inherited : PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v15 - v11;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13((char *)&v15 - v11, a1, v6);
  v13(v10, (uint64_t)v12, v6);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
}

uint64_t PKStrokeStruct.$inherited.setter(uint64_t a1)
{
  return PKStrokeInheritedProperties.$inherited.setter(a1, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
}

uint64_t PKStrokeInheritedProperties.$inherited.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

uint64_t (*PKStrokeStruct.$inherited.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

void PKStrokeInheritedProperties.$inherited.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 16) + 16);
  v4(*(void *)(*(void *)a1 + 32), v3[5], v3[1]);
  uint64_t v5 = (void *)v3[4];
  size_t v6 = (void *)v3[5];
  uint64_t v8 = v3[2];
  uint64_t v7 = (void *)v3[3];
  uint64_t v9 = v3[1];
  if (a2)
  {
    v4(v3[3], v3[4], v3[1]);
    CRRegister.projectedValue.setter();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
    v10(v6, v9);
  }
  else
  {
    CRRegister.projectedValue.setter();
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v9);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t PKStrokeStruct.properties.getter()
{
  return PKStrokeInheritedProperties.$ink.getter((void (*)(void))type metadata accessor for PKStrokeStruct, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>, MEMORY[0x263F32C30]);
}

uint64_t key path setter for PKStrokeStruct.properties : PKStrokeStruct(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PKStrokeProperties(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)&v9 - v6, type metadata accessor for PKStrokeProperties);
  outlined init with copy of PKStrokeProperties((uint64_t)v7, (uint64_t)v5, type metadata accessor for PKStrokeProperties);
  type metadata accessor for PKStrokeStruct(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of PKStrokeProperties((uint64_t)v7, type metadata accessor for PKStrokeProperties);
}

uint64_t PKStrokeStruct.properties.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PKStrokeProperties);
  type metadata accessor for PKStrokeStruct(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of PKStrokeProperties(a1, type metadata accessor for PKStrokeProperties);
}

uint64_t (*PKStrokeStruct.properties.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PKStrokeStruct(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

void PKStrokeInheritedProperties.inherited.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t PKStrokeStruct.$properties.getter()
{
  return PKStrokeInheritedProperties.$ink.getter((void (*)(void))type metadata accessor for PKStrokeStruct, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>, MEMORY[0x263F32C38]);
}

uint64_t key path setter for PKStrokeInheritedProperties.$ink : PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15((char *)&v17 - v13, a1, v8);
  v15(v12, (uint64_t)v14, v8);
  a6(0);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
}

uint64_t PKStrokeStruct.$properties.setter(uint64_t a1)
{
  return PKStrokeInheritedProperties.$ink.setter(a1, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>, (void (*)(void))type metadata accessor for PKStrokeStruct);
}

uint64_t PKStrokeInheritedProperties.$ink.setter(uint64_t a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  a3(0);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

uint64_t (*PKStrokeStruct.$properties.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PKStrokeStruct(0) + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

void PKStrokeInheritedProperties.$ink.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 16) + 16);
  v4(*(void *)(*(void *)a1 + 32), v3[5], v3[1]);
  uint64_t v5 = (void *)v3[4];
  size_t v6 = (void *)v3[5];
  uint64_t v8 = v3[2];
  uint64_t v7 = (void *)v3[3];
  uint64_t v9 = v3[1];
  if (a2)
  {
    v4(v3[3], v3[4], v3[1]);
    CRRegister.projectedValue.setter();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
    v10(v6, v9);
  }
  else
  {
    CRRegister.projectedValue.setter();
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v9);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t PKStrokeStruct.additionalFields.getter()
{
  return PKStrokeInheritedProperties.additionalFields.getter((void (*)(void))type metadata accessor for PKStrokeStruct);
}

uint64_t PKStrokeInheritedProperties.additionalFields.getter(void (*a1)(void))
{
  a1(0);
  return swift_bridgeObjectRetain();
}

uint64_t PKStrokeStruct.additionalFields.setter(uint64_t a1)
{
  return PKStrokeInheritedProperties.additionalFields.setter(a1, type metadata accessor for PKStrokeStruct);
}

uint64_t PKStrokeInheritedProperties.additionalFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = *(int *)(a2(0) + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*PKStrokeStruct.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static PKStrokeStruct.fields.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = qword_26ACB1948;
  uint64_t v4 = qword_26ACB1950;
  uint64_t v3 = unk_26ACB1958;
  uint64_t v5 = qword_26ACB1960;
  uint64_t v6 = qword_26ACB1968;
  *a1 = static PKStrokeStruct.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t PKStrokeStruct.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = type metadata accessor for PKStrokeStruct(0);
  uint64_t v8 = *(int *)(v7 + 24);
  type metadata accessor for PKStrokeStructCache();
  uint64_t v9 = swift_allocObject();
  long long v10 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  *(_OWORD *)(v9 + 16) = *MEMORY[0x263F001A0];
  *(_OWORD *)(v9 + 32) = v10;
  *(void *)(v9 + 48) = 0;
  *(void *)(v9 + 56) = 0x3FF0000000000000;
  *(void *)(v9 + 64) = 0;
  *(void *)(v9 + 72) = 0;
  *(void *)(v9 + 8__isPlatformVersionAtLeast(2, 18, 1, 0) = 0x3FF0000000000000;
  *(void *)(v9 + 88) = 0;
  *(void *)(a1 + v8) = v9;
  *(void *)(v9 + 96) = 0;
  *(void *)(v9 + 104) = 0;
  *(void *)(a1 + *(int *)(v7 + 28)) = MEMORY[0x263F8EE80];
  static CRKeyPath.unique.getter();
  type metadata accessor for PKStrokeInheritedProperties(0);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  Ref.init(id:)();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  CRRegister.init(_:)();
  uint64_t v11 = &v4[v2[5]];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v13(&v4[v2[6]], 1, 1, v12);
  static CRKeyPath.unique.getter();
  type metadata accessor for PKStrokePathStruct(0);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct);
  Ref.init(id:)();
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)uint64_t v4 = 0;
  *(void *)&v4[v2[7]] = 0;
  *(void *)&v4[v2[9]] = 0;
  uint64_t v15 = &v4[v2[10]];
  *(_OWORD *)uint64_t v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  v15[32] = 1;
  uint64_t v16 = &v4[v2[11]];
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  v16[48] = 1;
  *(void *)&v4[v2[12]] = v14;
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeProperties);
  return CRRegister.init(_:)();
}

uint64_t PKStrokeStruct.init(inheritedProperties:path:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  PKStrokeStruct.init(inheritedProperties:path:flags:mask:)((uint64_t)v13, (uint64_t)v9, 0, 0, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
}

uint64_t PKStrokeStruct.init(inheritedProperties:path:flags:mask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v39 = a4;
  uint64_t v46 = a3;
  uint64_t v52 = a2;
  uint64_t v53 = a1;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v50 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v51 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = (int *)type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  uint64_t v47 = *(void *)(v16 - 8);
  uint64_t v48 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v45 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for PKStrokeStruct(0);
  uint64_t v23 = *(int *)(v22 + 24);
  type metadata accessor for PKStrokeStructCache();
  uint64_t v24 = swift_allocObject();
  long long v25 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  *(_OWORD *)(v24 + 16) = *MEMORY[0x263F001A0];
  *(_OWORD *)(v24 + 32) = v25;
  *(void *)(v24 + 48) = 0;
  *(void *)(v24 + 56) = 0x3FF0000000000000;
  *(void *)(v24 + 64) = 0;
  *(void *)(v24 + 72) = 0;
  *(void *)(v24 + 8__isPlatformVersionAtLeast(2, 18, 1, 0) = 0x3FF0000000000000;
  *(void *)(v24 + 88) = 0;
  *(void *)(v24 + 96) = 0;
  *(void *)(v24 + 104) = 0;
  *(void *)(a5 + v23) = v24;
  uint64_t v40 = v22;
  uint64_t v41 = v19;
  *(void *)(a5 + *(int *)(v22 + 28)) = MEMORY[0x263F8EE80];
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v53, v18);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v49 = a5;
  uint64_t v42 = v18;
  CRRegister.init(_:)();
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
  uint64_t v43 = v12;
  v27(v12, 1, 1, v26);
  uint64_t v44 = v10;
  v27(v10, 1, 1, v26);
  uint64_t v28 = v39;
  uint64_t v29 = v38;
  (*(void (**)(char *, uint64_t))(v50 + 16))(v51, v52);
  type metadata accessor for PKStrokeMaskStruct();
  uint64_t v30 = swift_allocObject();
  if (v28)
  {
    type metadata accessor for PKStrokeMaskWrapper();
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v28;
    *(void *)(v30 + 16) = v31;
  }
  else
  {
    swift_deallocPartialClassInstance();
    uint64_t v30 = 0;
  }
  unint64_t v32 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)uint64_t v15 = v46;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v43, (uint64_t)&v15[v13[5]], &demangling cache variable for type metadata for UUID?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v44, (uint64_t)&v15[v13[6]], &demangling cache variable for type metadata for UUID?);
  *(void *)&v15[v13[7]] = 0;
  uint64_t v33 = v50;
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(&v15[v13[8]], v51, v29);
  *(void *)&v15[v13[9]] = v30;
  uint64_t v34 = &v15[v13[10]];
  *(_OWORD *)uint64_t v34 = 0u;
  *((_OWORD *)v34 + 1) = 0u;
  v34[32] = 1;
  uint64_t v35 = &v15[v13[11]];
  *((_OWORD *)v35 + 1) = 0u;
  *((_OWORD *)v35 + 2) = 0u;
  *(_OWORD *)uint64_t v35 = 0u;
  v35[48] = 1;
  *(void *)&v15[v13[12]] = v32;
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeProperties);
  uint64_t v36 = v45;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v52, v29);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v53, v42);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v49 + *(int *)(v40 + 20), v36, v48);
}

uint64_t PKStrokeStruct.minAppFormatVersion.getter()
{
  uint64_t v0 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (uint64_t *)((char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for PKStrokeStruct(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  CRRegister.wrappedValue.getter();
  uint64_t v3 = *v2;
  outlined destroy of PKStrokeProperties((uint64_t)v2, type metadata accessor for PKStrokeProperties);
  if (_So13PKStrokeFlagsa34__Unnamed_union___Anonymous_field0V02__c10_struct___e1_F0V_shouldSolveMath_getter(v3 & 0xFFFFFFFFFFFFLL)) {
    return 6;
  }
  else {
    return 0;
  }
}

uint64_t PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(void *a1, uint64_t a2)
{
  v45[0] = a2;
  uint64_t v56 = *a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v48 = (uint64_t)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v47 = (char *)v45 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v45 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v49 = (char *)v45 - v12;
  uint64_t v13 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v13 - 8);
  v45[1] = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v45 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v45 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v46 = (char *)v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)v45 - v25;
  MEMORY[0x270FA5388](v27);
  uint64_t v50 = (char *)v45 - v28;
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)v45 - v30;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  uint64_t v52 = v2;
  CRRegister.wrappedValue.getter();
  uint64_t v53 = a1;
  Ref.subscript.getter();
  uint64_t v54 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v55 = v22 + 8;
  v54(v31, v21);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  uint64_t v34 = (uint64_t)v49;
  uint64_t v57 = v33;
  CRRegister.wrappedValue.getter();
  outlined destroy of PKStrokeProperties((uint64_t)v20, type metadata accessor for PKStrokeInheritedProperties);
  uint64_t v51 = v22;
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  int v36 = v35(v34, 1, v21);
  uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v34, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  if (v36 != 1)
  {
    CRRegister.wrappedValue.getter();
    uint64_t v58 = v53;
    swift_retain_n();
    uint64_t v49 = (char *)v32;
    CRRegister.wrappedValue.getter();
    for (uint64_t i = (void (**)(char *, char *, uint64_t))(v51 + 32); ; (*i)(v26, v10, v21))
    {
      type metadata accessor for Capsule.Ref();
      swift_getWitnessTable();
      Ref.subscript.getter();
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties((uint64_t)v17, type metadata accessor for PKStrokeInheritedProperties);
      if (v35((uint64_t)v10, 1, v21) == 1) {
        break;
      }
      v54(v26, v21);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    swift_release();
    Ref.subscript.getter();
    uint64_t v39 = v26;
    uint64_t v40 = v54;
    v54(v39, v21);
    uint64_t v41 = v50;
    Ref.subscript.setter();
    v40(v41, v21);
    uint64_t v42 = v46;
    CRRegister.wrappedValue.getter();
    uint64_t v43 = (uint64_t)v47;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v47, 1, 1, v21);
    uint64_t v44 = (void (*)(void **, void))Ref.subscript.modify();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v43, v48, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?(v43, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    v44(&v58, 0);
    return ((uint64_t (*)(char *, uint64_t))v40)(v42, v21);
  }
  return result;
}

Swift::Void __swiftcall PKStrokeStruct.didMerge()()
{
  uint64_t v1 = *(int *)(type metadata accessor for PKStrokeStruct(0) + 24);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v2 = *(void *)(v0 + v1);
    long long v3 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
    *(_OWORD *)(v2 + 16) = *MEMORY[0x263F001A0];
    *(_OWORD *)(v2 + 32) = v3;
  }
  else
  {
    type metadata accessor for PKStrokeStructCache();
    uint64_t v4 = swift_allocObject();
    long long v5 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
    *(_OWORD *)(v4 + 16) = *MEMORY[0x263F001A0];
    *(_OWORD *)(v4 + 32) = v5;
    *(void *)(v4 + 48) = 0;
    *(void *)(v4 + 56) = 0x3FF0000000000000;
    *(void *)(v4 + 64) = 0;
    *(void *)(v4 + 72) = 0;
    *(void *)(v4 + 8__isPlatformVersionAtLeast(2, 18, 1, 0) = 0x3FF0000000000000;
    *(void *)(v4 + 88) = 0;
    *(void *)(v4 + 96) = 0;
    *(void *)(v4 + 104) = 0;
    *(void *)(v0 + v1) = v4;
    swift_release();
  }
}

uint64_t PKStrokeStruct.apply(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>.MutatingAction?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?, CRRegister<PKStrokeProperties>.MutatingAction?)?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v36 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v16 = qword_26ACB1948;
  uint64_t v17 = qword_26ACB1960;
  uint64_t v38 = a1;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v12, &demangling cache variable for type metadata for (CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?, CRRegister<PKStrokeProperties>.MutatingAction?)?);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?, CRRegister<PKStrokeProperties>.MutatingAction?));
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v36[1] = v19 + 48;
  uint64_t v37 = v20;
  unsigned int v21 = v20(v12, 1, v18);
  uint64_t v39 = v16;
  uint64_t v40 = v17;
  if (v21 == 1)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for (CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?, CRRegister<PKStrokeProperties>.MutatingAction?)?);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v15, 1, 1, v22);
  }
  else
  {
    uint64_t v23 = *(int *)(v18 + 48);
    v36[0] = v2;
    uint64_t v24 = &v12[v23];
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v12, (uint64_t)v15, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v25 = (uint64_t)v24;
    uint64_t v2 = v36[0];
    outlined destroy of StocksKitCurrencyCache.Provider?(v25, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>.MutatingAction?);
  }
  uint64_t v26 = v2;
  uint64_t v27 = (void (*)(unsigned char *, void))swift_modifyAtWritableKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.apply(_:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?);
  v27(v41, 0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v38, (uint64_t)v10, &demangling cache variable for type metadata for (CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?, CRRegister<PKStrokeProperties>.MutatingAction?)?);
  if (v37(v10, 1, v18) == 1)
  {
    swift_retain();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for (CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?, CRRegister<PKStrokeProperties>.MutatingAction?)?);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>.MutatingAction);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v6, 1, 1, v28);
  }
  else
  {
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v10[*(int *)(v18 + 48)], (uint64_t)v6, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>.MutatingAction?);
    swift_retain();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?);
  }
  uint64_t v29 = (void (*)(unsigned char *, void))swift_modifyAtWritableKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  CRRegister.apply(_:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>.MutatingAction?);
  v29(v41, 0);
  swift_release();
  uint64_t v30 = *(int *)(type metadata accessor for PKStrokeStruct(0) + 24);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v31 = *(void *)(v26 + v30);
    long long v32 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
    *(_OWORD *)(v31 + 16) = *MEMORY[0x263F001A0];
    *(_OWORD *)(v31 + 32) = v32;
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for PKStrokeStructCache();
    uint64_t v33 = swift_allocObject();
    long long v34 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
    *(_OWORD *)(v33 + 16) = *MEMORY[0x263F001A0];
    *(_OWORD *)(v33 + 32) = v34;
    *(void *)(v33 + 48) = 0;
    *(void *)(v33 + 56) = 0x3FF0000000000000;
    *(void *)(v33 + 64) = 0;
    *(void *)(v33 + 72) = 0;
    *(void *)(v33 + 8__isPlatformVersionAtLeast(2, 18, 1, 0) = 0x3FF0000000000000;
    *(void *)(v33 + 88) = 0;
    *(void *)(v33 + 96) = 0;
    *(void *)(v33 + 104) = 0;
    *(void *)(v26 + v3__isPlatformVersionAtLeast(2, 18, 1, 0) = v33;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

void one-time initialization function for unfairLock()
{
  static PKStrokeStruct.unfairLock = 0;
}

uint64_t static PKStrokeStruct.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKStrokeProperties(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v29 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v28 = (char *)&v26 - v7;
  uint64_t v27 = type metadata accessor for PKStrokeStruct(0);
  uint64_t v8 = MEMORY[0x270FA5388](v27);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v26 - v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  CRRegister.wrappedValue.getter();
  type metadata accessor for PKStrokeInheritedProperties(0);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  char v20 = static Ref.== infix(_:_:)();
  unsigned int v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v17, v13);
  v21(v19, v13);
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)v12, type metadata accessor for PKStrokeStruct);
  outlined init with copy of PKStrokeProperties(a2, (uint64_t)v10, type metadata accessor for PKStrokeStruct);
  if (v20)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    uint64_t v22 = v28;
    CRRegister.wrappedValue.getter();
    uint64_t v23 = v29;
    CRRegister.wrappedValue.getter();
    char v24 = specialized static PKStrokeProperties.== infix(_:_:)(v22, v23);
    outlined destroy of PKStrokeProperties((uint64_t)v23, type metadata accessor for PKStrokeProperties);
    outlined destroy of PKStrokeProperties((uint64_t)v22, type metadata accessor for PKStrokeProperties);
  }
  else
  {
    char v24 = 0;
  }
  outlined destroy of PKStrokeProperties((uint64_t)v10, type metadata accessor for PKStrokeStruct);
  outlined destroy of PKStrokeProperties((uint64_t)v12, type metadata accessor for PKStrokeStruct);
  return v24 & 1;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokeStruct()
{
  return CRStruct_2.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKStrokeStruct()
{
  return CRStruct_2.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeStruct(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return MEMORY[0x270F16FE0](a1, v2);
}

uint64_t protocol witness for CRCodable.minAppFormatVersion.getter in conformance PKStrokeStruct()
{
  uint64_t v0 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (uint64_t *)((char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  CRRegister.wrappedValue.getter();
  uint64_t v3 = *v2;
  outlined destroy of PKStrokeProperties((uint64_t)v2, type metadata accessor for PKStrokeProperties);
  if (_So13PKStrokeFlagsa34__Unnamed_union___Anonymous_field0V02__c10_struct___e1_F0V_shouldSolveMath_getter(v3 & 0xFFFFFFFFFFFFLL)) {
    return 6;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static CRStruct_Base_2.fields.getter in conformance PKStrokeStruct@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = qword_26ACB1948;
  uint64_t v4 = qword_26ACB1950;
  uint64_t v3 = unk_26ACB1958;
  uint64_t v5 = qword_26ACB1960;
  uint64_t v6 = qword_26ACB1968;
  *a1 = static PKStrokeStruct.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance PKStrokeStruct(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return MEMORY[0x270F17050](a1, v2);
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance PKStrokeStruct()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t protocol witness for CRDT.context.getter in conformance PKStrokeStruct(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return MEMORY[0x270F16FF0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return MEMORY[0x270F17048](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance PKStrokeStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return MEMORY[0x270F17020](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return MEMORY[0x270F17040](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return MEMORY[0x270F17028](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return MEMORY[0x270F17008](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return MEMORY[0x270F17000](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PKStrokeStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return MEMORY[0x270F16FE8](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return MEMORY[0x270F16FD0](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return CRStruct_2.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return MEMORY[0x270F16FD8](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
  return MEMORY[0x270F17030](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance PKStrokeStruct()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance PKStrokeStruct()
{
  return CRDT.init(serializedData:)();
}

uint64_t closure #1 in static Data.== infix(_:_:)@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      outlined copy of Data._Representation(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x20C3140DCLL);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = outlined consume of Data._Representation(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  type metadata accessor for UUID();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F07508];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x263F07508], (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v2, MEMORY[0x263F07528]);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for CRKeyPath();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F330F8];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
  uint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x263F330F8], (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, v2, MEMORY[0x263F33110]);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  uint64_t v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  uint64_t v2 = v1;
  uint64_t v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
}

{
  uint64_t v2;
  uint64_t vars8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  uint64_t v2 = v1;
  uint64_t v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for NSObject);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  _CFObject.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for CRAsset();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F33060];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
  uint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x263F33060], &lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, v2, MEMORY[0x263F33078]);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  uint64_t v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  uint64_t v2 = v1;
  uint64_t v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for UIColor);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  uint64_t v2 = v1;
  uint64_t v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(a1, sel_hash));
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t)a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, MEMORY[0x263F8D2A8], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, MEMORY[0x263F06F38], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a3(v10, a1, a2);
  Swift::Int v7 = Hasher._finalize()();
  return a4(a1, a2, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt *a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*a1);
  type metadata accessor for PDFPageID();
  type metadata accessor for CRAsset();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a2(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();
  return a3(a1, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  char v7;

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    do
    {
      uint64_t v6 = *(id *)(*(void *)(v2 + 48) + 8 * v4);
      uint64_t v7 = static NSObject.== infix(_:_:)();

      if (v7) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v21 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v22 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v9 = a2 & ~v8;
  int64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    size_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v11 = v5 + 16;
    uint64_t v12 = v13;
    int v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      uint64_t v16 = v11;
      v12(v7, *(void *)(v22 + 48) + v14 * v9, v4);
      uint64_t v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v15)(v7, v4);
      if (v17) {
        break;
      }
      uint64_t v9 = (v9 + 1) & v10;
      uint64_t v11 = v16;
    }
    while (((*(void *)(v20 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  unsigned char v9[40];

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      uint64_t v7 = MEMORY[0x21054DFB0](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t, __n128);
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  int64_t v20 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v5 = *(void *)(v4 - 8);
  v6.n128_f64[0] = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v2;
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = a2 & ~v9;
  BOOL v19 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    int v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    size_t v13 = v5 + 16;
    uint64_t v12 = v14;
    uint64_t v15 = *(void *)(v13 + 56);
    do
    {
      v12(v8, *(void *)(v21 + 48) + v15 * v10, v4, v6);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      uint64_t v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v8, v4);
      if (v16) {
        break;
      }
      uint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v19 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFStringRef(0);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    uint64_t v7 = v6;
    uint64_t v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (uint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; uint64_t i = (i + 1) & v9)
      {
        uint64_t v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        uint64_t v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for PaperKitPDFPage(0);
    uint64_t v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (uint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; uint64_t i = (i + 1) & v8)
      {
        uint64_t v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        uint64_t v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      uint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          size_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            uint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        size_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    unint64_t v7 = FormAnalyticsKeys.rawValue.getter(*(unsigned char *)(*(void *)(v2 + 48) + v5));
    uint64_t v9 = v8;
    if (v7 == FormAnalyticsKeys.rawValue.getter(a1) && v9 == v10)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = ~v4;
      unint64_t v5 = (v5 + 1) & v13;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          unint64_t v14 = FormAnalyticsKeys.rawValue.getter(*(unsigned char *)(*(void *)(v2 + 48) + v5));
          uint64_t v16 = v15;
          if (v14 == FormAnalyticsKeys.rawValue.getter(a1) && v16 == v17) {
            break;
          }
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v13;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    unint64_t v6 = ~v3;
    while (1)
    {
      unint64_t v7 = 0x800000020C84E080;
      uint64_t v8 = 0xD000000000000020;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          uint64_t v8 = 0xD000000000000011;
          uint64_t v9 = "canvasElementType";
          goto LABEL_31;
        case 2:
          uint64_t v8 = 0xD000000000000016;
          uint64_t v9 = "canvasElementEventType";
          goto LABEL_31;
        case 3:
          unint64_t v7 = 0xE300000000000000;
          uint64_t v8 = 6579297;
          break;
        case 4:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x65766F6D6572;
          break;
        case 5:
          uint64_t v8 = 0xD00000000000002ALL;
          uint64_t v9 = "com.apple.paperkit.selection.selectionType";
          goto LABEL_31;
        case 6:
          uint64_t v8 = 0x6F697463656C6573;
          unint64_t v7 = 0xED0000657079546ELL;
          break;
        case 7:
          unint64_t v7 = 0xE300000000000000;
          uint64_t v8 = 7364980;
          break;
        case 8:
          unint64_t v7 = 0xE500000000000000;
          uint64_t v8 = 0x6F7373616CLL;
          break;
        case 9:
          uint64_t v8 = 0xD000000000000028;
          uint64_t v9 = "com.apple.paperkit.selection.contentType";
          goto LABEL_31;
        case 0xA:
          uint64_t v8 = 0x54746E65746E6F63;
          unint64_t v7 = 0xEB00000000657079;
          break;
        case 0xB:
          unint64_t v7 = 0xED0000746E656D65;
          goto LABEL_16;
        case 0xC:
          unint64_t v7 = 0xEE0073746E656D65;
LABEL_16:
          uint64_t v8 = 0x6C457361766E6163;
          break;
        case 0xD:
          unint64_t v7 = 0xE500000000000000;
          uint64_t v8 = 0x646578696DLL;
          break;
        case 0xE:
          uint64_t v8 = 0xD00000000000001ELL;
          uint64_t v9 = "com.apple.paperkit.dragAndDrop";
          goto LABEL_31;
        case 0xF:
          uint64_t v8 = 0x44646E4167617264;
          unint64_t v7 = 0xEF65707954706F72;
          break;
        case 0x10:
          uint64_t v8 = 0x4E6564697374756FLL;
          unint64_t v7 = 0xEB0000000065746FLL;
          break;
        case 0x11:
          uint64_t v8 = 0xD00000000000001DLL;
          uint64_t v9 = "insideNoteFromPaperAttachment";
          goto LABEL_31;
        case 0x12:
          uint64_t v8 = 0xD000000000000018;
          uint64_t v9 = "insideNoteFromInlineNote";
          goto LABEL_31;
        case 0x13:
          uint64_t v8 = 0xD00000000000001ELL;
          uint64_t v9 = "com.apple.paperkit.didOpenLink";
          goto LABEL_31;
        case 0x14:
          uint64_t v8 = 0x6E756F436E65706FLL;
          unint64_t v7 = 0xE900000000000074;
          break;
        case 0x15:
          uint64_t v9 = "com.apple.paperkit.didSelectLink";
          goto LABEL_31;
        case 0x16:
          uint64_t v8 = 0x64657463656C6573;
          unint64_t v7 = 0xED0000746E756F43;
          break;
        case 0x17:
          uint64_t v9 = "com.apple.paperkit.didInsertLink";
          goto LABEL_31;
        case 0x18:
          uint64_t v8 = 0x4C6464416D6F7266;
          unint64_t v7 = 0xEF756E654D6B6E69;
          break;
        case 0x19:
          uint64_t v8 = 0xD000000000000028;
          uint64_t v9 = "com.apple.paperkit.didPresentAddLinkMenu";
          goto LABEL_31;
        case 0x1A:
          uint64_t v8 = 0xD000000000000013;
          uint64_t v9 = "displayedLinksCount";
LABEL_31:
          unint64_t v7 = (unint64_t)(v9 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      uint64_t v10 = 0x800000020C84E080;
      BOOL v11 = 0xD000000000000020;
      switch(a1)
      {
        case 1:
          BOOL v11 = 0xD000000000000011;
          char v12 = "canvasElementType";
          goto LABEL_74;
        case 2:
          BOOL v11 = 0xD000000000000016;
          char v12 = "canvasElementEventType";
          goto LABEL_74;
        case 3:
          uint64_t v10 = 0xE300000000000000;
          if (v8 != 6579297) {
            goto LABEL_76;
          }
          goto LABEL_75;
        case 4:
          uint64_t v10 = 0xE600000000000000;
          if (v8 != 0x65766F6D6572) {
            goto LABEL_76;
          }
          goto LABEL_75;
        case 5:
          BOOL v11 = 0xD00000000000002ALL;
          char v12 = "com.apple.paperkit.selection.selectionType";
          goto LABEL_74;
        case 6:
          uint64_t v13 = 0x6F697463656C6573;
          unint64_t v14 = 0x657079546ELL;
          goto LABEL_66;
        case 7:
          uint64_t v10 = 0xE300000000000000;
          if (v8 != 7364980) {
            goto LABEL_76;
          }
          goto LABEL_75;
        case 8:
          uint64_t v10 = 0xE500000000000000;
          if (v8 != 0x6F7373616CLL) {
            goto LABEL_76;
          }
          goto LABEL_75;
        case 9:
          BOOL v11 = 0xD000000000000028;
          char v12 = "com.apple.paperkit.selection.contentType";
          goto LABEL_74;
        case 10:
          uint64_t v10 = 0xEB00000000657079;
          if (v8 != 0x54746E65746E6F63) {
            goto LABEL_76;
          }
          goto LABEL_75;
        case 11:
          uint64_t v10 = 0xED0000746E656D65;
          goto LABEL_50;
        case 12:
          uint64_t v10 = 0xEE0073746E656D65;
LABEL_50:
          if (v8 != 0x6C457361766E6163) {
            goto LABEL_76;
          }
          goto LABEL_75;
        case 13:
          uint64_t v10 = 0xE500000000000000;
          if (v8 != 0x646578696DLL) {
            goto LABEL_76;
          }
          goto LABEL_75;
        case 14:
          BOOL v11 = 0xD00000000000001ELL;
          char v12 = "com.apple.paperkit.dragAndDrop";
          goto LABEL_74;
        case 15:
          uint64_t v10 = 0xEF65707954706F72;
          if (v8 != 0x44646E4167617264) {
            goto LABEL_76;
          }
          goto LABEL_75;
        case 16:
          uint64_t v10 = 0xEB0000000065746FLL;
          if (v8 != 0x4E6564697374756FLL) {
            goto LABEL_76;
          }
          goto LABEL_75;
        case 17:
          BOOL v11 = 0xD00000000000001DLL;
          char v12 = "insideNoteFromPaperAttachment";
          goto LABEL_74;
        case 18:
          BOOL v11 = 0xD000000000000018;
          char v12 = "insideNoteFromInlineNote";
          goto LABEL_74;
        case 19:
          BOOL v11 = 0xD00000000000001ELL;
          char v12 = "com.apple.paperkit.didOpenLink";
          goto LABEL_74;
        case 20:
          uint64_t v10 = 0xE900000000000074;
          if (v8 != 0x6E756F436E65706FLL) {
            goto LABEL_76;
          }
          goto LABEL_75;
        case 21:
          char v12 = "com.apple.paperkit.didSelectLink";
          goto LABEL_74;
        case 22:
          uint64_t v13 = 0x64657463656C6573;
          unint64_t v14 = 0x746E756F43;
LABEL_66:
          uint64_t v10 = v14 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
          if (v8 != v13) {
            goto LABEL_76;
          }
          goto LABEL_75;
        case 23:
          char v12 = "com.apple.paperkit.didInsertLink";
          goto LABEL_74;
        case 24:
          BOOL v11 = 0x4C6464416D6F7266;
          uint64_t v10 = 0xEF756E654D6B6E69;
          goto LABEL_70;
        case 25:
          BOOL v11 = 0xD000000000000028;
          char v12 = "com.apple.paperkit.didPresentAddLinkMenu";
          goto LABEL_74;
        case 26:
          BOOL v11 = 0xD000000000000013;
          char v12 = "displayedLinksCount";
LABEL_74:
          uint64_t v10 = (unint64_t)(v12 - 32) | 0x8000000000000000;
          if (v8 == v11) {
            goto LABEL_75;
          }
          goto LABEL_76;
        default:
LABEL_70:
          if (v8 != v11) {
            goto LABEL_76;
          }
LABEL_75:
          if (v7 == v10)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_76:
          uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v15) {
            return v4;
          }
          uint64_t v4 = (v4 + 1) & v6;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for NSObject(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    unint64_t v8 = a2;
    uint64_t v10 = ~v5;
    unint64_t v80 = HIDWORD(a1);
    size_t v86 = HIDWORD(a1) - (int)a1;
    uint64_t v87 = ~v5;
    BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v85 = v11;
    unint64_t v88 = a2 >> 62;
    uint64_t v83 = v3 + 64;
    uint64_t v84 = (int)a1;
    uint64_t v81 = a1 >> 32;
    uint64_t v79 = (a1 >> 32) - (int)a1;
    unint64_t v89 = a2 >> 62;
    size_t __n = BYTE6(a2);
    while (1)
    {
      char v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
          }
          uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
          outlined copy of Data._Representation(v14, v13);
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_14;
          }
          goto LABEL_122;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      size_t v18 = __n;
      switch(v89)
      {
        case 1uLL:
          size_t v18 = v86;
          if (v85) {
            goto LABEL_123;
          }
          goto LABEL_19;
        case 2uLL:
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v19 = *(void *)(a1 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          size_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_124;
        case 3uLL:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_119;
        default:
LABEL_19:
          if (v15 == v18)
          {
            if (v15 < 1)
            {
LABEL_119:
              outlined consume of Data._Representation(v14, v13);
              return v6;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_125;
                }
                uint64_t v26 = __DataStorage._bytes.getter();
                if (v26)
                {
                  uint64_t v27 = v26;
                  uint64_t v28 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v14, v28)) {
                    goto LABEL_127;
                  }
                  char v29 = (const void *)(v27 + (int)v14 - v28);
                }
                else
                {
                  char v29 = 0;
                }
                __DataStorage._length.getter();
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = v8;
                  BYTE2(__s1[1]) = BYTE2(v8);
                  BYTE3(__s1[1]) = BYTE3(v8);
                  BYTE4(__s1[1]) = BYTE4(v8);
                  BYTE5(__s1[1]) = BYTE5(v8);
                  if (!v29) {
                    goto LABEL_155;
                  }
                  int v46 = memcmp(v29, __s1, __n);
LABEL_102:
                  outlined consume of Data._Representation(v14, v13);
                  uint64_t v10 = v87;
                  if (!v46) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_136;
                  }
                  swift_retain();
                  uint64_t v47 = __DataStorage._bytes.getter();
                  if (v47)
                  {
                    uint64_t v48 = __DataStorage._offset.getter();
                    if (__OFSUB__(v84, v48)) {
                      goto LABEL_143;
                    }
                    v47 += v84 - v48;
                  }
                  uint64_t v49 = __DataStorage._length.getter();
                  size_t v50 = v79;
                  if (v49 < v79) {
                    size_t v50 = v49;
                  }
                  if (!v29) {
                    goto LABEL_148;
                  }
                  if (!v47) {
                    goto LABEL_149;
                  }
                  size_t v39 = v50;
                  uint64_t v40 = v29;
                  uint64_t v38 = (const void *)v47;
LABEL_71:
                  int v46 = memcmp(v40, v38, v39);
                  outlined consume of Data._Representation(a1, v8);
                  goto LABEL_102;
                }
                uint64_t v69 = *(void *)(a1 + 16);
                uint64_t v78 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v70 = __DataStorage._bytes.getter();
                if (v70)
                {
                  uint64_t v71 = v70;
                  uint64_t v72 = __DataStorage._offset.getter();
                  if (__OFSUB__(v69, v72)) {
                    goto LABEL_142;
                  }
                  uint64_t v73 = (const void *)(v71 + v69 - v72);
                }
                else
                {
                  uint64_t v73 = 0;
                }
                if (__OFSUB__(v78, v69)) {
                  goto LABEL_137;
                }
                uint64_t v74 = __DataStorage._length.getter();
                if (v74 >= v78 - v69) {
                  size_t v75 = v78 - v69;
                }
                else {
                  size_t v75 = v74;
                }
                if (!v29) {
                  goto LABEL_156;
                }
                uint64_t v4 = v83;
                if (!v73) {
                  goto LABEL_157;
                }
                int v62 = memcmp(v29, v73, v75);
LABEL_115:
                swift_release();
LABEL_116:
                swift_release();
                outlined consume of Data._Representation(v14, v13);
                unint64_t v8 = a2;
                uint64_t v10 = v87;
                if (!v62) {
                  return v6;
                }
                break;
              case 2uLL:
                uint64_t v30 = *(void *)(v14 + 16);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_126;
                  }
                  long long v34 = (const void *)(v32 + v30 - v33);
                }
                else
                {
                  long long v34 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v4 = v83;
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LODWORD(__s1[1]) = a2;
                  WORD2(__s1[1]) = WORD2(a2);
                  if (!v34) {
                    goto LABEL_152;
                  }
                  int v62 = memcmp(v34, __s1, __n);
                  swift_release();
                  goto LABEL_116;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_130;
                  }
                  swift_retain();
                  uint64_t v42 = (char *)__DataStorage._bytes.getter();
                  if (v42)
                  {
                    uint64_t v43 = __DataStorage._offset.getter();
                    if (__OFSUB__(v84, v43)) {
                      goto LABEL_141;
                    }
                    v42 += v84 - v43;
                  }
                  uint64_t v44 = __DataStorage._length.getter();
                  size_t v45 = v79;
                  if (v44 < v79) {
                    size_t v45 = v44;
                  }
                  if (!v34) {
                    goto LABEL_146;
                  }
                  if (!v42) {
                    goto LABEL_147;
                  }
                  int v46 = memcmp(v34, v42, v45);
                  unint64_t v8 = a2;
                  outlined consume of Data._Representation(a1, a2);
                  swift_release();
                  swift_release();
                  goto LABEL_102;
                }
                uint64_t v63 = *(void *)(a1 + 16);
                uint64_t v77 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v64 = (char *)__DataStorage._bytes.getter();
                if (v64)
                {
                  uint64_t v65 = __DataStorage._offset.getter();
                  if (__OFSUB__(v63, v65)) {
                    goto LABEL_140;
                  }
                  v64 += v63 - v65;
                }
                BOOL v21 = __OFSUB__(v77, v63);
                int64_t v66 = v77 - v63;
                if (v21) {
                  goto LABEL_135;
                }
                uint64_t v67 = __DataStorage._length.getter();
                if (v67 >= v66) {
                  size_t v68 = v66;
                }
                else {
                  size_t v68 = v67;
                }
                if (!v34) {
                  goto LABEL_153;
                }
                uint64_t v4 = v83;
                if (!v64) {
                  goto LABEL_154;
                }
                int v62 = memcmp(v34, v64, v68);
                swift_release();
                swift_release();
                goto LABEL_115;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v88) {
                  goto LABEL_45;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_129;
                  }
                  outlined copy of Data._Representation(a1, v8);
                  uint64_t v35 = __DataStorage._bytes.getter();
                  if (!v35) {
                    goto LABEL_145;
                  }
                  uint64_t v23 = v35;
                  uint64_t v36 = __DataStorage._offset.getter();
                  uint64_t v25 = v84 - v36;
                  if (__OFSUB__(v84, v36)) {
                    goto LABEL_134;
                  }
LABEL_41:
                  uint64_t v37 = __DataStorage._length.getter();
                  uint64_t v38 = (const void *)(v23 + v25);
                  if (v37 >= v79) {
                    size_t v39 = v79;
                  }
                  else {
                    size_t v39 = v37;
                  }
                  uint64_t v40 = __s1;
                  goto LABEL_71;
                }
                uint64_t v57 = *(void *)(a1 + 16);
                uint64_t v58 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v59 = __DataStorage._offset.getter();
                  if (__OFSUB__(v57, v59)) {
                    goto LABEL_139;
                  }
                  v53 += v57 - v59;
                }
                BOOL v21 = __OFSUB__(v58, v57);
                int64_t v55 = v58 - v57;
                if (v21) {
                  goto LABEL_132;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_151;
                }
LABEL_83:
                if (v56 >= v55) {
                  size_t v60 = v55;
                }
                else {
                  size_t v60 = v56;
                }
                int v61 = memcmp(__s1, v53, v60);
                swift_release();
                swift_release();
                outlined consume of Data._Representation(v14, v13);
                uint64_t v4 = v83;
                uint64_t v10 = v87;
                if (!v61) {
                  return v6;
                }
                break;
              default:
                __s1[0] = v14;
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                if (!v88)
                {
LABEL_45:
                  __int16 __s2 = a1;
                  char v92 = BYTE2(a1);
                  char v93 = BYTE3(a1);
                  char v94 = v80;
                  char v95 = BYTE5(a1);
                  char v96 = BYTE6(a1);
                  char v97 = HIBYTE(a1);
                  __int16 v98 = v8;
                  char v99 = BYTE2(v8);
                  char v100 = BYTE3(v8);
                  char v101 = BYTE4(v8);
                  char v102 = BYTE5(v8);
                  int v41 = memcmp(__s1, &__s2, __n);
                  outlined consume of Data._Representation(v14, v13);
                  if (!v41) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_128;
                  }
                  outlined copy of Data._Representation(a1, v8);
                  uint64_t v22 = __DataStorage._bytes.getter();
                  if (!v22)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_145:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
                    JUMPOUT(0x20C315E44);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = __DataStorage._offset.getter();
                  uint64_t v25 = v84 - v24;
                  if (__OFSUB__(v84, v24)) {
                    goto LABEL_133;
                  }
                  goto LABEL_41;
                }
                uint64_t v51 = *(void *)(a1 + 16);
                uint64_t v52 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v51, v54)) {
                    goto LABEL_138;
                  }
                  v53 += v51 - v54;
                }
                BOOL v21 = __OFSUB__(v52, v51);
                int64_t v55 = v52 - v51;
                if (v21) {
                  goto LABEL_131;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_150;
                }
                goto LABEL_83;
            }
          }
          else
          {
LABEL_7:
            outlined consume of Data._Representation(v14, v13);
          }
          unint64_t v6 = (v6 + 1) & v10;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          break;
      }
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for PDFPageID();
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    while (1)
    {
      outlined init with copy of PKStrokeProperties(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      if (*v8 == *a1 && (static CRAsset.== infix(_:_:)() & 1) != 0) {
        break;
      }
      outlined destroy of PKStrokeProperties((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        return v10;
      }
    }
    outlined destroy of PKStrokeProperties((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  }
  return v10;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      lazy protocol witness table accessor for type UUID and conformance UUID(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = a2;
  uint64_t v42 = type metadata accessor for AnyCRValue();
  uint64_t v3 = *(void *)(v42 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v42);
  uint64_t v40 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  size_t v39 = (char *)&v31 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, AnyCRValue>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = result;
  int64_t v9 = 0;
  uint64_t v43 = a1;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v11 = a1 + 64;
  uint64_t v10 = v12;
  uint64_t v13 = 1 << *(unsigned char *)(v11 - 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v10;
  uint64_t v32 = v11;
  int64_t v33 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v36 = v3 + 8;
  uint64_t v37 = v3 + 16;
  uint64_t v41 = v3;
  uint64_t v34 = v3 + 32;
  uint64_t v35 = result + 64;
  uint64_t v38 = result;
  uint64_t v16 = v3;
  uint64_t v17 = v42;
  uint64_t v18 = v40;
  if ((v14 & v10) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  int64_t v45 = v9;
  for (unint64_t i = v19 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    uint64_t v25 = *(void *)(*(void *)(v43 + 48) + 8 * i);
    unint64_t v26 = *(void *)(v16 + 72) * i;
    uint64_t v27 = v39;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v39, *(void *)(v43 + 56) + v26, v17);
    AnyCRValue.copy(renamingReferences:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v27, v17);
    *(void *)(v35 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v8 = v38;
    *(void *)(*(void *)(v38 + 48) + 8 * i) = v25;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(void *)(v8 + 56) + v26, v18, v17);
    uint64_t v28 = *(void *)(v8 + 16);
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    *(void *)(v8 + 16) = v30;
    int64_t v9 = v45;
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_24;
    }
    if (v21 >= v33) {
      return v8;
    }
    unint64_t v22 = *(void *)(v32 + 8 * v21);
    int64_t v23 = v9 + 1;
    if (!v22)
    {
      int64_t v23 = v9 + 2;
      if (v9 + 2 >= v33) {
        return v8;
      }
      unint64_t v22 = *(void *)(v32 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v9 + 3;
        if (v9 + 3 >= v33) {
          return v8;
        }
        unint64_t v22 = *(void *)(v32 + 8 * v23);
        if (!v22) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v15 = (v22 - 1) & v22;
    int64_t v45 = v23;
  }
  uint64_t v24 = v9 + 4;
  if (v9 + 4 >= v33) {
    return v8;
  }
  unint64_t v22 = *(void *)(v32 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v9 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v33) {
      return v8;
    }
    unint64_t v22 = *(void *)(v32 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;

  uint64_t v44 = a2;
  uint64_t v42 = type metadata accessor for AnyCRValue();
  uint64_t v3 = *(void *)(v42 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v42);
  uint64_t v40 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  size_t v39 = (char *)&v31 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, AnyCRValue>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = result;
  int64_t v9 = 0;
  uint64_t v43 = a1;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v11 = a1 + 64;
  uint64_t v10 = v12;
  uint64_t v13 = 1 << *(unsigned char *)(v11 - 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v10;
  uint64_t v32 = v11;
  int64_t v33 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v36 = v3 + 8;
  uint64_t v37 = v3 + 16;
  uint64_t v41 = v3;
  uint64_t v34 = v3 + 32;
  uint64_t v35 = result + 64;
  uint64_t v38 = result;
  uint64_t v16 = v3;
  uint64_t v17 = v42;
  uint64_t v18 = v40;
  if ((v14 & v10) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  int64_t v45 = v9;
  for (unint64_t i = v19 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    uint64_t v25 = *(void *)(*(void *)(v43 + 48) + 8 * i);
    unint64_t v26 = *(void *)(v16 + 72) * i;
    uint64_t v27 = v39;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v39, *(void *)(v43 + 56) + v26, v17);
    CRType.copy(renamingReferences:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v27, v17);
    *(void *)(v35 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v8 = v38;
    *(void *)(*(void *)(v38 + 48) + 8 * i) = v25;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(void *)(v8 + 56) + v26, v18, v17);
    uint64_t v28 = *(void *)(v8 + 16);
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    *(void *)(v8 + 16) = v30;
    int64_t v9 = v45;
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_24;
    }
    if (v21 >= v33) {
      return v8;
    }
    unint64_t v22 = *(void *)(v32 + 8 * v21);
    int64_t v23 = v9 + 1;
    if (!v22)
    {
      int64_t v23 = v9 + 2;
      if (v9 + 2 >= v33) {
        return v8;
      }
      unint64_t v22 = *(void *)(v32 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v9 + 3;
        if (v9 + 3 >= v33) {
          return v8;
        }
        unint64_t v22 = *(void *)(v32 + 8 * v23);
        if (!v22) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v15 = (v22 - 1) & v22;
    int64_t v45 = v23;
  }
  uint64_t v24 = v9 + 4;
  if (v9 + 4 >= v33) {
    return v8;
  }
  unint64_t v22 = *(void *)(v32 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v9 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v33) {
      return v8;
    }
    unint64_t v22 = *(void *)(v32 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, char *, uint64_t);
  char *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int64_t v45;

  uint64_t v43 = a2;
  uint64_t v3 = type metadata accessor for CRKeyPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v44 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v40 = (char *)&v33 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Int>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v9 = (void *)result;
  uint64_t v10 = 0;
  uint64_t v41 = v4;
  uint64_t v42 = a1;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v12 = a1 + 64;
  uint64_t v11 = v13;
  uint64_t v14 = 1 << *(unsigned char *)(v12 - 32);
  unint64_t v15 = -1;
  if (v14 < 64) {
    unint64_t v15 = ~(-1 << v14);
  }
  uint64_t v16 = v15 & v11;
  uint64_t v34 = v12;
  uint64_t v35 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v38 = v4 + 32;
  size_t v39 = v4 + 16;
  uint64_t v36 = (void *)result;
  uint64_t v37 = result + 64;
  if ((v15 & v11) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  int64_t v45 = v10;
  for (unint64_t i = v17 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v21 << 6))
  {
    uint64_t v24 = v41;
    int64_t v23 = v42;
    uint64_t v25 = *(void *)(v41 + 72) * i;
    unint64_t v26 = v40;
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v40, *(void *)(v42 + 48) + v25, v3);
    uint64_t v27 = *(void *)(*(void *)(v23 + 56) + 8 * i);
    uint64_t v28 = *(uint64_t (**)(char *, char *, uint64_t))(v24 + 32);
    BOOL v29 = v44;
    uint64_t result = v28(v44, v26, v3);
    if (v27 >= v43)
    {
      uint64_t v30 = __OFSUB__(v27--, 1);
      if (v30) {
        goto LABEL_27;
      }
      BOOL v29 = v44;
    }
    int64_t v9 = v36;
    *(void *)(v37 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = v28((char *)(v9[6] + v25), v29, v3);
    *(void *)(v9[7] + 8 * i) = v27;
    uint64_t v31 = v9[2];
    uint64_t v30 = __OFADD__(v31, 1);
    uint64_t v32 = v31 + 1;
    if (v30)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    _OWORD v9[2] = v32;
    uint64_t v10 = v45;
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    unint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_28;
    }
    if (v19 >= v35) {
      return (uint64_t)v9;
    }
    uint64_t v20 = *(void *)(v34 + 8 * v19);
    int64_t v21 = v10 + 1;
    if (!v20)
    {
      int64_t v21 = v10 + 2;
      if (v10 + 2 >= v35) {
        return (uint64_t)v9;
      }
      uint64_t v20 = *(void *)(v34 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v10 + 3;
        if (v10 + 3 >= v35) {
          return (uint64_t)v9;
        }
        uint64_t v20 = *(void *)(v34 + 8 * v21);
        if (!v20) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v16 = (v20 - 1) & v20;
    int64_t v45 = v21;
  }
  unint64_t v22 = v10 + 4;
  if (v10 + 4 >= v35) {
    return (uint64_t)v9;
  }
  uint64_t v20 = *(void *)(v34 + 8 * v22);
  if (v20)
  {
    int64_t v21 = v10 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v21 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v21 >= v35) {
      return (uint64_t)v9;
    }
    uint64_t v20 = *(void *)(v34 + 8 * v21);
    ++v22;
    if (v20) {
      goto LABEL_18;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, char *, uint64_t);
  char *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int64_t v45;

  uint64_t v43 = a2;
  uint64_t v3 = type metadata accessor for CRKeyPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v44 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v40 = (char *)&v33 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Int>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v9 = (void *)result;
  uint64_t v10 = 0;
  uint64_t v41 = v4;
  uint64_t v42 = a1;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v12 = a1 + 64;
  uint64_t v11 = v13;
  uint64_t v14 = 1 << *(unsigned char *)(v12 - 32);
  unint64_t v15 = -1;
  if (v14 < 64) {
    unint64_t v15 = ~(-1 << v14);
  }
  uint64_t v16 = v15 & v11;
  uint64_t v34 = v12;
  uint64_t v35 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v38 = v4 + 32;
  size_t v39 = v4 + 16;
  uint64_t v36 = (void *)result;
  uint64_t v37 = result + 64;
  if ((v15 & v11) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  int64_t v45 = v10;
  for (unint64_t i = v17 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v21 << 6))
  {
    uint64_t v24 = v41;
    int64_t v23 = v42;
    uint64_t v25 = *(void *)(v41 + 72) * i;
    unint64_t v26 = v40;
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v40, *(void *)(v42 + 48) + v25, v3);
    uint64_t v27 = *(void *)(*(void *)(v23 + 56) + 8 * i);
    uint64_t v28 = *(uint64_t (**)(char *, char *, uint64_t))(v24 + 32);
    BOOL v29 = v44;
    uint64_t result = v28(v44, v26, v3);
    if (v27 >= v43)
    {
      uint64_t v30 = __OFADD__(v27++, 1);
      if (v30) {
        goto LABEL_27;
      }
      BOOL v29 = v44;
    }
    int64_t v9 = v36;
    *(void *)(v37 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = v28((char *)(v9[6] + v25), v29, v3);
    *(void *)(v9[7] + 8 * i) = v27;
    uint64_t v31 = v9[2];
    uint64_t v30 = __OFADD__(v31, 1);
    uint64_t v32 = v31 + 1;
    if (v30)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    _OWORD v9[2] = v32;
    uint64_t v10 = v45;
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    unint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_28;
    }
    if (v19 >= v35) {
      return (uint64_t)v9;
    }
    uint64_t v20 = *(void *)(v34 + 8 * v19);
    int64_t v21 = v10 + 1;
    if (!v20)
    {
      int64_t v21 = v10 + 2;
      if (v10 + 2 >= v35) {
        return (uint64_t)v9;
      }
      uint64_t v20 = *(void *)(v34 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v10 + 3;
        if (v10 + 3 >= v35) {
          return (uint64_t)v9;
        }
        uint64_t v20 = *(void *)(v34 + 8 * v21);
        if (!v20) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v16 = (v20 - 1) & v20;
    int64_t v45 = v21;
  }
  unint64_t v22 = v10 + 4;
  if (v10 + 4 >= v35) {
    return (uint64_t)v9;
  }
  uint64_t v20 = *(void *)(v34 + 8 * v22);
  if (v20)
  {
    int64_t v21 = v10 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v21 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v21 >= v35) {
      return (uint64_t)v9;
    }
    uint64_t v20 = *(void *)(v34 + 8 * v21);
    ++v22;
    if (v20) {
      goto LABEL_18;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v37 = a2;
  uint64_t v3 = type metadata accessor for PDFPageID();
  uint64_t v35 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v38 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v34 = (uint64_t)&v31 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFPageID, Int>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = (void *)result;
  int64_t v9 = 0;
  uint64_t v36 = a1;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v11 = a1 + 64;
  uint64_t v10 = v12;
  uint64_t v13 = 1 << *(unsigned char *)(v11 - 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v10;
  uint64_t v32 = v11;
  int64_t v33 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v16 = result + 64;
  if ((v14 & v10) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v17 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v17 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v9 << 6))
  {
    unint64_t v22 = v36;
    int64_t v23 = *(void *)(v35 + 72) * i;
    uint64_t v24 = v34;
    outlined init with copy of PageId(*(void *)(v36 + 48) + v23, v34, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * i);
    unint64_t v26 = v24;
    uint64_t v27 = v38;
    uint64_t result = outlined init with take of PageId(v26, v38, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    if (v25 >= v37)
    {
      uint64_t v28 = __OFSUB__(v25--, 1);
      if (v28) {
        goto LABEL_27;
      }
      uint64_t v27 = v38;
    }
    *(void *)(v16 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = outlined init with take of PageId(v27, v8[6] + v23, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    *(void *)(v8[7] + 8 * i) = v25;
    BOOL v29 = v8[2];
    uint64_t v28 = __OFADD__(v29, 1);
    uint64_t v30 = v29 + 1;
    if (v28)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v8[2] = v30;
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    unint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_28;
    }
    if (v19 >= v33) {
      return (uint64_t)v8;
    }
    uint64_t v20 = *(void *)(v32 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v33) {
        return (uint64_t)v8;
      }
      uint64_t v20 = *(void *)(v32 + 8 * v9);
      if (!v20)
      {
        int64_t v9 = v19 + 2;
        if (v19 + 2 >= v33) {
          return (uint64_t)v8;
        }
        uint64_t v20 = *(void *)(v32 + 8 * v9);
        if (!v20) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v15 = (v20 - 1) & v20;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v33) {
    return (uint64_t)v8;
  }
  uint64_t v20 = *(void *)(v32 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v33) {
      return (uint64_t)v8;
    }
    uint64_t v20 = *(void *)(v32 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_18;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v37 = a2;
  uint64_t v3 = type metadata accessor for PDFPageID();
  uint64_t v35 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v38 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v34 = (uint64_t)&v31 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFPageID, Int>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = (void *)result;
  int64_t v9 = 0;
  uint64_t v36 = a1;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v11 = a1 + 64;
  uint64_t v10 = v12;
  uint64_t v13 = 1 << *(unsigned char *)(v11 - 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v10;
  uint64_t v32 = v11;
  int64_t v33 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v16 = result + 64;
  if ((v14 & v10) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v17 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v17 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v9 << 6))
  {
    unint64_t v22 = v36;
    int64_t v23 = *(void *)(v35 + 72) * i;
    uint64_t v24 = v34;
    outlined init with copy of PageId(*(void *)(v36 + 48) + v23, v34, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * i);
    unint64_t v26 = v24;
    uint64_t v27 = v38;
    uint64_t result = outlined init with take of PageId(v26, v38, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    if (v25 >= v37)
    {
      uint64_t v28 = __OFADD__(v25++, 1);
      if (v28) {
        goto LABEL_27;
      }
      uint64_t v27 = v38;
    }
    *(void *)(v16 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = outlined init with take of PageId(v27, v8[6] + v23, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    *(void *)(v8[7] + 8 * i) = v25;
    BOOL v29 = v8[2];
    uint64_t v28 = __OFADD__(v29, 1);
    uint64_t v30 = v29 + 1;
    if (v28)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v8[2] = v30;
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    unint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_28;
    }
    if (v19 >= v33) {
      return (uint64_t)v8;
    }
    uint64_t v20 = *(void *)(v32 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v33) {
        return (uint64_t)v8;
      }
      uint64_t v20 = *(void *)(v32 + 8 * v9);
      if (!v20)
      {
        int64_t v9 = v19 + 2;
        if (v19 + 2 >= v33) {
          return (uint64_t)v8;
        }
        uint64_t v20 = *(void *)(v32 + 8 * v9);
        if (!v20) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v15 = (v20 - 1) & v20;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v33) {
    return (uint64_t)v8;
  }
  uint64_t v20 = *(void *)(v32 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v33) {
      return (uint64_t)v8;
    }
    uint64_t v20 = *(void *)(v32 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_18;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

double specialized CRRegister<>.bounds(in:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v105 = a1;
  uint64_t v106 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v6 - 8);
  Class isa = (objc_class *)((char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v81 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  char v95 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v82 = (char *)&v81 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v11 - 8);
  char v100 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v15 = (char *)&v81 - v14;
  uint64_t v103 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v103);
  char v101 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v107 = (char *)&v81 - v18;
  MEMORY[0x270FA5388](v19);
  __int16 v98 = (char *)&v81 - v20;
  MEMORY[0x270FA5388](v21);
  int64_t v23 = (char *)&v81 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v96 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  char v99 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v81 - v27;
  uint64_t v91 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v91);
  char v92 = (char *)&v81 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  char v93 = *(void **)(v94 - 8);
  MEMORY[0x270FA5388](v94);
  uint64_t v90 = (char *)&v81 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v31 - 8);
  uint64_t v102 = (uint64_t)&v81 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v34 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v36 = (char *)&v81 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v37 - 8);
  size_t v39 = (char *)&v81 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v89);
  unint64_t v88 = (char *)&v81 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v41);
  uint64_t v104 = (uint64_t)&v81 - v42;
  uint64_t v109 = (char *)a3;
  v110 = (void *)v106;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v108);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, v105, a3);
  size_t v86 = v110;
  uint64_t v87 = (uint64_t)v109;
  BOOL v85 = __swift_project_boxed_opaque_existential_1(v108, (uint64_t)v109);
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v106 = a2;
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  uint64_t v44 = (uint64_t)v39;
  int64_t v45 = *(void (**)(char *, uint64_t))(v34 + 8);
  uint64_t v105 = (void *)v33;
  v45(v36, v33);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v44, 1, v46) == 1)
  {
    uint64_t v48 = v95;
    outlined destroy of StocksKitCurrencyCache.Provider?(v44, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    __swift_project_boxed_opaque_existential_1(v108, (uint64_t)v109);
    CRRegister.value.getter();
    uint64_t v49 = (uint64_t)isa;
    size_t v50 = v105;
    SharedTagged_2.tagged2.getter();
    v45(v36, (uint64_t)v50);
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
    uint64_t v52 = *(void *)(v51 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v49, 1, v51) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v49, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
      double v53 = *MEMORY[0x263F001A0];
    }
    else
    {
      Ref.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v49, v51);
      uint64_t v72 = v81;
      uint64_t v73 = v82;
      uint64_t v74 = v83;
      uint64_t v75 = (*(uint64_t (**)(char *, char *, uint64_t))(v81 + 32))(v82, v48, v83);
      double v76 = MEMORY[0x270FA5388](v75);
      *(&v81 - 2) = (uint64_t)v108;
      double v53 = specialized Sequence.reduce<A>(_:_:)((void (*)(void *__return_ptr, double *, char *))partial apply for closure #1 in CRRegister<>.bounds(in:), (uint64_t)(&v81 - 4), v76, v77, v78, v79);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v74);
    }
  }
  else
  {
    uint64_t v54 = (uint64_t)v88;
    Ref.subscript.getter();
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v44, v46);
    outlined init with take of PKStrokeStruct(v54, v104, type metadata accessor for PKStrokeStruct);
    uint64_t v106 = (uint64_t)v110;
    uint64_t v105 = __swift_project_boxed_opaque_existential_1(v108, (uint64_t)v109);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    uint64_t v55 = (uint64_t)v92;
    CRRegister.wrappedValue.getter();
    uint64_t v56 = v93;
    uint64_t v57 = v90;
    uint64_t v58 = v94;
    ((void (*)(char *, uint64_t, uint64_t))v93[2])(v90, v55 + *(int *)(v91 + 32), v94);
    outlined destroy of PKStrokeProperties(v55, type metadata accessor for PKStrokeProperties);
    Ref.subscript.getter();
    ((void (*)(char *, uint64_t))v56[1])(v57, v58);
    Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
    uint64_t v105 = v110;
    uint64_t v106 = (uint64_t)v109;
    uint64_t v94 = (uint64_t)__swift_project_boxed_opaque_existential_1(v108, (uint64_t)v109);
    char v95 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    CRRegister.wrappedValue.getter();
    uint64_t v59 = (unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48);
    size_t v60 = (void (**)(char *, uint64_t))(v96 + 8);
    for (unint64_t i = (void (**)(char *, char *, uint64_t))(v96 + 32); ; (*i)(v28, v15, v24))
    {
      __swift_project_boxed_opaque_existential_1(v108, (uint64_t)v109);
      Ref.subscript.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties((uint64_t)v23, type metadata accessor for PKStrokeInheritedProperties);
      int v62 = *v59;
      if ((*v59)(v15, 1, v24) == 1) {
        break;
      }
      (*v60)(v28, v24);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    uint64_t v63 = (uint64_t)v98;
    Ref.subscript.getter();
    uint64_t v105 = *v60;
    uint64_t v106 = (uint64_t)v60;
    ((void (*)(char *, uint64_t))v105)(v28, v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
    CRRegister.wrappedValue.getter();
    uint64_t v96 = v111;
    outlined destroy of PKStrokeProperties(v63, type metadata accessor for PKStrokeInheritedProperties);
    uint64_t v94 = (uint64_t)v110;
    __int16 v98 = v109;
    char v93 = __swift_project_boxed_opaque_existential_1(v108, (uint64_t)v109);
    uint64_t v64 = v99;
    CRRegister.wrappedValue.getter();
    uint64_t v65 = (uint64_t)v100;
    uint64_t v66 = (uint64_t)v107;
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v108, (uint64_t)v109);
      Ref.subscript.getter();
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties(v66, type metadata accessor for PKStrokeInheritedProperties);
      if (v62((char *)v65, 1, v24) == 1) {
        break;
      }
      ((void (*)(char *, uint64_t))v105)(v64, v24);
      (*i)(v64, (char *)v65, v24);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v65, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    uint64_t v67 = (uint64_t)v101;
    Ref.subscript.getter();
    ((void (*)(char *, uint64_t))v105)(v64, v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties(v67, type metadata accessor for PKStrokeInheritedProperties);
    v113.value.super.Class isa = (Class)&v111;
    size_t v68 = isa;
    v112.value.super.Class isa = isa;
    uint64_t v69 = (void *)v96;
    v112.is_nil = v96;
    uint64_t v70 = v104;
    *(void *)&double v53 = (unint64_t)PKStrokeStruct.bounds(path:ink:transform:)(v112, v113, v71);

    outlined destroy of PKStrokeProperties(v102, type metadata accessor for PKStrokePathStruct);
    outlined destroy of PKStrokeProperties(v70, type metadata accessor for PKStrokeStruct);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
  return v53;
}

BOOL specialized static PKStrokeStructCache.BoundsParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a2, (uint64_t)v18, &demangling cache variable for type metadata for PKStrokePath?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v18, (uint64_t)&v19, &demangling cache variable for type metadata for PKStrokePath?);
  uint64_t v4 = v19;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a1, (uint64_t)v17, &demangling cache variable for type metadata for PKStrokePath?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v17, (uint64_t)&v20, &demangling cache variable for type metadata for PKStrokePath?);
  if (v20)
  {
    BOOL result = 0;
    if (!v4 || v20 != v4) {
      return result;
    }
  }
  else if (v4)
  {
    return 0;
  }
  long long v6 = *(_OWORD *)(a1 + 24);
  long long v14 = *(_OWORD *)(a1 + 8);
  long long v15 = v6;
  long long v16 = *(_OWORD *)(a1 + 40);
  long long v7 = *(_OWORD *)(a2 + 24);
  long long v11 = *(_OWORD *)(a2 + 8);
  long long v12 = v7;
  long long v13 = *(_OWORD *)(a2 + 40);
  if ((static CGAffineTransform.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a2 + 56, (uint64_t)v10, &demangling cache variable for type metadata for PKInk?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v10, (uint64_t)&v21, &demangling cache variable for type metadata for PKInk?);
  unint64_t v8 = v21;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a1 + 56, (uint64_t)&v9, &demangling cache variable for type metadata for PKInk?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v9, (uint64_t)&v22, &demangling cache variable for type metadata for PKInk?);
  BOOL result = __PAIR128__(v22, v8) == 0;
  if (v22)
  {
    if (v8) {
      return v22 == v8;
    }
    else {
      return __PAIR128__(v22, 0) == 0;
    }
  }
  return result;
}

uint64_t specialized static PKStrokeProperties.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = &v89[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  char v99 = &v89[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  long long v12 = &v89[-v11];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = &v89[-v18];
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  unint64_t v22 = &v89[-v21];
  MEMORY[0x270FA5388](v20);
  uint64_t v27 = &v89[-v26];
  uint64_t v28 = *a1;
  char v100 = a2;
  if (v28 != *a2) {
    goto LABEL_16;
  }
  uint64_t v96 = v25;
  uint64_t v97 = v24;
  uint64_t v92 = v23;
  char v93 = v7;
  uint64_t v29 = type metadata accessor for PKStrokeProperties(0);
  uint64_t v30 = *(int *)(v29 + 20);
  char v95 = a1;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)a1 + v30, (uint64_t)v27, &demangling cache variable for type metadata for UUID?);
  uint64_t v94 = (int *)v29;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v100 + *(int *)(v29 + 20), (uint64_t)v22, &demangling cache variable for type metadata for UUID?);
  uint64_t v31 = (uint64_t)&v12[*(int *)(v8 + 48)];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v27, (uint64_t)v12, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v22, v31, &demangling cache variable for type metadata for UUID?);
  uint64_t v98 = v5;
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v32((uint64_t)v12, 1, v4) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for UUID?);
    if (v32(v31, 1, v4) == 1)
    {
      uint64_t v91 = v32;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for UUID?);
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v33 = (uint64_t)v12;
LABEL_15:
    outlined destroy of StocksKitCurrencyCache.Provider?(v33, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_16;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v12, (uint64_t)v19, &demangling cache variable for type metadata for UUID?);
  if (v32(v31, 1, v4) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(unsigned char *, uint64_t))(v98 + 8))(v19, v4);
    goto LABEL_7;
  }
  uint64_t v91 = v32;
  uint64_t v34 = v98;
  uint64_t v35 = v93;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v98 + 32))(v93, v31, v4);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  int v90 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v36 = *(void (**)(unsigned char *, uint64_t))(v34 + 8);
  v36(v35, v4);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for UUID?);
  v36(v19, v4);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for UUID?);
  if ((v90 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_9:
  uint64_t v38 = v94;
  uint64_t v37 = v95;
  uint64_t v39 = v97;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v95 + v94[6], v97, &demangling cache variable for type metadata for UUID?);
  uint64_t v40 = v96;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v100 + v38[6], v96, &demangling cache variable for type metadata for UUID?);
  uint64_t v41 = v99;
  uint64_t v42 = (uint64_t)&v99[*(int *)(v8 + 48)];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v39, (uint64_t)v99, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v40, v42, &demangling cache variable for type metadata for UUID?);
  uint64_t v43 = v91;
  if (v91((uint64_t)v41, 1, v4) != 1)
  {
    uint64_t v44 = v92;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v41, v92, &demangling cache variable for type metadata for UUID?);
    if (v43(v42, 1, v4) != 1)
    {
      uint64_t v47 = v98;
      uint64_t v48 = v93;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v98 + 32))(v93, v42, v4);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      size_t v50 = *(void (**)(unsigned char *, uint64_t))(v47 + 8);
      v50(v48, v4);
      outlined destroy of StocksKitCurrencyCache.Provider?(v96, &demangling cache variable for type metadata for UUID?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v97, &demangling cache variable for type metadata for UUID?);
      v50((unsigned char *)v44, v4);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v41, &demangling cache variable for type metadata for UUID?);
      if ((v49 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_19;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v96, &demangling cache variable for type metadata for UUID?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v97, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v44, v4);
    goto LABEL_14;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v40, &demangling cache variable for type metadata for UUID?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for UUID?);
  if (v43(v42, 1, v4) != 1)
  {
LABEL_14:
    uint64_t v33 = (uint64_t)v41;
    goto LABEL_15;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v41, &demangling cache variable for type metadata for UUID?);
LABEL_19:
  if (*(void *)((char *)v37 + v38[7]) != *(void *)((char *)v100 + v38[7])) {
    goto LABEL_16;
  }
  type metadata accessor for PKStrokePathStruct(0);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct);
  if ((static Ref.== infix(_:_:)() & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v51 = v38[9];
  uint64_t v52 = *(void *)((char *)v37 + v51);
  uint64_t v53 = *(void *)((char *)v100 + v51);
  if (v52)
  {
    if (!v53) {
      goto LABEL_16;
    }
    uint64_t v54 = *(void **)(*(void *)(v52 + 16) + 16);
    swift_retain_n();
    swift_retain();
    id v55 = objc_msgSend(v54, sel_rawValue);
    uint64_t v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v58 = v57;

    id v59 = objc_msgSend(*(id *)(*(void *)(v53 + 16) + 16), sel_rawValue);
    uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v62 = v61;

    LOBYTE(v59) = specialized static Data.== infix(_:_:)(v56, v58, v60, v62);
    unint64_t v63 = v62;
    uint64_t v38 = v94;
    outlined consume of Data._Representation(v60, v63);
    unint64_t v64 = v58;
    uint64_t v37 = v95;
    outlined consume of Data._Representation(v56, v64);
    swift_release_n();
    swift_release();
    if ((v59 & 1) == 0) {
      goto LABEL_16;
    }
  }
  else if (v53)
  {
    goto LABEL_16;
  }
  uint64_t v65 = v38[10];
  uint64_t v66 = (long long *)((char *)v37 + v65);
  char v67 = *((unsigned char *)v37 + v65 + 32);
  size_t v68 = (char *)v100 + v65;
  if (v67)
  {
    if (!v68[32]) {
      goto LABEL_16;
    }
  }
  else
  {
    if (v68[32]) {
      goto LABEL_16;
    }
    long long v69 = v66[1];
    long long v70 = *(_OWORD *)v68;
    long long v71 = *((_OWORD *)v68 + 1);
    long long v104 = *v66;
    long long v105 = v69;
    long long v101 = v70;
    long long v102 = v71;
    uint64_t v72 = PKStrokeClipPlane.rawValue.getter();
    unint64_t v74 = v73;
    uint64_t v75 = PKStrokeClipPlane.rawValue.getter();
    unint64_t v77 = v76;
    char v78 = specialized static Data.== infix(_:_:)(v72, v74, v75, v76);
    outlined consume of Data._Representation(v75, v77);
    outlined consume of Data._Representation(v72, v74);
    if ((v78 & 1) == 0) {
      goto LABEL_16;
    }
  }
  uint64_t v79 = v38[11];
  unint64_t v80 = v95;
  uint64_t v81 = (long long *)((char *)v95 + v79);
  char v82 = *((unsigned char *)v95 + v79 + 48);
  uint64_t v83 = (char *)v100 + v79;
  if (v82)
  {
    if (v83[48])
    {
LABEL_36:
      char v45 = specialized static Dictionary<>.== infix(_:_:)(*(void *)((char *)v80 + v38[12]), *(void *)((char *)v100 + v38[12]));
      return v45 & 1;
    }
  }
  else if ((v83[48] & 1) == 0)
  {
    long long v84 = v81[1];
    long long v85 = v81[2];
    long long v86 = *(_OWORD *)v83;
    long long v87 = *((_OWORD *)v83 + 1);
    long long v88 = *((_OWORD *)v83 + 2);
    long long v101 = *v81;
    long long v102 = v84;
    long long v103 = v85;
    long long v104 = v86;
    long long v105 = v87;
    long long v106 = v88;
    if (static CGAffineTransform.== infix(_:_:)()) {
      goto LABEL_36;
    }
  }
LABEL_16:
  char v45 = 0;
  return v45 & 1;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane()
{
  unint64_t result = lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane);
  }
  return result;
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PKStrokeInheritedProperties(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokeInheritedProperties);
}

unint64_t lazy protocol witness table accessor for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PKInk? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type PKInk? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type PKInk? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PKInk?);
    lazy protocol witness table accessor for type PKInk and conformance PKInk();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKInk? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PKInk and conformance PKInk()
{
  unint64_t result = lazy protocol witness table cache variable for type PKInk and conformance PKInk;
  if (!lazy protocol witness table cache variable for type PKInk and conformance PKInk)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for PKInk);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKInk and conformance PKInk);
  }
  return result;
}

uint64_t type metadata accessor for PKStrokeStruct(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokeStruct);
}

uint64_t type metadata accessor for PKStrokeStructCache()
{
  return self;
}

uint64_t _So13PKStrokeFlagsa34__Unnamed_union___Anonymous_field0V02__c10_struct___e1_F0V_shouldSolveMath_getter(unint64_t a1)
{
  return (a1 >> 41) & 1;
}

uint64_t outlined init with copy of PKStrokeProperties(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of PKStrokeProperties(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PKStrokeProperties.CodingKeys()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [PKStrokeProperties.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [PKStrokeProperties.CodingKeys]);
}

uint64_t base witness table accessor for CRValue in PKStrokeProperties()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeProperties);
}

uint64_t base witness table accessor for Decodable in PKStrokeProperties()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeProperties);
}

uint64_t base witness table accessor for Encodable in PKStrokeProperties()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeProperties);
}

uint64_t base witness table accessor for CRType in PKStrokeProperties()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeProperties);
}

uint64_t base witness table accessor for CRCodable in PKStrokeProperties()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeProperties);
}

uint64_t associated type witness table accessor for Tagged_2.Type1 : CRDT in TaggedStroke()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
}

uint64_t associated type witness table accessor for Tagged_2.Type2 : CRDT in TaggedStroke()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CRSequence<A>, &demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
}

uint64_t associated type witness table accessor for Tagged_2.Unknown : CRDT in TaggedStroke()
{
  return MEMORY[0x263F33030];
}

uint64_t base witness table accessor for CRStruct_Base_3 in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t base witness table accessor for CRStruct_Base in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t associated type witness table accessor for CRStruct_Base_3.Type_1 : CRDT in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<Ref<PKStrokeInheritedProperties>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_3.Type_2 : CRDT in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<PKInk?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<PKInk?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_3.Type_3 : CRDT in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<CGAffineTransform> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
}

uint64_t base witness table accessor for CRDT in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t base witness table accessor for CRMergeable in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t base witness table accessor for CRType in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_3<PKStrokeInheritedProperties> and conformance CRStructMergeableDelta_3<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_3<PKStrokeInheritedProperties>);
}

uint64_t base witness table accessor for CRCodable in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t base witness table accessor for CRStruct_Base_2 in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
}

uint64_t base witness table accessor for CRStruct_Base in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
}

uint64_t associated type witness table accessor for CRStruct_Base_2.Type_1 : CRDT in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<Ref<PKStrokeInheritedProperties>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
}

uint64_t associated type witness table accessor for CRStruct_Base_2.Type_2 : CRDT in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<PKStrokeProperties> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
}

uint64_t base witness table accessor for CRMergeable in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
}

uint64_t base witness table accessor for CRType in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_2<PKStrokeStruct> and conformance CRStructMergeableDelta_2<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_2<PKStrokeStruct>);
}

uint64_t base witness table accessor for CRCodable in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
}

uint64_t sub_20C319B14()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t sub_20C319B50()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C319B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PKStrokeInheritedProperties.$inherited : PKStrokeInheritedProperties(a1, a2, a3, a4, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
}

uint64_t sub_20C319BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_5Tm(a1, a2, a3, (void (*)(void))type metadata accessor for PKStrokeInheritedProperties, &demangling cache variable for type metadata for CRRegister<PKInk?>, MEMORY[0x263F32C38]);
}

uint64_t sub_20C319BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PKStrokeInheritedProperties.$ink : PKStrokeInheritedProperties(a1, a2, a3, a4, &demangling cache variable for type metadata for CRRegister<PKInk?>, (void (*)(void))type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t sub_20C319C20()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C319C74()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t sub_20C319CB0()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C319CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PKStrokeInheritedProperties.$inherited : PKStrokeInheritedProperties(a1, a2, a3, a4, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
}

uint64_t sub_20C319D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_5Tm(a1, a2, a3, (void (*)(void))type metadata accessor for PKStrokeStruct, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>, MEMORY[0x263F32C30]);
}

uint64_t keypath_get_5Tm(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t *a5, uint64_t (*a6)(uint64_t))
{
  a4(0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a5);
  return a6(v8);
}

uint64_t sub_20C319DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_5Tm(a1, a2, a3, (void (*)(void))type metadata accessor for PKStrokeStruct, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>, MEMORY[0x263F32C38]);
}

uint64_t sub_20C319DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PKStrokeInheritedProperties.$ink : PKStrokeInheritedProperties(a1, a2, a3, a4, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>, (void (*)(void))type metadata accessor for PKStrokeStruct);
}

uint64_t *initializeBufferWithCopyOfBuffer for PKStrokeProperties(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void *)(v10 - 8);
    long long v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = a3[6];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (v12((char *)a2 + v15, 1, v10))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    uint64_t v19 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    uint64_t v23 = a3[10];
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    uint64_t v24 = (char *)v4 + v23;
    uint64_t v25 = (char *)a2 + v23;
    long long v26 = *((_OWORD *)v25 + 1);
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v26;
    v24[32] = v25[32];
    uint64_t v27 = a3[11];
    uint64_t v28 = a3[12];
    uint64_t v29 = (char *)v4 + v27;
    uint64_t v30 = (char *)a2 + v27;
    long long v31 = *((_OWORD *)v30 + 1);
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v31;
    *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
    v29[48] = v30[48];
    *(uint64_t *)((char *)v4 + v28) = *(uint64_t *)((char *)a2 + v28);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PKStrokeProperties(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = a1 + a2[6];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v9 = a1 + a2[8];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_release();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PKStrokeProperties(void *a1, char *a2, int *a3)
{
  *a1 = *(void *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = &a2[v13];
  if (v11(&a2[v13], 1, v9))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  uint64_t v17 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)&a2[a3[7]];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = &a2[v17];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  uint64_t v21 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)&a2[a3[9]];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = &a2[v21];
  long long v24 = *((_OWORD *)v23 + 1);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v24;
  v22[32] = v23[32];
  uint64_t v25 = a3[11];
  uint64_t v26 = a3[12];
  uint64_t v27 = (char *)a1 + v25;
  uint64_t v28 = &a2[v25];
  long long v29 = *((_OWORD *)v28 + 1);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *((_OWORD *)v27 + 1) = v29;
  *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
  v27[48] = v28[48];
  *(void *)((char *)a1 + v26) = *(void *)&a2[v26];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for PKStrokeProperties(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = (char *)a2 + v15;
  int v18 = v11(&a1[v15], 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)((char *)a2 + a3[7]);
  uint64_t v21 = a3[8];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  *(void *)&a1[a3[9]] = *(void *)((char *)a2 + a3[9]);
  swift_retain();
  swift_release();
  uint64_t v25 = a3[10];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = (char *)a2 + v25;
  long long v28 = *(_OWORD *)v27;
  long long v29 = *((_OWORD *)v27 + 1);
  v26[32] = v27[32];
  *(_OWORD *)uint64_t v26 = v28;
  *((_OWORD *)v26 + 1) = v29;
  uint64_t v30 = a3[11];
  long long v31 = &a1[v30];
  uint64_t v32 = (char *)a2 + v30;
  char v33 = v32[48];
  long long v35 = *((_OWORD *)v32 + 1);
  long long v34 = *((_OWORD *)v32 + 2);
  *(_OWORD *)long long v31 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = v35;
  *((_OWORD *)v31 + 2) = v34;
  v31[48] = v33;
  *(void *)&a1[a3[12]] = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for PKStrokeProperties(void *a1, char *a2, int *a3)
{
  *a1 = *(void *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = &a2[v13];
  if (v11(&a2[v13], 1, v9))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  uint64_t v17 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)&a2[a3[7]];
  int v18 = (char *)a1 + v17;
  int v19 = &a2[v17];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
  uint64_t v21 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)&a2[a3[9]];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = &a2[v21];
  long long v24 = *((_OWORD *)v23 + 1);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v24;
  v22[32] = v23[32];
  uint64_t v25 = a3[11];
  uint64_t v26 = a3[12];
  uint64_t v27 = (char *)a1 + v25;
  long long v28 = &a2[v25];
  long long v29 = *((_OWORD *)v28 + 1);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *((_OWORD *)v27 + 1) = v29;
  *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
  v27[48] = v28[48];
  *(void *)((char *)a1 + v26) = *(void *)&a2[v26];
  return a1;
}

char *assignWithTake for PKStrokeProperties(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = (char *)a2 + v15;
  int v18 = v11(&a1[v15], 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  uint64_t v21 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)((char *)a2 + a3[7]);
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 40))(v22, v23, v24);
  *(void *)&a1[a3[9]] = *(void *)((char *)a2 + a3[9]);
  swift_release();
  uint64_t v25 = a3[10];
  uint64_t v26 = a3[11];
  uint64_t v27 = &a1[v25];
  long long v28 = (char *)a2 + v25;
  v27[32] = v28[32];
  long long v29 = *((_OWORD *)v28 + 1);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *((_OWORD *)v27 + 1) = v29;
  uint64_t v30 = &a1[v26];
  long long v31 = (char *)a2 + v26;
  v30[48] = v31[48];
  long long v32 = *((_OWORD *)v31 + 2);
  long long v33 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = *((_OWORD *)v31 + 1);
  *((_OWORD *)v30 + 2) = v32;
  *(_OWORD *)uint64_t v30 = v33;
  *(void *)&a1[a3[12]] = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PKStrokeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C31ADD0);
}

uint64_t sub_20C31ADD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[8];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[12]);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for PKStrokeProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C31AEFC);
}

uint64_t sub_20C31AEFC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[12]) = (a2 - 1);
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[8];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  return v13(a1 + v11, a2, a2, v9);
}

void type metadata completion function for PKStrokeProperties()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Ref<PKStrokePathStruct>();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for UUID?()
{
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
    }
  }
}

void type metadata accessor for Ref<PKStrokePathStruct>()
{
  if (!lazy cache variable for type metadata for Ref<PKStrokePathStruct>)
  {
    type metadata accessor for PKStrokePathStruct(255);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct);
    unint64_t v0 = type metadata accessor for Ref();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Ref<PKStrokePathStruct>);
    }
  }
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PKStrokeProperties.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PKStrokeProperties.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C31B36CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for PKStrokeProperties.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for PKStrokeProperties.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PKStrokeProperties.CodingKeys()
{
  return &type metadata for PKStrokeProperties.CodingKeys;
}

uint64_t getEnumTagSinglePayload for TaggedStroke.Enum(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TaggedStroke.Enum(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C31B510);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for TaggedStroke.Enum(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PKStrokeInheritedProperties(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    unint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PKStrokeInheritedProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C31BC70);
}

uint64_t sub_20C31BC70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[7]);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C31BDF0);
}

uint64_t sub_20C31BDF0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[7]) = (a2 - 1);
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[6];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for PKStrokeInheritedProperties()
{
  type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?, (void (*)(void))lazy protocol witness table accessor for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<PKInk?>, &demangling cache variable for type metadata for PKInk?, (void (*)(void))lazy protocol witness table accessor for type PKInk? and conformance <A> A?);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<CGAffineTransform>();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(uint64_t a1, unint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    a4();
    unint64_t v6 = type metadata accessor for CRRegister();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for CRRegister<CGAffineTransform>()
{
  if (!lazy cache variable for type metadata for CRRegister<CGAffineTransform>)
  {
    type metadata accessor for CGAffineTransform(255);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, type metadata accessor for CGAffineTransform);
    unint64_t v0 = type metadata accessor for CRRegister();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<CGAffineTransform>);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PKStrokeStruct(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PKStrokeStruct(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PKStrokeStruct(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PKStrokeStruct(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for PKStrokeStruct(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PKStrokeStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C31C780);
}

uint64_t sub_20C31C780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for PKStrokeStruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C31C8B0);
}

uint64_t sub_20C31C8B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for PKStrokeStruct()
{
  type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<PKStrokeProperties>();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>>()
{
  if (!lazy cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
    unint64_t v0 = type metadata accessor for CRRegister();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    }
  }
}

void type metadata accessor for CRRegister<PKStrokeProperties>()
{
  if (!lazy cache variable for type metadata for CRRegister<PKStrokeProperties>)
  {
    type metadata accessor for PKStrokeProperties(255);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeProperties);
    unint64_t v0 = type metadata accessor for CRRegister();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<PKStrokeProperties>);
    }
  }
}

void destroy for PKStrokeStructCache.BoundsParameters(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 56);
}

uint64_t initializeWithCopy for PKStrokeStructCache.BoundsParameters(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t assignWithCopy for PKStrokeStructCache.BoundsParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = *(void **)(a1 + 56);
  uint64_t v8 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v8;
  id v9 = v8;

  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PKStrokeStructCache.BoundsParameters(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = *(_OWORD *)(a2 + 40);
  id v5 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  return a1;
}

uint64_t getEnumTagSinglePayload for PKStrokeStructCache.BoundsParameters(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PKStrokeStructCache.BoundsParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PKStrokeStructCache.BoundsParameters()
{
  return &type metadata for PKStrokeStructCache.BoundsParameters;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void partial apply for closure #1 in CRRegister<>.bounds(in:)(CGFloat *a1@<X0>, CGRect *a2@<X8>)
{
  closure #1 in CRRegister<>.bounds(in:)(a1, *(void **)(v2 + 16), a2);
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

id outlined copy of AsyncCache<Data, CGImageRef>.CacheState(uint64_t a1, void *a2, char a3)
{
  if (a3) {
    return a2;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

uint64_t outlined init with take of WeakCalculateExpression(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of PKStrokeStruct(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void **outlined retain of PKStrokeStructCache.BoundsParameters(void **a1)
{
  uint64_t v2 = *a1;
  id v3 = a1[7];
  id v4 = v2;
  return a1;
}

uint64_t outlined release of PKStrokeStructCache.BoundsParameters(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);

  return a1;
}

void one-time initialization function for paperKitBundle()
{
  unint64_t v0 = (void *)MEMORY[0x21054D080](0xD000000000000012, 0x800000020C84EE80);
  uint64_t v1 = (objc_class *)objc_msgSend(self, sel_bundleWithIdentifier_, v0);

  if (v1) {
    paperKitBundle.super.Class isa = v1;
  }
  else {
    __break(1u);
  }
}

PaperKit::PDFPageID::CodingKeys_optional __swiftcall PDFPageID.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return (PaperKit::PDFPageID::CodingKeys_optional)rawValue;
}

PaperKit::PDFPageID::CodingKeys_optional __swiftcall PDFPageID.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char v2 = v1;
  BOOL v3 = stringValue._countAndFlagsBits == 0x626D754E65676170 && stringValue._object == (void *)0xEA00000000007265;
  if (v3
    || (object = stringValue._object,
        uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 0x7465737361 && object == (void *)0xE500000000000000)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 1;
    }
    else {
      char v7 = 2;
    }
  }
  *char v2 = v7;
  return result;
}

PaperKit::PDFPageID::CodingKeys_optional __swiftcall PDFPageID.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  if (intValue)
  {
    if (intValue == 1) {
      *uint64_t v1 = 1;
    }
    else {
      *uint64_t v1 = 2;
    }
  }
  else
  {
    *uint64_t v1 = 0;
  }
  return (PaperKit::PDFPageID::CodingKeys_optional)intValue;
}

void *static PDFPageID.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static PDFPageID.CodingKeys.allCases.getter;
}

uint64_t PDFPageID.CodingKeys.intValue.getter()
{
  return *v0;
}

uint64_t PDFPageID.CodingKeys.rawValue.getter()
{
  return *v0;
}

uint64_t PDFPageID.CodingKeys.stringValue.getter()
{
  if (*v0) {
    return 0x7465737361;
  }
  else {
    return 0x626D754E65676170;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PDFPageID.CodingKeys()
{
  if (*v0) {
    return 0x7465737361;
  }
  else {
    return 0x626D754E65676170;
  }
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance PDFPageID.CodingKeys()
{
  return *v0;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PDFPageID.CodingKeys@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PDFPageID.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance PDFPageID.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance PDFPageID.CodingKeys(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys();
  unint64_t v5 = lazy protocol witness table accessor for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys();
  return MEMORY[0x270F180C8](a1, a2, v4, v5);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PDFPageID.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PDFPageID.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t PDFPageID.visitReferences(_:)()
{
  return CRAsset.visitReferences(_:)();
}

uint64_t PDFPageID.debugDescription.getter()
{
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 0x3A7465737361202CLL;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  type metadata accessor for PDFPageID();
  uint64_t v2 = CRAsset.digest.getter();
  unint64_t v4 = v3;
  Swift::String v5 = Data.base64EncodedString(options:)(0);
  outlined consume of Data._Representation(v2, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 125;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 979857531;
}

uint64_t PDFPageID.hash(into:)()
{
  Hasher._combine(_:)(*v0);
  type metadata accessor for PDFPageID();
  type metadata accessor for CRAsset();
  lazy protocol witness table accessor for type CRAsset and conformance CRAsset((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static PDFPageID.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  type metadata accessor for PDFPageID();
  return static CRAsset.== infix(_:_:)();
}

uint64_t PDFPageID.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedEncodingContainer<PDFPageID.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  Swift::String v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for PDFPageID();
    v8[14] = 1;
    type metadata accessor for CRAsset();
    lazy protocol witness table accessor for type CRAsset and conformance CRAsset(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int PDFPageID.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  type metadata accessor for PDFPageID();
  type metadata accessor for CRAsset();
  lazy protocol witness table accessor for type CRAsset and conformance CRAsset((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t PDFPageID.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v25 = type metadata accessor for CRAsset();
  uint64_t v23 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PDFPageID.CodingKeys>);
  uint64_t v24 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  char v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PDFPageID();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v21 = v8;
    uint64_t v11 = v24;
    uint64_t v12 = v25;
    uint64_t v13 = v5;
    char v28 = 0;
    uint64_t v14 = v26;
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v20 = v10;
    uint64_t *v10 = v15;
    char v27 = 1;
    lazy protocol witness table accessor for type CRAsset and conformance CRAsset(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v14);
    uint64_t v16 = v22;
    uint64_t v17 = (uint64_t)v20;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))((char *)v20 + *(int *)(v21 + 20), v13, v12);
    outlined init with take of PDFPageID(v17, v16);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PDFPageID()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  type metadata accessor for CRAsset();
  lazy protocol witness table accessor for type CRAsset and conformance CRAsset((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PDFPageID()
{
  Hasher._combine(_:)(*v0);
  type metadata accessor for CRAsset();
  lazy protocol witness table accessor for type CRAsset and conformance CRAsset((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PDFPageID()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  type metadata accessor for CRAsset();
  lazy protocol witness table accessor for type CRAsset and conformance CRAsset((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PDFPageID(void *a1, void *a2)
{
  if (*a1 == *a2) {
    return static CRAsset.== infix(_:_:)();
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance PDFPageID@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PDFPageID.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PDFPageID(void *a1)
{
  return PDFPageID.encode(to:)(a1);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PDFPageID@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PDFPageID(v1, a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PDFPageID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type CRAsset and conformance CRAsset(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (void (*)(uint64_t))type metadata accessor for PDFPageID);
  uint64_t v7 = lazy protocol witness table accessor for type CRAsset and conformance CRAsset(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (void (*)(uint64_t))type metadata accessor for PDFPageID);
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance PDFPageID()
{
  return CRAsset.visitReferences(_:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PDFPageID()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PDFPageID()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PDFPageID(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CRAsset and conformance CRAsset(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (void (*)(uint64_t))type metadata accessor for PDFPageID);
  return MEMORY[0x270F17688](a1, v2);
}

uint64_t type metadata accessor for PDFPageID()
{
  uint64_t result = type metadata singleton initialization cache for PDFPageID;
  if (!type metadata singleton initialization cache for PDFPageID) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys);
  }
  return result;
}

uint64_t outlined init with take of PDFPageID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PDFPageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [PDFPageID.CodingKeys] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [PDFPageID.CodingKeys] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PDFPageID.CodingKeys] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PDFPageID.CodingKeys]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PDFPageID.CodingKeys] and conformance [A]);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PDFPageID()
{
  return lazy protocol witness table accessor for type CRAsset and conformance CRAsset(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (void (*)(uint64_t))type metadata accessor for PDFPageID);
}

uint64_t base witness table accessor for CRValue in PDFPageID()
{
  return lazy protocol witness table accessor for type CRAsset and conformance CRAsset(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (void (*)(uint64_t))type metadata accessor for PDFPageID);
}

uint64_t base witness table accessor for Decodable in PDFPageID()
{
  return lazy protocol witness table accessor for type CRAsset and conformance CRAsset(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (void (*)(uint64_t))type metadata accessor for PDFPageID);
}

uint64_t base witness table accessor for Encodable in PDFPageID()
{
  return lazy protocol witness table accessor for type CRAsset and conformance CRAsset(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (void (*)(uint64_t))type metadata accessor for PDFPageID);
}

uint64_t base witness table accessor for CRType in PDFPageID()
{
  return lazy protocol witness table accessor for type CRAsset and conformance CRAsset(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (void (*)(uint64_t))type metadata accessor for PDFPageID);
}

uint64_t base witness table accessor for CRCodable in PDFPageID()
{
  return lazy protocol witness table accessor for type CRAsset and conformance CRAsset(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (void (*)(uint64_t))type metadata accessor for PDFPageID);
}

uint64_t *initializeBufferWithCopyOfBuffer for PDFPageID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for CRAsset();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PDFPageID(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for CRAsset();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

void *initializeWithCopy for PDFPageID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *assignWithCopy for PDFPageID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

void *initializeWithTake for PDFPageID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for PDFPageID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PDFPageID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C31E8E0);
}

uint64_t sub_20C31E8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for CRAsset();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PDFPageID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C31E964);
}

uint64_t sub_20C31E964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for CRAsset();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for PDFPageID()
{
  uint64_t result = type metadata accessor for CRAsset();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PDFPageID.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C31EB40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PDFPageID.CodingKeys()
{
  return &type metadata for PDFPageID.CodingKeys;
}

uint64_t lazy protocol witness table accessor for type CRAsset and conformance CRAsset(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of PDFPageID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PDFPageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double Signature.frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for Signature.frame : Signature@<D0>(_OWORD *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for Signature.frame : Signature()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Signature.frame.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Signature.frame.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Signature.$frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Signature.$frame : Signature(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  unsigned int v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t Signature.$frame.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*Signature.$frame.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

double Signature.rotation.getter()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for Signature()
{
  uint64_t result = type metadata singleton initialization cache for Signature;
  if (!type metadata singleton initialization cache for Signature) {
    return swift_getSingletonMetadata();
  }
  return result;
}

double key path getter for Signature.rotation : Signature@<D0>(double *a1@<X8>)
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Signature.rotation : Signature()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Signature.rotation.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Signature.rotation.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Signature.$rotation.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Signature.$rotation : Signature(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  size_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t Signature.$rotation.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Signature.$rotation.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Signature() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Signature.signatureItem.getter()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for Signature.signatureItem : Signature@<X0>(void *a1@<X8>)
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Signature.signatureItem : Signature(void **a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for Signature();
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Signature.signatureItem.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Signature.signatureItem.modify(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Signature.$signatureItem.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Signature.$signatureItem : Signature(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  size_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t Signature.$signatureItem.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Signature.$signatureItem.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Signature() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Signature.color.getter()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t key path getter for Signature.color : Signature@<X0>(void *a1@<X8>)
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Signature.color : Signature(void **a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for Signature();
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Signature.color.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Signature.color.modify(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Signature.$color.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Signature.$color : Signature(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  size_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t Signature.$color.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Signature.$color.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Signature() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Signature.width.getter()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for Signature.width : Signature@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for Signature.width : Signature()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Signature.width.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Signature.width.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Signature.$width.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Signature.$width : Signature(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  size_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t Signature.$width.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Signature.$width.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Signature() + 32);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Signature.additionalFields.getter()
{
  type metadata accessor for Signature();
  return swift_bridgeObjectRetain();
}

uint64_t Signature.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Signature() + 36);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*Signature.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static Signature.fields.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_2676C8868;
  uint64_t v4 = qword_2676C8870;
  uint64_t v3 = unk_2676C8878;
  uint64_t v5 = qword_2676C8880;
  uint64_t v6 = qword_2676C8888;
  uint64_t v7 = qword_2676C8890;
  uint64_t v8 = qword_2676C8898;
  uint64_t v10 = qword_2676C88A0;
  uint64_t v9 = unk_2676C88A8;
  uint64_t v11 = qword_2676C88B0;
  uint64_t v12 = qword_2676C88B8;
  uint64_t v13 = qword_2676C88C0;
  uint64_t v14 = qword_2676C88C8;
  uint64_t v15 = qword_2676C88D0;
  *a1 = static Signature.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  a1[12] = v13;
  a1[13] = v14;
  a1[14] = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

void Signature.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type CGRect and conformance CGRect((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  CRRegister.init(wrappedValue:)();
  uint64_t v4 = type metadata accessor for Signature();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SignatureItem?);
  lazy protocol witness table accessor for type SignatureItem? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
  lazy protocol witness table accessor for type Int? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();

  *(void *)(a2 + *(int *)(v4 + 36)) = MEMORY[0x263F8EE80];
}

unint64_t lazy protocol witness table accessor for type SignatureItem? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type SignatureItem? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type SignatureItem? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SignatureItem?);
    lazy protocol witness table accessor for type CGRect and conformance CGRect((unint64_t *)&lazy protocol witness table cache variable for type SignatureItem and conformance SignatureItem, (void (*)(uint64_t))type metadata accessor for SignatureItem);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SignatureItem? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Color? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Color? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Color? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Color?);
    lazy protocol witness table accessor for type Color and conformance Color();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Color and conformance Color()
{
  unint64_t result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Int? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Int? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Int?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int? and conformance <A> A?);
  }
  return result;
}

uint64_t Signature.init()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type CGRect and conformance CGRect((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  CRRegister.init(wrappedValue:)();
  uint64_t v2 = type metadata accessor for Signature();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SignatureItem?);
  lazy protocol witness table accessor for type SignatureItem? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
  lazy protocol witness table accessor for type Int? and conformance <A> A?();
  uint64_t result = CRRegister.init(wrappedValue:)();
  *(void *)(a1 + *(int *)(v2 + 36)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t Signature.minAppFormatVersion.getter()
{
  return 2;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Signature()
{
  return CRStruct_5.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Signature()
{
  return CRStruct_5.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Signature(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F17180](a1, v2);
}

uint64_t protocol witness for CRCodable.minAppFormatVersion.getter in conformance Signature()
{
  return 2;
}

uint64_t protocol witness for static CRStruct_Base_5.fields.getter in conformance Signature@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_2676C8868;
  uint64_t v4 = qword_2676C8870;
  uint64_t v3 = unk_2676C8878;
  uint64_t v5 = qword_2676C8880;
  uint64_t v6 = qword_2676C8888;
  uint64_t v7 = qword_2676C8890;
  uint64_t v8 = qword_2676C8898;
  uint64_t v10 = qword_2676C88A0;
  uint64_t v9 = unk_2676C88A8;
  uint64_t v11 = qword_2676C88B0;
  uint64_t v12 = qword_2676C88B8;
  uint64_t v13 = qword_2676C88C0;
  uint64_t v14 = qword_2676C88C8;
  uint64_t v15 = qword_2676C88D0;
  *a1 = static Signature.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  a1[12] = v13;
  a1[13] = v14;
  a1[14] = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance Signature(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F171F0](a1, v2);
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance Signature()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 36);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*protocol witness for CRStruct_Base.additionalFields.modify in conformance Signature())()
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CRDT.context.getter in conformance Signature(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F17190](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F171B8](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F171E8](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F171C0](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F171E0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F171C8](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F171A8](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F171A0](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F17188](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F17170](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance Signature()
{
  lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return CRStruct_5.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F17178](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  return MEMORY[0x270F171D0](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance Signature()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance Signature()
{
  return CRDT.init(serializedData:)();
}

uint64_t Signature.shared(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v2);
  v6[15] = 6;
  (*(void (**)(unsigned char *, uint64_t))(v4 + 16))(&v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)], a1);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t Signature.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CRAsset();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t Signature.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Signature.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized Signature.render<A>(in:id:capsule:options:));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v14(a1, a2, a4, a5, a6);
}

void Signature.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGFloat v12 = *(double *)a6;
  CGFloat v13 = *(double *)(a6 + 24);
  CGFloat v46 = *(double *)(a6 + 16);
  CGFloat v47 = *(double *)(a6 + 8);
  CGFloat v14 = *(double *)(a6 + 32);
  uint64_t v44 = *(void *)(a6 + 48);
  CGFloat v45 = *(double *)(a6 + 40);
  uint64_t v42 = *(void *)(a6 + 64);
  uint64_t v43 = *(void *)(a6 + 56);
  int v15 = *(unsigned __int8 *)(a6 + 74);
  int v16 = *(unsigned __int16 *)(a6 + 72);
  type metadata accessor for CanvasElementPDFAnnotation();
  uint64_t v17 = swift_dynamicCastClass();
  if (v17)
  {
    int v18 = (void *)v17;
    uint64_t v41 = a7;
    uint64_t v19 = a8;
    int v20 = v16 | (v15 << 16);
    *(unsigned char *)(v17 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation) = 2;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;
    id v24 = a3;
    uint64_t v25 = (void *)MEMORY[0x21054D080](v21, v23);
    swift_bridgeObjectRelease();
    objc_msgSend(v18, sel_setType_, v25);

    specialized CanvasElement.coordinateSpace.getter((void (*)(void))type metadata accessor for Signature, MEMORY[0x263F32C30], &v56);
    CGAffineTransform v50 = v56;
    v57.origin.CGFloat x = 0.0;
    v57.origin.double y = 0.0;
    v57.size.CGFloat width = 1.0;
    v57.size.CGFloat height = 1.0;
    CGRect v58 = CGRectApplyAffineTransform(v57, &v50);
    CGFloat x = v58.origin.x;
    double y = v58.origin.y;
    CGFloat width = v58.size.width;
    CGFloat height = v58.size.height;
    id v30 = objc_msgSend(v18, sel_page);
    if (v30)
    {
      long long v31 = v30;
      objc_msgSend(v30, sel_boundsForBox_, 0);
      double v33 = v32;
      double v35 = v34;

      v59.origin.CGFloat x = x;
      v59.origin.double y = y;
      v59.size.CGFloat width = width;
      v59.size.CGFloat height = height;
      CGFloat MinX = CGRectGetMinX(v59);
      v60.origin.CGFloat x = x;
      v60.origin.double y = y;
      v60.size.CGFloat width = width;
      v60.size.CGFloat height = height;
      double v37 = v35 + v33 + v33 - CGRectGetMaxY(v60);
      v61.origin.CGFloat x = x;
      v61.origin.double y = y;
      v61.size.CGFloat width = width;
      v61.size.CGFloat height = height;
      CGFloat v38 = CGRectGetWidth(v61);
      v62.origin.CGFloat x = x;
      v62.origin.double y = y;
      v62.size.CGFloat width = width;
      v62.size.CGFloat height = height;
      CGFloat height = CGRectGetHeight(v62);
      CGFloat width = v38;
      CGFloat x = MinX;
      double y = v37;
    }
    id v39 = v24;
    v63.origin.CGFloat x = x;
    v63.origin.double y = y;
    v63.size.CGFloat width = width;
    v63.size.CGFloat height = height;
    CGRect v64 = CGRectIntegral(v63);
    objc_msgSend(v18, sel_setBounds_, v64.origin.x, v64.origin.y, v64.size.width, v64.size.height);

    v50.a = v12;
    v50.b = v47;
    v50.c = v46;
    v50.d = v13;
    v50.tCGFloat x = v14;
    v50.tdouble y = v45;
    uint64_t v51 = v44;
    uint64_t v52 = v43;
    uint64_t v53 = v42;
    char v55 = BYTE2(v20);
    __int16 v54 = v20;
    uint64_t v40 = type metadata accessor for Signature();
    CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(a4, v8, a5, (uint64_t)&v50, v41, v40, v19, (uint64_t)&protocol witness table for Signature);
    objc_msgSend(v18, sel_setShouldBurnIn_, 1);
  }
}

Swift::Void __swiftcall Signature.apply(_:)(CGAffineTransform *a1)
{
  double a = a1->a;
  double b = a1->b;
  long long v6 = *(_OWORD *)&a1->c;
  tCGFloat x = a1->tx;
  tdouble y = a1->ty;
  specialized CanvasElement.coordinateSpace.getter((void (*)(void))type metadata accessor for Signature, MEMORY[0x263F32C30], &v9);
  CGAffineTransform t1 = v9;
  t2.double a = a;
  t2.double b = b;
  *(_OWORD *)&t2.c = v6;
  t2.tCGFloat x = tx;
  t2.tdouble y = ty;
  CGAffineTransformConcat(&v7, &t1, &t2);
  CGAffineTransform t1 = v7;
  specialized CanvasElement.coordinateSpace.setter((uint64_t)&t1, (uint64_t (*)(void))type metadata accessor for Signature);
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  CRRegister.wrappedValue.getter();
  if ((LOBYTE(t2.b) & 1) == 0)
  {
    double v5 = sqrt(a * a + b * b) * (double)*(uint64_t *)&t2.a;
    if ((~*(void *)&v5 & 0x7FF0000000000000) != 0)
    {
      if (v5 > -9.22337204e18)
      {
        if (v5 < 9.22337204e18)
        {
          *(void *)&t2.double a = (uint64_t)v5;
          LOBYTE(t2.b) = 0;
          CRRegister.wrappedValue.setter();
          return;
        }
LABEL_9:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
}

CGFloat specialized CanvasElement.coordinateSpace.getter@<D0>(_OWORD *a1@<X8>)
{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(void))type metadata accessor for Paper, a1);
}

{
  double MidX;
  double MidY;
  CGFloat v4;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat result;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  CGFloat c;
  CGFloat d;
  CGFloat v24;
  CGFloat v25;
  CGAffineTransform v26;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v29;
  CGRect v30;

  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  id v24 = t1.b - t1.d * 0.0;
  uint64_t v25 = t1.a - t1.c * 0.0;
  v29.origin.CGFloat x = t1.a;
  v29.origin.double y = t1.b;
  v29.size.CGFloat width = t1.c;
  c = t1.c;
  d = t1.d;
  v29.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v29);
  v30.origin.CGFloat x = t1.a;
  v30.origin.double y = t1.b;
  v30.size.CGFloat width = t1.c;
  v30.size.CGFloat height = t1.d;
  double MidY = CGRectGetMidY(v30);
  CGAffineTransformMakeRotation(&t1, t1.a);
  int v18 = *(_OWORD *)&t1.c;
  int v20 = *(_OWORD *)&t1.a;
  uint64_t v4 = -MidY;
  tCGFloat x = t1.tx;
  tdouble y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v4);
  double a = t1.a;
  double b = t1.b;
  CGAffineTransform v9 = t1.c;
  uint64_t v10 = t1.d;
  uint64_t v11 = t1.tx;
  CGFloat v12 = t1.ty;
  *(_OWORD *)&t2.double a = v20;
  *(_OWORD *)&t2.c = v18;
  t2.tCGFloat x = tx;
  t2.tdouble y = ty;
  CGAffineTransformConcat(&v26, &t1, &t2);
  uint64_t v19 = *(_OWORD *)&v26.c;
  uint64_t v21 = *(_OWORD *)&v26.a;
  CGFloat v13 = v26.tx;
  CGFloat v14 = v26.ty;
  t1.double a = a;
  t1.double b = b;
  t1.c = v9;
  t1.d = v10;
  t1.tCGFloat x = v11;
  t1.tdouble y = v12;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.double a = v21;
  *(_OWORD *)&t1.c = v19;
  t1.tCGFloat x = v13;
  t1.tdouble y = v14;
  CGAffineTransformConcat(&v26, &t1, &t2);
  t1.double a = c;
  t1.double b = 0.0;
  t1.c = 0.0;
  t1.d = d;
  t1.tCGFloat x = v25;
  t1.tdouble y = v24;
  CGAffineTransform t2 = v26;
  CGAffineTransformConcat(&v26, &t1, &t2);
  uint64_t result = v26.a;
  int v16 = *(_OWORD *)&v26.c;
  uint64_t v17 = *(_OWORD *)&v26.tx;
  *a1 = *(_OWORD *)&v26.a;
  a1[1] = v16;
  a1[2] = v17;
  return result;
}

{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(void))type metadata accessor for GraphElement, MEMORY[0x263F32C30], a1);
}

{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(void))type metadata accessor for UnknownCanvasElement, MEMORY[0x263F32C30], a1);
}

{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(void))type metadata accessor for Link, MEMORY[0x263F32C30], a1);
}

{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(void))type metadata accessor for Image, a1);
}

{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(void))type metadata accessor for Signature, MEMORY[0x263F32C30], a1);
}

{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(void))type metadata accessor for Shape, MEMORY[0x263F32C40], a1);
}

{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(void))type metadata accessor for TextBox, MEMORY[0x263F32C30], a1);
}

CGFloat specialized CanvasElement.coordinateSpace.getter@<D0>(void (*a1)(void)@<X0>, _OWORD *a2@<X8>)
{
  a1(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  CGFloat v25 = t1.b - t1.d * 0.0;
  CGFloat v26 = t1.a - t1.c * 0.0;
  v30.origin.CGFloat x = t1.a;
  v30.origin.double y = t1.b;
  v30.size.CGFloat width = t1.c;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v30.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v30);
  v31.origin.CGFloat x = t1.a;
  v31.origin.double y = t1.b;
  v31.size.CGFloat width = t1.c;
  v31.size.CGFloat height = t1.d;
  double MidY = CGRectGetMidY(v31);
  CGAffineTransformMakeRotation(&t1, t1.a);
  long long v19 = *(_OWORD *)&t1.c;
  long long v21 = *(_OWORD *)&t1.a;
  CGFloat v5 = -MidY;
  tCGFloat x = t1.tx;
  tdouble y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat v10 = t1.c;
  CGFloat v11 = t1.d;
  CGFloat v12 = t1.tx;
  CGFloat v13 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v21;
  *(_OWORD *)&t2.CGFloat c = v19;
  t2.tCGFloat x = tx;
  t2.tdouble y = ty;
  CGAffineTransformConcat(&v27, &t1, &t2);
  long long v20 = *(_OWORD *)&v27.c;
  long long v22 = *(_OWORD *)&v27.a;
  CGFloat v14 = v27.tx;
  CGFloat v15 = v27.ty;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = v10;
  t1.CGFloat d = v11;
  t1.tCGFloat x = v12;
  t1.tdouble y = v13;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v22;
  *(_OWORD *)&t1.CGFloat c = v20;
  t1.tCGFloat x = v14;
  t1.tdouble y = v15;
  CGAffineTransformConcat(&v27, &t1, &t2);
  t1.CGFloat a = c;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = d;
  t1.tCGFloat x = v26;
  t1.tdouble y = v25;
  CGAffineTransform t2 = v27;
  CGAffineTransformConcat(&v27, &t1, &t2);
  CGFloat result = v27.a;
  long long v17 = *(_OWORD *)&v27.c;
  long long v18 = *(_OWORD *)&v27.tx;
  *a2 = *(_OWORD *)&v27.a;
  a2[1] = v17;
  a2[2] = v18;
  return result;
}

CGFloat specialized CanvasElement.coordinateSpace.getter@<D0>(void (*a1)(void)@<X0>, void (*a2)(CGAffineTransform *__return_ptr, uint64_t)@<X1>, _OWORD *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double a = t1.a;
  double b = t1.b;
  double c = t1.c;
  double d = t1.d;
  a1(0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  a2(&t1, v10);
  CGFloat v11 = t1.a;
  CGFloat v34 = b - d * 0.0;
  CGFloat v35 = a - c * 0.0;
  v39.origin.CGFloat x = a;
  v39.origin.double y = b;
  v39.size.CGFloat width = c;
  CGFloat v32 = c;
  CGFloat v33 = d;
  v39.size.CGFloat height = d;
  double MidX = CGRectGetMidX(v39);
  v40.origin.CGFloat x = a;
  v40.origin.double y = b;
  v40.size.CGFloat width = c;
  v40.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v40);
  CGAffineTransformMakeRotation(&t1, v11);
  long long v28 = *(_OWORD *)&t1.c;
  long long v30 = *(_OWORD *)&t1.a;
  CGFloat v14 = -MidY;
  tCGFloat x = t1.tx;
  tdouble y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v14);
  CGFloat v17 = t1.a;
  CGFloat v18 = t1.b;
  CGFloat v19 = t1.c;
  CGFloat v20 = t1.d;
  CGFloat v21 = t1.tx;
  CGFloat v22 = t1.ty;
  *(_OWORD *)&t2.double a = v30;
  *(_OWORD *)&t2.double c = v28;
  t2.tCGFloat x = tx;
  t2.tdouble y = ty;
  CGAffineTransformConcat(&v36, &t1, &t2);
  long long v29 = *(_OWORD *)&v36.c;
  long long v31 = *(_OWORD *)&v36.a;
  CGFloat v23 = v36.tx;
  CGFloat v24 = v36.ty;
  t1.double a = v17;
  t1.double b = v18;
  t1.double c = v19;
  t1.double d = v20;
  t1.tCGFloat x = v21;
  t1.tdouble y = v22;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.double a = v31;
  *(_OWORD *)&t1.double c = v29;
  t1.tCGFloat x = v23;
  t1.tdouble y = v24;
  CGAffineTransformConcat(&v36, &t1, &t2);
  t1.double a = v32;
  t1.double b = 0.0;
  t1.double c = 0.0;
  t1.double d = v33;
  t1.tCGFloat x = v35;
  t1.tdouble y = v34;
  CGAffineTransform t2 = v36;
  CGAffineTransformConcat(&v36, &t1, &t2);
  CGFloat result = v36.a;
  long long v26 = *(_OWORD *)&v36.c;
  long long v27 = *(_OWORD *)&v36.tx;
  *a3 = *(_OWORD *)&v36.a;
  a3[1] = v26;
  a3[2] = v27;
  return result;
}

BOOL specialized CanvasElement.coordinateSpace.setter()
{
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v21, 0.0);
  CGFloat x = v21.origin.x;
  CGFloat y = v21.origin.y;
  CGFloat rect = v21.size.height;
  CGFloat width = v21.size.width;
  if (fabs(CGRectGetWidth(v21)) >= 1.0)
  {
    *(double *)&unint64_t v5 = width;
  }
  else
  {
    v22.origin.CGFloat x = x;
    v22.origin.CGFloat y = y;
    v22.size.CGFloat height = rect;
    v22.size.CGFloat width = width;
    *(double *)v2.i64 = CGRectGetWidth(v22);
    v3.f64[0] = NAN;
    v3.f64[1] = NAN;
    v4.i64[0] = 1.0;
    unint64_t v5 = vbslq_s8((int8x16_t)vnegq_f64(v3), v4, v2).u64[0];
  }
  CGFloat v6 = x;
  CGFloat v7 = y;
  CGFloat v20 = *(double *)&v5;
  CGFloat v8 = rect;
  double Height = CGRectGetHeight(*(CGRect *)(&v5 - 2));
  CGFloat v10 = rect;
  if (fabs(Height) < 1.0)
  {
    CGFloat v11 = x;
    CGFloat v12 = y;
    CGFloat v13 = v20;
    *(double *)v14.i64 = CGRectGetHeight(*(CGRect *)(&v10 - 3));
    v15.i64[0] = 1.0;
    v16.f64[0] = NAN;
    v16.f64[1] = NAN;
    *(void *)&CGFloat v10 = vbslq_s8((int8x16_t)vnegq_f64(v16), v15, v14).u64[0];
  }
  return CGRect.almostEqual(_:threshold:)(x, y, v20, v10, 0.1, 0.0, 0.0, 1.0, 1.0);
}

uint64_t specialized CanvasElement.coordinateSpace.setter(uint64_t a1)
{
  return specialized CanvasElement.coordinateSpace.setter(a1, (uint64_t (*)(void))type metadata accessor for GraphElement);
}

{
  return specialized CanvasElement.coordinateSpace.setter(a1, (uint64_t (*)(void))type metadata accessor for TextBox);
}

{
  return specialized CanvasElement.coordinateSpace.setter(a1, (uint64_t (*)(void))type metadata accessor for Image);
}

{
  return specialized CanvasElement.coordinateSpace.setter(a1, (uint64_t (*)(void))type metadata accessor for Paper);
}

{
  return specialized CanvasElement.coordinateSpace.setter(a1, (uint64_t (*)(void))type metadata accessor for Link);
}

{
  return specialized CanvasElement.coordinateSpace.setter(a1, (uint64_t (*)(void))type metadata accessor for UnknownCanvasElement);
}

uint64_t specialized CanvasElement.coordinateSpace.setter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v17, v17.origin.x);
  CGFloat x = v17.origin.x;
  CGFloat y = v17.origin.y;
  double v2 = v18;
  CGFloat width = v17.size.width;
  CGFloat rect = v17.size.height;
  if (fabs(CGRectGetWidth(v17)) >= 1.0)
  {
    *(double *)&unint64_t v6 = width;
  }
  else
  {
    v19.origin.CGFloat x = x;
    v19.origin.CGFloat y = y;
    v19.size.CGFloat width = width;
    v19.size.CGFloat height = rect;
    *(double *)v3.i64 = CGRectGetWidth(v19);
    v4.f64[0] = NAN;
    v4.f64[1] = NAN;
    v5.i64[0] = 1.0;
    unint64_t v6 = vbslq_s8((int8x16_t)vnegq_f64(v4), v5, v3).u64[0];
  }
  CGFloat v7 = x;
  CGFloat v8 = y;
  CGFloat v15 = *(double *)&v6;
  CGFloat v9 = rect;
  if (fabs(CGRectGetHeight(*(CGRect *)(&v6 - 2))) < 1.0)
  {
    v20.origin.CGFloat x = x;
    v20.origin.CGFloat y = y;
    v20.size.CGFloat width = v15;
    v20.size.CGFloat height = rect;
    *(double *)v10.i64 = CGRectGetHeight(v20);
    v11.i64[0] = 1.0;
    v12.f64[0] = NAN;
    v12.f64[1] = NAN;
    *(void *)&CGFloat rect = vbslq_s8((int8x16_t)vnegq_f64(v12), v11, v10).u64[0];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  if (!CGRect.almostEqual(_:threshold:)(x, y, v15, rect, 0.1, v17.origin.x, v17.origin.y, v17.size.width, v17.size.height))
  {
    v17.origin.CGFloat x = x;
    v17.origin.CGFloat y = y;
    v17.size.CGFloat width = v15;
    v17.size.CGFloat height = rect;
    CRRegister.wrappedValue.setter();
  }
  uint64_t result = CRRegister.value.getter();
  if (vabdd_f64(v17.origin.x, v2) > 0.00174532925)
  {
    uint64_t result = CRRegister.value.getter();
    if (vabdd_f64(v17.origin.x, v2) > 0.01)
    {
      v17.origin.CGFloat x = v2;
      return CRRegister.value.setter();
    }
  }
  return result;
}

{
  CGFloat y;
  CGFloat x;
  double v2;
  int8x16_t v3;
  float64x2_t v4;
  int8x16_t v5;
  unint64_t v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  int8x16_t v10;
  int8x16_t v11;
  float64x2_t v12;
  uint64_t result;
  CGFloat width;
  CGFloat v15;
  CGFloat rect;
  CGRect v17;
  double v18;
  CGRect v19;
  CGRect v20;

  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v17, v17.origin.x);
  CGFloat x = v17.origin.x;
  CGFloat y = v17.origin.y;
  double v2 = v18;
  CGFloat width = v17.size.width;
  CGFloat rect = v17.size.height;
  if (fabs(CGRectGetWidth(v17)) >= 1.0)
  {
    *(double *)&unint64_t v6 = width;
  }
  else
  {
    v19.origin.CGFloat x = x;
    v19.origin.CGFloat y = y;
    v19.size.CGFloat width = width;
    v19.size.CGFloat height = rect;
    *(double *)v3.i64 = CGRectGetWidth(v19);
    v4.f64[0] = NAN;
    v4.f64[1] = NAN;
    v5.i64[0] = 1.0;
    unint64_t v6 = vbslq_s8((int8x16_t)vnegq_f64(v4), v5, v3).u64[0];
  }
  CGFloat v7 = x;
  CGFloat v8 = y;
  CGFloat v15 = *(double *)&v6;
  CGFloat v9 = rect;
  if (fabs(CGRectGetHeight(*(CGRect *)(&v6 - 2))) < 1.0)
  {
    v20.origin.CGFloat x = x;
    v20.origin.CGFloat y = y;
    v20.size.CGFloat width = v15;
    v20.size.CGFloat height = rect;
    *(double *)v10.i64 = CGRectGetHeight(v20);
    v11.i64[0] = 1.0;
    v12.f64[0] = NAN;
    v12.f64[1] = NAN;
    *(void *)&CGFloat rect = vbslq_s8((int8x16_t)vnegq_f64(v12), v11, v10).u64[0];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  if (!CGRect.almostEqual(_:threshold:)(x, y, v15, rect, 0.1, v17.origin.x, v17.origin.y, v17.size.width, v17.size.height))
  {
    v17.origin.CGFloat x = x;
    v17.origin.CGFloat y = y;
    v17.size.CGFloat width = v15;
    v17.size.CGFloat height = rect;
    CRRegister.wrappedValue.setter();
  }
  uint64_t result = CRRegister.wrappedValue.getter();
  if (vabdd_f64(v17.origin.x, v2) > 0.00174532925)
  {
    v17.origin.CGFloat x = v2;
    return CRRegister.wrappedValue.setter();
  }
  return result;
}

uint64_t specialized CanvasElement.coordinateSpace.setter(uint64_t a1, uint64_t (*a2)(void))
{
  a2(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v19, v19.origin.x);
  CGFloat x = v19.origin.x;
  CGFloat y = v19.origin.y;
  double v4 = v20;
  CGFloat width = v19.size.width;
  CGFloat rect = v19.size.height;
  if (fabs(CGRectGetWidth(v19)) >= 1.0)
  {
    *(double *)&unint64_t v8 = width;
  }
  else
  {
    v21.origin.CGFloat x = x;
    v21.origin.CGFloat y = y;
    v21.size.CGFloat width = width;
    v21.size.CGFloat height = rect;
    *(double *)v5.i64 = CGRectGetWidth(v21);
    v6.f64[0] = NAN;
    v6.f64[1] = NAN;
    v7.i64[0] = 1.0;
    unint64_t v8 = vbslq_s8((int8x16_t)vnegq_f64(v6), v7, v5).u64[0];
  }
  CGFloat v9 = x;
  CGFloat v10 = y;
  CGFloat v17 = *(double *)&v8;
  CGFloat v11 = rect;
  if (fabs(CGRectGetHeight(*(CGRect *)(&v8 - 2))) < 1.0)
  {
    v22.origin.CGFloat x = x;
    v22.origin.CGFloat y = y;
    v22.size.CGFloat width = v17;
    v22.size.CGFloat height = rect;
    *(double *)v12.i64 = CGRectGetHeight(v22);
    v13.i64[0] = 1.0;
    v14.f64[0] = NAN;
    v14.f64[1] = NAN;
    *(void *)&CGFloat rect = vbslq_s8((int8x16_t)vnegq_f64(v14), v13, v12).u64[0];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  if (!CGRect.almostEqual(_:threshold:)(x, y, v17, rect, 0.1, v19.origin.x, v19.origin.y, v19.size.width, v19.size.height))
  {
    v19.origin.CGFloat x = x;
    v19.origin.CGFloat y = y;
    v19.size.CGFloat width = v17;
    v19.size.CGFloat height = rect;
    CRRegister.wrappedValue.setter();
  }
  uint64_t result = CRRegister.wrappedValue.getter();
  if (vabdd_f64(v19.origin.x, v4) > 0.00174532925)
  {
    v19.origin.CGFloat x = v4;
    return CRRegister.wrappedValue.setter();
  }
  return result;
}

{
  CGFloat y;
  CGFloat x;
  double v4;
  int8x16_t v5;
  float64x2_t v6;
  int8x16_t v7;
  unint64_t v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  int8x16_t v12;
  int8x16_t v13;
  float64x2_t v14;
  uint64_t result;
  CGFloat width;
  CGFloat v17;
  CGFloat rect;
  CGRect v19;
  double v20;
  CGRect v21;
  CGRect v22;

  a2(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v19, v19.origin.x);
  CGFloat x = v19.origin.x;
  CGFloat y = v19.origin.y;
  double v4 = v20;
  CGFloat width = v19.size.width;
  CGFloat rect = v19.size.height;
  if (fabs(CGRectGetWidth(v19)) >= 1.0)
  {
    *(double *)&unint64_t v8 = width;
  }
  else
  {
    v21.origin.CGFloat x = x;
    v21.origin.CGFloat y = y;
    v21.size.CGFloat width = width;
    v21.size.CGFloat height = rect;
    *(double *)v5.i64 = CGRectGetWidth(v21);
    v6.f64[0] = NAN;
    v6.f64[1] = NAN;
    v7.i64[0] = 1.0;
    unint64_t v8 = vbslq_s8((int8x16_t)vnegq_f64(v6), v7, v5).u64[0];
  }
  CGFloat v9 = x;
  CGFloat v10 = y;
  CGFloat v17 = *(double *)&v8;
  CGFloat v11 = rect;
  if (fabs(CGRectGetHeight(*(CGRect *)(&v8 - 2))) < 1.0)
  {
    v22.origin.CGFloat x = x;
    v22.origin.CGFloat y = y;
    v22.size.CGFloat width = v17;
    v22.size.CGFloat height = rect;
    *(double *)v12.i64 = CGRectGetHeight(v22);
    v13.i64[0] = 1.0;
    v14.f64[0] = NAN;
    v14.f64[1] = NAN;
    *(void *)&CGFloat rect = vbslq_s8((int8x16_t)vnegq_f64(v14), v13, v12).u64[0];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  if (!CGRect.almostEqual(_:threshold:)(x, y, v17, rect, 0.1, v19.origin.x, v19.origin.y, v19.size.width, v19.size.height))
  {
    v19.origin.CGFloat x = x;
    v19.origin.CGFloat y = y;
    v19.size.CGFloat width = v17;
    v19.size.CGFloat height = rect;
    CRRegister.wrappedValue.setter();
  }
  uint64_t result = CRRegister.wrappedValue.getter();
  if (vabdd_f64(v19.origin.x, v4) > 0.00174532925)
  {
    v19.origin.CGFloat x = v4;
    return CRRegister.wrappedValue.setter();
  }
  return result;
}

uint64_t protocol witness for CanvasElement.frame.setter in conformance Signature()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*protocol witness for CanvasElement.frame.modify in conformance Signature(void *a1))()
{
  double v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

double protocol witness for CanvasElement.rotation.getter in conformance Signature()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t protocol witness for CanvasElement.rotation.setter in conformance Signature()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*protocol witness for CanvasElement.rotation.modify in conformance Signature(void *a1))()
{
  double v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t protocol witness for CanvasElement.thumbnail.getter in conformance Signature@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CRAsset();
  int8x16_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance Signature(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v2);
  v6[15] = 6;
  (*(void (**)(unsigned char *, uint64_t))(v4 + 16))(&v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)], a1);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

double protocol witness for PaperRenderable.frame.getter in conformance Signature()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance Signature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float64x2_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Signature.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized Signature.render<A>(in:id:capsule:options:));
  int8x16_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *int8x16_t v12 = v6;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return v14(a1, a2, a4, a5, a6);
}

uint64_t specialized Signature.render<A>(in:id:capsule:options:)(uint64_t a1)
{
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 12__isPlatformVersionAtLeast(2, 18, 1, 0) = v1;
  return MEMORY[0x270FA2498](specialized Signature.render<A>(in:id:capsule:options:), 0, 0);
}

uint64_t specialized Signature.render<A>(in:id:capsule:options:)()
{
  uint64_t v51 = v0;
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  CRRegister.wrappedValue.getter();
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    unint64_t v2 = *(void *)(v0 + 32);
    unint64_t v3 = *(void *)(v0 + 40);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    uint64_t v4 = *(void **)(v0 + 16);
    if (v4)
    {
      id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v4);
    }
    else
    {
      id v5 = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
    CRRegister.wrappedValue.getter();
    uint64_t v6 = *(void *)(v0 + 16);
    v53.value = *(unsigned __int8 *)(v0 + 24);
    id v7 = v5;
    v53.is_nil = 1;
    CGFloat v9 = (CGImage *)SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)((CGSize)__PAIR128__(v3, v2), *(UIColor_optional *)(&v6 - 1), v53, v8);

    if (v9)
    {
      CGFloat v10 = (CGImage *)[(CGImage *)v9 CGImage];
      if (v10)
      {
        CGFloat v11 = v10;
        int8x16_t v12 = *(CGContext **)(v0 + 112);
        CGContextSaveGState(v12);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
        CRRegister.wrappedValue.getter();
        CGFloat v13 = *(double *)(v0 + 16);
        CRRegister.wrappedValue.getter();
        CGFloat v14 = *(double *)(v0 + 16);
        CGFloat v15 = *(double *)(v0 + 24);
        CGFloat v16 = *(double *)(v0 + 32);
        CGFloat v17 = *(double *)(v0 + 40);
        v54.origin.CGFloat x = v14;
        v54.origin.CGFloat y = v15;
        v54.size.CGFloat width = v16;
        v54.size.CGFloat height = v17;
        double MidX = CGRectGetMidX(v54);
        v55.origin.CGFloat x = v14;
        v55.origin.CGFloat y = v15;
        v55.size.CGFloat width = v16;
        v55.size.CGFloat height = v17;
        double MidY = CGRectGetMidY(v55);
        CGAffineTransformMakeRotation(&v50, v13);
        long long v46 = *(_OWORD *)&v50.c;
        long long v48 = *(_OWORD *)&v50.a;
        CGFloat v20 = -MidY;
        tCGFloat x = v50.tx;
        tCGFloat y = v50.ty;
        CGAffineTransformMakeTranslation(&v50, -MidX, v20);
        CGFloat a = v50.a;
        CGFloat b = v50.b;
        CGFloat c = v50.c;
        CGFloat d = v50.d;
        CGFloat v27 = v50.tx;
        CGFloat v28 = v50.ty;
        *(CGFloat *)(v0 + 16) = v50.a;
        *(CGFloat *)(v0 + 24) = b;
        *(CGFloat *)(v0 + 32) = c;
        *(CGFloat *)(v0 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = d;
        *(CGFloat *)(v0 + 48) = v27;
        *(CGFloat *)(v0 + 56) = v28;
        *(_OWORD *)(v0 + 64) = v48;
        *(_OWORD *)(v0 + 8__isPlatformVersionAtLeast(2, 18, 1, 0) = v46;
        *(CGFloat *)(v0 + 96) = tx;
        *(CGFloat *)(v0 + 104) = ty;
        CGAffineTransformConcat(&v50, (CGAffineTransform *)(v0 + 16), (CGAffineTransform *)(v0 + 64));
        long long v47 = *(_OWORD *)&v50.c;
        long long v49 = *(_OWORD *)&v50.a;
        CGFloat v29 = v50.tx;
        CGFloat v30 = v50.ty;
        *(CGFloat *)(v0 + 16) = a;
        *(CGFloat *)(v0 + 24) = b;
        *(CGFloat *)(v0 + 32) = c;
        *(CGFloat *)(v0 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = d;
        *(CGFloat *)(v0 + 48) = v27;
        *(CGFloat *)(v0 + 56) = v28;
        CGAffineTransformInvert(&v50, (CGAffineTransform *)(v0 + 16));
        long long v31 = *(_OWORD *)&v50.a;
        long long v32 = *(_OWORD *)&v50.c;
        long long v33 = *(_OWORD *)&v50.tx;
        *(CGFloat *)(v0 + 96) = v29;
        *(CGFloat *)(v0 + 104) = v30;
        *(_OWORD *)(v0 + 16) = v31;
        *(_OWORD *)(v0 + 32) = v32;
        *(_OWORD *)(v0 + 64) = v49;
        *(_OWORD *)(v0 + 8__isPlatformVersionAtLeast(2, 18, 1, 0) = v47;
        *(_OWORD *)(v0 + 48) = v33;
        CGAffineTransformConcat(&v50, (CGAffineTransform *)(v0 + 64), (CGAffineTransform *)(v0 + 16));
        long long v34 = *(_OWORD *)&v50.c;
        long long v35 = *(_OWORD *)&v50.tx;
        *(_OWORD *)(v0 + 16) = *(_OWORD *)&v50.a;
        *(_OWORD *)(v0 + 32) = v34;
        *(_OWORD *)(v0 + 48) = v35;
        CGContextConcatCTM(v12, (CGAffineTransform *)(v0 + 16));
        CRRegister.wrappedValue.getter();
        CGFloat v36 = *(double *)(v0 + 16);
        CGFloat v37 = *(double *)(v0 + 24);
        CGFloat v38 = *(double *)(v0 + 32);
        CGFloat v39 = *(double *)(v0 + 40);
        v56.origin.CGFloat x = v36;
        v56.origin.CGFloat y = v37;
        v56.size.CGFloat width = v38;
        v56.size.CGFloat height = v39;
        double MinY = CGRectGetMinY(v56);
        v57.origin.CGFloat x = v36;
        v57.origin.CGFloat y = v37;
        v57.size.CGFloat width = v38;
        v57.size.CGFloat height = v39;
        CGFloat MaxY = CGRectGetMaxY(v57);
        *(void *)(v0 + 64) = 0x3FF0000000000000;
        *(void *)(v0 + 72) = 0;
        *(void *)(v0 + 8__isPlatformVersionAtLeast(2, 18, 1, 0) = 0;
        *(void *)(v0 + 88) = 0x3FF0000000000000;
        *(void *)(v0 + 96) = 0;
        *(void *)(v0 + 104) = 0;
        *(void *)(v0 + 16) = 0x3FF0000000000000;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = 0;
        *(_OWORD *)(v0 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = xmmword_20C8340F0;
        *(double *)(v0 + 56) = MinY + MaxY;
        CGAffineTransformConcat(&v50, (CGAffineTransform *)(v0 + 64), (CGAffineTransform *)(v0 + 16));
        long long v42 = *(_OWORD *)&v50.c;
        long long v43 = *(_OWORD *)&v50.tx;
        *(_OWORD *)(v0 + 16) = *(_OWORD *)&v50.a;
        *(_OWORD *)(v0 + 32) = v42;
        *(_OWORD *)(v0 + 48) = v43;
        CGContextConcatCTM(v12, (CGAffineTransform *)(v0 + 16));
        CRRegister.wrappedValue.getter();
        CGContextRef.draw(_:in:byTiling:)(v11, *(__C::CGRect *)(v0 + 16), 0);
        CGContextRestoreGState(v12);

        CGFloat v9 = v11;
      }
    }
  }
  uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
  return v44();
}

uint64_t base witness table accessor for CRStruct_Base_5 in Signature()
{
  return lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
}

uint64_t base witness table accessor for CRStruct_Base in Signature()
{
  return lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
}

uint64_t associated type witness table accessor for CRStruct_Base_5.Type_2 : CRDT in Signature()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<CGFloat> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CGFloat>);
}

uint64_t associated type witness table accessor for CRStruct_Base_5.Type_3 : CRDT in Signature()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<SignatureItem?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SignatureItem?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_5.Type_4 : CRDT in Signature()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<Color?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Color?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_5.Type_5 : CRDT in Signature()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<Int?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Int?>);
}

uint64_t base witness table accessor for CRDT in Signature()
{
  return lazy protocol witness table accessor for type CGRect and conformance CGRect((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
}

uint64_t base witness table accessor for CRMergeable in Signature()
{
  return lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
}

uint64_t base witness table accessor for CRType in Signature()
{
  return lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in Signature()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_5<Signature> and conformance CRStructMergeableDelta_5<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_5<Signature>);
}

uint64_t base witness table accessor for CRCodable in Signature()
{
  return lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
}

uint64_t sub_20C323BFC()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C323C40()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C323C9C()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C323CF8()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C323D54()
{
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for Signature(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    CGFloat v9 = (char *)a1 + v8;
    CGFloat v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    CGFloat v13 = (char *)a1 + v12;
    CGFloat v14 = (char *)a2 + v12;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = a3[7];
    CGFloat v17 = (char *)a1 + v16;
    double v18 = (char *)a2 + v16;
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    uint64_t v20 = a3[8];
    CGRect v21 = (char *)a1 + v20;
    CGRect v22 = (char *)a2 + v20;
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Signature(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = a1 + a2[8];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Signature(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Signature(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Signature(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for Signature(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C324854);
}

uint64_t sub_20C324854(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_11:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_12;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_11;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_11;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v12 = *(void *)(v16 - 8);
    uint64_t v13 = a3[8];
    goto LABEL_11;
  }
  unint64_t v18 = *(void *)(a1 + a3[9]);
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

uint64_t storeEnumTagSinglePayload for Signature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C324A74);
}

uint64_t sub_20C324A74(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
        if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
        {
          uint64_t v10 = v17;
          uint64_t v14 = *(void *)(v17 - 8);
          uint64_t v15 = a4[7];
        }
        else
        {
          uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
          if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
          {
            *(void *)(a1 + a4[9]) = (a2 - 1);
            return result;
          }
          uint64_t v10 = result;
          uint64_t v14 = *(void *)(result - 8);
          uint64_t v15 = a4[8];
        }
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for Signature()
{
  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CGFloat>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<SignatureItem?>(319, &lazy cache variable for type metadata for CRRegister<SignatureItem?>, &demangling cache variable for type metadata for SignatureItem?, (void (*)(void))lazy protocol witness table accessor for type SignatureItem? and conformance <A> A?);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<SignatureItem?>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Color?>, (uint64_t *)&demangling cache variable for type metadata for Color?, (void (*)(void))lazy protocol witness table accessor for type Color? and conformance <A> A?);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CRRegister<SignatureItem?>(319, &lazy cache variable for type metadata for CRRegister<Int?>, (uint64_t *)&demangling cache variable for type metadata for Int?, (void (*)(void))lazy protocol witness table accessor for type Int? and conformance <A> A?);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

void type metadata accessor for CRRegister<CGFloat>()
{
  if (!lazy cache variable for type metadata for CRRegister<CGFloat>)
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    unint64_t v0 = type metadata accessor for CRRegister();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<CGFloat>);
    }
  }
}

void type metadata accessor for CRRegister<SignatureItem?>(uint64_t a1, unint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    a4();
    unint64_t v6 = type metadata accessor for CRRegister();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

id one-time initialization function for maskAlphaVector()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00680]), sel_initWithX_Y_Z_W_, 0.0, 0.0, 0.0, 1.0);
  static UIImage.maskAlphaVector = (uint64_t)result;
  return result;
}

UIImage_optional __swiftcall UIImage.alphaMaskForSketch()()
{
  uint64_t v1 = objc_msgSend(v0, sel_CIImage);
  unint64_t v2 = v1;
  if (!v1)
  {
    id v32 = objc_msgSend(v0, sel_CGImage);
    if (!v32
      || (long long v33 = v32,
          id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00650]), sel_initWithCGImage_, v32),
          v33,
          !v34))
    {
      if (one-time initialization token for generativeLogger != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)generativeLogger);
      unint64_t v2 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v2, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl(&dword_20C2D7000, v2, v40, "Sketch conversion to CIImage failed", v41, 2u);
        MEMORY[0x210550270](v41, -1, -1);
      }
      goto LABEL_35;
    }
    unint64_t v2 = v34;
  }
  unint64_t v3 = v1;
  id v4 = specialized _toMonochrome #1 (_:) in UIImage.alphaMaskForSketch()((uint64_t)v2);
  if (!v4)
  {
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)generativeLogger);
    CGFloat v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      CGFloat v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)CGFloat v38 = 0;
      _os_log_impl(&dword_20C2D7000, v36, v37, "Sketch processing failed (monochrome)", v38, 2u);
      MEMORY[0x210550270](v38, -1, -1);
    }

    goto LABEL_34;
  }
  uint64_t v5 = v4;
  unint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_colorThresholdFilter);
  objc_msgSend(v7, sel_setInputImage_, v5);
  LODWORD(v8) = 981668463;
  objc_msgSend(v7, sel_setThreshold_, v8);
  id v9 = objc_msgSend(v7, sel_outputImage);

  if (!v9)
  {
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)generativeLogger);
    long long v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      CGFloat v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)CGFloat v45 = 0;
      _os_log_impl(&dword_20C2D7000, v43, v44, "Sketch processing failed (colorThreshold)", v45, 2u);
      MEMORY[0x210550270](v45, -1, -1);
    }

    goto LABEL_34;
  }
  id v10 = objc_msgSend(v6, sel_morphologyMaximumFilter);
  objc_msgSend(v10, sel_setInputImage_, v9);
  LODWORD(v11) = 30.0;
  objc_msgSend(v10, sel_setRadius_, v11);
  id v12 = objc_msgSend(v10, sel_outputImage);

  if (!v12)
  {
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)generativeLogger);
    long long v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      long long v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v49 = 0;
      _os_log_impl(&dword_20C2D7000, v47, v48, "Sketch processing failed (morphologyMaximum)", v49, 2u);
      MEMORY[0x210550270](v49, -1, -1);
    }

    goto LABEL_34;
  }
  id v13 = objc_msgSend(v6, sel_morphologyMinimumFilter);
  objc_msgSend(v13, sel_setInputImage_, v12);
  LODWORD(v14) = 20.0;
  objc_msgSend(v13, sel_setRadius_, v14);
  id v15 = objc_msgSend(v13, sel_outputImage);

  if (!v15)
  {
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)generativeLogger);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      Swift::Int_optional v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::Int_optional v53 = 0;
      _os_log_impl(&dword_20C2D7000, v51, v52, "Sketch processing failed (morphologyMinimum)", v53, 2u);
      MEMORY[0x210550270](v53, -1, -1);
    }

LABEL_34:
LABEL_35:

    CGFloat v30 = 0;
    goto LABEL_36;
  }
  objc_msgSend(v15, sel_extent);
  double Width = CGRectGetWidth(v59);
  [v2 extent];
  CGFloat v17 = (Width - CGRectGetWidth(v60)) * 0.5;
  objc_msgSend(v15, sel_extent);
  double Height = CGRectGetHeight(v61);
  [v2 extent];
  CGFloat v19 = (Height - CGRectGetHeight(v62)) * 0.5;
  [v2 extent];
  double v20 = CGRectGetWidth(v63);
  [v2 extent];
  double v21 = CGRectGetHeight(v64);
  v65.origin.CGFloat x = v17;
  v65.origin.CGFloat y = v19;
  v65.size.CGFloat width = v20;
  v65.size.CGFloat height = v21;
  CGFloat v22 = -CGRectGetMinX(v65);
  v66.origin.CGFloat x = v17;
  v66.origin.CGFloat y = v19;
  v66.size.CGFloat width = v20;
  v66.size.CGFloat height = v21;
  CGFloat MinY = CGRectGetMinY(v66);
  CGAffineTransformMakeTranslation(&v57, v22, -MinY);
  long long v55 = *(_OWORD *)&v57.c;
  long long v56 = *(_OWORD *)&v57.a;
  tCGFloat x = v57.tx;
  tCGFloat y = v57.ty;
  id v26 = objc_msgSend(v15, sel_imageByCroppingToRect_, v17, v19, v20, v21);
  *(_OWORD *)&v57.CGFloat a = v56;
  *(_OWORD *)&v57.CGFloat c = v55;
  v57.tCGFloat x = tx;
  v57.tCGFloat y = ty;
  id v27 = objc_msgSend(v26, sel_imageByApplyingTransform_, &v57);

  [v2 extent];
  double v28 = CGRectGetWidth(v67);
  objc_msgSend(v0, sel_size);
  CGFloat v30 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCIImage_scale_orientation_, v27, 0, v28 / v29);

LABEL_36:
  CGRect v54 = v30;
  result.value.super.Class isa = v54;
  result.is_nil = v31;
  return result;
}

uint64_t UIImage.padAndResizeImageToSquareOfLength(_:fillColor:)(void *a1, double a2)
{
  objc_msgSend(v2, sel_size);
  objc_msgSend(v2, sel_size);
  objc_msgSend(v2, sel_size);
  id v5 = objc_msgSend(v2, sel_size);
  double v7 = UnknownCanvasElementView.flags.modify(v5, v6);
  uint64_t v9 = v8;
  double v12 = UnknownCanvasElementView.flags.modify(v10, v11);
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827A0]), sel_initWithSize_, v12, v13);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(double *)(v15 + 24) = a2;
  *(double *)(v15 + 32) = v7;
  *(void *)(v15 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = v9;
  *(void *)(v15 + 48) = v2;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = partial apply for closure #1 in UIImage.padAndResizeImageToSquareOfLength(_:fillColor:);
  *(void *)(v16 + 24) = v15;
  v23[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v23[5] = v16;
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 1107296256;
  v23[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v23[3] = &block_descriptor_0;
  CGFloat v17 = _Block_copy(v23);
  id v18 = a1;
  id v19 = v2;
  swift_retain();
  swift_release();
  id v20 = objc_msgSend(v14, sel_imageWithActions_, v17);

  _Block_release(v17);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return (uint64_t)v20;
  }
  __break(1u);
  return result;
}

id closure #1 in UIImage.padAndResizeImageToSquareOfLength(_:fillColor:)(void *a1, id a2, void *a3)
{
  id v5 = objc_msgSend(a2, sel_setFill);
  double v7 = UnknownCanvasElementView.flags.modify(v5, v6);
  id v9 = objc_msgSend(a1, sel_fillRect_, 0.0, 0.0, v7, v8);
  double v11 = UnknownCanvasElementView.flags.modify(v9, v10);
  return objc_msgSend(a3, sel_drawInRect_, v11);
}

id specialized _toMonochrome #1 (_:) in UIImage.alphaMaskForSketch()(uint64_t a1)
{
  unint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_colorMatrixFilter);
  if (one-time initialization token for maskAlphaVector != -1) {
    swift_once();
  }
  uint64_t v4 = static UIImage.maskAlphaVector;
  objc_msgSend(v3, sel_setRVector_, static UIImage.maskAlphaVector);
  objc_msgSend(v3, sel_setGVector_, v4);
  objc_msgSend(v3, sel_setBVector_, v4);
  objc_msgSend(v3, sel_setAVector_, v4);
  objc_msgSend(v3, sel_setInputImage_, a1);
  id v5 = objc_msgSend(v3, sel_outputImage);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = objc_msgSend(v2, sel_colorInvertFilter);
    objc_msgSend(v7, sel_setInputImage_, v6);
    id v8 = objc_msgSend(v7, sel_outputImage);
  }
  else
  {

    return 0;
  }
  return v8;
}

uint64_t sub_20C325B48()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

id partial apply for closure #1 in UIImage.padAndResizeImageToSquareOfLength(_:fillColor:)(void *a1)
{
  return closure #1 in UIImage.padAndResizeImageToSquareOfLength(_:fillColor:)(a1, *(id *)(v1 + 16), *(void **)(v1 + 48));
}

uint64_t sub_20C325B9C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(uint64_t a1)
{
  return thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t TextBoxLayout.createView<A>(in:canvas:parent:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v36[0] = a4;
  v36[1] = a5;
  id v38 = a3;
  id v39 = a2;
  void v36[2] = a1;
  uint64_t v6 = type metadata accessor for CRKeyPath();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<TextBox>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  double v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  os_log_type_t v37 = (char *)v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v19 = (char *)v36 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v5, v6);
  uint64_t v20 = type metadata accessor for TextBox();
  uint64_t v21 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<TextBox> and conformance Ref<A>();
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v40 = v20;
  uint64_t v41 = v21;
  uint64_t v42 = &protocol witness table for TextBox;
  swift_getKeyPath();
  id v22 = v38;
  id v23 = v38;
  id v24 = v39;
  id v25 = v39;
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat x = v43.origin.x;
  CGFloat y = v43.origin.y;
  CGFloat width = v43.size.width;
  CGFloat height = v43.size.height;
  CGRectGetMinX(v43);
  v44.origin.CGFloat x = x;
  v44.origin.CGFloat y = y;
  v44.size.CGFloat width = width;
  v44.size.CGFloat height = height;
  CGRectGetMinY(v44);
  v45.origin.CGFloat x = x;
  v45.origin.CGFloat y = y;
  v45.size.CGFloat width = width;
  v45.size.CGFloat height = height;
  CGRectGetWidth(v45);
  v46.origin.CGFloat x = x;
  v46.origin.CGFloat y = y;
  v46.size.CGFloat width = width;
  v46.size.CGFloat height = height;
  CGFloat v30 = CGRectGetHeight(v46);
  uint64_t v31 = (uint64_t)v37;
  (*(void (**)(char *, char *, uint64_t, CGFloat))(v15 + 16))(v37, v19, v14, v30);
  id v32 = objc_allocWithZone((Class)type metadata accessor for TextBoxCanvasElementView());
  specialized TextBoxCanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(v31, v24, v22);
  uint64_t v34 = v33;

  (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
  return v34;
}

uint64_t closure #1 in static TextBoxLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, void (*a8)(char *), CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, double a17)
{
  *(void *)&v49[0] = a6;
  v49[1] = a17;
  uint64_t v50 = a8;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  MEMORY[0x270FA5388](v25 - 8);
  id v27 = (char *)v49 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  CGFloat v30 = (char *)v49 - v29;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v31 = *(void *)(v51 - 8);
  v32.n128_f64[0] = MEMORY[0x270FA5388](v51);
  uint64_t v34 = (char *)v49 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(char **)(a1 + 8);
  if (v35)
  {
    CGFloat v36 = *(void **)a1;
    LOBYTE(v53) = a4;
    static TextBoxLayout.load(_:canvasFrame:frame:rotation:anchor:offset:)(v36, v35, a3, (unsigned __int8 *)&v53, *(double *)&a5, v49[0], a7 & 1, (uint64_t)v30, a9, a10, a11, a12, a13);
    uint64_t v37 = v51;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v30, 1, v51) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v34, v30, v37);
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v27, v34, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v37);
      v50(v27);
      outlined destroy of Capsule<Shape>?((uint64_t)v27);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v34, v37);
    }
    outlined destroy of Capsule<Shape>?((uint64_t)v30);
  }
  if (a2)
  {
    id v38 = a2;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)logger);
    id v40 = a2;
    id v41 = a2;
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      CGRect v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v53 = v45;
      *(_DWORD *)CGRect v44 = 136315138;
      swift_getErrorValue();
      uint64_t v46 = Error.localizedDescription.getter();
      uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v42, v43, "Unable to decode string representation %s", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v45, -1, -1);
      MEMORY[0x210550270](v44, -1, -1);
    }
    else
    {
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v31 + 56))(v27, 1, 1, v51, v32);
  v50(v27);
  return outlined destroy of Capsule<Shape>?((uint64_t)v27);
}

uint64_t outlined destroy of Capsule<Shape>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void static TextBoxLayout.load(_:canvasFrame:frame:rotation:anchor:offset:)(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, double a5@<X4>, double a6@<X5>, char a7@<W6>, uint64_t a8@<X8>, CGFloat a9@<D0>, CGFloat a10@<D1>, CGFloat a11@<D2>, CGFloat a12@<D3>, double a13@<D4>)
{
  LOBYTE(v13) = a7;
  double v74 = a13;
  CGFloat v67 = a12;
  id v75 = a1;
  uint64_t v73 = a8;
  outlined init with take of CGRect?(a3, (uint64_t)v85);
  double v22 = *(double *)v85;
  double y = *(double *)&v85[1];
  double v25 = *(double *)&v85[2];
  double v24 = *(double *)&v85[3];
  uint64_t v26 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v72 = (char *)&v67 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v77 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  uint64_t v29 = (char *)&v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v79 = (char *)&v67 - v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x270FA5388](v32 - 8);
  size_t v68 = (char *)&v67 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x270FA5388](v34 - 8);
  char v78 = (char *)&v67 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v71);
  uint64_t v37 = (char *)&v67 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38);
  id v40 = (char *)&v67 - v39;
  int isEscapingClosureAtFileLocation = *a4;
  outlined init with take of CGRect?(a3, (uint64_t)v86);
  if (v87) {
    double x = 0.0;
  }
  else {
    double x = v22;
  }
  if (v87)
  {
    double y = 0.0;
    double v43 = 0.0;
  }
  else
  {
    double v43 = v24;
  }
  if (v87) {
    double v25 = 0.0;
  }
  v88.origin.double x = x;
  v88.origin.double y = y;
  v88.size.CGFloat width = v25;
  v88.size.CGFloat height = v43;
  if (CGRectIsEmpty(v88) && one-time initialization token for canvasElementDefaultSize != -1) {
    goto LABEL_35;
  }
  while (1)
  {
    if (one-time initialization token for maximumDropCanvasElementDimension != -1) {
      swift_once();
    }
    long long v70 = v37;
    long long v69 = v40;
    if (isEscapingClosureAtFileLocation != 9)
    {
      LOBYTE(aBlock[0]) = isEscapingClosureAtFileLocation;
      v89.origin.double x = a9;
      v89.origin.double y = a10;
      v89.size.CGFloat width = a11;
      v89.size.CGFloat height = v67;
      __C::CGRect v90 = CGRect.position(in:anchor:)(v89, (PaperKit::LayoutAnchor)aBlock);
      double x = v90.origin.x;
      double y = v90.origin.y;
    }
    if (v13) {
      double v44 = -0.0;
    }
    else {
      double v44 = a5;
    }
    if (v13) {
      double v45 = -0.0;
    }
    else {
      double v45 = a6;
    }
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
    lazy protocol witness table accessor for type Line and conformance Line();
    lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
    lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
    lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
    lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
    lazy protocol witness table accessor for type Star and conformance Star();
    lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
    TaggedValue_9.init(_:)();
    memset(v84, 0, sizeof(v84));
    uint64_t v46 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
    if (!v46)
    {
      __break(1u);
LABEL_37:
      __break(1u);
      return;
    }
    unint64_t v47 = v46;
    CGColorRef v48 = CGColorCreate(v46, (const CGFloat *)v84);

    uint64_t v49 = v77;
    if (!v48) {
      goto LABEL_37;
    }
    CGColorRef v83 = v48;
    uint64_t v82 = 0;
    uint64_t v50 = one-time initialization token for defaultTextBoxAttributes;
    swift_bridgeObjectRetain();
    if (v50 != -1) {
      swift_once();
    }
    id v51 = objc_allocWithZone(MEMORY[0x263F086A0]);
    swift_bridgeObjectRetain();
    uint64_t v52 = (void *)MEMORY[0x21054D080](v75, a2);
    swift_bridgeObjectRelease();
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v54 = objc_msgSend(v51, sel_initWithString_attributes_, v52, isa);

    lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
    id v75 = v54;
    CRAttributedString.init(_:)();
    long long v55 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    long long v56 = v79;
    id v40 = (char *)v76;
    v55(v79, v29, v76);
    CGAffineTransform v57 = *(void (**)(char *, char *, char *))(v49 + 16);
    v57(v29, v56, v40);
    uint64_t v58 = CRAttributedString.count.getter();
    double v13 = *(void (**)(char *, char *))(v49 + 8);
    v13(v29, v40);
    if (v58 < 1) {
      break;
    }
    CGFloat v67 = *(double *)&v55;
    a2 = v79;
    v57(v29, v79, v40);
    a6 = COERCE_DOUBLE(CRAttributedString.count.getter());
    v13(v29, v40);
    uint64_t v29 = (char *)swift_allocObject();
    *((void *)v29 + 2) = 0x3FF0000000000000;
    *((void *)v29 + 3) = a2;
    uint64_t v59 = swift_allocObject();
    *(void *)(v59 + 16) = partial apply for closure #1 in CRAttributedString<>.init(nsAttributedString:scale:);
    *(void *)(v59 + 24) = v29;
    *(void *)&aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    uint64_t v81 = (char *)v59;
    *(void *)&aBlock[0] = MEMORY[0x263EF8330];
    *(void *)&aBlock[1] = 1107296256;
    *(void *)&aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    *(void *)&aBlock[3] = &block_descriptor_1;
    a5 = COERCE_DOUBLE(_Block_copy(aBlock));
    uint64_t v37 = v81;
    swift_retain();
    swift_release();
    id v60 = v75;
    objc_msgSend(v75, sel_enumerateAttributesInRange_options_usingBlock_, 0, *(void *)&a6, 0, *(void *)&a5);

    _Block_release(*(const void **)&a5);
    int isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      uint64_t v61 = (uint64_t)v68;
      (*(void (**)(char *, char *, char *))&v67)(v68, a2, v40);
      swift_release();
      (*(void (**)(uint64_t, void, uint64_t, char *))(v77 + 56))(v61, 0, 1, v40);
      goto LABEL_29;
    }
    __break(1u);
LABEL_35:
    swift_once();
  }

  uint64_t v61 = (uint64_t)v68;
  v55(v68, v79, (uint64_t)v40);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(0);
  (*(void (**)(uint64_t, void, uint64_t, char *))(v49 + 56))(v61, 0, 1, v40);
LABEL_29:
  uint64_t v62 = v73;
  uint64_t v63 = (uint64_t)v70;
  uint64_t v64 = (uint64_t)v69;
  uint64_t v65 = qword_26C14D0B0;
  if ((qword_26C14D0B0 & ~qword_26C14D0A8) == 0) {
    uint64_t v65 = 0;
  }
  *(void *)&aBlock[0] = v65 | qword_26C14D0A8;
  Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v78, (uint64_t *)&v83, &v82, v61, (uint64_t *)aBlock, (uint64_t)v69, v44 + x + -0.5, v45 + y + -0.5, 1.0, 1.0, 5.0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  if (vabdd_f64(aBlock[0], v74) > 0.01)
  {
    aBlock[0] = v74;
    CRRegister.value.setter();
  }
  outlined init with copy of Shape(v64, v63);
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.init(_:id:)();
  outlined destroy of Shape(v64);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v62, 0, 1, v66);
}

id protocol witness for static Layout.canHandle(itemProvider:) in conformance TextBoxLayout(void *a1)
{
  uint64_t v2 = type metadata accessor for UTType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UTType.utf8PlainText.getter();
  uint64_t v6 = UTType.identifier.getter();
  uint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v9 = (void *)MEMORY[0x21054D080](v6, v8);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v9);

  return v10;
}

uint64_t outlined init with take of CGRect?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CGRect?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Rectangle and conformance Rectangle()
{
  unint64_t result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Ellipse and conformance Ellipse()
{
  unint64_t result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Line and conformance Line()
{
  unint64_t result = lazy protocol witness table cache variable for type Line and conformance Line;
  if (!lazy protocol witness table cache variable for type Line and conformance Line)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line and conformance Line);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Line and conformance Line;
  if (!lazy protocol witness table cache variable for type Line and conformance Line)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line and conformance Line);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Line and conformance Line;
  if (!lazy protocol witness table cache variable for type Line and conformance Line)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line and conformance Line);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Line and conformance Line;
  if (!lazy protocol witness table cache variable for type Line and conformance Line)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line and conformance Line);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Line and conformance Line;
  if (!lazy protocol witness table cache variable for type Line and conformance Line)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line and conformance Line);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Line and conformance Line;
  if (!lazy protocol witness table cache variable for type Line and conformance Line)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line and conformance Line);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Line and conformance Line;
  if (!lazy protocol witness table cache variable for type Line and conformance Line)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line and conformance Line);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BezierPath and conformance BezierPath()
{
  unint64_t result = lazy protocol witness table cache variable for type BezierPath and conformance BezierPath;
  if (!lazy protocol witness table cache variable for type BezierPath and conformance BezierPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierPath and conformance BezierPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BezierPath and conformance BezierPath;
  if (!lazy protocol witness table cache variable for type BezierPath and conformance BezierPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierPath and conformance BezierPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BezierPath and conformance BezierPath;
  if (!lazy protocol witness table cache variable for type BezierPath and conformance BezierPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierPath and conformance BezierPath);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble()
{
  unint64_t result = lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble;
  if (!lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble;
  if (!lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble;
  if (!lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble;
  if (!lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble;
  if (!lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble;
  if (!lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble;
  if (!lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect()
{
  unint64_t result = lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect;
  if (!lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect;
  if (!lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect;
  if (!lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect;
  if (!lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect;
  if (!lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect;
  if (!lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect;
  if (!lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon()
{
  unint64_t result = lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon;
  if (!lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon;
  if (!lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon;
  if (!lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon;
  if (!lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon;
  if (!lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon;
  if (!lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon;
  if (!lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Star and conformance Star()
{
  unint64_t result = lazy protocol witness table cache variable for type Star and conformance Star;
  if (!lazy protocol witness table cache variable for type Star and conformance Star)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star and conformance Star);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Star and conformance Star;
  if (!lazy protocol witness table cache variable for type Star and conformance Star)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star and conformance Star);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Star and conformance Star;
  if (!lazy protocol witness table cache variable for type Star and conformance Star)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star and conformance Star);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Star and conformance Star;
  if (!lazy protocol witness table cache variable for type Star and conformance Star)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star and conformance Star);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Star and conformance Star;
  if (!lazy protocol witness table cache variable for type Star and conformance Star)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star and conformance Star);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Star and conformance Star;
  if (!lazy protocol witness table cache variable for type Star and conformance Star)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star and conformance Star);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Star and conformance Star;
  if (!lazy protocol witness table cache variable for type Star and conformance Star)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star and conformance Star);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape()
{
  unint64_t result = lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape;
  if (!lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape;
  if (!lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape;
  if (!lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape;
  if (!lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape;
  if (!lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape;
  if (!lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape;
  if (!lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope()
{
  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope and conformance TextAttributeScope;
  if (!lazy protocol witness table cache variable for type TextAttributeScope and conformance TextAttributeScope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope and conformance TextAttributeScope);
  }
  return result;
}

uint64_t outlined init with copy of Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Shape();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Shape(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Shape();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20C327490()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in CRAttributedString<>.init(nsAttributedString:scale:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in CRAttributedString<>.init(nsAttributedString:scale:)(a1, a2, a3, *(double *)(v3 + 16));
}

uint64_t sub_20C3274AC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for TextBoxLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for TextBoxLayout(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for TextBoxLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for TextBoxLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for TextBoxLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for TextBoxLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextBoxLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C327750);
}

uint64_t sub_20C327750(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TextBoxLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C3277D0);
}

uint64_t sub_20C3277D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TextBoxLayout()
{
  uint64_t result = type metadata singleton initialization cache for TextBoxLayout;
  if (!type metadata singleton initialization cache for TextBoxLayout) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for TextBoxLayout()
{
  uint64_t result = type metadata accessor for CRKeyPath();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for LayoutItemProvider.Model : CRDT in TextBoxLayout()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
}

_UNKNOWN **associated type witness table accessor for LayoutItemProvider.Model : CanvasElement in TextBoxLayout()
{
  return &protocol witness table for Shape;
}

uint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Ref<TextBox> and conformance Ref<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Ref<TextBox> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<TextBox> and conformance Ref<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<TextBox>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<TextBox> and conformance Ref<A>);
  }
  return result;
}

uint64_t sub_20C327A18()
{
  return 24;
}

__n128 sub_20C327A24(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void ValueStepper.init(minValue:maxValue:unit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = v4;
  id v9 = (void *)MEMORY[0x21054D080](0x73756E696DLL, 0xE500000000000000);
  id v10 = self;
  id v11 = objc_msgSend(v10, sel_systemImageNamed_, v9);

  if (!v11)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit12ValueStepper_decreaseButton;
  double v13 = (objc_class *)type metadata accessor for StepperButton();
  id v14 = objc_allocWithZone(v13);
  *(void *)&v8[v12] = StepperButton.init(image:)(v11);
  uint64_t v15 = (void *)MEMORY[0x21054D080](1937075312, 0xE400000000000000);
  id v16 = objc_msgSend(v10, sel_systemImageNamed_, v15);

  if (!v16)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v17 = OBJC_IVAR____TtC8PaperKit12ValueStepper_increaseButton;
  id v18 = objc_allocWithZone(v13);
  *(void *)&v8[v17] = StepperButton.init(image:)(v16);
  uint64_t v19 = OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabel;
  *(void *)&v8[v19] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v20 = OBJC_IVAR____TtC8PaperKit12ValueStepper_contentStackView;
  *(void *)&v8[v20] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  *(void *)&v8[OBJC_IVAR____TtC8PaperKit12ValueStepper_interItemSpacing] = 0x4024000000000000;
  *(void *)&v8[OBJC_IVAR____TtC8PaperKit12ValueStepper_cornerRadius] = 0x4020000000000000;
  *(void *)&v8[OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabelWidth] = 0x405A000000000000;
  *(void *)&v8[OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabelBorderWidth] = 0x4008000000000000;
  uint64_t v21 = &v8[OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue];
  *(void *)uint64_t v21 = 0;
  v21[8] = 1;
  *(void *)&v8[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue] = a1;
  *(void *)&v8[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue] = a2;
  double v22 = &v8[OBJC_IVAR____TtC8PaperKit12ValueStepper_unit];
  *(void *)double v22 = a3;
  *((void *)v22 + 1) = a4;

  v110.receiver = v8;
  v110.super_class = ObjectType;
  id v23 = (char *)objc_msgSendSuper2(&v110, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v24 = OBJC_IVAR____TtC8PaperKit12ValueStepper_contentStackView;
  double v25 = *(void **)&v23[OBJC_IVAR____TtC8PaperKit12ValueStepper_contentStackView];
  uint64_t v26 = v23;
  objc_msgSend(v25, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v25, sel_setAxis_, 0);
  objc_msgSend(v25, sel_setAlignment_, 0);
  objc_msgSend(v25, sel_setDistribution_, 0);
  objc_msgSend(v25, sel_setSpacing_, *(double *)&v26[OBJC_IVAR____TtC8PaperKit12ValueStepper_interItemSpacing]);
  objc_msgSend(v26, sel_addSubview_, v25);
  uint64_t v27 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_20C8344C0;
  id v29 = objc_msgSend(v25, sel_topAnchor);
  id v30 = objc_msgSend(v26, sel_topAnchor);
  id v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v30);

  *(void *)(v28 + 32) = v31;
  id v32 = objc_msgSend(*(id *)&v23[v24], sel_leadingAnchor);
  id v33 = objc_msgSend(v26, sel_leadingAnchor);
  id v34 = objc_msgSend(v32, sel_constraintEqualToAnchor_, v33);

  *(void *)(v28 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = v34;
  id v35 = objc_msgSend(*(id *)&v23[v24], sel_bottomAnchor);
  id v36 = objc_msgSend(v26, sel_bottomAnchor);
  id v37 = objc_msgSend(v35, sel_constraintEqualToAnchor_, v36);

  *(void *)(v28 + 48) = v37;
  uint64_t v106 = v24;
  uint64_t v38 = *(void **)&v23[v24];
  uint64_t v39 = v23;
  id v40 = objc_msgSend(v38, sel_trailingAnchor);
  id v41 = objc_msgSend(v26, sel_trailingAnchor);
  id v42 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v41);

  *(void *)(v28 + 56) = v42;
  v108[0] = v28;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v27, sel_activateConstraints_, isa);

  uint64_t v44 = OBJC_IVAR____TtC8PaperKit12ValueStepper_decreaseButton;
  id v45 = *(id *)&v26[OBJC_IVAR____TtC8PaperKit12ValueStepper_decreaseButton];
  uint64_t v46 = (void *)MEMORY[0x21054D080](0xD00000000000001ALL, 0x800000020C84FD10);
  objc_msgSend(v45, sel_setAccessibilityIdentifier_, v46);

  uint64_t v47 = one-time initialization token for paperKitBundle;
  id v48 = *(id *)&v26[v44];
  if (v47 != -1) {
    swift_once();
  }
  v111._uint64_t countAndFlagsBits = 0xD000000000000039;
  v111._object = (void *)0x800000020C84FD30;
  v49._uint64_t countAndFlagsBits = 0x73756E694DLL;
  v49._object = (void *)0xE500000000000000;
  v50.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v50.value._object = (void *)0xEB00000000656C62;
  v51._uint64_t countAndFlagsBits = 0;
  v51._object = (void *)0xE000000000000000;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v49, v50, paperKitBundle, v51, v111)._countAndFlagsBits;
  uint64_t v53 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v48, sel_setAccessibilityLabel_, v53);

  id v54 = *(void **)&v26[v44];
  uint64_t v104 = *MEMORY[0x263F83260];
  objc_msgSend(v54, sel_setAccessibilityTraits_);
  objc_msgSend(v54, sel_setIsAccessibilityElement_, 1);
  id v55 = objc_msgSend(v54, sel_layer);
  uint64_t v103 = OBJC_IVAR____TtC8PaperKit12ValueStepper_cornerRadius;
  objc_msgSend(v55, sel_setCornerRadius_, *(double *)&v26[OBJC_IVAR____TtC8PaperKit12ValueStepper_cornerRadius]);

  id v56 = objc_msgSend(*(id *)&v26[v44], sel_layer);
  uint64_t v57 = *MEMORY[0x263F15A20];
  objc_msgSend(v56, sel_setCornerCurve_);

  objc_msgSend(*(id *)&v39[v106], sel_addArrangedSubview_, *(void *)&v26[v44]);
  uint64_t v58 = OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabel;
  uint64_t v59 = *(void **)&v26[OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabel];
  id v60 = self;
  id v61 = v59;
  id v62 = objc_msgSend(v60, sel_labelColor);
  objc_msgSend(v61, sel_setTextColor_, v62);

  uint64_t v63 = *(void **)&v26[v58];
  uint64_t v64 = *MEMORY[0x263F83570];
  double v65 = *MEMORY[0x263F81838];
  uint64_t v66 = (void *)*MEMORY[0x263F83470];
  CGFloat v67 = self;
  id v68 = v63;
  id v69 = v66;
  id v70 = objc_msgSend(v67, sel_traitCollectionWithPreferredContentSizeCategory_, v69);
  id v71 = objc_msgSend(self, sel__preferredFontForTextStyle_weight_, v64, v65);
  if (v71)
  {
    uint64_t v72 = v71;
    id v73 = objc_msgSend(v71, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v70);

    objc_msgSend(v68, sel_setFont_, v73);
    id v74 = *(id *)&v26[v58];
    id v75 = (void *)MEMORY[0x21054D080](0xD000000000000016, 0x800000020C84FD70);
    objc_msgSend(v74, sel_setAccessibilityIdentifier_, v75);

    uint64_t v76 = *(void **)&v26[v58];
    objc_msgSend(v76, sel_setAccessibilityTraits_, *MEMORY[0x263F832B8]);
    objc_msgSend(v76, sel_setTextAlignment_, 1);
    id v77 = objc_msgSend(v76, sel_layer);
    objc_msgSend(v77, sel_setCornerRadius_, *(double *)&v26[v103]);

    id v78 = objc_msgSend(*(id *)&v26[v58], (SEL)&selRef_isInCloud);
    objc_msgSend(v78, sel_setCornerCurve_, v57);

    id v79 = objc_msgSend(*(id *)&v26[v58], (SEL)&selRef_isInCloud);
    objc_msgSend(v79, sel_setBorderWidth_, *(double *)&v26[OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabelBorderWidth]);

    unint64_t v80 = *(void **)&v26[v58];
    objc_msgSend(v80, sel_setClipsToBounds_, 1);
    objc_msgSend(*(id *)&v39[v106], sel_addArrangedSubview_, v80);
    uint64_t v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16) = xmmword_20C8344D0;
    id v82 = objc_msgSend(v80, sel_widthAnchor);
    id v83 = objc_msgSend(v82, sel_constraintEqualToConstant_, *(double *)&v26[OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabelWidth]);

    *(void *)(v81 + 32) = v83;
    id v84 = objc_msgSend(*(id *)&v26[v58], sel_centerXAnchor);
    id v85 = objc_msgSend(v26, sel_centerXAnchor);
    id v86 = objc_msgSend(v84, sel_constraintEqualToAnchor_, v85);

    *(void *)(v81 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = v86;
    v108[0] = v81;
    specialized Array._endMutation()();
    Class v87 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v27, sel_activateConstraints_, v87);

    uint64_t v88 = OBJC_IVAR____TtC8PaperKit12ValueStepper_increaseButton;
    id v89 = *(id *)&v26[OBJC_IVAR____TtC8PaperKit12ValueStepper_increaseButton];
    __C::CGRect v90 = (void *)MEMORY[0x21054D080](0xD00000000000001ALL, 0x800000020C84FD90);
    objc_msgSend(v89, sel_setAccessibilityIdentifier_, v90);

    Class v91 = paperKitBundle.super.isa;
    id v92 = *(id *)&v26[v88];
    v112._object = (void *)0x800000020C84FDB0;
    v93._uint64_t countAndFlagsBits = 1937075280;
    v93._object = (void *)0xE400000000000000;
    v94.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v94.value._object = (void *)0xEB00000000656C62;
    v95._uint64_t countAndFlagsBits = 0;
    v95._object = (void *)0xE000000000000000;
    v112._uint64_t countAndFlagsBits = 0xD000000000000039;
    uint64_t v96 = NSLocalizedString(_:tableName:bundle:value:comment:)(v93, v94, (NSBundle)v91, v95, v112)._countAndFlagsBits;
    uint64_t v97 = (void *)MEMORY[0x21054D080](v96);
    swift_bridgeObjectRelease();
    objc_msgSend(v92, sel_setAccessibilityLabel_, v97);

    uint64_t v98 = *(void **)&v26[v88];
    objc_msgSend(v98, sel_setAccessibilityTraits_, v104);
    objc_msgSend(v98, sel_setIsAccessibilityElement_, 1);
    id v99 = objc_msgSend(v98, sel_layer);
    objc_msgSend(v99, sel_setCornerRadius_, *(double *)&v26[v103]);

    id v100 = objc_msgSend(*(id *)&v26[v88], sel_layer);
    objc_msgSend(v100, sel_setCornerCurve_, v57);

    objc_msgSend(*(id *)&v39[v106], sel_addArrangedSubview_, *(void *)&v26[v88]);
    uint64_t v109 = ObjectType;
    v108[0] = v26;
    long long v101 = v26;
    StepperButton.addTarget(_:action:for:)((uint64_t)v108, (uint64_t)sel_didTapLeftButton, 64);
    outlined destroy of Any?((uint64_t)v108);
    uint64_t v109 = ObjectType;
    v108[0] = v101;
    long long v102 = v101;
    StepperButton.addTarget(_:action:for:)((uint64_t)v108, (uint64_t)sel_didTapRightButton, 64);
    outlined destroy of Any?((uint64_t)v108);
    ValueStepper.updateUI()();

    return;
  }
LABEL_9:
  __break(1u);
}

void ValueStepper.updateUI()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabel);
  uint64_t v19 = ValueStepper.currentValue.getter();
  uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v21 = v3;
  v4._uint64_t countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper_unit);
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper_unit + 8);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)MEMORY[0x21054D080](v20, v21);
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setText_, v8);

  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue);
  BOOL v10 = v9 < *(void *)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue);
  BOOL v11 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue) < v9;
  uint64_t v12 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper_increaseButton);
  double v13 = (objc_class *)type metadata accessor for StepperButton();
  v18.receiver = v12;
  v18.super_class = v13;
  objc_msgSendSuper2(&v18, sel_setEnabled_, v10);
  StepperButton.updateUI()();
  v17.receiver = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit12ValueStepper_decreaseButton);
  v17.super_class = v13;
  objc_msgSendSuper2(&v17, sel_setEnabled_, v11);
  StepperButton.updateUI()();
  id v14 = objc_msgSend(v2, sel_layer);
  id v15 = objc_msgSend(self, sel_quaternarySystemFillColor);
  id v16 = objc_msgSend(v15, sel_CGColor);

  objc_msgSend(v14, sel_setBorderColor_, v16);
}

char *ValueStepper.didTapLeftButton()()
{
  __n128 result = (char *)ValueStepper.currentValue.getter();
  uint64_t v2 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    if (*(void *)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue] > (uint64_t)v2) {
      uint64_t v2 = *(char **)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue];
    }
    if ((uint64_t)v2 >= *(void *)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue]) {
      uint64_t v2 = *(char **)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue];
    }
    uint64_t v3 = &v0[OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue];
    *(void *)uint64_t v3 = v2;
    v3[8] = 0;
    ValueStepper.updateUI()();
    return (char *)objc_msgSend(v0, sel_sendActionsForControlEvents_, 4096);
  }
  return result;
}

uint64_t ValueStepper.currentValue.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue + 8) != 1) {
    return *(void *)v1;
  }
  uint64_t result = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue);
  *(void *)uint64_t v1 = result;
  v1[8] = 0;
  return result;
}

char *ValueStepper.didTapRightButton()()
{
  uint64_t result = (char *)ValueStepper.currentValue.getter();
  uint64_t v2 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    if (*(void *)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue] > (uint64_t)v2) {
      uint64_t v2 = *(char **)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue];
    }
    if ((uint64_t)v2 >= *(void *)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue]) {
      uint64_t v2 = *(char **)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue];
    }
    uint64_t v3 = &v0[OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue];
    *(void *)uint64_t v3 = v2;
    v3[8] = 0;
    ValueStepper.updateUI()();
    return (char *)objc_msgSend(v0, sel_sendActionsForControlEvents_, 4096);
  }
  return result;
}

uint64_t type metadata accessor for ValueStepper()
{
  return self;
}

unint64_t type metadata accessor for NSLayoutConstraint()
{
  unint64_t result = lazy cache variable for type metadata for NSLayoutConstraint;
  if (!lazy cache variable for type metadata for NSLayoutConstraint)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  }
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void specialized ValueStepper.init(coder:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x21054D080](0x73756E696DLL, 0xE500000000000000);
  uint64_t v3 = self;
  id v4 = objc_msgSend(v3, sel_systemImageNamed_, v2);

  if (!v4) {
    __break(1u);
  }
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit12ValueStepper_decreaseButton;
  uint64_t v6 = (objc_class *)type metadata accessor for StepperButton();
  id v7 = objc_allocWithZone(v6);
  *(void *)&v1[v5] = StepperButton.init(image:)(v4);
  uint64_t v8 = (void *)MEMORY[0x21054D080](1937075312, 0xE400000000000000);
  id v9 = objc_msgSend(v3, sel_systemImageNamed_, v8);

  if (!v9) {
    __break(1u);
  }
  uint64_t v10 = OBJC_IVAR____TtC8PaperKit12ValueStepper_increaseButton;
  id v11 = objc_allocWithZone(v6);
  *(void *)&v1[v10] = StepperButton.init(image:)(v9);
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabel;
  *(void *)&v1[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v13 = OBJC_IVAR____TtC8PaperKit12ValueStepper_contentStackView;
  *(void *)&v1[v13] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit12ValueStepper_interItemSpacing] = 0x4024000000000000;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit12ValueStepper_cornerRadius] = 0x4020000000000000;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabelWidth] = 0x405A000000000000;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabelBorderWidth] = 0x4008000000000000;
  id v14 = &v1[OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue];
  *(void *)id v14 = 0;
  v14[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata instantiation function for ToggleButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 48);
}

uint64_t type metadata completion function for ToggleButton()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = type metadata accessor for Optional();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      type metadata accessor for Inspected();
      uint64_t v0 = type metadata accessor for Binding();
      if (v4 <= 0x3F)
      {
        type metadata accessor for Environment<ColorScheme>.Content();
        uint64_t v0 = v5;
        if (v6 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for ToggleButton(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v54 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v54 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v53 = v8 + v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(*(void *)(v54 - 8) + 64);
  }
  else {
    size_t v9 = v8 + 1;
  }
  size_t __n = v9;
  size_t v55 = v9 + (v6 | 7);
  uint64_t v10 = *(void *)(type metadata accessor for ColorScheme() - 8);
  int v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v11 & 0xF8 | 7;
  unint64_t v56 = ((v6 + 16) & ~(unint64_t)v6) + v8 + 1;
  uint64_t v13 = 8;
  if (*(void *)(v10 + 64) > 8uLL) {
    uint64_t v13 = *(void *)(v10 + 64);
  }
  int v14 = (v11 | v6) & 0x100000;
  uint64_t v15 = *a2;
  *a1 = *a2;
  if ((v12 | v6) != 7
    || v14 != 0
    || v13
     + ((((v6 + 16) & ~(unint64_t)v6)
       + v8
       + 1
       + v12
       + ((v55
         + ((v8 + v6 + ((v6 + 32) & ~(unint64_t)v6)) & ~(unint64_t)v6)) & ~(v6 | 7))) & ~v12)
     + 1 > 0x18)
  {
    objc_super v18 = (uint64_t *)(v15 + (((v12 | v6) + 16) & ~(v12 | v6)));
LABEL_34:
    swift_retain();
    return v18;
  }
  uint64_t v19 = a1;
  uint64_t v46 = v10;
  unint64_t v20 = ~(unint64_t)v6;
  uint64_t v47 = ~(v6 | 7);
  uint64_t v48 = v8;
  uint64_t v49 = ~v12;
  uint64_t v50 = v13;
  unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  Swift::String v51 = v19;
  id v23 = (void *)(((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (void *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  *id v23 = *v24;
  uint64_t v25 = ((unint64_t)v23 + v6 + 8) & v20;
  uint64_t v26 = ((unint64_t)v24 + v6 + 8) & v20;
  uint64_t v27 = *(void (**)(void, void, void))(v5 + 16);
  swift_retain();
  swift_retain();
  v27(v25, v26, v54);
  uint64_t v28 = (void *)((v53 + v25) & v20);
  id v29 = (const void *)((v53 + v26) & v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))((v53 + v26) & ~v7, 1, v54))
  {
    memcpy(v28, v29, __n);
  }
  else
  {
    v27(v28, v29, v54);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v28, 0, 1, v54);
  }
  id v31 = (void *)(((unint64_t)v28 + v55) & v47);
  id v32 = (void *)(((unint64_t)v29 + v55) & v47);
  *id v31 = *v32;
  id v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  *id v33 = *v34;
  uint64_t v35 = ((unint64_t)v33 + v7 + 8) & v20;
  uint64_t v36 = ((unint64_t)v34 + v7 + 8) & v20;
  swift_retain();
  swift_retain();
  v27(v35, v36, v54);
  *(unsigned char *)(v35 + v48) = *(unsigned char *)(v36 + v48);
  id v37 = (void *)(((unint64_t)v31 + v56 + v12) & v49);
  uint64_t v38 = (void *)(((unint64_t)v32 + v56 + v12) & v49);
  unsigned int v39 = *((unsigned __int8 *)v38 + v50);
  unsigned int v40 = v39 - 2;
  if (v39 < 2)
  {
    objc_super v18 = v51;
LABEL_25:
    if (v39 != 1)
    {
LABEL_33:
      *id v37 = *v38;
      *((unsigned char *)v37 + v5__isPlatformVersionAtLeast(2, 18, 1, 0) = 0;
      goto LABEL_34;
    }
  }
  else
  {
    if (v50 <= 3) {
      uint64_t v41 = v50;
    }
    else {
      uint64_t v41 = 4;
    }
    objc_super v18 = v51;
    switch(v41)
    {
      case 1:
        int v42 = *(unsigned __int8 *)v38;
        break;
      case 2:
        int v42 = *(unsigned __int16 *)v38;
        break;
      case 3:
        int v42 = *(unsigned __int16 *)(((unint64_t)v32 + v56 + v12) & v49) | (*(unsigned __int8 *)((((unint64_t)v32 + v56 + v12) & v49) + 2) << 16);
        break;
      case 4:
        int v42 = *(_DWORD *)v38;
        break;
      default:
        goto LABEL_25;
    }
    int v43 = (v42 | (v40 << (8 * v50))) + 2;
    int v44 = v42 + 2;
    if (v50 < 4) {
      int v44 = v43;
    }
    if (v44 != 1) {
      goto LABEL_33;
    }
  }
  (*(void (**)(void *))(v46 + 16))(v37);
  *((unsigned char *)v37 + v5__isPlatformVersionAtLeast(2, 18, 1, 0) = 1;
  return v18;
}

uint64_t destroy for ToggleButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 31;
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v8 = v7 + 8 + v6;
  uint64_t v9 = ~v7;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v10(v8 & ~v7, v4);
  uint64_t v11 = *(void *)(v5 + 64);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((v8 | v7) + v11) & ~v7, 1, v4)) {
    v10(((v8 | v7) + v11) & ~v7, v4);
  }
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v11 + 1;
  }
  uint64_t v13 = ((((v8 | v7) + v11) & ~v7) + (v7 | 7) + v12) & ~(v7 | 7);
  swift_release();
  swift_release();
  v10((v7 + 8 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8)) & v9, v4);
  uint64_t v14 = *(void *)(type metadata accessor for ColorScheme() - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  id v16 = (unsigned __int8 *)((v11 + 1 + ((v7 + 16) & v9) + v15 + v13) & ~v15);
  unint64_t v17 = *(void *)(v14 + 64);
  if (v17 <= 8) {
    unint64_t v17 = 8;
  }
  unsigned int v18 = v16[v17];
  unsigned int v19 = v18 - 2;
  if (v18 >= 2)
  {
    if (v17 <= 3) {
      uint64_t v20 = v17;
    }
    else {
      uint64_t v20 = 4;
    }
    switch(v20)
    {
      case 1:
        int v21 = *v16;
        goto LABEL_17;
      case 2:
        int v21 = *(unsigned __int16 *)v16;
        goto LABEL_17;
      case 3:
        int v21 = *(unsigned __int16 *)v16 | (v16[2] << 16);
        goto LABEL_17;
      case 4:
        int v21 = *(_DWORD *)v16;
LABEL_17:
        int v22 = (v21 | (v19 << (8 * v17))) + 2;
        unsigned int v18 = v21 + 2;
        if (v17 < 4) {
          unsigned int v18 = v22;
        }
        break;
      default:
        break;
    }
  }
  if (v18 == 1)
  {
    id v23 = *(uint64_t (**)(void))(v14 + 8);
    return v23();
  }
  else
  {
    return swift_release();
  }
}

void *initializeWithCopy for ToggleButton(void *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (unint64_t)a2 + 15;
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 31;
  *a1 = v5;
  unint64_t v6 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  v3 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v6 = *(void *)v3;
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(v3 + 8);
  *(void *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v39 = v9 + 8;
  uint64_t v40 = ~v9;
  unint64_t v10 = (v9 + 8 + (((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  unint64_t v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  uint64_t v12 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  v12(v10, v11, v7);
  size_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = (void *)((v13 + v9 + v10) & ~v9);
  if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v8 + 48))((v13 + v9 + v11) & ~v9, 1, v7))
  {
    int v15 = *(_DWORD *)(v8 + 84);
    if (v15) {
      size_t v16 = v13;
    }
    else {
      size_t v16 = v13 + 1;
    }
    memcpy(v14, (const void *)((v13 + v9 + v11) & ~v9), v16);
  }
  else
  {
    v12((v13 + v9 + v10) & ~v9, (v13 + v9 + v11) & ~v9, v7);
    (*(void (**)(size_t, void, uint64_t, uint64_t))(v8 + 56))((v13 + v9 + v10) & ~v9, 0, 1, v7);
    int v15 = *(_DWORD *)(v8 + 84);
  }
  if (v15) {
    size_t v17 = v13;
  }
  else {
    size_t v17 = v13 + 1;
  }
  size_t v18 = (v9 | 7) + v17;
  unsigned int v19 = (void *)((((v13 + v9 + v11) & ~v9) + v18) & ~(v9 | 7));
  uint64_t v20 = (void *)(((unint64_t)v14 + v18) & ~(v9 | 7));
  *uint64_t v20 = *v19;
  int v21 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v22 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v21 = *v22;
  unint64_t v23 = ((unint64_t)v21 + v39) & v40;
  unint64_t v24 = ((unint64_t)v22 + v39) & v40;
  swift_retain();
  swift_retain();
  v12(v23, v24, v7);
  *(unsigned char *)(v23 + v13) = *(unsigned char *)(v24 + v13);
  uint64_t v25 = *(void *)(type metadata accessor for ColorScheme() - 8);
  uint64_t v26 = v25;
  uint64_t v27 = *(_DWORD *)(v25 + 80) & 0xF8 | 7;
  uint64_t v28 = v13 + 1 + v27 + ((v9 + 16) & v40);
  id v29 = (void *)(((unint64_t)v20 + v28) & ~v27);
  id v30 = (unsigned __int8 *)(((unint64_t)v19 + v28) & ~v27);
  if (*(void *)(v25 + 64) <= 8uLL) {
    uint64_t v31 = 8;
  }
  else {
    uint64_t v31 = *(void *)(v25 + 64);
  }
  unsigned int v32 = v30[v31];
  unsigned int v33 = v32 - 2;
  if (v32 >= 2)
  {
    if (v31 <= 3) {
      uint64_t v34 = v31;
    }
    else {
      uint64_t v34 = 4;
    }
    switch(v34)
    {
      case 1:
        int v35 = *v30;
        goto LABEL_22;
      case 2:
        int v35 = *(unsigned __int16 *)v30;
        goto LABEL_22;
      case 3:
        int v35 = *(unsigned __int16 *)v30 | (v30[2] << 16);
        goto LABEL_22;
      case 4:
        int v35 = *(_DWORD *)v30;
LABEL_22:
        int v36 = (v35 | (v33 << (8 * v31))) + 2;
        unsigned int v32 = v35 + 2;
        if (v31 < 4) {
          unsigned int v32 = v36;
        }
        break;
      default:
        break;
    }
  }
  if (v32 == 1)
  {
    (*(void (**)(void *))(v26 + 16))(v29);
    char v37 = 1;
  }
  else
  {
    *id v29 = *(void *)v30;
    swift_retain();
    char v37 = 0;
  }
  *((unsigned char *)v29 + v31) = v37;
  return a1;
}

void *assignWithCopy for ToggleButton(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 31;
  unint64_t v6 = (unint64_t)a1 + 15;
  *a1 = *a2;
  unint64_t v7 = (unint64_t)a1 + 31;
  swift_retain();
  swift_release();
  unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v8 = *(void *)v9;
  swift_retain();
  swift_release();
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)(v7 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v51 = v13 + 8;
  uint64_t v52 = ~v13;
  unint64_t v14 = (v13 + 8 + (v7 & 0xFFFFFFFFFFFFFFF8)) & ~v13;
  unint64_t v15 = (v13 + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v13;
  uint64_t v54 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24);
  v54(v14, v15, v10);
  size_t v16 = *(void *)(v11 + 64);
  size_t v17 = (void *)((v16 + v13 + v14) & ~v13);
  size_t v18 = (void *)((v16 + v13 + v15) & ~v13);
  unsigned int v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v15) = v19(v17, 1, v10);
  int v20 = v19(v18, 1, v10);
  if (v15)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v17, v18, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v10);
      goto LABEL_12;
    }
    int v21 = *(_DWORD *)(v12 + 84);
  }
  else
  {
    if (!v20)
    {
      v54((unint64_t)v17, (unint64_t)v18, v10);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v17, v10);
    int v21 = *(_DWORD *)(v12 + 84);
  }
  if (v21) {
    size_t v22 = v16;
  }
  else {
    size_t v22 = v16 + 1;
  }
  memcpy(v17, v18, v22);
LABEL_12:
  if (*(_DWORD *)(v12 + 84)) {
    size_t v23 = v16;
  }
  else {
    size_t v23 = v16 + 1;
  }
  size_t v24 = (v13 | 7) + v23;
  uint64_t v25 = (void *)(((unint64_t)v17 + v24) & ~(v13 | 7));
  uint64_t v26 = (void *)(((unint64_t)v18 + v24) & ~(v13 | 7));
  *uint64_t v25 = *v26;
  swift_retain();
  swift_release();
  uint64_t v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v27 = *v28;
  swift_retain();
  swift_release();
  unint64_t v29 = ((unint64_t)v27 + v51) & v52;
  unint64_t v30 = ((unint64_t)v28 + v51) & v52;
  v54(v29, v30, v10);
  *(unsigned char *)(v29 + v16) = *(unsigned char *)(v30 + v16);
  uint64_t v31 = type metadata accessor for ColorScheme();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(_DWORD *)(v32 + 80) & 0xF8 | 7;
  uint64_t v34 = v16 + 1 + v33 + ((v13 + 16) & v52);
  int v35 = (unsigned __int8 *)(((unint64_t)v25 + v34) & ~v33);
  int v36 = (unsigned __int8 *)(((unint64_t)v26 + v34) & ~v33);
  if (v35 != v36)
  {
    uint64_t v37 = v31;
    uint64_t v38 = *(void *)(v31 - 8);
    if (*(void *)(v32 + 64) <= 8uLL) {
      uint64_t v39 = 8;
    }
    else {
      uint64_t v39 = *(void *)(v32 + 64);
    }
    unsigned int v40 = v35[v39];
    unsigned int v41 = v40 - 2;
    if (v40 >= 2)
    {
      if (v39 <= 3) {
        uint64_t v42 = v39;
      }
      else {
        uint64_t v42 = 4;
      }
      switch(v42)
      {
        case 1:
          int v43 = *v35;
          goto LABEL_28;
        case 2:
          int v43 = *(unsigned __int16 *)v35;
          goto LABEL_28;
        case 3:
          int v43 = *(unsigned __int16 *)v35 | (v35[2] << 16);
          goto LABEL_28;
        case 4:
          int v43 = *(_DWORD *)v35;
LABEL_28:
          int v44 = (v43 | (v41 << (8 * v39))) + 2;
          unsigned int v40 = v43 + 2;
          if (v39 < 4) {
            unsigned int v40 = v44;
          }
          break;
        default:
          break;
      }
    }
    if (v40 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v38 + 8))(v35, v31);
    }
    else {
      swift_release();
    }
    unsigned int v45 = v36[v39];
    unsigned int v46 = v45 - 2;
    if (v45 >= 2)
    {
      if (v39 <= 3) {
        uint64_t v47 = v39;
      }
      else {
        uint64_t v47 = 4;
      }
      switch(v47)
      {
        case 1:
          int v48 = *v36;
          goto LABEL_42;
        case 2:
          int v48 = *(unsigned __int16 *)v36;
          goto LABEL_42;
        case 3:
          int v48 = *(unsigned __int16 *)v36 | (v36[2] << 16);
          goto LABEL_42;
        case 4:
          int v48 = *(_DWORD *)v36;
LABEL_42:
          int v49 = (v48 | (v46 << (8 * v39))) + 2;
          unsigned int v45 = v48 + 2;
          if (v39 < 4) {
            unsigned int v45 = v49;
          }
          break;
        default:
          break;
      }
    }
    if (v45 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v38 + 16))(v35, v36, v37);
      v35[v39] = 1;
    }
    else
    {
      *(void *)int v35 = *(void *)v36;
      v35[v39] = 0;
      swift_retain();
    }
  }
  return a1;
}

void *initializeWithTake for ToggleButton(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v3 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v3 = *(void *)v4;
  *(unsigned char *)(v3 + 8) = *(unsigned char *)(v4 + 8);
  unint64_t v5 = (void *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  void *v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v10 + 8;
  uint64_t v12 = ~v10;
  uint64_t v13 = ((unint64_t)v5 + v10 + 8) & ~v10;
  uint64_t v14 = ((unint64_t)v6 + v10 + 8) & ~v10;
  int v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v43(v13, v14, v7);
  size_t v15 = *(void *)(v8 + 64);
  size_t v16 = (void *)((v15 + v10 + v13) & ~v10);
  size_t v17 = (const void *)((v15 + v10 + v14) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v7))
  {
    int v18 = *(_DWORD *)(v9 + 84);
    if (v18) {
      size_t v19 = v15;
    }
    else {
      size_t v19 = v15 + 1;
    }
    memcpy(v16, v17, v19);
  }
  else
  {
    v43((uint64_t)v16, (v15 + v10 + v14) & ~v10, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v16, 0, 1, v7);
    int v18 = *(_DWORD *)(v9 + 84);
  }
  if (v18) {
    size_t v20 = v15;
  }
  else {
    size_t v20 = v15 + 1;
  }
  size_t v21 = (v10 | 7) + v20;
  size_t v22 = (void *)(((unint64_t)v17 + v21) & ~(v10 | 7));
  size_t v23 = (void *)(((unint64_t)v16 + v21) & ~(v10 | 7));
  *size_t v23 = *v22;
  size_t v24 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *size_t v24 = *v25;
  unint64_t v26 = ((unint64_t)v24 + v11) & v12;
  unint64_t v27 = ((unint64_t)v25 + v11) & v12;
  v43(v26, v27, v7);
  *(unsigned char *)(v26 + v15) = *(unsigned char *)(v27 + v15);
  uint64_t v28 = *(void *)(type metadata accessor for ColorScheme() - 8);
  uint64_t v29 = v28;
  uint64_t v30 = *(_DWORD *)(v28 + 80) & 0xF8 | 7;
  uint64_t v31 = v15 + 1 + v30 + ((v10 + 16) & v12);
  uint64_t v32 = (void *)(((unint64_t)v23 + v31) & ~v30);
  uint64_t v33 = (unsigned __int8 *)(((unint64_t)v22 + v31) & ~v30);
  if (*(void *)(v28 + 64) <= 8uLL) {
    uint64_t v34 = 8;
  }
  else {
    uint64_t v34 = *(void *)(v28 + 64);
  }
  unsigned int v35 = v33[v34];
  unsigned int v36 = v35 - 2;
  if (v35 >= 2)
  {
    if (v34 <= 3) {
      uint64_t v37 = v34;
    }
    else {
      uint64_t v37 = 4;
    }
    switch(v37)
    {
      case 1:
        int v38 = *v33;
        goto LABEL_22;
      case 2:
        int v38 = *(unsigned __int16 *)v33;
        goto LABEL_22;
      case 3:
        int v38 = *(unsigned __int16 *)v33 | (v33[2] << 16);
        goto LABEL_22;
      case 4:
        int v38 = *(_DWORD *)v33;
LABEL_22:
        int v39 = (v38 | (v36 << (8 * v34))) + 2;
        unsigned int v35 = v38 + 2;
        if (v34 < 4) {
          unsigned int v35 = v39;
        }
        break;
      default:
        break;
    }
  }
  if (v35 == 1)
  {
    (*(void (**)(void *))(v29 + 32))(v32);
    char v40 = 1;
  }
  else
  {
    char v40 = 0;
    *uint64_t v32 = *(void *)v33;
  }
  *((unsigned char *)v32 + v34) = v40;
  return a1;
}

void *assignWithTake for ToggleButton(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 31;
  unint64_t v6 = (unint64_t)a1 + 15;
  *a1 = *a2;
  unint64_t v7 = (unint64_t)a1 + 31;
  swift_release();
  v6 &= 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v6 = *(void *)v8;
  swift_release();
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)(v7 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v50 = v12 + 8;
  uint64_t v51 = ~v12;
  unint64_t v13 = (v12 + 8 + (v7 & 0xFFFFFFFFFFFFFFF8)) & ~v12;
  unint64_t v14 = (v12 + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v12;
  uint64_t v53 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 40);
  v53(v13, v14, v9);
  size_t v15 = *(void *)(v10 + 64);
  size_t v16 = (void *)((v15 + v12 + v13) & ~v12);
  size_t v17 = (void *)((v15 + v12 + v14) & ~v12);
  int v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v14) = v18(v16, 1, v9);
  int v19 = v18(v17, 1, v9);
  if (v14)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v16, v17, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v9);
      goto LABEL_12;
    }
    int v20 = *(_DWORD *)(v11 + 84);
  }
  else
  {
    if (!v19)
    {
      v53((unint64_t)v16, (unint64_t)v17, v9);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v16, v9);
    int v20 = *(_DWORD *)(v11 + 84);
  }
  if (v20) {
    size_t v21 = v15;
  }
  else {
    size_t v21 = v15 + 1;
  }
  memcpy(v16, v17, v21);
LABEL_12:
  if (*(_DWORD *)(v11 + 84)) {
    size_t v22 = v15;
  }
  else {
    size_t v22 = v15 + 1;
  }
  size_t v23 = (v12 | 7) + v22;
  size_t v24 = (void *)(((unint64_t)v16 + v23) & ~(v12 | 7));
  uint64_t v25 = (void *)(((unint64_t)v17 + v23) & ~(v12 | 7));
  *size_t v24 = *v25;
  swift_release();
  unint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v26 = *v27;
  swift_release();
  unint64_t v28 = ((unint64_t)v26 + v50) & v51;
  v53(v28, ((unint64_t)v27 + v50) & v51, v9);
  *(unsigned char *)(v28 + v15) = *(unsigned char *)((((unint64_t)v27 + v50) & v51) + v15);
  uint64_t v29 = type metadata accessor for ColorScheme();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(_DWORD *)(v30 + 80) & 0xF8 | 7;
  uint64_t v32 = v15 + 1 + v31 + ((v12 + 16) & v51);
  uint64_t v33 = (unsigned __int8 *)(((unint64_t)v24 + v32) & ~v31);
  uint64_t v34 = (unsigned __int8 *)(((unint64_t)v25 + v32) & ~v31);
  if (v33 != v34)
  {
    uint64_t v35 = v29;
    uint64_t v36 = *(void *)(v29 - 8);
    if (*(void *)(v30 + 64) <= 8uLL) {
      uint64_t v37 = 8;
    }
    else {
      uint64_t v37 = *(void *)(v30 + 64);
    }
    unsigned int v38 = v33[v37];
    unsigned int v39 = v38 - 2;
    if (v38 >= 2)
    {
      if (v37 <= 3) {
        uint64_t v40 = v37;
      }
      else {
        uint64_t v40 = 4;
      }
      switch(v40)
      {
        case 1:
          int v41 = *v33;
          goto LABEL_28;
        case 2:
          int v41 = *(unsigned __int16 *)v33;
          goto LABEL_28;
        case 3:
          int v41 = *(unsigned __int16 *)v33 | (v33[2] << 16);
          goto LABEL_28;
        case 4:
          int v41 = *(_DWORD *)v33;
LABEL_28:
          int v42 = (v41 | (v39 << (8 * v37))) + 2;
          unsigned int v38 = v41 + 2;
          if (v37 < 4) {
            unsigned int v38 = v42;
          }
          break;
        default:
          break;
      }
    }
    if (v38 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v36 + 8))(v33, v29);
    }
    else {
      swift_release();
    }
    unsigned int v43 = v34[v37];
    unsigned int v44 = v43 - 2;
    if (v43 >= 2)
    {
      if (v37 <= 3) {
        uint64_t v45 = v37;
      }
      else {
        uint64_t v45 = 4;
      }
      switch(v45)
      {
        case 1:
          int v46 = *v34;
          goto LABEL_42;
        case 2:
          int v46 = *(unsigned __int16 *)v34;
          goto LABEL_42;
        case 3:
          int v46 = *(unsigned __int16 *)v34 | (v34[2] << 16);
          goto LABEL_42;
        case 4:
          int v46 = *(_DWORD *)v34;
LABEL_42:
          int v47 = (v46 | (v44 << (8 * v37))) + 2;
          unsigned int v43 = v46 + 2;
          if (v37 < 4) {
            unsigned int v43 = v47;
          }
          break;
        default:
          break;
      }
    }
    if (v43 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v36 + 32))(v33, v34, v35);
      char v48 = 1;
    }
    else
    {
      char v48 = 0;
      *(void *)uint64_t v33 = *(void *)v34;
    }
    v33[v37] = v48;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ToggleButton(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(type metadata accessor for ColorScheme() - 8);
  uint64_t v10 = 8;
  if (*(void *)(v9 + 64) > 8uLL) {
    uint64_t v10 = *(void *)(v9 + 64);
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(v6 + 64);
  if (v7) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = v12 + 1;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v8) {
    goto LABEL_28;
  }
  uint64_t v14 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  uint64_t v15 = v10
      + ((((v11 + 16) & ~v11)
        + v12
        + 1
        + v14
        + (((v11 | 7) + v13 + ((v12 + v11 + ((v11 + 32) & ~v11)) & ~v11)) & ~(v11 | 7))) & ~v14)
      + 1;
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((a2 - v8 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v19 < 2)
    {
LABEL_28:
      if ((v7 & 0x80000000) != 0)
      {
        size_t v22 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
        return v22(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v11 + 24) & ~v11, v7, v5);
      }
      else
      {
        uint64_t v21 = *(void *)a1;
        if (*(void *)a1 >= 0xFFFFFFFFuLL) {
          LODWORD(v21) = -1;
        }
        return (v21 + 1);
      }
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_28;
  }
LABEL_20:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 > 3) {
      LODWORD(v15) = 4;
    }
    switch((int)v15)
    {
      case 2:
        LODWORD(v15) = *a1;
        break;
      case 3:
        LODWORD(v15) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v15) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v15) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v15 | v20) + 1;
}

void storeEnumTagSinglePayload for ToggleButton(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v26 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(type metadata accessor for ColorScheme() - 8);
  uint64_t v12 = 8;
  if (*(void *)(v11 + 64) > 8uLL) {
    uint64_t v12 = *(void *)(v11 + 64);
  }
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = (v14 + v13 + ((v13 + 32) & ~v13)) & ~v13;
  uint64_t v16 = v14 + 1;
  if (!v9) {
    ++v14;
  }
  uint64_t v17 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  size_t v18 = v12 + ((((v13 + 16) & ~v13) + v16 + v17 + (((v13 | 7) + v14 + v15) & ~(v13 | 7))) & ~v17) + 1;
  if (a3 <= v10)
  {
    int v19 = 0;
  }
  else if (v18 <= 3)
  {
    unsigned int v22 = ((a3 - v10 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
    if (HIWORD(v22))
    {
      int v19 = 4;
    }
    else if (v22 >= 0x100)
    {
      int v19 = 2;
    }
    else
    {
      int v19 = v22 > 1;
    }
  }
  else
  {
    int v19 = 1;
  }
  if (v10 < a2)
  {
    unsigned int v20 = ~v10 + a2;
    if (v18 < 4)
    {
      int v21 = (v20 >> (8 * v18)) + 1;
      if (v18)
      {
        int v23 = v20 & ~(-1 << (8 * v18));
        bzero(a1, v18);
        if (v18 == 3)
        {
          *(_WORD *)a1 = v23;
          a1[2] = BYTE2(v23);
        }
        else if (v18 == 2)
        {
          *(_WORD *)a1 = v23;
        }
        else
        {
          *a1 = v23;
        }
      }
    }
    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v20;
      int v21 = 1;
    }
    switch(v19)
    {
      case 1:
        a1[v18] = v21;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v21;
        return;
      case 3:
        goto LABEL_46;
      case 4:
        *(_DWORD *)&a1[v18] = v21;
        return;
      default:
        return;
    }
  }
  switch(v19)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x20C32ADC0);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v25 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
          v25((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v13 + 24) & ~v13, a2, v9, v7);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v24 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v24 = (a2 - 1);
          }
          *(void *)a1 = v24;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ToggleButton()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Environment<ColorScheme>.Content()
{
  if (!lazy cache variable for type metadata for Environment<ColorScheme>.Content)
  {
    type metadata accessor for ColorScheme();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<ColorScheme>.Content);
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in ToggleButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ToggleButton.binding.getter()
{
  type metadata accessor for Inspected();
  uint64_t v0 = type metadata accessor for Binding();
  return MEMORY[0x21054A870](v0);
}

uint64_t ToggleButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v28 = a2;
  uint64_t v5 = type metadata accessor for PlainButtonStyle();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v26 = v5;
  uint64_t v27 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v24 = v12;
  uint64_t v25 = v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1);
  unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = swift_allocObject();
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(a1 + 24);
  *(void *)(v17 + 16) = v19;
  *(void *)(v17 + 24) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v17 + v16, (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v29 = v19;
  uint64_t v30 = v18;
  uint64_t v31 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
  uint64_t v20 = v24;
  uint64_t v21 = v26;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v15, v20);
}

uint64_t closure #1 in ToggleButton.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Inspected();
  uint64_t v24 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v23 - v7;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = *(void *)(a2 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v11);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v25 = a3;
  uint64_t v26 = (char *)&v23 - v18;
  uint64_t v19 = type metadata accessor for ToggleButton();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1 + *(int *)(v19 + 52), v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v26, v13, a2);
    ToggleButton.binding.getter();
    Inspected.value.getter(v6, (uint64_t)v17);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v14 + 8);
    v21(v17, a2);
    if (v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v26, a2);
      type metadata accessor for Binding();
      MEMORY[0x21054A870]();
      Inspected.value.setter((uint64_t)v17, v6);
      Binding.wrappedValue.setter();
      return ((uint64_t (*)(char *, uint64_t))v21)(v26, a2);
    }
    v21(v26, a2);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1 + *(int *)(v19 + 48), a2);
  type metadata accessor for Binding();
  MEMORY[0x21054A870]();
  Inspected.value.setter((uint64_t)v17, v6);
  return Binding.wrappedValue.setter();
}

uint64_t closure #2 in ToggleButton.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v69 = type metadata accessor for ColorScheme();
  uint64_t v68 = *(void *)(v69 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v69);
  CGFloat v67 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v66 = (uint64_t)&v63 - v11;
  uint64_t v86 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Inspected();
  uint64_t v87 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v63 - v15;
  uint64_t v88 = a3;
  uint64_t v17 = type metadata accessor for ToggleButton();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  id v84 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  unsigned int v22 = (char *)&v63 - v21;
  uint64_t v23 = a1[1];
  uint64_t v24 = *(void (**)(char *, uint64_t *, uint64_t))(v18 + 16);
  id v85 = a1;
  uint64_t v25 = a1;
  uint64_t v83 = v18 + 16;
  uint64_t v26 = v24;
  v24((char *)&v63 - v21, v25, v17);
  uint64_t v65 = v14;
  uint64_t v64 = v16;
  uint64_t v63 = a2;
  if (!v23)
  {
    uint64_t v28 = *(void (**)(char *, uint64_t))(v18 + 8);
    v28(v22, v17);
    goto LABEL_6;
  }
  ToggleButton.binding.getter();
  Inspected.value.getter(v14, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v16, v14);
  char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v13, a2);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v22, v17);
  if ((v27 & 1) == 0)
  {
LABEL_6:
    uint64_t v30 = v85;
    uint64_t v32 = v84;
    id v70 = v28;
    uint64_t v31 = *v85;
LABEL_7:
    swift_retain();
    uint64_t v33 = static Alignment.center.getter();
    specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(64.0, 0, 0.0, 1, 64.0, 0, 36.0, 0, (uint64_t)v95, 0.0, 1, 36.0, 0, v33, v34, v31);
    swift_release();
    uint64_t v35 = v95[0];
    id v85 = (uint64_t *)v95[1];
    LODWORD(v84) = v96;
    uint64_t v82 = v97;
    int v81 = v98;
    uint64_t v80 = v99;
    int v79 = v100;
    uint64_t v78 = v101;
    int v77 = v102;
    uint64_t v76 = v103;
    int v75 = v104;
    uint64_t v74 = v105;
    int v73 = v106;
    uint64_t v72 = v107;
    uint64_t v71 = v108;
    int v36 = *((unsigned __int8 *)v30 + 16);
    v26(v32, v30, v17);
    if (v36 == 1)
    {
      uint64_t v37 = v64;
      ToggleButton.binding.getter();
      uint64_t v38 = v35;
      unsigned int v39 = v32;
      uint64_t v40 = v65;
      Inspected.value.getter(v65, (uint64_t)v13);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v37, v40);
      uint64_t v41 = v63;
      char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v13, v41);
      unsigned int v43 = v39;
      uint64_t v35 = v38;
      v70(v43, v17);
      if (v42)
      {
        uint64_t v44 = static Color.accentColor.getter();
LABEL_14:
        uint64_t v53 = v44;
        uint64_t result = static Edge.Set.all.getter();
        char v54 = (char)v84;
        char v94 = (char)v84;
        char v55 = v81;
        char v93 = v81;
        char v56 = v79;
        char v92 = v79;
        char v57 = v77;
        char v91 = v77;
        char v58 = v75;
        char v90 = v75;
        char v59 = v73;
        char v89 = v73;
        uint64_t v60 = v30[3];
        id v61 = v85;
        *(void *)a4 = v35;
        *(void *)(a4 + 8) = v61;
        *(unsigned char *)(a4 + 16) = v54;
        *(void *)(a4 + 24) = v82;
        *(unsigned char *)(a4 + 32) = v55;
        *(void *)(a4 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = v80;
        *(unsigned char *)(a4 + 48) = v56;
        *(void *)(a4 + 56) = v78;
        *(unsigned char *)(a4 + 64) = v57;
        *(void *)(a4 + 72) = v76;
        *(unsigned char *)(a4 + 8__isPlatformVersionAtLeast(2, 18, 1, 0) = v58;
        *(void *)(a4 + 88) = v74;
        *(unsigned char *)(a4 + 96) = v59;
        uint64_t v62 = v71;
        *(void *)(a4 + 104) = v72;
        *(void *)(a4 + 112) = v62;
        *(void *)(a4 + 12__isPlatformVersionAtLeast(2, 18, 1, 0) = v53;
        *(unsigned char *)(a4 + 128) = result;
        *(void *)(a4 + 136) = 0x4014000000000000;
        *(void *)(a4 + 144) = v60;
        *(_WORD *)(a4 + 152) = 256;
        return result;
      }
    }
    else
    {
      v70(v32, v17);
    }
    uint64_t v45 = v66;
    specialized Environment.wrappedValue.getter(v66);
    uint64_t v46 = v68;
    int v47 = v67;
    uint64_t v48 = v69;
    (*(void (**)(char *, void, uint64_t))(v68 + 104))(v67, *MEMORY[0x263F18508], v69);
    char v49 = static ColorScheme.== infix(_:_:)();
    uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
    v50(v47, v48);
    v50((char *)v45, v48);
    uint64_t v51 = self;
    uint64_t v52 = &selRef_secondarySystemBackgroundColor;
    if ((v49 & 1) == 0) {
      uint64_t v52 = &selRef_tertiarySystemBackgroundColor;
    }
    uint64_t v44 = MEMORY[0x21054A6C0](objc_msgSend(v51, *v52, v63));
    goto LABEL_14;
  }
  uint64_t v30 = v85;
  uint64_t v31 = v85[1];
  uint64_t v32 = v84;
  if (v31)
  {
    id v70 = v28;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_20C32BD94()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for ToggleButton();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v14 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v5 = v0 + v4;
  swift_release();
  swift_release();
  uint64_t v6 = *(void *)(v1 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v4 + v2[12], v1);
  uint64_t v8 = v0 + v4 + v2[13];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v1)) {
    v7(v8, v1);
  }
  uint64_t v9 = v5 + v2[14];
  swift_release();
  swift_release();
  type metadata accessor for Inspected();
  uint64_t v10 = type metadata accessor for Binding();
  v7(v9 + *(int *)(v10 + 32), v1);
  uint64_t v11 = v5 + v2[15];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, v4 + v14, v3 | 7);
}

uint64_t partial apply for closure #1 in ToggleButton.body.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(type metadata accessor for ToggleButton() - 8);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return closure #1 in ToggleButton.body.getter(v4, v1, v2);
}

uint64_t partial apply for closure #2 in ToggleButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in ToggleButton.body.getter(*(uint64_t **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type _ClipEffect<RoundedCorner> and conformance _ClipEffect<A>, &demangling cache variable for type metadata for _ClipEffect<RoundedCorner>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
    lazy protocol witness table accessor for type ModifiedContent<Image, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _FlexFrameLayout>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle;
  if (!lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle)
  {
    type metadata accessor for PlainButtonStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle);
  }
  return result;
}

uint64_t sub_20C32C24C()
{
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata instantiation function for Inspected(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t type metadata completion function for Inspected()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Inspected(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    *((unsigned char *)v4 + v6) = *((unsigned char *)a2 + v6);
  }
  else
  {
    uint64_t v10 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t destroy for Inspected(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for Inspected(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 48) + a1) = *(unsigned char *)(*(void *)(v5 + 48) + a2);
  return a1;
}

uint64_t assignWithCopy for Inspected(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 40) + a1) = *(unsigned char *)(*(void *)(v5 + 40) + a2);
  return a1;
}

uint64_t initializeWithTake for Inspected(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 32) + a1) = *(unsigned char *)(*(void *)(v5 + 32) + a2);
  return a1;
}

uint64_t assignWithTake for Inspected(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 24) + a1) = *(unsigned char *)(*(void *)(v5 + 24) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for Inspected(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_22;
      }
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_14;
    }
  }
LABEL_22:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + v6);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for Inspected(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x20C32C9FCLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFE)
        {
          a1[v9] = a2 + 1;
        }
        else
        {
          uint64_t v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for Inspected()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Inspected.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Inspected.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
  *(unsigned char *)(v2 + *(int *)(a2 + 28)) = 0;
  return result;
}

uint64_t Inspected.subscript.getter()
{
  return swift_getAtKeyPath();
}

uint64_t type metadata accessor for SeparatorView()
{
  return self;
}

id ShapeStyleEditingController.currentStrokeColor.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (!v4) {
    return 0;
  }
  unsigned int v5 = (void *)v4;
  uint64_t v6 = v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    && (uint64_t v7 = *(void *)(v6 + 8),
        uint64_t ObjectType = swift_getObjectType(),
        uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(ObjectType, v7),
        uint64_t v10 = swift_unknownObjectRelease(),
        v9))
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v9) + 0x438))(v10);

    unsigned int v5 = v9;
  }
  else
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
  }

  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = type metadata accessor for Shape();
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    outlined init with copy of Shape(v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), (uint64_t)v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v3, 0, 1, v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v3, 1, 1, v13);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Shape();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v3, 1, v13) == 1)
  {
    outlined destroy of Shape?((uint64_t)v3);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.getter();
  int v15 = (void *)v18[1];
  outlined destroy of Shape((uint64_t)v3);
  if (!v15) {
    return 0;
  }
  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v15);

  return v16;
}

uint64_t ShapeStyleEditingController.hasMultipleStrokeColors.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Shape();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller;
  uint64_t v9 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (!v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
LABEL_11:
    outlined destroy of Shape?((uint64_t)v3);
    return 0;
  }
  uint64_t v10 = (void *)v9;
  uint64_t v11 = v9 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v9 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    && (uint64_t v12 = *(void *)(v11 + 8),
        uint64_t ObjectType = swift_getObjectType(),
        uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(ObjectType, v12),
        uint64_t v15 = swift_unknownObjectRelease(),
        v14))
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v14) + 0x438))(v15);

    uint64_t v10 = v14;
  }
  else
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
  }

  if (*(void *)(v16 + 16))
  {
    outlined init with copy of Shape(v16 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1) {
    goto LABEL_11;
  }
  outlined init with take of Shape((uint64_t)v3, (uint64_t)v7);
  uint64_t v18 = MEMORY[0x210550400](v8);
  if (!v18)
  {
    uint64_t v17 = 0;
    goto LABEL_31;
  }
  uint64_t v19 = (void *)v18;
  uint64_t v20 = v18 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v18 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    && (uint64_t v21 = *(void *)(v20 + 8),
        uint64_t v22 = swift_getObjectType(),
        uint64_t v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v22, v21),
        uint64_t v24 = swift_unknownObjectRelease(),
        v23))
  {
    uint64_t v25 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v23) + 0x438))(v24);

    uint64_t v19 = v23;
  }
  else
  {
    uint64_t v25 = MEMORY[0x263F8EE78];
  }

  uint64_t v26 = *(void *)(v25 + 16);
  if (!v26)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = 0;
    goto LABEL_31;
  }
  unint64_t v27 = v25 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v34 = v25;
  uint64_t v35 = v7;
  uint64_t v28 = *(void *)(v5 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    uint64_t v29 = v37;
    CRRegister.wrappedValue.getter();
    uint64_t v30 = v36;
    if (!v29) {
      break;
    }
    if (!v36) {
      goto LABEL_30;
    }
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type Shape and conformance Shape(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
    id v31 = v29;
    char v32 = static _CFObject.== infix(_:_:)();

    if ((v32 & 1) == 0)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v17 = 1;
LABEL_28:
      uint64_t v7 = v35;
      goto LABEL_31;
    }
LABEL_21:
    v27 += v28;
    if (!--v26)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v17 = 0;
      goto LABEL_28;
    }
  }
  if (!v36) {
    goto LABEL_21;
  }
  uint64_t v29 = 0;
LABEL_30:
  uint64_t v7 = v35;
  swift_bridgeObjectRelease_n();

  uint64_t v17 = 1;
LABEL_31:
  outlined destroy of Shape((uint64_t)v7);
  return v17;
}

uint64_t ShapeStyleEditingController.currentStrokeWidth.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
      && (uint64_t v7 = *(void *)(v6 + 8),
          uint64_t ObjectType = swift_getObjectType(),
          uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(ObjectType, v7),
          uint64_t v10 = swift_unknownObjectRelease(),
          v9))
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v9) + 0x438))(v10);

      uint64_t v5 = v9;
    }
    else
    {
      uint64_t v11 = MEMORY[0x263F8EE78];
    }

    uint64_t v12 = *(void *)(v11 + 16);
    uint64_t v13 = type metadata accessor for Shape();
    uint64_t v14 = *(void *)(v13 - 8);
    if (v12)
    {
      outlined init with copy of Shape(v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), (uint64_t)v3);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v3, 0, 1, v13);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v3, 1, 1, v13);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for Shape();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v3, 1, v13) != 1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      CRRegister.wrappedValue.getter();
      double v15 = *(double *)&v17[1];
      outlined destroy of Shape((uint64_t)v3);
      goto LABEL_14;
    }
    outlined destroy of Shape?((uint64_t)v3);
  }
  if (one-time initialization token for shapeDefaultStrokeWidth != -1) {
    goto LABEL_21;
  }
  while (1)
  {
    double v15 = *(double *)&static UIConstants.shapeDefaultStrokeWidth;
LABEL_14:
    if ((~*(void *)&v15 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    if (v15 <= -9.22337204e18) {
      goto LABEL_19;
    }
    if (v15 < 9.22337204e18) {
      return (uint64_t)v15;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    swift_once();
  }
}

uint64_t ShapeStyleEditingController.hasMultipleStrokeWidths.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Shape();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller;
  uint64_t v9 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    uint64_t v11 = v9 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (MEMORY[0x210550400](v9 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
      && (uint64_t v12 = *(void *)(v11 + 8),
          uint64_t ObjectType = swift_getObjectType(),
          uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(ObjectType, v12),
          uint64_t v15 = swift_unknownObjectRelease(),
          v14))
    {
      uint64_t v16 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v14) + 0x438))(v15);

      uint64_t v10 = v14;
    }
    else
    {
      uint64_t v16 = MEMORY[0x263F8EE78];
    }

    if (*(void *)(v16 + 16))
    {
      outlined init with copy of Shape(v16 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v3);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1) {
      goto LABEL_11;
    }
    outlined init with take of Shape((uint64_t)v3, (uint64_t)v7);
    uint64_t v18 = MEMORY[0x210550400](v8);
    if (v18)
    {
      uint64_t v19 = (void *)v18;
      uint64_t v20 = v18 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
      if (MEMORY[0x210550400](v18 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
        && (uint64_t v21 = *(void *)(v20 + 8),
            uint64_t v22 = swift_getObjectType(),
            uint64_t v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v22, v21),
            uint64_t v24 = swift_unknownObjectRelease(),
            v23))
      {
        uint64_t v25 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v23) + 0x438))(v24);

        uint64_t v19 = v23;
      }
      else
      {
        uint64_t v25 = MEMORY[0x263F8EE78];
      }

      uint64_t v26 = *(void *)(v25 + 16);
      if (!v26)
      {
        swift_bridgeObjectRelease();
LABEL_23:
        uint64_t v17 = 0;
        goto LABEL_26;
      }
      unint64_t v27 = v25 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      uint64_t v28 = *(void *)(v5 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
        CRRegister.wrappedValue.getter();
        double v29 = v32;
        CRRegister.wrappedValue.getter();
        if (v29 != v32) {
          break;
        }
        v27 += v28;
        if (!--v26)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_23;
        }
      }
      swift_bridgeObjectRelease_n();
    }
    uint64_t v17 = 1;
LABEL_26:
    outlined destroy of Shape((uint64_t)v7);
    return v17;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
LABEL_11:
  outlined destroy of Shape?((uint64_t)v3);
  return 0;
}

id ShapeStyleEditingController.currentFillColor.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (void *)v4;
  uint64_t v6 = v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    && (uint64_t v7 = *(void *)(v6 + 8),
        uint64_t ObjectType = swift_getObjectType(),
        uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(ObjectType, v7),
        uint64_t v10 = swift_unknownObjectRelease(),
        v9))
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v9) + 0x438))(v10);

    uint64_t v5 = v9;
  }
  else
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
  }

  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = type metadata accessor for Shape();
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    outlined init with copy of Shape(v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), (uint64_t)v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v3, 0, 1, v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v3, 1, 1, v13);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Shape();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v3, 1, v13) == 1)
  {
    outlined destroy of Shape?((uint64_t)v3);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.getter();
  uint64_t v15 = (void *)v18[1];
  outlined destroy of Shape((uint64_t)v3);
  if (!v15) {
    return 0;
  }
  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v15);

  return v16;
}

uint64_t ShapeStyleEditingController.hasMultipleFillColors.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Shape();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller;
  uint64_t v9 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (!v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
LABEL_11:
    outlined destroy of Shape?((uint64_t)v3);
    return 0;
  }
  uint64_t v10 = (void *)v9;
  uint64_t v11 = v9 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v9 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    && (uint64_t v12 = *(void *)(v11 + 8),
        uint64_t ObjectType = swift_getObjectType(),
        uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(ObjectType, v12),
        uint64_t v15 = swift_unknownObjectRelease(),
        v14))
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v14) + 0x438))(v15);

    uint64_t v10 = v14;
  }
  else
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
  }

  if (*(void *)(v16 + 16))
  {
    outlined init with copy of Shape(v16 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1) {
    goto LABEL_11;
  }
  outlined init with take of Shape((uint64_t)v3, (uint64_t)v7);
  uint64_t v18 = MEMORY[0x210550400](v8);
  if (!v18) {
    goto LABEL_30;
  }
  uint64_t v19 = (void *)v18;
  uint64_t v20 = v18 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v18 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    && (uint64_t v21 = *(void *)(v20 + 8),
        uint64_t v22 = swift_getObjectType(),
        uint64_t v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v22, v21),
        uint64_t v24 = swift_unknownObjectRelease(),
        v23))
  {
    uint64_t v25 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v23) + 0x438))(v24);

    uint64_t v19 = v23;
  }
  else
  {
    uint64_t v25 = MEMORY[0x263F8EE78];
  }

  uint64_t v26 = *(void *)(v25 + 16);
  if (!v26)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = 0;
    goto LABEL_31;
  }
  unint64_t v27 = v25 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v34 = v25;
  uint64_t v35 = v7;
  uint64_t v28 = *(void *)(v5 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    double v29 = v37;
    CRRegister.wrappedValue.getter();
    uint64_t v30 = v36;
    if (!v29) {
      break;
    }
    if (!v36) {
      goto LABEL_29;
    }
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type Shape and conformance Shape(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
    id v31 = v29;
    char v32 = static _CFObject.== infix(_:_:)();

    if ((v32 & 1) == 0)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v17 = 1;
LABEL_27:
      uint64_t v7 = v35;
      goto LABEL_31;
    }
LABEL_20:
    v27 += v28;
    if (!--v26)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v17 = 0;
      goto LABEL_27;
    }
  }
  if (!v36) {
    goto LABEL_20;
  }
  double v29 = 0;
LABEL_29:
  uint64_t v7 = v35;
  swift_bridgeObjectRelease_n();

LABEL_30:
  uint64_t v17 = 1;
LABEL_31:
  outlined destroy of Shape((uint64_t)v7);
  return v17;
}

uint64_t ShapeStyleEditingController.hasMultipleOpacities.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Shape();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller;
  uint64_t v9 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    uint64_t v11 = v9 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (MEMORY[0x210550400](v9 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
      && (uint64_t v12 = *(void *)(v11 + 8),
          uint64_t ObjectType = swift_getObjectType(),
          uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(ObjectType, v12),
          uint64_t v15 = swift_unknownObjectRelease(),
          v14))
    {
      uint64_t v16 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v14) + 0x438))(v15);

      uint64_t v10 = v14;
    }
    else
    {
      uint64_t v16 = MEMORY[0x263F8EE78];
    }

    if (*(void *)(v16 + 16))
    {
      outlined init with copy of Shape(v16 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v3);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1) {
      goto LABEL_11;
    }
    outlined init with take of Shape((uint64_t)v3, (uint64_t)v7);
    uint64_t v18 = MEMORY[0x210550400](v8);
    if (v18)
    {
      uint64_t v19 = (void *)v18;
      uint64_t v20 = v18 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
      if (MEMORY[0x210550400](v18 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
        && (uint64_t v21 = *(void *)(v20 + 8),
            uint64_t v22 = swift_getObjectType(),
            uint64_t v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v22, v21),
            uint64_t v24 = swift_unknownObjectRelease(),
            v23))
      {
        uint64_t v25 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v23) + 0x438))(v24);

        uint64_t v19 = v23;
      }
      else
      {
        uint64_t v25 = MEMORY[0x263F8EE78];
      }

      uint64_t v26 = *(void *)(v25 + 16);
      if (!v26)
      {
        swift_bridgeObjectRelease();
LABEL_23:
        uint64_t v17 = 0;
        goto LABEL_26;
      }
      unint64_t v27 = v25 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      uint64_t v28 = *(void *)(v5 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
        CRRegister.wrappedValue.getter();
        double v29 = v32;
        CRRegister.wrappedValue.getter();
        if (v29 != v32) {
          break;
        }
        v27 += v28;
        if (!--v26)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_23;
        }
      }
      swift_bridgeObjectRelease_n();
    }
    uint64_t v17 = 1;
LABEL_26:
    outlined destroy of Shape((uint64_t)v7);
    return v17;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
LABEL_11:
  outlined destroy of Shape?((uint64_t)v3);
  return 0;
}

Swift::Void __swiftcall ShapeStyleEditingController.changeStrokeColor(_:)(UIColor_optional a1)
{
  Class isa = a1.value.super.isa;
  uint64_t v3 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller, *(void *)&a1.is_nil);
  if (!v3) {
    goto LABEL_10;
  }
  uint64_t v4 = (void *)v3;
  uint64_t v5 = v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x210550400](v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    || (uint64_t v6 = *(void *)(v5 + 8),
        uint64_t ObjectType = swift_getObjectType(),
        uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6),
        swift_unknownObjectRelease(),
        !v8))
  {

LABEL_10:
    ShapeStyleEditingController.updateUIStrokeColor()();
    ShapeStyleEditingController.updateUIStrokeWidth()();
    return;
  }
  uint64_t v9 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *((unsigned char *)v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  uint64_t v10 = *(void *)((char *)v8 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v10)
  {
    (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *v8) + 0x440))(v16, *(void *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
    uint64_t v11 = v17;
    uint64_t v12 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    if (isa)
    {
      uint64_t v13 = isa;
      Color.init(cgColor:)((CGColor *)[(objc_class *)v13 CGColor], &v15);

      uint64_t v14 = v15;
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    (*(void (**)(CGColor **, uint64_t, uint64_t))(v12 + 112))(&v15, v11, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    *((unsigned char *)v4 + v9) = 0;

    goto LABEL_10;
  }
  __break(1u);
}

Swift::Void __swiftcall ShapeStyleEditingController.updateUIStrokeWidth()()
{
  char v1 = ShapeStyleEditingController.hasMultipleStrokeWidths.getter();
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView);
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_strokeWidthControl;
  id v11 = *(id *)(v2 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_strokeWidthControl);
  if (v1)
  {
    ShapeEditingControl.setButtonMultiSelectBackground()();

    uint64_t v4 = *(void **)(v2 + v3);
    uint64_t v5 = (objc_class *)type metadata accessor for ShapeEditingControl();
    v13.receiver = v4;
    v13.super_class = v5;
    uint64_t v6 = v4;
    objc_msgSendSuper2(&v13, sel_setUserInteractionEnabled_, 1);
    v12.receiver = v6;
    v12.super_class = v5;
    LODWORD(v5) = objc_msgSendSuper2(&v12, sel_isUserInteractionEnabled);
    uint64_t v7 = self;
    uint64_t v8 = &selRef_secondaryLabelColor;
    if (!v5) {
      uint64_t v8 = &selRef_quaternaryLabelColor;
    }
    id v9 = [v7 *v8];
    objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button], sel_setTitleColor_forState_, v9, 0);
  }
  else
  {
    uint64_t v10 = ShapeStyleEditingController.currentStrokeWidth.getter();
    ShapeEditingControl.setButtonValue(_:isPercent:)((float)v10, 0);
  }
}

Swift::Void __swiftcall ShapeStyleEditingController.updateUIStrokeColor()()
{
  char v1 = v0;
  id v2 = ShapeStyleEditingController.currentStrokeColor.getter();
  if (v2)
  {
    id v12 = v2;
    uint64_t v3 = (*(uint64_t (**)(void))&v0[OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider])();
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      ShapeStyleEditingController.canvasUserInterfaceStyle.getter();
      uint64_t v5 = (void *)static PKInkingTool.convertColor(_:from:to:)();
      id v6 = objc_msgSend(v4, sel_traitCollection);
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v1;
      *(void *)(v7 + 24) = v5;
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = partial apply for closure #1 in ShapeStyleEditingController.updateUIStrokeColor();
      *(void *)(v8 + 24) = v7;
      aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
      double aBlock[5] = v8;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_37;
      id v9 = _Block_copy(aBlock);
      id v10 = v1;
      id v11 = v5;
      swift_retain();
      swift_release();
      objc_msgSend(v6, sel_performAsCurrentTraitCollection_, v9);

      _Block_release(v9);
      LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (v4) {
        __break(1u);
      }
    }
    else
    {
    }
  }
}

void closure #1 in ShapeStyleEditingController.updateUIStrokeColor()(uint64_t a1, objc_class *a2)
{
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView);
  id v4 = *(id *)(v3 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_strokeColorControl);
  v9.is_nil = ShapeStyleEditingController.hasMultipleStrokeColors.getter() & 1;
  v9.value.super.Class isa = a2;
  ShapeEditingControl.setButtonBackground(dynamicColor:showMultipleShapesUI:)(v9, v5);

  id v7 = *(id *)(v3 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactColorControlForArrows);
  v10.is_nil = ShapeStyleEditingController.hasMultipleStrokeColors.getter() & 1;
  v10.value.super.Class isa = a2;
  ShapeEditingControl.setButtonBackground(dynamicColor:showMultipleShapesUI:)(v10, v6);
}

Swift::Void __swiftcall ShapeStyleEditingController.changeFillColor(_:)(UIColor_optional a1)
{
  Class isa = a1.value.super.isa;
  uint64_t v3 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller, *(void *)&a1.is_nil);
  if (!v3) {
    goto LABEL_10;
  }
  id v4 = (void *)v3;
  uint64_t v5 = v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x210550400](v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    || (uint64_t v6 = *(void *)(v5 + 8),
        uint64_t ObjectType = swift_getObjectType(),
        uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6),
        swift_unknownObjectRelease(),
        !v8))
  {

LABEL_10:
    ShapeStyleEditingController.updateUIFillColor()();
    return;
  }
  uint64_t v9 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *((unsigned char *)v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  uint64_t v10 = *(void *)((char *)v8 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v10)
  {
    (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *v8) + 0x440))(v16, *(void *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
    uint64_t v11 = v17;
    uint64_t v12 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    if (isa)
    {
      objc_super v13 = isa;
      Color.init(cgColor:)((CGColor *)[(objc_class *)v13 CGColor], &v15);

      uint64_t v14 = v15;
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    (*(void (**)(CGColor **, uint64_t, uint64_t))(v12 + 88))(&v15, v11, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    *((unsigned char *)v4 + v9) = 0;

    goto LABEL_10;
  }
  __break(1u);
}

Swift::Void __swiftcall ShapeStyleEditingController.updateUIFillColor()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))&v0[OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider])();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v15 = 0;
    id v4 = ShapeStyleEditingController.currentFillColor.getter();
    if (v4)
    {
      uint64_t v5 = v4;
      ShapeStyleEditingController.canvasUserInterfaceStyle.getter();
      uint64_t v6 = static PKInkingTool.convertColor(_:from:to:)();

      uint64_t v15 = (void *)v6;
    }
    id v7 = objc_msgSend(v3, sel_traitCollection);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v1;
    *(void *)(v8 + 24) = &v15;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = partial apply for closure #1 in ShapeStyleEditingController.updateUIFillColor();
    *(void *)(v9 + 24) = v8;
    aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
    double aBlock[5] = v9;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_2;
    uint64_t v10 = _Block_copy(aBlock);
    id v11 = v1;
    swift_retain();
    swift_release();
    objc_msgSend(v7, sel_performAsCurrentTraitCollection_, v10);

    _Block_release(v10);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      objc_super v13 = v15;
      swift_release();
    }
  }
}

void closure #1 in ShapeStyleEditingController.updateUIFillColor()(uint64_t a1, id *a2)
{
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView);
  id v4 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_fillColorControl);
  uint64_t v5 = (objc_class *)*a2;
  id v6 = *a2;
  id v7 = v4;
  v15.is_nil = ShapeStyleEditingController.hasMultipleFillColors.getter() & 1;
  v15.value.super.Class isa = v5;
  ShapeEditingControl.setButtonBackground(dynamicColor:showMultipleShapesUI:)(v15, v8);

  uint64_t v9 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactColorControlForArrows);
  id v10 = *a2;
  id v13 = v10;
  id v11 = v9;
  v16.is_nil = ShapeStyleEditingController.hasMultipleFillColors.getter() & 1;
  v16.value.super.Class isa = (Class)v10;
  ShapeEditingControl.setButtonBackground(dynamicColor:showMultipleShapesUI:)(v16, v12);
}

uint64_t ShapeStyleEditingController.canvasUserInterfaceStyle.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
    {
      uint64_t v5 = *(void *)(v4 + 8);
      uint64_t ObjectType = swift_getObjectType();
      id v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);

      swift_unknownObjectRelease();
      if (v7)
      {
LABEL_7:
        id v8 = objc_msgSend(v7, sel_traitCollection);
        id v9 = objc_msgSend(v8, sel_userInterfaceStyle);

        return (uint64_t)v9;
      }
    }
    else
    {
    }
  }
  id v7 = (void *)(*(uint64_t (**)(void))(v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider))();
  if (v7) {
    goto LABEL_7;
  }
  return 1;
}

Swift::Void __swiftcall ShapeStyleEditingController.didTapStrokeColorButton()()
{
}

void ShapeStyleEditingController.didTapFillColorButton()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider))();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v14 = (UIViewController *)objc_msgSend(objc_allocWithZone(MEMORY[0x263F825E0]), sel_init);
    [(UIViewController *)v14 setModalPresentationStyle:7];
    [(UIViewController *)v14 _setAllowsNoColor:1];
    id v4 = ShapeStyleEditingController.currentFillColor.getter();
    if (!v4) {
      id v4 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_defaultFillColor);
    }
    uint64_t v5 = v4;
    ShapeStyleEditingController.canvasUserInterfaceStyle.getter();
    id v6 = (void *)static PKInkingTool.convertColor(_:from:to:)();

    [(UIViewController *)v14 setSelectedColor:v6];
    id v7 = [(UIViewController *)v14 popoverPresentationController];
    if (v7)
    {
      id v8 = v7;
      [(UIPopoverPresentationController *)v7 setSourceView:*(void *)(*(void *)(*(void *)(v1+ OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView)+ OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_fillColorControl)+ OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button)];
    }
    id v9 = [(UIViewController *)v14 popoverPresentationController];
    if (v9)
    {
      id v10 = v9;
      [(UIPopoverPresentationController *)v9 setDelegate:*(void *)(*(void *)(v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView)+ OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_fillColorControl)];
    }
    id v11 = [(UIViewController *)v14 popoverPresentationController];
    [(UIPopoverPresentationController *)v11 _setIgnoresKeyboardNotifications:1];

    uint64_t v12 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
    if (v12)
    {
      id v13 = (void *)v12;
      CanvasElementController.configureViewControllerForPresentingAsPopover(viewController:)(v14);
    }
    [(UIViewController *)v14 setDelegate:v1];
    [(UIViewController *)v14 _setShouldUseDarkGridInDarkMode:1];
    *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_editingAttribute) = 1;
    objc_msgSend(v3, sel_presentViewController_animated_completion_, v14, 1, 0);
  }
}

void ShapeStyleEditingController.didTapStrokeWidthButton()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider))();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = ShapeStyleEditingController.currentStrokeWidth.getter();
    if (one-time initialization token for shapeStrokeWidthUnitString != -1) {
      swift_once();
    }
    long long v5 = static UIConstants.shapeStrokeWidthUnitString;
    objc_allocWithZone((Class)type metadata accessor for StrokeWidthViewController());
    swift_bridgeObjectRetain();
    UIColor_optional v15 = (UIViewController *)ValueEditingViewController.init(minValue:maxValue:currentValue:unit:contentViewMargin:)(1, 30, v4, v5, *((uint64_t *)&v5 + 1), 10.0);
    swift_unknownObjectWeakAssign();
    [(UIViewController *)v15 setModalPresentationStyle:7];
    id v6 = [(UIViewController *)v15 popoverPresentationController];
    id v7 = v6;
    if (v6)
    {
      [(UIPopoverPresentationController *)v6 setSourceView:*(void *)(*(void *)(*(void *)(v1+ OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView)+ OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_strokeWidthControl)+ OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button)];
    }
    id v8 = [(UIViewController *)v15 popoverPresentationController];
    if (v8)
    {
      id v9 = v8;
      [(UIPopoverPresentationController *)v8 setDelegate:*(void *)(*(void *)(v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView)+ OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_strokeWidthControl)];
    }
    id v10 = [(UIViewController *)v15 popoverPresentationController];
    if (v10)
    {
      id v11 = v10;
      [(UIPopoverPresentationController *)v10 _setIgnoresKeyboardNotifications:1];
    }
    uint64_t v12 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
    id v13 = v15;
    if (v12)
    {
      uint64_t v14 = (void *)v12;
      CanvasElementController.configureViewControllerForPresentingAsPopover(viewController:)(v15);

      id v13 = v15;
    }
    objc_msgSend(v3, sel_presentViewController_animated_completion_, v13, 1, 0);
  }
}

void ShapeStyleEditingController.didStartChangingOpacitySlider()()
{
  uint64_t v1 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (!v1) {
    return;
  }
  id v15 = (id)v1;
  uint64_t v2 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    uint64_t v3 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType();
    long long v5 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    swift_unknownObjectRelease();
    if (v5)
    {
      id v6 = *(void **)&v5[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
      if (!v6) {
        goto LABEL_20;
      }
      id v7 = v6;
      uint64_t v8 = swift_bridgeObjectRetain();
      unint64_t v9 = specialized Sequence.compactMap<A>(_:)(v8, (uint64_t)v7);

      swift_bridgeObjectRelease();
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v10) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v10)
        {
LABEL_7:
          if (v10 >= 1)
          {
            uint64_t v11 = 0;
            uint64_t v12 = (void *)MEMORY[0x263F8EED0];
            do
            {
              if ((v9 & 0xC000000000000001) != 0) {
                id v13 = (void *)MEMORY[0x21054E050](v11, v9);
              }
              else {
                id v13 = *(id *)(v9 + 8 * v11 + 32);
              }
              uint64_t v14 = v13;
              ++v11;
              (*(void (**)(void))((*v12 & *v13) + 0x1E8))();
            }
            while (v10 != v11);
            goto LABEL_15;
          }
          __break(1u);
LABEL_20:
          __break(1u);
          return;
        }
      }
LABEL_15:

      swift_bridgeObjectRelease();
    }
  }
}

void ShapeStyleEditingController.didChangeOpacitySlider()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_isCompactUI) == 1)
  {
    uint64_t v3 = OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactOpacitySlider;
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactOpacitySlider), sel_value);
    Swift::Float v5 = v4;
    char v6 = ShapeStyleEditingController.hasMultipleOpacities.getter();
    id v7 = *(id *)(v2 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactOpacityControl);
    if (v6) {
      ShapeEditingControl.setButtonMultiSelectBackground()();
    }
    else {
      ShapeEditingControl.setButtonValue(_:isPercent:)(v5, 1);
    }

    uint64_t v10 = *(void **)(v2 + v3);
  }
  else
  {
    uint64_t v8 = OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_opacityControl;
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_opacityControl), sel_value);
    Swift::Float v5 = v9;
    uint64_t v10 = *(void **)(v2 + v8);
  }
  id v11 = v10;
  char v12 = ShapeStyleEditingController.hasMultipleOpacities.getter();
  id v13 = (void *)ShapeOpacitySliderView.thumbImage(multiSelect:)(v12 & 1);
  objc_msgSend(v11, sel_setThumbImage_forState_, v13, 0);

  uint64_t v14 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v14)
  {
    id v15 = (id)v14;
    CanvasElementController.changeSelectedShapesOpacity(_:)(v5);
  }
}

void ShapeStyleEditingController.lineTypeControlValueChanged()()
{
  uint64_t v1 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v1)
  {
    uint64_t v2 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    id v7 = (unsigned char *)v1;
    if (MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
      && (uint64_t v3 = *(void *)(v2 + 8),
          uint64_t ObjectType = swift_getObjectType(),
          Swift::Float v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3),
          swift_unknownObjectRelease(),
          v5))
    {
      uint64_t v6 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
      v7[OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle] = 1;
      MEMORY[0x270FA5388](v7);
      (*(void (**)(void, void, uint64_t (*)()))((*MEMORY[0x263F8EED0] & *v5) + 0x478))(0, 0, partial apply for closure #1 in closure #1 in CanvasElementController.changeSelectedLineType(_:));
      v7[v6] = 0;
    }
    else
    {
    }
  }
}

id ShapeStyleEditingController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ShapeStyleEditingController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ShapeStyleEditingController()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ShapeStyleEditingController.EditingAttribute(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C330174);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ShapeStyleEditingController.EditingAttribute()
{
  return &unk_26C1503B0;
}

unint64_t lazy protocol witness table accessor for type ShapeStyleEditingController.EditingAttribute and conformance ShapeStyleEditingController.EditingAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyleEditingController.EditingAttribute and conformance ShapeStyleEditingController.EditingAttribute;
  if (!lazy protocol witness table cache variable for type ShapeStyleEditingController.EditingAttribute and conformance ShapeStyleEditingController.EditingAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyleEditingController.EditingAttribute and conformance ShapeStyleEditingController.EditingAttribute);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in CanvasElementController.changeSelectedLineType(_:)()
{
  return closure #1 in closure #1 in CanvasElementController.changeSelectedLineType(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
}

uint64_t sub_20C330224()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in ShapeStyleEditingController.updateUIFillColor()()
{
  closure #1 in ShapeStyleEditingController.updateUIFillColor()(*(void *)(v0 + 16), *(id **)(v0 + 24));
}

uint64_t sub_20C330264()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_20C330294()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in ShapeStyleEditingController.updateUIStrokeColor()()
{
  closure #1 in ShapeStyleEditingController.updateUIStrokeColor()(*(void *)(v0 + 16), *(objc_class **)(v0 + 24));
}

uint64_t sub_20C3302DC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t outlined destroy of Shape?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Shape();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Shape and conformance Shape(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void ShapeStyleEditingController.didTapStrokeColorButton()(void *a1)
{
  uint64_t v63 = a1;
  uint64_t v2 = v1;
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v3 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  CGFloat v67 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for Shape();
  uint64_t v5 = MEMORY[0x270FA5388](v58);
  uint64_t v68 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v52 - v7;
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  unint64_t v9 = *(void *)(v66 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v66);
  uint64_t v65 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(v1
                                           + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider))(v10);
  if (v12)
  {
    id v13 = (void *)v12;
    uint64_t v14 = (UIViewController *)objc_msgSend(objc_allocWithZone(MEMORY[0x263F825E0]), sel_init);
    [(UIViewController *)v14 setModalPresentationStyle:7];
    uint64_t v59 = v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller;
    uint64_t v15 = MEMORY[0x210550400]();
    if (v15)
    {
      uint64_t v16 = v15 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
      uint64_t v17 = (void *)v15;
      if (MEMORY[0x210550400](v15 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
      {
        id v57 = v17;
        uint64_t v18 = *(void *)(v16 + 8);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v20 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(ObjectType, v18);
        swift_unknownObjectRelease();
        if (v20)
        {
          char v56 = v14;
          id v55 = v20;
          uint64_t v21 = *(void **)&v20[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
          if (!v21)
          {
            __break(1u);
            return;
          }
          id v22 = v21;
          uint64_t v23 = swift_bridgeObjectRetain();
          unint64_t v24 = specialized Sequence.compactMap<A>(_:)(v23, (uint64_t)v22);

          swift_bridgeObjectRelease();
          if (v24 >> 62) {
            goto LABEL_27;
          }
          uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          for (; v25; uint64_t v25 = _CocoaArrayWrapper.endIndex.getter())
          {
            uint64_t v53 = v13;
            uint64_t v54 = v2;
            unint64_t v64 = v24 & 0xC000000000000001;
            id v61 = (void (**)(char *, uint64_t))(v9 + 8);
            uint64_t v62 = (void (**)(char *, char *, uint64_t))(v9 + 16);
            uint64_t v60 = (void (**)(char *, uint64_t))(v3 + 8);
            uint64_t v26 = 4;
            id v13 = (void *)v58;
            while (1)
            {
              id v27 = v64 ? (id)MEMORY[0x21054E050](v26 - 4, v24) : *(id *)(v24 + 8 * v26);
              uint64_t v28 = v27;
              uint64_t v2 = v26 - 3;
              if (__OFADD__(v26 - 4, 1)) {
                break;
              }
              type metadata accessor for ShapeView();
              double v29 = (void *)swift_dynamicCastClass();
              if (v29)
              {
                uint64_t v3 = v25;
                unint64_t v9 = v24;
                uint64_t v30 = (char *)v29 + *(void *)((*MEMORY[0x263F8EED0] & *v29) + 0x380);
                swift_beginAccess();
                double v32 = v65;
                uint64_t v31 = v66;
                (*v62)(v65, v30, v66);
                lazy protocol witness table accessor for type Shape and conformance Shape((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
                Capsule<>.root.getter();
                (*v61)(v32, v31);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
                uint64_t v33 = v67;
                CRRegister.wrappedValue.getter();
                uint64_t v34 = v13;
                uint64_t v35 = v69;
                TaggedValue_9.tagged3.getter();
                (*v60)(v33, v35);
                LOBYTE(v3__isPlatformVersionAtLeast(2, 18, 1, 0) = v71;
                uint64_t v36 = v68;
                outlined init with copy of Shape((uint64_t)v8, v68);
                if (v30)
                {
                  type metadata accessor for ShapeSecondaryProperties();
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
                  CRRegister.wrappedValue.getter();
                  uint64_t v37 = v70;
                  outlined destroy of Shape(v36);
                  outlined destroy of Shape((uint64_t)v8);

                  id v13 = v34;
                  uint64_t v25 = v3;
                  if (!v37)
                  {

                    swift_bridgeObjectRelease();
                    uint64_t v38 = 1;
LABEL_25:
                    uint64_t v2 = v54;
                    id v13 = v53;
                    goto LABEL_29;
                  }
                }
                else
                {
                  outlined destroy of Shape(v36);
                  outlined destroy of Shape((uint64_t)v8);

                  id v13 = v34;
                  uint64_t v25 = v3;
                }
                unint64_t v24 = v9;
                if (v2 == v25)
                {
LABEL_21:

                  swift_bridgeObjectRelease();
                  uint64_t v38 = 0;
                  goto LABEL_25;
                }
              }
              else
              {

                if (v2 == v25) {
                  goto LABEL_21;
                }
              }
              ++v26;
            }
            __break(1u);
LABEL_27:
            swift_bridgeObjectRetain();
          }

          swift_bridgeObjectRelease();
          uint64_t v38 = 0;
LABEL_29:

          swift_bridgeObjectRelease();
          uint64_t v14 = v56;
        }
        else
        {

          uint64_t v38 = 0;
        }
      }
      else
      {

        uint64_t v38 = 0;
      }
    }
    else
    {
      uint64_t v38 = 1;
    }
    unsigned int v39 = v63;
    uint64_t v40 = v59;
    [(UIViewController *)v14 _setAllowsNoColor:v38];
    id v41 = ShapeStyleEditingController.currentStrokeColor.getter();
    if (!v41) {
      id v41 = *(id *)(v2 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_defaultStrokeColor);
    }
    char v42 = v41;
    ShapeStyleEditingController.canvasUserInterfaceStyle.getter();
    unsigned int v43 = (void *)static PKInkingTool.convertColor(_:from:to:)();

    [(UIViewController *)v14 setSelectedColor:v43];
    uint64_t v44 = [(UIViewController *)v14 popoverPresentationController];
    if (v44)
    {
      uint64_t v45 = v44;
      [(UIPopoverPresentationController *)v44 setSourceView:*(void *)(*(void *)(*(void *)(v2+ OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView)+ *v39)+ OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button)];
    }
    uint64_t v46 = [(UIViewController *)v14 popoverPresentationController];
    if (v46)
    {
      int v47 = v46;
      [(UIPopoverPresentationController *)v46 setDelegate:*(void *)(*(void *)(v2 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView) + *v39)];
    }
    uint64_t v48 = [(UIViewController *)v14 popoverPresentationController];
    if (v48)
    {
      char v49 = v48;
      [(UIPopoverPresentationController *)v48 _setIgnoresKeyboardNotifications:1];
    }
    uint64_t v50 = MEMORY[0x210550400](v40);
    if (v50)
    {
      uint64_t v51 = (void *)v50;
      CanvasElementController.configureViewControllerForPresentingAsPopover(viewController:)(v14);
    }
    [(UIViewController *)v14 setDelegate:v2];
    [(UIViewController *)v14 _setShouldUseDarkGridInDarkMode:1];
    *(unsigned char *)(v2 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_editingAttribute) = 0;
    objc_msgSend(v13, sel_presentViewController_animated_completion_, v14, 1, 0);
  }
}

void specialized ShapeStyleEditingController.didTapCompactOpacityButton(forEvent:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider))();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    type metadata accessor for CompactShapeOpacityController();
    uint64_t v19 = (UIViewController *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView);
    uint64_t v5 = *(objc_class **)(v4 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactOpacitySlider);
    uint64_t v6 = *(Class *)((char *)&v19->super.super.isa + OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_slider);
    *(Class *)((char *)&v19->super.super.isa + OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_slider) = v5;
    uint64_t v7 = v5;

    [(UIViewController *)v19 setModalPresentationStyle:7];
    uint64_t v8 = [(UIViewController *)v19 popoverPresentationController];
    if (v8)
    {
      unint64_t v9 = v8;
      [(UIPopoverPresentationController *)v8 setSourceView:*(void *)(v4 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactOpacityControl)];
    }
    uint64_t v10 = [(UIViewController *)v19 popoverPresentationController];
    if (v10)
    {
      uint64_t v11 = v10;
      [(UIPopoverPresentationController *)v10 setPermittedArrowDirections:2];
    }
    uint64_t v12 = [(UIViewController *)v19 popoverPresentationController];
    if (v12)
    {
      id v13 = v12;
      [(UIPopoverPresentationController *)v12 setDelegate:*(void *)(v4 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactOpacityControl)];
    }
    uint64_t v14 = [(UIViewController *)v19 popoverPresentationController];
    if (v14)
    {
      uint64_t v15 = v14;
      [(UIPopoverPresentationController *)v14 _setIgnoresKeyboardNotifications:1];
    }
    uint64_t v16 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
    uint64_t v17 = v19;
    if (v16)
    {
      uint64_t v18 = (void *)v16;
      CanvasElementController.configureViewControllerForPresentingAsPopover(viewController:)(v19);

      uint64_t v17 = v19;
    }
    objc_msgSend(v3, sel_presentViewController_animated_completion_, v17, 1, 0);
  }
}

void ShapeStyleEditingController.didFinishChangingOpacitySlider()()
{
  uint64_t v1 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v1)
  {
    uint64_t v12 = (unsigned char *)v1;
    uint64_t v2 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
      && (uint64_t v3 = *(void *)(v2 + 8),
          uint64_t ObjectType = swift_getObjectType(),
          uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3),
          swift_unknownObjectRelease(),
          v5))
    {
      uint64_t v6 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
      v12[OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle] = 1;
      uint64_t v7 = *(void **)(v5 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (!v7)
      {
        __break(1u);
        return;
      }
      id v8 = v7;
      uint64_t v9 = swift_bridgeObjectRetain();
      unint64_t v10 = specialized Sequence.compactMap<A>(_:)(v9, (uint64_t)v8);

      swift_bridgeObjectRelease();
      specialized AnyCanvas.undoableEndLiveEdits<A>(for:)(v10);
      swift_bridgeObjectRelease();
      v12[v6] = 0;

      uint64_t v11 = (void *)v5;
    }
    else
    {
      uint64_t v11 = v12;
    }
  }
}

void specialized ShapeStyleEditingController.valueEditingViewController(_:didChangeValue:)(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = ShapeStyleEditingController.currentStrokeColor.getter();

  if (!v4 && (ShapeStyleEditingController.hasMultipleStrokeColors.getter() & 1) == 0)
  {
    v9.value.super.Class isa = (Class)objc_msgSend(self, sel_blackColor);
    Class isa = v9.value.super.isa;
    ShapeStyleEditingController.changeStrokeColor(_:)(v9);
  }
  uint64_t v6 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    CanvasElementController.changeSelectedStrokeWidth(_:)((double)a1);
  }
  ShapeStyleEditingController.updateUIStrokeWidth()();
}

unint64_t MagicPaperUsageInsertSpaceEvent.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x6C69636E65507369;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 2:
      unint64_t result = 0x6874616D5F6D756ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x6F7274735F6D756ELL;
      break;
    case 5:
      unint64_t result = 0x747865745F6D756ELL;
      break;
    case 6:
      unint64_t result = 0x6E695F6563617073;
      break;
    case 7:
      unint64_t result = 1868852853;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t MagicPaperUsageInsertSpaceEvent.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6C69636E65507369;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 2:
      unint64_t result = 0x6874616D5F6D756ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x6F7274735F6D756ELL;
      break;
    case 5:
      unint64_t result = 0x747865745F6D756ELL;
      break;
    case 6:
      unint64_t result = 0x6E695F6563617073;
      break;
    case 7:
      unint64_t result = 1868852853;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MagicPaperUsageInsertSpaceEvent.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MagicPaperUsageInsertSpaceEvent.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MagicPaperUsageInsertSpaceEvent.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MagicPaperUsageInsertSpaceEvent.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MagicPaperUsageInsertSpaceEvent.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MagicPaperUsageInsertSpaceEvent.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MagicPaperUsageInsertSpaceEvent.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MagicPaperUsageInsertSpaceEvent.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance MagicPaperUsageInsertSpaceEvent.CodingKeys()
{
  return MagicPaperUsageInsertSpaceEvent.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance MagicPaperUsageInsertSpaceEvent.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MagicPaperUsageInsertSpaceEvent.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance MagicPaperUsageInsertSpaceEvent.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance MagicPaperUsageInsertSpaceEvent.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MagicPaperUsageInsertSpaceEvent.CodingKeys(uint64_t a1)
{
  inserteCGFloat d = lazy protocol witness table accessor for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys();
  return MEMORY[0x270FA00B0](a1, inserted);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MagicPaperUsageInsertSpaceEvent.CodingKeys(uint64_t a1)
{
  inserteCGFloat d = lazy protocol witness table accessor for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys();
  return MEMORY[0x270FA00B8](a1, inserted);
}

uint64_t MagicPaperUsageInsertSpaceEvent.calculateInsertedSpace(in:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 160);
  if (!v2 || (*(_WORD *)(v1 + 216) & 1) != 0) {
    return 0;
  }
  uint64_t v3 = *(void *)(v1 + 208);
  double v4 = *(double *)(v1 + 192);
  double v5 = *(double *)(v1 + 176);
  swift_beginAccess();
  uint64_t result = 0;
  uint64_t v7 = *(void *)(v1 + 88);
  if (v3 < *(void *)(v7 + 16))
  {
    if (v3 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v8 = v7 + 168 * v3;
      double v9 = *(double *)(v8 + 72);
      double v10 = *(double *)(v8 + 88);
      uint64_t v11 = *(void *)(v2 + 120);
      double v12 = v4 - v5;
      if (v11 < v3) {
        double v12 = v4 - v9;
      }
      if (v3 < v11) {
        double v12 = v10 - v4;
      }
      double v13 = v12 / (v10 - v9);
      if (v13 > 1.0) {
        double v13 = 1.0;
      }
      double v14 = v13 * 100.0;
      BOOL v15 = v13 > -1.0;
      double v16 = -100.0;
      if (v15) {
        double v16 = v14;
      }
      if ((~*(void *)&v16 & 0x7FF0000000000000) != 0)
      {
        if (v16 > -9.22337204e18)
        {
          if (v16 < 9.22337204e18) {
            return (uint64_t)v16;
          }
          goto LABEL_23;
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_22;
  }
  return result;
}

uint64_t destroy for MagicPaperUsageInsertSpaceEvent()
{
  swift_bridgeObjectRelease();
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for MagicPaperUsageInsertSpaceEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for MagicPaperUsageInsertSpaceEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for MagicPaperUsageInsertSpaceEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for MagicPaperUsageInsertSpaceEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for MagicPaperUsageInsertSpaceEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 88)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MagicPaperUsageInsertSpaceEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicPaperUsageInsertSpaceEvent()
{
  return &type metadata for MagicPaperUsageInsertSpaceEvent;
}

Swift::Void __swiftcall MagicPaperUsageInsertSpaceEvent.finalize()()
{
  if ((*(unsigned char *)(v0 + 72) & 1) == 0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = (void *)MEMORY[0x210550400](v0 + 80);
    id v3 = objc_msgSend(self, sel_activePencil);
    unsigned __int8 v4 = objc_msgSend(v3, sel_isConnected);

    *(unsigned char *)uint64_t v1 = v4;
    static Locale.preferredLanguages.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v5 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 8) = v5;
    *(void *)(v1 + 16) = v7;
    if (v2)
    {
      uint64_t v8 = v2;
      specialized MagicPaperUsageAnalyticsEvent.countGroups(in:)(v8);
    }
    *(unsigned char *)(v1 + 72) = 1;
  }
}

uint64_t MagicPaperUsageInsertSpaceEvent.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MagicPaperUsageInsertSpaceEvent.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t protocol witness for static AnalyticsEvent.eventName.getter in conformance MagicPaperUsageInsertSpaceEvent()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for AnalyticsEvent.isFinalized.getter in conformance MagicPaperUsageInsertSpaceEvent()
{
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t protocol witness for AnalyticsEvent.undoEvent() in conformance MagicPaperUsageInsertSpaceEvent@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 24) == 1)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 1;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
  }
  else
  {
    uint64_t result = outlined init with copy of MagicPaperUsageInsertSpaceEvent(v1, a1);
    *(unsigned char *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 24) = 1;
    uint64_t v4 = *(void *)(v1 + 64);
    BOOL v5 = __OFSUB__(0, v4);
    uint64_t v6 = -v4;
    if (v5) {
      __break(1u);
    }
    else {
      *(void *)(a1 + 64) = v6;
    }
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MagicPaperUsageInsertSpaceEvent(void *a1)
{
  return MagicPaperUsageInsertSpaceEvent.encode(to:)(a1);
}

unint64_t instantiation function for generic protocol witness table for MagicPaperUsageInsertSpaceEvent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MagicPaperUsageInsertSpaceEvent and conformance MagicPaperUsageInsertSpaceEvent();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type MagicPaperUsageInsertSpaceEvent and conformance MagicPaperUsageInsertSpaceEvent();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MagicPaperUsageInsertSpaceEvent and conformance MagicPaperUsageInsertSpaceEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent and conformance MagicPaperUsageInsertSpaceEvent;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent and conformance MagicPaperUsageInsertSpaceEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent and conformance MagicPaperUsageInsertSpaceEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent and conformance MagicPaperUsageInsertSpaceEvent;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent and conformance MagicPaperUsageInsertSpaceEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent and conformance MagicPaperUsageInsertSpaceEvent);
  }
  return result;
}

uint64_t outlined init with copy of MagicPaperUsageInsertSpaceEvent(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageInsertSpaceEvent.CodingKeys and conformance MagicPaperUsageInsertSpaceEvent.CodingKeys);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MagicPaperUsageInsertSpaceEvent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MagicPaperUsageInsertSpaceEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C331EF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicPaperUsageInsertSpaceEvent.CodingKeys()
{
  return &type metadata for MagicPaperUsageInsertSpaceEvent.CodingKeys;
}

unint64_t specialized MagicPaperUsageInsertSpaceEvent.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MagicPaperUsageInsertSpaceEvent.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v17 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = v17;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = MEMORY[0x21054E050](v5, a1);
        uint64_t v17 = v3;
        unint64_t v8 = *(void *)(v3 + 16);
        unint64_t v7 = *(void *)(v3 + 24);
        if (v8 >= v7 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
          uint64_t v3 = v17;
        }
        ++v5;
        uint64_t v15 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKMathRecognitionItem);
        double v16 = &protocol witness table for PKMathRecognitionItem;
        *(void *)&long long v14 = v6;
        *(void *)(v3 + 16) = v8 + 1;
        outlined init with take of FindResult(&v14, v3 + 40 * v8 + 32);
      }
      while (v2 != v5);
    }
    else
    {
      double v9 = (void **)(a1 + 32);
      do
      {
        double v10 = *v9;
        uint64_t v17 = v3;
        unint64_t v12 = *(void *)(v3 + 16);
        unint64_t v11 = *(void *)(v3 + 24);
        id v13 = v10;
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          uint64_t v3 = v17;
        }
        uint64_t v15 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKMathRecognitionItem);
        double v16 = &protocol witness table for PKMathRecognitionItem;
        *(void *)&long long v14 = v13;
        *(void *)(v3 + 16) = v12 + 1;
        outlined init with take of FindResult(&v14, v3 + 40 * v12 + 32);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  double v16 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = v16;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = MEMORY[0x21054E050](v5, a1);
        double v16 = v3;
        unint64_t v8 = *(void *)(v3 + 16);
        unint64_t v7 = *(void *)(v3 + 24);
        if (v8 >= v7 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
          uint64_t v3 = v16;
        }
        ++v5;
        long long v14 = type metadata accessor for DrawingFindResult();
        uint64_t v15 = lazy protocol witness table accessor for type DrawingFindResult and conformance DrawingFindResult(&lazy protocol witness table cache variable for type DrawingFindResult and conformance DrawingFindResult, (void (*)(uint64_t))type metadata accessor for DrawingFindResult);
        *(void *)&id v13 = v6;
        *(void *)(v3 + 16) = v8 + 1;
        outlined init with take of FindResult(&v13, v3 + 40 * v8 + 32);
      }
      while (v2 != v5);
    }
    else
    {
      double v9 = (uint64_t *)(a1 + 32);
      do
      {
        double v10 = *v9;
        double v16 = v3;
        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v12 = *(void *)(v3 + 24);
        swift_retain();
        if (v11 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
          uint64_t v3 = v16;
        }
        long long v14 = type metadata accessor for DrawingFindResult();
        uint64_t v15 = lazy protocol witness table accessor for type DrawingFindResult and conformance DrawingFindResult(&lazy protocol witness table cache variable for type DrawingFindResult and conformance DrawingFindResult, (void (*)(uint64_t))type metadata accessor for DrawingFindResult);
        *(void *)&id v13 = v10;
        *(void *)(v3 + 16) = v11 + 1;
        outlined init with take of FindResult(&v13, v3 + 40 * v11 + 32);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  long long v14;
  long long v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v17 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        MEMORY[0x21054E050](v5, a1);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        swift_dynamicCast();
        uint64_t v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
          uint64_t v3 = v17;
        }
        unint64_t v7 = *(void *)(v3 + 16);
        uint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v17;
        }
        ++v5;
        *(void *)(v3 + 16) = v7 + 1;
        unint64_t v8 = v3 + 40 * v7;
        *(void *)(v8 + 64) = v16;
        *(_OWORD *)(v8 + 32) = v14;
        *(_OWORD *)(v8 + 48) = v15;
      }
      while (v2 != v5);
    }
    else
    {
      double v9 = (id *)(a1 + 32);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      do
      {
        double v10 = *v9;
        swift_dynamicCast();
        uint64_t v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
          uint64_t v3 = v17;
        }
        unint64_t v12 = *(void *)(v3 + 16);
        unint64_t v11 = *(void *)(v3 + 24);
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          uint64_t v3 = v17;
        }
        *(void *)(v3 + 16) = v12 + 1;
        id v13 = v3 + 40 * v12;
        *(void *)(v13 + 64) = v16;
        *(_OWORD *)(v13 + 32) = v14;
        *(_OWORD *)(v13 + 48) = v15;
        ++v9;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  return specialized _arrayForceCast<A, B>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for CHCanvasAttachment);
}

{
  return specialized _arrayForceCast<A, B>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for CHMathExpression);
}

{
  return specialized _arrayForceCast<A, B>(_:)(a1, &demangling cache variable for type metadata for CHMathExpressionEvaluationResult);
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void **v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    unint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        unsigned int v4 = 0;
        do
        {
          uint64_t v5 = v4 + 1;
          double v10 = (void *)MEMORY[0x21054E050]();
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
          uint64_t v6 = v10;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIMenuElement?);
          swift_dynamicCast();
          swift_unknownObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          unsigned int v4 = v5;
        }
        while (v2 != v5);
      }
      else
      {
        unint64_t v7 = (void **)(a1 + 32);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
        do
        {
          unint64_t v8 = *v7++;
          double v9 = v8;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIMenuElement?);
          swift_dynamicCast();

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v2;
        }
        while (v2);
      }
      return v11;
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = v15;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = MEMORY[0x21054E050](v5, a1);
        unint64_t v8 = *(void *)(v15 + 16);
        unint64_t v7 = *(void *)(v15 + 24);
        if (v8 >= v7 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        }
        ++v5;
        *(void *)(v15 + 16) = v8 + 1;
        double v9 = v15 + 16 * v8;
        *(void *)(v9 + 32) = v6;
        *(void *)(v9 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = &protocol witness table for SynapseLinkItem;
      }
      while (v2 != v5);
    }
    else
    {
      double v10 = (id *)(a1 + 32);
      do
      {
        unint64_t v11 = *(void *)(v15 + 16);
        unint64_t v12 = *(void *)(v15 + 24);
        id v13 = *v10;
        if (v11 >= v12 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
        }
        *(void *)(v15 + 16) = v11 + 1;
        long long v14 = v15 + 16 * v11;
        *(void *)(v14 + 32) = v13;
        *(void *)(v14 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = &protocol witness table for SynapseLinkItem;
        ++v10;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    unsigned int v4 = (long long *)(a1 + 32);
    do
    {
      long long v5 = *v4++;
      id v6 = (id)v5;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasUIOverlay);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      swift_dynamicCast();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  long long v8;
  uint64_t v9;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    double v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    unsigned int v4 = a1 + 32;
    uint64_t v2 = v9;
    do
    {
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v9;
      }
      id v6 = *(void *)(v2 + 16);
      long long v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      *(void *)(v2 + 16) = v6 + 1;
      outlined init with take of Any(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    long long v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v14;
    unsigned int v4 = a1 + 56;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, SearchQueryResult));
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (pageIndex: Int, queryResult: SearchQueryResult));
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v14;
      }
      id v6 = *(void *)(v2 + 16);
      long long v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v14;
      }
      *(void *)(v2 + 16) = v6 + 1;
      uint64_t v7 = (void *)(v2 + 40 * v6);
      _OWORD v7[4] = v9;
      v7[5] = v10;
      v7[6] = v11;
      v7[7] = v12;
      v7[8] = v13;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  int64_t v1;
  uint64_t v2;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v15;
  long long v16;
  ValueMetadata *v17;
  unint64_t v18;
  uint64_t v19;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v19;
    unsigned int v4 = (char *)(a1 + 72);
    do
    {
      long long v5 = (void *)*((void *)v4 - 5);
      id v6 = *((void *)v4 - 4);
      uint64_t v7 = *((void *)v4 - 3);
      unint64_t v8 = *((void *)v4 - 2);
      double v9 = (void *)*((void *)v4 - 1);
      double v10 = *v4;
      outlined copy of PaperDocumentFindResult.Content(v5, v6, v7, v8, v9, *v4);
      uint64_t v19 = v2;
      unint64_t v12 = *(void *)(v2 + 16);
      unint64_t v11 = *(void *)(v2 + 24);
      uint64_t v15 = v12 + 1;
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v15, 1);
        uint64_t v2 = v19;
      }
      uint64_t v17 = &type metadata for PaperDocumentFindResult;
      uint64_t v18 = lazy protocol witness table accessor for type PaperDocumentFindResult and conformance PaperDocumentFindResult();
      id v13 = swift_allocObject();
      *(void *)&double v16 = v13;
      *(void *)(v13 + 16) = v5;
      *(void *)(v13 + 24) = v6;
      *(void *)(v13 + 32) = v7;
      *(void *)(v13 + 4__isPlatformVersionAtLeast(2, 18, 1, 0) = v8;
      *(void *)(v13 + 48) = v9;
      *(unsigned char *)(v13 + 56) = v10;
      *(void *)(v2 + 16) = v15;
      outlined init with take of FindResult(&v16, v2 + 40 * v12 + 32);
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v15)(char *, uint64_t, uint64_t);
  long long v16;
  uint64_t v17;

  uint64_t v2 = type metadata accessor for PKStroke();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  long long v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    double v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    unint64_t v8 = v3 + 16;
    uint64_t v15 = v9;
    double v10 = a1 + ((*(unsigned __int8 *)(v8 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64));
    unint64_t v11 = *(void *)(v8 + 56);
    do
    {
      v15(v5, v10, v2);
      swift_dynamicCast();
      uint64_t v7 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v17;
      }
      id v13 = *(void *)(v7 + 16);
      unint64_t v12 = *(void *)(v7 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v7 = v17;
      }
      *(void *)(v7 + 16) = v13 + 1;
      outlined init with take of Any(&v16, (_OWORD *)(v7 + 32 * v13 + 32));
      v10 += v11;
      --v6;
    }
    while (v6);
  }
  return v7;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v15)(char *, uint64_t, uint64_t);
  long long v16;
  uint64_t v17;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  long long v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    double v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    unint64_t v8 = v3 + 16;
    uint64_t v15 = v9;
    double v10 = a1 + ((*(unsigned __int8 *)(v8 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64));
    unint64_t v11 = *(void *)(v8 + 56);
    uint64_t v7 = v17;
    do
    {
      v15(v5, v10, v2);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v17;
      }
      id v13 = *(void *)(v7 + 16);
      unint64_t v12 = *(void *)(v7 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v7 = v17;
      }
      *(void *)(v7 + 16) = v13 + 1;
      outlined init with take of Any(&v16, (_OWORD *)(v7 + 32 * v13 + 32));
      v10 += v11;
      --v6;
    }
    while (v6);
  }
  return v7;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned char v13[32];
  uint64_t v14;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  long long v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  id v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    long long v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    unint64_t v8 = a1 + 32;
    uint64_t v7 = v14;
    do
    {
      outlined init with copy of Any(v8, (uint64_t)v13);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v14;
      }
      double v10 = *(void *)(v7 + 16);
      double v9 = *(void *)(v7 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v7 = v14;
      }
      *(void *)(v7 + 16) = v10 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v10, v5, v2);
      v8 += 32;
      --v6;
    }
    while (v6);
  }
  return v7;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v2 = type metadata accessor for PKStroke();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  long long v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v6)
  {
    long long v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    double v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    double v9 = v3 + 16;
    unint64_t v8 = v10;
    unint64_t v11 = a1 + ((*(unsigned __int8 *)(v9 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 64));
    unint64_t v12 = *(void *)(v9 + 56);
    do
    {
      v8(v5, v11, v2);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKStroke);
      swift_dynamicCast();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v11 += v12;
      --v6;
    }
    while (v6);
    return v14;
  }
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1, uint64_t *a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v5 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    return v5;
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    return a1;
  }
}

void @objc CanvasView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized CanvasView.init(coder:)();
}

uint64_t CanvasView.allowsContentSnapping.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for CanvasView.allowsContentSnapping);
}

void CanvasView.calculateDocumentForTesting.didset()
{
  id v0 = Canvas.editingView.getter();
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  id v4 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(ObjectType, v2);

  if (v4)
  {
    CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
  }
}

uint64_t CanvasView.canvasCalculateDocument.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CanvasView.paperViewController.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_viewControllerForPresentingUI;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v1);
  if (result)
  {
    id v3 = (void *)result;
    type metadata accessor for AnyCanvasElementViewController();
    uint64_t result = swift_dynamicCastClass();
    if (!result)
    {

      return 0;
    }
  }
  return result;
}

void *CanvasView.canvasScrollView.getter()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for CanvasView.canvasScrollView);
  id v2 = v1;
  return v1;
}

uint64_t CanvasView.movableAdornmentViews.getter()
{
  uint64_t v0 = AnyCanvas.overlays.getter();
  uint64_t v1 = specialized _arrayForceCast<A, B>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

void CanvasView.editingMode.setter(unsigned __int8 *a1)
{
  unsigned __int8 v1 = *a1;
  Canvas.editingMode.setter(&v1);
  CanvasView.tiledViewUpdateEditingState()();
}

void (*CanvasView.editingMode.modify(void *a1))(void *a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  void v3[5] = Canvas.editingMode.modify(v3);
  return CanvasView.editingMode.modify;
}

void CanvasView.editingMode.modify(void *a1, char a2)
{
  id v3 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  if ((a2 & 1) == 0) {
    CanvasView.tiledViewUpdateEditingState()();
  }
  free(v3);
}

id CanvasView.drawingPolicy.getter()
{
  id result = *(id *)(v0 + direct field offset for CanvasView.canvasTiledView);
  if (result) {
    return objc_msgSend(result, sel_drawingPolicy);
  }
  __break(1u);
  return result;
}

id CanvasView.drawingPolicy.setter(uint64_t a1)
{
  id result = *(id *)(v1 + direct field offset for CanvasView.canvasTiledView);
  if (result) {
    return objc_msgSend(result, sel_setDrawingPolicy_, a1);
  }
  __break(1u);
  return result;
}

void *CanvasView.drawingPolicy.modify(void *a1)
{
  a1[1] = v1;
  id result = *(void **)(v1 + direct field offset for CanvasView.canvasTiledView);
  if (result)
  {
    *a1 = objc_msgSend(result, sel_drawingPolicy);
    return CanvasView.drawingPolicy.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *CanvasView.drawingPolicy.modify(void *result, char a2)
{
  id v2 = *(void **)(result[1] + direct field offset for CanvasView.canvasTiledView);
  if (a2)
  {
    if (v2) {
      return objc_msgSend(v2, sel_setDrawingPolicy_, *result);
    }
    __break(1u);
  }
  if (v2) {
    return objc_msgSend(v2, sel_setDrawingPolicy_, *result);
  }
  __break(1u);
  return result;
}

uint64_t CanvasView.selectionInteractionDelegate.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for CanvasView.selectionInteractionDelegate) = a1;
  return MEMORY[0x270F9A758]();
}

uint64_t CanvasView.canvasContentMode.getter@<X0>(unsigned char *a1@<X8>)
{
  id v3 = (unsigned char *)(v1 + direct field offset for CanvasView.canvasContentMode);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

id CanvasView.canvasContentMode.setter(char *a1)
{
  char v2 = *a1;
  id v3 = &v1[direct field offset for CanvasView.canvasContentMode];
  swift_beginAccess();
  *id v3 = v2;
  return objc_msgSend(v1, sel_setNeedsLayout);
}

id (*CanvasView.canvasContentMode.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasView.canvasContentMode.modify;
}

id CanvasView.canvasContentMode.modify(uint64_t a1, char a2)
{
  id result = (id)swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = *(void **)(a1 + 24);
    return objc_msgSend(v5, sel_setNeedsLayout);
  }
  return result;
}

id CanvasView.toolPickerObserver.getter()
{
  uint64_t v1 = direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver;
  char v2 = *(void **)&v0[direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver];
  if (v2)
  {
    id v3 = *(id *)&v0[direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver];
  }
  else
  {
    id v4 = v0;
    type metadata accessor for CanvasViewToolPickerObserver();
    uint64_t v5 = v0;
    id v6 = specialized CanvasViewToolPickerObserver.__allocating_init(canvasView:)();

    uint64_t v7 = *(void **)&v4[v1];
    *(void *)&v4[v1] = v6;
    id v3 = v6;

    char v2 = 0;
  }
  id v8 = v2;
  return v3;
}

void CanvasView.editingContainerElementId.didset()
{
  id v1 = Canvas.editingView.getter();
  uint64_t v3 = v2;
  id v4 = (objc_class *)type metadata accessor for CanvasViewSelectionInteractionDelegate();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = v3;
  swift_unknownObjectWeakAssign();
  v10.receiver = v5;
  v10.super_class = v4;
  id v6 = objc_msgSendSuper2(&v10, sel_init);

  uint64_t v7 = *(void **)(v0 + direct field offset for CanvasView.selectionInteractionDelegate);
  *(void *)(v0 + direct field offset for CanvasView.selectionInteractionDelegate) = v6;

  id v8 = *(void **)(v0 + direct field offset for CanvasView.canvasTiledView);
  if (v8)
  {
    id v9 = objc_msgSend(v8, sel_selectionInteraction);
    objc_msgSend(v9, sel_setDelegate_, *(void *)(v0 + direct field offset for CanvasView.selectionInteractionDelegate));
  }
}

uint64_t CanvasView.editingContainerElementId.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  Canvas.editingContainerElementId.setter((uint64_t)v5);
  CanvasView.editingContainerElementId.didset();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*CanvasView.editingContainerElementId.modify(void *a1))(void *a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  void v3[5] = Canvas.editingContainerElementId.modify(v3);
  return CanvasView.editingContainerElementId.modify;
}

void CanvasView.editingContainerElementId.modify(void *a1, char a2)
{
  uint64_t v3 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  if ((a2 & 1) == 0) {
    CanvasView.editingContainerElementId.didset();
  }
  free(v3);
}

id CanvasView.persistUIState(_:)(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v23 = a2;
  unint64_t v24 = a1;
  uint64_t v3 = (void *)(*MEMORY[0x263F8EED0] & *v2);
  uint64_t v4 = v3[428];
  uint64_t v5 = v3[429];
  uint64_t v6 = type metadata accessor for Capsule();
  uint64_t v7 = *(void *)(v6 - 8);
  id result = (id)MEMORY[0x270FA5388](v6);
  objc_super v10 = (char *)&v23 - v9;
  unint64_t v11 = *(UIScrollView **)((char *)v2 + direct field offset for CanvasView.canvasScrollView);
  if (v11)
  {
    objc_msgSend(*(id *)((char *)v2 + direct field offset for CanvasView.canvasScrollView), sel_contentOffset, v23);
    double v13 = v12;
    double v15 = v14;
    uint64_t v16 = Canvas.updatablePaper2.getter((uint64_t)v10);
    MEMORY[0x270FA5388](v16);
    *(&v23 - 4) = v4;
    *(&v23 - 3) = v5;
    uint64_t v17 = v3[430];
    *(&v23 - 2) = v17;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    uint64_t v19 = v18(v10, v6);
    double v20 = v13 + v25;
    double v21 = v15 + v26;
    v24(v19);
    CanvasView.scrollViewDidScroll(_:)(v11);
    uint64_t v22 = Canvas.updatablePaper2.getter((uint64_t)v10);
    MEMORY[0x270FA5388](v22);
    *(&v23 - 4) = v4;
    *(&v23 - 3) = v5;
    *(&v23 - 2) = v17;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v18(v10, v6);
    return -[UIScrollView setContentOffset:](v11, sel_setContentOffset_, v20 - v25, v21 - v26);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CanvasView.__allocating_init(frame:paper:allowMediaCanvasElements:transparentBackground:paperViewController:)(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, char a7, void *a8)
{
  type metadata accessor for CRContext();
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  double v15 = (void *)MEMORY[0x21054C990](0, v19);
  outlined destroy of EncryptionDelegate?((uint64_t)v19);
  uint64_t v16 = specialized CanvasView.__allocating_init(context:frame:paper:allowsEditing:allowMediaCanvasElements:transparentBackground:paperViewController:)(v15, a1, 2, a7, a8, a2, a3, a4, a5);
  uint64_t v17 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
  return v16;
}

uint64_t CanvasView.__allocating_init(context:frame:paper:allowsEditing:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, uint64_t a2, int a3, double a4, double a5, double a6, double a7, uint64_t a8, char a9, void *a10)
{
  uint64_t v11 = specialized CanvasView.__allocating_init(context:frame:paper:allowsEditing:allowMediaCanvasElements:transparentBackground:paperViewController:)(a1, a2, a3, a9, a10, a4, a5, a6, a7);
  uint64_t v12 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a2, v12);
  return v11;
}

uint64_t CanvasView.__allocating_init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, ValueMetadata *a2, unsigned __int8 *a3, char a4, char a5, void *a6, double a7, double a8, double a9, double a10)
{
  specialized CanvasView.__allocating_init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  uint64_t v12 = v11;
  uint64_t v13 = type metadata accessor for Capsule();
  (*(void (**)(ValueMetadata *, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
  return v12;
}

uint64_t CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, ValueMetadata *a2, unsigned __int8 *a3, char a4, char a5, void *a6, double a7, double a8, double a9, double a10)
{
  specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  uint64_t v12 = v11;
  uint64_t v13 = type metadata accessor for Capsule();
  (*(void (**)(ValueMetadata *, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
  return v12;
}

Swift::Void __swiftcall CanvasView.tiledViewUpdateEditingState()()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for CanvasView.canvasTiledView);
  if (v1)
  {
    Canvas.editingMode.getter(&v8);
    uint64_t v2 = v8;
    if (v8 != 2) {
      uint64_t v2 = 0;
    }
    if (v8 >= 2u) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    BOOL v4 = v8 >= 2u;
    id v5 = objc_msgSend(v1, sel_canvasView);
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = objc_msgSend(v5, sel_drawingGestureRecognizer);

      objc_msgSend(v7, sel_setEnabled_, v4);
    }
    objc_msgSend(v1, sel_setDrawingPolicy_, v3);
  }
  else
  {
    __break(1u);
  }
}

id CanvasView.activeToolPicker.getter()
{
  uint64_t v0 = (char *)CanvasView.paperViewController.getter();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v0) + 0x60))())
  {
    uint64_t v3 = v2;
    uint64_t ObjectType = swift_getObjectType();
    if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 24))(v1, ObjectType, v3))
    {
      uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 32))(v1, ObjectType, v3);

      swift_unknownObjectRelease();
      return (id)v5;
    }
    swift_unknownObjectRelease();
  }
  id v7 = *(id *)&v1[OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker];

  return v7;
}

Swift::Void __swiftcall CanvasView.registerToolPickerObservers(_:)(PKToolPicker a1)
{
  [(objc_class *)a1.super.isa addObserver:v1];
  id v3 = CanvasView.toolPickerObserver.getter();
  [(objc_class *)a1.super.isa addObserver:v3];

  id v4 = CanvasView.toolPickerObserver.getter();
  CanvasViewToolPickerObserver.updateUI(toolPicker:)(a1);
}

id CanvasView.contentSnapshottingView.getter()
{
  id result = *(id *)(v0 + direct field offset for CanvasView.canvasTiledView);
  if (result)
  {
    id v2 = objc_msgSend(result, sel_contentSnapshottingView);
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void CanvasView.contentSnapshottingView.setter(void *a1)
{
  specialized CanvasView.contentSnapshottingView.setter((uint64_t)a1);
}

void (*CanvasView.contentSnapshottingView.modify(id *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  *a1 = CanvasView.contentSnapshottingView.getter();
  return CanvasView.contentSnapshottingView.modify;
}

void CanvasView.contentSnapshottingView.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = *(void **)(v2 + direct field offset for CanvasView.canvasTiledView);
    if (v5)
    {
      id v6 = *(id *)a1;
      objc_msgSend(v5, sel_setContentSnapshottingView_);
      goto LABEL_6;
    }
LABEL_10:
    __break(1u);
    return;
  }
  id v3 = *(void **)(v2 + direct field offset for CanvasView.canvasTiledView);
  id v4 = *(id *)a1;
  if (!v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  id v6 = v4;
  objc_msgSend(v3, sel_setContentSnapshottingView_);

LABEL_6:
}

void CanvasView.visibleBoundsInModelSpace.getter()
{
  void (*v4)(CGAffineTransform *__return_ptr);
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  CGFloat width;
  CGFloat height;
  CGFloat y;
  CGFloat x;
  double v27;
  double v28;
  double v29;
  double v30;
  CGFloat ty;
  CGFloat tx;
  CGFloat d;
  CGFloat c;
  CGFloat b;
  CGFloat a;
  CGAffineTransform v37;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;

  uint64_t v1 = *(void **)&v0[direct field offset for CanvasView.canvasScrollView];
  if (v1)
  {
    uint64_t v2 = v0;
    id v3 = Canvas.editingView.getter();
    id v4 = *(void (**)(CGAffineTransform *__return_ptr))((*MEMORY[0x263F8EED0] & *v3) + 0x2A0);
    uint64_t v5 = v1;
    v4(&v40);

    CGAffineTransform t1 = v40;
    t2.CGFloat a = 1.0;
    t2.CGFloat b = 0.0;
    t2.CGFloat c = 0.0;
    t2.CGFloat d = 1.0;
    t2.tdouble x = 0.0;
    t2.tdouble y = 0.0;
    CGAffineTransformConcat(&v37, &t1, &t2);
    CGAffineTransform t1 = v37;
    CGAffineTransformInvert(&t2, &t1);
    CGFloat b = t2.b;
    CGFloat a = t2.a;
    CGFloat d = t2.d;
    CGFloat c = t2.c;
    tdouble y = t2.ty;
    tdouble x = t2.tx;
    objc_msgSend(v5, sel_bounds);
    double v29 = v7;
    uint64_t v30 = v6;
    id v27 = v9;
    uint64_t v28 = v8;
    objc_msgSend(v2, sel_safeAreaInsets);
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    Canvas.visibleBoundsOverride.getter((uint64_t)&v37);
    double v14 = v37.a;
    double v15 = v37.b;
    uint64_t v16 = v37.c;
    uint64_t v17 = v37.d;
    outlined init with take of CGRect?((uint64_t)&v37, (uint64_t)&t2);
    if (LOBYTE(t2.tx) == 1)
    {
      objc_msgSend(v5, sel_convertRect_toView_, *(void *)&v2[direct field offset for CanvasView.zoomView], UIEdgeInsetsInsetRect(v30, v29, v28, v27, v11, v13));
      double v14 = v18;
      double v15 = v19;
      uint64_t v16 = v20;
      uint64_t v17 = v21;
    }
    uint64_t v22 = *(void **)&v2[direct field offset for CanvasView.zoomView];
    if (v22)
    {
      objc_msgSend(v22, sel_bounds);
      t1.CGFloat a = a;
      t1.CGFloat b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.tdouble x = tx;
      t1.tdouble y = ty;
      char v42 = CGRectApplyAffineTransform(v41, &t1);
      double y = v42.origin.y;
      double x = v42.origin.x;
      CGFloat width = v42.size.width;
      CGFloat height = v42.size.height;
      t1.CGFloat a = a;
      t1.CGFloat b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.tdouble x = tx;
      t1.tdouble y = ty;
      v42.origin.double y = v15;
      v42.origin.double x = v14;
      v42.size.CGFloat height = v17;
      v42.size.CGFloat width = v16;
      uint64_t v44 = CGRectApplyAffineTransform(v42, &t1);
      v43.origin.double y = y;
      v43.origin.double x = x;
      v43.size.CGFloat width = width;
      v43.size.CGFloat height = height;
      CGRectIntersection(v43, v44);
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall CanvasView.didMoveToSuperview()()
{
  uint64_t v1 = v0;
  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for CanvasView();
  objc_msgSendSuper2(&v9, sel_didMoveToSuperview);
  id v2 = objc_msgSend(v0, sel_superview);

  if (!v2)
  {
    id v3 = Canvas.editingView.getter();
    uint64_t v5 = v4;
    uint64_t ObjectType = swift_getObjectType();
    id v7 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 144))(ObjectType, v5);

    if (v7)
    {
      uint64_t v8 = *(void *)&v7[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
      swift_retain();

      swift_retain();
      FormAnalytics.merge(_:for:)(v8, v1);
      swift_release();
      swift_release();
    }
    swift_retain();
    FormAnalytics.recordSessionEvent()();
    swift_release();
  }
}

void @objc CanvasView.didMoveToSuperview()(void *a1)
{
  id v1 = a1;
  CanvasView.didMoveToSuperview()();
}

uint64_t CanvasView.adjustingInsets.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for CanvasView.adjustingInsets);
}

uint64_t CanvasView.adjustingInsets.setter(uint64_t result)
{
  *(unsigned char *)(v1 + direct field offset for CanvasView.adjustingInsets) = result;
  return result;
}

uint64_t CanvasView.firstLayout.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for CanvasView.firstLayout);
}

uint64_t CanvasView.firstLayout.setter(uint64_t result)
{
  *(unsigned char *)(v1 + direct field offset for CanvasView.firstLayout) = result;
  return result;
}

uint64_t CanvasView.isZoomScaleAltered.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for CanvasView.isZoomScaleAltered);
}

uint64_t CanvasView.isZoomScaleAltered.setter(uint64_t result)
{
  *(unsigned char *)(v1 + direct field offset for CanvasView.isZoomScaleAltered) = result;
  return result;
}

uint64_t CanvasView.snappedContentInsets.getter()
{
  if (*(unsigned char *)(v0 + direct field offset for CanvasView.snappedContentInsets + 1)) {
    int v1 = 256;
  }
  else {
    int v1 = 0;
  }
  return v1 | *(unsigned __int8 *)(v0 + direct field offset for CanvasView.snappedContentInsets);
}

uint64_t CanvasView.snappedContentInsets.setter(uint64_t result, char a2)
{
  id v3 = (unsigned char *)(v2 + direct field offset for CanvasView.snappedContentInsets);
  *id v3 = result;
  v3[1] = a2;
  return result;
}

void __swiftcall CanvasView.viewForZooming(in:)(UIView_optional *__return_ptr retstr, UIScrollView *in)
{
  id v2 = (id)specialized CanvasView.zoomView.getter();
}

id @objc CanvasView.viewForZooming(in:)()
{
  uint64_t v0 = (void *)specialized CanvasView.zoomView.getter();
  return v0;
}

Swift::Void __swiftcall CanvasView.deselectAll()()
{
}

Swift::Void __swiftcall CanvasView.scrollViewDidScroll(_:)(UIScrollView *a1)
{
  if (v1[direct field offset for CanvasView.adjustingInsets]) {
    return;
  }
  id v2 = v1;
  id v4 = (id)specialized Canvas.paperView.getter();
  ContainerCanvasElementView.modelBounds.getter();
  double v6 = v5;
  double v8 = v7;

  objc_super v9 = *(void **)&v2[direct field offset for CanvasView.zoomView];
  if (!v9)
  {
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v9, sel_bounds);
  double v12 = vabdd_f64(v8, v11);
  if (vabdd_f64(v6, v10) < 1.5 && v12 < 1.5) {
    goto LABEL_11;
  }
  [(UIScrollView *)a1 zoomScale];
  double v15 = v14;
  char v16 = v2[direct field offset for CanvasView.isZoomScaleAltered];
  [(UIScrollView *)a1 setZoomScale:1.0];
  uint64_t v17 = *(void **)&v2[direct field offset for CanvasView.zoomView];
  if (!v17)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v18 = v17;
  objc_msgSend(v18, sel_frame);
  objc_msgSend(v18, sel_setFrame_);

  if (v2[direct field offset for CanvasView.firstLayout] == 1)
  {
    [(UIScrollView *)a1 frame];
    double v15 = fmin(CGRectGetWidth(v28) / v6, 1.0);
    v2[direct field offset for CanvasView.firstLayout] = 0;
  }
  [(UIScrollView *)a1 setZoomScale:v15];
  v2[direct field offset for CanvasView.isZoomScaleAltered] = v16;
LABEL_11:
  CanvasView.updateContentInsets()();
  id v19 = (id)specialized Canvas.paperView.getter();
  ContainerCanvasElementView.didScroll(in:)((uint64_t)v2);

  uint64_t v20 = AnyCanvas.overlays.getter();
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    uint64_t v22 = (void **)(v20 + 32);
    do
    {
      uint64_t v23 = *v22;
      v22 += 2;
      objc_msgSend(v23, sel_setNeedsLayout);
      --v21;
    }
    while (v21);
  }
  swift_bridgeObjectRelease();
  unint64_t v24 = &v2[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate];
  swift_beginAccess();
  if (MEMORY[0x210550400](v24))
  {
    double v25 = *(void **)&v2[direct field offset for CanvasView.zoomView];
    if (v25)
    {
      uint64_t v26 = *((void *)v24 + 1);
      uint64_t ObjectType = swift_getObjectType();
      objc_msgSend(v25, sel_frame);
      objc_msgSend(v2, sel_convertRect_fromCoordinateSpace_, a1);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v26 + 64))(v2, ObjectType, v26);
      swift_unknownObjectRelease();
      return;
    }
LABEL_20:
    __break(1u);
  }
}

void @objc CanvasView.scrollViewDidScroll(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  CanvasView.scrollViewDidScroll(_:)(v4);
}

Swift::Void __swiftcall CanvasView.scrollViewWillBeginDecelerating(_:)(UIScrollView *a1)
{
  id v3 = [(UIScrollView *)a1 pinchGestureRecognizer];
  if (v3)
  {
    id v4 = v3;
    [(UIPinchGestureRecognizer *)v3 velocity];
    double v6 = v5;
  }
  else
  {
    double v6 = 0.0;
  }
  [(UIScrollView *)a1 zoomScale];
  double v8 = v6 / v7;
  if (one-time initialization token for pinchVelocityThresholdToNormalizeScale != -1) {
    swift_once();
  }
  if (v8 < *(double *)&static UIConstants.pinchVelocityThresholdToNormalizeScale)
  {
    [(UIScrollView *)a1 setZoomScale:1 animated:1.0];
    *(_WORD *)(v1 + direct field offset for CanvasView.snappedContentInsets) = 257;
  }
}

void @objc CanvasView.scrollViewWillBeginDecelerating(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  CanvasView.scrollViewWillBeginDecelerating(_:)(v4);
}

void @objc CanvasView.scrollViewDidZoom(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  specialized CanvasView.scrollViewDidZoom(_:)();
}

void @objc CanvasView.scrollViewDidEndZooming(_:with:atScale:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  specialized CanvasView.scrollViewDidEndZooming(_:with:atScale:)(v6);
}

UIEdgeInsets __swiftcall CanvasView.contentInset()()
{
  double v34 = *(double *)&v0[direct field offset for CanvasView.minimumContentInsets + 16];
  double v35 = *(double *)&v0[direct field offset for CanvasView.minimumContentInsets];
  double v32 = *(double *)&v0[direct field offset for CanvasView.minimumContentInsets + 24];
  double v33 = *(double *)&v0[direct field offset for CanvasView.minimumContentInsets + 8];
  objc_msgSend(v0, sel_bounds);
  CGFloat x = v36.origin.x;
  CGFloat y = v36.origin.y;
  CGFloat width = v36.size.width;
  CGFloat height = v36.size.height;
  double v5 = CGRectGetWidth(v36);
  objc_super v9 = *(void **)&v0[direct field offset for CanvasView.canvasScrollView];
  if (v9)
  {
    double v10 = v5;
    objc_msgSend(*(id *)&v0[direct field offset for CanvasView.canvasScrollView], sel_contentSize);
    double v12 = v10 - v11;
    double v13 = (v10 - v11) * 0.5;
    v37.origin.CGFloat x = x;
    v37.origin.CGFloat y = y;
    v37.size.CGFloat width = width;
    v37.size.CGFloat height = height;
    double v14 = CGRectGetHeight(v37);
    objc_msgSend(v9, sel_contentSize);
    double v16 = v14 - v15;
    double v17 = (v14 - v15) * 0.5;
    BOOL v18 = v16 < 0.0;
    double v19 = x;
    double v20 = 0.0;
    if (v18) {
      double v21 = 0.0;
    }
    else {
      double v21 = v17;
    }
    if (v12 < 0.0) {
      double v22 = 0.0;
    }
    else {
      double v22 = v13;
    }
    uint64_t v23 = direct field offset for CanvasView.snappedContentInsets;
    if (v0[direct field offset for CanvasView.snappedContentInsets])
    {
      CGFloat v24 = v19;
      double v25 = round(v22);
      double v26 = 0.0;
    }
    else
    {
      CGFloat v24 = v19;
      CGFloat v27 = y;
      CGFloat v28 = width;
      CGFloat v29 = height;
      double v30 = CGRectGetWidth(*(CGRect *)&v19);
      if (one-time initialization token for unsnappedScrollInset != -1) {
        swift_once();
      }
      double v26 = v30 - *(double *)&static UIConstants.unsnappedScrollInset;
      uint64_t v23 = direct field offset for CanvasView.snappedContentInsets;
      double v25 = v26;
    }
    if (v0[v23 + 1])
    {
      double v5 = round(v21);
    }
    else
    {
      v38.origin.CGFloat x = v24;
      v38.origin.CGFloat y = y;
      v38.size.CGFloat width = width;
      v38.size.CGFloat height = height;
      double v31 = CGRectGetHeight(v38);
      if (one-time initialization token for unsnappedScrollInset != -1) {
        swift_once();
      }
      double v20 = v31 - *(double *)&static UIConstants.unsnappedScrollInset;
      double v5 = v31 - *(double *)&static UIConstants.unsnappedScrollInset;
    }
    double v8 = v32;
    double v6 = v33;
    if (v25 > v33) {
      double v6 = v25;
    }
    if (v26 > v32) {
      double v8 = v26;
    }
    if (v5 <= v35) {
      double v5 = v35;
    }
    if (v20 > v34) {
      double v7 = v20;
    }
    else {
      double v7 = v34;
    }
  }
  else
  {
    __break(1u);
  }
  result.right = v8;
  result.bottom = v7;
  result.left = v6;
  result.top = v5;
  return result;
}

double CanvasView.minimumContentInsets.getter()
{
  return *(double *)(v0 + direct field offset for CanvasView.minimumContentInsets);
}

Swift::Void __swiftcall CanvasView.updateContentInsets()()
{
  objc_msgSend(v0, sel_bounds);
  double Width = CGRectGetWidth(v44);
  id v2 = *(void **)&v0[direct field offset for CanvasView.canvasScrollView];
  if (!v2)
  {
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  double v3 = Width;
  objc_msgSend(*(id *)&v0[direct field offset for CanvasView.canvasScrollView], sel_contentSize);
  double v5 = v4;
  objc_msgSend(v0, sel_bounds);
  double Height = CGRectGetHeight(v45);
  objc_msgSend(v2, sel_contentSize);
  if (v0[direct field offset for CanvasView.allowsContentSnapping] != 1) {
    goto LABEL_30;
  }
  double v8 = *(void **)&v0[direct field offset for CanvasView.trackingPanGestureRecognizer];
  if (!v8) {
    goto LABEL_43;
  }
  double v9 = v7;
  objc_msgSend(v8, sel_translationInView_, v0);
  double v12 = *(void **)&v0[direct field offset for CanvasView.trackingPanGestureRecognizer];
  if (!v12)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  double v13 = v10;
  double v14 = v11;
  if ((uint64_t)objc_msgSend(v12, sel_numberOfTouches) >= 2)
  {
    double v16 = fabs(v13);
    if (one-time initialization token for translationThresholdToUnsnapCentering != -1) {
      swift_once();
    }
    uint64_t v15 = static UIConstants.translationThresholdToUnsnapCentering;
    if (*(double *)&static UIConstants.translationThresholdToUnsnapCentering < v16)
    {
      char v17 = 0;
LABEL_16:
      v0[direct field offset for CanvasView.snappedContentInsets] = v17;
      goto LABEL_17;
    }
  }
  double v18 = v3 - v5;
  objc_msgSend(v2, sel_contentOffset, *(double *)&v15);
  double v20 = 0.0;
  if (v18 >= 0.0) {
    double v20 = v18 * 0.5;
  }
  double v21 = fabs(v20 + v19);
  if (one-time initialization token for translationThresholdToResnapCentering != -1) {
    swift_once();
  }
  uint64_t v15 = static UIConstants.translationThresholdToResnapCentering;
  if (v21 < *(double *)&static UIConstants.translationThresholdToResnapCentering)
  {
    char v17 = 1;
    goto LABEL_16;
  }
LABEL_17:
  double v22 = *(void **)&v0[direct field offset for CanvasView.trackingPanGestureRecognizer];
  if (!v22)
  {
LABEL_45:
    __break(1u);
    return;
  }
  if ((uint64_t)objc_msgSend(v22, sel_numberOfTouches, *(double *)&v15) < 2) {
    goto LABEL_23;
  }
  double v24 = fabs(v14);
  if (one-time initialization token for translationThresholdToUnsnapCentering != -1) {
    swift_once();
  }
  double v23 = *(double *)&static UIConstants.translationThresholdToUnsnapCentering;
  if (*(double *)&static UIConstants.translationThresholdToUnsnapCentering >= v24)
  {
LABEL_23:
    double v26 = Height - v9;
    objc_msgSend(v2, sel_contentOffset, v23);
    double v28 = 0.0;
    if (v26 >= 0.0) {
      double v28 = v26 * 0.5;
    }
    double v29 = fabs(v28 + v27);
    if (one-time initialization token for translationThresholdToResnapCentering != -1) {
      swift_once();
    }
    if (v29 >= *(double *)&static UIConstants.translationThresholdToResnapCentering) {
      goto LABEL_30;
    }
    char v25 = 1;
  }
  else
  {
    char v25 = 0;
  }
  v0[direct field offset for CanvasView.snappedContentInsets + 1] = v25;
LABEL_30:
  UIEdgeInsets v46 = CanvasView.contentInset()();
  double top = v46.top;
  double left = v46.left;
  double bottom = v46.bottom;
  double right = v46.right;
  objc_msgSend(v2, sel_contentInset);
  BOOL v39 = vabdd_f64(left, v36) < 1.5;
  double v38 = vabdd_f64(right, v37);
  BOOL v39 = v39 && v38 < 1.5;
  double v40 = vabdd_f64(top, v34);
  BOOL v41 = v39 && v40 < 1.5;
  double v42 = vabdd_f64(bottom, v35);
  if (!v41 || v42 >= 1.5)
  {
    v0[direct field offset for CanvasView.adjustingInsets] = 1;
    objc_msgSend(v2, sel_setContentInset_, top, left, bottom, right);
    v0[direct field offset for CanvasView.adjustingInsets] = 0;
  }
}

Swift::Void __swiftcall CanvasView.layoutSubviews()()
{
  uint64_t v1 = v0;
  id v2 = (void *)(*MEMORY[0x263F8EED0] & *(void *)v0);
  uint64_t v3 = v2[428];
  uint64_t v4 = v2[429];
  uint64_t v5 = type metadata accessor for Capsule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  double v8 = (char *)&v20 - v7;
  uint64_t v9 = v2[430];
  double v10 = (objc_class *)type metadata accessor for CanvasView();
  v22.receiver = v1;
  v22.super_class = v10;
  objc_msgSendSuper2(&v22, sel_layoutSubviews);
  double v11 = *(UIScrollView **)&v1[direct field offset for CanvasView.canvasScrollView];
  if (v11)
  {
    objc_msgSend(v1, sel_bounds);
    -[UIScrollView setFrame:](v11, sel_setFrame_);
    double v12 = &v1[direct field offset for CanvasView.canvasContentMode];
    swift_beginAccess();
    if (*v12 == 1)
    {
      objc_msgSend(v1, sel_bounds);
      double Width = CGRectGetWidth(v23);
      uint64_t v14 = Canvas.updatablePaper2.getter((uint64_t)v8);
      MEMORY[0x270FA5388](v14);
      *(&v20 - 4) = v3;
      *(&v20 - 3) = v4;
      *(&v20 - 2) = v9;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
      v15(v8, v5);
      double v16 = Width / CGRectGetWidth(v21);
      objc_msgSend(v1, sel_bounds);
      double Height = CGRectGetHeight(v24);
      uint64_t v18 = Canvas.updatablePaper2.getter((uint64_t)v8);
      MEMORY[0x270FA5388](v18);
      *(&v20 - 4) = v3;
      *(&v20 - 3) = v4;
      *(&v20 - 2) = v9;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v15(v8, v5);
      double v19 = Height / CGRectGetHeight(v21);
      if (v19 >= v16) {
        double v19 = v16;
      }
      [(UIScrollView *)v11 setZoomScale:v19];
    }
    CanvasView.scrollViewDidScroll(_:)(v11);
  }
  else
  {
    __break(1u);
  }
}

void key path getter for PaperRenderable.frame : <A>A(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(double *)a3 = (*(double (**)(void))(*(void *)(*(void *)(*(void *)(a2 + a1 - 8) + 8) + 8) + 8))(*(void *)(a2 + a1 - 24));
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v6;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)a3 = (*(double (**)(void))(*(void *)(*(void *)(a2 + a1 - 8) + 8) + 8))(*(void *)(a2 + a1 - 24));
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v6;
}

uint64_t key path setter for CanvasElement.frame : <A>A(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, double, double, double, double))(*(void *)(*(void *)(a4 + a3 - 8)
                                                                                               + 8)
                                                                                   + 16))(*(void *)(a4 + a3 - 24), *(void *)(*(void *)(a4 + a3 - 8) + 8), *a1, a1[1], a1[2], a1[3]);
}

{
  return (*(uint64_t (**)(void, void, double, double, double, double))(*(void *)(a4 + a3 - 8) + 16))(*(void *)(a4 + a3 - 24), *(void *)(a4 + a3 - 8), *a1, a1[1], a1[2], a1[3]);
}

void @objc CanvasView.layoutSubviews()(void *a1)
{
  id v1 = a1;
  CanvasView.layoutSubviews()();
}

void *CanvasView.scrollView.getter()
{
  uint64_t v0 = (void *)specialized CanvasView.scrollView.getter();
  id v1 = v0;
  return v0;
}

void *CanvasView.tiledView.getter()
{
  uint64_t v0 = (void *)specialized CanvasView.tiledView.getter();
  id v1 = v0;
  return v0;
}

void CanvasView.presentSubelement<A>(_:)(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)CanvasView.paperViewController.getter();
  if (v4)
  {
    id v5 = v4;
    Canvas.presentSubelement<A>(_:presentationViewController:)(a1, v4, a2);
  }
}

Swift::Bool __swiftcall CanvasView.gestureRecognizer(_:shouldReceive:)(UIGestureRecognizer *_, UITouch shouldReceive)
{
  return 1;
}

uint64_t @objc CanvasView.gestureRecognizer(_:shouldReceive:)()
{
  return 1;
}

Swift::Bool __swiftcall CanvasView.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)(UIGestureRecognizer *_, UIGestureRecognizer *shouldRecognizeSimultaneouslyWith)
{
  uint64_t v3 = *(void **)(v2 + direct field offset for CanvasView.trackingPanGestureRecognizer);
  if (!v3) {
    return 0;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  id v6 = v3;
  uint64_t v7 = _;
  char v8 = static NSObject.== infix(_:_:)();

  if (v8) {
    return 1;
  }
  double v10 = *(void **)(v2 + direct field offset for CanvasView.trackingPanGestureRecognizer);
  if (!v10) {
    return 0;
  }
  id v11 = v10;
  double v12 = shouldRecognizeSimultaneouslyWith;
  char v13 = static NSObject.== infix(_:_:)();

  return v13 & 1;
}

BOOL @objc CanvasView.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  uint64_t v7 = a4;
  id v8 = a1;
  Swift::Bool v9 = CanvasView.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)(v6, v7);

  return v9;
}

Swift::Void __swiftcall CanvasView.toolPickerSelectedToolDidChange(_:)(PKToolPicker a1)
{
  id v2 = CanvasView.toolPickerObserver.getter();
  CanvasViewToolPickerObserver.toolPickerSelectedToolItemDidChange(_:)(a1);
}

void @objc CanvasView.toolPickerSelectedToolDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  CanvasView.toolPickerSelectedToolDidChange(_:)((PKToolPicker)v4);
}

void @objc CanvasView.toolPickerSelectedToolItemDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  CanvasView.toolPickerSelectedToolDidChange(_:)((PKToolPicker)v4);
}

void @objc CanvasView.toolPickerIsRulerActiveDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  CanvasView.toolPickerSelectedToolDidChange(_:)((PKToolPicker)v4);
}

uint64_t CanvasView.__ivar_destroyer()
{
  swift_unknownObjectRelease();

  return swift_release();
}

id CanvasView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc CanvasView.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectRelease();

  return swift_release();
}

uint64_t outlined destroy of EncryptionDelegate?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *protocol witness for CanvasElementControllerDelegate.canvasElementControllerCanvasForInsertion.getter in conformance CanvasView<A>()
{
  uint64_t v0 = (void *)specialized CanvasView.canvasElementControllerCanvasForInsertion.getter();
  id v1 = v0;
  return v0;
}

uint64_t protocol witness for CanvasElementControllerDelegate.canvasElementController(_:wantsToEnterFullscreen:) in conformance CanvasView<A>(uint64_t a1, char a2)
{
  return specialized CanvasView.canvasElementController(_:wantsToEnterFullscreen:)(a2);
}

uint64_t specialized CanvasView.tiledView.getter()
{
  return *(void *)(v0 + direct field offset for CanvasView.canvasTiledView);
}

uint64_t specialized CanvasView.scrollView.getter()
{
  return *(void *)(v0 + direct field offset for CanvasView.canvasScrollView);
}

uint64_t specialized CanvasView.zoomView.getter()
{
  return *(void *)(v0 + direct field offset for CanvasView.zoomView);
}

void specialized CanvasView.init(coder:)()
{
  v0[direct field offset for CanvasView.allowsContentSnapping] = 1;
  id v1 = &v0[direct field offset for CanvasView.calculateDocumentForTesting];
  *id v1 = 0;
  v1[1] = 0;
  *(void *)&v0[direct field offset for CanvasView.trackingPanGestureRecognizer] = 0;
  *(void *)&v0[direct field offset for CanvasView.rulerHostingDelegate] = 0;
  *(void *)&v0[direct field offset for CanvasView.tiledViewDelegate] = 0;
  *(void *)&v0[direct field offset for CanvasView.selectionInteractionDelegate] = 0;
  v0[direct field offset for CanvasView.canvasContentMode] = 0;
  *(void *)&v0[direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver] = 0;
  *(void *)&v0[direct field offset for CanvasView.zoomView] = 0;
  uint64_t v2 = direct field offset for CanvasView.formAnalytics;
  type metadata accessor for FormAnalytics();
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 791357252;
  *(_WORD *)(v3 + 2AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 0;
  *(void *)(v3 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)&v0[v2] = v3;
  v0[direct field offset for CanvasView.adjustingInsets] = 0;
  v0[direct field offset for CanvasView.firstLayout] = 1;
  v0[direct field offset for CanvasView.isZoomScaleAltered] = 0;
  *(_WORD *)&v0[direct field offset for CanvasView.snappedContentInsets] = 257;
  id v4 = &v0[direct field offset for CanvasView.minimumContentInsets];
  long long v5 = *(_OWORD *)(MEMORY[0x263F834E8] + 16);
  *id v4 = *MEMORY[0x263F834E8];
  v4[1] = v5;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized CanvasView.calculateDocumentForTesting.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + direct field offset for CanvasView.calculateDocumentForTesting);
  *uint64_t v3 = a1;
  v3[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  CanvasView.calculateDocumentForTesting.didset();
}

void specialized CanvasView.paperViewController.setter(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  id v2 = Canvas.editingView.getter();
  uint64_t v4 = v3;
  uint64_t ObjectType = swift_getObjectType();
  id v6 = *(void (**)(uint64_t, uint64_t))(v4 + 24);
  id v7 = a1;
  v6(ObjectType, v4);
}

void specialized CanvasView.persistUIState(_:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  id v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + direct field offset for CanvasView.canvasScrollView))
  {
    double v30 = *(void **)(a1 + direct field offset for CanvasView.canvasScrollView);
    objc_msgSend(v30, sel_contentOffset, v6);
    double v10 = v9;
    double v12 = v11;
    uint64_t v29 = direct field offset for Canvas.paperView;
    uint64_t v13 = *(void *)(a1 + direct field offset for Canvas.paperView)
        + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(a1 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    double v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v14 = v28(v8, v13, v4);
    MEMORY[0x270FA5388](v14);
    uint64_t v27 = type metadata accessor for Image();
    *(&v25 - 4) = v27;
    uint64_t Result = lazy protocol witness table accessor for type DrawingFindResult and conformance DrawingFindResult(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    *(&v25 - 3) = Result;
    *(&v25 - 2) = (uint64_t)&protocol witness table for Image;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    double v26 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    uint64_t v16 = v26(v8, v4);
    double v17 = v10 + v31;
    double v18 = v12 + v32;
    double v19 = (void *)MEMORY[0x263F8EED0];
    uint64_t v20 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *a2) + 0x558))(v16);
    uint64_t v21 = (*(uint64_t (**)(uint64_t))((*v19 & *a2) + 0x560))(v20);
    (*(void (**)(uint64_t))((*v19 & *a2) + 0x568))(v21);
    objc_super v22 = v30;
    specialized CanvasView.scrollViewDidScroll(_:)(v30);
    uint64_t v23 = *(void *)(a1 + v29) + *(void *)((*v19 & **(void **)(a1 + v29)) + 0x380);
    swift_beginAccess();
    uint64_t v24 = v28(v8, v23, v4);
    MEMORY[0x270FA5388](v24);
    *(&v25 - 4) = v27;
    *(&v25 - 3) = Result;
    *(&v25 - 2) = (uint64_t)&protocol witness table for Image;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v26(v8, v4);
    objc_msgSend(v22, sel_setContentOffset_, v17 - v31, v18 - v32);
  }
  else
  {
    __break(1u);
  }
}

void specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, ValueMetadata *a2, unsigned __int8 *a3, char a4, char a5, void *a6, double a7, double a8, double a9, double a10)
{
  v10[direct field offset for CanvasView.allowsContentSnapping] = 1;
  uint64_t v15 = &v10[direct field offset for CanvasView.calculateDocumentForTesting];
  *uint64_t v15 = 0;
  v15[1] = 0;
  *(void *)&v10[direct field offset for CanvasView.trackingPanGestureRecognizer] = 0;
  *(void *)&v10[direct field offset for CanvasView.rulerHostingDelegate] = 0;
  *(void *)&v10[direct field offset for CanvasView.tiledViewDelegate] = 0;
  *(void *)&v10[direct field offset for CanvasView.selectionInteractionDelegate] = 0;
  v10[direct field offset for CanvasView.canvasContentMode] = 0;
  unsigned __int8 v96 = *a3;
  *(void *)&v10[direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver] = 0;
  uint64_t v16 = direct field offset for CanvasView.zoomView;
  *(void *)&v10[direct field offset for CanvasView.zoomView] = 0;
  uint64_t v17 = direct field offset for CanvasView.formAnalytics;
  type metadata accessor for FormAnalytics();
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = 791357252;
  *(_WORD *)(v18 + 2AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 0;
  double v19 = v10;
  *(void *)(v18 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)&v10[v17] = v18;
  v19[direct field offset for CanvasView.adjustingInsets] = 0;
  v19[direct field offset for CanvasView.firstLayout] = 1;
  v19[direct field offset for CanvasView.isZoomScaleAltered] = 0;
  *(_WORD *)&v19[direct field offset for CanvasView.snappedContentInsets] = 257;
  uint64_t v20 = &v19[direct field offset for CanvasView.minimumContentInsets];
  long long v21 = *(_OWORD *)(MEMORY[0x263F834E8] + 16);
  *uint64_t v20 = *MEMORY[0x263F834E8];
  v20[1] = v21;
  id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82B88]), sel_initWithFrame_, 0.0, 0.0, a9, a10);
  uint64_t v23 = self;
  id v24 = v22;
  id v25 = objc_msgSend(v23, sel_clearColor);
  objc_msgSend(v24, sel_setBackgroundColor_, v25);

  objc_msgSend(v24, sel_setContentSize_, 2000.0, 2000.0);
  objc_msgSend(v24, sel_setMinimumZoomScale_, 0.1);
  if (one-time initialization token for maximumPaperZoomScale != -1) {
    swift_once();
  }
  objc_msgSend(v24, sel_setMaximumZoomScale_, *(double *)&static UIConstants.maximumPaperZoomScale);
  objc_msgSend(v24, sel_setAlwaysBounceVertical_, 1);
  objc_msgSend(v24, sel_setAlwaysBounceHorizontal_, 1);
  objc_msgSend(v24, sel_setDelaysContentTouches_, 1);
  objc_msgSend(v24, sel_setContentInsetAdjustmentBehavior_, 2);
  objc_msgSend(v24, sel_setDecelerationRate_, *MEMORY[0x263F83970]);
  *(void *)&v19[direct field offset for CanvasView.canvasScrollView] = v24;
  double v26 = self;
  uint64_t v27 = (UIScrollView *)v24;
  id v28 = objc_msgSend(v26, sel_standardUserDefaults);
  uint64_t v29 = (void *)MEMORY[0x21054D080](0xD000000000000035, 0x800000020C8501E0);
  id v30 = objc_msgSend(v28, sel_BOOLForKey_, v29);

  double v31 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  id v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14BF8]), sel_initInScrollView_sixChannelBlending_defaultDrawingClass_, v27, v30, swift_getObjCClassFromMetadata());
  objc_msgSend(v32, sel_setSupportsCopyAsText_, 1);
  objc_msgSend(v32, sel_setInsertSpaceEnabled_, 1);
  id v33 = objc_msgSend(v32, sel_canvasView);
  if (v33)
  {
    double v34 = v33;
    id v35 = objc_msgSend(objc_allocWithZone(v31), sel_init);
    objc_msgSend(v34, sel_setDrawing_, v35);
  }
  id v36 = objc_msgSend(v32, sel_canvasView);
  if (v36)
  {
    double v37 = v36;
    objc_msgSend(v36, sel_setOpaque_, 0);
  }
  id v38 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasElementContainerView()), sel_initWithFrame_, 0.0, 0.0, a9, a10);
  BOOL v39 = *(void **)&v10[v16];
  *(void *)&v10[v16] = v38;

  objc_msgSend(v32, sel_setAttachmentContainerView_, *(void *)&v10[v16]);
  *(void *)&v19[direct field offset for CanvasView.canvasTiledView] = v32;
  id v40 = v32;

  v105[0] = v96;
  id v41 = a1;
  int v42 = a4 & 1;
  id v101 = v41;
  specialized Canvas.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:)(v41, a2, v105, v42, a5 & 1, a7, a8, a9, a10);
  CGRect v44 = v43;
  id v45 = a6;
  UIEdgeInsets v46 = v44;
  specialized CanvasView.paperViewController.setter(a6);
  uint64_t v99 = v45;

  id v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82A00]), sel_init);
  uint64_t v48 = direct field offset for CanvasView.trackingPanGestureRecognizer;
  char v49 = *(void **)&v46[direct field offset for CanvasView.trackingPanGestureRecognizer];
  *(void *)&v46[direct field offset for CanvasView.trackingPanGestureRecognizer] = v47;

  id v50 = objc_allocWithZone((Class)type metadata accessor for CanvasElementController());
  uint64_t v51 = v46;
  Canvas._canvasElementController.setter((uint64_t)objc_msgSend(v50, sel_init));

  uint64_t v52 = v51;
  uint64_t v53 = (char *)Canvas.canvasElementController.getter();

  if (v53)
  {
    *(void *)&v53[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate + 8] = &protocol witness table for CanvasView<A>;
    swift_unknownObjectWeakAssign();
    uint64_t v54 = v52;
    CanvasElementController.delegate.didset();
  }
  if (v30) {
    objc_msgSend(v40, sel_setContentSnapshottingView_, v52);
  }
  CanvasView.tiledViewUpdateEditingState()();
  uint64_t v55 = direct field offset for CanvasView.zoomView;
  uint64_t v56 = *(void *)&v52[direct field offset for CanvasView.zoomView];
  if (!v56)
  {
    __break(1u);
    goto LABEL_26;
  }
  [(UIScrollView *)v27 insertSubview:v56 atIndex:0];
  [(UIScrollView *)v27 addSubview:*(void *)&v52[OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView]];
  id v57 = objc_allocWithZone((Class)type metadata accessor for CanvasElementResizeView());
  uint64_t v58 = v52;
  uint64_t v59 = CanvasElementResizeView.init(frame:canvas:)(v58, 0.0, 0.0, a9, a10);
  uint64_t v60 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  id v61 = *(void **)&v58[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  *(void *)&v58[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView] = v59;

  if (!*(void *)&v58[v60])
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  -[UIScrollView addSubview:](v27, sel_addSubview_);
  unsigned __int8 v106 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v107 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v105[0] = 1;
  char v62 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
  if (v62)
  {
    id v63 = objc_allocWithZone((Class)type metadata accessor for HandwritingReflowView());
    unint64_t v64 = v58;
    uint64_t v65 = HandwritingReflowView.init(frame:canvas:)((uint64_t)v64, 0.0, 0.0, a9, a10);
    [(UIScrollView *)v27 addSubview:v65];
    uint64_t v66 = *(void **)&v64[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
    *(void *)&v64[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView] = v65;
  }
  CGFloat v67 = *(void **)&v52[v55];
  if (!v67) {
    goto LABEL_27;
  }
  objc_msgSend(v67, sel_insertSubview_atIndex_, specialized Canvas.paperView.getter(), 0);
  id v68 = (id)specialized Canvas.paperView.getter();
  CanvasElementView.merge<A>(_:)();

  id v69 = (id)specialized Canvas.paperView.getter();
  ContainerCanvasElementView.modelBounds.getter();
  double v71 = v70;
  double v73 = v72;

  -[UIScrollView setContentSize:](v27, sel_setContentSize_, v71, v73);
  uint64_t v74 = *(void **)&v46[v48];
  if (!v74)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  objc_msgSend(v74, sel_setDelegate_, v58);
  int v75 = *(void **)&v46[v48];
  if (!v75)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  objc_msgSend(v75, sel_setCancelsTouchesInView_, 0);
  uint64_t v76 = *(void **)&v46[v48];
  if (!v76)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  objc_msgSend(v76, sel_setDelaysTouchesEnded_, 0);
  if (!*(void *)&v46[v48])
  {
LABEL_31:
    __break(1u);
    return;
  }
  -[UIScrollView addGestureRecognizer:](v27, sel_addGestureRecognizer_);
  if ((a5 & 1) == 0)
  {
    uint64_t v77 = one-time initialization token for backboardColor;
    uint64_t v78 = v58;
    if (v77 != -1) {
      swift_once();
    }
    objc_msgSend(v78, sel_setBackgroundColor_, static UIConstants.backboardColor);
  }
  type metadata accessor for CanvasViewTiledViewDelegate();
  int v79 = v58;
  id v80 = specialized CanvasViewTiledViewDelegate.__allocating_init(canvas:)();

  uint64_t v81 = direct field offset for CanvasView.tiledViewDelegate;
  uint64_t v82 = *(void **)&v79[direct field offset for CanvasView.tiledViewDelegate];
  *(void *)&v79[direct field offset for CanvasView.tiledViewDelegate] = v80;

  objc_msgSend(v40, sel_setDelegate_, *(void *)&v79[v81]);
  type metadata accessor for CanvasViewRulerHostingDelegate();
  uint64_t v83 = v79;
  id v84 = specialized CanvasViewRulerHostingDelegate.__allocating_init(canvas:)();

  uint64_t v85 = direct field offset for CanvasView.rulerHostingDelegate;
  uint64_t v86 = *(void **)&v83[direct field offset for CanvasView.rulerHostingDelegate];
  *(void *)&v83[direct field offset for CanvasView.rulerHostingDelegate] = v84;

  objc_msgSend(v40, sel_setRulerHostingDelegate_, *(void *)&v83[v85]);
  [(UIScrollView *)v27 setDelegate:v83];
  id v87 = Canvas.editingView.getter();
  uint64_t v89 = v88;
  char v90 = (objc_class *)type metadata accessor for CanvasViewSelectionInteractionDelegate();
  char v91 = (char *)objc_allocWithZone(v90);
  *(void *)&v91[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = v89;
  swift_unknownObjectWeakAssign();
  v104.receiver = v91;
  v104.super_class = v90;
  id v92 = objc_msgSendSuper2(&v104, sel_init);

  uint64_t v93 = direct field offset for CanvasView.selectionInteractionDelegate;
  char v94 = *(void **)&v83[direct field offset for CanvasView.selectionInteractionDelegate];
  *(void *)&v83[direct field offset for CanvasView.selectionInteractionDelegate] = v92;

  id v95 = objc_msgSend(v40, sel_selectionInteraction);
  objc_msgSend(v95, sel_setDelegate_, *(void *)&v83[v93]);

  objc_msgSend(v83, sel_addSubview_, v27);
  CanvasView.scrollViewDidScroll(_:)(v27);
}

void specialized CanvasView.__allocating_init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, ValueMetadata *a2, unsigned __int8 *a3, char a4, char a5, void *a6, double a7, double a8, double a9, double a10)
{
  id v20 = objc_allocWithZone((Class)type metadata accessor for CanvasView());
  specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t specialized CanvasView.__allocating_init(context:frame:paper:allowsEditing:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, uint64_t a2, int a3, char a4, void *a5, double a6, double a7, double a8, double a9)
{
  int v18 = a3;
  uint64_t v19 = type metadata accessor for Capsule();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  id v22 = (ValueMetadata *)&v27[-v21];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v20 + 16))(&v27[-v21], a2, v19);
  int v23 = (a3 << 31 >> 31) & 3;
  if (v18 == 2) {
    LOBYTE(v23) = 3;
  }
  unsigned __int8 v28 = v23;
  specialized CanvasView.__allocating_init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(a1, v22, &v28, 1, a4, a5, a6, a7, a8, a9);
  uint64_t v25 = v24;
  (*(void (**)(ValueMetadata *, uint64_t))(v20 + 8))(v22, v19);
  return v25;
}

id specialized CanvasView.contentSnapshottingView.setter(uint64_t a1)
{
  id result = *(id *)(v1 + direct field offset for CanvasView.canvasTiledView);
  if (result) {
    return objc_msgSend(result, sel_setContentSnapshottingView_, a1);
  }
  __break(1u);
  return result;
}

double UIEdgeInsetsInsetRect(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a1 + a6;
}

uint64_t type metadata accessor for CanvasView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized CanvasView.formAnalytics.getter()
{
  return *(void *)(v0 + direct field offset for CanvasView.formAnalytics);
}

void specialized CanvasView.scrollViewDidZoom(_:)()
{
  *(unsigned char *)(v0 + direct field offset for CanvasView.isZoomScaleAltered) = 1;
  uint64_t v1 = (void *)specialized Canvas.paperView.getter();
  id v2 = *(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v1) + 0x280);
  uint64_t v3 = v1;
  v2(v0);
}

id specialized CanvasView.scrollViewDidEndZooming(_:with:atScale:)(void *a1)
{
  CanvasView.updateContentInsets()();
  objc_msgSend(a1, sel_zoomScale);
  double v4 = v3;
  id result = objc_msgSend(a1, sel_minimumZoomScale);
  if (v4 == v6) {
    *(unsigned char *)(v1 + direct field offset for CanvasView.isZoomScaleAltered) = 0;
  }
  return result;
}

void sub_20C3377F4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(double *)a3 = (*(double (**)(void))(*(void *)(*(void *)(*(void *)(a2 + a1 - 8) + 8) + 8) + 8))(*(void *)(a2 + a1 - 24));
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v6;
}

uint64_t sub_20C33784C(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, double, double, double, double))(*(void *)(*(void *)(a4 + a3 - 8)
                                                                                               + 8)
                                                                                   + 16))(*(void *)(a4 + a3 - 24), *(void *)(*(void *)(a4 + a3 - 8) + 8), *a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_20C3378A0()
{
  return 24;
}

__n128 sub_20C3378AC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

id sub_20C3378C0@<X0>(void *a1@<X8>)
{
  id result = CanvasView.drawingPolicy.getter();
  *a1 = result;
  return result;
}

id sub_20C3378EC(uint64_t *a1)
{
  return CanvasView.drawingPolicy.setter(*a1);
}

uint64_t sub_20C337914()
{
  return 24;
}

__n128 sub_20C337920(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C337934@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CanvasView.canvasContentMode.getter(&v3);
  *a1 = v3;
  return result;
}

id sub_20C337970(char *a1)
{
  char v2 = *a1;
  return CanvasView.canvasContentMode.setter(&v2);
}

uint64_t sub_20C3379A8()
{
  return 24;
}

__n128 sub_20C3379B4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

id sub_20C3379C8@<X0>(void *a1@<X8>)
{
  id result = CanvasView.contentSnapshottingView.getter();
  *a1 = result;
  return result;
}

void sub_20C3379F4(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  specialized CanvasView.contentSnapshottingView.setter((uint64_t)v1);
}

uint64_t sub_20C337A44()
{
  return 24;
}

__n128 sub_20C337A50(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for CanvasView()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for CanvasView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CanvasView);
}

uint64_t dispatch thunk of CanvasView.movableAdornmentViews.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE60))();
}

uint64_t dispatch thunk of CanvasView.drawingPolicy.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE68))();
}

uint64_t dispatch thunk of CanvasView.drawingPolicy.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE70))();
}

uint64_t dispatch thunk of CanvasView.drawingPolicy.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE78))();
}

uint64_t dispatch thunk of CanvasView.canvasContentMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xEC8))();
}

uint64_t dispatch thunk of CanvasView.canvasContentMode.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xED0))();
}

uint64_t dispatch thunk of CanvasView.canvasContentMode.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xED8))();
}

uint64_t dispatch thunk of CanvasView.__allocating_init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)()
{
  return (*(uint64_t (**)(void))(v0 + 3856))();
}

uint64_t dispatch thunk of CanvasView.registerToolPickerObservers(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF28))();
}

uint64_t dispatch thunk of CanvasView.contentSnapshottingView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF30))();
}

uint64_t dispatch thunk of CanvasView.contentSnapshottingView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF38))();
}

uint64_t dispatch thunk of CanvasView.contentSnapshottingView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF40))();
}

uint64_t dispatch thunk of CanvasView.viewForZooming(in:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xFC0))();
}

uint64_t dispatch thunk of CanvasView.deselectAll()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xFC8))();
}

uint64_t dispatch thunk of CanvasView.scrollViewDidScroll(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xFD0))();
}

uint64_t dispatch thunk of CanvasView.scrollViewWillBeginDecelerating(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xFD8))();
}

uint64_t dispatch thunk of CanvasView.scrollViewDidZoom(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xFE0))();
}

uint64_t dispatch thunk of CanvasView.scrollViewDidEndZooming(_:with:atScale:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xFE8))();
}

uint64_t dispatch thunk of CanvasView.gestureRecognizer(_:shouldReceive:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1038))();
}

uint64_t dispatch thunk of CanvasView.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1040))();
}

uint64_t dispatch thunk of CanvasView.toolPickerSelectedToolDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1048))();
}

uint64_t dispatch thunk of CanvasView.toolPickerSelectedToolItemDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1050))();
}

uint64_t dispatch thunk of CanvasView.toolPickerIsRulerActiveDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1058))();
}

id outlined copy of PaperDocumentFindResult.Content(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  if (a6) {
    a1 = a5;
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type PaperDocumentFindResult and conformance PaperDocumentFindResult()
{
  unint64_t result = lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult;
  if (!lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult;
  if (!lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult;
  if (!lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult);
  }
  return result;
}

uint64_t sub_20C3380A8()
{
  outlined consume of PaperDocumentFindResult.Content(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), *(unsigned char *)(v0 + 56));
  return MEMORY[0x270FA0238](v0, 57, 7);
}

void outlined consume of PaperDocumentFindResult.Content(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  if (a6) {
    a1 = a5;
  }
}

uint64_t outlined init with take of FindResult(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_20C338118()
{
  return 24;
}

__n128 sub_20C338124(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t specialized CanvasView.canvasElementControllerCanvasForInsertion.getter()
{
  return v0;
}

uint64_t specialized CanvasView.canvasElementController(_:wantsToEnterFullscreen:)(char a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v3);
  if (result)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 40))(v1, a1 & 1, ObjectType, v5);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DrawingFindResult and conformance DrawingFindResult(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Void __swiftcall TextFormattingState.update(from:shouldUseStyle:)(PaperKit::Font *from, Swift::Bool shouldUseStyle)
{
  uint64_t v4 = (uint64_t (**)(void, void, void))v3;
  uint64_t v5 = v2;
  object = from->_familyName.value._object;
  float pointSize = from->pointSize;
  Swift::Int rawValue = from->traits.rawValue;
  if (object)
  {
    uint64_t countAndFlagsBits = from->_familyName.value._countAndFlagsBits;
  }
  else
  {
    object = from->_name.value._object;
    if (!object) {
      goto LABEL_6;
    }
    uint64_t countAndFlagsBits = from->_name.value._countAndFlagsBits;
  }
  double v11 = *(uint64_t (**)(unsigned char *, uint64_t, void))(v3 + 32);
  swift_bridgeObjectRetain();
  double v12 = (void (*)(unsigned char *, void))v11(v23, v5, v4);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  *(void *)uint64_t v14 = countAndFlagsBits;
  *(void *)(v14 + 8) = object;
  *(unsigned char *)(v14 + 16) = 0;
  v12(v23, 0);
LABEL_6:
  if (!shouldUseStyle) {
    return;
  }
  if ((~LODWORD(pointSize) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (pointSize <= -9.2234e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (pointSize >= 9.2234e18)
  {
LABEL_14:
    __break(1u);
    return;
  }
  uint64_t v15 = (void (*)(unsigned char *, void))((uint64_t (**)(unsigned char *, uint64_t, void))v4)[7](v23, v5, v4);
  *(void *)uint64_t v16 = (uint64_t)pointSize;
  *(unsigned char *)(v16 + 8) = 0;
  v15(v23, 0);
  swift_beginAccess();
  BOOL v17 = (static Font.Traits.bold & ~rawValue) == 0;
  int v18 = (void (*)(unsigned char *, void))((uint64_t (**)(unsigned char *, uint64_t, void))v4)[13](v23, v5, v4);
  BOOL *v19 = v17;
  v19[1] = 0;
  v18(v23, 0);
  swift_beginAccess();
  BOOL v20 = (static Font.Traits.italic & ~rawValue) == 0;
  uint64_t v21 = (void (*)(unsigned char *, void))((uint64_t (**)(unsigned char *, uint64_t, void))v4)[16](v23, v5, v4);
  *id v22 = v20;
  v22[1] = 0;
  v21(v23, 0);
}

uint64_t TextStyleSelectorModel.fontName.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t TextStyleSelectorModel.fontSize.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t TextStyleSelectorModel.bold.getter()
{
  return TextStyleSelectorModel.bold.getter();
}

{
  int v0;
  unsigned __int8 v2;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v3) {
    uint64_t v0 = 256;
  }
  else {
    uint64_t v0 = 0;
  }
  return v0 | v2;
}

uint64_t TextStyleSelectorModel.italic.getter()
{
  return TextStyleSelectorModel.bold.getter();
}

uint64_t TextStyleSelectorModel.underline.getter()
{
  return TextStyleSelectorModel.bold.getter();
}

uint64_t TextStyleSelectorModel.strikethrough.getter()
{
  return TextStyleSelectorModel.bold.getter();
}

uint64_t TextStyleSelectorModel.fontColor.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

uint64_t TextStyleSelectorModel.textAlignment.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void TextStyleSelectorModel.init(attributes:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<NSTextAlignment>>);
  uint64_t v46 = *(void *)(v2 - 8);
  uint64_t v47 = v2;
  MEMORY[0x270FA5388](v2);
  id v45 = &v35[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Color>>);
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  MEMORY[0x270FA5388](v4);
  int v42 = &v35[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Bool>>);
  uint64_t v6 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  id v8 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Int>>);
  uint64_t v9 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  double v11 = &v35[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Inspected<String>>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = &v35[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = *(void *)a1;
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v18 = *(void *)(a1 + 16);
  int v39 = *(unsigned __int8 *)(a1 + 24);
  id v50 = *(void **)(a1 + 32);
  uint64_t v37 = *(void *)(a1 + 40);
  int v36 = *(unsigned __int8 *)(a1 + 48);
  char v19 = *(unsigned char *)(a1 + 56);
  uint64_t v40 = *(void *)(a1 + 64);
  id v38 = *(id *)(a1 + 72);
  uint64_t v53 = v17;
  uint64_t v54 = v16;
  char v55 = 1;
  uint64_t v41 = v16;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Inspected<String>);
  Published.init(initialValue:)();
  uint64_t v20 = v12;
  uint64_t v21 = v49;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v13 + 32))(v49 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__fontName, v15, v20);
  uint64_t v53 = v18;
  LOBYTE(v54) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Inspected<Int>);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v9 + 32))(v21 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__fontSize, v11, v48);
  LOBYTE(v53) = v19 & 1;
  BYTE1(v53) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Inspected<Bool>);
  Published.init(initialValue:)();
  id v22 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v6 + 32);
  uint64_t v23 = v51;
  v22(v21 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__bold, v8, v51);
  LOBYTE(v53) = (v19 & 2) != 0;
  BYTE1(v53) = 1;
  Published.init(initialValue:)();
  v22(v21 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__italic, v8, v23);
  LOBYTE(v53) = (v19 & 4) != 0;
  BYTE1(v53) = 1;
  Published.init(initialValue:)();
  v22(v21 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__underline, v8, v23);
  LOBYTE(v53) = (v19 & 8) != 0;
  BYTE1(v53) = 1;
  Published.init(initialValue:)();
  v22(v21 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__strikethrough, v8, v23);
  uint64_t v24 = v50;
  if (!v50)
  {
    memset(v52, 0, sizeof(v52));
    double v26 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
    if (v26)
    {
      uint64_t v27 = v26;
      CGColorRef v25 = CGColorCreate(v26, (const CGFloat *)v52);

      if (v25)
      {
        uint64_t v24 = 0;
        goto LABEL_6;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
  CGColorRef v25 = (CGColorRef)v50;
LABEL_6:
  uint64_t v29 = v46;
  uint64_t v28 = v47;
  uint64_t v31 = v44;
  id v30 = v45;
  uint64_t v53 = (uint64_t)v25;
  LOBYTE(v54) = 1;
  id v32 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Inspected<Color>);
  id v33 = v42;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v43 + 32))(v21 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__fontColor, v33, v31);
  uint64_t v34 = 4;
  if (!v36) {
    uint64_t v34 = v37;
  }
  uint64_t v53 = v34;
  LOBYTE(v54) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Inspected<NSTextAlignment>);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v29 + 32))(v21 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__textAlignment, v30, v28);
  *(unsigned char *)(v21 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel_hasMultipleFontSizes) = v39;

  swift_bridgeObjectRelease();
  *(void *)(v21 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel_allowedTextStyles) = v40;
}

void TextStyleSelectorModel.inspect(_:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  char v30 = *((unsigned char *)a1 + 24);
  uint64_t v4 = (CGColor *)a1[4];
  int v27 = *((unsigned __int8 *)a1 + 48);
  char v5 = *((unsigned char *)a1 + 56);
  uint64_t v28 = a1[5];
  uint64_t v29 = a1[8];
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  uint64_t v6 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  *(void *)uint64_t v8 = v3;
  *(void *)(v8 + 8) = v2;
  *(unsigned char *)(v8 + 16) = 1;
  v6(v32, 0);
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v9 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  unsigned char *v10 = v5 & 1;
  v10[1] = 1;
  v9(v32, 0);
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  double v11 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  *uint64_t v12 = (v5 & 2) != 0;
  v12[1] = 1;
  v11(v32, 0);
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v13 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  *uint64_t v14 = (v5 & 4) != 0;
  v14[1] = 1;
  v13(v32, 0);
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v15 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  *uint64_t v16 = (v5 & 8) != 0;
  v16[1] = 1;
  v15(v32, 0);
  swift_release();
  swift_release();
  if (!v4)
  {
    memset(v31, 0, sizeof(v31));
    uint64_t v18 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
    if (v18)
    {
      char v19 = v18;
      CGColorRef v17 = CGColorCreate(v18, (const CGFloat *)v31);

      if (v17)
      {
        uint64_t v4 = 0;
        goto LABEL_6;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
  CGColorRef v17 = v4;
LABEL_6:
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v20 = v4;
  uint64_t v21 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  uint64_t v23 = v22;

  *uint64_t v23 = v17;
  *((unsigned char *)v23 + 8) = 1;
  v21(v32, 0);
  swift_release();
  swift_release();
  if (v27) {
    uint64_t v24 = 4;
  }
  else {
    uint64_t v24 = v28;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  CGColorRef v25 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  *(void *)uint64_t v26 = v24;
  *(unsigned char *)(v26 + 8) = 1;
  v25(v32, 0);
  swift_release();
  swift_release();
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel_hasMultipleFontSizes) = v30;
  *(void *)(v1 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel_allowedTextStyles) = v29;
}

uint64_t TextStyleSelectorModel.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__fontName;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Inspected<String>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__fontSize;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Int>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__bold;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Bool>>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__italic, v6);
  v7(v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__underline, v6);
  v7(v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__strikethrough, v6);
  uint64_t v8 = v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__fontColor;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Color>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__textAlignment;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<NSTextAlignment>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for TextStyleSelectorModel()
{
  return type metadata accessor for TextStyleSelectorModel(0);
}

uint64_t type metadata accessor for TextStyleSelectorModel(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for TextStyleSelectorModel);
}

void type metadata completion function for TextStyleSelectorModel()
{
  type metadata accessor for Published<Inspected<String>>(319, &lazy cache variable for type metadata for Published<Inspected<String>>, &demangling cache variable for type metadata for Inspected<String>, MEMORY[0x263EFDE58]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Inspected<String>>(319, &lazy cache variable for type metadata for Published<Inspected<Int>>, &demangling cache variable for type metadata for Inspected<Int>, MEMORY[0x263EFDE58]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<Inspected<String>>(319, &lazy cache variable for type metadata for Published<Inspected<Bool>>, &demangling cache variable for type metadata for Inspected<Bool>, MEMORY[0x263EFDE58]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Published<Inspected<String>>(319, &lazy cache variable for type metadata for Published<Inspected<Color>>, &demangling cache variable for type metadata for Inspected<Color>, MEMORY[0x263EFDE58]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Published<Inspected<String>>(319, &lazy cache variable for type metadata for Published<Inspected<NSTextAlignment>>, &demangling cache variable for type metadata for Inspected<NSTextAlignment>, MEMORY[0x263EFDE58]);
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance TextStyleSelectorModel@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for TextStyleSelectorModel(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for TextFormattingState.fontName.modify in conformance TextStyleSelectorModel(void *a1))()
{
  unint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return protocol witness for TextFormattingState.fontName.modify in conformance TextStyleSelectorModel;
}

uint64_t (*protocol witness for TextFormattingState.fontSize.modify in conformance TextStyleSelectorModel(void *a1))()
{
  unint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return protocol witness for TextFormattingState.fontName.modify in conformance TextStyleSelectorModel;
}

uint64_t protocol witness for TextFormattingState.textAlignment.setter in conformance TextStyleSelectorModel()
{
  return static Published.subscript.setter();
}

uint64_t protocol witness for TextFormattingState.bold.getter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.getter in conformance TextStyleSelectorModel();
}

{
  int v0;
  unsigned __int8 v2;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v3) {
    unint64_t v0 = 256;
  }
  else {
    unint64_t v0 = 0;
  }
  return v0 | v2;
}

uint64_t protocol witness for TextFormattingState.bold.setter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.setter in conformance TextStyleSelectorModel();
}

{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t (*protocol witness for TextFormattingState.bold.modify in conformance TextStyleSelectorModel(void *a1))()
{
  unint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return protocol witness for TextFormattingState.fontName.modify in conformance TextStyleSelectorModel;
}

uint64_t protocol witness for TextFormattingState.italic.getter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.getter in conformance TextStyleSelectorModel();
}

uint64_t protocol witness for TextFormattingState.italic.setter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.setter in conformance TextStyleSelectorModel();
}

uint64_t (*protocol witness for TextFormattingState.italic.modify in conformance TextStyleSelectorModel(void *a1))()
{
  unint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return protocol witness for TextFormattingState.fontName.modify in conformance TextStyleSelectorModel;
}

void protocol witness for TextFormattingState.fontName.modify in conformance TextStyleSelectorModel(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t protocol witness for TextFormattingState.underline.getter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.getter in conformance TextStyleSelectorModel();
}

uint64_t protocol witness for TextFormattingState.underline.setter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.setter in conformance TextStyleSelectorModel();
}

uint64_t protocol witness for TextFormattingState.strikethrough.getter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.getter in conformance TextStyleSelectorModel();
}

uint64_t protocol witness for TextFormattingState.strikethrough.setter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.setter in conformance TextStyleSelectorModel();
}

uint64_t protocol witness for TextFormattingState.fontColor.setter in conformance TextStyleSelectorModel()
{
  return static Published.subscript.setter();
}

uint64_t protocol witness for TextFormattingState.boldAllowed.getter in conformance TextStyleSelectorModel()
{
  return *(_DWORD *)(v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel_allowedTextStyles) & 1;
}

uint64_t protocol witness for TextFormattingState.italicAllowed.getter in conformance TextStyleSelectorModel()
{
  return (*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel_allowedTextStyles) >> 1) & 1;
}

uint64_t TextStyleSelector.init<>(attributes:fontTapHandler:colorTapHandler:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  long long v22 = *a1;
  uint64_t v7 = *((void *)a1 + 2);
  char v8 = *((unsigned char *)a1 + 24);
  uint64_t v9 = *((void *)a1 + 4);
  uint64_t v21 = *((void *)a1 + 5);
  char v10 = *((unsigned char *)a1 + 48);
  long long v20 = *(long long *)((char *)a1 + 56);
  uint64_t v11 = *((void *)a1 + 9);
  State.init(wrappedValue:)();
  uint64_t v12 = *((void *)&v27 + 1);
  *(unsigned char *)(a6 + 16) = v27;
  *(void *)(a6 + 24) = v12;
  char v35 = 0;
  State.init(wrappedValue:)();
  uint64_t v13 = *((void *)&v27 + 1);
  *(unsigned char *)(a6 + 32) = v27;
  *(void *)(a6 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v13;
  uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
  uint64_t v15 = (uint64_t *)(a6 + v14[11]);
  *uint64_t v15 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  *(void *)(a6 + v14[12] + 8) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = (void *)(a6 + v14[13]);
  CGColorRef v17 = (void *)(a6 + v14[14]);
  long long v27 = v22;
  uint64_t v28 = v7;
  char v29 = v8;
  uint64_t v30 = v9;
  uint64_t v31 = v21;
  char v32 = v10;
  long long v33 = v20;
  uint64_t v34 = v11;
  type metadata accessor for TextStyleSelectorModel(0);
  swift_allocObject();
  TextStyleSelectorModel.init(attributes:)((uint64_t)&v27);
  _s8PaperKit10FontPickerVAC7SwiftUI4ViewAAWlTm_0(&lazy protocol witness table cache variable for type TextStyleSelectorModel and conformance TextStyleSelectorModel, (void (*)(uint64_t))type metadata accessor for TextStyleSelectorModel);
  uint64_t result = ObservedObject.init(wrappedValue:)();
  *(void *)a6 = result;
  *(void *)(a6 + 8) = v19;
  *uint64_t v16 = a2;
  v16[1] = a3;
  void *v17 = a4;
  v17[1] = a5;
  return result;
}

uint64_t TextStyleSelector.fontSizeMenu.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v40 = type metadata accessor for ColorScheme();
  uint64_t v4 = *(void *)(v40 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v40);
  int v39 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v34 - v7;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>);
  uint64_t v9 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v37 = (uint64_t)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  uint64_t v15 = v14 - 8;
  MEMORY[0x270FA5388](v14);
  CGColorRef v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = v2;
  uint64_t v36 = a1;
  uint64_t v18 = *(void *)(a1 + 24);
  uint64_t v45 = *(void *)(a1 + 16);
  uint64_t v46 = v18;
  uint64_t v47 = v2;
  uint64_t v42 = v45;
  uint64_t v43 = v18;
  uint64_t v44 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<Range<Int>, Int, Button<Text>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type ForEach<Range<Int>, Int, Button<Text>> and conformance <> ForEach<A, B, C>();
  Menu.init(content:label:)();
  uint64_t v19 = static Alignment.center.getter();
  uint64_t v20 = v37;
  double v22 = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(64.0, 0, 0.0, 1, 64.0, 0, 36.0, 0, v37, 0.0, 1, 36.0, 0, v19, v21);
  (*(void (**)(char *, uint64_t, double))(v9 + 8))(v11, v38, v22);
  specialized Environment.wrappedValue.getter((uint64_t)v8);
  uint64_t v24 = v39;
  uint64_t v23 = v40;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v39, *MEMORY[0x263F18508], v40);
  LOBYTE(a1) = static ColorScheme.== infix(_:_:)();
  CGColorRef v25 = *(void (**)(char *, uint64_t))(v4 + 8);
  v25(v24, v23);
  v25(v8, v23);
  uint64_t v26 = self;
  long long v27 = &selRef_secondarySystemBackgroundColor;
  if ((a1 & 1) == 0) {
    long long v27 = &selRef_tertiarySystemBackgroundColor;
  }
  uint64_t v28 = MEMORY[0x21054A6C0]([v26 *v27]);
  char v29 = static Edge.Set.all.getter();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v20, (uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>);
  uint64_t v30 = &v17[*(int *)(v15 + 44)];
  *(void *)uint64_t v30 = v28;
  v30[8] = v29;
  outlined destroy of StocksKitCurrencyCache.Provider?(v20, &demangling cache variable for type metadata for ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>);
  uint64_t v31 = v41;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v17, v41, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  uint64_t v32 = v31
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)
               + 36);
  *(void *)uint64_t v32 = 0x4014000000000000;
  *(void *)(v32 + 8) = -1;
  *(_WORD *)(v32 + 16) = 256;
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
}

uint64_t closure #1 in TextStyleSelector.fontSizeMenu.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v6 = type metadata accessor for TextStyleSelector();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v18 - v8;
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v23._object = (void *)0x800000020C850420;
  v10._uint64_t countAndFlagsBits = 0x747020646C25;
  v10._object = (void *)0xE600000000000000;
  v11.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0xD000000000000014;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v23);
  uint64_t v21 = 0;
  uint64_t v22 = qword_26C14D200;
  v18[1] = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  unint64_t v14 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = (Swift::String *)swift_allocObject();
  uint64_t v16 = v19;
  v15[1]._uint64_t countAndFlagsBits = a2;
  v15[1]._object = v16;
  v15[2] = v13;
  v15[3]._uint64_t countAndFlagsBits = (uint64_t)&outlined read-only object #0 of closure #1 in TextStyleSelector.fontSizeMenu.getter;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v15 + v14, v9, v6);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Range<Int>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
  return ForEach<>.init(_:id:content:)();
}

uint64_t closure #1 in closure #1 in TextStyleSelector.fontSizeMenu.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v9 = type metadata accessor for TextStyleSelector();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  Swift::String v13 = (char *)&v24 - v12;
  unint64_t v14 = *a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_20C832C20;
  uint64_t v16 = MEMORY[0x263F8D750];
  *(void *)(result + 56) = MEMORY[0x263F8D6C8];
  *(void *)(result + 64) = v16;
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v14 < *(void *)(a2 + 16))
  {
    *(void *)(result + 32) = *(void *)(a2 + 8 * v14 + 32);
    uint64_t v17 = static String.localizedStringWithFormat(_:_:)();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    uint64_t v28 = v17;
    uint64_t v29 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v25, v9);
    unint64_t v20 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    unint64_t v21 = (v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = v26;
    *(void *)(v22 + 16) = a4;
    *(void *)(v22 + 24) = v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v22 + v20, v13, v9);
    *(void *)(v22 + v21) = a2;
    *(void *)(v22 + ((v21 + 15) & 0xFFFFFFFFFFFFFFF8)) = v14;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    return Button<>.init<A>(_:action:)();
  }
  __break(1u);
  return result;
}

void closure #1 in closure #1 in closure #1 in TextStyleSelector.fontSizeMenu.getter(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a2 + 16) > a3)
  {
    uint64_t v7 = *(void *)(a2 + 8 * a3 + 32);
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a5 + 56);
    swift_unknownObjectRetain();
    uint64_t v9 = (void (*)(unsigned char *, void))v8(v11, a4, a5);
    *(void *)uint64_t v10 = v7;
    *(unsigned char *)(v10 + 8) = 0;
    v9(v11, 0);
    swift_unknownObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t closure #2 in TextStyleSelector.fontSizeMenu.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(a2 + 40);
  swift_unknownObjectRetain();
  v6(a1, a2);
  swift_unknownObjectRelease();
  dispatch thunk of CustomStringConvertible.description.getter();
  v7._uint64_t countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  if (one-time initialization token for textBoxFontUnitString != -1) {
    swift_once();
  }
  Swift::String v8 = (Swift::String)static UIConstants.textBoxFontUnitString;
  swift_bridgeObjectRetain();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t v15 = v14;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v17 = static Font.body.getter();
  uint64_t v18 = swift_getKeyPath();
  id v19 = objc_msgSend(self, sel_labelColor);
  uint64_t v20 = MEMORY[0x21054A6C0](v19);
  uint64_t result = swift_getKeyPath();
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v11;
  *(unsigned char *)(a3 + 16) = v13 & 1;
  *(void *)(a3 + 24) = v15;
  *(void *)(a3 + 32) = KeyPath;
  *(void *)(a3 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 0x3FE0000000000000;
  *(void *)(a3 + 48) = v18;
  *(void *)(a3 + 56) = v17;
  *(void *)(a3 + 64) = result;
  *(void *)(a3 + 72) = v20;
  return result;
}

uint64_t TextStyleSelector.fontSizeStepper.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>);
  MEMORY[0x270FA5388](v6 - 8);
  Swift::String v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)Swift::String v8 = static VerticalAlignment.center.getter();
  *((void *)v8 + 1) = 0x4000000000000000;
  unsigned char v8[16] = 0;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>);
  closure #1 in TextStyleSelector.fontSizeStepper.getter(v3, *(void *)(a1 + 16), *(void *)(a1 + 24), (uint64_t)&v8[*(int *)(v9 + 44)]);
  LOBYTE(v3) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v8, a2, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>);
  uint64_t v18 = a2
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>)
               + 36);
  *(unsigned char *)uint64_t v18 = v3;
  *(void *)(v18 + 8) = v11;
  *(void *)(v18 + 16) = v13;
  *(void *)(v18 + 24) = v15;
  *(void *)(v18 + 32) = v17;
  *(unsigned char *)(v18 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 0;
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>);
}

uint64_t closure #1 in TextStyleSelector.fontSizeStepper.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v114 = a2;
  uint64_t v115 = a3;
  uint64_t v113 = a4;
  uint64_t v118 = type metadata accessor for ColorScheme();
  uint64_t v122 = *(void *)(v118 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v118);
  v117 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v116 = (uint64_t)&v88 - v7;
  uint64_t v8 = type metadata accessor for TextStyleSelector();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v88 - v11;
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>);
  uint64_t v121 = *(void *)(v119 - 8);
  MEMORY[0x270FA5388](v119);
  uint64_t v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v107 = (uint64_t)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v19 = (char *)&v88 - v18;
  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>)
       - 8;
  uint64_t v20 = MEMORY[0x270FA5388](v120);
  uint64_t v110 = (uint64_t)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v88 - v22;
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)
       - 8;
  uint64_t v24 = MEMORY[0x270FA5388](v106);
  uint64_t v112 = (uint64_t)&v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v111 = (uint64_t)&v88 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v108 = (uint64_t)&v88 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v109 = (uint64_t)&v88 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v34 = (char *)&v88 - v33;
  MEMORY[0x270FA5388](v32);
  uint64_t v103 = (uint64_t)&v88 - v35;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v104 = v9 + 16;
  uint64_t v105 = v36;
  char v94 = v12;
  uint64_t v89 = a1;
  v36(v12, a1, v8);
  uint64_t v37 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v101 = ((v37 + 32) & ~v37) + v10;
  uint64_t v38 = (v37 + 32) & ~v37;
  uint64_t v102 = v38;
  uint64_t v100 = v37 | 7;
  uint64_t v39 = swift_allocObject();
  uint64_t v40 = v115;
  *(void *)(v39 + 16) = v114;
  *(void *)(v39 + 24) = v40;
  uint64_t v41 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  uint64_t v98 = v9 + 32;
  uint64_t v99 = v41;
  uint64_t v90 = v8;
  v41(v39 + v38, v12, v8);
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>);
  unint64_t v96 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  char v91 = v14;
  Button.init(action:label:)();
  uint64_t v42 = static Alignment.center.getter();
  double v44 = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(54.0, 0, 0.0, 1, 54.0, 0, 36.0, 0, (uint64_t)v19, 0.0, 1, 36.0, 0, v42, v43);
  uint64_t v45 = *(void (**)(char *, uint64_t, double))(v121 + 8);
  v121 += 8;
  id v95 = v45;
  v45(v14, v119, v44);
  uint64_t v46 = v116;
  specialized Environment.wrappedValue.getter(v116);
  unsigned int v93 = *MEMORY[0x263F18508];
  uint64_t v47 = v122;
  id v92 = *(void (**)(char *))(v122 + 104);
  uint64_t v48 = v117;
  uint64_t v49 = v118;
  v92(v117);
  id v50 = v48;
  LOBYTE(v48) = static ColorScheme.== infix(_:_:)();
  uint64_t v51 = *(void (**)(char *, uint64_t))(v47 + 8);
  uint64_t v122 = v47 + 8;
  v51(v50, v49);
  v51((char *)v46, v49);
  uint64_t v52 = self;
  uint64_t v53 = &selRef_tertiarySystemBackgroundColor;
  if (v48) {
    uint64_t v53 = &selRef_secondarySystemBackgroundColor;
  }
  uint64_t v54 = MEMORY[0x21054A6C0]([v52 *v53]);
  char v55 = static Edge.Set.all.getter();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v19, (uint64_t)v23, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>);
  uint64_t v56 = &v23[*(int *)(v120 + 44)];
  *(void *)uint64_t v56 = v54;
  v56[8] = v55;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v23, (uint64_t)v34, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  uint64_t v57 = v106;
  uint64_t v58 = &v34[*(int *)(v106 + 44)];
  *(void *)uint64_t v58 = 0x4014000000000000;
  *((void *)v58 + 1) = 5;
  *((_WORD *)v58 + 8) = 256;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  uint64_t v59 = v103;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v34, v103, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  uint64_t v60 = v94;
  uint64_t v61 = v90;
  v105(v94, v89, v90);
  uint64_t v62 = swift_allocObject();
  uint64_t v63 = v115;
  *(void *)(v62 + 16) = v114;
  *(void *)(v62 + 24) = v63;
  v99(v62 + v102, v60, v61);
  unint64_t v64 = v91;
  Button.init(action:label:)();
  uint64_t v65 = static Alignment.center.getter();
  uint64_t v66 = v107;
  double v68 = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(54.0, 0, 0.0, 1, 54.0, 0, 36.0, 0, v107, 0.0, 1, 36.0, 0, v65, v67);
  v95(v64, v119, v68);
  uint64_t v69 = v116;
  specialized Environment.wrappedValue.getter(v116);
  double v70 = v117;
  uint64_t v71 = v118;
  ((void (*)(char *, void, uint64_t))v92)(v117, v93, v118);
  uint64_t v72 = v69;
  double v73 = v70;
  LOBYTE(v7AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = static ColorScheme.== infix(_:_:)();
  v51(v73, v71);
  v51((char *)v72, v71);
  uint64_t v74 = self;
  int v75 = &selRef_tertiarySystemBackgroundColor;
  if (v70) {
    int v75 = &selRef_secondarySystemBackgroundColor;
  }
  uint64_t v76 = MEMORY[0x21054A6C0]([v74 *v75]);
  char v77 = static Edge.Set.all.getter();
  uint64_t v78 = v110;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v66, v110, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>);
  uint64_t v79 = v78 + *(int *)(v120 + 44);
  *(void *)uint64_t v79 = v76;
  *(unsigned char *)(v79 + 8) = v77;
  outlined destroy of StocksKitCurrencyCache.Provider?(v66, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>);
  uint64_t v80 = v108;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v78, v108, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  uint64_t v81 = v80 + *(int *)(v57 + 44);
  *(void *)uint64_t v81 = 0x4014000000000000;
  *(void *)(v81 + 8) = 10;
  *(_WORD *)(v81 + 16) = 256;
  outlined destroy of StocksKitCurrencyCache.Provider?(v78, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  uint64_t v82 = v109;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v80, v109, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  uint64_t v83 = v111;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v59, v111, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  uint64_t v84 = v112;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v82, v112, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  uint64_t v85 = v113;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v83, v113, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>));
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v84, v85 + *(int *)(v86 + 48), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v82, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v84, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v83, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
}

uint64_t closure #1 in closure #1 in TextStyleSelector.fontSizeStepper.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 40);
  swift_unknownObjectRetain_n();
  uint64_t v6 = v5(a2, a3);
  uint64_t result = swift_unknownObjectRelease();
  if (__OFSUB__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    if (v6 - 1 <= 5) {
      uint64_t v8 = 5;
    }
    else {
      uint64_t v8 = v6 - 1;
    }
    uint64_t v9 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a3 + 56))(v11, a2, a3);
    *(void *)uint64_t v10 = v8;
    *(unsigned char *)(v10 + 8) = 0;
    v9(v11, 0);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t closure #2 in closure #1 in TextStyleSelector.fontSizeStepper.getter()
{
  Image.init(systemName:)();
  id v0 = objc_msgSend(self, sel_labelColor);
  MEMORY[0x21054A6C0](v0);
  swift_getKeyPath();
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v5._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v5._object = (void *)0x800000020C8503F0;
  v1._object = (void *)0x800000020C8503D0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000012;
  v2.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v2.value._object = (void *)0xEB00000000656C62;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, paperKitBundle, v3, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type String and conformance String();
  View.accessibilityLabel<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #3 in closure #1 in TextStyleSelector.fontSizeStepper.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 40);
  swift_unknownObjectRetain_n();
  uint64_t v6 = v5(a2, a3);
  uint64_t result = swift_unknownObjectRelease();
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    if (v6 + 1 >= 300) {
      uint64_t v8 = 300;
    }
    else {
      uint64_t v8 = v6 + 1;
    }
    uint64_t v9 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a3 + 56))(v11, a2, a3);
    *(void *)uint64_t v10 = v8;
    *(unsigned char *)(v10 + 8) = 0;
    v9(v11, 0);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t closure #4 in closure #1 in TextStyleSelector.fontSizeStepper.getter()
{
  Image.init(systemName:)();
  id v0 = objc_msgSend(self, sel_labelColor);
  MEMORY[0x21054A6C0](v0);
  swift_getKeyPath();
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v5._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  v5._object = (void *)0x800000020C8503A0;
  v1._object = (void *)0x800000020C850380;
  v1._uint64_t countAndFlagsBits = 0xD000000000000012;
  v2.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v2.value._object = (void *)0xEB00000000656C62;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, paperKitBundle, v3, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type String and conformance String();
  View.accessibilityLabel<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t TextStyleSelector.fontPicker.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v46 = a2;
  uint64_t v45 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v45 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v45);
  double v44 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v43 = (uint64_t)&v40 - v9;
  uint64_t v10 = *(void *)(a1 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v8);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>);
  uint64_t v12 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v41 = (uint64_t)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  uint64_t v18 = v17 - 8;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1);
  unint64_t v21 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v22 + v21, (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  uint64_t v23 = static Alignment.center.getter();
  uint64_t v24 = v41;
  double v26 = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(64.0, 0, 0.0, 1, 64.0, 0, 36.0, 0, v41, 0.0, 1, 36.0, 0, v23, v25);
  (*(void (**)(char *, uint64_t, double))(v12 + 8))(v14, v42, v26);
  uint64_t v27 = v43;
  specialized Environment.wrappedValue.getter(v43);
  uint64_t v28 = v44;
  uint64_t v29 = v45;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v44, *MEMORY[0x263F18508], v45);
  uint64_t v30 = v28;
  LOBYTE(v28) = static ColorScheme.== infix(_:_:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v5 + 8);
  v31(v30, v29);
  v31((char *)v27, v29);
  uint64_t v32 = self;
  uint64_t v33 = &selRef_secondarySystemBackgroundColor;
  if ((v28 & 1) == 0) {
    uint64_t v33 = &selRef_tertiarySystemBackgroundColor;
  }
  uint64_t v34 = MEMORY[0x21054A6C0]([v32 *v33]);
  char v35 = static Edge.Set.all.getter();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v24, (uint64_t)v20, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>);
  uint64_t v36 = &v20[*(int *)(v18 + 44)];
  *(void *)uint64_t v36 = v34;
  v36[8] = v35;
  outlined destroy of StocksKitCurrencyCache.Provider?(v24, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>);
  uint64_t v37 = v46;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v20, v46, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  uint64_t v38 = v37
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)
               + 36);
  *(void *)uint64_t v38 = 0x4014000000000000;
  *(void *)(v38 + 8) = -1;
  *(_WORD *)(v38 + 16) = 256;
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
}

uint64_t closure #1 in TextStyleSelector.fontPicker.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TextStyleSelector();
  uint64_t v3 = a1 + *(int *)(v2 + 48);
  if (MEMORY[0x210550400](v3))
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void (**)(uint64_t))(a1 + *(int *)(v2 + 52));
    if (v7)
    {
      uint64_t v8 = swift_retain();
      v7(v8);
      return outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v7);
    }
    else
    {
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
      State.wrappedValue.getter();
      State.wrappedValue.setter();
      return swift_release();
    }
  }
}

uint64_t closure #2 in TextStyleSelector.fontPicker.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = Image.init(systemName:)();
  id v3 = objc_msgSend(self, sel_labelColor);
  uint64_t v4 = MEMORY[0x21054A6C0](v3);
  uint64_t result = swift_getKeyPath();
  *a1 = v2;
  a1[1] = result;
  a1[2] = v4;
  return result;
}

uint64_t closure #1 in TextStyleSelector.colorControl.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = a4;
  uint64_t v33 = a2;
  uint64_t v7 = type metadata accessor for TextStyleSelector();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v35 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v34 = (char *)&v31 - v9;
  uint64_t v10 = type metadata accessor for MultiColorSwatchButton(0);
  uint64_t v11 = (int *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v36 = (uint64_t)&v31 - v15;
  uint64_t v32 = a1;
  ObservedObject.projectedValue.getter();
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  long long v16 = v46;
  uint64_t v17 = (void *)v47;
  LOBYTE(a1) = BYTE8(v47);
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  long long v41 = v16;
  uint64_t v42 = v17;
  char v43 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Binding<Inspected<Color>>);
  Binding.subscript.getter();

  swift_release();
  swift_release();
  swift_release();
  uint64_t v18 = v44;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  long long v31 = v45;
  uint64_t v20 = v34;
  v19(v34, v32, v7);
  unint64_t v21 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v33;
  *(void *)(v22 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v22 + v21, v20, v7);
  *(void *)uint64_t v14 = swift_getKeyPath();
  v14[8] = 0;
  uint64_t v23 = (uint64_t *)&v14[v11[8]];
  *uint64_t v23 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = (uint64_t (**)())&v14[v11[9]];
  *((void *)v14 + 2) = v18;
  *(_OWORD *)(v14 + 24) = v31;
  *uint64_t v24 = partial apply for closure #1 in closure #1 in TextStyleSelector.colorControl.getter;
  v24[1] = (uint64_t (*)())v22;
  uint64_t v25 = (Swift::Bool (__swiftcall **)(UIGestureRecognizer *__struct_ptr, UITouch))&v14[v11[10]];
  *uint64_t v25 = CanvasView.gestureRecognizer(_:shouldReceive:);
  v25[1] = 0;
  uint64_t v26 = v36;
  outlined init with take of MultiColorSwatchButton((uint64_t)v14, v36);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v27 = v37;
  outlined init with copy of FontSizePicker(v26, v37, type metadata accessor for MultiColorSwatchButton);
  uint64_t v28 = (_OWORD *)(v27
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<MultiColorSwatchButton, _FrameLayout>)
                          + 36));
  long long v29 = v47;
  *uint64_t v28 = v46;
  v28[1] = v29;
  void v28[2] = v48;
  return outlined destroy of FontSizePicker(v26, type metadata accessor for MultiColorSwatchButton);
}

uint64_t key path index equality operator for (WritableKeyPath<Color, CGColorRef>)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

void key path getter for Inspected.subscript<A>(dynamicMember:) : Inspected<Color>ColorCGColorRef(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = *a1;
  swift_getAtKeyPath();

  *a2 = v4;
}

uint64_t key path setter for Inspected.subscript<A>(dynamicMember:) : Inspected<Color>ColorCGColorRef(void **a1, uint64_t a2)
{
  id v3 = *a1;
  swift_retain();
  id v4 = v3;
  swift_setAtWritableKeyPath();
  uint64_t result = swift_release();
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t closure #1 in TextStyleSelector.textAlignment.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v62 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToggleButton<NSTextAlignment>)
     - 8;
  uint64_t v54 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v61 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v60 = (uint64_t)&v51 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v59 = (uint64_t)&v51 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v67 = (uint64_t)&v51 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v58 = (char *)&v51 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v57 = (char *)&v51 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v51 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v51 - v23;
  uint64_t v55 = Image.init(systemName:)();
  uint64_t v56 = a2;
  uint64_t v25 = type metadata accessor for TextStyleSelector();
  uint64_t v26 = *a1;
  uint64_t v65 = a1[1];
  uint64_t v66 = v26;
  uint64_t v27 = *(void *)(v25 + 24);
  uint64_t v64 = *(void *)(v25 + 16);
  uint64_t v53 = *(void *)(v27 + 8);
  ObservedObject.projectedValue.getter();
  uint64_t v75 = a2;
  uint64_t v76 = a3;
  swift_getKeyPath();
  *(void *)&long long v68 = *(void *)(a3 + 8);
  uint64_t v52 = a3;
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  long long v51 = v77;
  uint64_t v28 = v78;
  LOBYTE(a2) = v79;
  *(void *)&v24[*(int *)(v7 + 68)] = swift_getKeyPath();
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  *((void *)v24 + 4) = 0;
  *((void *)v24 + 5) = 0;
  v24[48] = 1;
  *(_OWORD *)(v24 + 56) = v51;
  *((void *)v24 + 9) = v28;
  v24[80] = a2;
  *(void *)uint64_t v24 = v55;
  *((void *)v24 + 1) = 0;
  v24[16] = 1;
  *((void *)v24 + 3) = 5;
  uint64_t v55 = Image.init(systemName:)();
  ObservedObject.projectedValue.getter();
  uint64_t v29 = v56;
  uint64_t v73 = v56;
  uint64_t v74 = a3;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  long long v51 = v77;
  uint64_t v30 = v78;
  LOBYTE(a2) = v79;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v32 = v54;
  *(void *)&v22[*(int *)(v54 + 68)] = KeyPath;
  swift_storeEnumTagMultiPayload();
  *((void *)v22 + 5) = 0;
  v22[48] = 1;
  *(_OWORD *)(v22 + 56) = v51;
  *((void *)v22 + 9) = v30;
  v22[80] = a2;
  *(void *)uint64_t v22 = v55;
  *((void *)v22 + 1) = 0;
  v22[16] = 1;
  *(_OWORD *)(v22 + 24) = xmmword_20C834980;
  uint64_t v55 = Image.init(systemName:)();
  ObservedObject.projectedValue.getter();
  uint64_t v33 = v52;
  uint64_t v71 = v29;
  uint64_t v72 = v52;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  long long v51 = v77;
  uint64_t v34 = v78;
  char v35 = v79;
  uint64_t v36 = swift_getKeyPath();
  uint64_t v37 = v57;
  *(void *)&v57[*(int *)(v32 + 68)] = v36;
  swift_storeEnumTagMultiPayload();
  uint64_t v38 = (uint64_t)v37;
  *((void *)v37 + 5) = 0;
  v37[48] = 1;
  *(_OWORD *)(v37 + 56) = v51;
  *((void *)v37 + 9) = v34;
  v37[80] = v35;
  *(void *)uint64_t v37 = v55;
  *((void *)v37 + 1) = 0;
  v37[16] = 1;
  *(_OWORD *)(v37 + 24) = xmmword_20C834990;
  uint64_t v39 = Image.init(systemName:)();
  ObservedObject.projectedValue.getter();
  uint64_t v69 = v29;
  uint64_t v70 = v33;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  long long v68 = v77;
  uint64_t v40 = v78;
  LOBYTE(v34) = v79;
  uint64_t v41 = swift_getKeyPath();
  uint64_t v42 = *(int *)(v32 + 68);
  uint64_t v43 = (uint64_t)v58;
  *(void *)&v58[v42] = v41;
  swift_storeEnumTagMultiPayload();
  *(void *)(v43 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 0;
  *(unsigned char *)(v43 + 48) = 1;
  *(_OWORD *)(v43 + 56) = v68;
  *(void *)(v43 + 72) = v40;
  *(unsigned char *)(v43 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v34;
  *(void *)uint64_t v43 = v39;
  *(void *)(v43 + 8) = 0;
  *(unsigned char *)(v43 + 16) = 1;
  *(_OWORD *)(v43 + 24) = xmmword_20C8349A0;
  uint64_t v44 = v67;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v24, v67, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  uint64_t v45 = v59;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v22, v59, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  uint64_t v46 = v60;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v38, v60, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  uint64_t v47 = v61;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v43, v61, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  uint64_t v48 = v62;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v44, v62, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  uint64_t v49 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>));
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v45, v48 + v49[12], &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v46, v48 + v49[16], &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v47, v48 + v49[20], &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v43, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v38, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v45, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v67, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
}

uint64_t TextStyleSelector.colorControl.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t (*a5)(uint64_t, void, void)@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = static VerticalAlignment.center.getter();
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  return a5(v6, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t closure #1 in TextStyleSelector.textStyleControl.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v87 = a4;
  uint64_t v110 = type metadata accessor for FontToggleStyle();
  MEMORY[0x270FA5388](v110);
  uint64_t v8 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Toggle<Text>);
  uint64_t v116 = *(void *)(v111 - 8);
  MEMORY[0x270FA5388](v111);
  uint64_t v98 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.toggleStyle<A>(_:)>>.0);
  uint64_t v114 = *(void *)(v112 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v112);
  uint64_t v86 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v85 = (char *)&v83 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v108 = (char *)&v83 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v113 = (char *)&v83 - v16;
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>)
      - 8;
  uint64_t v17 = MEMORY[0x270FA5388](v90);
  uint64_t v95 = (uint64_t)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v99 = (uint64_t)&v83 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v115 = (uint64_t)&v83 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v109 = (uint64_t)&v83 - v23;
  uint64_t v103 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v96 = a2;
  uint64_t v24 = type metadata accessor for TextStyleSelector();
  uint64_t v97 = a1;
  uint64_t v106 = *(void *)(v24 + 16);
  uint64_t v105 = *(void *)(*(void *)(v24 + 24) + 8);
  ObservedObject.projectedValue.getter();
  uint64_t v123 = a2;
  uint64_t v124 = a3;
  swift_getKeyPath();
  uint64_t v107 = *(void *)(a3 + 8);
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v26 = v129;
  uint64_t v25 = v130;
  LOBYTE(a1) = v131;
  char v27 = v132;
  swift_getKeyPath();
  uint64_t v125 = v26;
  uint64_t v126 = v25;
  char v127 = a1;
  char v128 = v27;
  uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<Bool>>);
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v28 = v98;
  Toggle<>.init(_:isOn:)();
  *(void *)&v8[*(int *)(v110 + 24)] = swift_getKeyPath();
  uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  *(void *)uint64_t v8 = 1684828002;
  *((void *)v8 + 1) = 0xE400000000000000;
  *((void *)v8 + 2) = 5;
  uint64_t v89 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Toggle<Text> and conformance Toggle<A>, &demangling cache variable for type metadata for Toggle<Text>);
  uint64_t v102 = _s8PaperKit10FontPickerVAC7SwiftUI4ViewAAWlTm_0(&lazy protocol witness table cache variable for type FontToggleStyle and conformance FontToggleStyle, (void (*)(uint64_t))type metadata accessor for FontToggleStyle);
  uint64_t v29 = v113;
  uint64_t v30 = v111;
  View.toggleStyle<A>(_:)();
  uint64_t v101 = type metadata accessor for FontToggleStyle;
  outlined destroy of FontSizePicker((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for FontToggleStyle);
  long long v31 = *(void (**)(char *, uint64_t))(v116 + 8);
  v116 += 8;
  uint64_t v100 = v31;
  v31(v28, v30);
  uint64_t v88 = a3;
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 208);
  swift_unknownObjectRetain();
  uint64_t v33 = v96;
  LOBYTE(a2) = v32(v96, a3);
  swift_unknownObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v35 = swift_allocObject();
  *(unsigned char *)(v35 + 16) = (a2 & 1) == 0;
  uint64_t v36 = v114;
  char v91 = *(void (**)(uint64_t, char *, uint64_t))(v114 + 16);
  uint64_t v92 = v114 + 16;
  uint64_t v37 = v115;
  uint64_t v38 = v29;
  uint64_t v39 = v29;
  uint64_t v40 = v112;
  v91(v115, v39, v112);
  uint64_t v41 = (uint64_t *)(v37 + *(int *)(v90 + 44));
  *uint64_t v41 = KeyPath;
  v41[1] = (uint64_t)partial apply for closure #1 in View.disabled(_:);
  v41[2] = v35;
  unsigned int v93 = *(void (**)(char *, uint64_t))(v36 + 8);
  uint64_t v94 = v36 + 8;
  v93(v38, v40);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v37, v109, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  uint64_t v84 = LocalizedStringKey.init(stringLiteral:)();
  ObservedObject.projectedValue.getter();
  uint64_t v121 = v33;
  uint64_t v42 = v88;
  uint64_t v122 = v88;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v43 = v129;
  uint64_t v44 = v130;
  LOBYTE(a1) = v131;
  LOBYTE(v38) = v132;
  swift_getKeyPath();
  uint64_t v125 = v43;
  uint64_t v126 = v44;
  char v127 = a1;
  char v128 = (char)v38;
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = v98;
  Toggle<>.init(_:isOn:)();
  *(void *)&v8[*(int *)(v110 + 24)] = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  *(void *)uint64_t v8 = 0x63696C617469;
  *((void *)v8 + 1) = 0xE600000000000000;
  *((void *)v8 + 2) = 0;
  uint64_t v46 = v113;
  uint64_t v47 = v111;
  View.toggleStyle<A>(_:)();
  outlined destroy of FontSizePicker((uint64_t)v8, (uint64_t (*)(void))v101);
  v100(v45, v47);
  uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t))(v42 + 216);
  swift_unknownObjectRetain();
  uint64_t v49 = v96;
  LOBYTE(v37) = v48(v96, v42);
  swift_unknownObjectRelease();
  uint64_t v50 = swift_getKeyPath();
  uint64_t v51 = swift_allocObject();
  *(unsigned char *)(v51 + 16) = (v37 & 1) == 0;
  uint64_t v52 = v99;
  uint64_t v53 = v112;
  v91(v99, v46, v112);
  uint64_t v54 = (uint64_t *)(v52 + *(int *)(v90 + 44));
  *uint64_t v54 = v50;
  v54[1] = (uint64_t)closure #1 in View.disabled(_:)partial apply;
  v54[2] = v51;
  v93(v46, v53);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v52, v115, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v90 = v55;
  ObservedObject.projectedValue.getter();
  uint64_t v119 = v49;
  uint64_t v120 = v42;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v56 = v129;
  uint64_t v57 = v130;
  LOBYTE(v45) = v131;
  LOBYTE(v52) = v132;
  swift_getKeyPath();
  uint64_t v125 = v56;
  uint64_t v126 = v57;
  char v127 = (char)v45;
  char v128 = v52;
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v58 = v98;
  Toggle<>.init(_:isOn:)();
  *(void *)&v8[*(int *)(v110 + 24)] = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  *(void *)uint64_t v8 = 0x6E696C7265646E75;
  *((void *)v8 + 1) = 0xE900000000000065;
  *((void *)v8 + 2) = 0;
  uint64_t v59 = v108;
  uint64_t v60 = v111;
  View.toggleStyle<A>(_:)();
  outlined destroy of FontSizePicker((uint64_t)v8, (uint64_t (*)(void))v101);
  uint64_t v61 = v58;
  v100(v58, v60);
  uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v114 + 32);
  v114 += 32;
  uint64_t v90 = (uint64_t)v62;
  v62(v113, v59, v112);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v84 = v63;
  uint64_t v83 = v64;
  ObservedObject.projectedValue.getter();
  uint64_t v117 = v96;
  uint64_t v118 = v88;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v65 = v129;
  uint64_t v66 = v130;
  LOBYTE(v45) = v131;
  LOBYTE(v6AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v132;
  swift_getKeyPath();
  uint64_t v125 = v65;
  uint64_t v126 = v66;
  char v127 = (char)v45;
  char v128 = v60;
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  Toggle<>.init(_:isOn:)();
  *(void *)&v8[*(int *)(v110 + 24)] = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  strcpy(v8, "strikethrough");
  *((_WORD *)v8 + 7) = -4864;
  *((void *)v8 + 2) = 10;
  uint64_t v67 = v85;
  uint64_t v68 = v111;
  View.toggleStyle<A>(_:)();
  outlined destroy of FontSizePicker((uint64_t)v8, (uint64_t (*)(void))v101);
  v100(v61, v68);
  uint64_t v69 = v108;
  uint64_t v70 = v67;
  uint64_t v71 = v112;
  ((void (*)(char *, char *, uint64_t))v90)(v108, v67, v112);
  uint64_t v72 = v99;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v109, v99, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  uint64_t v73 = v95;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v115, v95, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  uint64_t v74 = v113;
  uint64_t v75 = (void (*)(char *, char *, uint64_t))v91;
  v91((uint64_t)v70, v113, v71);
  uint64_t v76 = v86;
  uint64_t v77 = v71;
  v75(v86, v69, v71);
  uint64_t v78 = (void (*)(uint64_t, char *, uint64_t))v75;
  uint64_t v79 = v87;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v72, v87, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  uint64_t v80 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0));
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v73, v79 + v80[12], &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  v78(v79 + v80[16], v70, v77);
  v78(v79 + v80[20], v76, v77);
  uint64_t v81 = v93;
  v93(v108, v77);
  v81(v74, v77);
  outlined destroy of StocksKitCurrencyCache.Provider?(v115, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v109, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  v81(v76, v77);
  v81(v70, v77);
  outlined destroy of StocksKitCurrencyCache.Provider?(v95, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v99, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
}

uint64_t TextStyleSelector.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v66 = a2;
  uint64_t v67 = type metadata accessor for PresentationAdaptation();
  uint64_t v65 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v64 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PopoverAttachmentAnchor();
  uint64_t v62 = *(void *)(v4 - 8);
  uint64_t v63 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v60 = (uint64_t *)((char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void *)(a1 - 8);
  uint64_t v58 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v5);
  uint64_t v57 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModif);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _Environmen);
  uint64_t v13 = v12 - 8;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Im);
  uint64_t v53 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0);
  uint64_t v61 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v56 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v11 = static HorizontalAlignment.center.getter();
  *((void *)v11 + 1) = 0x4028000000000000;
  v11[16] = 0;
  uint64_t v20 = (uint64_t)&v11[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image,)
                             + 44)];
  uint64_t v55 = a1;
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 24);
  closure #1 in TextStyleSelector.body.getter(v21, v20);
  char v23 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v11, (uint64_t)v15, &demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModif);
  uint64_t v32 = &v15[*(int *)(v13 + 44)];
  *uint64_t v32 = v23;
  *((void *)v32 + 1) = v25;
  *((void *)v32 + 2) = v27;
  *((void *)v32 + 3) = v29;
  *((void *)v32 + 4) = v31;
  v32[40] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModif);
  id v33 = objc_msgSend(self, sel_systemBackgroundColor);
  uint64_t v34 = MEMORY[0x21054A6C0](v33);
  LOBYTE(v11) = static Edge.Set.all.getter();
  uint64_t v54 = v18;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v15, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _Environmen);
  uint64_t v35 = &v18[*(int *)(v16 + 36)];
  *(void *)uint64_t v35 = v34;
  v35[8] = (char)v11;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _Environmen);
  uint64_t v36 = v52;
  uint64_t v37 = *(void *)(v52 + 40);
  char v72 = *(unsigned char *)(v52 + 32);
  uint64_t v73 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  uint64_t v38 = v57;
  uint64_t v39 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v57, v36, v55);
  unint64_t v40 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = v22;
  *(void *)(v41 + 24) = v21;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v41 + v40, v38, v39);
  uint64_t v42 = type metadata accessor for FontPicker(0);
  unint64_t v43 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Imag();
  uint64_t v44 = _s8PaperKit10FontPickerVAC7SwiftUI4ViewAAWlTm_0(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, (void (*)(uint64_t))type metadata accessor for FontPicker);
  uint64_t v45 = v60;
  uint64_t v46 = v53;
  default argument 1 of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)(v60);
  uint64_t v47 = v56;
  uint64_t v48 = (uint64_t)v54;
  View.popoverCore<A>(isPresented:attachmentAnchor:arrowEdges:isDetachable:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t *, uint64_t))(v62 + 8))(v45, v63);
  outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Im);
  uint64_t v49 = v64;
  static PresentationAdaptation.popover.getter();
  uint64_t v68 = v46;
  uint64_t v69 = v42;
  unint64_t v70 = v43;
  uint64_t v71 = v44;
  swift_getOpaqueTypeConformance2();
  uint64_t v50 = v59;
  View.presentationCompactAdaptation(_:)();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v49, v67);
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v47, v50);
}

uint64_t closure #1 in TextStyleSelector.body.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>)>>);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v27 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedConten);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v27 - v19;
  *(void *)uint64_t v20 = static VerticalAlignment.center.getter();
  *((void *)v20 + 1) = 0;
  v20[16] = 1;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>);
  closure #1 in closure #1 in TextStyleSelector.body.getter((uint64_t)&v20[*(int *)(v21 + 44)]);
  *(void *)uint64_t v14 = static VerticalAlignment.center.getter();
  *((void *)v14 + 1) = 0;
  v14[16] = 1;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>, ModifiedContent<Mod);
  closure #2 in closure #1 in TextStyleSelector.body.getter(a1, (uint64_t)&v14[*(int *)(v22 + 44)]);
  uint64_t v23 = type metadata accessor for TextStyleSelector();
  TextStyleSelector.colorControl.getter(v23, 0x4000000000000000, 0, &demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>)>>, (uint64_t (*)(uint64_t, void, void))closure #1 in TextStyleSelector.textAlignment.getter, (uint64_t)v8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v20, (uint64_t)v18, &demangling cache variable for type metadata for HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedConten);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for HStack<TupleView<(ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>)>>);
  uint64_t v24 = v28;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v18, v28, &demangling cache variable for type metadata for HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, Acc);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v12, v24 + *(int *)(v25 + 48), &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedConten);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v6, v24 + *(int *)(v25 + 64), &demangling cache variable for type metadata for HStack<TupleView<(ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>)>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for HStack<TupleView<(ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>)>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedConten);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for HStack<TupleView<(ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>)>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedConten);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>);
}

uint64_t closure #1 in closure #1 in TextStyleSelector.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v17 - v12;
  uint64_t v14 = type metadata accessor for TextStyleSelector();
  TextStyleSelector.colorControl.getter(v14, 0x4000000000000000, 0, &demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, (uint64_t (*)(uint64_t, void, void))closure #1 in TextStyleSelector.textStyleControl.getter, (uint64_t)v13);
  TextStyleSelector.colorControl.getter(v14, 0, 1, &demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, ModifiedContent<MultiColorSwatchButton, _FrameLayout>>, (uint64_t (*)(uint64_t, void, void))closure #1 in TextStyleSelector.colorControl.getter, (uint64_t)v7);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v5, &demangling cache variable for type metadata for HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v11, a1, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>));
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v5, a1 + *(int *)(v15 + 48), &demangling cache variable for type metadata for HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>);
}

uint64_t closure #2 in closure #1 in TextStyleSelector.body.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  v24[1] = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v24 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v24 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)v24 - v19;
  uint64_t v21 = type metadata accessor for TextStyleSelector();
  TextStyleSelector.fontSizeMenu.getter(v21, (uint64_t)v20);
  TextStyleSelector.fontSizeStepper.getter(v21, (uint64_t)v14);
  TextStyleSelector.fontPicker.getter(v21, (uint64_t)v8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v20, (uint64_t)v18, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v18, a2, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Modified);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v12, a2 + *(int *)(v22 + 48), &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v6, a2 + *(int *)(v22 + 64), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
}

uint64_t closure #2 in TextStyleSelector.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v28 = a4;
  uint64_t v27 = type metadata accessor for TextStyleSelector();
  uint64_t v6 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
  swift_unknownObjectRetain();
  uint64_t v10 = v9(a2, a3);
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 40);
  swift_unknownObjectRetain();
  uint64_t v14 = v13(a2, a3);
  swift_unknownObjectRelease();
  double v15 = (double)v14;
  uint64_t v16 = (void *)MEMORY[0x21054D080](v10, v12);
  swift_bridgeObjectRelease();
  id v17 = objc_msgSend(self, sel_fontDescriptorWithName_size_, v16, v15);

  uint64_t v18 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v26, v27);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v8, v18);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = v28;
  *uint64_t v28 = KeyPath;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for FontPicker(0);
  *(uint64_t *)((char *)v22 + *(int *)(result + 20)) = (uint64_t)v17;
  uint64_t v24 = (uint64_t (**)(uint64_t))((char *)v22 + *(int *)(result + 24));
  *uint64_t v24 = partial apply for closure #1 in closure #2 in TextStyleSelector.body.getter;
  v24[1] = (uint64_t (*)(uint64_t))v20;
  return result;
}

uint64_t closure #1 in closure #2 in TextStyleSelector.body.getter(uint64_t a1)
{
  uint64_t v2 = self;
  swift_unknownObjectRetain();
  Font.init(_:)(&v5, (UIFont)objc_msgSend(v2, sel_fontWithDescriptor_size_, a1, 0.0));
  from._name.value._uint64_t countAndFlagsBits = v5._name.value._countAndFlagsBits;
  *(_OWORD *)&from._name.value._object = *(_OWORD *)&v5._name.value._object;
  from._familyName.value._object = v5._familyName.value._object;
  from.float pointSize = v5.pointSize;
  from.traits.Swift::Int rawValue = v5.traits.rawValue;
  TextFormattingState.update(from:shouldUseStyle:)(&from, 0);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall FontPicker.Coordinator.fontPickerViewControllerDidPickFont(_:)(UIFontPickerViewController *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PresentationMode();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FontPicker(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = [(UIFontPickerViewController *)a1 selectedFontDescriptor];
  if (v11)
  {
    uint64_t v12 = v11;
    (*(void (**)(void))(v2 + OBJC_IVAR____TtCV8PaperKit10FontPicker11Coordinator_pickedFont))();
  }
  outlined init with copy of FontSizePicker(v2 + OBJC_IVAR____TtCV8PaperKit10FontPicker11Coordinator_parent, (uint64_t)v10, type metadata accessor for FontPicker);
  specialized Environment.wrappedValue.getter((uint64_t)v7);
  outlined destroy of FontSizePicker((uint64_t)v10, type metadata accessor for FontPicker);
  MEMORY[0x21054A870](v5);
  PresentationMode.dismiss()();
  Binding.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Binding<PresentationMode>);
}

id FontPicker.Coordinator.__deallocating_deinit()
{
  return FontPicker.Coordinator.__deallocating_deinit(type metadata accessor for FontPicker.Coordinator);
}

uint64_t ObjC metadata update function for FontPicker.Coordinator()
{
  return type metadata accessor for FontPicker.Coordinator(0);
}

uint64_t type metadata accessor for FontPicker.Coordinator(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, type metadata singleton initialization cache for FontPicker.Coordinator);
}

uint64_t type metadata completion function for FontPicker.Coordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for FontPicker.Coordinator(a1, a2, a3, type metadata accessor for FontPicker);
}

uint64_t type metadata accessor for FontPicker(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, type metadata singleton initialization cache for FontPicker);
}

id protocol witness for UIViewControllerRepresentable.makeUIViewController(context:) in conformance FontPicker(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82778]), sel_init);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIViewControllerRepresentableContext<FontPicker>);
  UIViewControllerRepresentableContext.coordinator.getter();
  objc_msgSend(v4, sel_setDelegate_, v6);

  objc_msgSend(v4, sel_setSelectedFontDescriptor_, *(void *)(v2 + *(int *)(a2 + 20)));
  return v4;
}

uint64_t protocol witness for UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:) in conformance FontPicker()
{
  return MEMORY[0x270F026A0]();
}

uint64_t protocol witness for static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:) in conformance FontPicker()
{
  return MEMORY[0x270F026B0]();
}

uint64_t protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance FontPicker@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1 - 8;
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of FontSizePicker(v2, (uint64_t)v6, type metadata accessor for FontPicker);
  uint64_t v7 = (uint64_t *)(v2 + *(int *)(v4 + 32));
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  uint64_t v10 = (objc_class *)type metadata accessor for FontPicker.Coordinator(0);
  uint64_t v11 = (char *)objc_allocWithZone(v10);
  outlined init with copy of FontSizePicker((uint64_t)v6, (uint64_t)&v11[OBJC_IVAR____TtCV8PaperKit10FontPicker11Coordinator_parent], type metadata accessor for FontPicker);
  uint64_t v12 = &v11[OBJC_IVAR____TtCV8PaperKit10FontPicker11Coordinator_pickedFont];
  *(void *)uint64_t v12 = v9;
  *((void *)v12 + 1) = v8;
  v15.receiver = v11;
  v15.super_class = v10;
  swift_retain();
  id v13 = objc_msgSendSuper2(&v15, sel_init);
  uint64_t result = outlined destroy of FontSizePicker((uint64_t)v6, type metadata accessor for FontPicker);
  *a2 = v13;
  return result;
}

uint64_t protocol witness for UIViewControllerRepresentable._identifiedViewTree(in:) in conformance FontPicker()
{
  return MEMORY[0x270F026F0]();
}

uint64_t protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance FontPicker()
{
  return MEMORY[0x270F026E0]();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FontPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _s8PaperKit10FontPickerVAC7SwiftUI4ViewAAWlTm_0(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, (void (*)(uint64_t))type metadata accessor for FontPicker);
  return MEMORY[0x270F02710](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FontPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _s8PaperKit10FontPickerVAC7SwiftUI4ViewAAWlTm_0(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, (void (*)(uint64_t))type metadata accessor for FontPicker);
  return MEMORY[0x270F026D8](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance FontPicker()
{
}

id FontSizePicker.makeUIViewController(context:)()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for FontSizePicker(0) + 20));
  if (one-time initialization token for textBoxFontUnitString != -1) {
    swift_once();
  }
  long long v2 = static UIConstants.textBoxFontUnitString;
  objc_allocWithZone((Class)type metadata accessor for FontSizeViewController());
  swift_bridgeObjectRetain();
  id v3 = ValueEditingViewController.init(minValue:maxValue:currentValue:unit:contentViewMargin:)(5, 300, v1, v2, *((uint64_t *)&v2 + 1), 0.0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIViewControllerRepresentableContext<FontSizePicker>);
  UIViewControllerRepresentableContext.coordinator.getter();
  swift_unknownObjectWeakAssign();

  return v3;
}

id FontSizePicker.Coordinator.__deallocating_deinit()
{
  return FontPicker.Coordinator.__deallocating_deinit(type metadata accessor for FontSizePicker.Coordinator);
}

id FontPicker.Coordinator.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc FontPicker.Coordinator.__ivar_destroyer(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  outlined destroy of FontSizePicker(a1 + *a3, a4);
  return swift_release();
}

uint64_t ObjC metadata update function for FontSizePicker.Coordinator()
{
  return type metadata accessor for FontSizePicker.Coordinator(0);
}

uint64_t type metadata accessor for FontSizePicker.Coordinator(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for FontSizePicker.Coordinator);
}

uint64_t type metadata completion function for FontSizePicker.Coordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for FontPicker.Coordinator(a1, a2, a3, type metadata accessor for FontSizePicker);
}

uint64_t type metadata completion function for FontPicker.Coordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for FontSizePicker(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for FontSizePicker);
}

uint64_t *initializeBufferWithCopyOfBuffer for FontSizePicker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    objc_super v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for FontSizePicker(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  swift_release();
  if (EnumCaseMultiPayload == 1)
  {
    swift_release();
    uint64_t v3 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                + 32);
    uint64_t v4 = type metadata accessor for PresentationMode();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  return swift_release();
}

void *initializeWithCopy for FontSizePicker(void *a1, void *a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                + 32);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for PresentationMode();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  return a1;
}

void *assignWithCopy for FontSizePicker(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1, (uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for FontSizePicker(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1, (uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v12 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FontSizePicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C33FC9C);
}

uint64_t sub_20C33FC9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v1AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for FontSizePicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C33FD74);
}

uint64_t sub_20C33FD74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

void type metadata completion function for FontSizePicker()
{
}

{
  unint64_t v0;

  type metadata accessor for Published<Inspected<String>>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Binding<PresentationMode>>.Content, &demangling cache variable for type metadata for Binding<PresentationMode>, MEMORY[0x263F185C8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Published<Inspected<String>>(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata completion function for TextStyleSelector()
{
  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for TextStyleSelector(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v8 = a3[11];
    uint64_t v9 = (void *)(a1 + v8);
    unint64_t v10 = (uint64_t *)((char *)a2 + v8);
    *(void *)(a1 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a2[5];
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      *uint64_t v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = (uint64_t)a2 + a3[12];
    *(void *)(swift_unknownObjectWeakCopyInit() + 8) = *(void *)(v13 + 8);
    uint64_t v14 = a3[13];
    objc_super v15 = (void *)(a1 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    if (*v16)
    {
      uint64_t v17 = v16[1];
      *objc_super v15 = *v16;
      v15[1] = v17;
      swift_retain();
    }
    else
    {
      *(_OWORD *)objc_super v15 = *(_OWORD *)v16;
    }
    uint64_t v18 = a3[14];
    unint64_t v19 = (void *)(a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    if (*v20)
    {
      uint64_t v21 = v20[1];
      void *v19 = *v20;
      v19[1] = v21;
      swift_retain();
    }
    else
    {
      *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
    }
  }
  return a1;
}

uint64_t destroy for TextStyleSelector(uint64_t a1, int *a2)
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + a2[11];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t result = swift_unknownObjectWeakDestroy();
  if (*(void *)(a1 + a2[13])) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + a2[14]))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for TextStyleSelector(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = a3[11];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *(void *)(a1 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a2 + a3[12];
  *(void *)(swift_unknownObjectWeakCopyInit() + 8) = *(void *)(v11 + 8);
  uint64_t v12 = a3[13];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  if (*v14)
  {
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }
  uint64_t v16 = a3[14];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  if (*v18)
  {
    uint64_t v19 = v18[1];
    void *v17 = *v18;
    v17[1] = v19;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  }
  return a1;
}

uint64_t assignWithCopy for TextStyleSelector(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = a3[11];
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    outlined destroy of StocksKitCurrencyCache.Provider?(a1 + v6, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v10 = a2 + a3[12];
  *(void *)(swift_unknownObjectWeakCopyAssign() + 8) = *(void *)(v10 + 8);
  uint64_t v11 = a3[13];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = a2 + v11;
  uint64_t v14 = *(void *)(a1 + v11);
  uint64_t v15 = *(void *)(a2 + v11);
  if (v14)
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(v13 + 8);
      *uint64_t v12 = v15;
      v12[1] = v16;
      swift_retain();
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v15)
  {
    uint64_t v17 = *(void *)(v13 + 8);
    *uint64_t v12 = v15;
    v12[1] = v17;
    swift_retain();
    goto LABEL_13;
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
LABEL_13:
  uint64_t v18 = a3[14];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *(void *)(a1 + v18);
  uint64_t v22 = *v20;
  if (!v21)
  {
    if (v22)
    {
      uint64_t v24 = v20[1];
      void *v19 = v22;
      v19[1] = v24;
      swift_retain();
      return a1;
    }
LABEL_19:
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    return a1;
  }
  if (!v22)
  {
    swift_release();
    goto LABEL_19;
  }
  uint64_t v23 = v20[1];
  void *v19 = v22;
  v19[1] = v23;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for TextStyleSelector(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[11];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v12 = (char *)a2 + a3[12];
  *(void *)(swift_unknownObjectWeakTakeInit() + 8) = *((void *)v12 + 1);
  uint64_t v13 = a3[13];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = *v15;
  if (*v15)
  {
    uint64_t v17 = v15[1];
    *uint64_t v14 = v16;
    v14[1] = v17;
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  }
  uint64_t v18 = a3[14];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)((char *)a2 + v18);
  uint64_t v21 = *v20;
  if (*v20)
  {
    uint64_t v22 = v20[1];
    void *v19 = v21;
    v19[1] = v22;
  }
  else
  {
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  }
  return a1;
}

uint64_t assignWithTake for TextStyleSelector(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = *(void *)(a2 + 40);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = a3[11];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    outlined destroy of StocksKitCurrencyCache.Provider?(a1 + v7, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  uint64_t v12 = a2 + a3[12];
  *(void *)(swift_unknownObjectWeakTakeAssign() + 8) = *(void *)(v12 + 8);
  uint64_t v13 = a3[13];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a1 + v13);
  uint64_t v17 = *(void *)(a2 + v13);
  if (v16)
  {
    if (v17)
    {
      uint64_t v18 = *(void *)(v15 + 8);
      *uint64_t v14 = v17;
      v14[1] = v18;
      swift_release();
      goto LABEL_12;
    }
    swift_release();
  }
  else if (v17)
  {
    uint64_t v19 = *(void *)(v15 + 8);
    *uint64_t v14 = v17;
    v14[1] = v19;
    goto LABEL_12;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
LABEL_12:
  uint64_t v20 = a3[14];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v23 = *(void *)(a1 + v20);
  uint64_t v24 = *v22;
  if (!v23)
  {
    if (v24)
    {
      uint64_t v26 = v22[1];
      *uint64_t v21 = v24;
      v21[1] = v26;
      return a1;
    }
LABEL_18:
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    return a1;
  }
  if (!v24)
  {
    swift_release();
    goto LABEL_18;
  }
  uint64_t v25 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v25;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextStyleSelector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C340928);
}

uint64_t sub_20C340928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for TextStyleSelector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C3409F0);
}

uint64_t sub_20C3409F0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for TextStyleSelector()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for FontPicker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    unint64_t v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    *unint64_t v4 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v4[1] = a2[1];
      swift_retain();
      swift_retain();
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      uint64_t v9 = (char *)v4 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = *(int *)(a3 + 20);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = *(void **)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + v13) = (uint64_t)v15;
    uint64_t v16 = (uint64_t *)((char *)v4 + v14);
    uint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    id v19 = v15;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for FontPicker(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  swift_release();
  if (EnumCaseMultiPayload == 1)
  {
    swift_release();
    uint64_t v5 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                + 32);
    uint64_t v6 = type metadata accessor for PresentationMode();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }

  return swift_release();
}

void *initializeWithCopy for FontPicker(void *a1, void *a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                + 32);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for PresentationMode();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = *(void **)((char *)a2 + v11);
  *(void *)((char *)a1 + v11) = v13;
  uint64_t v14 = (void *)((char *)a1 + v12);
  uint64_t v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  id v17 = v13;
  swift_retain();
  return a1;
}

void *assignWithCopy for FontPicker(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1, (uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = *(void **)((char *)a2 + v11);
  uint64_t v13 = *(void **)((char *)a1 + v11);
  *(void *)((char *)a1 + v11) = v12;
  id v14 = v12;

  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (void *)((char *)a1 + v15);
  id v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for FontSizePicker(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                + 32);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for PresentationMode();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v12 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  return a1;
}

void *assignWithTake for FontPicker(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1, (uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = *(void **)((char *)a1 + v12);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);

  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FontPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C341194);
}

uint64_t sub_20C341194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v1AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for FontPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C34126C);
}

uint64_t sub_20C34126C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

void type metadata completion function for FontPicker()
{
}

uint64_t base witness table accessor for View in FontPicker()
{
  return _s8PaperKit10FontPickerVAC7SwiftUI4ViewAAWlTm_0(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, (void (*)(uint64_t))type metadata accessor for FontPicker);
}

uint64_t associated type witness table accessor for View.Body : View in TextStyleSelector<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in FontSizePicker()
{
  return MEMORY[0x263F1BB58];
}

uint64_t protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance FontSizePicker@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1 - 8;
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of FontSizePicker(v2, (uint64_t)v6, type metadata accessor for FontSizePicker);
  uint64_t v7 = (uint64_t *)(v2 + *(int *)(v4 + 32));
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  unint64_t v10 = (objc_class *)type metadata accessor for FontSizePicker.Coordinator(0);
  uint64_t v11 = (char *)objc_allocWithZone(v10);
  outlined init with copy of FontSizePicker((uint64_t)v6, (uint64_t)&v11[OBJC_IVAR____TtCV8PaperKit14FontSizePicker11Coordinator_parent], type metadata accessor for FontSizePicker);
  uint64_t v12 = &v11[OBJC_IVAR____TtCV8PaperKit14FontSizePicker11Coordinator_pickedSize];
  *(void *)uint64_t v12 = v9;
  *((void *)v12 + 1) = v8;
  v15.receiver = v11;
  v15.super_class = v10;
  swift_retain();
  id v13 = objc_msgSendSuper2(&v15, sel_init);
  uint64_t result = outlined destroy of FontSizePicker((uint64_t)v6, type metadata accessor for FontSizePicker);
  *a2 = v13;
  return result;
}

uint64_t protocol witness for UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:) in conformance FontPicker()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FontSizePicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _s8PaperKit10FontPickerVAC7SwiftUI4ViewAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type FontSizePicker and conformance FontSizePicker, (void (*)(uint64_t))type metadata accessor for FontSizePicker);
  return MEMORY[0x270F02710](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FontSizePicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _s8PaperKit10FontPickerVAC7SwiftUI4ViewAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type FontSizePicker and conformance FontSizePicker, (void (*)(uint64_t))type metadata accessor for FontSizePicker);
  return MEMORY[0x270F026D8](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance FontSizePicker()
{
}

uint64_t base witness table accessor for View in FontSizePicker()
{
  return _s8PaperKit10FontPickerVAC7SwiftUI4ViewAAWlTm_0(&lazy protocol witness table cache variable for type FontSizePicker and conformance FontSizePicker, (void (*)(uint64_t))type metadata accessor for FontSizePicker);
}

uint64_t _s8PaperKit10FontPickerVAC7SwiftUI4ViewAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for TextStyleSelectorModel(uint64_t a1)
{
  uint64_t result = _s8PaperKit10FontPickerVAC7SwiftUI4ViewAAWlTm_0(&lazy protocol witness table cache variable for type TextStyleSelectorModel and conformance TextStyleSelectorModel, (void (*)(uint64_t))type metadata accessor for TextStyleSelectorModel);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in TextStyleSelectorModel()
{
  return MEMORY[0x263EFDDD8];
}

uint64_t key path getter for TextStyleSelectorModel.fontName : TextStyleSelectorModel@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

uint64_t key path setter for TextStyleSelectorModel.fontName : TextStyleSelectorModel()
{
  return static Published.subscript.setter();
}

uint64_t key path getter for TextStyleSelectorModel.fontSize : TextStyleSelectorModel@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for TextStyleSelectorModel.fontSize : TextStyleSelectorModel()
{
  return static Published.subscript.setter();
}

uint64_t key path getter for TextStyleSelectorModel.bold : TextStyleSelectorModel@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for TextStyleSelectorModel.bold : TextStyleSelectorModel()
{
  return static Published.subscript.setter();
}

uint64_t key path getter for TextStyleSelectorModel.fontColor : TextStyleSelectorModel@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for TextStyleSelectorModel.fontColor : TextStyleSelectorModel(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v1;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_20C341CB0@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for TextStyleSelectorModel.bold : TextStyleSelectorModel(a1);
}

uint64_t sub_20C341CD8()
{
  return key path setter for TextStyleSelectorModel.bold : TextStyleSelectorModel();
}

uint64_t sub_20C341D00@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for TextStyleSelectorModel.bold : TextStyleSelectorModel(a1);
}

uint64_t sub_20C341D28()
{
  return key path setter for TextStyleSelectorModel.bold : TextStyleSelectorModel();
}

uint64_t sub_20C341D50@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for TextStyleSelectorModel.bold : TextStyleSelectorModel(a1);
}

uint64_t sub_20C341D78()
{
  return key path setter for TextStyleSelectorModel.bold : TextStyleSelectorModel();
}

uint64_t sub_20C341DA0@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for TextStyleSelectorModel.bold : TextStyleSelectorModel(a1);
}

uint64_t sub_20C341DC8()
{
  return key path setter for TextStyleSelectorModel.bold : TextStyleSelectorModel();
}

uint64_t key path getter for TextStyleSelectorModel.textAlignment : TextStyleSelectorModel@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for TextStyleSelectorModel.textAlignment : TextStyleSelectorModel()
{
  return static Published.subscript.setter();
}

uint64_t partial apply for closure #2 in TextStyleSelector.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for TextStyleSelector() - 8);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return closure #2 in TextStyleSelector.body.getter(v6, v3, v4, a1);
}

uint64_t key path getter for EnvironmentValues.presentationMode : EnvironmentValues()
{
  return EnvironmentValues.presentationMode.getter();
}

uint64_t key path getter for EnvironmentValues.font : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.font : EnvironmentValues, serialized()
{
  return EnvironmentValues.font.setter();
}

uint64_t partial apply for closure #1 in closure #2 in TextStyleSelector.body.getter(uint64_t a1)
{
  type metadata accessor for TextStyleSelector();
  return closure #1 in closure #2 in TextStyleSelector.body.getter(a1);
}

uint64_t sub_20C3420B0()
{
  return EnvironmentValues.presentationMode.getter();
}

uint64_t sub_20C3420D4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + a1 - 8) + 64))(*(void *)(a2 + a1 - 16));
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_20C342124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a4 + a3 - 8) + 72))(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)(a4 + a3 - 16));
}

uint64_t sub_20C342170()
{
  return 16;
}

__n128 sub_20C34217C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for closure #1 in TextStyleSelector.fontPicker.getter()
{
  return partial apply for closure #1 in TextStyleSelector.fontPicker.getter((uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in TextStyleSelector.fontPicker.getter);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in TextStyleSelector.fontSizeStepper.getter()
{
  return partial apply for closure #1 in TextStyleSelector.fontPicker.getter(closure #1 in closure #1 in TextStyleSelector.fontSizeStepper.getter);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    _s8PaperKit10FontPickerVAC7SwiftUI4ViewAAWlTm_0(&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #3 in closure #1 in TextStyleSelector.fontSizeStepper.getter()
{
  return partial apply for closure #1 in TextStyleSelector.fontPicker.getter(closure #3 in closure #1 in TextStyleSelector.fontSizeStepper.getter);
}

uint64_t partial apply for closure #1 in TextStyleSelector.fontPicker.getter(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for TextStyleSelector() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1(v5, v2, v3);
}

uint64_t partial apply for closure #1 in TextStyleSelector.fontSizeMenu.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TextStyleSelector.fontSizeMenu.getter(*(void *)(v1 + 32), *(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t partial apply for closure #2 in TextStyleSelector.fontSizeMenu.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in TextStyleSelector.fontSizeMenu.getter(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t *)&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, Button<Text>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, Button<Text>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, Button<Text>> and conformance <> ForEach<A, B, C>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ForEach<Range<Int>, Int, Button<Text>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, Button<Text>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

uint64_t sub_20C342660@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.minimumScaleFactor.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_20C34268C()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_20C3426B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_20C3426E0()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_20C34270C()
{
  uint64_t v1 = (int *)type metadata accessor for TextStyleSelector();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3 + v1[11];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_unknownObjectWeakDestroy();
  if (*(void *)(v5 + v1[13])) {
    swift_release();
  }
  if (*(void *)(v5 + v1[14])) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in TextStyleSelector.fontSizeMenu.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = *(void *)(type metadata accessor for TextStyleSelector() - 8);
  uint64_t v8 = v2[6];
  uint64_t v9 = (uint64_t)v2 + ((*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return closure #1 in closure #1 in TextStyleSelector.fontSizeMenu.getter(a1, v8, v9, v5, v6, a2);
}

uint64_t sub_20C342934()
{
  uint64_t v1 = (int *)type metadata accessor for TextStyleSelector();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3 + v1[11];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_unknownObjectWeakDestroy();
  if (*(void *)(v5 + v1[13])) {
    swift_release();
  }
  if (*(void *)(v5 + v1[14])) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in TextStyleSelector.fontSizeMenu.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(type metadata accessor for TextStyleSelector() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v0 + v5);
  unint64_t v7 = *(void *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));
  closure #1 in closure #1 in closure #1 in TextStyleSelector.fontSizeMenu.getter(v0 + v4, v6, v7, v1, v2);
}

void *sub_20C342B88@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, void))(*(void *)(a2 + a1 - 8) + 184))(&v6, *(void *)(a2 + a1 - 16));
  char v5 = v7;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 8) = v5;
  return result;
}

uint64_t sub_20C342BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 16);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  char v6 = *(unsigned char *)(a1 + 8);
  id v10 = *(id *)a1;
  char v11 = v6;
  char v7 = *(uint64_t (**)(id *, uint64_t, uint64_t))(v5 + 192);
  id v8 = v10;
  return v7(&v10, v4, v5);
}

uint64_t sub_20C342C5C()
{
  return 16;
}

__n128 sub_20C342C68(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_20C342C84()
{
  return 8;
}

uint64_t sub_20C342C90()
{
  return swift_release();
}

uint64_t sub_20C342C98(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_20C342CA8()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void *sub_20C342CF0(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = (int *)type metadata accessor for TextStyleSelector();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3 + v1[11];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_unknownObjectWeakDestroy();
  if (*(void *)(v5 + v1[13])) {
    swift_release();
  }
  if (*(void *)(v5 + v1[14])) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in TextStyleSelector.colorControl.getter()
{
  uint64_t v1 = type metadata accessor for TextStyleSelector();
  uint64_t v3 = *(void *)(v1 - 8);
  uint64_t result = v1 - 8;
  uint64_t v4 = (uint64_t (**)(void))(v0
                          + *(int *)(result + 64)
                          + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  if (*v4) {
    return (*v4)();
  }
  return result;
}

uint64_t outlined init with take of MultiColorSwatchButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MultiColorSwatchButton(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of FontSizePicker(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of FontSizePicker(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_20C343020@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + a1 - 8) + 88))(*(void *)(a2 + a1 - 16));
  *a3 = result & 1;
  a3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_20C343074(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v4 = *(void *)(a4 + a3 - 8);
  if (a1[1]) {
    int v6 = 256;
  }
  else {
    int v6 = 0;
  }
  return (*(uint64_t (**)(void, uint64_t))(v4 + 96))(v6 | *a1, v5);
}

uint64_t sub_20C3430CC()
{
  return 16;
}

__n128 sub_20C3430D8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

unsigned char *sub_20C3430E4@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unsigned __int8 *sub_20C3430F0(unsigned __int8 *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20C343100@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_20C343130()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_20C343158()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

unsigned char *partial apply for closure #1 in View.disabled(_:)(unsigned char *result)
{
  *result &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

uint64_t sub_20C343180@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + a1 - 8) + 112))(*(void *)(a2 + a1 - 16));
  *a3 = result & 1;
  a3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_20C3431D4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v4 = *(void *)(a4 + a3 - 8);
  if (a1[1]) {
    int v6 = 256;
  }
  else {
    int v6 = 0;
  }
  return (*(uint64_t (**)(void, uint64_t))(v4 + 120))(v6 | *a1, v5);
}

uint64_t sub_20C34322C()
{
  return 16;
}

__n128 sub_20C343238(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_20C343244()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_20C343254@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + a1 - 8) + 136))(*(void *)(a2 + a1 - 16));
  *a3 = result & 1;
  a3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_20C3432A8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v4 = *(void *)(a4 + a3 - 8);
  if (a1[1]) {
    int v6 = 256;
  }
  else {
    int v6 = 0;
  }
  return (*(uint64_t (**)(void, uint64_t))(v4 + 144))(v6 | *a1, v5);
}

uint64_t sub_20C343300()
{
  return 16;
}

__n128 sub_20C34330C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_20C343318@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + a1 - 8) + 160))(*(void *)(a2 + a1 - 16));
  *a3 = result & 1;
  a3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_20C34336C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v4 = *(void *)(a4 + a3 - 8);
  if (a1[1]) {
    int v6 = 256;
  }
  else {
    int v6 = 0;
  }
  return (*(uint64_t (**)(void, uint64_t))(v4 + 168))(v6 | *a1, v5);
}

uint64_t sub_20C3433C4()
{
  return 16;
}

__n128 sub_20C3433D0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_20C3433DC()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Im);
  type metadata accessor for FontPicker(255);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Imag();
  _s8PaperKit10FontPickerVAC7SwiftUI4ViewAAWlTm_0(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, (void (*)(uint64_t))type metadata accessor for FontPicker);
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, char *a2, int a3, int a4, int a5, void *a6, double a7, double a8, double a9, double a10)
{
  specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for Capsule<Image>, (uint64_t (*)(double, double, double, double))specialized Canvas.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:), a7, a8, a9, a10, (uint64_t (*)(void))type metadata accessor for Image, &lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image, &lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t)&protocol conformance descriptor for Image, &protocol witness table for Image,
    &demangling cache variable for type metadata for CanvasViewTiledViewDelegate<Image>,
    &demangling cache variable for type metadata for CanvasViewRulerHostingDelegate<Image>,
    specialized CanvasView.scrollViewDidScroll(_:));
}

void specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, char *a2, int a3, int a4, int a5, void *a6, uint64_t *a7, uint64_t (*a8)(double, double, double, double), double a9, double a10, double a11, double a12, uint64_t (*a13)(void), unint64_t *a14, void (*a15)(uint64_t), uint64_t a16, unint64_t *a17, uint64_t a18, void *a19, uint64_t *a20,uint64_t *a21,void (*a22)(id))
{
  v160 = a8;
  int v162 = a5;
  LODWORD(v159) = a4;
  LODWORD(v161) = a3;
  v167 = a2;
  id v158 = a1;
  uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(a7);
  uint64_t v164 = *(void *)(v168 - 8);
  MEMORY[0x270FA5388](v168);
  v163 = (char *)&v152 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[direct field offset for CanvasView.allowsContentSnapping] = 1;
  uint64_t v29 = &v22[direct field offset for CanvasView.calculateDocumentForTesting];
  *uint64_t v29 = 0;
  v29[1] = 0;
  *(void *)&v22[direct field offset for CanvasView.trackingPanGestureRecognizer] = 0;
  *(void *)&v22[direct field offset for CanvasView.rulerHostingDelegate] = 0;
  *(void *)&v22[direct field offset for CanvasView.tiledViewDelegate] = 0;
  *(void *)&v22[direct field offset for CanvasView.selectionInteractionDelegate] = 0;
  v22[direct field offset for CanvasView.canvasContentMode] = 0;
  *(void *)&v22[direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver] = 0;
  uint64_t v30 = direct field offset for CanvasView.zoomView;
  *(void *)&v22[direct field offset for CanvasView.zoomView] = 0;
  uint64_t v31 = direct field offset for CanvasView.formAnalytics;
  type metadata accessor for FormAnalytics();
  uint64_t v32 = swift_allocObject();
  *(_DWORD *)(v32 + 16) = 791357252;
  *(_WORD *)(v32 + 2AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 0;
  id v33 = v22;
  unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)&v22[v31] = v32;
  *(void *)(v32 + 24) = v34;
  v33[direct field offset for CanvasView.adjustingInsets] = 0;
  v33[direct field offset for CanvasView.firstLayout] = 1;
  v33[direct field offset for CanvasView.isZoomScaleAltered] = 0;
  *(_WORD *)&v33[direct field offset for CanvasView.snappedContentInsets] = 257;
  uint64_t v35 = &v33[direct field offset for CanvasView.minimumContentInsets];
  long long v36 = *(_OWORD *)(MEMORY[0x263F834E8] + 16);
  *uint64_t v35 = *MEMORY[0x263F834E8];
  v35[1] = v36;
  id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82B88]), sel_initWithFrame_, 0.0, 0.0, a11, a12);
  uint64_t v38 = self;
  id v39 = v37;
  id v40 = objc_msgSend(v38, sel_clearColor);
  objc_msgSend(v39, sel_setBackgroundColor_, v40);

  objc_msgSend(v39, sel_setContentSize_, 2000.0, 2000.0);
  objc_msgSend(v39, sel_setMinimumZoomScale_, 0.1);
  if (one-time initialization token for maximumPaperZoomScale != -1) {
    swift_once();
  }
  objc_msgSend(v39, sel_setMaximumZoomScale_, *(double *)&static UIConstants.maximumPaperZoomScale);
  objc_msgSend(v39, sel_setAlwaysBounceVertical_, 1);
  objc_msgSend(v39, sel_setAlwaysBounceHorizontal_, 1);
  objc_msgSend(v39, sel_setDelaysContentTouches_, 1);
  objc_msgSend(v39, sel_setContentInsetAdjustmentBehavior_, 2);
  objc_msgSend(v39, sel_setDecelerationRate_, *MEMORY[0x263F83970]);
  *(void *)&v33[direct field offset for CanvasView.canvasScrollView] = v39;
  uint64_t v41 = self;
  id v42 = v39;
  id v43 = objc_msgSend(v41, sel_standardUserDefaults);
  uint64_t v44 = (void *)MEMORY[0x21054D080](0xD000000000000035, 0x800000020C8501E0);
  id v45 = objc_msgSend(v43, sel_BOOLForKey_, v44);

  uint64_t v46 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  id v47 = objc_allocWithZone(MEMORY[0x263F14BF8]);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v166 = v42;
  id v49 = objc_msgSend(v47, sel_initInScrollView_sixChannelBlending_defaultDrawingClass_, v42, v45, ObjCClassFromMetadata);
  objc_msgSend(v49, sel_setSupportsCopyAsText_, 1);
  objc_msgSend(v49, sel_setInsertSpaceEnabled_, 1);
  id v50 = objc_msgSend(v49, sel_canvasView);
  if (v50)
  {
    uint64_t v51 = v50;
    id v52 = objc_msgSend(objc_allocWithZone(v46), sel_init);
    objc_msgSend(v51, sel_setDrawing_, v52);
  }
  id v53 = objc_msgSend(v49, sel_canvasView);
  if (v53)
  {
    uint64_t v54 = v53;
    objc_msgSend(v53, sel_setOpaque_, 0);
  }
  id v55 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasElementContainerView()), sel_initWithFrame_, 0.0, 0.0, a11, a12);
  uint64_t v56 = *(void **)&v22[v30];
  *(void *)&v22[v30] = v55;

  objc_msgSend(v49, sel_setAttachmentContainerView_, *(void *)&v22[v30]);
  *(void *)&v33[direct field offset for CanvasView.canvasTiledView] = v49;
  id v165 = v49;

  uint64_t v57 = *(uint64_t (**)(char *, char *, uint64_t))(v164 + 16);
  uint64_t v157 = v164 + 16;
  v156 = v57;
  v57(v163, v167, v168);
  id v155 = v158;
  uint64_t v58 = (char *)v160(a9, a10, a11, a12);
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  uint64_t v59 = *(void **)&v58[direct field offset for Canvas._editingView];
  v153 = &v58[direct field offset for Canvas._editingView];
  if (v59)
  {
    uint64_t v60 = *(_UNKNOWN ***)&v58[direct field offset for Canvas._editingView + 8];
    id v61 = v59;
  }
  else
  {
    id v61 = *(id *)&v58[direct field offset for Canvas.paperView];
    uint64_t v60 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v63 = (void (*)(uint64_t, _UNKNOWN **))v60[3];
  id v64 = a6;
  uint64_t v65 = v58;
  id v66 = v59;
  v63(ObjectType, v60);

  id v154 = v64;
  id v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82A00]), sel_init);
  uint64_t v68 = *(void **)&v65[direct field offset for CanvasView.trackingPanGestureRecognizer];
  v160 = (uint64_t (*)(double, double, double, double))direct field offset for CanvasView.trackingPanGestureRecognizer;
  *(void *)&v65[direct field offset for CanvasView.trackingPanGestureRecognizer] = v67;

  id v69 = objc_allocWithZone((Class)type metadata accessor for CanvasElementController());
  v161 = v65;
  unint64_t v70 = v65;
  id v71 = objc_msgSend(v69, sel_init);
  uint64_t v72 = direct field offset for Canvas._canvasElementController;
  uint64_t v73 = *(void **)&v70[direct field offset for Canvas._canvasElementController];
  *(void *)&v70[direct field offset for Canvas._canvasElementController] = v71;

  uint64_t v74 = *(void **)&v70[v72];
  uint64_t v75 = (void *)MEMORY[0x263F8EED0];
  if (v74)
  {
    uint64_t v76 = v74;
    uint64_t v77 = v70;
    id v78 = v166;
    goto LABEL_12;
  }
  uint64_t v138 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v70) + 0x320))();
  uint64_t v79 = v70;
  id v78 = v166;
  if (v138)
  {
    uint64_t v77 = (void *)v138;
    swift_getObjectType();
    uint64_t v139 = swift_conformsToProtocol2();
    if (v139) {
      uint64_t v140 = v139;
    }
    else {
      uint64_t v140 = 0;
    }
    if (v139) {
      v141 = v77;
    }
    else {
      v141 = 0;
    }
    if (!v141)
    {
      uint64_t v76 = v70;
      uint64_t v79 = (char *)v77;
      goto LABEL_13;
    }
    uint64_t v142 = swift_getObjectType();
    uint64_t v76 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v140 + 48))(v142, v140);

LABEL_12:
    *(void *)&v76[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate + 8] = &protocol witness table for CanvasView<A>;
    swift_unknownObjectWeakAssign();
    uint64_t v79 = v70;
    CanvasElementController.delegate.didset();
LABEL_13:
  }
  if (v45) {
    objc_msgSend(v165, sel_setContentSnapshottingView_, v70);
  }
  uint64_t v80 = *(void **)&v70[direct field offset for CanvasView.canvasTiledView];
  if (!v80)
  {
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v81 = &v70[OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode];
  swift_beginAccess();
  uint64_t v82 = *v81;
  if (v82 >= 2)
  {
    if (v82 != 2) {
      uint64_t v82 = 0;
    }
    uint64_t v83 = 1;
  }
  else
  {
    uint64_t v82 = 0;
    uint64_t v83 = 0;
  }
  id v84 = objc_msgSend(v80, sel_canvasView);
  if (v84)
  {
    uint64_t v85 = v84;
    id v86 = objc_msgSend(v84, sel_drawingGestureRecognizer);

    objc_msgSend(v86, sel_setEnabled_, v83);
  }
  objc_msgSend(v80, sel_setDrawingPolicy_, v82);
  uint64_t v87 = direct field offset for CanvasView.zoomView;
  uint64_t v88 = *(void *)&v70[direct field offset for CanvasView.zoomView];
  if (!v88) {
    goto LABEL_56;
  }
  objc_msgSend(v78, sel_insertSubview_atIndex_, v88, 0);
  objc_msgSend(v78, sel_addSubview_, *(void *)&v70[OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView]);
  id v89 = objc_allocWithZone((Class)type metadata accessor for CanvasElementResizeView());
  uint64_t v90 = v70;
  char v91 = CanvasElementResizeView.init(frame:canvas:)(v90, 0.0, 0.0, a11, a12);
  uint64_t v92 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  unsigned int v93 = *(void **)&v90[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  *(void *)&v90[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView] = v91;

  if (!*(void *)&v90[v92])
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  objc_msgSend(v78, sel_addSubview_);
  v174 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v175 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v172[0] = 1;
  char v94 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v172);
  if (v94)
  {
    id v95 = objc_allocWithZone((Class)type metadata accessor for HandwritingReflowView());
    uint64_t v96 = v90;
    uint64_t v97 = HandwritingReflowView.init(frame:canvas:)((uint64_t)v96, 0.0, 0.0, a11, a12);
    objc_msgSend(v78, sel_addSubview_, v97);
    uint64_t v98 = *(void **)&v96[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
    *(void *)&v96[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView] = v97;
  }
  uint64_t v99 = *(void **)&v70[v87];
  if (!v99) {
    goto LABEL_58;
  }
  uint64_t v159 = a18;
  id v158 = a19;
  uint64_t v100 = direct field offset for Canvas.paperView;
  objc_msgSend(v99, sel_insertSubview_atIndex_, *(void *)&v90[direct field offset for Canvas.paperView], 0);
  uint64_t v101 = *(void **)&v90[v100];
  swift_beginAccess();
  uint64_t v102 = a13(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a14, 255, a15);
  uint64_t v103 = v101;
  char v104 = Capsule.merge<A>(_:)();
  uint64_t v105 = swift_endAccess();
  if ((v104 & 1) != 0
    || (uint64_t v105 = MEMORY[0x210550400]((char *)v103 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) == 0)
  {
    (*(void (**)(uint64_t))((*v75 & *v103) + 0x488))(v105);
  }
  else
  {
    uint64_t v106 = (void *)v105;

    uint64_t v103 = v106;
  }

  uint64_t v152 = v100;
  uint64_t v107 = *(void **)&v90[v100];
  uint64_t v108 = (char *)v107 + *(void *)((*v75 & *v107) + 0x380);
  swift_beginAccess();
  uint64_t v109 = v163;
  uint64_t v110 = v168;
  uint64_t v111 = v156(v163, v108, v168);
  MEMORY[0x270FA5388](v111);
  *(&v152 - 4) = v102;
  uint64_t v112 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a17, 255, a15);
  uint64_t v113 = (uint64_t)v158;
  *(&v152 - 3) = v112;
  *(&v152 - 2) = v113;
  swift_getKeyPath();
  uint64_t v114 = v107;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v115 = *(void (**)(char *, uint64_t))(v164 + 8);
  v115(v109, v110);

  id v116 = v166;
  objc_msgSend(v166, sel_setContentSize_, v173, *(double *)&v174);
  uint64_t v117 = v161;
  uint64_t v118 = v160;
  uint64_t v119 = *(void **)((char *)v160 + (void)v161);
  if (!v119) {
    goto LABEL_59;
  }
  objc_msgSend(v119, sel_setDelegate_, v90);
  uint64_t v120 = *(void **)((char *)v118 + (void)v117);
  if (!v120)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  objc_msgSend(v120, sel_setCancelsTouchesInView_, 0);
  uint64_t v121 = *(void **)((char *)v118 + (void)v117);
  if (!v121)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  objc_msgSend(v121, sel_setDelaysTouchesEnded_, 0);
  if (!*(void *)((char *)v118 + (void)v117))
  {
LABEL_62:
    __break(1u);
    return;
  }
  objc_msgSend(v116, sel_addGestureRecognizer_);
  if ((v162 & 1) == 0)
  {
    uint64_t v122 = one-time initialization token for backboardColor;
    uint64_t v123 = v90;
    if (v122 != -1) {
      swift_once();
    }
    objc_msgSend(v123, sel_setBackgroundColor_, static UIConstants.backboardColor);
  }
  uint64_t v124 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(a20);
  id v125 = objc_allocWithZone(v124);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v171.receiver = v125;
  v171.super_class = v124;
  id v126 = objc_msgSendSuper2(&v171, sel_init);
  uint64_t v127 = direct field offset for CanvasView.tiledViewDelegate;
  char v128 = *(void **)&v90[direct field offset for CanvasView.tiledViewDelegate];
  *(void *)&v90[direct field offset for CanvasView.tiledViewDelegate] = v126;

  id v129 = v165;
  objc_msgSend(v165, sel_setDelegate_, *(void *)&v90[v127]);
  uint64_t v130 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(a21);
  id v131 = objc_allocWithZone(v130);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v170.receiver = v131;
  v170.super_class = v130;
  id v132 = objc_msgSendSuper2(&v170, sel_init);
  uint64_t v133 = direct field offset for CanvasView.rulerHostingDelegate;
  unint64_t v134 = *(void **)&v90[direct field offset for CanvasView.rulerHostingDelegate];
  *(void *)&v90[direct field offset for CanvasView.rulerHostingDelegate] = v132;

  objc_msgSend(v129, sel_setRulerHostingDelegate_, *(void *)&v90[v133]);
  objc_msgSend(v116, sel_setDelegate_, v90);
  id v135 = *(id *)v153;
  if (*(void *)v153)
  {
    v136 = (_UNKNOWN **)*((void *)v153 + 1);
    id v137 = *(id *)v153;
  }
  else
  {
    id v137 = *(id *)&v90[v152];
    v136 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  v143 = (objc_class *)type metadata accessor for CanvasViewSelectionInteractionDelegate();
  v144 = (char *)objc_allocWithZone(v143);
  *(void *)&v144[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = v136;
  swift_unknownObjectWeakAssign();
  v169.receiver = v144;
  v169.super_class = v143;
  id v145 = v135;
  id v146 = objc_msgSendSuper2(&v169, sel_init);

  uint64_t v147 = direct field offset for CanvasView.selectionInteractionDelegate;
  v148 = *(void **)&v90[direct field offset for CanvasView.selectionInteractionDelegate];
  *(void *)&v90[direct field offset for CanvasView.selectionInteractionDelegate] = v146;

  id v149 = v165;
  id v150 = objc_msgSend(v165, sel_selectionInteraction);
  objc_msgSend(v150, sel_setDelegate_, *(void *)&v90[v147]);

  id v151 = v166;
  objc_msgSend(v90, sel_addSubview_, v166);
  a22(v151);

  v115(v167, v168);
}

void specialized CanvasView.scrollViewDidScroll(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2[direct field offset for CanvasView.adjustingInsets]) {
    return;
  }
  id v47 = a1;
  uint64_t v46 = direct field offset for Canvas.paperView;
  id v8 = *(void **)&v2[direct field offset for Canvas.paperView];
  uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  id v10 = (char *)v8 + *(void *)((*MEMORY[0x263F8EED0] & *v8) + 0x380);
  swift_beginAccess();
  uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
  MEMORY[0x270FA5388](v11);
  *(&v45 - 4) = type metadata accessor for Paper();
  *(&v45 - 3) = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (void (*)(uint64_t))type metadata accessor for Paper);
  *(&v45 - 2) = (uint64_t)&protocol witness table for Paper;
  swift_getKeyPath();
  uint64_t v12 = v8;
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

  uint64_t v13 = direct field offset for CanvasView.zoomView;
  id v14 = *(void **)&v2[direct field offset for CanvasView.zoomView];
  if (!v14) {
    goto LABEL_28;
  }
  double v15 = v48;
  double v16 = v49;
  id v17 = objc_msgSend(v14, sel_bounds);
  double v20 = vabdd_f64(v16, v19);
  BOOL v21 = vabdd_f64(v15, v18) < 1.5 && v20 < 1.5;
  id v22 = v47;
  if (!v21)
  {
    objc_msgSend(v47, sel_zoomScale, v20);
    double v24 = v23;
    uint64_t v25 = direct field offset for CanvasView.isZoomScaleAltered;
    char v26 = v2[direct field offset for CanvasView.isZoomScaleAltered];
    objc_msgSend(v22, sel_setZoomScale_, 1.0);
    uint64_t v27 = *(void **)&v2[v13];
    if (!v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    id v28 = v27;
    objc_msgSend(v28, sel_frame);
    objc_msgSend(v28, sel_setFrame_);

    uint64_t v29 = direct field offset for CanvasView.firstLayout;
    if (v2[direct field offset for CanvasView.firstLayout] == 1)
    {
      objc_msgSend(v22, sel_frame);
      double v24 = fmin(CGRectGetWidth(v50) / v15, 1.0);
      v2[v29] = 0;
    }
    id v17 = objc_msgSend(v22, sel_setZoomScale_, v24);
    v2[v25] = v26;
  }
  specialized CanvasView.updateContentInsets()(v17);
  id v30 = *(id *)&v2[v46];
  unint64_t v31 = specialized ContainerCanvasElementView.subelementViews.getter(v30);
  unint64_t v32 = v31;
  uint64_t v45 = v13;
  if (v31 >> 62)
  {
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    if (!v33) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v33 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v33) {
      goto LABEL_20;
    }
  }
  if (v33 < 1)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  for (uint64_t i = 0; i != v33; ++i)
  {
    if ((v32 & 0xC000000000000001) != 0) {
      uint64_t v35 = (void *)MEMORY[0x21054E050](i, v32);
    }
    else {
      uint64_t v35 = *(id *)(v32 + 8 * i + 32);
    }
    long long v36 = v35;
    (*(void (**)(unsigned char *))((*v9 & *v35) + 0x278))(v2);
  }
LABEL_20:

  swift_bridgeObjectRelease();
  uint64_t v37 = AnyCanvas.overlays.getter();
  uint64_t v38 = *(void *)(v37 + 16);
  if (v38)
  {
    id v39 = (void **)(v37 + 32);
    do
    {
      id v40 = *v39;
      v39 += 2;
      objc_msgSend(v40, sel_setNeedsLayout, v45);
      --v38;
    }
    while (v38);
  }
  swift_bridgeObjectRelease();
  uint64_t v41 = &v2[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate];
  swift_beginAccess();
  if (MEMORY[0x210550400](v41))
  {
    id v42 = *(void **)&v2[v45];
    if (v42)
    {
      uint64_t v43 = *((void *)v41 + 1);
      uint64_t ObjectType = swift_getObjectType();
      objc_msgSend(v42, sel_frame);
      objc_msgSend(v2, sel_convertRect_fromCoordinateSpace_, v22);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v43 + 64))(v2, ObjectType, v43);
      swift_unknownObjectRelease();
      return;
    }
LABEL_30:
    __break(1u);
  }
}

{
  unsigned char *v1;
  unsigned char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  double v15;
  double v16;
  id v17;
  double v18;
  double v19;
  double v20;
  BOOL v21;
  id v22;
  double v23;
  double v24;
  uint64_t v25;
  char v26;
  void *v27;
  id v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  void *v40;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t ObjectType;
  uint64_t v45;
  uint64_t v46;
  id v47;
  double v48;
  double v49;
  CGRect v50;

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2[direct field offset for CanvasView.adjustingInsets]) {
    return;
  }
  id v47 = a1;
  uint64_t v46 = direct field offset for Canvas.paperView;
  id v8 = *(void **)&v2[direct field offset for Canvas.paperView];
  uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  id v10 = (char *)v8 + *(void *)((*MEMORY[0x263F8EED0] & *v8) + 0x380);
  swift_beginAccess();
  uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
  MEMORY[0x270FA5388](v11);
  *(&v45 - 4) = type metadata accessor for Image();
  *(&v45 - 3) = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Image and conformance Image, 255, (void (*)(uint64_t))type metadata accessor for Image);
  *(&v45 - 2) = (uint64_t)&protocol witness table for Image;
  swift_getKeyPath();
  uint64_t v12 = v8;
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

  uint64_t v13 = direct field offset for CanvasView.zoomView;
  id v14 = *(void **)&v2[direct field offset for CanvasView.zoomView];
  if (!v14) {
    goto LABEL_28;
  }
  double v15 = v48;
  double v16 = v49;
  id v17 = objc_msgSend(v14, sel_bounds);
  double v20 = vabdd_f64(v16, v19);
  BOOL v21 = vabdd_f64(v15, v18) < 1.5 && v20 < 1.5;
  id v22 = v47;
  if (!v21)
  {
    objc_msgSend(v47, sel_zoomScale, v20);
    double v24 = v23;
    uint64_t v25 = direct field offset for CanvasView.isZoomScaleAltered;
    char v26 = v2[direct field offset for CanvasView.isZoomScaleAltered];
    objc_msgSend(v22, sel_setZoomScale_, 1.0);
    uint64_t v27 = *(void **)&v2[v13];
    if (!v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    id v28 = v27;
    objc_msgSend(v28, sel_frame);
    objc_msgSend(v28, sel_setFrame_);

    uint64_t v29 = direct field offset for CanvasView.firstLayout;
    if (v2[direct field offset for CanvasView.firstLayout] == 1)
    {
      objc_msgSend(v22, sel_frame);
      double v24 = fmin(CGRectGetWidth(v50) / v15, 1.0);
      v2[v29] = 0;
    }
    id v17 = objc_msgSend(v22, sel_setZoomScale_, v24);
    v2[v25] = v26;
  }
  specialized CanvasView.updateContentInsets()(v17);
  id v30 = *(id *)&v2[v46];
  unint64_t v31 = specialized ContainerCanvasElementView.subelementViews.getter(v30);
  unint64_t v32 = v31;
  uint64_t v45 = v13;
  if (v31 >> 62)
  {
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    if (!v33) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v33 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v33) {
      goto LABEL_20;
    }
  }
  if (v33 < 1)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  for (uint64_t i = 0; i != v33; ++i)
  {
    if ((v32 & 0xC000000000000001) != 0) {
      uint64_t v35 = (void *)MEMORY[0x21054E050](i, v32);
    }
    else {
      uint64_t v35 = *(id *)(v32 + 8 * i + 32);
    }
    long long v36 = v35;
    (*(void (**)(unsigned char *))((*v9 & *v35) + 0x278))(v2);
  }
LABEL_20:

  swift_bridgeObjectRelease();
  uint64_t v37 = AnyCanvas.overlays.getter();
  uint64_t v38 = *(void *)(v37 + 16);
  if (v38)
  {
    id v39 = (void **)(v37 + 32);
    do
    {
      id v40 = *v39;
      v39 += 2;
      objc_msgSend(v40, sel_setNeedsLayout, v45);
      --v38;
    }
    while (v38);
  }
  swift_bridgeObjectRelease();
  uint64_t v41 = &v2[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate];
  swift_beginAccess();
  if (MEMORY[0x210550400](v41))
  {
    id v42 = *(void **)&v2[v45];
    if (v42)
    {
      uint64_t v43 = *((void *)v41 + 1);
      uint64_t ObjectType = swift_getObjectType();
      objc_msgSend(v42, sel_frame);
      objc_msgSend(v2, sel_convertRect_fromCoordinateSpace_, v22);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v43 + 64))(v2, ObjectType, v43);
      swift_unknownObjectRelease();
      return;
    }
LABEL_30:
    __break(1u);
  }
}

uint64_t specialized Canvas.tool.setter(void *a1)
{
  return specialized Canvas.tool.setter(a1, (void (*)(void *__return_ptr, double))specialized Canvas.tool.getter);
}

uint64_t specialized Canvas.tool.setter(void *a1, void (*a2)(void *__return_ptr, double))
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for PKInk();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v30[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v30[-1] - v12;
  a2(v30, v11);
  uint64_t v14 = v31;
  __swift_project_boxed_opaque_existential_1(v30, v31);
  PKTool.ink.getter(v14, (uint64_t)v13);
  Class isa = PKInk._bridgeToObjectiveC()().super.isa;
  double v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v13, v6);
  uint64_t v17 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v17);
  PKTool.ink.getter(v17, (uint64_t)v9);
  Class v18 = PKInk._bridgeToObjectiveC()().super.isa;
  v16(v9, v6);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKInk);
  LOBYTE(v17) = static NSObject.== infix(_:_:)();

  uint64_t v19 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  if ((v17 & 1) == 0)
  {
    double v20 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x320);
    uint64_t v21 = ((uint64_t (*)(uint64_t))v20)(v19);
    if (v21)
    {
      id v22 = (void *)v21;
      uint64_t v29 = v4;
      uint64_t v23 = a1[3];
      __swift_project_boxed_opaque_existential_1(a1, v23);
      PKTool.ink.getter(v23, (uint64_t)v13);
      Class v24 = PKInk._bridgeToObjectiveC()().super.isa;
      v16(v13, v6);
      objc_msgSend(v22, sel_setInk_, v24);
    }
    uint64_t v25 = (void *)v20();
    if (v25)
    {
      char v26 = v25;
      unsigned int v27 = objc_msgSend(v25, sel_allowsFingerDrawing);

      if (v27) {
        AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
      }
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t one-time initialization function for extensionLogger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, extensionLogger);
  __swift_project_value_buffer(v0, (uint64_t)extensionLogger);
  return Logger.init(subsystem:category:)();
}

uint64_t ExtensionViewController.ProxyWrapper.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

id ExtensionViewController.__deallocating_deinit()
{
  if (v0[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueueSuspended] == 1) {
    dispatch_resume(*(dispatch_object_t *)&v0[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue]);
  }
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExtensionViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ExtensionViewController()
{
  return self;
}

uint64_t ExtensionViewController.multipeerConnection.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController____lazy_storage___multipeerConnection;
  if (*(void *)(v0 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController____lazy_storage___multipeerConnection))
  {
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController____lazy_storage___multipeerConnection);
  }
  else
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
    uint64_t v5 = ExtensionViewController.newMultipeerConnection(model:)((uint64_t)v3);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
    *(void *)(v0 + v4) = v5;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v5;
}

uint64_t ExtensionViewController.newMultipeerConnection(model:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for CRMulticastSyncManagerCatchupBehavior();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRMulticastSyncManager<Paper>);
  type metadata accessor for CRContext();
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  MEMORY[0x21054C990](0, &v22);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v22, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  (*(void (**)(unsigned char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F32FA8], v7);
  uint64_t v14 = CRMulticastSyncManager.__allocating_init(_:model:appFormat:identifier:catchup:)();
  *((void *)&v23 + 1) = type metadata accessor for ExtensionViewController();
  uint64_t v24 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController and conformance ExtensionViewController, v15, (void (*)(uint64_t))type metadata accessor for ExtensionViewController);
  *(void *)&long long v22 = v2;
  id v16 = v2;
  CRMulticastSyncManager.setLink(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v6, 1, 1, v17);
  uint64_t v18 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v19 = (void *)swift_allocObject();
  _OWORD v19[2] = 0;
  v19[3] = 0;
  v19[4] = v14;
  v19[5] = v18;
  swift_retain();
  _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.newMultipeerConnection(model:), (uint64_t)v19);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for TaskPriority?);
  return v14;
}

uint64_t closure #1 in ExtensionViewController.newMultipeerConnection(model:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  void v5[6] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  v5[10] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Capsule<Paper>>);
  v5[11] = v7;
  v5[12] = *(void *)(v7 - 8);
  v5[13] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Capsule<Paper>>.Iterator);
  v5[14] = v8;
  v5[15] = *(void *)(v8 - 8);
  v5[16] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.newMultipeerConnection(model:), 0, 0);
}

uint64_t closure #1 in ExtensionViewController.newMultipeerConnection(model:)()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  CRMulticastSyncManager.updates.getter();
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[17] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in ExtensionViewController.newMultipeerConnection(model:);
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[10];
  return MEMORY[0x270FA1F68](v6, 0, 0, v5);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.newMultipeerConnection(model:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v0[6] + 16;
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[9], v1, v2);
    uint64_t v7 = MEMORY[0x210550400](v6);
    v0[18] = v7;
    if (v7)
    {
      type metadata accessor for MainActor();
      v0[19] = static MainActor.shared.getter();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.newMultipeerConnection(model:), v9, v8);
    }
    else
    {
      (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
      uint64_t v10 = (void *)swift_task_alloc();
      v0[17] = v10;
      unsigned char *v10 = v0;
      v10[1] = closure #1 in ExtensionViewController.newMultipeerConnection(model:);
      uint64_t v11 = v0[14];
      uint64_t v12 = v0[10];
      return MEMORY[0x270FA1F68](v12, 0, 0, v11);
    }
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 72);
  swift_release();
  ExtensionViewController.updateCanvasView(paper:)(v2);

  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.newMultipeerConnection(model:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[17] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in ExtensionViewController.newMultipeerConnection(model:);
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[10];
  return MEMORY[0x270FA1F68](v3, 0, 0, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExtensionViewController.DecryptionError()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ExtensionViewController.DecryptionError()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExtensionViewController.DecryptionError()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance ExtensionViewController.DecryptionError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance ExtensionViewController.DecryptionError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance ExtensionViewController.DecryptionError()
{
  return MEMORY[0x270F9FB30]();
}

Swift::Void __swiftcall ExtensionViewController.accept(_:)(NSXPCConnection a1)
{
  uint64_t v2 = v1;
  [(objc_class *)a1.super.isa setExportedObject:v1];
  uint64_t v4 = self;
  id v5 = objc_msgSend(v4, sel_interfaceWithProtocol_, &unk_26C1AFBB8);
  [(objc_class *)a1.super.isa setExportedInterface:v5];

  id v6 = objc_msgSend(v4, sel_interfaceWithProtocol_, &unk_26C1F15C0);
  [(objc_class *)a1.super.isa setRemoteObjectInterface:v6];

  [(objc_class *)a1.super.isa resume];
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ScrollWheelEventSwizzler.shared;
  id v8 = [(objc_class *)a1.super.isa auditToken];
  uint64_t v9 = *(void *)(v7 + 16);
  MEMORY[0x270FA5388](v8);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 20));
  partial apply for closure #1 in ScrollWheelEventSwizzler.enableScrollEventForwardingIfNecessary(_:)((char *)(v9 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 20));
  swift_release();
  aBlock[4] = closure #1 in ExtensionViewController.accept(_:);
  double aBlock[5] = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = &block_descriptor_3;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = [(objc_class *)a1.super.isa synchronousRemoteObjectProxyWithErrorHandler:v10];
  _Block_release(v10);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HostXPCProtocol);
  if (swift_dynamicCast()) {
    uint64_t v12 = v13;
  }
  else {
    uint64_t v12 = 0;
  }
  *(void *)(*(void *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper) + 16) = v12;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  dispatch_resume(*(dispatch_object_t *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue));
  swift_unknownObjectRelease();
  *(unsigned char *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueueSuspended) = 0;
}

void closure #1 in ExtensionViewController.accept(_:)(void *a1)
{
  if (one-time initialization token for extensionLogger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)extensionLogger);
  id v3 = a1;
  id v4 = a1;
  oslog = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)id v6 = 138412290;
    id v8 = a1;
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v10;

    _os_log_impl(&dword_20C2D7000, oslog, v5, "Failed to get host XPC proxy %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x210550270](v7, -1, -1);
    MEMORY[0x210550270](v6, -1, -1);
  }
  else
  {
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ()(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t ExtensionViewController.openLink(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  os_log_type_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v6 - 8);
  uint64_t v20 = v6;
  MEMORY[0x270FA5388](v6);
  id v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  double v12 = MEMORY[0x270FA5388](v9);
  v18[1] = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue);
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v12);
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v14, (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = partial apply for closure #1 in ExtensionViewController.openLink(_:);
  double aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_182;
  id v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x21054DA10](0, v8, v5, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
  return swift_release();
}

uint64_t closure #1 in ExtensionViewController.openLink(_:)(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 16);
  if (v1)
  {
    swift_unknownObjectRetain();
    URL._bridgeToObjectiveC()(v2);
    uint64_t v4 = v3;
    objc_msgSend(v1, sel_openLink_, v3);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

Swift::Void __swiftcall ExtensionViewController.reportPaperBounds(_:)(__C::CGRect a1)
{
  CGFloat height = a1.size.height;
  CGFloat width = a1.size.width;
  CGFloat y = a1.origin.y;
  CGFloat x = a1.origin.x;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue);
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper);
  uint64_t v15 = (CGFloat *)swift_allocObject();
  *((void *)v15 + 2) = v14;
  v15[3] = x;
  v15[4] = y;
  v15[5] = width;
  v15[6] = height;
  aBlock[4] = partial apply for closure #1 in ExtensionViewController.reportPaperBounds(_:);
  double aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_176;
  id v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x21054DA10](0, v13, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release();
}

uint64_t closure #1 in ExtensionViewController.reportPaperBounds(_:)(uint64_t result, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  os_log_type_t v5 = *(void **)(result + 16);
  if (v5)
  {
    swift_unknownObjectRetain();
    v13.origin.CGFloat x = a2;
    v13.origin.CGFloat y = a3;
    v13.size.CGFloat width = a4;
    v13.size.CGFloat height = a5;
    uint64_t v10 = NSStringFromRect(v13);
    if (!v10)
    {
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = (NSString *)MEMORY[0x21054D080](v11);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v5, sel_reportingPaperBounds_, v10);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ExtensionViewController.send(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue);
  uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v13;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = partial apply for closure #1 in ExtensionViewController.send(_:);
  double aBlock[5] = v14;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_3;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  outlined copy of Data._Representation(a1, a2);
  static DispatchQoS.unspecified.getter();
  v17[1] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x21054DA10](0, v12, v8, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t closure #1 in ExtensionViewController.send(_:)(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 16);
  if (v1)
  {
    swift_unknownObjectRetain();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v1, sel_receiveMulticastData_, isa);

    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ExtensionViewController.addCanvasView(_:)(UIView *a1)
{
  uint64_t v2 = v1;
  [(UIView *)a1 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v4 = objc_msgSend(v1, sel_view);
  if (!v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  objc_msgSend(v4, sel_addSubview_, a1);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_20C8344C0;
  id v7 = objc_msgSend(v2, sel_view);
  if (!v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel_centerXAnchor);

  uint64_t v10 = [(UIView *)a1 centerXAnchor];
  id v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

  *(void *)(v6 + 32) = v11;
  id v12 = objc_msgSend(v2, sel_view);
  if (!v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v13 = v12;
  id v14 = objc_msgSend(v12, sel_centerYAnchor);

  uint64_t v15 = [(UIView *)a1 centerYAnchor];
  id v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v15);

  *(void *)(v6 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v16;
  id v17 = objc_msgSend(v2, sel_view);
  if (!v17)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v18 = v17;
  id v19 = objc_msgSend(v17, sel_widthAnchor);

  uint64_t v20 = [(UIView *)a1 widthAnchor];
  id v21 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v20);

  *(void *)(v6 + 48) = v21;
  id v22 = objc_msgSend(v2, sel_view);
  if (!v22)
  {
LABEL_13:
    __break(1u);
    return;
  }
  long long v23 = v22;
  uint64_t v24 = self;
  id v25 = objc_msgSend(v23, sel_heightAnchor);

  char v26 = [(UIView *)a1 heightAnchor];
  id v27 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v26);

  *(void *)(v6 + 56) = v27;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v24, sel_activateConstraints_, isa);
}

void ExtensionViewController.loadPaperDrawing(_:paperURL:coherenceContextURL:encrypted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = v5;
  int v68 = a5;
  uint64_t v69 = a1;
  uint64_t v10 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v10 - 8);
  id v67 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v65 = *(void *)(v12 - 8);
  uint64_t v66 = v12;
  MEMORY[0x270FA5388](v12);
  id v64 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v14 - 8);
  id v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x270FA5388](v17);
  id v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView;
  long long v23 = *(void **)&v6[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView];
  if (v23) {
    objc_msgSend(v23, sel_removeFromSuperview, v19);
  }
  uint64_t v24 = *(void **)&v6[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView];
  if (v24) {
    objc_msgSend(v24, sel_removeFromSuperview, v19);
  }
  id v25 = objc_msgSend(v6, sel_view, v19);
  if (!v25)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  char v26 = v25;
  objc_msgSend(v25, sel_bounds);
  double v28 = v27;
  double v30 = v29;
  double v32 = v31;
  double v34 = v33;

  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, a3, v17);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a4, (uint64_t)v16, &demangling cache variable for type metadata for URL?);
  if (v68)
  {
    *(void *)&long long v72 = type metadata accessor for ExtensionViewController();
    *((void *)&v72 + 1) = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController and conformance ExtensionViewController, v35, (void (*)(uint64_t))type metadata accessor for ExtensionViewController);
    long long v36 = v6;
    uint64_t v37 = v6;
  }
  else
  {
    uint64_t v37 = 0;
    long long v72 = 0u;
    long long v71 = 0u;
  }
  double v70 = *(double *)&v37;
  id v38 = objc_allocWithZone((Class)type metadata accessor for PaperTextAttachmentCanvasView(0));
  swift_bridgeObjectRetain();
  id v39 = (char *)PaperTextAttachmentCanvasView.init(frame:paperIdentifier:paperURL:coherenceContextURL:encryptionDelegate:)(v69, a2, (uint64_t)v21, (uint64_t)v16, (uint64_t)&v70, v28, v30, v32, v34);
  *(void *)&v39[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasViewDelegate + 8] = &protocol witness table for ExtensionViewController;
  swift_unknownObjectWeakAssign();
  uint64_t v41 = *(void *)&v6[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger];
  if (v41) {
    uint64_t v42 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController.LiveStreamMessenger and conformance ExtensionViewController.LiveStreamMessenger, v40, (void (*)(uint64_t))type metadata accessor for ExtensionViewController.LiveStreamMessenger);
  }
  else {
    uint64_t v42 = 0;
  }
  uint64_t v43 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView;
  uint64_t v44 = *(char **)&v39[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView];
  if (!v44) {
    goto LABEL_19;
  }
  uint64_t v45 = &v44[direct field offset for Canvas.liveStreamMessenger];
  swift_beginAccess();
  *(void *)uint64_t v45 = v41;
  *((void *)v45 + 1) = v42;
  swift_retain_n();
  uint64_t v46 = v44;
  swift_unknownObjectRelease();
  specialized Canvas.liveStreamMessenger.didset();
  swift_release();

  id v47 = objc_allocWithZone(MEMORY[0x263F825C8]);
  double v48 = v39;
  id v49 = objc_msgSend(v47, sel_initWithRed_green_blue_alpha_, 0.894117647, 0.68627451, 0.0392156863, 1.0);
  [(UIView *)v48 setTintColor:v49];

  ExtensionViewController.addCanvasView(_:)(v48);
  CGRect v50 = *(void **)&v6[v22];
  *(void *)&v6[v22] = v48;
  uint64_t v51 = v48;

  id v52 = objc_msgSend(self, sel_defaultCenter);
  id v53 = (void *)MEMORY[0x21054D080](0xD00000000000002BLL, 0x800000020C8508A0);
  objc_msgSend(v52, sel_addObserver_selector_name_object_, v6, sel_handleLink_, v53, 0);

  ExtensionViewController.updateLinedPaper()();
  uint64_t v54 = *(char **)&v39[v43];
  if (!v54)
  {
LABEL_20:
    __break(1u);
    return;
  }
  uint64_t v55 = *(void *)&v54[direct field offset for Canvas.paperView]
      + *(void *)((*MEMORY[0x263F8EED0] & **(void **)&v54[direct field offset for Canvas.paperView]) + 0x380);
  swift_beginAccess();
  uint64_t v57 = v64;
  uint64_t v56 = v65;
  uint64_t v58 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v55, v66);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v59 = v54;
  uint64_t v60 = (uint64_t)v67;
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  CGFloat v61 = v70;
  long long v63 = v71;
  CGFloat v62 = *(double *)&v72;
  outlined destroy of Paper(v60);

  v73.origin.CGFloat x = v61;
  *(_OWORD *)&v73.origin.CGFloat y = v63;
  v73.size.CGFloat height = v62;
  if (!CGRectIsEmpty(v73))
  {
    v74.origin.CGFloat x = v61;
    *(_OWORD *)&v74.origin.CGFloat y = v63;
    v74.size.CGFloat height = v62;
    if (!CGRectIsInfinite(v74))
    {
      v75.origin.CGFloat x = v61;
      *(_OWORD *)&v75.origin.CGFloat y = v63;
      v75.size.CGFloat height = v62;
      ExtensionViewController.reportPaperBounds(_:)(v75);
    }
  }
}

void ExtensionViewController.loadPaperDocument(from:coherenceContextURL:encrypted:layout:)(uint64_t a1, uint64_t a2, char a3, char *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = &v37[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = &v37[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  char v18 = *a4;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v17, a1, v13, v15);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a2, (uint64_t)v12, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a3)
  {
    *(void *)&long long v40 = type metadata accessor for ExtensionViewController();
    *((void *)&v40 + 1) = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController and conformance ExtensionViewController, v19, (void (*)(uint64_t))type metadata accessor for ExtensionViewController);
    uint64_t v20 = v5;
    id v21 = v5;
  }
  else
  {
    id v21 = 0;
    long long v39 = 0u;
    long long v40 = 0u;
  }
  id v38 = v21;
  v37[0] = v18;
  id v22 = objc_allocWithZone((Class)type metadata accessor for PaperKitExtensionDocumentViewController());
  long long v23 = (char *)PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)((uint64_t)v17, (uint64_t)v12, (uint64_t)&v38, v37);
  *(void *)&v23[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate + 8] = &protocol witness table for ExtensionViewController;
  swift_unknownObjectWeakAssign();
  if (*(void *)&v5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger]) {
    uint64_t v25 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController.LiveStreamMessenger and conformance ExtensionViewController.LiveStreamMessenger, v24, (void (*)(uint64_t))type metadata accessor for ExtensionViewController.LiveStreamMessenger);
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = &v23[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger];
  swift_beginAccess();
  *((void *)v26 + 1) = v25;
  swift_unknownObjectWeakAssign();
  swift_retain();
  PaperKitExtensionDocumentViewController.liveStreamMessenger.didset();
  swift_release();
  long long v36 = *(_OWORD *)&v5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_extensionHostSafeAreaInsets];
  uint64_t v27 = *(void *)&v5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_extensionHostSafeAreaInsets + 16];
  uint64_t v28 = *(void *)&v5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_extensionHostSafeAreaInsets + 24];
  double v29 = &v23[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets];
  swift_beginAccess();
  *(_OWORD *)double v29 = v36;
  *((void *)v29 + 2) = v27;
  *((void *)v29 + 3) = v28;
  id v30 = objc_msgSend(v23, sel_view);
  if (!v30) {
    goto LABEL_12;
  }
  double v31 = v30;
  objc_msgSend(v30, sel_setNeedsLayout);

  objc_msgSend(v5, sel_addChildViewController_, v23);
  double v32 = (UIView *)objc_msgSend(v23, sel_view);
  if (v32)
  {
    double v33 = v32;
    ExtensionViewController.addCanvasView(_:)(v32);

    double v34 = *(void **)&v5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController];
    *(void *)&v5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController] = v23;
    uint64_t v35 = v23;

    objc_msgSend(v35, sel_didMoveToParentViewController_, v5);
    return;
  }
LABEL_13:
  __break(1u);
}

void ExtensionViewController.updateCanvasView(paper:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v87 = a1;
  uint64_t v3 = type metadata accessor for CRKeyPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  id v9 = (char *)&v81 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v86 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRContext();
  uint64_t v90 = 0;
  memset(v89, 0, sizeof(v89));
  uint64_t v13 = (void *)MEMORY[0x21054C990](0, v89);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  uint64_t v14 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView;
  double v15 = *(char **)&v2[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView];
  if (v15)
  {
    uint64_t v83 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView;
    id v84 = v13;
    uint64_t v85 = v2;
    uint64_t v81 = direct field offset for Canvas.paperView;
    uint64_t v16 = *(void *)&v15[direct field offset for Canvas.paperView]
        + *(void *)((*MEMORY[0x263F8EED0] & **(void **)&v15[direct field offset for Canvas.paperView]) + 0x380);
    swift_beginAccess();
    uint64_t v17 = v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v12, v16, v10);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (void (*)(uint64_t))type metadata accessor for Paper);
    uint64_t v82 = v15;
    Capsule<>.rootID.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v10);
    Capsule<>.rootID.getter();
    LOBYTE(v16) = static CRKeyPath.== infix(_:_:)();
    char v18 = *(void (**)(char *, uint64_t))(v4 + 8);
    v18(v6, v3);
    v18(v9, v3);
    if (v16)
    {
      uint64_t v19 = *(void **)&v15[v81];
      swift_beginAccess();
      type metadata accessor for Paper();
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (void (*)(uint64_t))type metadata accessor for Paper);
      id v20 = v19;
      Capsule.merge<A>(_:)();
      swift_endAccess();

      LOBYTE(v89[0]) = 2;
      id v21 = v82;
      AnyCanvas.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)v89);

      uint64_t v2 = v85;
      uint64_t v14 = v83;
    }
    else
    {
      id v22 = v82;
      objc_msgSend(v82, sel_removeFromSuperview);
      uint64_t v2 = v85;
      uint64_t v14 = v83;
      long long v23 = *(void **)&v85[v83];
      *(void *)&v85[v83] = 0;
    }
    uint64_t v13 = v84;
    if (*(void *)&v2[v14]) {
      goto LABEL_18;
    }
  }
  uint64_t v24 = v14;
  uint64_t v25 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView];
  char v26 = (unsigned __int8 *)v2;
  if (v25) {
    objc_msgSend(v25, sel_removeFromSuperview);
  }
  id v27 = objc_msgSend(v2, sel_view);
  uint64_t v28 = v87;
  if (!v27)
  {
    __break(1u);
    goto LABEL_20;
  }
  double v29 = v27;
  objc_msgSend(v27, sel_bounds);
  double v31 = v30;
  double v33 = v32;
  double v35 = v34;
  double v37 = v36;

  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v12, v28, v10);
  LODWORD(v29) = v26[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_transparentBackground];
  id v38 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasView<Paper>));
  specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(v13, v12, 3, 1, (int)v29, 0, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>, (uint64_t (*)(double, double, double, double))specialized Canvas.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:), v31, v33, v35, v37, (uint64_t (*)(void))type metadata accessor for Paper, &lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper, (unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t)&protocol conformance descriptor for Paper, &protocol witness table for Paper,
    &demangling cache variable for type metadata for CanvasViewTiledViewDelegate<Paper>,
    &demangling cache variable for type metadata for CanvasViewRulerHostingDelegate<Paper>,
    specialized CanvasView.scrollViewDidScroll(_:));
  long long v40 = v39;
  uint64_t v41 = (uint64_t)&v26[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_tool];
  swift_beginAccess();
  outlined init with copy of FindResult(v41, (uint64_t)v89);
  specialized Canvas.tool.setter(v89, (void (*)(void *__return_ptr, double))specialized Canvas.tool.getter);
  objc_msgSend(v40, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v42 = objc_msgSend(v26, sel_view);
  if (!v42)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v43 = v42;
  uint64_t v44 = v13;
  objc_msgSend(v42, sel_addSubview_, v40);

  uint64_t v45 = *(void **)&v26[v24];
  *(void *)&v26[v24] = v40;
  uint64_t v46 = v40;

  LOBYTE(v45) = v26[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_canvasContentMode];
  id v47 = &v46[direct field offset for CanvasView.canvasContentMode];
  swift_beginAccess();
  *id v47 = (char)v45;
  objc_msgSend(v46, sel_setNeedsLayout);
  uint64_t v49 = *(void *)&v26[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger];
  if (v49) {
    uint64_t v50 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController.LiveStreamMessenger and conformance ExtensionViewController.LiveStreamMessenger, v48, (void (*)(uint64_t))type metadata accessor for ExtensionViewController.LiveStreamMessenger);
  }
  else {
    uint64_t v50 = 0;
  }
  uint64_t v51 = &v46[direct field offset for Canvas.liveStreamMessenger];
  swift_beginAccess();
  *(void *)uint64_t v51 = v49;
  *((void *)v51 + 1) = v50;
  swift_retain_n();
  id v52 = v46;
  swift_unknownObjectRelease();
  specialized Canvas.liveStreamMessenger.didset();
  swift_release();

  id v53 = v52;
  uint64_t v54 = ExtensionViewController.multipeerConnection.getter();
  uint64_t v55 = (uint64_t *)&v53[direct field offset for Canvas.xpcMulticast];
  swift_beginAccess();
  *uint64_t v55 = v54;

  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_20C8344C0;
  id v57 = objc_msgSend(v26, sel_view);
  if (!v57) {
    goto LABEL_21;
  }
  uint64_t v58 = v57;
  id v59 = objc_msgSend(v57, sel_centerXAnchor);

  id v60 = objc_msgSend(v53, sel_centerXAnchor);
  id v61 = objc_msgSend(v59, sel_constraintEqualToAnchor_, v60);

  *(void *)(v56 + 32) = v61;
  id v62 = objc_msgSend(v26, sel_view);
  if (!v62)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  long long v63 = v62;
  id v64 = objc_msgSend(v62, sel_centerYAnchor);

  id v65 = objc_msgSend(v53, sel_centerYAnchor);
  id v66 = objc_msgSend(v64, sel_constraintEqualToAnchor_, v65);

  *(void *)(v56 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v66;
  id v67 = objc_msgSend(v26, sel_view);
  if (!v67)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int v68 = v67;
  id v69 = objc_msgSend(v67, sel_widthAnchor);

  id v70 = objc_msgSend(v53, sel_widthAnchor);
  id v71 = objc_msgSend(v69, sel_constraintEqualToAnchor_, v70);

  *(void *)(v56 + 48) = v71;
  id v72 = objc_msgSend(v26, sel_view);
  if (v72)
  {
    CGRect v73 = v72;
    CGRect v74 = self;
    id v75 = objc_msgSend(v73, sel_heightAnchor);

    id v76 = objc_msgSend(v53, sel_heightAnchor);
    id v77 = objc_msgSend(v75, sel_constraintEqualToAnchor_, v76);

    *(void *)(v56 + 56) = v77;
    uint64_t v88 = v56;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v74, sel_activateConstraints_, isa);

    id v79 = objc_msgSend(self, sel_defaultCenter);
    uint64_t v80 = (void *)MEMORY[0x21054D080](0xD00000000000002BLL, 0x800000020C8508A0);
    objc_msgSend(v79, sel_addObserver_selector_name_object_, v26, sel_handleLink_, v80, 0);

    uint64_t v13 = v44;
LABEL_18:

    return;
  }
LABEL_24:
  __break(1u);
}

Swift::Void __swiftcall ExtensionViewController.updateLinedPaper()()
{
  uint64_t v1 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView);
  if (v1)
  {
    double v2 = *(double *)(v0 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalSpacing);
    double v3 = *(double *)(v0 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperVerticalSpacing);
    if (v2 > 0.0 || v3 > 0.0)
    {
      double v6 = *(double *)(v0 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalInset);
      id v7 = objc_allocWithZone(MEMORY[0x263F14B60]);
      uint64_t v8 = v1;
      id v5 = objc_msgSend(v7, sel_initWithLineSpacing_horizontalInset_, v2, v3, v6);
    }
    else
    {
      uint64_t v4 = v1;
      id v5 = 0;
    }
    id v9 = *(char **)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView];
    if (v9)
    {
      uint64_t v10 = *(void **)&v9[direct field offset for PaperTextAttachmentView.linedPaper];
      *(void *)&v9[direct field offset for PaperTextAttachmentView.linedPaper] = v5;
      uint64_t v11 = v9;
      id v12 = v5;

      objc_msgSend(v11, sel_setNeedsLayout);
    }
    else
    {

      __break(1u);
    }
  }
}

uint64_t ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v30 = a1;
  uint64_t v31 = a6;
  int v32 = a5;
  uint64_t v27 = a4;
  uint64_t v28 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v29 + 64);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v26 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v25 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  id v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v13 - 8);
  double v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v27, (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for URL?);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v18 = v28;
  swift_bridgeObjectRetain();
  uint64_t v19 = static MainActor.shared.getter();
  unint64_t v20 = (*(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v21 = (v11 + *(unsigned __int8 *)(v29 + 80) + v20) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  id v22 = (char *)swift_allocObject();
  uint64_t v23 = MEMORY[0x263F8F500];
  *((void *)v22 + 2) = v19;
  *((void *)v22 + 3) = v23;
  *((void *)v22 + 4) = v31;
  *((void *)v22 + 5) = v17;
  *((void *)v22 + 6) = v30;
  *((void *)v22 + 7) = v18;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v22[v20], v12, v25);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v26, (uint64_t)&v22[v21], &demangling cache variable for type metadata for URL?);
  v22[v21 + v8] = v32;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:), (uint64_t)v22);
  return swift_release();
}

uint64_t closure #1 in ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 144) = v14;
  *(void *)(v8 + 12AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a8;
  *(void *)(v8 + 128) = v13;
  *(void *)(v8 + 104) = a6;
  *(void *)(v8 + 112) = a7;
  *(void *)(v8 + 88) = a4;
  *(void *)(v8 + 96) = a5;
  type metadata accessor for MainActor();
  *(void *)(v8 + 136) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:), v10, v9);
}

uint64_t closure #1 in ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:)()
{
  uint64_t v22 = v0;
  swift_release();
  if (one-time initialization token for extensionLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)extensionLogger);
  double v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_20C2D7000, v2, v3, "loadPaper", v4, 2u);
    MEMORY[0x210550270](v4, -1, -1);
  }
  uint64_t v5 = *(void *)(v0 + 88);

  switch(v5)
  {
    case 2:
      uint64_t v9 = *(void *)(v0 + 96) + 16;
      swift_beginAccess();
      uint64_t v10 = MEMORY[0x210550400](v9);
      if (!v10) {
        goto LABEL_16;
      }
      uint64_t v8 = (void *)v10;
      char v11 = *(unsigned char *)(v0 + 144);
      uint64_t v12 = *(void *)(v0 + 120);
      uint64_t v13 = *(void *)(v0 + 128);
      char v20 = 1;
      char v14 = &v20;
LABEL_14:
      ExtensionViewController.loadPaperDocument(from:coherenceContextURL:encrypted:layout:)(v12, v13, v11, v14);
      goto LABEL_15;
    case 1:
      uint64_t v15 = *(void *)(v0 + 96) + 16;
      swift_beginAccess();
      uint64_t v16 = MEMORY[0x210550400](v15);
      if (!v16) {
        goto LABEL_16;
      }
      uint64_t v8 = (void *)v16;
      char v11 = *(unsigned char *)(v0 + 144);
      uint64_t v12 = *(void *)(v0 + 120);
      uint64_t v13 = *(void *)(v0 + 128);
      char v21 = 0;
      char v14 = &v21;
      goto LABEL_14;
    case 0:
      uint64_t v6 = *(void *)(v0 + 96) + 16;
      swift_beginAccess();
      uint64_t v7 = MEMORY[0x210550400](v6);
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        ExtensionViewController.loadPaperDrawing(_:paperURL:coherenceContextURL:encrypted:)(*(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(unsigned __int8 *)(v0 + 144));
LABEL_15:
      }
LABEL_16:
      uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
      return v17();
  }
  *(void *)(v0 + 16) = *(void *)(v0 + 88);
  uint64_t v19 = MEMORY[0x263F8D6C8];
  return MEMORY[0x270F9FA68](&type metadata for UserInterfaceState, v0 + 16, &type metadata for UserInterfaceState, v19);
}

uint64_t ExtensionViewController.loadPaper(_:paperBookmark:coherenceContextBookmark:encrypted:userInterfaceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, int a7, uint64_t a8)
{
  uint64_t v49 = a5;
  uint64_t v53 = a8;
  uint64_t v54 = a4;
  int v52 = a7;
  unint64_t v55 = (unint64_t)a6;
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v59 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v49 - v14;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x270FA5388](v16);
  id v57 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v56 = (char *)&v49 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v49 - v22;
  double v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v49 - v26;
  char v60 = 0;
  uint64_t v28 = v17;
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v17 + 56);
  v29(v15, 1, 1, v16, v25);
  uint64_t v58 = v27;
  URL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for URL?);
  if (v55 >> 60 == 15)
  {
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v29)(v12, 1, 1, v16);
    uint64_t v30 = v23;
    URL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for URL?);
    uint64_t v31 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v59, 1, 1, v31);
    uint64_t v32 = swift_allocObject();
    swift_unknownObjectWeakInit();
    double v33 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    v33(v56, v58, v16);
    v33(v57, v23, v16);
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v34 = v51;
    swift_bridgeObjectRetain();
    uint64_t v35 = static MainActor.shared.getter();
    uint64_t v36 = *(unsigned __int8 *)(v17 + 80);
    uint64_t v37 = (v36 + 56) & ~v36;
    uint64_t v38 = (v18 + v36 + v37) & ~v36;
    uint64_t v39 = v38 + v18;
    long long v40 = (void *)swift_allocObject();
    unint64_t v55 = (unint64_t)v30;
    uint64_t v41 = (uint64_t)v40;
    id v42 = (char *)v40 + (v39 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v43 = MEMORY[0x263F8F500];
    v40[2] = v35;
    v40[3] = v43;
    uint64_t v44 = v50;
    v40[4] = v32;
    v40[5] = v44;
    v40[6] = v34;
    uint64_t v45 = (char *)v40 + v37;
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    v46(v45, v56, v16);
    v46((char *)(v41 + v38), v57, v16);
    *(unsigned char *)(v41 + v39) = v52 & 1;
    *((void *)v42 + 1) = v53;
    swift_release();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v59, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.loadPaper(_:paperBookmark:coherenceContextBookmark:encrypted:userInterfaceState:), v41);
    swift_release();
    id v47 = *(void (**)(unint64_t, uint64_t))(v28 + 8);
    v47(v55, v16);
    return ((uint64_t (*)(char *, uint64_t))v47)(v58, v16);
  }
  return result;
}

uint64_t closure #1 in ExtensionViewController.loadPaper(_:paperBookmark:coherenceContextBookmark:encrypted:userInterfaceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 104) = v13;
  *(void *)(v8 + 72) = a8;
  *(void *)(v8 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v14;
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a4;
  *(void *)(v8 + 48) = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(void *)(v8 + 88) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v8 + 96) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.loadPaper(_:paperBookmark:coherenceContextBookmark:encrypted:userInterfaceState:), v10, v9);
}

uint64_t closure #1 in ExtensionViewController.loadPaper(_:paperBookmark:coherenceContextBookmark:encrypted:userInterfaceState:)()
{
  swift_release();
  if (one-time initialization token for extensionLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)extensionLogger);
  double v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_20C2D7000, v2, v3, "loadPaper bookmark", v4, 2u);
    MEMORY[0x210550270](v4, -1, -1);
  }
  uint64_t v5 = *(void *)(v0 + 40);

  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5 + 16);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v18 = *(void *)(v0 + 80);
    int v9 = *(unsigned __int8 *)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 64);
    uint64_t v10 = *(void *)(v0 + 72);
    uint64_t v13 = *(void *)(v0 + 48);
    uint64_t v12 = *(void *)(v0 + 56);
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v8, v10, v14);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v8, 0, 1, v14);
    ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:)(v13, v12, v11, v8, v9, v18);

    outlined destroy of StocksKitCurrencyCache.Provider?(v8, &demangling cache variable for type metadata for URL?);
  }
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t ExtensionViewController.loadBookmark(_:readOnly:)(uint64_t a1, uint64_t a2, int a3)
{
  int v25 = a3;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v24 - v15;
  char v26 = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v10 + 56))(v8, 1, 1, v9, v14);
  URL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v5, 1, 1, v17);
  uint64_t v18 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v16, v9);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v19 = static MainActor.shared.getter();
  unint64_t v20 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  uint64_t v22 = MEMORY[0x263F8F500];
  *((void *)v21 + 2) = v19;
  *((void *)v21 + 3) = v22;
  *((void *)v21 + 4) = v18;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v21[v20], v12, v9);
  v21[v20 + v11] = v25 & 1;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.loadBookmark(_:readOnly:), (uint64_t)v21);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v9);
}

uint64_t closure #1 in ExtensionViewController.loadBookmark(_:readOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 64) = a6;
  *(void *)(v6 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a4;
  *(void *)(v6 + 48) = a5;
  type metadata accessor for MainActor();
  *(void *)(v6 + 56) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.loadBookmark(_:readOnly:), v8, v7);
}

UIView *closure #1 in ExtensionViewController.loadBookmark(_:readOnly:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1 + 16);
  if (v2)
  {
    uint64_t v3 = (char *)v2;
    type metadata accessor for PaperViewController();
    id v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    uint64_t result = (UIView *)objc_msgSend(v4, sel_view);
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v6 = result;
    uint64_t v7 = (void *)*(unsigned __int8 *)(v0 + 64);
    uint64_t v8 = *(void *)(v0 + 48);
    ExtensionViewController.addCanvasView(_:)(result);

    uint64_t v9 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperViewController];
    *(void *)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperViewController] = v4;
    id v10 = v4;

    PaperViewController.display(_:readOnly:)(v8, v7);
  }
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return (UIView *)v11();
}

uint64_t closure #1 in ExtensionViewController.receiveMulticastData(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  type metadata accessor for MainActor();
  v6[6] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.receiveMulticastData(_:), v8, v7);
}

uint64_t closure #1 in ExtensionViewController.receiveMulticastData(_:)()
{
  swift_release();
  if (one-time initialization token for extensionLogger != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 24);
  unint64_t v3 = *(void *)(v0 + 32);
  uint64_t v1 = (uint64_t *)(v0 + 24);
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)extensionLogger);
  outlined copy of Data._Representation(v2, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  unint64_t v8 = *(void *)(v0 + 32);
  if (v7)
  {
    unint64_t v9 = v8 >> 62;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134217984;
    uint64_t v11 = v10;
    uint64_t v12 = 0;
    switch(v9)
    {
      case 1uLL:
        int v13 = *(_DWORD *)(v0 + 28);
        LODWORD(v12) = v13 - *(_DWORD *)v1;
        if (__OFSUB__(v13, *(_DWORD *)v1))
        {
          __break(1u);
LABEL_15:
          __break(1u);
          JUMPOUT(0x20C34A510);
        }
        uint64_t v12 = (int)v12;
LABEL_10:
        uint64_t v18 = *(void *)(v0 + 24);
        unint64_t v17 = *(void *)(v0 + 32);
        *(void *)(v0 + 16) = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined consume of Data._Representation(v18, v17);
        _os_log_impl(&dword_20C2D7000, v5, v6, "receiveMulticastData %ld", v11, 0xCu);
        MEMORY[0x210550270](v11, -1, -1);
        break;
      case 2uLL:
        uint64_t v14 = *(void *)(*v1 + 16);
        uint64_t v15 = *(void *)(*v1 + 24);
        BOOL v16 = __OFSUB__(v15, v14);
        uint64_t v12 = v15 - v14;
        if (!v16) {
          goto LABEL_10;
        }
        goto LABEL_15;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v12 = *(unsigned __int8 *)(v0 + 38);
        goto LABEL_10;
    }
  }
  else
  {
    outlined consume of Data._Representation(*v1, v8);
  }

  ExtensionViewController.multipeerConnection.getter();
  CRMulticastSyncManager.receive(_:)();
  swift_release();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t closure #1 in ExtensionViewController.receiveLiveStreamData(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  type metadata accessor for MainActor();
  v6[6] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.receiveLiveStreamData(_:), v8, v7);
}

uint64_t closure #1 in ExtensionViewController.receiveLiveStreamData(_:)()
{
  swift_release();
  if (one-time initialization token for extensionLogger != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 24);
  unint64_t v3 = *(void *)(v0 + 32);
  uint64_t v1 = (uint64_t *)(v0 + 24);
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)extensionLogger);
  outlined copy of Data._Representation(v2, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  unint64_t v8 = *(void *)(v0 + 32);
  if (v7)
  {
    unint64_t v9 = v8 >> 62;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134217984;
    uint64_t v11 = v10;
    uint64_t v12 = 0;
    switch(v9)
    {
      case 1uLL:
        int v13 = *(_DWORD *)(v0 + 28);
        LODWORD(v12) = v13 - *(_DWORD *)v1;
        if (__OFSUB__(v13, *(_DWORD *)v1))
        {
          __break(1u);
LABEL_17:
          __break(1u);
          JUMPOUT(0x20C34A7F8);
        }
        uint64_t v12 = (int)v12;
LABEL_10:
        uint64_t v18 = *(void *)(v0 + 24);
        unint64_t v17 = *(void *)(v0 + 32);
        *(void *)(v0 + 16) = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined consume of Data._Representation(v18, v17);
        _os_log_impl(&dword_20C2D7000, v5, v6, "receiveLiveStreamData %ld", v11, 0xCu);
        MEMORY[0x210550270](v11, -1, -1);
        break;
      case 2uLL:
        uint64_t v14 = *(void *)(*v1 + 16);
        uint64_t v15 = *(void *)(*v1 + 24);
        BOOL v16 = __OFSUB__(v15, v14);
        uint64_t v12 = v15 - v14;
        if (!v16) {
          goto LABEL_10;
        }
        goto LABEL_17;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v12 = *(unsigned __int8 *)(v0 + 38);
        goto LABEL_10;
    }
  }
  else
  {
    outlined consume of Data._Representation(*v1, v8);
  }

  if (*(void *)(*(void *)(v0 + 40) + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger))
  {
    uint64_t v20 = *(void *)(v0 + 24);
    unint64_t v19 = *(void *)(v0 + 32);
    swift_retain();
    ExtensionViewController.LiveStreamMessenger.receiveLiveStreamData(_:)(v20, v19);
    swift_release();
  }
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

void @objc ExtensionViewController.receiveMulticastData(_:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = a3;
  id v12 = a1;
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 1, 1, v16);
  type metadata accessor for MainActor();
  id v17 = v12;
  outlined copy of Data._Representation(v13, v15);
  uint64_t v18 = static MainActor.shared.getter();
  unint64_t v19 = (void *)swift_allocObject();
  uint64_t v20 = MEMORY[0x263F8F500];
  _OWORD v19[2] = v18;
  v19[3] = v20;
  v19[4] = v13;
  v19[5] = v15;
  v19[6] = v17;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, a5, (uint64_t)v19);
  swift_release();
  outlined consume of Data._Representation(v13, v15);
}

uint64_t closure #1 in ExtensionViewController.setupWithData(_:transparentBackground:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 24) = a6;
  *(void *)(v7 + 32) = a7;
  *(unsigned char *)(v7 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a5;
  *(void *)(v7 + 16) = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  *(void *)(v7 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  *(void *)(v7 + 48) = v8;
  *(void *)(v7 + 56) = *(void *)(v8 - 8);
  *(void *)(v7 + 64) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v7 + 72) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.setupWithData(_:transparentBackground:), v10, v9);
}

id closure #1 in ExtensionViewController.setupWithData(_:transparentBackground:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  unint64_t v1 = *(void *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  swift_release();
  *(unsigned char *)(v4 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_transparentBackground) = v3;
  outlined copy of Data._Representation(v2, v1);
  type metadata accessor for Paper();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule<>.init(serializedData:allowedAppFormats:)();
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v9 = *(char **)(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v5, v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v8);
  uint64_t v10 = ExtensionViewController.newMultipeerConnection(model:)(v7);
  outlined destroy of StocksKitCurrencyCache.Provider?(v7, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit23ExtensionViewController____lazy_storage___multipeerConnection] = v10;
  swift_release();
  ExtensionViewController.updateCanvasView(paper:)(v5);
  id result = objc_msgSend(v9, sel_view);
  if (result)
  {
    uint64_t v12 = result;
    if (*(unsigned char *)(v0 + 80)) {
      id v13 = 0;
    }
    else {
      id v13 = objc_msgSend(self, sel_whiteColor);
    }
    uint64_t v15 = *(void *)(v0 + 56);
    uint64_t v14 = *(void *)(v0 + 64);
    uint64_t v16 = *(void *)(v0 + 48);
    objc_msgSend(v12, sel_setBackgroundColor_, v13);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    swift_task_dealloc();
    swift_task_dealloc();
    id v17 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v17();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall ExtensionViewController.setTool(_:)(NSDictionary a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v18 = 0x696669746E656469;
  *((void *)&v18 + 1) = 0xEA00000000007265;
  id v5 = [(objc_class *)a1.super.isa __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (!v5)
  {
    __break(1u);
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v17, &v18);
  swift_dynamicCast();
  uint64_t v6 = (void *)MEMORY[0x21054D080](v16[0], v16[1]);
  swift_bridgeObjectRelease();
  *(void *)&v17[0] = 0x69747265706F7270;
  *((void *)&v17[0] + 1) = 0xEA00000000007365;
  id v7 = [(objc_class *)a1.super.isa __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v17, (uint64_t)&v18, &demangling cache variable for type metadata for Any?);
  if (v19)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    if (swift_dynamicCast())
    {
      v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v18, &demangling cache variable for type metadata for Any?);
  }
  v8.super.Class isa = 0;
LABEL_10:
  id v9 = objc_msgSend(self, sel_inkWithIdentifier_properties_, v6, v8.super.isa);

  if (v9)
  {
    uint64_t v10 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 1, 1, v10);
    uint64_t v11 = swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for MainActor();
    id v12 = v9;
    swift_retain();
    uint64_t v13 = static MainActor.shared.getter();
    uint64_t v14 = (void *)swift_allocObject();
    uint64_t v15 = MEMORY[0x263F8F500];
    v14[2] = v13;
    v14[3] = v15;
    v14[4] = v12;
    v14[5] = v11;
    swift_release();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.setTool(_:), (uint64_t)v14);

    swift_release();
  }
}

uint64_t closure #1 in ExtensionViewController.setTool(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[26] = a4;
  v5[27] = a5;
  uint64_t v6 = type metadata accessor for PKInk();
  v5[28] = v6;
  v5[29] = *(void *)(v6 - 8);
  v5[30] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[31] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.setTool(_:), v8, v7);
}

uint64_t closure #1 in ExtensionViewController.setTool(_:)()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 216);
  swift_release();
  static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
  PKInk.tool.getter((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x210550400](v4 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    outlined init with copy of FindResult(v0 + 16, v0 + 56);
    uint64_t v7 = (uint64_t)v6 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_tool;
    swift_beginAccess();
    __swift_destroy_boxed_opaque_existential_1(v7);
    outlined init with take of FindResult((long long *)(v0 + 56), v7);
    swift_endAccess();
  }
  uint64_t v8 = *(void *)(v0 + 216) + 16;
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x210550400](v8);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    uint64_t v11 = *(void **)(v9 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView);
    id v12 = v11;

    if (v11)
    {
      outlined init with copy of FindResult(v0 + 16, v0 + 96);
      specialized Canvas.tool.setter((void *)(v0 + 96), (void (*)(void *__return_ptr, double))specialized Canvas.tool.getter);
    }
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t closure #1 in ExtensionViewController.setLinedPaper(horizontalLineSpacing:verticalLineSpacing:horizontalInset:)(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(double *)(v7 + 56) = a2;
  *(double *)(v7 + 64) = a3;
  *(double *)(v7 + 48) = a1;
  *(void *)(v7 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a7;
  type metadata accessor for MainActor();
  *(void *)(v7 + 72) = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.setLinedPaper(horizontalLineSpacing:verticalLineSpacing:horizontalInset:), v9, v8);
}

uint64_t closure #1 in ExtensionViewController.setLinedPaper(horizontalLineSpacing:verticalLineSpacing:horizontalInset:)()
{
  uint64_t v1 = v0[5];
  swift_release();
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1 + 16);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v5 = v0[7];
    uint64_t v4 = v0[8];
    *(void *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalSpacing) = v0[6];
    *(void *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperVerticalSpacing) = v5;
    *(void *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalInset) = v4;
    ExtensionViewController.updateLinedPaper()();
  }
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t closure #1 in ExtensionViewController.setHasLiveStreamMessenger(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v5 + 88) = a5;
  *(unsigned char *)(v5 + 104) = a4;
  type metadata accessor for MainActor();
  *(void *)(v5 + 96) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.setHasLiveStreamMessenger(_:), v7, v6);
}

uint64_t closure #1 in ExtensionViewController.setHasLiveStreamMessenger(_:)()
{
  swift_release();
  if (one-time initialization token for extensionLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)extensionLogger);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 104);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    *(_DWORD *)(v0 + 16) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v2, v3, "setHasLiveStreamMessenger %{BOOL}d", v5, 8u);
    MEMORY[0x210550270](v5, -1, -1);
  }

  uint64_t v6 = *(void *)(v0 + 88);
  if (*(unsigned char *)(v0 + 104) == 1)
  {
    type metadata accessor for ExtensionViewController.LiveStreamMessenger();
    uint64_t v7 = swift_allocObject();
    swift_unknownObjectWeakInit();
    *(void *)(v7 + 24) = MEMORY[0x263F8EE78];
    swift_unknownObjectWeakAssign();
    *(void *)(v6 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger) = v7;
  }
  else
  {
    *(void *)(v6 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger) = 0;
  }
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t result = swift_release();
  uint64_t v11 = *(char **)(v8 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView);
  if (v11)
  {
    uint64_t v12 = *(void *)(*(void *)(v0 + 88) + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger);
    if (v12) {
      uint64_t v13 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController.LiveStreamMessenger and conformance ExtensionViewController.LiveStreamMessenger, v10, (void (*)(uint64_t))type metadata accessor for ExtensionViewController.LiveStreamMessenger);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v11[direct field offset for Canvas.liveStreamMessenger];
    swift_beginAccess();
    *(void *)uint64_t v14 = v12;
    *((void *)v14 + 1) = v13;
    swift_retain_n();
    uint64_t v15 = v11;
    swift_unknownObjectRelease();
    specialized Canvas.liveStreamMessenger.didset();

    uint64_t result = swift_release();
  }
  uint64_t v16 = *(void *)(v0 + 88);
  id v17 = *(char **)(v16 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView);
  if (v17)
  {
    uint64_t v18 = *(void *)(v16 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger);
    if (v18)
    {
      uint64_t result = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController.LiveStreamMessenger and conformance ExtensionViewController.LiveStreamMessenger, v10, (void (*)(uint64_t))type metadata accessor for ExtensionViewController.LiveStreamMessenger);
      uint64_t v19 = result;
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(char **)&v17[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView];
    if (!v20)
    {
      __break(1u);
      return result;
    }
    uint64_t v21 = &v20[direct field offset for Canvas.liveStreamMessenger];
    swift_beginAccess();
    *(void *)uint64_t v21 = v18;
    *((void *)v21 + 1) = v19;
    swift_retain_n();
    uint64_t v22 = v17;
    uint64_t v23 = v20;
    swift_unknownObjectRelease();
    specialized Canvas.liveStreamMessenger.didset();

    swift_release();
    uint64_t v16 = *(void *)(v0 + 88);
  }
  uint64_t v24 = *(char **)(v16 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController);
  if (v24)
  {
    if (*(void *)(v16 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger)) {
      uint64_t v25 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController.LiveStreamMessenger and conformance ExtensionViewController.LiveStreamMessenger, v10, (void (*)(uint64_t))type metadata accessor for ExtensionViewController.LiveStreamMessenger);
    }
    else {
      uint64_t v25 = 0;
    }
    char v26 = &v24[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger];
    swift_beginAccess();
    *((void *)v26 + 1) = v25;
    swift_unknownObjectWeakAssign();
    uint64_t v27 = v24;
    swift_retain();
    PaperKitExtensionDocumentViewController.liveStreamMessenger.didset();

    swift_release();
  }
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t closure #1 in ExtensionViewController.setCanvasContentMode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  type metadata accessor for MainActor();
  v5[10] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.setCanvasContentMode(_:), v7, v6);
}

uint64_t closure #1 in ExtensionViewController.setCanvasContentMode(_:)()
{
  uint64_t v1 = v0[8];
  swift_release();
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1 + 16);
  if (v2)
  {
    os_log_type_t v3 = (void *)v2;
    uint64_t v4 = v0[9];
    if (v4)
    {
      if (v4 != 1)
      {
LABEL_8:

        goto LABEL_9;
      }
      char v5 = 1;
    }
    else
    {
      char v5 = 0;
    }
    *(unsigned char *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_canvasContentMode) = v5;
    uint64_t v6 = *(char **)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView);
    if (v6)
    {
      uint64_t v7 = &v6[direct field offset for CanvasView.canvasContentMode];
      swift_beginAccess();
      *uint64_t v7 = v5;
      objc_msgSend(v6, sel_setNeedsLayout);
    }
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t closure #1 in ExtensionViewController.setUserInterfaceStyle(userInterfaceStyle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[6] = a4;
  v5[7] = a5;
  type metadata accessor for MainActor();
  v5[8] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.setUserInterfaceStyle(userInterfaceStyle:), v7, v6);
}

uint64_t closure #1 in ExtensionViewController.setUserInterfaceStyle(userInterfaceStyle:)()
{
  swift_release();
  if (one-time initialization token for extensionLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)extensionLogger);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_20C2D7000, v2, v3, "setUserInterfaceStyle", v4, 2u);
    MEMORY[0x210550270](v4, -1, -1);
  }
  uint64_t v5 = v0[6];

  swift_beginAccess();
  uint64_t v6 = (void *)MEMORY[0x210550400](v5 + 16);
  if (!v6) {
    goto LABEL_8;
  }
  uint64_t v7 = v0[7];
  if ((unint64_t)(v7 + 1) < 3)
  {
    uint64_t v8 = v6;
    objc_msgSend(v6, sel_setOverrideUserInterfaceStyle_);

LABEL_8:
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  v0[5] = v7;
  uint64_t v11 = MEMORY[0x263F8D6C8];
  return MEMORY[0x270F9FA68](&type metadata for UserInterfaceStyle, v0 + 5, &type metadata for UserInterfaceStyle, v11);
}

void @objc ExtensionViewController.setCanvasContentMode(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  id v13 = a1;
  swift_retain();
  uint64_t v14 = static MainActor.shared.getter();
  uint64_t v15 = (void *)swift_allocObject();
  uint64_t v16 = MEMORY[0x263F8F500];
  v15[2] = v14;
  v15[3] = v16;
  v15[4] = v12;
  v15[5] = a3;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, a5, (uint64_t)v15);
  swift_release();
}

uint64_t closure #1 in ExtensionViewController.setPaperDocumentInlineThumbnailsVisible(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 64) = a5;
  *(void *)(v5 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a1;
  *(void *)(v5 + 48) = a4;
  type metadata accessor for MainActor();
  *(void *)(v5 + 56) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.setPaperDocumentInlineThumbnailsVisible(_:), v7, v6);
}

uint64_t closure #1 in ExtensionViewController.setPaperDocumentInlineThumbnailsVisible(_:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_release();
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1 + 16);
  if (v2
    && (os_log_type_t v3 = (void *)v2,
        uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController),
        id v5 = v4,
        v3,
        v4))
  {
    PaperKitExtensionDocumentViewController.thumbnailsVisible.setter(*(unsigned char *)(v0 + 64));

    char v6 = 0;
  }
  else
  {
    char v6 = 1;
  }
  **(unsigned char **)(v0 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v6;
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t closure #1 in ExtensionViewController.reportSafeAreaInsets(top:left:bottom:right:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 12AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a8;
  *(double *)(v8 + 104) = a3;
  *(double *)(v8 + 112) = a4;
  *(double *)(v8 + 88) = a1;
  *(double *)(v8 + 96) = a2;
  type metadata accessor for MainActor();
  *(void *)(v8 + 128) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.reportSafeAreaInsets(top:left:bottom:right:), v10, v9);
}

id closure #1 in ExtensionViewController.reportSafeAreaInsets(top:left:bottom:right:)()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_release();
  swift_beginAccess();
  uint64_t v2 = (char *)MEMORY[0x210550400](v1 + 16);
  if (v2)
  {
    os_log_type_t v3 = &v2[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_extensionHostSafeAreaInsets];
    long long v4 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)os_log_type_t v3 = *(_OWORD *)(v0 + 88);
    *((_OWORD *)v3 + 1) = v4;
  }
  uint64_t v5 = *(void *)(v0 + 120) + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = *(void **)(v6 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController);
    uint64_t v9 = v8;

    if (v8)
    {
      uint64_t v11 = *(void *)(v0 + 104);
      uint64_t v10 = *(void *)(v0 + 112);
      long long v16 = *(_OWORD *)(v0 + 88);
      uint64_t v12 = &v9[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets];
      swift_beginAccess();
      *(_OWORD *)uint64_t v12 = v16;
      *((void *)v12 + 2) = v11;
      *((void *)v12 + 3) = v10;
      id result = objc_msgSend(v9, sel_view);
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t v14 = result;
      objc_msgSend(result, sel_setNeedsLayout);
    }
  }
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return (id)v15();
}

Swift::Void __swiftcall ExtensionViewController.revertAllChanges()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v5 = static MainActor.shared.getter();
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v7 = MEMORY[0x263F8F500];
  v6[2] = v5;
  v6[3] = v7;
  v6[4] = v4;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v2, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.revertAllChanges(), (uint64_t)v6);
  swift_release();
}

uint64_t closure #1 in ExtensionViewController.revertAllChanges()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 112) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 12AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.revertAllChanges(), v6, v5);
}

uint64_t closure #1 in ExtensionViewController.revertAllChanges()()
{
  swift_release();
  if (one-time initialization token for extensionLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)extensionLogger);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_20C2D7000, v2, v3, "extensionRevertAllChanges", v4, 2u);
    MEMORY[0x210550270](v4, -1, -1);
  }
  uint64_t v5 = *(void *)(v0 + 112);

  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5 + 16);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = *(void **)(v6 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperViewController);
    uint64_t v9 = v8;

    if (v8)
    {
      uint64_t v10 = (void **)&v9[OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController];
      swift_beginAccess();
      uint64_t v11 = (char *)*v10;
      if (*v10)
      {
        uint64_t v12 = (void **)&v11[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
        swift_beginAccess();
        id v13 = *v12;
        if (v13)
        {
          uint64_t v14 = v11;
          uint64_t v15 = v13;
          PaperDocumentView.revertAllChanges()();

          uint64_t v9 = v15;
        }
      }
    }
  }
  uint64_t v16 = *(void *)(v0 + 112) + 16;
  swift_beginAccess();
  uint64_t v17 = MEMORY[0x210550400](v16);
  if (v17)
  {
    uint64_t v18 = (void *)v17;
    uint64_t v19 = *(void **)(v17 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController);
    id v20 = v19;

    if (v19)
    {
      PaperKitExtensionDocumentViewController.revertAllChanges()();
    }
  }
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t ExtensionViewController.setMathDocument(_:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for mathLogger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)mathLogger);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_20C2D7000, v4, v5, "ExtensionViewController.setMathDocument", v6, 2u);
    MEMORY[0x210550270](v6, -1, -1);
  }

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for CanvasCalculateDocumentProxy();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy and conformance CanvasCalculateDocumentProxy, 255, (void (*)(uint64_t))type metadata accessor for CanvasCalculateDocumentProxy);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  uint64_t v7 = v14[1];
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v2, 1, 1, v8);
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  uint64_t v11 = (void *)swift_allocObject();
  uint64_t v12 = MEMORY[0x263F8F500];
  v11[2] = v10;
  v11[3] = v12;
  v11[4] = v9;
  v11[5] = v7;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v2, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.setMathDocument(_:), (uint64_t)v11);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in ExtensionViewController.setMathDocument(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  type metadata accessor for MainActor();
  v5[8] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.setMathDocument(_:), v7, v6);
}

uint64_t closure #1 in ExtensionViewController.setMathDocument(_:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_release();
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1 + 16);
  if (v2
    && (uint64_t v3 = (void *)v2,
        uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView),
        id v5 = v4,
        v3,
        v4))
  {
    PaperTextAttachmentCanvasView.setMathDocument(_:)(*(void *)(v0 + 56));

    char v6 = 0;
  }
  else
  {
    char v6 = 1;
  }
  **(unsigned char **)(v0 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v6;
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t ExtensionViewController.setMathResult(_:expressionUUID:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v46 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v44 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v10;
  MEMORY[0x270FA5388](v11);
  id v13 = (char *)&v38 - v12;
  uint64_t v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    swift_bridgeObjectRetain();
    unint64_t v41 = a2;
    uint64_t v42 = a1;
  }
  else
  {
    unint64_t v41 = 0;
    uint64_t v42 = 0;
  }
  if (one-time initialization token for mathLogger != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)mathLogger);
  long long v40 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v40(v13, a3, v8);
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v39 = a3;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v45 = v8;
    uint64_t v21 = v20;
    uint64_t v48 = v20;
    *(_DWORD *)uint64_t v19 = 136380931;
    swift_bridgeObjectRetain();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v45);
    _os_log_impl(&dword_20C2D7000, v16, v17, "ExtensionViewController.setMathResult: %{private}s, uuid: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    uint64_t v24 = v21;
    uint64_t v8 = v45;
    MEMORY[0x210550270](v24, -1, -1);
    uint64_t v25 = v19;
    a3 = v39;
    MEMORY[0x210550270](v25, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }

  uint64_t v26 = type metadata accessor for TaskPriority();
  uint64_t v27 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v46, 1, 1, v26);
  uint64_t v28 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v29 = v44;
  v40(v44, a3, v8);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v30 = static MainActor.shared.getter();
  unint64_t v31 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v32 = (char *)swift_allocObject();
  uint64_t v33 = v8;
  uint64_t v34 = (uint64_t)v32;
  uint64_t v35 = MEMORY[0x263F8F500];
  *((void *)v32 + 2) = v30;
  *((void *)v32 + 3) = v35;
  uint64_t v36 = v42;
  *((void *)v32 + 4) = v28;
  *((void *)v32 + 5) = v36;
  *((void *)v32 + 6) = v41;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v32[v31], v29, v33);
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5(v27, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.setMathResult(_:expressionUUID:), v34);
  return swift_release();
}

uint64_t closure #1 in ExtensionViewController.setMathResult(_:expressionUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v7[5] = a1;
  type metadata accessor for MainActor();
  v7[10] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.setMathResult(_:expressionUUID:), v9, v8);
}

uint64_t closure #1 in ExtensionViewController.setMathResult(_:expressionUUID:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_release();
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1 + 16);
  if (v2
    && (uint64_t v3 = (void *)v2,
        uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView),
        id v5 = v4,
        v3,
        v4))
  {
    PaperTextAttachmentCanvasView.setMathResult(_:expressionUUID:)(*(void *)(v0 + 56), *(void **)(v0 + 64));

    char v6 = 0;
  }
  else
  {
    char v6 = 1;
  }
  **(unsigned char **)(v0 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v6;
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

Swift::Void __swiftcall ExtensionViewController.setMathEnabled(_:)(Swift::Bool a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for mathLogger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)mathLogger);
  char v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 67109120;
    v14[3] = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v6, v7, "ExtensionViewController.setMathEnabled: %{BOOL}d", v8, 8u);
    MEMORY[0x210550270](v8, -1, -1);
  }

  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v11 = static MainActor.shared.getter();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x263F8F500];
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v13;
  *(unsigned char *)(v12 + 32) = a1;
  *(void *)(v12 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v10;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.setMathEnabled(_:), v12);
  swift_release();
}

uint64_t closure #1 in ExtensionViewController.setMathEnabled(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v5 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a5;
  *(unsigned char *)(v5 + 56) = a4;
  type metadata accessor for MainActor();
  *(void *)(v5 + 48) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.setMathEnabled(_:), v7, v6);
}

uint64_t closure #1 in ExtensionViewController.setMathEnabled(_:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 56);
  swift_release();
  if (v1 == 1)
  {
    uint64_t v2 = *(void *)(v0 + 40) + 16;
    swift_beginAccess();
    uint64_t v3 = MEMORY[0x210550400](v2);
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      uint64_t v5 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView);
      id v6 = v5;

      if (v5)
      {
        PaperTextAttachmentCanvasView.setupMathIfNecessary()();
      }
    }
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  *(void *)(v8 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v17;
  *(_OWORD *)(v8 + 24) = v16;
  *(void *)(v8 + 48) = type metadata accessor for MainActor();
  *(void *)(v8 + 56) = static MainActor.shared.getter();
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v8 + 64) = v13;
  *uint64_t v13 = v8;
  v13[1] = closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:);
  return PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)(a5, a6, a7, a8);
}

uint64_t closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:), v3, v2);
}

uint64_t closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)()
{
  swift_release();
  if (static Task<>.isCancelled.getter())
  {
    if (one-time initialization token for extensionLogger != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)extensionLogger);
    swift_bridgeObjectRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = v0[9];
    if (v4)
    {
      id v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v6 = 134217984;
      uint64_t v7 = *(void *)(v5 + 16);
      swift_bridgeObjectRelease();
      v0[2] = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v2, v3, "Found find results (%ld) but task has been cancelled.", v6, 0xCu);
      MEMORY[0x210550270](v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    uint64_t v8 = v0[9];
    uint64_t v9 = (void (*)(uint64_t))v0[4];
    uint64_t v10 = v0[3];
    *(void *)(v10 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults) = specialized _arrayForceCast<A, B>(_:)(v8);
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void *)(v8 + 16);
    swift_bridgeObjectRelease();
    v9(v11);
  }
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  *(void *)(v8 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v17;
  *(_OWORD *)(v8 + 24) = v16;
  *(void *)(v8 + 48) = type metadata accessor for MainActor();
  *(void *)(v8 + 56) = static MainActor.shared.getter();
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v8 + 64) = v13;
  *uint64_t v13 = v8;
  v13[1] = closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:);
  return PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(a5, a6, a7, a8);
}

uint64_t closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:), v3, v2);
}

uint64_t closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)()
{
  swift_release();
  if (static Task<>.isCancelled.getter())
  {
    if (one-time initialization token for extensionLogger != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)extensionLogger);
    swift_bridgeObjectRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    unint64_t v5 = v0[9];
    if (v4)
    {
      id v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v6 = 134217984;
      if (v5 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v0[2] = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v2, v3, "Found find results (%ld) but task has been cancelled.", v6, 0xCu);
      MEMORY[0x210550270](v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    unint64_t v8 = v0[9];
    uint64_t v9 = v0[3];
    *(void *)(v9 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults) = specialized _arrayForceCast<A, B>(_:)(v8);
    swift_bridgeObjectRelease();
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v11 = (void (*)(uint64_t))v0[4];
    swift_bridgeObjectRelease();
    v11(v10);
  }
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

Swift::Void __swiftcall ExtensionViewController.endSearch()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for extensionLogger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)extensionLogger);
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl(&dword_20C2D7000, v3, v4, "endSearch()", v5, 2u);
    MEMORY[0x210550270](v5, -1, -1);
  }

  if (*(void *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindTask))
  {
    uint64_t v6 = swift_retain();
    MEMORY[0x21054D560](v6, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
    swift_release();
  }
  *(void *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults) = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
}

double ExtensionViewController.searchResultAndDocumentView(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController];
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)(v4 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
  if (!v5) {
    goto LABEL_14;
  }
  uint64_t v6 = v2;
  unint64_t v8 = (id *)(v5 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  id v9 = *v8;
  if (!*v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)&v6[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults];
  if (*(void *)(v10 + 16) <= a1)
  {
    uint64_t v13 = one-time initialization token for extensionLogger;
    id v9 = v9;
    if (v13 == -1)
    {
LABEL_9:
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)extensionLogger);
      uint64_t v15 = v6;
      long long v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v18 + 12) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl(&dword_20C2D7000, v16, v17, "Cached find results got out of sync. Asked for frame for index %ld but only %ld results cached.", (uint8_t *)v18, 0x16u);
        MEMORY[0x210550270](v18, -1, -1);
      }
      else
      {

        long long v16 = v15;
      }

      goto LABEL_14;
    }
LABEL_16:
    swift_once();
    goto LABEL_9;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  outlined init with copy of FindResult(v10 + 40 * a1 + 32, (uint64_t)v23);
  id v11 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FindResult);
  if (swift_dynamicCast())
  {
    double result = *(double *)&v19;
    *(void *)a2 = v9;
    *(_OWORD *)(a2 + 8) = v19;
    *(_OWORD *)(a2 + 24) = v20;
    *(void *)(a2 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v21;
    *(unsigned char *)(a2 + 48) = v22;
    return result;
  }

LABEL_14:
  *(unsigned char *)(a2 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t ExtensionViewController.searchResultAndCanvasView(for:)(uint64_t result)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView);
  if (!v2) {
    return (uint64_t)v2;
  }
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults);
  if (*(void *)(v3 + 16) <= result) {
    return 0;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    outlined init with copy of FindResult(v3 + 40 * result + 32, (uint64_t)v5);
    id v4 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FindResult);
    type metadata accessor for DrawingFindResult();
    if (swift_dynamicCast()) {
      return (uint64_t)v2;
    }

    return 0;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ExtensionViewController.searchScrollToVisible(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for extensionLogger != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)extensionLogger);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_20C2D7000, v12, v13, "searchScrollToVisible(_:)", v14, 2u);
    MEMORY[0x210550270](v14, -1, -1);
  }

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v15 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v2;
  *(void *)(v16 + 24) = a1;
  aBlock[4] = partial apply for closure #1 in ExtensionViewController.searchScrollToVisible(_:);
  double aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_134;
  os_log_type_t v17 = _Block_copy(aBlock);
  id v18 = v2;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x21054DA10](0, v10, v7, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v20);
}

void closure #1 in ExtensionViewController.searchScrollToVisible(_:)(uint64_t a1, uint64_t a2)
{
  ExtensionViewController.searchResultAndDocumentView(for:)(a2, (uint64_t)&v14);
  uint64_t v4 = v14;
  if (v14)
  {
    uint64_t v6 = v18;
    uint64_t v5 = v19;
    uint64_t v8 = v16;
    uint64_t v7 = v17;
    uint64_t v9 = v15;
    char v10 = v20 & 1;
    uint64_t v14 = v15;
    uint64_t v15 = (void *)v16;
    uint64_t v16 = v17;
    uint64_t v17 = v18;
    uint64_t v18 = (uint64_t)v19;
    LOBYTE(v19) = v20 & 1;
    PaperDocumentFindResult.scrollToVisible(in:)((uint64_t)v4);

    outlined consume of PaperDocumentFindResult.Content(v9, v8, v7, v6, v5, v10);
  }
  else
  {
    uint64_t v11 = *(void **)(a1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView);
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults);
      if (*(void *)(v12 + 16) > a2)
      {
        if (a2 < 0)
        {
          __break(1u);
        }
        else
        {
          outlined init with copy of FindResult(v12 + 40 * a2 + 32, (uint64_t)&v14);
          id v13 = v11;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FindResult);
          type metadata accessor for DrawingFindResult();
          if (swift_dynamicCast())
          {

            swift_release();
          }
          else
          {
          }
        }
      }
    }
  }
}

void @objc ExtensionViewController.searchFrame(for:reply:)(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a1;
  a5(a3, v9, v8);
  _Block_release(v8);
  _Block_release(v8);
}

uint64_t ExtensionViewController.encrypt(_:)(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t ExtensionViewController.encrypt(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a2, a1, v4);
}

uint64_t ExtensionViewController.decrypt(_:)(uint64_t a1, unint64_t a2)
{
  dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_20C8352B0;
  dispatch_queue_t queue = *(dispatch_queue_t *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue);
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v7;
  v8[3] = a1;
  _OWORD v8[4] = a2;
  void v8[5] = v6;
  v8[6] = v5;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in ExtensionViewController.decrypt(_:);
  *(void *)(v9 + 24) = v8;
  aBlock[4] = _sIg_Ieg_TRTA_0;
  uint64_t v16 = v9;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_22;
  char v10 = _Block_copy(aBlock);
  uint64_t v11 = v16;
  swift_retain();
  swift_retain();
  uint64_t v12 = v5;
  swift_retain();
  outlined copy of Data._Representation(a1, a2);
  swift_release();
  dispatch_sync(queue, v10);
  _Block_release(v10);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v7)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    if (*(void *)(v6 + 24) >> 60 == 15)
    {
      lazy protocol witness table accessor for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError();
      swift_allocError();
      swift_willThrow();
    }
    else
    {
      uint64_t v11 = *(void *)(v6 + 16);
      outlined copy of Data._Representation(v11, *(void *)(v6 + 24));
    }
    swift_release();

    swift_release();
    return v11;
  }
  return result;
}

void closure #1 in ExtensionViewController.decrypt(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = *(void **)(a1 + 16);
  if (v6)
  {
    swift_unknownObjectRetain();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a4;
    *(void *)(v9 + 24) = a5;
    v12[4] = partial apply for closure #1 in closure #1 in ExtensionViewController.decrypt(_:);
    v12[5] = v9;
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 1107296256;
    v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed Data?) -> ();
    uint64_t v12[3] = &block_descriptor_267;
    char v10 = _Block_copy(v12);
    swift_retain();
    id v11 = a5;
    swift_release();
    objc_msgSend(v6, sel_decryptData_reply_, isa, v10);
    swift_unknownObjectRelease();
    _Block_release(v10);
  }
  OS_dispatch_semaphore.wait()();
}

Swift::Int closure #1 in closure #1 in ExtensionViewController.decrypt(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(a3 + 16);
  unint64_t v7 = *(void *)(a3 + 24);
  *(void *)(a3 + 16) = a1;
  *(void *)(a3 + 24) = a2;
  outlined copy of Data?(a1, a2);
  outlined consume of Data?(v6, v7);
  return OS_dispatch_semaphore.signal()();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Data?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void (**)(void *, unint64_t))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v4 = v2;
    uint64_t v2 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;
  }
  else
  {
    swift_retain();
    unint64_t v6 = 0xF000000000000000;
  }
  v3(v2, v6);
  outlined consume of Data?((uint64_t)v2, v6);
  return swift_release();
}

uint64_t ExtensionViewController.handleLink(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  id v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = Notification.userInfo.getter();
  if (!v9)
  {
    long long v18 = 0u;
    long long v19 = 0u;
LABEL_10:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v18, &demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
  }
  uint64_t v10 = v9;
  void aBlock[6] = 5001813;
  aBlock[7] = 0xE300000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v10 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)aBlock), (v12 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v18);
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)aBlock);
  if (!*((void *)&v19 + 1)) {
    goto LABEL_10;
  }
  int v13 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, v13 ^ 1u, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    ExtensionViewController.openLink(_:)((uint64_t)v8);
    uint64_t v14 = (void *)MEMORY[0x21054D080](*(void *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_LinkAnalyticsEventName), *(void *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_LinkAnalyticsEventName + 8));
    aBlock[4] = closure #1 in ExtensionViewController.analyticsCountLinkClick();
    void aBlock[5] = 0;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    aBlock[3] = &block_descriptor_128_0;
    uint64_t v15 = _Block_copy(aBlock);
    AnalyticsSendEventLazy();
    _Block_release(v15);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
}

unint64_t closure #1 in ExtensionViewController.analyticsCountLinkClick()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  *(void *)(inited + 32) = 0x756F436B63696C63;
  *(void *)(inited + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 0xEA0000000000746ELL;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(1);
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t closure #1 in ExtensionViewController.LiveStreamMessenger.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[6] = swift_task_alloc();
  v6[7] = type metadata accessor for MainActor();
  v6[8] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ExtensionViewController.LiveStreamMessenger.send(_:), v8, v7);
}

uint64_t closure #1 in ExtensionViewController.LiveStreamMessenger.send(_:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  uint64_t v2 = (void *)MEMORY[0x210550400](v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 48);
    uint64_t v5 = *(void *)(v0 + 32);
    unint64_t v4 = *(void *)(v0 + 40);
    uint64_t v6 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
    outlined copy of Data._Representation(v5, v4);
    id v7 = v2;
    uint64_t v8 = static MainActor.shared.getter();
    uint64_t v9 = (void *)swift_allocObject();
    uint64_t v10 = MEMORY[0x263F8F500];
    _OWORD v9[2] = v8;
    v9[3] = v10;
    v9[4] = v5;
    v9[5] = v4;
    v9[6] = v7;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v3, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.receiveLiveStreamData(_:), (uint64_t)v9);

    swift_release();
  }
  **(unsigned char **)(v0 + 16) = v2 == 0;
  swift_task_dealloc();
  unint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t ExtensionViewController.LiveStreamMessenger.receiveLiveStreamData(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation.YieldResult);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  char v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = *(void *)(v2 + 24);
  uint64_t v14 = *(void *)(result + 16);
  if (v14)
  {
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
    uint64_t v16 = v6;
    unint64_t v17 = result + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v22 = *(void *)(v10 + 72);
    unint64_t v23 = v15;
    uint64_t v20 = result;
    uint64_t v21 = v5;
    long long v18 = (void (**)(char *, uint64_t))(v16 + 8);
    uint64_t v24 = v10 + 16;
    long long v19 = (void (**)(char *, uint64_t))(v10 + 8);
    swift_bridgeObjectRetain();
    do
    {
      v23(v12, v17, v9);
      uint64_t v25 = a1;
      unint64_t v26 = a2;
      outlined copy of Data._Representation(a1, a2);
      AsyncStream.Continuation.yield(_:)();
      (*v18)(v8, v21);
      (*v19)(v12, v9);
      v17 += v22;
      --v14;
    }
    while (v14);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v12 = static MainActor.shared.getter();
  unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  uint64_t v15 = MEMORY[0x263F8F500];
  *((void *)v14 + 2) = v12;
  *((void *)v14 + 3) = v15;
  *((void *)v14 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v14[v13], v7, v4);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter, (uint64_t)v14);
  return swift_release();
}

uint64_t closure #1 in closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  void v5[6] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[10] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter, v8, v7);
}

uint64_t closure #1 in closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  uint64_t v6 = (unint64_t *)(v5 + 24);
  swift_beginAccess();
  unint64_t v7 = *(void *)(v5 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + 24) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, v7);
    *uint64_t v6 = v7;
  }
  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1, v7);
    *uint64_t v6 = v7;
  }
  uint64_t v11 = v0[8];
  uint64_t v12 = v0[9];
  uint64_t v13 = v0[7];
  *(void *)(v7 + 16) = v10 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v7+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v10, v12, v13);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t ExtensionViewController.LiveStreamMessenger.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PaperKitLiveStreamMessenger.send(_:) in conformance ExtensionViewController.LiveStreamMessenger(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  type metadata accessor for MainActor();
  swift_retain();
  outlined copy of Data._Representation(a1, a2);
  uint64_t v10 = static MainActor.shared.getter();
  uint64_t v11 = (void *)swift_allocObject();
  uint64_t v12 = MEMORY[0x263F8F500];
  v11[2] = v10;
  v11[3] = v12;
  v11[4] = v3;
  v11[5] = a1;
  void v11[6] = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.LiveStreamMessenger.send(_:), (uint64_t)v11);
  return swift_release();
}

uint64_t protocol witness for PaperKitLiveStreamMessenger.messages.getter in conformance ExtensionViewController.LiveStreamMessenger()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation.BufferingPolicy);
  double v1 = MEMORY[0x270FA5388](v0);
  (*(void (**)(char *, void, double))(v3 + 104))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F8F580], v1);
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

id ExtensionViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x21054D080]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id ExtensionViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v32 = a1;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v33 = *(void *)(v4 - 8);
  uint64_t v34 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v9 = type metadata accessor for PKInkingTool.InkType();
  double v10 = MEMORY[0x270FA5388](v9);
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger] = 0;
  v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_canvasContentMode] = 0;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView] = 0;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView] = 0;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperViewController] = 0;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController] = 0;
  v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_transparentBackground] = 0;
  uint64_t v12 = (uint64_t *)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_tool];
  (*(void (**)(char *, void, double))(v13 + 104))((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F14A48], v10);
  uint64_t v14 = self;
  uint64_t v15 = v3;
  id v16 = objc_msgSend(v14, sel_blackColor);
  uint64_t v17 = type metadata accessor for PKInkingTool();
  uint64_t v18 = MEMORY[0x263F14A50];
  uint64_t v12[3] = v17;
  v12[4] = v18;
  __swift_allocate_boxed_opaque_existential_1(v12);
  PKInkingTool.init(_:color:width:)();
  *(void *)&v15[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalSpacing] = 0;
  *(void *)&v15[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperVerticalSpacing] = 0;
  *(void *)&v15[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalInset] = 0;
  long long v19 = &v15[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_extensionHostSafeAreaInsets];
  long long v20 = *(_OWORD *)(MEMORY[0x263F834E8] + 16);
  _OWORD *v19 = *MEMORY[0x263F834E8];
  v19[1] = v20;
  uint64_t v21 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper;
  type metadata accessor for ExtensionViewController.ProxyWrapper();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = 0;
  *(void *)&v15[v21] = v22;
  v15[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueueSuspended] = 1;
  uint64_t v23 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  uint64_t v38 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v33 + 104))(v6, *MEMORY[0x263F8F130], v34);
  uint64_t v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  dispatch_suspend(v24);
  *(void *)&v15[v23] = v24;
  uint64_t v25 = v35;
  *(void *)&v15[OBJC_IVAR____TtC8PaperKit23ExtensionViewController____lazy_storage___multipeerConnection] = 0;
  *(void *)&v15[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindTask] = 0;
  *(void *)&v15[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults] = MEMORY[0x263F8EE78];
  unint64_t v26 = &v15[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_LinkAnalyticsEventName];
  *unint64_t v26 = 0xD000000000000027;
  v26[1] = 0x800000020C8504B0;

  if (v25)
  {
    uint64_t v27 = (void *)MEMORY[0x21054D080](v32, v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = 0;
  }
  uint64_t v28 = (objc_class *)type metadata accessor for ExtensionViewController();
  v37.receiver = v15;
  v37.super_class = v28;
  uint64_t v29 = v36;
  id v30 = objc_msgSendSuper2(&v37, sel_initWithNibName_bundle_, v27, v36);

  return v30;
}

id ExtensionViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id ExtensionViewController.init(coder:)(void *a1)
{
  id v30 = a1;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v28 = *(void *)(v2 - 8);
  uint64_t v29 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = type metadata accessor for PKInkingTool.InkType();
  double v8 = MEMORY[0x270FA5388](v7);
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger] = 0;
  v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_canvasContentMode] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperViewController] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController] = 0;
  v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_transparentBackground] = 0;
  double v10 = (uint64_t *)&v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_tool];
  (*(void (**)(char *, void, double))(v11 + 104))((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F14A48], v8);
  uint64_t v12 = self;
  uint64_t v13 = v1;
  id v14 = objc_msgSend(v12, sel_blackColor);
  uint64_t v15 = type metadata accessor for PKInkingTool();
  uint64_t v16 = MEMORY[0x263F14A50];
  v10[3] = v15;
  v10[4] = v16;
  __swift_allocate_boxed_opaque_existential_1(v10);
  PKInkingTool.init(_:color:width:)();
  *(void *)&v13[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalSpacing] = 0;
  *(void *)&v13[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperVerticalSpacing] = 0;
  *(void *)&v13[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalInset] = 0;
  uint64_t v17 = &v13[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_extensionHostSafeAreaInsets];
  long long v18 = *(_OWORD *)(MEMORY[0x263F834E8] + 16);
  _OWORD *v17 = *MEMORY[0x263F834E8];
  v17[1] = v18;
  uint64_t v19 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper;
  type metadata accessor for ExtensionViewController.ProxyWrapper();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = 0;
  *(void *)&v13[v19] = v20;
  v13[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueueSuspended] = 1;
  uint64_t v21 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v28 + 104))(v4, *MEMORY[0x263F8F130], v29);
  uint64_t v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  dispatch_suspend(v22);
  *(void *)&v13[v21] = v22;
  *(void *)&v13[OBJC_IVAR____TtC8PaperKit23ExtensionViewController____lazy_storage___multipeerConnection] = 0;
  *(void *)&v13[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindTask] = 0;
  *(void *)&v13[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults] = MEMORY[0x263F8EE78];
  uint64_t v23 = &v13[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_LinkAnalyticsEventName];
  *uint64_t v23 = 0xD000000000000027;
  v23[1] = 0x800000020C8504B0;

  uint64_t v24 = (objc_class *)type metadata accessor for ExtensionViewController();
  v31.receiver = v13;
  v31.super_class = v24;
  uint64_t v25 = v30;
  id v26 = objc_msgSendSuper2(&v31, sel_initWithCoder_, v30);

  return v26;
}

uint64_t protocol witness for EncryptionDelegate.decrypt(_:) in conformance ExtensionViewController(uint64_t a1, unint64_t a2)
{
  return ExtensionViewController.decrypt(_:)(a1, a2);
}

uint64_t protocol witness for CRMulticastLink.send(_:) in conformance ExtensionViewController(uint64_t a1, unint64_t a2)
{
  return ExtensionViewController.send(_:)(a1, a2);
}

uint64_t protocol witness for CRMulticastLink.send(_:) in conformance ExtensionViewController()
{
  return CRMulticastLink.send(_:)();
}

uint64_t closure #1 in ExtensionViewController.documentViewController(_:didFailToLoad:)(uint64_t result)
{
  double v1 = *(void **)(result + 16);
  if (v1)
  {
    swift_unknownObjectRetain();
    uint64_t v2 = (void *)_convertErrorToNSError(_:)();
    objc_msgSend(v1, sel_paperDidFailToLoad_, v2);

    return swift_unknownObjectRelease();
  }
  return result;
}

void partial apply for closure #1 in ScrollWheelEventSwizzler.enableScrollEventForwardingIfNecessary(_:)(char *a1)
{
  closure #1 in ScrollWheelEventSwizzler.enableScrollEventForwardingIfNecessary(_:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_20C3514A8()
{
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + 24), *(void *)(v0 + 32));
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in ExtensionViewController.send(_:)()
{
  return closure #1 in ExtensionViewController.send(_:)(*(void *)(v0 + 16));
}

uint64_t sub_20C3514F4()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C35152C()
{
  return objectdestroy_8Tm(40);
}

uint64_t partial apply for closure #1 in ExtensionViewController.revertAllChanges()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.revertAllChanges()(a1, v4, v5, v6);
}

uint64_t sub_20C3515E8()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v0 + 16), v1);
  }
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C351630()
{
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

void partial apply for closure #1 in ExtensionViewController.decrypt(_:)()
{
  closure #1 in ExtensionViewController.decrypt(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t sub_20C351690()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sIg_Ieg_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t lazy protocol witness table accessor for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError()
{
  unint64_t result = lazy protocol witness table cache variable for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError;
  if (!lazy protocol witness table cache variable for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError;
  if (!lazy protocol witness table cache variable for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError);
  }
  return result;
}

uint64_t type metadata accessor for ExtensionViewController.ProxyWrapper()
{
  return self;
}

uint64_t method lookup function for ExtensionViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ExtensionViewController);
}

uint64_t dispatch thunk of ExtensionViewController.accept(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x240))();
}

uint64_t dispatch thunk of ExtensionViewController.send(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x260))();
}

uint64_t dispatch thunk of ExtensionViewController.revertAllChanges()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of ExtensionViewController.encrypt(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x380))();
}

{
  void *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x388))();
}

uint64_t dispatch thunk of ExtensionViewController.decrypt(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x390))();
}

uint64_t type metadata accessor for ExtensionViewController.LiveStreamMessenger()
{
  return self;
}

uint64_t getEnumTagSinglePayload for ExtensionViewController.DecryptionError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for ExtensionViewController.DecryptionError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x20C3519E8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtensionViewController.DecryptionError()
{
  return &type metadata for ExtensionViewController.DecryptionError;
}

uint64_t associated type witness table accessor for PaperKitLiveStreamMessenger.Messages : AsyncSequence in ExtensionViewController.LiveStreamMessenger()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type AsyncStream<Data> and conformance AsyncStream<A>, &demangling cache variable for type metadata for AsyncStream<Data>);
}

uint64_t partial apply for closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter(uint64_t a1)
{
  return closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter(a1, v1);
}

uint64_t sub_20C351ABC()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Data>.Continuation)
                 - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter(a1, v5, v6, v7, v8);
}

uint64_t sub_20C351C94()
{
  swift_unknownObjectRelease();
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + 40), *(void *)(v0 + 48));
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in ExtensionViewController.LiveStreamMessenger.send(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.LiveStreamMessenger.send(_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in ExtensionViewController.receiveLiveStreamData(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.receiveLiveStreamData(_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_20C351E70()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in ExtensionViewController.searchScrollToVisible(_:)()
{
  closure #1 in ExtensionViewController.searchScrollToVisible(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_20C351EB0()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ExtensionViewController.setMathEnabled(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setMathEnabled(_:)(a1, v4, v5, v6, v7);
}

uint64_t sub_20C351FB4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in ExtensionViewController.setMathResult(_:expressionUUID:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setMathResult(_:expressionUUID:)(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in ExtensionViewController.setMathDocument(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setMathDocument(_:)(a1, v4, v5, v7, v6);
}

uint64_t sub_20C352264()
{
  swift_unknownObjectRelease();

  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ExtensionViewController.setTool(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setTool(_:)(a1, v4, v5, v7, v6);
}

uint64_t outlined init with copy of FindResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_20C3523D0()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in ExtensionViewController.loadBookmark(_:readOnly:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  char v10 = *((unsigned char *)v1 + v5 + *(void *)(v4 + 64));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.loadBookmark(_:readOnly:)(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_20C3525CC()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = ((v7 + v5) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v9 = v0 + v4;
  char v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);
  return MEMORY[0x270FA0238](v0, v8, v6);
}

uint64_t partial apply for closure #1 in ExtensionViewController.loadPaper(_:paperBookmark:coherenceContextBookmark:encrypted:userInterfaceState:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 56) & ~v4;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = (uint64_t)v1 + ((*(void *)(v3 + 64) + v4 + v5) & ~v4);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.loadPaper(_:paperBookmark:coherenceContextBookmark:encrypted:userInterfaceState:)(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_20C352840()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0 + v8, 1, v1)) {
    v10(v0 + v8, v1);
  }
  return MEMORY[0x270FA0238](v0, v9 + v8 + 1, v3 | v7 | 7);
}

uint64_t partial apply for closure #1 in ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = v1[7];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:)(a1, v5, v6, v7, v8, v9, v10, (uint64_t)v1 + v4);
}

uint64_t sub_20C352B7C()
{
  return 24;
}

__n128 sub_20C352B88(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t outlined destroy of Paper(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Paper();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20C352BF8()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in ExtensionViewController.reportPaperBounds(_:)()
{
  return closure #1 in ExtensionViewController.reportPaperBounds(_:)(*(void *)(v0 + 16), *(CGFloat *)(v0 + 24), *(CGFloat *)(v0 + 32), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48));
}

uint64_t sub_20C352C40()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in ExtensionViewController.openLink(_:)()
{
  type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 + 16);
  return closure #1 in ExtensionViewController.openLink(_:)(v1);
}

uint64_t objectdestroy_147Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ExtensionViewController.newMultipeerConnection(model:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in ExtensionViewController.newMultipeerConnection(model:)(a1, v4, v5, v7, v6);
}

uint64_t specialized ExtensionViewController.documentViewController(_:didFailToLoad:)(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue);
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = a1;
  aBlock[4] = partial apply for closure #1 in ExtensionViewController.documentViewController(_:didFailToLoad:);
  void aBlock[5] = v12;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_258;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  id v14 = a1;
  static DispatchQoS.unspecified.getter();
  v16[1] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x21054DA10](0, v10, v6, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t specialized ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(uint64_t a1, uint64_t a2, char a3, char a4, char *a5, void (**a6)(void, void))
{
  uint64_t v57 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a6;
  _Block_copy(a6);
  if (one-time initialization token for extensionLogger != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  v56[1] = __swift_project_value_buffer(v15, (uint64_t)extensionLogger);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    long long v18 = a5;
    uint64_t v19 = a6;
    uint64_t v20 = v14;
    uint64_t v21 = v13;
    uint64_t v22 = a2;
    char v23 = a3;
    char v24 = a4;
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&dword_20C2D7000, v16, v17, "search(for:ignoreCase:wholeWords:reply:)", v25, 2u);
    id v26 = v25;
    a4 = v24;
    a3 = v23;
    a2 = v22;
    uint64_t v13 = v21;
    uint64_t v14 = v20;
    a6 = v19;
    a5 = v18;
    MEMORY[0x210550270](v26, -1, -1);
  }

  *(void *)&a5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)&a5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController];
  if (v27)
  {
    uint64_t v28 = *(void *)(v27 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
    if (v28)
    {
      uint64_t v29 = (void **)(v28 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
      swift_beginAccess();
      id v30 = *v29;
      if (v30)
      {
        uint64_t v31 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v13, 1, 1, v31);
        type metadata accessor for MainActor();
        id v32 = v30;
        swift_bridgeObjectRetain();
        uint64_t v33 = a5;
        uint64_t v34 = (uint64_t)v13;
        uint64_t v35 = a2;
        char v36 = a3;
        char v37 = a4;
        uint64_t v38 = v33;
        swift_retain();
        id v39 = v32;
        uint64_t v40 = static MainActor.shared.getter();
        uint64_t v41 = swift_allocObject();
        uint64_t v42 = MEMORY[0x263F8F500];
        *(void *)(v41 + 16) = v40;
        *(void *)(v41 + 24) = v42;
        uint64_t v43 = v57;
        *(void *)(v41 + 32) = v39;
        *(void *)(v41 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v43;
        *(void *)(v41 + 48) = v35;
        *(unsigned char *)(v41 + 56) = v36 & 1;
        *(unsigned char *)(v41 + 57) = v37 & 1;
        *(void *)(v41 + 64) = v38;
        *(void *)(v41 + 72) = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Int) -> ();
        *(void *)(v41 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v14;
        *(void *)&v38[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindTask] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v34, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:), v41);

LABEL_11:
        swift_release();
        return swift_release();
      }
    }
  }
  uint64_t v44 = *(void **)&a5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView];
  if (v44)
  {
    uint64_t v45 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v13, 1, 1, v45);
    type metadata accessor for MainActor();
    id v46 = v44;
    swift_bridgeObjectRetain();
    uint64_t v47 = a5;
    swift_retain();
    uint64_t v48 = static MainActor.shared.getter();
    uint64_t v49 = swift_allocObject();
    uint64_t v50 = MEMORY[0x263F8F500];
    *(void *)(v49 + 16) = v48;
    *(void *)(v49 + 24) = v50;
    uint64_t v51 = v57;
    *(void *)(v49 + 32) = v46;
    *(void *)(v49 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v51;
    *(void *)(v49 + 48) = a2;
    *(unsigned char *)(v49 + 56) = a3 & 1;
    *(unsigned char *)(v49 + 57) = a4 & 1;
    *(void *)(v49 + 64) = v47;
    *(void *)(v49 + 72) = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Int) -> ();
    *(void *)(v49 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v14;
    *(void *)&v47[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindTask] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:), v49);

    goto LABEL_11;
  }
  int v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl(&dword_20C2D7000, v52, v53, "Unable to search without an inline paper document view.", v54, 2u);
    MEMORY[0x210550270](v54, -1, -1);
  }

  a6[2](a6, 0);
  return swift_release();
}

id _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6CGRectVG_AGs5NeverOTg5082_s8PaperKit23ExtensionViewControllerC11searchFrame3for5replyySi_ySo7NSArrayCctFSo6D8VAJXEfU_0G3Kit0ijK0CSo6UIViewCTf1cn_nTf4ngg_n(uint64_t a1, void *a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (!v3) {
    return (id)v4;
  }
  uint64_t v26 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t v4 = v26;
  for (uint64_t i = (double *)(a1 + 56); ; i += 4)
  {
    double v9 = *(i - 3);
    double v10 = *(i - 2);
    double v11 = *(i - 1);
    double v12 = *i;
    id result = objc_msgSend(a2, sel_view);
    if (!result) {
      break;
    }
    uint64_t v14 = result;
    objc_msgSend(result, sel_convertRect_fromCoordinateSpace_, a3, v9, v10, v11, v12);
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v22 = v21;

    unint64_t v24 = *(void *)(v26 + 16);
    unint64_t v23 = *(void *)(v26 + 24);
    if (v24 >= v23 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
    }
    *(void *)(v26 + 16) = v24 + 1;
    uint64_t v25 = (void *)(v26 + 32 * v24);
    v25[4] = v16;
    v25[5] = v18;
    v25[6] = v20;
    v25[7] = v22;
    if (!--v3) {
      return (id)v4;
    }
  }
  __break(1u);
  return result;
}

void specialized ExtensionViewController.searchFrame(for:reply:)(uint64_t a1, void *a2, uint64_t a3)
{
  if (one-time initialization token for extensionLogger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)extensionLogger);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    double v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v9 = 0;
    _os_log_impl(&dword_20C2D7000, v7, v8, "searchFrame(for:reply:)", v9, 2u);
    MEMORY[0x210550270](v9, -1, -1);
  }

  ExtensionViewController.searchResultAndDocumentView(for:)(a1, (uint64_t)&v40);
  double v10 = v40;
  if (v40)
  {
    uint64_t v12 = v44;
    double v11 = v45;
    uint64_t v14 = v42;
    uint64_t v13 = v43;
    uint64_t v15 = v41;
    char v16 = v46 & 1;
    uint64_t v40 = (char *)v41;
    uint64_t v41 = (void *)v42;
    uint64_t v42 = v43;
    uint64_t v43 = v44;
    uint64_t v44 = (uint64_t)v45;
    LOBYTE(v45) = v46 & 1;
    uint64_t v17 = PaperDocumentFindResult.frames(in:)(v10);
    outlined consume of PaperDocumentFindResult.Content(v15, v14, v13, v12, v11, v16);
LABEL_9:
    id v22 = a2;
    unint64_t v23 = v10;
    unint64_t v24 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6CGRectVG_AGs5NeverOTg5082_s8PaperKit23ExtensionViewControllerC11searchFrame3for5replyySi_ySo7NSArrayCctFSo6D8VAJXEfU_0G3Kit0ijK0CSo6UIViewCTf1cn_nTf4ngg_n((uint64_t)v17, v22, (uint64_t)v23);
    swift_bridgeObjectRelease();

    uint64_t v25 = *((void *)v24 + 2);
    if (v25)
    {
      uint64_t v38 = a3;
      uint64_t v40 = (char *)MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSArray);
      uint64_t v26 = (CGFloat *)(v24 + 56);
      uint64_t v27 = MEMORY[0x263F8EF38];
      do
      {
        CGFloat v28 = *(v26 - 3);
        CGFloat v29 = *(v26 - 2);
        CGFloat v30 = *(v26 - 1);
        CGFloat v31 = *v26;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        uint64_t v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = xmmword_20C8352C0;
        v48.origin.CGFloat x = v28;
        v48.origin.CGFloat y = v29;
        v48.size.CGFloat width = v30;
        v48.size.CGFloat height = v31;
        CGFloat MinX = CGRectGetMinX(v48);
        *(void *)(v32 + 56) = v27;
        *(CGFloat *)(v32 + 32) = MinX;
        v49.origin.CGFloat x = v28;
        v49.origin.CGFloat y = v29;
        v49.size.CGFloat width = v30;
        v49.size.CGFloat height = v31;
        CGFloat MinY = CGRectGetMinY(v49);
        *(void *)(v32 + 88) = v27;
        *(CGFloat *)(v32 + 64) = MinY;
        v50.origin.CGFloat x = v28;
        v50.origin.CGFloat y = v29;
        v50.size.CGFloat width = v30;
        v50.size.CGFloat height = v31;
        CGFloat Width = CGRectGetWidth(v50);
        *(void *)(v32 + 12AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v27;
        *(CGFloat *)(v32 + 96) = Width;
        v51.origin.CGFloat x = v28;
        v51.origin.CGFloat y = v29;
        v51.size.CGFloat width = v30;
        v51.size.CGFloat height = v31;
        CGFloat Height = CGRectGetHeight(v51);
        *(void *)(v32 + 152) = v27;
        *(CGFloat *)(v32 + 128) = Height;
        MEMORY[0x21054DC00](v32);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v26 += 4;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease();
      a3 = v38;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSArray);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

    return;
  }
  uint64_t v18 = ExtensionViewController.searchResultAndCanvasView(for:)(a1);
  if (v18)
  {
    double v10 = (char *)v18;
    uint64_t v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    uint64_t v17 = (_OWORD *)swift_allocObject();
    v17[1] = xmmword_20C832C20;
    long long v21 = *(_OWORD *)(v20 + 40);
    _OWORD v17[2] = *(_OWORD *)(v20 + 24);
    v17[3] = v21;
    swift_release();
    goto LABEL_9;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSArray);
  id v39 = (void *)MEMORY[0x21054DBE0](MEMORY[0x263F8EE78]);
  (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v39);
}

void specialized ExtensionViewController.searchDrawImage(for:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for extensionLogger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)extensionLogger);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v8 = 0;
    _os_log_impl(&dword_20C2D7000, v6, v7, "searchDrawImage(for:reply:)", v8, 2u);
    MEMORY[0x210550270](v8, -1, -1);
  }

  ExtensionViewController.searchResultAndDocumentView(for:)(a1, (uint64_t)&v36);
  double v9 = v36;
  if (v36)
  {
    uint64_t v11 = v40;
    double v10 = v41;
    uint64_t v13 = v38;
    uint64_t v12 = v39;
    uint64_t v14 = v37;
    char v15 = v42 & 1;
    char v36 = v37;
    char v37 = (void *)v38;
    uint64_t v38 = v39;
    uint64_t v39 = v40;
    uint64_t v40 = (uint64_t)v41;
    LOBYTE(v41) = v42 & 1;
    PaperDocumentFindResult.draw(for:)((uint64_t)v9);
    id v34 = v16;

    outlined consume of PaperDocumentFindResult.Content(v14, v13, v12, v11, v10, v15);
    uint64_t v17 = v34;
    if (!v34) {
      goto LABEL_15;
    }
LABEL_10:
    id v22 = v17;
    unint64_t v23 = (UIImage *)objc_msgSend(v22, sel_imageWithRenderingMode_, 1);
    unint64_t v24 = UIImagePNGRepresentation(v23);

    if (v24)
    {
      uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;

      outlined copy of Data._Representation(v25, v27);
      objc_msgSend(v22, sel_size);
      double v29 = v28;
      objc_msgSend(v22, sel_size);
      double v31 = v30;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, Class, double, double))(a3 + 16))(a3, isa, v29, v31);

      outlined consume of Data._Representation(v25, v27);
      outlined consume of Data._Representation(v25, v27);
      return;
    }

    uint64_t v17 = v34;
LABEL_15:
    id v35 = v17;
    (*(void (**)(uint64_t, void, double, double))(a3 + 16))(a3, 0, 0.0, 0.0);

    return;
  }
  uint64_t v18 = ExtensionViewController.searchResultAndCanvasView(for:)(a1);
  if (v18)
  {
    long long v21 = (void *)v18;
    id v34 = (id)DrawingFindResult.draw(for:)(v18);

    swift_release();
    uint64_t v17 = v34;
    if (!v34) {
      goto LABEL_15;
    }
    goto LABEL_10;
  }
  uint64_t v33 = *(void (**)(uint64_t, void, __n128, __n128))(a3 + 16);
  v19.n128_u64[0] = 0;
  v20.n128_u64[0] = 0;
  v33(a3, 0, v19, v20);
}

uint64_t sub_20C353F14()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Int) -> ()(uint64_t a1)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned Int) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  char v9 = *(unsigned char *)(v1 + 56);
  char v10 = *(unsigned char *)(v1 + 57);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t objectdestroy_193Tm()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t partial apply for closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  char v9 = *(unsigned char *)(v1 + 56);
  char v10 = *(unsigned char *)(v1 + 57);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_20C3541BC()
{
  return objectdestroy_8Tm(40);
}

uint64_t sub_20C3541C4()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #1 in ExtensionViewController.reportSafeAreaInsets(top:left:bottom:right:)(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  double v6 = v1[4];
  double v7 = v1[5];
  double v8 = v1[6];
  double v9 = v1[7];
  uint64_t v10 = *((void *)v1 + 8);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.reportSafeAreaInsets(top:left:bottom:right:)(v6, v7, v8, v9, a1, v4, v5, v10);
}

uint64_t sub_20C3542E0()
{
  return objectdestroy_8Tm(41);
}

uint64_t partial apply for closure #1 in ExtensionViewController.setPaperDocumentInlineThumbnailsVisible(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  double v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *double v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in ExtensionViewController.setPaperDocumentInlineThumbnailsVisible(_:)(a1, v4, v5, v6, v7);
}

uint64_t sub_20C3543AC()
{
  return objectdestroy_8Tm(48);
}

uint64_t partial apply for closure #1 in ExtensionViewController.setUserInterfaceStyle(userInterfaceStyle:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  double v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *double v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setUserInterfaceStyle(userInterfaceStyle:)(a1, v4, v5, v7, v6);
}

uint64_t sub_20C354474()
{
  return objectdestroy_8Tm(48);
}

uint64_t partial apply for closure #1 in ExtensionViewController.setCanvasContentMode(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  double v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *double v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setCanvasContentMode(_:)(a1, v4, v5, v7, v6);
}

uint64_t sub_20C35453C()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ExtensionViewController.setHasLiveStreamMessenger(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  double v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *double v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setHasLiveStreamMessenger(_:)(a1, v4, v5, v6, v7);
}

uint64_t sub_20C354640()
{
  return objectdestroy_8Tm(64);
}

uint64_t objectdestroy_8Tm(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v1, a1, 7);
}

uint64_t partial apply for closure #1 in ExtensionViewController.setLinedPaper(horizontalLineSpacing:verticalLineSpacing:horizontalInset:)(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  uint64_t v6 = *((void *)v1 + 4);
  double v7 = v1[5];
  double v8 = v1[6];
  double v9 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setLinedPaper(horizontalLineSpacing:verticalLineSpacing:horizontalInset:)(v7, v8, v9, a1, v4, v5, v6);
}

uint64_t sub_20C35476C()
{
  swift_unknownObjectRelease();

  outlined consume of Data._Representation(*(void *)(v0 + 48), *(void *)(v0 + 56));
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #1 in ExtensionViewController.setupWithData(_:transparentBackground:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setupWithData(_:transparentBackground:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t objectdestroy_123Tm()
{
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in ExtensionViewController.receiveMulticastData(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.receiveMulticastData(_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t specialized ExtensionViewController.documentViewControllerDidSave(_:)()
{
  return specialized ExtensionViewController.documentViewControllerDidSave(_:)((uint64_t)partial apply for closure #1 in ExtensionViewController.documentViewControllerDidSave(_:), (uint64_t)&block_descriptor_261);
}

uint64_t specialized ExtensionViewController.documentViewControllerDidScroll(_:)()
{
  return specialized ExtensionViewController.documentViewControllerDidSave(_:)((uint64_t)partial apply for closure #1 in ExtensionViewController.documentViewControllerDidScroll(_:), (uint64_t)&block_descriptor_252);
}

uint64_t specialized ExtensionViewController.documentViewControllerDidSave(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue);
  uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper);
  aBlock[4] = a1;
  void aBlock[5] = v13;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a2;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v16[1] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x21054DA10](0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

id partial apply for closure #1 in ExtensionViewController.documentViewControllerDidScroll(_:)()
{
  id result = *(id *)(v0 + 16);
  if (result) {
    return objc_msgSend(result, sel_reportPaperScroll);
  }
  return result;
}

uint64_t sub_20C354CBC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in ExtensionViewController.documentViewController(_:didFailToLoad:)()
{
  return closure #1 in ExtensionViewController.documentViewController(_:didFailToLoad:)(*(void *)(v0 + 16));
}

id partial apply for closure #1 in ExtensionViewController.documentViewControllerDidSave(_:)()
{
  id result = *(id *)(v0 + 16);
  if (result) {
    return objc_msgSend(result, sel_paperDidSave);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20C354D64()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

Swift::Int partial apply for closure #1 in closure #1 in ExtensionViewController.decrypt(_:)(uint64_t a1, unint64_t a2)
{
  return closure #1 in closure #1 in ExtensionViewController.decrypt(_:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t destroy for GraphableExpressionsView()
{
  swift_release();
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for GraphableExpressionsView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for GraphableExpressionsView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for GraphableExpressionsView(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphableExpressionsView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphableExpressionsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphableExpressionsView()
{
  return &type metadata for GraphableExpressionsView;
}

uint64_t associated type witness table accessor for View.Body : View in GraphableExpressionsView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t key path getter for GraphableExpressionState.graphableVariables : GraphableExpressionState@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariables);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for GraphableExpressionState.graphableVariables : GraphableExpressionState()
{
  return swift_bridgeObjectRelease();
}

uint64_t specialized Collection.count.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Collection.count.getter(a1, a2, a3, &demangling cache variable for type metadata for Binding<[String]>, &lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
}

uint64_t specialized Collection.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t *a6)
{
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(a5, a6);
  Binding<A>.startIndex.getter();
  Binding<A>.endIndex.getter();
  return 0;
}

uint64_t closure #1 in GraphableExpressionsView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = static HorizontalAlignment.leading.getter();
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(Spacer, ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, GraphableVariablesView?, Divider?)>>, Spacer)>>);
  return closure #1 in closure #1 in GraphableExpressionsView.body.getter(a1, a2, (void *)(a3 + *(int *)(v6 + 44)));
}

uint64_t closure #1 in closure #1 in GraphableExpressionsView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  double v30 = a3;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, GraphableVariablesView?, Divider?)>>);
  uint64_t v5 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  double v29 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  double v28 = (char *)&v26 - v8;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<GraphableExpressionsState>);
  State.projectedValue.getter();
  uint64_t v10 = v35;
  uint64_t v9 = v36;
  uint64_t v11 = v37;
  swift_getKeyPath();
  uint64_t v32 = v10;
  uint64_t v33 = v9;
  uint64_t v34 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionsState>);
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v27 = specialized Collection.count.getter(v35, v36, v37, &demangling cache variable for type metadata for Binding<[GraphableExpressionState]>, &lazy protocol witness table cache variable for type [GraphableExpressionState] and conformance [A], &demangling cache variable for type metadata for [GraphableExpressionState]);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  State.projectedValue.getter();
  uint64_t v12 = v35;
  uint64_t v13 = v36;
  uint64_t v14 = v37;
  swift_getKeyPath();
  uint64_t v32 = v12;
  uint64_t v33 = v13;
  uint64_t v34 = v14;
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v15 = specialized Collection.count.getter(v35, v36, v37, &demangling cache variable for type metadata for Binding<[GraphableExpressionState]>, &lazy protocol witness table cache variable for type [GraphableExpressionState] and conformance [A], &demangling cache variable for type metadata for [GraphableExpressionState]);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  if (v15 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v36 = v15;
    swift_getKeyPath();
    uint64_t v17 = (void *)swift_allocObject();
    _OWORD v17[2] = a1;
    v17[3] = a2;
    v17[4] = v27;
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Range<Int>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, GraphableVariablesView?, Divider?)>);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, GraphableVariablesView?, Divider?)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, GraphableVariablesView?, Divider?)>);
    uint64_t v18 = v28;
    ForEach<>.init(_:id:content:)();
    __n128 v19 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    __n128 v20 = v29;
    uint64_t v21 = v31;
    v19(v29, v18, v31);
    id v22 = v30;
    void *v30 = 0;
    *((unsigned char *)v22 + 8) = 1;
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Spacer, ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, GraphableVariablesView?, Divider?)>>, Spacer));
    v19((char *)v22 + *(int *)(v23 + 48), v20, v21);
    unint64_t v24 = (char *)v22 + *(int *)(v23 + 64);
    *(void *)unint64_t v24 = 0;
    v24[8] = 1;
    uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v25(v18, v21);
    return ((uint64_t (*)(char *, uint64_t))v25)(v20, v21);
  }
  return result;
}

uint64_t key path getter for GraphableExpressionsState.expressionStates : GraphableExpressionsState@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for GraphableExpressionsState.expressionStates : GraphableExpressionsState()
{
  return swift_bridgeObjectRelease();
}

void closure #1 in closure #1 in closure #1 in GraphableExpressionsView.body.getter(unint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v80 = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Divider?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v73 - v13;
  uint64_t v15 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v85 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v84 = *(void *)(v85 - 8);
  MEMORY[0x270FA5388](v85);
  uint64_t v83 = (char *)v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for GraphableExpressionView();
  MEMORY[0x270FA5388](v82);
  uint64_t v18 = (char *)v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<GraphableExpressionView, _PaddingLayout>);
  MEMORY[0x270FA5388](v86);
  __n128 v20 = (char *)v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.accessibilityElement(children:)>>.0);
  uint64_t v78 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  uint64_t v87 = (char *)v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v88 = (char *)v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  unint64_t v91 = a3;
  uint64_t v92 = (uint64_t)v73 - v25;
  unint64_t v26 = *a1;
  unint64_t v90 = a2;
  unint64_t v99 = a2;
  unint64_t v100 = a3;
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<GraphableExpressionsState>);
  State.wrappedValue.getter();
  unint64_t v27 = v97;
  uint64_t KeyPath = swift_getKeyPath();
  unint64_t v99 = v27;
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v29 = *(void *)(v27 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  id v77 = v11;
  uint64_t v76 = a5;
  uint64_t v81 = v14;
  if ((v29 & 0xC000000000000001) != 0)
  {
    uint64_t v30 = MEMORY[0x21054E050](v26, v29);
LABEL_5:
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    unint64_t v99 = v30;
    lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v31 = *(void *)(v30 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariables);
    swift_bridgeObjectRetain();
    swift_release();
    unint64_t v32 = *(void *)(v31 + 16);
    swift_bridgeObjectRelease();
    unint64_t v74 = v32;
    unint64_t v97 = v90;
    *(void *)&long long v98 = v91;
    State.projectedValue.getter();
    unint64_t v33 = v99;
    unint64_t v34 = v100;
    uint64_t v35 = v101;
    swift_getKeyPath();
    unint64_t v97 = v33;
    *(void *)&long long v98 = v34;
    *((void *)&v98 + 1) = v35;
    v73[2] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionsState>);
    Binding.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    unint64_t v94 = v99;
    unint64_t v95 = v100;
    uint64_t v96 = v101;
    unint64_t v93 = v26;
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<[GraphableExpressionState]>);
    uint64_t v37 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [GraphableExpressionState] and conformance [A], &demangling cache variable for type metadata for [GraphableExpressionState]);
    v73[1] = v36;
    v73[0] = v37;
    Binding<A>.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v38 = v97;
    long long v75 = v98;
    *(void *)&v18[*(int *)(v82 + 24)] = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    swift_storeEnumTagMultiPayload();
    *(void *)uint64_t v18 = v38;
    *(_OWORD *)(v18 + 8) = v75;
    LOBYTE(v93) = v32 < 2;
    State.init(wrappedValue:)();
    unint64_t v39 = v95;
    char v18[24] = v94;
    *((void *)v18 + 4) = v39;
    LOBYTE(v31) = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    outlined init with copy of GraphableExpressionView((uint64_t)v18, (uint64_t)v20);
    uint64_t KeyPath = v86;
    CGRect v48 = &v20[*(int *)(v86 + 36)];
    *CGRect v48 = v31;
    *((void *)v48 + 1) = v41;
    *((void *)v48 + 2) = v43;
    *((void *)v48 + 3) = v45;
    *((void *)v48 + 4) = v47;
    v48[40] = 0;
    outlined destroy of GraphableExpressionView((uint64_t)v18);
    CGRect v49 = v83;
    static AccessibilityChildBehavior.contain.getter();
    unint64_t v27 = lazy protocol witness table accessor for type ModifiedContent<GraphableExpressionView, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    a5 = (uint64_t)v87;
    View.accessibilityElement(children:)();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v49, v85);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for ModifiedContent<GraphableExpressionView, _PaddingLayout>);
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v50._uint64_t countAndFlagsBits = 0;
    v50._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v50);
    if (one-time initialization token for paperKitBundle == -1) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
  if ((v26 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v26 < *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v30 = *(void *)(v29 + 8 * v26 + 32);
    swift_retain();
    goto LABEL_5;
  }
  __break(1u);
LABEL_17:
  swift_once();
LABEL_6:
  v102._object = (void *)0x800000020C850A70;
  v51._uint64_t countAndFlagsBits = 0x6E6F697461757145;
  v51._object = (void *)0xE800000000000000;
  v52.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v52.value._object = (void *)0xEB00000000656C62;
  v53._uint64_t countAndFlagsBits = 0;
  v53._object = (void *)0xE000000000000000;
  v102._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  Swift::String v54 = NSLocalizedString(_:tableName:bundle:value:comment:)(v51, v52, paperKitBundle, v53, v102);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v54);
  swift_bridgeObjectRelease();
  v55._uint64_t countAndFlagsBits = 32;
  v55._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v55);
  uint64_t v56 = (uint64_t)v88;
  if (__OFADD__(v26, 1))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return;
  }
  unint64_t v99 = v26 + 1;
  LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
  v57._uint64_t countAndFlagsBits = 0;
  v57._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v57);
  LocalizedStringKey.init(stringInterpolation:)();
  unint64_t v99 = KeyPath;
  unint64_t v100 = v27;
  swift_getOpaqueTypeConformance2();
  uint64_t v58 = v79;
  View.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(a5, v58);
  outlined init with take of ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>(v56, v92);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  if (v74 >= 2)
  {
    unint64_t v97 = v90;
    *(void *)&long long v98 = v91;
    State.projectedValue.getter();
    unint64_t v62 = v99;
    unint64_t v63 = v100;
    uint64_t v64 = v101;
    swift_getKeyPath();
    unint64_t v97 = v62;
    *(void *)&long long v98 = v63;
    *((void *)&v98 + 1) = v64;
    Binding.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    unint64_t v94 = v99;
    unint64_t v95 = v100;
    uint64_t v96 = v101;
    unint64_t v93 = v26;
    Binding<A>.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v59 = v97;
    uint64_t v61 = *((void *)&v98 + 1);
    uint64_t v60 = v98;
  }
  uint64_t v65 = (uint64_t)v81;
  if (__OFSUB__(v80, 1)) {
    goto LABEL_19;
  }
  if (v26 == v80 - 1)
  {
    uint64_t v66 = type metadata accessor for Divider();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v65, 1, 1, v66);
  }
  else
  {
    Divider.init()();
    uint64_t v67 = type metadata accessor for Divider();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v65, 0, 1, v67);
  }
  uint64_t v68 = v92;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v92, v56, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
  uint64_t v69 = (uint64_t)v77;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v65, (uint64_t)v77, &demangling cache variable for type metadata for Divider?);
  uint64_t v70 = v76;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v56, v76, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, GraphableVariablesView?, Divider?));
  id v72 = (uint64_t *)(v70 + *(int *)(v71 + 48));
  *id v72 = v59;
  v72[1] = v60;
  v72[2] = v61;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v69, v70 + *(int *)(v71 + 64), &demangling cache variable for type metadata for Divider?);
  outlined copy of GraphableVariablesView?(v59, v60);
  outlined destroy of StocksKitCurrencyCache.Provider?(v65, &demangling cache variable for type metadata for Divider?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v68, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v69, &demangling cache variable for type metadata for Divider?);
  outlined consume of GraphableVariablesView?(v59, v60);
  outlined destroy of StocksKitCurrencyCache.Provider?(v56, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
}

uint64_t protocol witness for View.body.getter in conformance GraphableExpressionsView()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(Spacer, ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, GraphableVariablesView?, Divider?)>>, Spacer)>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type VStack<TupleView<(Spacer, ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, GraphableVariablesView?, Divider?)>>, Spacer)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(Spacer, ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, GraphableVariablesView?, Divider?)>>, Spacer)>>);
  return ScrollView.init(_:showsIndicators:content:)();
}

uint64_t partial apply for closure #1 in GraphableExpressionsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in GraphableExpressionsView.body.getter(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_20C356488()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in GraphableExpressionsView.body.getter(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  closure #1 in closure #1 in closure #1 in GraphableExpressionsView.body.getter(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t outlined init with copy of GraphableExpressionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GraphableExpressionView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of GraphableExpressionView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GraphableExpressionView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GraphableExpressionView, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<GraphableExpressionView, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GraphableExpressionView, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<GraphableExpressionView, _PaddingLayout>);
    lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpressionView and conformance GraphableExpressionView, (void (*)(uint64_t))type metadata accessor for GraphableExpressionView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GraphableExpressionView, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of GraphableVariablesView?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of GraphableVariablesView?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t _s8PaperKit24GraphableExpressionStateC18graphableVariablesSaySSGvsyyXEfU_TA_0()
{
  return closure #1 in GraphableExpressionState.graphableVariables.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in GraphableExpressionsState.expressionStates.setter()
{
  return closure #1 in GraphableExpressionsState.expressionStates.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_20C3567CC()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type ScrollView<VStack<TupleView<(Spacer, ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, GraphableVariablesView?, Divider?)>>, Spacer)>>> and conformance ScrollView<A>, &demangling cache variable for type metadata for ScrollView<VStack<TupleView<(Spacer, ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, GraphableVariablesView?, Divider?)>>, Spacer)>>>);
}

void closure #1 in StickerDragPreviewContainerView._animateLift(alongside:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = self;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v16 = partial apply for closure #1 in closure #1 in StickerDragPreviewContainerView._animateLift(alongside:completion:);
  uint64_t v17 = v7;
  uint64_t v12 = MEMORY[0x263EF8330];
  uint64_t v13 = 1107296256;
  uint64_t v14 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t v15 = &block_descriptor_70;
  uint64_t v8 = _Block_copy(&v12);
  id v9 = a1;
  swift_release();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  uint64_t v16 = (void (*)())partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
  uint64_t v17 = v10;
  uint64_t v12 = MEMORY[0x263EF8330];
  uint64_t v13 = 1107296256;
  uint64_t v14 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v15 = &block_descriptor_76;
  uint64_t v11 = _Block_copy(&v12);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_, 0, v8, v11, 3.0, 0.0, 0.95, 0.0);
  _Block_release(v11);
  _Block_release(v8);
}

void closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = self;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v16 = partial apply for closure #1 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
  uint64_t v17 = v7;
  uint64_t v12 = MEMORY[0x263EF8330];
  uint64_t v13 = 1107296256;
  uint64_t v14 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t v15 = &block_descriptor_48;
  uint64_t v8 = _Block_copy(&v12);
  id v9 = a1;
  swift_release();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  uint64_t v16 = partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
  uint64_t v17 = v10;
  uint64_t v12 = MEMORY[0x263EF8330];
  uint64_t v13 = 1107296256;
  uint64_t v14 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v15 = &block_descriptor_54;
  uint64_t v11 = _Block_copy(&v12);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_, 0, v8, v11, 2.0, 0.0, 0.95, 0.0);
  _Block_release(v11);
  _Block_release(v8);
}

Swift::Void __swiftcall StickerDragPreviewContainerView.peelAnimation()()
{
  v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_isLifted] = 1;
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shadowView];
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v2, sel_center);
    double v4 = v3;
    objc_msgSend(v2, sel_center);
    objc_msgSend(v2, sel_setCenter_, v4, v5 + 23.0);
    objc_msgSend(v2, sel_setAlpha_, 0.23);
    CGAffineTransformMakeScale(&v53, 1.2, 1.2);
    objc_msgSend(v2, sel_setTransform_, &v53);
  }
  uint64_t v6 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_meshView];
  if (v6)
  {
    id v7 = v6;
    objc_msgSend(v7, sel_center);
    double v9 = v8;
    objc_msgSend(v7, sel_center);
    double v11 = v10;
    objc_msgSend(v0, sel_bounds);
    CGFloat v13 = v12;
    CGFloat v15 = v14;
    CGFloat v17 = v16;
    CGFloat v19 = v18;
    CGAffineTransformMakeScale(&v53, 1.2, 1.2);
    CGAffineTransformInvert(&v52, &v53);
    CGAffineTransform v53 = v52;
    v54.origin.CGFloat x = v13;
    v54.origin.CGFloat y = v15;
    v54.size.CGFloat width = v17;
    v54.size.CGFloat height = v19;
    CGRect v55 = CGRectApplyAffineTransform(v54, &v53);
    CGFloat Height = CGRectGetHeight(v55);
    objc_msgSend(v7, sel_setCenter_, v9, v11 + Height * 1.1 + Height * 1.1);
  }
  uint64_t v21 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_transformView];
  if (v21)
  {
    id v22 = v21;
    objc_msgSend(v22, sel_center);
    double v24 = v23;
    objc_msgSend(v22, sel_center);
    double v26 = v25;
    objc_msgSend(v0, sel_bounds);
    CGFloat v28 = v27;
    CGFloat v30 = v29;
    CGFloat v32 = v31;
    CGFloat v34 = v33;
    CGAffineTransformMakeScale(&v53, 1.2, 1.2);
    CGAffineTransformInvert(&v52, &v53);
    CGAffineTransform v53 = v52;
    v56.origin.CGFloat x = v28;
    v56.origin.CGFloat y = v30;
    v56.size.CGFloat width = v32;
    v56.size.CGFloat height = v34;
    CGRect v57 = CGRectApplyAffineTransform(v56, &v53);
    CGFloat v35 = CGRectGetHeight(v57);
    objc_msgSend(v22, sel_setCenter_, v24, v26 + v35 * -1.1 + v35 * -1.1);
  }
  uint64_t v36 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shineView];
  if (v36)
  {
    id v37 = v36;
    objc_msgSend(v37, sel_frame);
    double v39 = v38;
    double v41 = v40;
    double v43 = v42;
    objc_msgSend(v0, sel_bounds);
    CGFloat v45 = v44;
    CGFloat v47 = v46;
    CGFloat v49 = v48;
    CGFloat v51 = v50;
    CGAffineTransformMakeScale(&v53, 1.2, 1.2);
    CGAffineTransformInvert(&v52, &v53);
    CGAffineTransform v53 = v52;
    v58.origin.CGFloat x = v45;
    v58.origin.CGFloat y = v47;
    v58.size.CGFloat width = v49;
    v58.size.CGFloat height = v51;
    CGRect v59 = CGRectApplyAffineTransform(v58, &v53);
    objc_msgSend(v37, sel_setFrame_, v39, CGRectGetHeight(v59) * 1.1, v41, v43);
  }
}

Swift::Void __swiftcall StickerDragPreviewContainerView.stickAnimation()()
{
  v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_isLifted] = 0;
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shadowView];
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v2, sel_center);
    double v4 = v3;
    objc_msgSend(v2, sel_center);
    objc_msgSend(v2, sel_setCenter_, v4, v5 + -23.0);
    objc_msgSend(v2, sel_setAlpha_, 0.0);
    v39.CGFloat a = 1.0;
    v39.CGFloat b = 0.0;
    v39.CGFloat c = 0.0;
    v39.CGFloat d = 1.0;
    v39.tCGFloat x = 0.0;
    v39.tCGFloat y = 0.0;
    objc_msgSend(v2, sel_setTransform_, &v39);
  }
  uint64_t v6 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_meshView];
  if (v6)
  {
    id v7 = v6;
    objc_msgSend(v7, sel_center);
    double v9 = v8;
    objc_msgSend(v7, sel_center);
    double v11 = v10;
    objc_msgSend(v0, sel_bounds);
    CGFloat v13 = v12;
    CGFloat v15 = v14;
    CGFloat v17 = v16;
    CGFloat v19 = v18;
    CGAffineTransformMakeScale(&v39, 1.2, 1.2);
    CGAffineTransformInvert(&v38, &v39);
    CGAffineTransform v39 = v38;
    v40.origin.CGFloat x = v13;
    v40.origin.CGFloat y = v15;
    v40.size.CGFloat width = v17;
    v40.size.CGFloat height = v19;
    CGRect v41 = CGRectApplyAffineTransform(v40, &v39);
    CGFloat Height = CGRectGetHeight(v41);
    objc_msgSend(v7, sel_setCenter_, v9, v11 + Height * -1.1 + Height * -1.1);
  }
  uint64_t v21 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_transformView];
  if (v21)
  {
    id v22 = v21;
    objc_msgSend(v22, sel_center);
    double v24 = v23;
    objc_msgSend(v22, sel_center);
    double v26 = v25;
    objc_msgSend(v0, sel_bounds);
    CGFloat v28 = v27;
    CGFloat v30 = v29;
    CGFloat v32 = v31;
    CGFloat v34 = v33;
    CGAffineTransformMakeScale(&v39, 1.2, 1.2);
    CGAffineTransformInvert(&v38, &v39);
    CGAffineTransform v39 = v38;
    v42.origin.CGFloat x = v28;
    v42.origin.CGFloat y = v30;
    v42.size.CGFloat width = v32;
    v42.size.CGFloat height = v34;
    CGRect v43 = CGRectApplyAffineTransform(v42, &v39);
    CGFloat v35 = CGRectGetHeight(v43);
    objc_msgSend(v22, sel_setCenter_, v24, v26 + v35 * 1.1 + v35 * 1.1);
  }
  uint64_t v36 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shineView];
  if (v36)
  {
    id v37 = v36;
    objc_msgSend(v37, sel_frame);
    objc_msgSend(v37, sel_setFrame_);
  }
}

id StickerDragPreviewContainerView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StickerDragPreviewContainerView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for StickerDragPreviewContainerView()
{
  return self;
}

uint64_t sub_20C357724()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  return thunk for @escaping @callee_unowned @convention(block) () -> ()(*(void *)(v0 + 16));
}

id specialized static StickerDragPreviewContainerView._UIStickerMeshTransformForLiftedScale(_:)(double a1)
{
  memset(v13, 0, sizeof(v13));
  double v14 = (a1 + -1.0) / a1 + (a1 + -1.0) / a1;
  long long v15 = xmmword_20C835600;
  long long v16 = xmmword_20C835600;
  double v17 = v14;
  long long v18 = xmmword_20C835610;
  long long v19 = xmmword_20C835610;
  long long v21 = xmmword_20C835620;
  long long v22 = xmmword_20C835620;
  double v20 = v14;
  double v23 = v14;
  long long v24 = xmmword_20C835630;
  long long v25 = xmmword_20C835630;
  long long v27 = xmmword_20C835640;
  long long v28 = xmmword_20C835640;
  double v26 = v14;
  double v29 = v14;
  long long v30 = xmmword_20C835650;
  long long v31 = xmmword_20C835650;
  double v32 = v14;
  uint64_t v33 = 0x3FF0000000000000;
  long long v34 = xmmword_20C835660;
  uint64_t v35 = 0x3FD3333333333333;
  double v36 = v14;
  long long v37 = xmmword_20C835670;
  long long v38 = xmmword_20C835670;
  double v39 = v14;
  uint64_t v40 = 0x3FF0000000000000;
  long long v41 = xmmword_20C835680;
  uint64_t v42 = 0x3FD999999999999ALL;
  double v43 = v14;
  long long v44 = xmmword_20C835690;
  long long v45 = xmmword_20C835690;
  double v46 = v14;
  uint64_t v47 = 0x3FF0000000000000;
  long long v48 = xmmword_20C8356A0;
  uint64_t v49 = 0x3FE0000000000000;
  double v50 = v14;
  long long v51 = xmmword_20C8356B0;
  long long v52 = xmmword_20C8356B0;
  long long v53 = xmmword_20C8356C0;
  long long v54 = xmmword_20C8356D0;
  uint64_t v55 = 0x3FE3333333333333;
  long long v56 = 0u;
  uint64_t v57 = 0x3FE6666666666666;
  long long v58 = xmmword_20C8356E0;
  long long v59 = xmmword_20C8356C0;
  long long v60 = xmmword_20C8356F0;
  uint64_t v61 = 0x3FE6666666666666;
  long long v62 = 0u;
  uint64_t v63 = 0x3FE999999999999ALL;
  long long v64 = xmmword_20C835700;
  long long v65 = xmmword_20C8356C0;
  long long v66 = xmmword_20C835710;
  uint64_t v67 = 0x3FE999999999999ALL;
  long long v68 = 0u;
  uint64_t v69 = 0x3FECCCCCCCCCCCCDLL;
  long long v70 = xmmword_20C835720;
  long long v71 = xmmword_20C8356C0;
  long long v72 = xmmword_20C835730;
  uint64_t v73 = 0x3FECCCCCCCCCCCCDLL;
  long long v74 = 0u;
  uint64_t v75 = 0x3FF0000000000000;
  long long v76 = xmmword_20C8356C0;
  long long v77 = xmmword_20C8356C0;
  __asm { FMOV            V1.2D, #1.0 }
  long long v78 = _Q1;
  long long v79 = xmmword_20C835600;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  id v9 = objc_allocWithZone(MEMORY[0x263F15810]);
  double v10 = (void *)MEMORY[0x21054D080](v6, v8);
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v9, sel_initWithVertexCount_vertices_faceCount_faces_depthNormalization_, 22, v13, 10, &unk_26C14D2B0, v10);

  return v11;
}

void specialized StickerDragPreviewContainerView._preparePreviewContainer(preview:source:initialTransform:)(void *a1, void *a2)
{
  double v3 = v2;
  objc_msgSend(v2, sel_bounds);
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  CGAffineTransformMakeScale(&v203, 1.2, 1.2);
  CGAffineTransformInvert(&v211, &v203);
  CGAffineTransform v203 = v211;
  v212.origin.CGFloat x = v6;
  v212.origin.CGFloat y = v8;
  v212.size.CGFloat width = v10;
  v212.size.CGFloat height = v12;
  CGRect v213 = CGRectApplyAffineTransform(v212, &v203);
  CGFloat x = v213.origin.x;
  CGFloat y = v213.origin.y;
  CGFloat width = v213.size.width;
  CGFloat height = v213.size.height;
  double v17 = CGRectGetWidth(v213);
  double v199 = x;
  double rect = y;
  v214.origin.CGFloat x = x;
  v214.origin.CGFloat y = y;
  double v197 = height;
  double v198 = width;
  v214.size.CGFloat width = width;
  v214.size.CGFloat height = height;
  double v18 = CGRectGetHeight(v214);
  objc_msgSend(v2, sel_bounds);
  double v19 = v215.origin.x;
  double v20 = v215.origin.y;
  double v21 = v215.size.width;
  double v22 = v215.size.height;
  CGRect v216 = CGRectInset(v215, v17 * 0.1, v18 * 0.1);
  double v23 = v216.origin.x;
  double v24 = v216.origin.y;
  double v25 = v216.size.width;
  double v26 = v216.size.height;
  id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_initWithFrame_, v19, v20, v21, v22);
  objc_msgSend(v2, sel_addSubview_);
  id v28 = objc_msgSend(a2, sel_snapshotViewAfterScreenUpdates_, 1);
  if (v28)
  {
    double v29 = v28;
    objc_msgSend(v28, sel_setFrame_, v23, v24, v25, v26);
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;
    id v33 = objc_allocWithZone(MEMORY[0x263F157C8]);
    long long v34 = (void *)MEMORY[0x21054D080](v30, v32);
    swift_bridgeObjectRelease();
    id v35 = objc_msgSend(v33, sel_initWithType_, v34);

    Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    uint64_t v185 = *MEMORY[0x263F15C80];
    objc_msgSend(v35, sel_setValue_forKey_, isa);

    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;
    id v40 = objc_allocWithZone(MEMORY[0x263F157C8]);
    long long v41 = (void *)MEMORY[0x21054D080](v37, v39);
    swift_bridgeObjectRelease();
    id v42 = objc_msgSend(v40, sel_initWithType_, v41);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    Class v43 = NSNumber.init(floatLiteral:)(1.8).super.super.isa;
    objc_msgSend(v42, sel_setValue_forKey_, v43, *MEMORY[0x263F15BF8]);

    id v44 = objc_msgSend(v29, sel_layer);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_20C835740;
    uint64_t v46 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFilter);
    *(void *)(v45 + 32) = v35;
    *(void *)(v45 + 88) = v46;
    uint64_t v188 = v46;
    *(void *)(v45 + 56) = v46;
    *(void *)(v45 + 64) = v42;
    id v190 = v35;
    id v189 = v42;
    Class v47 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v44, sel_setFilters_, v47);

    id v48 = objc_msgSend(v29, (SEL)&selRef_isInCloud);
    id v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithWhite_alpha_, 0.75, 1.0);
    id v50 = objc_msgSend(v49, sel_CGColor);

    objc_msgSend(v48, sel_setContentsMultiplyColor_, v50);
    id v51 = objc_msgSend(v29, (SEL)&selRef_isInCloud);
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v54 = v53;
    id v55 = objc_allocWithZone(MEMORY[0x263F157C8]);
    long long v56 = (void *)MEMORY[0x21054D080](v52, v54);
    swift_bridgeObjectRelease();
    id v57 = objc_msgSend(v55, sel_initWithType_, v56);

    objc_msgSend(v51, sel_setCompositingFilter_, v57);
    id v58 = objc_msgSend(v29, (SEL)&selRef_isInCloud);
    objc_msgSend(v58, sel_setShouldRasterize_, 1);

    objc_msgSend(v29, sel_center);
    objc_msgSend(v29, sel_setCenter_);
    objc_msgSend(v29, sel_setAlpha_, 0.23);
    v191 = v27;
    objc_msgSend(v27, sel_addSubview_, v29);
    long long v59 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shadowView];
    *(void *)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shadowView] = v29;
    id v196 = v29;

    v217.origin.CGFloat x = v199;
    v217.origin.CGFloat y = rect;
    v217.size.CGFloat width = v198;
    v217.size.CGFloat height = v197;
    double v195 = CGRectGetWidth(v217) * 0.5;
    v218.origin.CGFloat x = v199;
    v218.origin.CGFloat y = rect;
    v218.size.CGFloat width = v198;
    v218.size.CGFloat height = v197;
    CGFloat v193 = CGRectGetHeight(v218) * 0.5;
    id v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_initWithFrame_, v23, v24, v25, v26);
    long long v182 = *(_OWORD *)(MEMORY[0x263F15740] + 16);
    long long v183 = *MEMORY[0x263F15740];
    long long v180 = *(_OWORD *)(MEMORY[0x263F15740] + 48);
    long long v181 = *(_OWORD *)(MEMORY[0x263F15740] + 32);
    long long v179 = *(_OWORD *)(MEMORY[0x263F15740] + 64);
    uint64_t v61 = *(void *)(MEMORY[0x263F15740] + 80);
    long long v186 = *(_OWORD *)(MEMORY[0x263F15740] + 96);
    uint64_t v62 = *(void *)(MEMORY[0x263F15740] + 112);
    uint64_t v63 = *(void *)(MEMORY[0x263F15740] + 120);
    id v64 = objc_msgSend(v60, (SEL)&selRef_isInCloud);
    *(_OWORD *)&v203.CGFloat a = v183;
    *(_OWORD *)&v203.CGFloat c = v182;
    *(_OWORD *)&v203.tCGFloat x = v181;
    long long v204 = v180;
    long long v205 = v179;
    uint64_t v206 = v61;
    unint64_t v207 = 0xBFF0000000000000;
    long long v208 = v186;
    uint64_t v209 = v62;
    uint64_t v210 = v63;
    objc_msgSend(v64, sel_setSublayerTransform_, &v203);

    objc_msgSend(v27, sel_addSubview_, v60);
    v219.origin.CGFloat x = v199;
    v219.origin.CGFloat y = rect;
    v219.size.CGFloat width = v198;
    v219.size.CGFloat height = v197;
    CGFloat v65 = CGRectGetWidth(v219) * 1.2;
    v220.origin.CGFloat x = v199;
    v220.origin.CGFloat y = rect;
    v220.size.CGFloat width = v198;
    v220.size.CGFloat height = v197;
    CGFloat v66 = CGRectGetHeight(v220) * 1.2;
    objc_msgSend(v3, sel_bounds);
    CGFloat v68 = v67;
    CGFloat v70 = v69;
    CGFloat v72 = v71;
    CGFloat v74 = v73;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    CGAffineTransformInvert(&v211, &v203);
    CGAffineTransform v203 = v211;
    v221.origin.CGFloat x = v68;
    v221.origin.CGFloat y = v70;
    v221.size.CGFloat width = v72;
    v221.size.CGFloat height = v74;
    CGRect v222 = CGRectApplyAffineTransform(v221, &v203);
    CGFloat v75 = CGRectGetHeight(v222);
    id v76 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), (SEL)&selRef_formFillingEnabled, 0.0, 0.0, v65, v66 + v75 * 1.1 + v75 * 1.1);
    id v77 = objc_msgSend(v76, (SEL)&selRef_isInCloud);
    id v78 = specialized static StickerDragPreviewContainerView._UIStickerMeshTransformForLiftedScale(_:)(1.2);
    objc_msgSend(v77, sel_setMeshTransform_, v78);

    id v79 = objc_msgSend(v76, (SEL)&selRef_isInCloud);
    id v80 = objc_msgSend(v3, sel_traitCollection);
    objc_msgSend(v80, sel_displayScale);
    double v82 = v81;

    objc_msgSend(v79, sel_setRasterizationScale_, v82 * 1.2);
    objc_msgSend(v60, sel_addSubview_, v76);
    uint64_t v83 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_meshView];
    *(void *)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_meshView] = v76;
    id v84 = v76;

    id v85 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), (SEL)&selRef_formFillingEnabled, v199, rect, v198, v197);
    objc_msgSend(v84, sel_addSubview_, v85);
    uint64_t v86 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_transformView];
    *(void *)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_transformView] = v85;
    id v87 = v85;

    objc_msgSend(v87, sel_addSubview_, a1);
    objc_msgSend(v3, sel_bounds);
    CGFloat v89 = v88;
    CGFloat v91 = v90;
    CGFloat v93 = v92;
    CGFloat v95 = v94;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    CGAffineTransformInvert(&v211, &v203);
    CGAffineTransform v203 = v211;
    v223.origin.CGFloat x = v89;
    v223.origin.CGFloat y = v91;
    v223.size.CGFloat width = v93;
    v223.size.CGFloat height = v95;
    CGRect v224 = CGRectApplyAffineTransform(v223, &v203);
    *(double *)&long long v183 = v193 - CGRectGetHeight(v224) * 1.1 + -4.0;
    objc_msgSend(v84, sel_frame);
    *(void *)&long long v180 = CGRectGetMidX(v225);
    objc_msgSend(v84, sel_frame);
    double MidY = CGRectGetMidY(v226);
    objc_msgSend(v3, sel_bounds);
    CGFloat v98 = v97;
    CGFloat v100 = v99;
    CGFloat v102 = v101;
    CGFloat v104 = v103;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    CGAffineTransformInvert(&v211, &v203);
    CGAffineTransform v203 = v211;
    v227.origin.CGFloat x = v98;
    v227.origin.CGFloat y = v100;
    v227.size.CGFloat width = v102;
    v227.size.CGFloat height = v104;
    CGRect v228 = CGRectApplyAffineTransform(v227, &v203);
    double v105 = MidY + CGRectGetHeight(v228) * 1.1 + 4.0;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    CGAffineTransformInvert(&v211, &v203);
    CGAffineTransform v203 = v211;
    v187 = v60;
    objc_msgSend(v60, sel_setTransform_, &v203);
    objc_msgSend(v3, sel_bounds);
    CGFloat v107 = v106;
    CGFloat v109 = v108;
    CGFloat v111 = v110;
    CGFloat v113 = v112;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    CGAffineTransformInvert(&v211, &v203);
    CGAffineTransform v203 = v211;
    v229.origin.CGFloat x = v107;
    v229.origin.CGFloat y = v109;
    v229.size.CGFloat width = v111;
    v229.size.CGFloat height = v113;
    CGRect v230 = CGRectApplyAffineTransform(v229, &v203);
    CGFloat v114 = CGRectGetHeight(v230);
    double v115 = *(double *)&v183 + v114 * 1.1 + v114 * 1.1;
    objc_msgSend(v3, sel_bounds);
    CGFloat v117 = v116;
    CGFloat v119 = v118;
    CGFloat v121 = v120;
    CGFloat v123 = v122;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    CGAffineTransformInvert(&v211, &v203);
    CGAffineTransform v203 = v211;
    v231.origin.CGFloat x = v117;
    v231.origin.CGFloat y = v119;
    v231.size.CGFloat width = v121;
    v231.size.CGFloat height = v123;
    CGRect v232 = CGRectApplyAffineTransform(v231, &v203);
    CGFloat v124 = CGRectGetHeight(v232);
    double v125 = v105 - (v124 * 1.1 + v124 * 1.1);
    v184 = v84;
    objc_msgSend(v84, sel_setCenter_, v195, v115);
    objc_msgSend(v87, sel_setCenter_, *(double *)&v180, v125);
    objc_msgSend(a1, sel_setCenter_, v195, v193);
    id v126 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F157E8]), sel_init);
    objc_msgSend(v126, sel_setFrame_, v199);
    id v127 = objc_msgSend(v196, sel_layer);
    id v128 = objc_msgSend(v127, sel_contents);

    if (v128)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      __swift_project_boxed_opaque_existential_1(&v203, *(uint64_t *)&v203.d);
      id v128 = (id)_bridgeAnythingToObjectiveC<A>(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v203);
    }
    objc_msgSend(v126, sel_setContents_, v128);
    swift_unknownObjectRelease();
    id v129 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_initWithFrame_, v199, rect, v198, v197);
    id v130 = objc_msgSend(v129, (SEL)&selRef_isInCloud);
    objc_msgSend(v130, sel_setMask_, v126);

    v194 = v126;
    objc_msgSend(v87, sel_addSubview_, v129);
    objc_msgSend(v3, sel_bounds);
    CGFloat v132 = v131;
    CGFloat v134 = v133;
    CGFloat v136 = v135;
    CGFloat v138 = v137;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    CGAffineTransformInvert(&v211, &v203);
    CGAffineTransform v203 = v211;
    v233.origin.CGFloat x = v132;
    v233.origin.CGFloat y = v134;
    v233.size.CGFloat width = v136;
    v233.size.CGFloat height = v138;
    CGRect v234 = CGRectApplyAffineTransform(v233, &v203);
    CGFloat v139 = CGRectGetHeight(v234) * 1.1;
    v235.origin.CGFloat x = v199;
    v235.origin.CGFloat y = rect;
    v235.size.CGFloat width = v198;
    v235.size.CGFloat height = v197;
    id v140 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_initWithFrame_, 0.0, v139, CGRectGetWidth(v235), 100.0);
    objc_msgSend(v129, sel_center);
    double v142 = v141;
    double v144 = v143;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    objc_msgSend(v129, (SEL)&selRef_setHighlightSelectableItemsEnabled_, &v203);
    objc_msgSend(v129, sel_setCenter_, v142, v144);
    objc_msgSend(v129, sel_addSubview_, v140);
    id v145 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shineView];
    *(void *)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shineView] = v140;
    rectCGFloat a = v140;

    uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v148 = v147;
    id v149 = objc_allocWithZone(MEMORY[0x263F157C8]);
    id v150 = (void *)MEMORY[0x21054D080](v146, v148);
    swift_bridgeObjectRelease();
    id v151 = objc_msgSend(v149, sel_initWithType_, v150);

    Class v152 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v151, sel_setValue_forKey_, v152, v185);

    id v153 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F157E8]), sel_init);
    objc_msgSend(v3, sel_bounds);
    objc_msgSend(v153, sel_setBounds_, 0.0, 0.0, CGRectGetWidth(v236), 20.0);
    objc_msgSend(v153, sel_setPosition_, v195, 38.0);
    id v200 = self;
    id v154 = objc_msgSend(v200, sel_whiteColor);
    id v155 = objc_msgSend(v154, sel_CGColor);

    objc_msgSend(v153, sel_setBackgroundColor_, v155);
    uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v158 = v157;
    id v159 = objc_allocWithZone(MEMORY[0x263F157C8]);
    v160 = (void *)MEMORY[0x21054D080](v156, v158);
    swift_bridgeObjectRelease();
    id v161 = objc_msgSend(v159, sel_initWithType_, v160);

    objc_msgSend(v153, sel_setCompositingFilter_, v161);
    LODWORD(v162) = 1035489772;
    objc_msgSend(v153, sel_setOpacity_, v162);
    uint64_t v163 = swift_allocObject();
    *(_OWORD *)(v163 + 16) = xmmword_20C832C20;
    *(void *)(v163 + 56) = v188;
    *(void *)(v163 + 32) = v151;
    id v164 = v151;
    Class v165 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v153, sel_setFilters_, v165);

    objc_msgSend(v153, sel_setShouldRasterize_, 1);
    id v166 = objc_msgSend(v3, sel_traitCollection);
    objc_msgSend(v166, sel_displayScale);
    double v168 = v167;

    objc_msgSend(v153, sel_setRasterizationScale_, v168 * 1.2);
    id v169 = objc_msgSend(recta, sel_layer);
    objc_msgSend(v169, sel_addSublayer_, v153);

    id v170 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F157E8]), sel_init);
    objc_msgSend(v3, sel_bounds);
    objc_msgSend(v170, sel_setBounds_, 0.0, 0.0, CGRectGetWidth(v237), 20.0);
    objc_msgSend(v153, sel_position);
    objc_msgSend(v170, sel_setPosition_, v195, v171 + -12.0);
    id v172 = objc_msgSend(v200, sel_blackColor);
    id v173 = objc_msgSend(v172, sel_CGColor);

    objc_msgSend(v170, sel_setBackgroundColor_, v173);
    LODWORD(v174) = 1043542835;
    objc_msgSend(v170, sel_setOpacity_, v174);
    uint64_t v175 = swift_allocObject();
    *(_OWORD *)(v175 + 16) = xmmword_20C832C20;
    *(void *)(v175 + 56) = v188;
    *(void *)(v175 + 32) = v164;
    id v176 = v164;
    Class v177 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v170, sel_setFilters_, v177);

    objc_msgSend(v170, sel_setShouldRasterize_, 1);
    objc_msgSend(v153, sel_rasterizationScale);
    objc_msgSend(v170, sel_setRasterizationScale_);
    id v178 = objc_msgSend(recta, sel_layer);
    objc_msgSend(v178, sel_addSublayer_, v170);
  }
  else
  {
    __break(1u);
  }
}

void specialized StickerDragPreviewContainerView._animateDrop(alongside:completion:)(uint64_t a1, uint64_t a2)
{
  double v5 = self;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v2;
  long long v15 = partial apply for closure #1 in StickerDragPreviewContainerView._animateDrop(alongside:completion:);
  uint64_t v16 = v6;
  uint64_t v11 = MEMORY[0x263EF8330];
  uint64_t v12 = 1107296256;
  CGFloat v13 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  double v14 = &block_descriptor_4;
  double v7 = _Block_copy(&v11);
  id v8 = v2;
  swift_release();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  long long v15 = _sIg_Ieg_TRTA_0;
  uint64_t v16 = v9;
  uint64_t v11 = MEMORY[0x263EF8330];
  uint64_t v12 = 1107296256;
  CGFloat v13 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  double v14 = &block_descriptor_32;
  CGFloat v10 = _Block_copy(&v11);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_, 0, v7, v10, 2.0, 0.0, 0.95, 0.0);
  _Block_release(v10);
  _Block_release(v7);
}

uint64_t sub_20C358ED0()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in StickerDragPreviewContainerView._animateDrop(alongside:completion:)()
{
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_20C358F44()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:)()
{
  closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t objectdestroy_38Tm()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in StickerDragPreviewContainerView._animateLift(alongside:completion:)()
{
  closure #1 in StickerDragPreviewContainerView._animateLift(alongside:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

void partial apply for closure #1 in closure #1 in StickerDragPreviewContainerView._animateLift(alongside:completion:)()
{
}

void specialized Canvas.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:)(void *a1, uint64_t a2, int a3, int a4, int a5, double a6, double a7, double a8, double a9)
{
  int v96 = a5;
  int v97 = a4;
  int v102 = a3;
  uint64_t v103 = a2;
  id v95 = a1;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v14 - 8);
  double v94 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for CRKeyPath();
  uint64_t v16 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  CGFloat v98 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  double v20 = (char *)&v93 - v19;
  uint64_t v101 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v101);
  double v22 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v23 = *(void *)(v99 - 8);
  MEMORY[0x270FA5388](v99);
  double v25 = (char *)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v9[direct field offset for Canvas.multipeerConnection] = 0;
  *(void *)&v9[direct field offset for Canvas.multipeerCanvasStateConnection] = 0;
  *(void *)&v9[direct field offset for Canvas.removeOldEraserStrokesTimer] = 0;
  double v26 = &v9[direct field offset for Canvas.liveStreamMessenger];
  *(void *)double v26 = 0;
  *((void *)v26 + 1) = 0;
  *(void *)&v9[direct field offset for Canvas.childViewControllerCancellable] = 0;
  *(void *)&v9[direct field offset for Canvas.xpcMulticast] = 0;
  id v27 = &v9[direct field offset for Canvas._editingView];
  *(void *)id v27 = 0;
  *((void *)v27 + 1) = 0;
  *(void *)&v9[direct field offset for Canvas._canvasElementController] = 0;
  uint64_t v28 = direct field offset for Canvas.delayedPreviewProviders;
  double v29 = v9;
  uint64_t v30 = MEMORY[0x263F8EE78];
  *(void *)&v9[v28] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v31 = direct field offset for Canvas.dropCompletions;
  *(void *)&v29[v31] = specialized Dictionary.init(dictionaryLiteral:)(v30);
  v29[direct field offset for Canvas.dropSessionType] = 3;
  *(void *)&v29[direct field offset for Canvas.scribbleDelegate] = 0;
  *(void *)&v29[direct field offset for Canvas.scribbleInteraction] = 0;
  *(void *)&v29[direct field offset for Canvas.indirectScribbleInteraction] = 0;
  *(void *)&v29[direct field offset for Canvas.pointerDelegate] = 0;
  v29[direct field offset for Canvas.dropInteractionSessionIsActive] = 0;
  *(void *)&v29[direct field offset for Canvas.dropInteraction] = 0;
  *(void *)&v29[direct field offset for Canvas.dropDelegate] = 0;
  *(void *)&v29[direct field offset for Canvas.editMenuInteraction] = 0;
  *(void *)&v29[direct field offset for Canvas.editMenuInteractionDelegate] = 0;
  uint64_t v32 = &v29[direct field offset for Canvas.visibleBoundsOverride];
  unsigned char v32[32] = 1;
  *(_OWORD *)uint64_t v32 = 0u;
  *((_OWORD *)v32 + 1) = 0u;
  *(void *)&v29[direct field offset for Canvas.subscriptions] = v30;
  v29[direct field offset for Canvas.isInUndoableGroup] = 0;
  v29[direct field offset for Canvas.isUndoableGroupNewChange] = 0;
  *(void *)&v29[direct field offset for Canvas.eraserCheckingIndex] = 0;
  uint64_t v33 = direct field offset for Canvas.dropTargets;
  *(void *)&v29[v33] = specialized Dictionary.init(dictionaryLiteral:)(v30);
  uint64_t v34 = direct field offset for Canvas.stickerDropPreviewInfoMap;
  *(void *)&v29[v34] = specialized Dictionary.init(dictionaryLiteral:)(v30);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v36 = v103;
  Capsule<>.root.getter();
  uint64_t v93 = v35;
  Capsule<>.rootID.getter();
  LOBYTE(v107[0]) = 0;
  uint64_t v37 = v100;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v98, v20, v100);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v37);
  outlined destroy of Paper((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for Paper);
  SharedTagged_9<>.layout()(v107);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v99);
  uint64_t v38 = v108;
  unint64_t v39 = v109;
  __swift_project_boxed_opaque_existential_1(v107, (uint64_t)v108);
  id v40 = *(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, ValueMetadata *, unint64_t))(v39 + 8);
  uint64_t v41 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  if (!v40(v36, 0, 0, v101, v41, v38, v39))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElementView<Paper>);
  *(void *)&v29[direct field offset for Canvas.paperView] = swift_dynamicCastClassUnconditional();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
  LOBYTE(v107[0]) = v102;
  id v42 = v95;
  Class v43 = (char *)specialized AnyCanvas.init(context:frame:editingMode:transparentBackground:)(v42, (unsigned __int8 *)v107, v96 & 1, a6, a7, a8, a9);

  uint64_t v44 = direct field offset for Canvas.paperView;
  uint64_t v45 = *(void **)&v43[direct field offset for Canvas.paperView];
  swift_unknownObjectWeakAssign();
  uint64_t v46 = (void *)MEMORY[0x263F8EED0];
  Class v47 = *(void (**)(void))((*MEMORY[0x263F8EED0] & *v45) + 0x488);
  id v48 = v43;
  id v49 = v45;
  v47();

  objc_msgSend(v48, sel_addSubview_, *(void *)&v43[v44]);
  if (v97)
  {
    id v50 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasDropDelegate<Paper>);
    id v51 = objc_allocWithZone(v50);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    v104.receiver = v51;
    v104.super_class = v50;
    id v52 = objc_msgSendSuper2(&v104, sel_init);
    uint64_t v53 = *(void **)&v48[direct field offset for Canvas.dropDelegate];
    *(void *)&v48[direct field offset for Canvas.dropDelegate] = v52;
    id v54 = v52;

    id v55 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F826F8]), sel_initWithDelegate_, v54);
    if ((*(uint64_t (**)(void))((*v46 & *(void *)v48) + 0xB18))())
    {
      long long v56 = v48;
      id v57 = v55;
      objc_msgSend(v56, sel_addInteraction_, v57);
    }
    id v58 = *(void **)&v48[direct field offset for Canvas.dropInteraction];
    *(void *)&v48[direct field offset for Canvas.dropInteraction] = v55;
  }
  long long v59 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasScribbleDelegate<Paper>);
  id v60 = objc_allocWithZone(v59);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v106.receiver = v60;
  v106.super_class = v59;
  id v61 = objc_msgSendSuper2(&v106, sel_init);
  uint64_t v62 = direct field offset for Canvas.scribbleDelegate;
  uint64_t v63 = *(void **)&v48[direct field offset for Canvas.scribbleDelegate];
  *(void *)&v48[direct field offset for Canvas.scribbleDelegate] = v61;

  uint64_t v64 = *(void *)&v48[v62];
  if (!v64) {
    goto LABEL_15;
  }
  id v65 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82B78]), sel_initWithDelegate_, v64);
  uint64_t v66 = direct field offset for Canvas.scribbleInteraction;
  double v67 = *(void **)&v48[direct field offset for Canvas.scribbleInteraction];
  *(void *)&v48[direct field offset for Canvas.scribbleInteraction] = v65;

  CGFloat v68 = *(void **)&v48[v62];
  if (!v68)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v69 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIIndirectScribbleInteraction<CanvasScribbleDelegate<Paper>>));
  id v70 = v68;
  uint64_t v71 = UIIndirectScribbleInteraction.init(delegate:)();
  uint64_t v72 = direct field offset for Canvas.indirectScribbleInteraction;
  double v73 = *(void **)&v48[direct field offset for Canvas.indirectScribbleInteraction];
  *(void *)&v48[direct field offset for Canvas.indirectScribbleInteraction] = v71;

  uint64_t v74 = *(void *)&v48[v66];
  if (!v74)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v75 = *(id *)&v43[v44];
  objc_msgSend(v75, sel_addInteraction_, v74);
  if (!*(void *)&v48[v72])
  {
LABEL_18:
    __break(1u);
    return;
  }
  objc_msgSend(v75, sel_addInteraction_);

  id v76 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasPointerDelegate()), sel_init);
  uint64_t v77 = direct field offset for Canvas.pointerDelegate;
  id v78 = *(void **)&v48[direct field offset for Canvas.pointerDelegate];
  *(void *)&v48[direct field offset for Canvas.pointerDelegate] = v76;

  id v79 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82A70]), sel_initWithDelegate_, *(void *)&v48[v77]);
  objc_msgSend(v48, sel_addInteraction_, v79);
  double v108 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v109 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v107[0]) = 0;
  char v80 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
  if (v80)
  {
    if ((_BYTE)v102)
    {
      double v81 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasEditMenuDelegate<Paper>);
      double v82 = objc_allocWithZone(v81);
      swift_unknownObjectWeakInit();
      v82[direct field offset for CanvasEditMenuDelegate.editMenuIsPresented] = 0;
      swift_unknownObjectWeakAssign();
      v105.receiver = v82;
      v105.super_class = v81;
      id v83 = objc_msgSendSuper2(&v105, sel_init);
      id v84 = *(void **)&v48[direct field offset for Canvas.editMenuInteractionDelegate];
      *(void *)&v48[direct field offset for Canvas.editMenuInteractionDelegate] = v83;
      id v85 = v83;

      id v86 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82718]), sel_initWithDelegate_, v85);
      objc_msgSend(v48, sel_addInteraction_, v86);
      id v87 = *(void **)&v48[direct field offset for Canvas.editMenuInteraction];
      *(void *)&v48[direct field offset for Canvas.editMenuInteraction] = v86;
      id v88 = v86;

      specialized Canvas.setupBandSelection()();
    }
  }
  CGFloat v89 = v48;
  uint64_t v90 = (uint64_t)v94;
  Date.init()();
  uint64_t v91 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v90, 0, 1, v91);
  uint64_t v92 = (uint64_t)&v89[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_timeOfOpeningContainerView];
  swift_beginAccess();
  outlined assign with take of Date?(v90, v92, &demangling cache variable for type metadata for Date?);
  swift_endAccess();

  (*(void (**)(uint64_t))(*(void *)(v93 - 8) + 8))(v103);
}

{
  char *v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  ValueMetadata *v38;
  unint64_t v39;
  uint64_t (*v40)(uint64_t, void, void, uint64_t, uint64_t, ValueMetadata *, unint64_t);
  uint64_t v41;
  id v42;
  char *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void (*v47)(void);
  char *v48;
  void *v49;
  objc_class *v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  char *v56;
  id v57;
  void *v58;
  objc_class *v59;
  id v60;
  id v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  void *v67;
  void *v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  void *v78;
  id v79;
  char v80;
  objc_class *v81;
  unsigned char *v82;
  id v83;
  void *v84;
  id v85;
  id v86;
  void *v87;
  id v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  id v96;
  int v97;
  int v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  objc_super v106;
  objc_super v107;
  objc_super v108;
  uint64_t v109[3];
  ValueMetadata *v110;
  unint64_t v111;

  int v97 = a5;
  CGFloat v98 = a4;
  objc_super v104 = a3;
  objc_super v105 = a2;
  int v96 = a1;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v14 - 8);
  id v95 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v102 = type metadata accessor for CRKeyPath();
  uint64_t v16 = *(void *)(v102 - 8);
  MEMORY[0x270FA5388](v102);
  uint64_t v99 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  double v20 = (char *)&v93 - v19;
  uint64_t v103 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v103);
  double v22 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v100 = *(void *)(v23 - 8);
  uint64_t v101 = v23;
  MEMORY[0x270FA5388](v23);
  double v25 = (char *)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v9[direct field offset for Canvas.multipeerConnection] = 0;
  *(void *)&v9[direct field offset for Canvas.multipeerCanvasStateConnection] = 0;
  *(void *)&v9[direct field offset for Canvas.removeOldEraserStrokesTimer] = 0;
  double v26 = &v9[direct field offset for Canvas.liveStreamMessenger];
  *(void *)double v26 = 0;
  *((void *)v26 + 1) = 0;
  *(void *)&v9[direct field offset for Canvas.childViewControllerCancellable] = 0;
  *(void *)&v9[direct field offset for Canvas.xpcMulticast] = 0;
  id v27 = &v9[direct field offset for Canvas._editingView];
  *(void *)id v27 = 0;
  *((void *)v27 + 1) = 0;
  *(void *)&v9[direct field offset for Canvas._canvasElementController] = 0;
  uint64_t v28 = direct field offset for Canvas.delayedPreviewProviders;
  double v29 = v9;
  uint64_t v30 = MEMORY[0x263F8EE78];
  *(void *)&v9[v28] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v31 = direct field offset for Canvas.dropCompletions;
  *(void *)&v29[v31] = specialized Dictionary.init(dictionaryLiteral:)(v30);
  v29[direct field offset for Canvas.dropSessionType] = 3;
  *(void *)&v29[direct field offset for Canvas.scribbleDelegate] = 0;
  *(void *)&v29[direct field offset for Canvas.scribbleInteraction] = 0;
  *(void *)&v29[direct field offset for Canvas.indirectScribbleInteraction] = 0;
  *(void *)&v29[direct field offset for Canvas.pointerDelegate] = 0;
  v29[direct field offset for Canvas.dropInteractionSessionIsActive] = 0;
  *(void *)&v29[direct field offset for Canvas.dropInteraction] = 0;
  *(void *)&v29[direct field offset for Canvas.dropDelegate] = 0;
  *(void *)&v29[direct field offset for Canvas.editMenuInteraction] = 0;
  *(void *)&v29[direct field offset for Canvas.editMenuInteractionDelegate] = 0;
  uint64_t v32 = &v29[direct field offset for Canvas.visibleBoundsOverride];
  *(_OWORD *)uint64_t v32 = 0u;
  *((_OWORD *)v32 + 1) = 0u;
  unsigned char v32[32] = 1;
  *(void *)&v29[direct field offset for Canvas.subscriptions] = v30;
  v29[direct field offset for Canvas.isInUndoableGroup] = 0;
  v29[direct field offset for Canvas.isUndoableGroupNewChange] = 0;
  *(void *)&v29[direct field offset for Canvas.eraserCheckingIndex] = 0;
  uint64_t v33 = direct field offset for Canvas.dropTargets;
  *(void *)&v29[v33] = specialized Dictionary.init(dictionaryLiteral:)(v30);
  uint64_t v34 = direct field offset for Canvas.stickerDropPreviewInfoMap;
  *(void *)&v29[v34] = specialized Dictionary.init(dictionaryLiteral:)(v30);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  uint64_t v36 = v105;
  Capsule<>.root.getter();
  double v94 = v35;
  Capsule<>.rootID.getter();
  LOBYTE(v109[0]) = 1;
  uint64_t v37 = v102;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v99, v20, v102);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v37);
  outlined destroy of Paper((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for Image);
  SharedTagged_9<>.layout()(v109);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v25, v101);
  uint64_t v38 = v110;
  unint64_t v39 = v111;
  __swift_project_boxed_opaque_existential_1(v109, (uint64_t)v110);
  id v40 = *(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, ValueMetadata *, unint64_t))(v39 + 8);
  uint64_t v41 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  if (!v40(v36, 0, 0, v103, v41, v38, v39))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ContainerCanvasElementView<Image>);
  *(void *)&v29[direct field offset for Canvas.paperView] = swift_dynamicCastClassUnconditional();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  LOBYTE(v109[0]) = v104;
  id v42 = v96;
  Class v43 = (char *)specialized AnyCanvas.init(context:frame:editingMode:transparentBackground:)(v42, (unsigned __int8 *)v109, v97 & 1, a6, a7, a8, a9);

  uint64_t v44 = direct field offset for Canvas.paperView;
  uint64_t v45 = *(void **)&v43[direct field offset for Canvas.paperView];
  swift_unknownObjectWeakAssign();
  uint64_t v46 = (void *)MEMORY[0x263F8EED0];
  Class v47 = *(void (**)(void))((*MEMORY[0x263F8EED0] & *v45) + 0x488);
  id v48 = v43;
  id v49 = v45;
  v47();

  objc_msgSend(v48, sel_addSubview_, *(void *)&v43[v44]);
  if (v98)
  {
    id v50 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasDropDelegate<Image>);
    id v51 = objc_allocWithZone(v50);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    v106.receiver = v51;
    v106.super_class = v50;
    id v52 = objc_msgSendSuper2(&v106, sel_init);
    uint64_t v53 = *(void **)&v48[direct field offset for Canvas.dropDelegate];
    *(void *)&v48[direct field offset for Canvas.dropDelegate] = v52;
    id v54 = v52;

    id v55 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F826F8]), sel_initWithDelegate_, v54);
    if ((*(uint64_t (**)(void))((*v46 & *(void *)v48) + 0xB18))())
    {
      long long v56 = v48;
      id v57 = v55;
      objc_msgSend(v56, sel_addInteraction_, v57);
    }
    id v58 = *(void **)&v48[direct field offset for Canvas.dropInteraction];
    *(void *)&v48[direct field offset for Canvas.dropInteraction] = v55;
  }
  long long v59 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasScribbleDelegate<Image>);
  id v60 = objc_allocWithZone(v59);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v108.receiver = v60;
  v108.super_class = v59;
  id v61 = objc_msgSendSuper2(&v108, sel_init);
  uint64_t v62 = direct field offset for Canvas.scribbleDelegate;
  uint64_t v63 = *(void **)&v48[direct field offset for Canvas.scribbleDelegate];
  *(void *)&v48[direct field offset for Canvas.scribbleDelegate] = v61;

  uint64_t v64 = *(void *)&v48[v62];
  if (!v64) {
    goto LABEL_15;
  }
  id v65 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82B78]), sel_initWithDelegate_, v64);
  uint64_t v66 = direct field offset for Canvas.scribbleInteraction;
  double v67 = *(void **)&v48[direct field offset for Canvas.scribbleInteraction];
  *(void *)&v48[direct field offset for Canvas.scribbleInteraction] = v65;

  CGFloat v68 = *(void **)&v48[v62];
  if (!v68)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v69 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIIndirectScribbleInteraction<CanvasScribbleDelegate<Image>>));
  id v70 = v68;
  uint64_t v71 = UIIndirectScribbleInteraction.init(delegate:)();
  uint64_t v72 = direct field offset for Canvas.indirectScribbleInteraction;
  double v73 = *(void **)&v48[direct field offset for Canvas.indirectScribbleInteraction];
  *(void *)&v48[direct field offset for Canvas.indirectScribbleInteraction] = v71;

  uint64_t v74 = *(void *)&v48[v66];
  if (!v74)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v75 = *(id *)&v43[v44];
  objc_msgSend(v75, sel_addInteraction_, v74);
  if (!*(void *)&v48[v72])
  {
LABEL_18:
    __break(1u);
    return;
  }
  objc_msgSend(v75, sel_addInteraction_);

  id v76 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasPointerDelegate()), sel_init);
  uint64_t v77 = direct field offset for Canvas.pointerDelegate;
  id v78 = *(void **)&v48[direct field offset for Canvas.pointerDelegate];
  *(void *)&v48[direct field offset for Canvas.pointerDelegate] = v76;

  id v79 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82A70]), sel_initWithDelegate_, *(void *)&v48[v77]);
  objc_msgSend(v48, sel_addInteraction_, v79);
  double v110 = &type metadata for PencilAndPaperFeatureFlags;
  CGFloat v111 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v109[0]) = 0;
  char v80 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  if (v80)
  {
    if ((_BYTE)v104)
    {
      double v81 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasEditMenuDelegate<Image>);
      double v82 = objc_allocWithZone(v81);
      swift_unknownObjectWeakInit();
      v82[direct field offset for CanvasEditMenuDelegate.editMenuIsPresented] = 0;
      swift_unknownObjectWeakAssign();
      v107.receiver = v82;
      v107.super_class = v81;
      id v83 = objc_msgSendSuper2(&v107, sel_init);
      id v84 = *(void **)&v48[direct field offset for Canvas.editMenuInteractionDelegate];
      *(void *)&v48[direct field offset for Canvas.editMenuInteractionDelegate] = v83;
      id v85 = v83;

      id v86 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82718]), sel_initWithDelegate_, v85);
      objc_msgSend(v48, sel_addInteraction_, v86);
      id v87 = *(void **)&v48[direct field offset for Canvas.editMenuInteraction];
      *(void *)&v48[direct field offset for Canvas.editMenuInteraction] = v86;
      id v88 = v86;

      specialized Canvas.setupBandSelection()();
    }
  }
  CGFloat v89 = v48;
  uint64_t v90 = (uint64_t)v95;
  Date.init()();
  uint64_t v91 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v90, 0, 1, v91);
  uint64_t v92 = (uint64_t)&v89[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_timeOfOpeningContainerView];
  swift_beginAccess();
  outlined assign with take of Date?(v90, v92, &demangling cache variable for type metadata for Date?);
  swift_endAccess();

  (*(void (**)(uint64_t))(*(void *)(v94 - 8) + 8))(v105);
}

void specialized Canvas.tapOnCanvas(location:fromPencilKit:allowShowingEditMenu:)(char a1, char a2, double a3, double a4)
{
  double v5 = v4;
  if (a1)
  {
    id v9 = objc_msgSend(v5, sel_hitTest_withEvent_, 0, a3, a4);
    if (v9)
    {
      CGFloat v10 = v9;
      type metadata accessor for AnyCanvasElementView();
      id v11 = v10;
      uint64_t v12 = (void *)swift_dynamicCastClass();
      id v13 = v11;
      if (v12)
      {
LABEL_8:

        if (v12 != *(void **)((char *)v5 + direct field offset for Canvas.paperView))
        {
          id v40 = v13;
          objc_msgSend(v12, sel_convertPoint_fromCoordinateSpace_, v5, a3, a4);
          (*(void (**)(void, uint64_t, void))((*MEMORY[0x263F8EED0] & *v12) + 0x1C8))(0, 1, a2 & 1);

          return;
        }
        id v11 = v13;
      }
      else
      {
        id v13 = v11;
        while (1)
        {
          id v14 = objc_msgSend(v13, sel_superview);

          if (!v14) {
            break;
          }
          id v13 = v14;
          uint64_t v15 = swift_dynamicCastClass();
          if (v15)
          {
            uint64_t v12 = (void *)v15;
            goto LABEL_8;
          }
        }
      }
    }
  }
  if ((a2 & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v16 = *(void *)((char *)v5 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v16)
  {
    __break(1u);
    return;
  }
  uint64_t v17 = (void *)(v16 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (*(void *)(*v17 + 16)) {
    goto LABEL_18;
  }
  if (*(void *)(v17[1] + 16)) {
    goto LABEL_18;
  }
  uint64_t v18 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v5) + 0x320))();
  if (v18)
  {
    uint64_t v19 = v18;
    unsigned int v20 = objc_msgSend(v18, sel__hasSelection);

    if (v20) {
      goto LABEL_18;
    }
  }
  *(void *)&v42.CGFloat d = &type metadata for PencilAndPaperFeatureFlags;
  *(void *)&v42.tCGFloat x = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v42.a) = 0;
  char v21 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
  if ((v21 & 1) == 0)
  {
LABEL_18:
    AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
  }
  else
  {
    uint64_t v22 = *(void *)((char *)v5 + direct field offset for Canvas.editMenuInteractionDelegate);
    if (v22 && *(unsigned char *)(v22 + direct field offset for CanvasEditMenuDelegate.editMenuIsPresented) == 1)
    {
      objc_msgSend(*(id *)((char *)v5 + direct field offset for Canvas.editMenuInteraction), sel_dismissMenu);
      return;
    }
    uint64_t v23 = *(void **)((char *)v5 + direct field offset for Canvas._editingView);
    if (v23)
    {
      uint64_t v24 = *(_UNKNOWN ***)((char *)v5 + direct field offset for Canvas._editingView + 8);
      id v25 = *(id *)((char *)v5 + direct field offset for Canvas._editingView);
    }
    else
    {
      id v25 = *(id *)((char *)v5 + direct field offset for Canvas.paperView);
      uint64_t v24 = &protocol witness table for ContainerCanvasElementView<A>;
    }
    uint64_t ObjectType = swift_getObjectType();
    id v27 = (uint64_t (*)(uint64_t, _UNKNOWN **))v24[2];
    id v28 = v23;
    double v29 = (char *)v27(ObjectType, v24);

    if (!v29) {
      goto LABEL_35;
    }
    objc_msgSend(v29, sel_convertPoint_fromCoordinateSpace_, v5, a3, a4);
    CGFloat v31 = v30;
    CGFloat v33 = v32;
    objc_msgSend(v29, sel_drawingTransform);
    CGAffineTransformInvert(&v41, &v42);
    CGAffineTransform v42 = v41;
    v44.CGFloat x = v31;
    v44.CGFloat y = v33;
    CGPoint v34 = CGPointApplyAffineTransform(v44, &v42);
    uint64_t v35 = *(void *)&v29[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
    if (!v35
      || (uint64_t v36 = *(void **)(v35 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController)) == 0)
    {

LABEL_35:
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIEditMenuConfiguration);
      memset(&v42, 0, 40);
      uint64_t v38 = (void *)UIEditMenuConfiguration.init(identifier:sourcePoint:)();
      id v39 = *(id *)((char *)v5 + direct field offset for Canvas.editMenuInteraction);
      objc_msgSend(v39, sel_presentEditMenuWithConfiguration_, v38);

      return;
    }
    unsigned __int8 v37 = objc_msgSend(v36, sel_handleSingleTapAtDrawingLocation_, v34.x, v34.y);

    if ((v37 & 1) == 0) {
      goto LABEL_35;
    }
  }
}

void specialized Canvas.tapCanvasElement(_:modifierFlags:)(void *a1, unint64_t a2, uint64_t *a3)
{
  double v4 = v3;
  unint64_t v141 = a2;
  uint64_t v139 = type metadata accessor for Logger();
  uint64_t v142 = *(void *)(v139 - 8);
  MEMORY[0x270FA5388](v139);
  double v137 = (char *)&v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  CGFloat v138 = (char *)&v133 - v9;
  uint64_t v143 = 0;
  uint64_t v10 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v140 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  id v13 = (char *)&v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v15 = *(void *)(v14 - 8);
  v16.n128_f64[0] = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *a1) + 0x220))(v16) & 1) == 0) {
    return;
  }
  if ((a3 & 1) != 0 || (v141 & 0x120000) == 0)
  {
    uint64_t v38 = a1;
    uint64_t v39 = specialized CanvasMembers.init(_:)(v38);
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    char v45 = v44;

    AnyCanvas.selection.setter(v39, v41, v43, v45 & 1);
    goto LABEL_91;
  }
  uint64_t v136 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  uint64_t v19 = *(uint64_t *)((char *)&v3->isa + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  unint64_t v141 = (unint64_t)v3;
  if (!v19)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  unsigned int v20 = (uint64_t *)(v19 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  uint64_t v21 = v20[1];
  uint64_t v134 = *v20;
  uint64_t v135 = v21;
  a3 = *(uint64_t **)((*MEMORY[0x263F8EED0] & *a1) + 0xE8);
  double v4 = ((*MEMORY[0x263F8EED0] & *a1) + 232);
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t))a3)(v22);
  SharedTagged_9.tag.getter();
  uint64_t v148 = v144;
  char v149 = v145;
  MEMORY[0x21054BDF0](v11);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v140 + 8))(v13, v11);
  char v23 = specialized Set.contains(_:)((uint64_t)v18, v134);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = v136;
  id v25 = *(unsigned char **)(v141 + v136);
  if ((v23 & 1) == 0)
  {
    if (!v25)
    {
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
    a3 = &OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    uint64_t v46 = *(void *)&v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
    uint64_t v47 = *(void *)&v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
    double v4 = *(NSObject **)&v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
    unsigned __int8 v48 = v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
    uint64_t v144 = v46;
    uint64_t v145 = v47;
    uint64_t v146 = v4;
    unsigned __int8 v147 = v48;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v49 = v25;
    CanvasMembers.insert(_:)(a1);
    CanvasElementResizeView.selection.setter(v144, v145, (uint64_t)v146, v147);

    uint64_t v50 = *(void *)(v141 + v24);
    if (!v50)
    {
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
      goto LABEL_114;
    }
    uint64_t v51 = v24;
    uint64_t v52 = v50 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    uint64_t v53 = *(void *)v52;
    uint64_t v54 = *(void *)(v52 + 8);
    id v55 = *(NSObject **)(v52 + 16);
    char v56 = *(unsigned char *)(v52 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (specialized static Set.== infix(_:_:)(v46, v53))
    {
      char v57 = specialized static Set.== infix(_:_:)(v47, v54);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v57)
      {
        if (v48)
        {
          if (v56) {
            goto LABEL_60;
          }
        }
        else
        {
          if (v4 == v55) {
            char v99 = v56;
          }
          else {
            char v99 = 1;
          }
          if ((v99 & 1) == 0) {
            goto LABEL_60;
          }
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for miniMenuLogger != -1) {
      swift_once();
    }
    uint64_t v65 = v139;
    uint64_t v66 = __swift_project_value_buffer(v139, (uint64_t)miniMenuLogger);
    double v67 = v137;
    (*(void (**)(char *, uint64_t, uint64_t))(v142 + 16))(v137, v66, v65);
    unint64_t v68 = v141;
    double v4 = (id)v141;
    id v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 134217984;
      uint64_t v72 = *(void *)(v68 + v51);
      if (!v72)
      {
LABEL_115:

        __break(1u);
        goto LABEL_116;
      }
      double v73 = v71;
      uint64_t v144 = *(void *)(*(void *)(v72 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_20C2D7000, v69, v70, "Changing selection to have %ld elements", v73, 0xCu);
      MEMORY[0x210550270](v73, -1, -1);
      double v67 = v137;
    }
    else
    {

      id v69 = v4;
    }

    uint64_t v86 = (*(uint64_t (**)(char *, uint64_t))(v142 + 8))(v67, v65);
    MEMORY[0x270FA5388](v86);
    *(&v133 - 2) = (uint64_t)v4;
    AnyCanvas.updateCanvasState(_:)();
    if ([v4 isFirstResponder]) {
      goto LABEL_79;
    }
    id v87 = *(void **)(v141 + v51);
    if (!v87)
    {
LABEL_117:
      __break(1u);
      return;
    }
    id v88 = v87;
    uint64_t v89 = swift_bridgeObjectRetain();
    unint64_t v90 = specialized Sequence.compactMap<A>(_:)(v89, (uint64_t)v88);

    swift_bridgeObjectRelease();
    if (v90 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v91 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v91 = *(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v91) {
      goto LABEL_79;
    }
    uint64_t v92 = v4;
    id v93 = [v92 window];
    if (v93)
    {
      double v94 = v93;
      id v95 = objc_msgSend(self, sel_activeToolPickerForWindow_, v93);
      if (v95)
      {
        int v96 = v95;
        id v97 = [v95 _visibilityUpdatesEnabled];
        [v96 _setVisibilityUpdatesEnabled:0];
        [v92 becomeFirstResponder];
        [v96 _setVisibilityUpdatesEnabled:v97];

        uint64_t v92 = v96;
LABEL_78:

LABEL_79:
        double v112 = *(Class *)((char *)&v4->isa + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
        if (v112)
        {
          id v113 = v112;
          HandwritingReflowView.updateForNewSelection()();
        }
        CGFloat v114 = (char *)v4 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
        swift_beginAccess();
        if (MEMORY[0x210550400](v114))
        {
          uint64_t v115 = *((void *)v114 + 1);
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(NSObject *, uint64_t, uint64_t))(v115 + 8))(v4, ObjectType, v115);
          swift_unknownObjectRelease();
        }
        specialized Canvas.updateToolPickerContextualEditingView()();
        a3 = *(uint64_t **)((*MEMORY[0x263F8EED0] & (uint64_t)v4->isa) + 0x320);
        CGFloat v117 = (void *)((uint64_t (*)(void))a3)();
        if (v117)
        {
          double v118 = v117;
          if (objc_msgSend(v117, sel_respondsToSelector_, sel__externalElementsSelectionDidChange)) {
            objc_msgSend(v118, sel__externalElementsSelectionDidChange);
          }
        }
        id v119 = [v4 setNeedsLayout];
        uint64_t v120 = *(void *)(v141 + v51);
        if (!v120) {
          goto LABEL_113;
        }
        CGFloat v121 = (void *)(v120 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
        if (*(void *)(*v121 + 16) || *(void *)(v121[1] + 16))
        {
          double v4 = v141;
        }
        else
        {
          CGFloat v132 = (void *)((uint64_t (*)(id))a3)(v119);
          objc_msgSend(v132, sel__clearSelectionIfNecessary);

          double v4 = v141;
        }
        goto LABEL_91;
      }
    }
    [v92 becomeFirstResponder];
    goto LABEL_78;
  }
  if (!v25)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  a3 = &OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  uint64_t v26 = *(void *)&v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  uint64_t v27 = *(void *)&v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
  double v4 = *(NSObject **)&v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
  unsigned __int8 v28 = v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
  uint64_t v144 = v26;
  uint64_t v145 = v27;
  uint64_t v146 = v4;
  unsigned __int8 v147 = v28;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  double v29 = v25;
  CanvasMembers.remove(_:)(a1);
  CanvasElementResizeView.selection.setter(v144, v145, (uint64_t)v146, v147);

  uint64_t v30 = *(void *)(v141 + v24);
  if (!v30)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  uint64_t v31 = v24;
  uint64_t v32 = v30 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  uint64_t v33 = *(void *)v32;
  uint64_t v34 = *(void *)(v32 + 8);
  uint64_t v35 = *(NSObject **)(v32 + 16);
  int v36 = *(unsigned __int8 *)(v32 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (specialized static Set.== infix(_:_:)(v26, v33))
  {
    char v37 = specialized static Set.== infix(_:_:)(v27, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v37)
    {
      if (v28)
      {
        if (v36)
        {
LABEL_60:
          double v4 = v141;
          goto LABEL_91;
        }
      }
      else
      {
        if (v4 == v35) {
          char v98 = v36;
        }
        else {
          char v98 = 1;
        }
        if ((v98 & 1) == 0) {
          goto LABEL_60;
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for miniMenuLogger != -1) {
    swift_once();
  }
  uint64_t v58 = v139;
  uint64_t v59 = __swift_project_value_buffer(v139, (uint64_t)miniMenuLogger);
  (*(void (**)(char *, uint64_t, uint64_t))(v142 + 16))(v138, v59, v58);
  double v4 = v141;
  a3 = (uint64_t *)(id)v141;
  id v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v62 = 134217984;
    uint64_t v63 = *(uint64_t *)((char *)&v4->isa + v31);
    if (!v63)
    {
LABEL_114:

      __break(1u);
      goto LABEL_115;
    }
    uint64_t v64 = v62;
    uint64_t v144 = *(void *)(*(void *)(v63 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_20C2D7000, v60, v61, "Changing selection to have %ld elements", v64, 0xCu);
    MEMORY[0x210550270](v64, -1, -1);
  }
  else
  {

    id v60 = a3;
  }

  uint64_t v74 = (*(uint64_t (**)(char *, uint64_t))(v142 + 8))(v138, v58);
  MEMORY[0x270FA5388](v74);
  *(&v133 - 2) = (uint64_t)a3;
  AnyCanvas.updateCanvasState(_:)();
  if (objc_msgSend(a3, sel_isFirstResponder)) {
    goto LABEL_64;
  }
  id v75 = *(Class *)((char *)&v4->isa + v31);
  if (!v75)
  {
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  id v76 = v75;
  uint64_t v77 = swift_bridgeObjectRetain();
  unint64_t v78 = specialized Sequence.compactMap<A>(_:)(v77, (uint64_t)v76);

  swift_bridgeObjectRelease();
  if (v78 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v79 = *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v79) {
    goto LABEL_64;
  }
  char v80 = a3;
  id v81 = objc_msgSend(v80, sel_window);
  if (!v81) {
    goto LABEL_62;
  }
  double v82 = v81;
  id v83 = objc_msgSend(self, sel_activeToolPickerForWindow_, v81);
  if (!v83)
  {

LABEL_62:
    objc_msgSend(v80, sel_becomeFirstResponder);
    goto LABEL_63;
  }
  id v84 = v83;
  id v85 = objc_msgSend(v83, sel__visibilityUpdatesEnabled);
  objc_msgSend(v84, sel__setVisibilityUpdatesEnabled_, 0);
  objc_msgSend(v80, sel_becomeFirstResponder);
  double v4 = v141;
  objc_msgSend(v84, sel__setVisibilityUpdatesEnabled_, v85);

  char v80 = (uint64_t *)v84;
LABEL_63:

LABEL_64:
  uint64_t v100 = *(void **)((char *)a3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
  if (v100)
  {
    id v101 = v100;
    HandwritingReflowView.updateForNewSelection()();
  }
  int v102 = (char *)a3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
  swift_beginAccess();
  if (MEMORY[0x210550400](v102))
  {
    uint64_t v103 = *((void *)v102 + 1);
    uint64_t v104 = swift_getObjectType();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v103 + 8))(a3, v104, v103);
    swift_unknownObjectRelease();
  }
  specialized Canvas.updateToolPickerContextualEditingView()();
  objc_super v105 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a3) + 0x320);
  objc_super v106 = (void *)v105();
  if (v106)
  {
    CGFloat v107 = v106;
    if (objc_msgSend(v106, sel_respondsToSelector_, sel__externalElementsSelectionDidChange)) {
      objc_msgSend(v107, sel__externalElementsSelectionDidChange);
    }
  }
  id v108 = objc_msgSend(a3, sel_setNeedsLayout);
  uint64_t v109 = *(uint64_t *)((char *)&v4->isa + v31);
  if (!v109) {
    goto LABEL_112;
  }
  double v110 = (void *)(v109 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (!*(void *)(*v110 + 16) && !*(void *)(v110[1] + 16))
  {
    CGFloat v111 = (void *)((uint64_t (*)(id))v105)(v108);
    objc_msgSend(v111, sel__clearSelectionIfNecessary);
  }
LABEL_91:
  a3 = (uint64_t *)OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  double v122 = *(Class *)((char *)&v4->isa + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v122)
  {
    __break(1u);
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  id v123 = v122;
  uint64_t v124 = swift_bridgeObjectRetain();
  unint64_t v125 = specialized Sequence.compactMap<A>(_:)(v124, (uint64_t)v123);

  swift_bridgeObjectRelease();
  if (v125 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v126 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v126 = *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v126)
  {
    type metadata accessor for Analytics();
    swift_initStaticObject();
    id v127 = *(void **)((char *)a3 + (void)v4);
    if (v127)
    {
      id v128 = v127;
      uint64_t v129 = swift_bridgeObjectRetain();
      unint64_t v130 = specialized Sequence.compactMap<A>(_:)(v129, (uint64_t)v128);

      swift_bridgeObjectRelease();
      if (v130 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v131 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v131 = *(void *)((v130 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      Analytics.recordDidMakeSelection(type:contentType:)(0, v131 > 1);
      return;
    }
    goto LABEL_106;
  }
}

void specialized Canvas.startCheckingForOldEraserStrokes()()
{
  uint64_t v3 = *(void *)(v1 + direct field offset for Canvas.eraserCheckingIndex);
  BOOL v4 = __OFADD__(v3, 1);
  uint64_t v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v0 = v1;
  *(void *)(v1 + direct field offset for Canvas.eraserCheckingIndex) = v5;
  uint64_t v2 = direct field offset for Canvas.removeOldEraserStrokesTimer;
  if (*(void *)(v1 + direct field offset for Canvas.removeOldEraserStrokesTimer)) {
    return;
  }
  if (one-time initialization token for logger != -1) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_20C2D7000, v7, v8, "Start checking for old eraser strokes", v9, 2u);
    MEMORY[0x210550270](v9, -1, -1);
  }

  uint64_t v10 = self;
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v15[4] = partial apply for specialized closure #1 in Canvas.startCheckingForOldEraserStrokes();
  v15[5] = v11;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
  v15[3] = &block_descriptor_374;
  uint64_t v12 = _Block_copy(v15);
  swift_release();
  id v13 = objc_msgSend(v10, sel_scheduledTimerWithTimeInterval_repeats_block_, 1, v12, 30.0);
  _Block_release(v12);
  uint64_t v14 = *(void **)(v0 + v2);
  *(void *)(v0 + v2) = v13;
}

void specialized Canvas.mergeToCanvasElements()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v75 = *(void *)(v2 - 8);
  uint64_t v76 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v74 = (char *)v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  if (!*(void *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView])
  {
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v9 = v0;
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = specialized _NativeSet.filter(_:)(v10, v9);
  v71[1] = 0;

  uint64_t v12 = *(char **)&v1[v8];
  if (!v12)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v13 = v8;
  uint64_t v79 = v5;
  char v80 = v9;
  unint64_t v78 = v7;
  uint64_t v14 = *(void *)&v12[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  uint64_t v15 = *(void *)&v12[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
  uint64_t v7 = *(char **)&v12[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
  int v16 = v12[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  uint64_t v17 = v12;
  CanvasElementResizeView.selection.setter(v11, v15, (uint64_t)v7, v16);

  uint64_t v72 = v1;
  uint64_t v73 = v13;
  uint64_t v18 = *(void *)&v1[v13];
  if (!v18)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v77 = v4;
  uint64_t v19 = v18 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  uint64_t v20 = *(void *)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  uint64_t v22 = *(char **)(v19 + 16);
  int v23 = *(unsigned __int8 *)(v19 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Set.== infix(_:_:)(v14, v20) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  char v24 = specialized static Set.== infix(_:_:)(v15, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0) {
    goto LABEL_10;
  }
  if (v16)
  {
    if (v23) {
      goto LABEL_44;
    }
LABEL_10:
    if (one-time initialization token for miniMenuLogger != -1) {
      swift_once();
    }
    uint64_t v25 = v76;
    uint64_t v26 = __swift_project_value_buffer(v76, (uint64_t)miniMenuLogger);
    unsigned __int8 v28 = v74;
    uint64_t v27 = v75;
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v74, v26, v25);
    uint64_t v7 = v80;
    double v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = v72;
    uint64_t v33 = v73;
    if (v31)
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 134217984;
      uint64_t v35 = *(void *)&v32[v33];
      if (!v35)
      {
LABEL_54:

        __break(1u);
        goto LABEL_55;
      }
      int v36 = v34;
      uint64_t v81 = *(void *)(*(void *)(v35 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_20C2D7000, v29, v30, "Changing selection to have %ld elements", v36, 0xCu);
      MEMORY[0x210550270](v36, -1, -1);
    }
    else
    {
    }
    uint64_t v37 = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v28, v25);
    MEMORY[0x270FA5388](v37);
    v71[-2] = v7;
    AnyCanvas.updateCanvasState(_:)();
    if (objc_msgSend(v7, sel_isFirstResponder)) {
      goto LABEL_32;
    }
    uint64_t v38 = *(void **)&v32[v33];
    if (!v38)
    {
LABEL_55:
      __break(1u);
      return;
    }
    id v39 = v38;
    uint64_t v40 = swift_bridgeObjectRetain();
    unint64_t v41 = specialized Sequence.compactMap<A>(_:)(v40, (uint64_t)v39);

    swift_bridgeObjectRelease();
    if (v41 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v42) {
      goto LABEL_32;
    }
    uint64_t v43 = v7;
    id v44 = objc_msgSend(v43, sel_window);
    if (v44)
    {
      char v45 = v44;
      id v46 = objc_msgSend(self, sel_activeToolPickerForWindow_, v44);
      if (v46)
      {
        uint64_t v47 = v46;
        id v48 = objc_msgSend(v46, sel__visibilityUpdatesEnabled);
        objc_msgSend(v47, sel__setVisibilityUpdatesEnabled_, 0);
        objc_msgSend(v43, sel_becomeFirstResponder);
        objc_msgSend(v47, sel__setVisibilityUpdatesEnabled_, v48);

        uint64_t v43 = (char *)v47;
LABEL_31:

LABEL_32:
        uint64_t v50 = *(void **)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
        if (v50)
        {
          id v51 = v50;
          HandwritingReflowView.updateForNewSelection()();
        }
        uint64_t v52 = &v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate];
        swift_beginAccess();
        if (MEMORY[0x210550400](v52))
        {
          uint64_t v53 = *((void *)v52 + 1);
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(char *, uint64_t, uint64_t))(v53 + 8))(v7, ObjectType, v53);
          swift_unknownObjectRelease();
        }
        specialized Canvas.updateToolPickerContextualEditingView()();
        id v55 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v7) + 0x320);
        char v56 = (void *)v55();
        if (v56)
        {
          char v57 = v56;
          if (objc_msgSend(v56, sel_respondsToSelector_, sel__externalElementsSelectionDidChange)) {
            objc_msgSend(v57, sel__externalElementsSelectionDidChange);
          }
        }
        id v58 = objc_msgSend(v7, sel_setNeedsLayout);
        uint64_t v59 = *(void *)&v32[v33];
        if (v59)
        {
          id v60 = (void *)(v59 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
          if (!*(void *)(*v60 + 16) && !*(void *)(v60[1] + 16))
          {
            os_log_type_t v61 = (void *)((uint64_t (*)(id))v55)(v58);
            objc_msgSend(v61, sel__clearSelectionIfNecessary);
          }
          goto LABEL_44;
        }
        goto LABEL_53;
      }
    }
    objc_msgSend(v43, sel_becomeFirstResponder);
    goto LABEL_31;
  }
  if (v7 == v22) {
    char v49 = v23;
  }
  else {
    char v49 = 1;
  }
  if (v49) {
    goto LABEL_10;
  }
LABEL_44:
  id v62 = v80;
  uint64_t v63 = *(void **)&v80[direct field offset for Canvas.paperView];
  uint64_t v64 = (char *)v63 + *(void *)((*MEMORY[0x263F8EED0] & *v63) + 0x380);
  swift_beginAccess();
  uint64_t v66 = v78;
  uint64_t v65 = v79;
  uint64_t v67 = v77;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v78, v64, v77);
  swift_beginAccess();
  type metadata accessor for Paper();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  unint64_t v68 = v63;
  LOBYTE(v64) = Capsule.merge<A>(_:)();
  uint64_t v69 = swift_endAccess();
  if ((v64 & 1) != 0
    || (uint64_t v69 = MEMORY[0x210550400]((char *)v68 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) == 0)
  {
    (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v68) + 0x488))(v69);
  }
  else
  {
    os_log_type_t v70 = (void *)v69;

    unint64_t v68 = v70;
  }

  (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
  objc_msgSend(v62, sel_setNeedsLayout);
}

void specialized Canvas.updateToolPickerContextualEditingView()()
{
  uint64_t v1 = *(void **)((char *)v0 + direct field offset for Canvas._canvasElementController);
  if (v1)
  {
    id v18 = *(id *)((char *)v0 + direct field offset for Canvas._canvasElementController);
LABEL_3:
    id v2 = v1;
    CanvasElementController.updateToolPickerContextualEditingView()();
    uint64_t v3 = v18;
    goto LABEL_4;
  }
  uint64_t v4 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x320);
  uint64_t v5 = v4();
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    swift_getObjectType();
    uint64_t v7 = swift_conformsToProtocol2();
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v7) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 0;
    }
    if (v9)
    {
      uint64_t ObjectType = swift_getObjectType();
      id v18 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 48))(ObjectType, v8);

      uint64_t v1 = 0;
      goto LABEL_3;
    }
  }
  uint64_t v11 = v4();
  if (!v11) {
    return;
  }
  id v19 = (id)v11;
  swift_getObjectType();
  uint64_t v12 = swift_conformsToProtocol2();
  BOOL v13 = v12 == 0;
  if (v12) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v3 = v19;
  if (v13) {
    id v15 = 0;
  }
  else {
    id v15 = v19;
  }
  if (v15)
  {
    uint64_t v16 = swift_getObjectType();
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 48))(v16, v14);
    CanvasElementController.updateToolPickerContextualEditingView()();

    uint64_t v3 = (void *)v17;
  }
LABEL_4:
}

void specialized Canvas.setupBandSelection()()
{
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = MEMORY[0x263F8EE88];
  *(void *)(v1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = 6;
  *(unsigned char *)(v1 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  uint64_t v3 = swift_allocBox();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for PKDrawing();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v7;
  v8[3] = v1;
  _OWORD v8[4] = v3;
  id v9 = objc_allocWithZone(MEMORY[0x263F824A0]);
  id v18 = partial apply for specialized closure #1 in Canvas.setupBandSelection();
  id v19 = v8;
  uint64_t v14 = MEMORY[0x263EF8330];
  uint64_t v15 = 1107296256;
  uint64_t v16 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
  uint64_t v17 = &block_descriptor_5;
  uint64_t v10 = _Block_copy(&v14);
  swift_retain();
  swift_retain();
  swift_retain();
  id v11 = objc_msgSend(v9, sel_initWithSelectionHandler_, v10);
  _Block_release(v10);
  swift_release();
  swift_release();
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v18 = partial apply for specialized closure #2 in Canvas.setupBandSelection();
  id v19 = (void *)v12;
  uint64_t v14 = MEMORY[0x263EF8330];
  uint64_t v15 = 1107296256;
  uint64_t v16 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction, @unowned CGPoint) -> (@unowned Bool);
  uint64_t v17 = &block_descriptor_275;
  BOOL v13 = _Block_copy(&v14);
  swift_release();
  objc_msgSend(v11, sel_setShouldBeginHandler_, v13);
  _Block_release(v13);
  objc_msgSend(v0, sel_addInteraction_, v11);
  swift_release();
  swift_release();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t (*v18)(uint64_t, double, double);
  void *v19;

  uint64_t v1 = swift_allocObject();
  uint64_t v2 = MEMORY[0x263F8EE88];
  *(void *)(v1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = 6;
  *(unsigned char *)(v1 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  uint64_t v3 = swift_allocBox();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for PKDrawing();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v7;
  v8[3] = v1;
  _OWORD v8[4] = v3;
  id v9 = objc_allocWithZone(MEMORY[0x263F824A0]);
  id v18 = (uint64_t (*)(uint64_t, double, double))partial apply for specialized closure #1 in Canvas.setupBandSelection();
  id v19 = v8;
  uint64_t v14 = MEMORY[0x263EF8330];
  uint64_t v15 = 1107296256;
  uint64_t v16 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
  uint64_t v17 = &block_descriptor_410;
  uint64_t v10 = _Block_copy(&v14);
  swift_retain();
  swift_retain();
  swift_retain();
  id v11 = objc_msgSend(v9, sel_initWithSelectionHandler_, v10);
  _Block_release(v10);
  swift_release();
  swift_release();
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v18 = partial apply for specialized closure #2 in Canvas.setupBandSelection();
  id v19 = (void *)v12;
  uint64_t v14 = MEMORY[0x263EF8330];
  uint64_t v15 = 1107296256;
  uint64_t v16 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction, @unowned CGPoint) -> (@unowned Bool);
  uint64_t v17 = &block_descriptor_414;
  BOOL v13 = _Block_copy(&v14);
  swift_release();
  objc_msgSend(v11, sel_setShouldBeginHandler_, v13);
  _Block_release(v13);
  objc_msgSend(v0, sel_addInteraction_, v11);
  swift_release();
  swift_release();
}

uint64_t specialized Canvas.tool.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PKInkingTool.InkType();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PKInk();
  uint64_t v8 = *(void *)(v7 - 8);
  v9.n128_f64[0] = MEMORY[0x270FA5388](v7);
  id v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)(*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *v1) + 0x320))(v9);
  if (v12)
  {
    BOOL v13 = v12;
    id v14 = [v12 ink];

    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
    PKInk.tool.getter((uint64_t *)v20);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return outlined init with take of FindResult(v20, (uint64_t)a1);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F14A48], v3);
    id v16 = objc_msgSend(self, sel_blackColor);
    PKInk.init(_:color:)();
    uint64_t v17 = type metadata accessor for PKInkingTool();
    uint64_t v18 = MEMORY[0x263F14A50];
    a1[3] = v17;
    a1[4] = v18;
    __swift_allocate_boxed_opaque_existential_1(a1);
    return PKInkingTool.init(ink:width:)();
  }
}

void specialized Canvas.stopCheckingForOldEraserStrokes(index:)(uint64_t a1)
{
  if (*(void *)(v1 + direct field offset for Canvas.eraserCheckingIndex) == a1)
  {
    uint64_t v2 = v1;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)logger);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_20C2D7000, v4, v5, "Stopped checking for old eraser strokes", v6, 2u);
      MEMORY[0x210550270](v6, -1, -1);
    }

    uint64_t v7 = direct field offset for Canvas.removeOldEraserStrokesTimer;
    objc_msgSend(*(id *)(v2 + direct field offset for Canvas.removeOldEraserStrokesTimer), sel_invalidate);
    uint64_t v8 = *(void **)(v2 + v7);
    *(void *)(v2 + v7) = 0;
  }
}

uint64_t specialized Canvas.removeOldEraserStrokes()()
{
  uint64_t v1 = v0;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v29 = *(void *)(v33 - 8);
  uint64_t v2 = *(void *)(v29 + 64);
  MEMORY[0x270FA5388](v33);
  uint64_t v32 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v3 - 8);
  os_log_type_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v28 = v5;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  __n128 v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v27 - v11;
  static Date.now.getter();
  Date.addingTimeInterval(_:)();
  BOOL v13 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t v30 = v7 + 8;
  BOOL v31 = v13;
  v13(v9, v6);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v5, 1, 1, v14);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v16 = *(void *)(v1 + direct field offset for Canvas.paperView)
      + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v1 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  uint64_t v17 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v16, v33);
  uint64_t v18 = v12;
  uint64_t v19 = v12;
  uint64_t v20 = v6;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v19, v6);
  uint64_t v21 = v17;
  unint64_t v22 = (*(unsigned __int8 *)(v17 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v23 = (v2 + *(unsigned __int8 *)(v7 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  char v24 = (char *)swift_allocObject();
  *((void *)v24 + 2) = 0;
  *((void *)v24 + 3) = 0;
  *((void *)v24 + 4) = v15;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(&v24[v22], v32, v33);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v24[v23], v9, v20);
  uint64_t v25 = (uint64_t)v28;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v28, (uint64_t)&async function pointer to partial apply for specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), (uint64_t)v24);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?(v25, &demangling cache variable for type metadata for TaskPriority?);
  return v31(v18, v20);
}

uint64_t ResizeInfo.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResizeInfo()
{
  return self;
}

id ResizeGestureRecognizer.init(target:action:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v16, &demangling cache variable for type metadata for Any?);
  uint64_t v5 = v17;
  if (v17)
  {
    uint64_t v6 = __swift_project_boxed_opaque_existential_1(v16, v17);
    uint64_t v7 = *(void *)(v5 - 8);
    double v8 = MEMORY[0x270FA5388](v6);
    uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v7 + 16))(v10, v8);
    uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (objc_class *)type metadata accessor for ResizeGestureRecognizer();
  v15.receiver = v2;
  v15.super_class = v12;
  id v13 = objc_msgSendSuper2(&v15, sel_initWithTarget_action_, v11, a2);
  swift_unknownObjectRelease();
  outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for Any?);
  return v13;
}

id ResizeGestureRecognizer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ResizeGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ResizeGestureRecognizer()
{
  return self;
}

uint64_t PaperTextAttachmentView.dataModelIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v2 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  double v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for CRKeyPath();
  uint64_t v12 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v1;
  uint64_t v15 = *(void *)(v1 + direct field offset for Canvas.paperView)
      + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v1 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v15, v5);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.getter();
  outlined destroy of Paper((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Paper);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v11, 1, v16) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    uint64_t v18 = v21 + direct field offset for PaperTextAttachmentView.paperDrawingKeyPath;
    swift_beginAccess();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v23, v18, v22);
  }
  else
  {
    Ref.id.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v16);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v23, v14, v22);
  }
}

void @objc PaperTextAttachmentView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized PaperTextAttachmentView.init(coder:)();
}

uint64_t PaperTextAttachmentView.__ivar_destroyer()
{
  outlined destroy of weak AnyContainerCanvasElementView?(v0 + direct field offset for PaperTextAttachmentView.paperViewDelegate);
  swift_release();
  swift_release();
  swift_release();

  uint64_t v1 = v0 + direct field offset for PaperTextAttachmentView.paperDrawingKeyPath;
  uint64_t v2 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectWeakDestroy();

  outlined consume of MagicGenerativePlaygroundContext?(*(void **)(v0 + direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundContextToInitialize), *(id *)(v0 + direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundContextToInitialize + 8), *(unsigned char *)(v0 + direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundContextToInitialize + 16));
  swift_unknownObjectWeakDestroy();
  return swift_unknownObjectRelease();
}

id PaperTextAttachmentView.__deallocating_deinit()
{
  PaperTextAttachmentView.observeTextView(_:)(0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperTextAttachmentView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id @objc PaperTextAttachmentView.__deallocating_deinit(void *a1)
{
  id v1 = a1;
  PaperTextAttachmentView.observeTextView(_:)(0);
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for PaperTextAttachmentView();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc PaperTextAttachmentView.__ivar_destroyer(uint64_t a1)
{
  outlined destroy of weak AnyContainerCanvasElementView?(a1 + direct field offset for PaperTextAttachmentView.paperViewDelegate);
  swift_release();
  swift_release();
  swift_release();

  uint64_t v2 = a1 + direct field offset for PaperTextAttachmentView.paperDrawingKeyPath;
  uint64_t v3 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectWeakDestroy();

  outlined consume of MagicGenerativePlaygroundContext?(*(void **)(a1 + direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundContextToInitialize), *(id *)(a1 + direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundContextToInitialize + 8), *(unsigned char *)(a1 + direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundContextToInitialize + 16));
  swift_unknownObjectWeakDestroy();
  return swift_unknownObjectRelease();
}

void PaperTextAttachmentView.handleMerge(newModel:firstMerge:)(unsigned char *a1, int a2)
{
  int v211 = a2;
  CGRect v216 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  id v189 = &v182[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v202 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v201 = *(void *)(v202 - 8);
  MEMORY[0x270FA5388](v202);
  id v200 = &v182[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v207 = type metadata accessor for CRKeyPath();
  uint64_t v206 = *(void *)(v207 - 8);
  MEMORY[0x270FA5388](v207);
  double v199 = &v182[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  id v190 = &v182[-v7];
  MEMORY[0x270FA5388](v8);
  long long v204 = &v182[-v9];
  uint64_t v213 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x270FA5388](v213);
  CGRect v214 = &v182[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v11);
  double v198 = &v182[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = &v182[-v14];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v16 - 8);
  CGRect v212 = &v182[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v18 - 8);
  double v197 = &v182[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v20);
  v192 = &v182[-v21];
  MEMORY[0x270FA5388](v22);
  CGRect v215 = &v182[-v23];
  MEMORY[0x270FA5388](v24);
  long long v208 = &v182[-v25];
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  long long v205 = &v182[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v29);
  BOOL v31 = &v182[-v30];
  MEMORY[0x270FA5388](v32);
  uint64_t v209 = &v182[-v33];
  uint64_t v34 = type metadata accessor for Date();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v37 = &v182[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x270FA5388](v38 - 8);
  uint64_t v40 = &v182[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v41);
  uint64_t v43 = &v182[-v42];
  if (v211)
  {
    uint64_t v203 = v11;
    static Date.now.getter();
    id v44 = v216;
    specialized Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)((uint64_t)v37, (uint64_t)v43);
    (*(void (**)(unsigned char *, uint64_t))(v35 + 8))(v37, v34);
    v191 = v43;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v43, (uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
    char v45 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v27 + 16);
    uint64_t v195 = v27 + 16;
    v194 = v45;
    v45(v31, v44, v26);
    id v46 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48);
    uint64_t v186 = v27 + 48;
    uint64_t v185 = v46;
    unsigned int v47 = v46(v40, 1, v26);
    uint64_t v196 = v27;
    if (v47 == 1)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v27 + 32))(v209, v31, v26);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v31, v26);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v27 + 32))(v209, v40, v26);
    }
    uint64_t v55 = v207;
    uint64_t v56 = v206;
    uint64_t v184 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    Capsule<>.root.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    uint64_t v57 = (uint64_t)v212;
    CRRegister.wrappedValue.getter();
    outlined destroy of Paper((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Paper);
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
    uint64_t v59 = *(void *)(v58 - 8);
    int v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58);
    uint64_t v193 = v26;
    os_log_type_t v61 = v208;
    if (v60 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      id v62 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v56 + 56);
      uint64_t v63 = v62(v61, 1, 1, v55);
      MEMORY[0x270FA5388](v63);
      uint64_t v64 = v210;
      *(void *)&v182[-16] = v210;
      Capsule.callAsFunction<A>(_:)();
      uint64_t v56 = v206;
      uint64_t v55 = v207;
    }
    else
    {
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      Reference.identity.getter();
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
      id v62 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v56 + 56);
      v62(v61, 0, 1, v55);
      uint64_t v64 = v210;
    }
    uint64_t v65 = (char *)v64 + direct field offset for PaperTextAttachmentView.paperDrawingKeyPath;
    swift_beginAccess();
    uint64_t v66 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v56 + 16);
    uint64_t v67 = v215;
    CGRect v216 = v65;
    uint64_t v188 = v56 + 16;
    v187 = v66;
    v66(v215, v65, v55);
    v62(v67, 0, 1, v55);
    unint64_t v68 = v214;
    uint64_t v69 = (uint64_t)&v214[*(int *)(v213 + 48)];
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v61, (uint64_t)v214, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v67, v69, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    os_log_type_t v70 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v56 + 48);
    if (v70(v68, 1, v55) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v67, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      if (v70((unsigned char *)v69, 1, v55) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v68, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        uint64_t v54 = v210;
LABEL_20:
        uint64_t v75 = direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging;
        if (*((unsigned char *)v54 + direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging) != 1)
        {
          uint64_t v131 = *(void **)((char *)v54 + direct field offset for Canvas.paperView);
          CGFloat v132 = (void *)MEMORY[0x263F8EED0];
          swift_beginAccess();
          _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
          uint64_t v133 = v131;
          uint64_t v120 = v209;
          uint64_t v86 = v193;
          char v134 = Capsule.merge<A>(_:)();
          uint64_t v135 = swift_endAccess();
          if ((v134 & 1) != 0
            || (uint64_t v135 = MEMORY[0x210550400]((char *)v133 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) == 0)
          {
            (*(void (**)(uint64_t))((*v132 & *v133) + 0x488))(v135);
          }
          else
          {
            uint64_t v136 = (void *)v135;

            uint64_t v133 = v136;
          }

          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v137 = type metadata accessor for Logger();
          __swift_project_value_buffer(v137, (uint64_t)logger);
          CGFloat v138 = v54;
          uint64_t v139 = Logger.logObject.getter();
          os_log_type_t v140 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v139, v140))
          {
            unint64_t v141 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)unint64_t v141 = 67109120;
            LODWORD(v217) = *((unsigned __int8 *)v54 + v75);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl(&dword_20C2D7000, v139, v140, "Merging in newModel on first merge. Safe to copy: %{BOOL}d", v141, 8u);
            MEMORY[0x210550270](v141, -1, -1);
          }
          else
          {
          }
          goto LABEL_69;
        }
LABEL_21:
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v76 = type metadata accessor for Logger();
        __swift_project_value_buffer(v76, (uint64_t)logger);
        uint64_t v77 = v54;
        unint64_t v78 = Logger.logObject.getter();
        os_log_type_t v79 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v78, v79))
        {
          char v80 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)char v80 = 67109120;
          uint64_t v55 = v207;
          LODWORD(v217) = *((unsigned __int8 *)&v77->isa
                          + direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl(&dword_20C2D7000, v78, v79, "Switching out our paper with the one from the file bundle. Safe to copy %{BOOL}d", v80, 8u);
          MEMORY[0x210550270](v80, -1, -1);
        }
        else
        {

          unint64_t v78 = v77;
        }

        uint64_t v81 = v197;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v208, (uint64_t)v197, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        if (v70(v81, 1, v55) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v81, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        }
        else
        {
          uint64_t v82 = v206;
          id v83 = v190;
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v206 + 32))(v190, v81, v55);
          id v84 = v204;
          v187(v204, v83, v55);
          id v85 = v216;
          swift_beginAccess();
          (*(void (**)(id, unsigned char *, uint64_t))(v82 + 40))(v85, v84, v55);
          swift_endAccess();
          (*(void (**)(unsigned char *, uint64_t))(v82 + 8))(v83, v55);
        }
        uint64_t v86 = v193;
        id v87 = v205;
        v194(v205, v209, v193);
        uint64_t v88 = direct field offset for Canvas.paperView;
        uint64_t v89 = *(Class *)((char *)&v77->isa + direct field offset for Canvas.paperView);
        unint64_t v90 = (char *)v89 + *(void *)((*MEMORY[0x263F8EED0] & *v89) + 0x380);
        swift_beginAccess();
        uint64_t v91 = v196;
        uint64_t v92 = *(void (**)(char *, unsigned char *, uint64_t))(v196 + 24);
        id v93 = v89;
        v92(v90, v87, v86);
        swift_endAccess();

        double v94 = *(unsigned char **)(v91 + 8);
        double v197 = (unsigned char *)(v91 + 8);
        v192 = v94;
        ((void (*)(unsigned char *, uint64_t))v94)(v87, v86);
        id v95 = [v77 subviews];
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        unint64_t v96 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        id v97 = *(id *)((char *)&v77->isa + v88);
        specialized Collection<>.firstIndex(of:)((uint64_t)v97, v96);
        char v99 = v98;
        int v101 = v100;

        int v102 = (void *)MEMORY[0x263F8EED0];
        swift_bridgeObjectRelease();
        uint64_t v103 = *(Class *)((char *)&v77->isa + v88);
        uint64_t v104 = *v102 & *v103;
        if (*(void *)((char *)v103 + *(void *)(v104 + 0x4C0)))
        {
          CGRect v216 = objc_msgSend(*(id *)((char *)v103 + *(void *)((*v102 & *v103) + 0x4C0)), sel_hashtagAndMentionsDelegate);
          uint64_t v103 = *(Class *)((char *)&v77->isa + v88);
          uint64_t v104 = *v102 & *v103;
        }
        else
        {
          CGRect v216 = 0;
        }
        objc_super v105 = v200;
        objc_super v106 = *(void **)((char *)v103 + *(void *)(v104 + 1216));
        if (v106)
        {
          LODWORD(v215) = objc_msgSend(v106, sel_wantsHashtagDetection);
          uint64_t v103 = *(Class *)((char *)&v77->isa + v88);
          uint64_t v104 = *v102 & *v103;
        }
        else
        {
          LODWORD(v215) = 0;
        }
        CGFloat v107 = *(void **)((char *)v103 + *(void *)(v104 + 1216));
        if (v107)
        {
          LODWORD(v214) = objc_msgSend(v107, sel_wantsMentionDetection);
          uint64_t v103 = *(Class *)((char *)&v77->isa + v88);
          uint64_t v104 = *v102 & *v103;
        }
        else
        {
          LODWORD(v214) = 0;
        }
        id v108 = *(void **)((char *)v103 + *(void *)(v104 + 1216));
        if (v108)
        {
          LODWORD(v213) = objc_msgSend(v108, sel_wantsProofreadingDetection);
          uint64_t v103 = *(Class *)((char *)&v77->isa + v88);
          uint64_t v104 = *v102 & *v103;
        }
        else
        {
          LODWORD(v213) = 0;
        }
        uint64_t v109 = *(void **)((char *)v103 + *(void *)(v104 + 1216));
        id v190 = v99;
        int v183 = v101;
        if (v109)
        {
          LODWORD(v212) = objc_msgSend(v109, sel_isSharedViaICloud);
          uint64_t v103 = *(Class *)((char *)&v77->isa + v88);
        }
        else
        {
          LODWORD(v212) = 0;
        }
        objc_msgSend(v103, sel_removeFromSuperview);
        double v110 = *(char **)((char *)&v77->isa + v88)
             + *(void *)((*v102 & **(void **)((char *)&v77->isa + v88)) + 0x380);
        swift_beginAccess();
        CGFloat v111 = v205;
        v194(v205, v110, v86);
        uint64_t v112 = (uint64_t)v198;
        Capsule<>.root.getter();
        id v113 = v204;
        Capsule<>.rootID.getter();
        LOBYTE(v217) = 0;
        uint64_t v114 = v207;
        v187(v199, v113, v207);
        lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
        SharedTagged_9.init(_:id:)();
        (*(void (**)(unsigned char *, uint64_t))(v206 + 8))(v113, v114);
        outlined destroy of Paper(v112, (uint64_t (*)(void))type metadata accessor for Paper);
        ((void (*)(unsigned char *, uint64_t))v192)(v111, v86);
        SharedTagged_9<>.layout()((uint64_t *)&v217);
        (*(void (**)(unsigned char *, uint64_t))(v201 + 8))(v105, v202);
        uint64_t v115 = v218;
        uint64_t v116 = v219;
        __swift_project_boxed_opaque_existential_1(&v217, v218);
        char v117 = v116 + 8;
        double v118 = *(uint64_t (**)(unsigned char *, NSObject *, void, uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 8);
        uint64_t v119 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
        uint64_t v120 = v209;
        uint64_t v121 = v118(v209, v77, 0, v203, v119, v115, v116);
        if (!v121)
        {
          __break(1u);
          return;
        }
        double v122 = (void *)v121;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElementView<Paper>);
        id v123 = (void *)swift_dynamicCastClassUnconditional();
        specialized Canvas.paperView.setter(v123);

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
        if (v183) {
          uint64_t v124 = 0;
        }
        else {
          uint64_t v124 = v190;
        }
        [v77 insertSubview:*(Class *)((char *)&v77->isa + v88) atIndex:v124];
        id v125 = *(id *)((char *)&v77->isa + v88);
        unint64_t v126 = specialized ContainerCanvasElementView.pencilKitAttachmentViews()();

        if (v126 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v127 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v127) {
            goto LABEL_50;
          }
        }
        else
        {
          uint64_t v127 = *(void *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v127)
          {
LABEL_50:
            if (v127 < 1)
            {
              __break(1u);
              goto LABEL_98;
            }
            uint64_t v128 = 0;
            do
            {
              if ((v126 & 0xC000000000000001) != 0) {
                id v129 = (id)MEMORY[0x21054E050](v128, v126);
              }
              else {
                id v129 = *(id *)(v126 + 8 * v128 + 32);
              }
              unint64_t v130 = v129;
              ++v128;
              objc_msgSend(v129, sel_setHashtagAndMentionsDelegate_, v216);
              objc_msgSend(v130, sel_setWantsHashtagDetection_, v215);
              objc_msgSend(v130, sel_setWantsMentionDetection_, v214);
              objc_msgSend(v130, sel_setWantsProofreadingDetection_, v213);
              objc_msgSend(v130, sel_setIsSharedViaICloud_, v212);
            }
            while (v127 != v128);
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            uint64_t v54 = v210;
            uint64_t v86 = v193;
            uint64_t v120 = v209;
LABEL_69:
            char v117 = 1;
            uint64_t v127 = (uint64_t)v191;
            if (v185(v191, 1, v86) == 1)
            {
LABEL_74:
              *(void *)((char *)v54 + direct field offset for PaperTextAttachmentView.previousLinks) = PaperTextAttachmentView.currentLinksIdentifiers()();
              swift_bridgeObjectRelease();
              *((unsigned char *)v54 + direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging) = 0;
              unsigned __int8 v147 = (char *)v54 + direct field offset for PaperTextAttachmentView.paperBoundsHint;
              *(_OWORD *)unsigned __int8 v147 = 0u;
              *((_OWORD *)v147 + 1) = 0u;
              v147[32] = v117;
              if (!AnyCanvas.isLiveEditing()()
                && !*(void *)((char *)v54 + direct field offset for PaperTextAttachmentView.resizeInfo))
              {
                uint64_t v148 = type metadata accessor for TaskPriority();
                char v149 = v189;
                (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v148 - 8) + 56))(v189, 1, 1, v148);
                type metadata accessor for MainActor();
                id v150 = v54;
                uint64_t v151 = static MainActor.shared.getter();
                uint64_t v152 = swift_allocObject();
                uint64_t v153 = MEMORY[0x263F8F500];
                *(void *)(v152 + 16) = v151;
                *(void *)(v152 + 24) = v153;
                *(void *)(v152 + 32) = v150;
                *(_WORD *)(v152 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 1280;
                uint64_t v154 = (uint64_t)v149;
                uint64_t v127 = (uint64_t)v191;
                _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v154, (uint64_t)&closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)partial apply, v152);
                swift_release();
              }
              (*(void (**)(unsigned char *, uint64_t))(v196 + 8))(v120, v86);
              outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v208, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
              outlined destroy of StocksKitCurrencyCache.Provider?(v127, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
              goto LABEL_78;
            }
            if (one-time initialization token for logger == -1)
            {
LABEL_71:
              uint64_t v142 = type metadata accessor for Logger();
              __swift_project_value_buffer(v142, (uint64_t)logger);
              uint64_t v143 = Logger.logObject.getter();
              os_log_type_t v144 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v143, v144))
              {
                uint64_t v145 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v145 = 0;
                _os_log_impl(&dword_20C2D7000, v143, v144, "Found eraser stroke(s) in model during first merge", v145, 2u);
                uint64_t v146 = v145;
                uint64_t v127 = (uint64_t)v191;
                MEMORY[0x210550270](v146, -1, -1);
              }

              LOBYTE(v217) = 3;
              PaperTextAttachmentView.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)&v217);
              goto LABEL_74;
            }
LABEL_98:
            swift_once();
            goto LABEL_71;
          }
        }
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_69;
      }
    }
    else
    {
      uint64_t v71 = v192;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v68, (uint64_t)v192, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      if (v70((unsigned char *)v69, 1, v55) != 1)
      {
        uint64_t v72 = v204;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v56 + 32))(v204, v69, v55);
        _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
        char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v74 = *(void (**)(unsigned char *, uint64_t))(v56 + 8);
        v74(v72, v55);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v215, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        v74(v71, v55);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v68, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        uint64_t v54 = v210;
        if ((v73 & 1) == 0) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v67, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      (*(void (**)(unsigned char *, uint64_t))(v56 + 8))(v71, v55);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v68, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
    uint64_t v54 = v210;
    goto LABEL_21;
  }
  id v48 = v210;
  char v49 = *(void **)((char *)v210 + direct field offset for Canvas.paperView);
  uint64_t v50 = (void *)MEMORY[0x263F8EED0];
  swift_beginAccess();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  id v51 = v49;
  char v52 = Capsule.merge<A>(_:)();
  uint64_t v53 = (void *)swift_endAccess();
  uint64_t v54 = v48;
  if ((v52 & 1) != 0
    || (uint64_t v53 = (void *)MEMORY[0x210550400]((char *)v51 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) == 0)
  {
    (*(void (**)(void *))((*v50 & *v51) + 0x488))(v53);
  }
  else
  {
  }
LABEL_78:
  v220.origin.CGFloat x = PaperTextAttachmentView.safePaperModelBounds.getter();
  CGFloat x = v220.origin.x;
  CGFloat y = v220.origin.y;
  CGFloat width = v220.size.width;
  CGFloat height = v220.size.height;
  double v159 = CGRectGetHeight(v220);
  if (one-time initialization token for maxTextAttachmentHeightForCheckingInvalidBounds != -1) {
    swift_once();
  }
  if (v159 >= *(double *)&static UIConstants.maxTextAttachmentHeightForCheckingInvalidBounds)
  {
    objc_msgSend(v54, sel_frame);
    double v173 = v172;
    double v175 = v174;
    id v176 = objc_msgSend(v54, sel_frame);
    CGFloat v178 = v177;
    long long v179 = (UIView_optional *)(*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *v54) + 0x1190))(v176);
    if (!v179) {
      long long v179 = (UIView_optional *)objc_msgSend(v54, sel_superview);
    }
    CGSize v180 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v179);

    Swift::Bool v181 = v180.height != v175 || v180.width != v173;
    char v165 = v211;
    v222.origin.CGFloat x = 0.0;
    v222.origin.CGFloat y = v178;
    v222.size.CGFloat width = v180.width;
    v222.size.CGFloat height = v180.height;
    PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v222, v211 & 1, v181, 1);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v160 = type metadata accessor for Logger();
    __swift_project_value_buffer(v160, (uint64_t)logger);
    id v161 = Logger.logObject.getter();
    os_log_type_t v162 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v161, v162))
    {
      uint64_t v163 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v163 = 134217984;
      v221.origin.CGFloat x = x;
      v221.origin.CGFloat y = y;
      v221.size.CGFloat width = width;
      v221.size.CGFloat height = height;
      CGFloat v217 = CGRectGetHeight(v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v161, v162, "Fixing up text attachment bounds from: %f", v163, 0xCu);
      MEMORY[0x210550270](v163, -1, -1);
    }

    Swift::Bool v164 = AnyCanvas.isLiveEditing()();
    char v165 = v211;
    if (!v164 && !*(void *)((char *)v54 + direct field offset for PaperTextAttachmentView.resizeInfo))
    {
      uint64_t v166 = type metadata accessor for TaskPriority();
      uint64_t v167 = (uint64_t)v189;
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v166 - 8) + 56))(v189, 1, 1, v166);
      type metadata accessor for MainActor();
      double v168 = v54;
      uint64_t v169 = static MainActor.shared.getter();
      uint64_t v170 = swift_allocObject();
      uint64_t v171 = MEMORY[0x263F8F500];
      *(void *)(v170 + 16) = v169;
      *(void *)(v170 + 24) = v171;
      *(void *)(v170 + 32) = v168;
      char v165 = v211;
      *(_WORD *)(v170 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 768;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v167, (uint64_t)&closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)partial apply, v170);
      swift_release();
    }
  }
  if ((v165 & 1) == 0) {
    specialized Canvas.startCheckingForOldEraserStrokes()();
  }
}

uint64_t specialized Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v35 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v38 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v33 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v34 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Paper();
  uint64_t v43 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  id v44 = &protocol witness table for Paper;
  swift_getKeyPath();
  uint64_t v39 = v2;
  uint64_t v19 = v41;
  Capsule<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    Ref.subscript.getter();
    specialized PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(v19, (uint64_t)v6);
    uint64_t v25 = v36;
    uint64_t v24 = v37;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v6, 1, v37) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for Date?);
      outlined destroy of Paper((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
      uint64_t v23 = v38;
      uint64_t v22 = v39;
    }
    else
    {
      uint64_t v26 = v34;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v34, v6, v24);
      uint64_t v27 = v35;
      char v28 = static Date.< infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v24);
      outlined destroy of Paper((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
      uint64_t v23 = v38;
      uint64_t v22 = v39;
      if (v28)
      {
        uint64_t v29 = v33;
        uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 16))(v33, v41, v39);
        MEMORY[0x270FA5388](v30);
        *(&v32 - 2) = v27;
        Capsule.callAsFunction<A>(_:)();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        uint64_t v21 = v40;
        (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v40, v29, v22);
        uint64_t v20 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, v20, 1, v22);
      }
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    uint64_t v20 = 1;
    uint64_t v21 = v40;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, v20, 1, v22);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  uint64_t v20 = 1;
  uint64_t v22 = v39;
  uint64_t v21 = v40;
  uint64_t v23 = v38;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, v20, 1, v22);
}

uint64_t closure #1 in PaperTextAttachmentView.handleMerge(newModel:firstMerge:)(uint64_t a1, uint64_t a2)
{
  v21[1] = a1;
  uint64_t v22 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v21 - v12;
  long long v14 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  v23[0] = *MEMORY[0x263F001A0];
  v23[1] = v14;
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  swift_retain();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  CROrderedSet.init()();
  *(void *)&v7[*(int *)(v5 + 24)] = MEMORY[0x263F8EE80];
  uint64_t v15 = v22 + direct field offset for PaperTextAttachmentView.paperDrawingKeyPath;
  swift_beginAccess();
  uint64_t v16 = type metadata accessor for CRKeyPath();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v4, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v4, 0, 1, v16);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Ref.init<A>(_:_:identity:)();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v13, 0, 1, v18);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v19 = (uint64_t (*)(_OWORD *, void))Capsule.Ref<>.root.modify();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v13, (uint64_t)v10, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  return v19(v23, 0);
}

void PaperTextAttachmentView.createPaperView(paperBundleURL:)(void (*a1)(char *, char *, uint64_t))
{
  uint64_t v2 = v1;
  id v93 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v88 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<Paper>, Error>, NSRunLoop>);
  uint64_t v90 = *(void *)(v5 - 8);
  uint64_t v91 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v89 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x270FA5388](v7 - 8);
  id v85 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v95 = *(void *)(v12 - 8);
  uint64_t v96 = v12;
  MEMORY[0x270FA5388](v12);
  id v87 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v92 = (char *)&v84 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void **)&v1[direct field offset for Canvas.paperView];
  uint64_t v21 = (void *)MEMORY[0x263F8EED0];
  uint64_t v22 = (char *)v20 + *(void *)((*MEMORY[0x263F8EED0] & *v20) + 0x380);
  swift_beginAccess();
  uint64_t v94 = v17;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v22, v16);
  swift_beginAccess();
  type metadata accessor for Paper();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v23 = v20;
  LOBYTE(v17) = Capsule.merge<A>(_:)();
  uint64_t v24 = swift_endAccess();
  if ((v17 & 1) != 0
    || (uint64_t v24 = MEMORY[0x210550400]((char *)v23 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) == 0)
  {
    (*(void (**)(uint64_t))((*v21 & *v23) + 0x488))(v24);
  }
  else
  {
    uint64_t v25 = (void *)v24;

    uint64_t v23 = v25;
  }

  (*(void (**)(char *, uint64_t))(v94 + 8))(v19, v16);
  objc_msgSend(v2, sel_addSubview_, *(void *)&v2[OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView]);
  objc_msgSend(v2, sel_bounds);
  double v27 = v26;
  double v29 = v28;
  double v31 = v30;
  double v33 = v32;
  id v34 = objc_allocWithZone((Class)type metadata accessor for CanvasElementResizeView());
  uint64_t v35 = v2;
  uint64_t v36 = CanvasElementResizeView.init(frame:canvas:)(v35, v27, v29, v31, v33);
  uint64_t v37 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  uint64_t v38 = *(void **)&v35[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  *(void *)&v35[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView] = v36;

  uint64_t v39 = v96;
  if (!*(void *)&v35[v37])
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v35, sel_addSubview_);
  int v101 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v102 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v99) = 1;
  char v40 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
  if (v40)
  {
    objc_msgSend(v35, sel_bounds);
    double v42 = v41;
    double v44 = v43;
    double v46 = v45;
    double v48 = v47;
    id v49 = objc_allocWithZone((Class)type metadata accessor for HandwritingReflowView());
    uint64_t v50 = v35;
    id v51 = HandwritingReflowView.init(frame:canvas:)((uint64_t)v50, v42, v44, v46, v48);
    objc_msgSend(v50, sel_addSubview_, v51);
    char v52 = *(void **)&v50[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
    *(void *)&v50[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView] = v51;
  }
  id v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14BE0]), sel_initAtTop_delegate_, 0, v35);
  uint64_t v54 = direct field offset for PaperTextAttachmentView.bottomResizeView;
  uint64_t v55 = *(void **)&v35[direct field offset for PaperTextAttachmentView.bottomResizeView];
  *(void *)&v35[direct field offset for PaperTextAttachmentView.bottomResizeView] = v53;

  if (!*(void *)&v35[v54]) {
    goto LABEL_18;
  }
  objc_msgSend(v35, sel_addSubview_);
  id v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14BE0]), sel_initAtTop_delegate_, 1, v35);
  uint64_t v57 = direct field offset for PaperTextAttachmentView.topResizeView;
  uint64_t v58 = *(void **)&v35[direct field offset for PaperTextAttachmentView.topResizeView];
  *(void *)&v35[direct field offset for PaperTextAttachmentView.topResizeView] = v56;

  if (!*(void *)&v35[v57])
  {
LABEL_19:
    __break(1u);
    return;
  }
  objc_msgSend(v35, sel_addSubview_);
  PaperTextAttachmentView.setAdjustResizeIndicatorVisible(_:animated:highlightBackground:)((Swift::Bool)objc_msgSend(v35, sel_isFirstResponder), 0, 0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v93, (uint64_t)v11, &demangling cache variable for type metadata for URL?);
  uint64_t v59 = v95;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v11, 1, v39) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    id v93 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
    uint64_t v60 = (uint64_t)v92;
    v93(v92, v11, v96);
    os_log_type_t v61 = *(void **)&v35[OBJC_IVAR____TtC8PaperKit9AnyCanvas_context];
    uint64_t v62 = (uint64_t)v85;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 56))(v85, 1, 1, v16);
    uint64_t v63 = specialized static CRDataStoreBundle<>.paperBundle(_:sync:at:)(v61, v62, v60);
    outlined destroy of StocksKitCurrencyCache.Provider?(v62, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
    uint64_t v64 = swift_allocObject();
    *(unsigned char *)(v64 + 16) = 1;
    uint64_t v94 = v63;
    uint64_t v99 = CRDataStoreBundle.publisher.getter();
    id v98 = objc_msgSend(self, sel_mainRunLoop);
    uint64_t v65 = type metadata accessor for NSRunLoop.SchedulerOptions();
    uint64_t v66 = (uint64_t)v88;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v88, 1, 1, v65);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<Paper>, Error>);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Capsule<Paper>, Error> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<Paper>, Error>);
    lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
    uint64_t v67 = v89;
    Publisher.receive<A>(on:options:)();
    outlined destroy of StocksKitCurrencyCache.Provider?(v66, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

    swift_release();
    uint64_t v68 = v96;
    uint64_t v69 = v95 + 16;
    os_log_type_t v70 = v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v87, v60, v96);
    unint64_t v71 = (*(unsigned __int8 *)(v69 + 64) + 16) & ~(unint64_t)*(unsigned __int8 *)(v69 + 64);
    uint64_t v72 = swift_allocObject();
    v93((char *)(v72 + v71), v70, v68);
    uint64_t v73 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v74 = swift_allocObject();
    *(void *)(v74 + 16) = v73;
    *(void *)(v74 + 24) = v64;
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Capsule<Paper>, Error>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<Paper>, Error>, NSRunLoop>);
    swift_retain();
    uint64_t v75 = v91;
    uint64_t v76 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v67, v75);
    *(void *)&v35[direct field offset for PaperTextAttachmentView.syncCancellable] = v76;
    swift_release();
    uint64_t v77 = *(void **)&v35[direct field offset for PaperTextAttachmentView.textAttachment];
    if (v77)
    {
      id v97 = &unk_26C1F1D20;
      uint64_t v78 = swift_dynamicCastObjCProtocolConditional();
      if (v78) {
        id v79 = v77;
      }
    }
    else
    {
      uint64_t v78 = 0;
    }
    swift_unknownObjectWeakInit();
    char v100 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Canvas<Paper>.PaperViewCanvasPublisher>);
    uint64_t v80 = swift_allocObject();
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v99, v80 + 16, &demangling cache variable for type metadata for Canvas<Paper>.PaperViewCanvasPublisher);
    uint64_t v99 = v80;
    uint64_t v81 = swift_allocObject();
    uint64_t v82 = v94;
    *(void *)(v81 + 16) = v94;
    *(void *)(v81 + 24) = v78;
    swift_unknownObjectRetain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Capsule<Paper>, Never>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type AnyPublisher<Capsule<Paper>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Capsule<Paper>, Never>);
    uint64_t v83 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    *(void *)&v35[direct field offset for PaperTextAttachmentView.saveCancellable] = v83;
    swift_release();
    *(void *)&v35[direct field offset for PaperTextAttachmentView.syncManager] = v82;
    swift_unknownObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v95 + 8))(v92, v68);
    swift_release();
  }
}

void closure #1 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(void **a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  id v10 = v8;
  id v11 = v8;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v22 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_WORD *)(v14 + 12) = 2080;
    uint64_t v21 = (uint64_t)v8;
    id v18 = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Subscribers.Completion<Error>);
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20C2D7000, v12, v13, "Failed to load attachment file: %s. Error: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v15, -1, -1);
    MEMORY[0x210550270](v14, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t closure #2 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v5);
  if (result)
  {
    uint64_t v7 = (void *)result;
    swift_beginAccess();
    PaperTextAttachmentView.handleMerge(newModel:firstMerge:)(a1, *(unsigned __int8 *)(a3 + 16));

    uint64_t result = swift_beginAccess();
    *(unsigned char *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t closure #3 in PaperTextAttachmentView.createPaperView(paperBundleURL:)()
{
  return swift_release_n();
}

void *closure #1 in closure #3 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x210550400](v1);
  if (result)
  {
    uint64_t v3 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, sel__paperDidChangeLocally)) {
      objc_msgSend(v3, sel__paperDidChangeLocally);
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall PaperTextAttachmentView.cleanupViewProviders()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  v7.n128_f64[0] = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *v0) + 0x1190))(v7);
  if (v10)
  {
    id v11 = (void *)v10;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v17 = static OS_dispatch_queue.main.getter();
    uint64_t v18 = v5;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v11;
    aBlock[4] = partial apply for closure #1 in PaperTextAttachmentView.cleanupViewProviders();
    void aBlock[5] = v12;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_337;
    uint64_t v13 = v6;
    uint64_t v14 = _Block_copy(aBlock);
    id v15 = v11;
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v16 = (void *)v17;
    MEMORY[0x21054DA10](0, v9, v4, v14);
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v18);
  }
}

void @objc PaperTextAttachmentView.willMove(toSuperview:)(void *a1, uint64_t a2, void *a3)
{
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for PaperTextAttachmentView();
  uint64_t v4 = (char *)v7.receiver;
  id v5 = a3;
  objc_msgSendSuper2(&v7, sel_willMoveToSuperview_, v5);
  if (*(void *)&v4[direct field offset for PaperTextAttachmentView.textAttachment])
  {
    uint64_t v6 = (void *)swift_dynamicCastObjCProtocolConditional();
    if (v6) {
      objc_msgSend(v6, sel_attachmentView_willMoveToSuperview_, v4, v5);
    }
  }
}

Swift::Void __swiftcall PaperTextAttachmentView.didMoveToSuperview()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PKInk();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(v0, sel_superview, v4);

  if (v7)
  {
    uint64_t v8 = (void *)PaperTextAttachmentView.closestViewController.getter();
    swift_unknownObjectWeakAssign();

    PaperTextAttachmentView.updateFrameForTextContainer(ensureLayout:shouldRedraw:avoidInvalidateLayout:)(0, 1, 1);
  }
  uint64_t v9 = (objc_class *)type metadata accessor for PaperTextAttachmentView();
  v46.receiver = v1;
  v46.super_class = v9;
  objc_msgSendSuper2(&v46, sel_didMoveToSuperview);
  id v10 = objc_msgSend(v1, sel_superview);

  if (v10
    && (uint64_t v11 = direct field offset for PaperTextAttachmentView.linedPaperView,
        !*(void *)&v1[direct field offset for PaperTextAttachmentView.linedPaperView]))
  {
    objc_msgSend(v1, sel_bounds);
    id v20 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LinedPaperView()), sel_initWithFrame_, v16, v17, v18, v19);
    uint64_t v21 = *(void **)&v1[v11];
    *(void *)&v1[v11] = v20;

    uint64_t v22 = *(void **)&v1[v11];
    if (!v22
      || (objc_msgSend(v22, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0), (uint64_t v23 = *(void *)&v1[v11]) == 0))
    {
      __break(1u);
      goto LABEL_24;
    }
    objc_msgSend(v1, sel_insertSubview_atIndex_, v23, 0);
  }
  else
  {
    id v12 = objc_msgSend(v1, sel_superview);

    if (!v12)
    {
      uint64_t v13 = direct field offset for PaperTextAttachmentView.linedPaperView;
      uint64_t v14 = *(void **)&v1[direct field offset for PaperTextAttachmentView.linedPaperView];
      if (v14)
      {
        objc_msgSend(v14, sel_removeFromSuperview);
        id v15 = *(void **)&v1[v13];
      }
      else
      {
        id v15 = 0;
      }
      *(void *)&v1[v13] = 0;
    }
  }
  uint64_t v24 = direct field offset for PaperTextAttachmentView.shouldBecomeFirstResponder;
  if (v1[direct field offset for PaperTextAttachmentView.shouldBecomeFirstResponder] != 1) {
    goto LABEL_22;
  }
  id v25 = objc_msgSend(v1, sel_superview);

  if (!v25) {
    goto LABEL_22;
  }
  v1[v24] = 0;
  id v26 = objc_msgSend(v1, sel_window);

  uint64_t v44 = v2;
  if (!v26) {
    goto LABEL_19;
  }
  id v27 = objc_msgSend(v1, sel_window);
  if (v27)
  {
    double v28 = v27;
    id v26 = objc_msgSend(self, sel_activeToolPickerForWindow_, v27);

    if (v26)
    {
      uint64_t v29 = v3;
      unsigned __int8 v30 = objc_msgSend(v26, sel_isVisible);
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v29 = v3;
    unsigned __int8 v30 = 0;
LABEL_20:
    double v31 = self;
    id v32 = objc_msgSend(v1, sel_window);
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v1;
    *(void *)(v33 + 24) = v26;
    *(unsigned char *)(v33 + 32) = v30;
    aBlock[4] = partial apply for closure #1 in PaperTextAttachmentView.didMoveToSuperview();
    void aBlock[5] = v33;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_395_0;
    id v34 = _Block_copy(aBlock);
    id v35 = v26;
    uint64_t v36 = v1;
    swift_release();
    objc_msgSend(v31, sel__performWithVisibilityUpdatesEnabled_window_block_, 0, v32, v34);
    _Block_release(v34);

    uint64_t v37 = v44;
    if (v26)
    {
      id v38 = v35;
      id v39 = objc_msgSend(v38, sel_selectedToolItem);
      PKToolPickerItem.ink.getter((uint64_t)v6);

      Class isa = PKInk._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v37);
      double v41 = isa;
      char v42 = [(objc_class *)v41 _isGenerationTool];

      v36[direct field offset for PaperTextAttachmentView.isCurrentToolGenerationTool] = v42;
      objc_msgSend(v38, sel_addObserver_, v36);
    }
LABEL_22:
    $defer #1 () in PaperTextAttachmentView.didMoveToSuperview()(v1);
    return;
  }
LABEL_24:
  __break(1u);
}

void $defer #1 () in PaperTextAttachmentView.didMoveToSuperview()(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  double v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)((char *)a1 + direct field offset for PaperTextAttachmentView.textAttachment);
  if (v6)
  {
    id v32 = &unk_26C1F1DE0;
    uint64_t v7 = swift_dynamicCastObjCProtocolConditional();
    if (v7)
    {
      uint64_t v8 = (void *)v7;
      id v9 = v6;
      id v10 = objc_msgSend(a1, sel_superview);
      objc_msgSend(v8, sel_attachmentView_didMoveToSuperview_, a1, v10);
    }
  }
  id v11 = objc_msgSend(a1, sel_superview, v3);

  id v12 = (void *)MEMORY[0x263F8EED0];
  if (v11)
  {
    uint64_t v13 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0x320))();
    if (v13)
    {
      id v14 = (id)v13;
      type metadata accessor for TiledTextView();
      uint64_t v15 = swift_dynamicCastClass();
      if (v15)
      {
        uint64_t v16 = v15;
        id v17 = TiledTextView.canvasGenerationToolOverlayController.getter();
        CanvasGenerationToolOverlayController.updateUI()();

        double v18 = (char *)a1 + direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundContextToInitialize;
        int v19 = *((unsigned __int8 *)a1
              + direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundContextToInitialize
              + 16);
        if (v19 != 255)
        {
          id v20 = (char *)a1 + direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundBoundsToInitialize;
          if ((*((unsigned char *)a1
                + direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundBoundsToInitialize
                + 32) & 1) == 0)
          {
            uint64_t v21 = *(void **)v18;
            uint64_t v22 = (void *)*((void *)v18 + 1);
            uint64_t v24 = *((void *)v20 + 2);
            uint64_t v23 = *((void *)v20 + 3);
            long long v31 = *(_OWORD *)v20;
            *(void *)double v18 = 0;
            *((void *)v18 + 1) = 0;
            unsigned char v18[16] = -1;
            outlined copy of MagicGenerativePlaygroundContext(v21, v22, v19);
            outlined consume of MagicGenerativePlaygroundContext?(v21, v22, v19);
            *(_OWORD *)id v20 = 0u;
            *((_OWORD *)v20 + 1) = 0u;
            v20[32] = 1;
            uint64_t v25 = type metadata accessor for TaskPriority();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v5, 1, 1, v25);
            type metadata accessor for MainActor();
            outlined copy of MagicGenerativePlaygroundContext?(v21, v22, v19);
            id v26 = a1;
            id v14 = v14;
            uint64_t v27 = static MainActor.shared.getter();
            uint64_t v28 = swift_allocObject();
            uint64_t v29 = MEMORY[0x263F8F500];
            *(void *)(v28 + 16) = v27;
            *(void *)(v28 + 24) = v29;
            *(void *)(v28 + 32) = v26;
            *(_OWORD *)(v28 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v31;
            *(void *)(v28 + 56) = v24;
            *(void *)(v28 + 64) = v23;
            *(void *)(v28 + 72) = v16;
            *(void *)(v28 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v21;
            *(void *)(v28 + 88) = v22;
            *(unsigned char *)(v28 + 96) = v19;
            _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in $defer #1 () in PaperTextAttachmentView.didMoveToSuperview(), v28);
            outlined consume of MagicGenerativePlaygroundContext?(v21, v22, v19);
            swift_release();
          }
        }
      }
    }
  }
  PaperTextAttachmentView.cleanupViewProviders()();
  unsigned __int8 v30 = (UITextView_optional *)(*(uint64_t (**)(void))((*v12 & *a1) + 0x1190))();
  PaperTextAttachmentView.observeTextView(_:)(v30);
}

void @objc PaperTextAttachmentView.didMoveToSuperview()(void *a1)
{
  id v1 = a1;
  PaperTextAttachmentView.didMoveToSuperview()();
}

Swift::Void __swiftcall PaperTextAttachmentView.tapOnCanvas(location:fromPencilKit:allowShowingEditMenu:)(CGPoint location, Swift::Bool fromPencilKit, Swift::Bool allowShowingEditMenu)
{
  specialized Canvas.tapOnCanvas(location:fromPencilKit:allowShowingEditMenu:)(fromPencilKit, allowShowingEditMenu, location.x, location.y);
  if ((objc_msgSend(v3, sel_isFirstResponder) & 1) == 0)
  {
    objc_msgSend(v3, sel_becomeFirstResponder);
  }
}

id PaperTextAttachmentView.tapCanvasElement(_:modifierFlags:)(void *a1, unint64_t a2, char a3)
{
  specialized Canvas.tapCanvasElement(_:modifierFlags:)(a1, a2, (uint64_t *)(a3 & 1));
  id result = objc_msgSend(v3, sel_isFirstResponder);
  if ((result & 1) == 0)
  {
    return objc_msgSend(v3, sel_becomeFirstResponder);
  }
  return result;
}

Swift::Bool __swiftcall PaperTextAttachmentView.hit(byTouchLocation:canvasBounds:)(CGPoint byTouchLocation, __C::CGRect canvasBounds)
{
  CGFloat y = byTouchLocation.y;
  CGFloat x = byTouchLocation.x;
  CGRect v38 = CGRectInset((CGRect)canvasBounds, -64.0, 0.0);
  CGFloat v5 = v38.origin.x;
  double v6 = v38.origin.y;
  CGFloat width = v38.size.width;
  double height = v38.size.height;
  id v9 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x1190))();
  if (v9)
  {
    id v10 = v9;
    id v11 = objc_msgSend(v9, sel_textStorage);

    if (v11)
    {
      id v12 = *(void **)((char *)v2 + direct field offset for PaperTextAttachmentView.textAttachment);
      if (v12)
      {
        uint64_t v35 = 0;
        char v36 = 1;
        uint64_t v13 = *MEMORY[0x263F814A0];
        id v14 = v12;
        id v15 = objc_msgSend(v11, sel_length);
        uint64_t v16 = swift_allocObject();
        *(void *)(v16 + 16) = v14;
        *(void *)(v16 + 24) = &v35;
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = partial apply for closure #1 in PaperTextAttachmentView.characterIndex.getter;
        *(void *)(v17 + 24) = v16;
        v34[4] = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        v34[5] = v17;
        v34[0] = MEMORY[0x263EF8330];
        v34[1] = 1107296256;
        v34[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        v34[3] = &block_descriptor_300;
        double v18 = _Block_copy(v34);
        id v19 = v14;
        swift_retain();
        swift_release();
        objc_msgSend(v11, sel_enumerateAttribute_inRange_options_usingBlock_, v13, 0, v15, 0, v18);

        _Block_release(v18);
        char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        Swift::Bool result = swift_release();
        if (isEscapingClosureAtFileLocation)
        {
          __break(1u);
          goto LABEL_21;
        }
        uint64_t v22 = v35;
        char v23 = v36;
        swift_release();
        if ((v23 & 1) == 0 && !v22)
        {
          double v6 = v6 + -16.0;
          double height = height + 16.0;
        }
      }
      else
      {
      }
    }
  }
  v39.origin.CGFloat x = v5;
  v39.origin.CGFloat y = v6;
  v39.size.CGFloat width = width;
  v39.size.double height = height;
  v37.CGFloat x = x;
  v37.CGFloat y = y;
  Swift::Bool result = CGRectContainsPoint(v39, v37);
  if (result) {
    return 1;
  }
  uint64_t v25 = *(void **)((char *)v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v25)
  {
    Class v26 = v25;
    unsigned __int8 v29 = [(objc_class *)v26 isHidden];
    if ((v29 & 1) == 0)
    {
      v27.value.super.Class isa = 0;
      CanvasElementResizeView.hitTestMiniMenu(_:with:)(v28, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v27);
      if (v30.value.super.isa)
      {
        Class isa = v30.value.super.isa;
      }
      else
      {
        ResizeView.hitTestChrome(_:with:)(v31, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v30);
        Class isa = v33;

        if (!isa) {
          return 0;
        }
      }
      Class v26 = isa;
    }
    char v24 = v29 ^ 1;

    return v24;
  }
LABEL_21:
  __break(1u);
  return result;
}

__C::CGRect __swiftcall PaperTextAttachmentView.sensibleBounds(for:)(__C::CGRect a1)
{
  double height = a1.size.height;
  double width = a1.size.width;
  double y = a1.origin.y;
  double x = a1.origin.x;
  if (CGRectIsNull((CGRect)a1) || !CGRect.isFinite.getter(x, y, width, height))
  {
    double height = 0.0;
    if (objc_msgSend(self, sel_userInterfaceLayoutDirectionForSemanticContentAttribute_, objc_msgSend(v1, sel_semanticContentAttribute)))
    {
      double x = *MEMORY[0x263F14CE0];
    }
    else
    {
      double x = 0.0;
    }
    double width = 0.0;
    double y = 0.0;
  }
  v12.origin.double x = x;
  v12.origin.double y = y;
  v12.size.double width = width;
  v12.size.double height = height;
  double v6 = CGRectGetHeight(v12);
  if (one-time initialization token for minimumTextAttachmentHeight != -1) {
    swift_once();
  }
  double v7 = *(double *)&static UIConstants.minimumTextAttachmentHeight;
  if (v6 > *(double *)&static UIConstants.minimumTextAttachmentHeight) {
    double v7 = v6;
  }
  double v8 = v7 + 64.0;
  double v9 = x;
  double v10 = y;
  double v11 = width;
  result.size.double height = v8;
  result.size.double width = v11;
  result.origin.double y = v10;
  result.origin.double x = v9;
  return result;
}

uint64_t PaperTextAttachmentView.contentBounds(includeDrawing:)(char a1)
{
  *(void *)(v2 + 72) = v1;
  *(unsigned char *)(v2 + 16AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  *(void *)(v2 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)(v2 + 88) = v4;
  *(void *)(v2 + 96) = *(void *)(v4 + 64);
  *(void *)(v2 + 104) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v2 + 112) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v2 + 12AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v2 + 128) = v6;
  *(void *)(v2 + 136) = v5;
  return MEMORY[0x270FA2498](PaperTextAttachmentView.contentBounds(includeDrawing:), v6, v5);
}

uint64_t PaperTextAttachmentView.contentBounds(includeDrawing:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 72);
  if (v1 == 1
    && (uint64_t v3 = (CGFloat *)(v2 + direct field offset for PaperTextAttachmentView.paperBoundsHint),
        (*(unsigned char *)(v2 + direct field offset for PaperTextAttachmentView.paperBoundsHint + 32) & 1) == 0))
  {
    CGFloat v17 = v3[2];
    CGFloat v16 = v3[3];
    CGFloat v19 = *v3;
    CGFloat v18 = v3[1];
    swift_release();
    v31.origin.CGFloat x = v19;
    v31.origin.CGFloat y = v18;
    v31.size.CGFloat width = v17;
    v31.size.CGFloat height = v16;
    __C::CGRect v32 = PaperTextAttachmentView.sensibleBounds(for:)(v31);
    CGFloat x = v32.origin.x;
    CGFloat y = v32.origin.y;
    CGFloat width = v32.size.width;
    CGFloat height = v32.size.height;
    swift_task_dealloc();
    swift_task_dealloc();
    char v24 = *(uint64_t (**)(__n128, __n128, __n128, __n128))(v0 + 8);
    v25.n128_f64[0] = x;
    v26.n128_f64[0] = y;
    v27.n128_f64[0] = width;
    v28.n128_f64[0] = height;
    return v24(v25, v26, v27, v28);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v4 = *(void *)(v0 + 112);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 80);
    static TaskPriority.userInitiated.getter();
    uint64_t v9 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 0, 1, v9);
    uint64_t v10 = *(void *)(v2 + direct field offset for Canvas.paperView)
        + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v2 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v10, v8);
    unint64_t v11 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = 0;
    *(void *)(v12 + 24) = 0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v12 + v11, v5, v8);
    *(unsigned char *)(v12 + v11 + v7) = v1;
    uint64_t v13 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZSo6CGRectV_Tgm5(v4, (uint64_t)&async function pointer to partial apply for closure #1 in PaperTextAttachmentView.contentBounds(includeDrawing:), v12);
    *(void *)(v0 + 144) = v13;
    outlined destroy of StocksKitCurrencyCache.Provider?(v4, &demangling cache variable for type metadata for TaskPriority?);
    id v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v14;
    type metadata accessor for CGRect(0);
    *id v14 = v0;
    v14[1] = PaperTextAttachmentView.contentBounds(includeDrawing:);
    return MEMORY[0x270FA1FD0](v0 + 16, v13, v15);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  int v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 136);
  uint64_t v3 = *(void *)(v1 + 128);
  return MEMORY[0x270FA2498](PaperTextAttachmentView.contentBounds(includeDrawing:), v3, v2);
}

{
  uint64_t v0;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t (*v5)(__n128, __n128, __n128, __n128);
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  uint64_t v11;
  __C::CGRect v12;

  swift_release();
  uint64_t v12 = PaperTextAttachmentView.sensibleBounds(for:)(*(__C::CGRect *)(v0 + 16));
  CGFloat x = v12.origin.x;
  CGFloat y = v12.origin.y;
  CGFloat width = v12.size.width;
  CGFloat height = v12.size.height;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(__n128, __n128, __n128, __n128))(v0 + 8);
  v6.n128_f64[0] = x;
  v7.n128_f64[0] = y;
  v8.n128_f64[0] = width;
  v9.n128_f64[0] = height;
  return v5(v6, v7, v8, v9);
}

uint64_t closure #1 in PaperTextAttachmentView.contentBounds(includeDrawing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 32) = a5;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a4;
  return MEMORY[0x270FA2498](closure #1 in PaperTextAttachmentView.contentBounds(includeDrawing:), 0, 0);
}

uint64_t closure #1 in PaperTextAttachmentView.contentBounds(includeDrawing:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(double *)uint64_t v1 = Capsule<>.contentBounds(includeDrawing:)(*(unsigned __int8 *)(v0 + 32));
  *(void *)(v1 + 8) = v2;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v4;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

void *PaperTextAttachmentView.currentLinksIdentifiers()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  CGPoint v37 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  char v36 = (char *)&v31 - v7;
  MEMORY[0x270FA5388](v8);
  __C::CGRect v31 = (char *)&v31 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v0 + direct field offset for Canvas.paperView)
      + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v0 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  unint64_t v15 = Capsule<>.links.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (!(v15 >> 62))
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v16) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v21 = (void *)MEMORY[0x263F8EE78];
LABEL_18:
    swift_bridgeObjectRelease_n();
    CGRect v38 = v21;
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(&v38);
    swift_bridgeObjectRelease();
    return v38;
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  if (!v16) {
    goto LABEL_17;
  }
LABEL_3:
  if (v16 >= 1)
  {
    uint64_t v17 = 0;
    unint64_t v33 = v15 & 0xC000000000000001;
    CGFloat v18 = (void (**)(char *, char *, uint64_t))(v32 + 32);
    CGFloat v19 = (void (**)(char *, void, uint64_t, uint64_t))(v32 + 56);
    id v20 = (unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    uint64_t v21 = (void *)MEMORY[0x263F8EE78];
    uint64_t v34 = v16;
    unint64_t v35 = v15;
    do
    {
      if (v33) {
        id v22 = (id)MEMORY[0x21054E050](v17, v15);
      }
      else {
        id v22 = *(id *)(v15 + 8 * v17 + 32);
      }
      char v23 = v22;
      id v24 = objc_msgSend(v22, sel_itemIdentifier);
      __n128 v25 = v36;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      __n128 v26 = *v18;
      (*v18)(v3, v25, v4);
      (*v19)(v3, 0, 1, v4);

      if ((*v20)(v3, 1, v4) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, &demangling cache variable for type metadata for UUID?);
      }
      else
      {
        __n128 v27 = v31;
        v26(v31, v3, v4);
        v26(v37, v27, v4);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v21 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, (unint64_t)v21);
        }
        unint64_t v29 = v21[2];
        unint64_t v28 = v21[3];
        if (v29 >= v28 >> 1) {
          uint64_t v21 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1, (unint64_t)v21);
        }
        void v21[2] = v29 + 1;
        v26((char *)v21+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v29, v37, v4);
      }
      ++v17;
      unint64_t v15 = v35;
    }
    while (v34 != v17);
    goto LABEL_18;
  }
  __break(1u);
  __C::CGRect result = (void *)swift_release();
  __break(1u);
  return result;
}

Swift::Void __swiftcall PaperTextAttachmentView.beginLiveResize()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (v7)
  {
    objc_msgSend(v7, sel_setHidden_, 1, v4);
    uint64_t v8 = direct field offset for PaperTextAttachmentView.resizeInfo;
    if (!*(void *)&v0[direct field offset for PaperTextAttachmentView.resizeInfo])
    {
      type metadata accessor for ResizeInfo();
      uint64_t v9 = swift_allocObject();
      *(unsigned char *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      uint64_t v10 = *MEMORY[0x263F001A0];
      uint64_t v11 = *(void *)(MEMORY[0x263F001A0] + 8);
      uint64_t v12 = *(void *)(MEMORY[0x263F001A0] + 16);
      uint64_t v13 = *(void *)(MEMORY[0x263F001A0] + 24);
      *(void *)(v9 + 32) = *MEMORY[0x263F001A0];
      *(void *)(v9 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v11;
      *(void *)(v9 + 48) = v12;
      *(void *)(v9 + 56) = v13;
      *(void *)(v9 + 64) = v10;
      *(void *)(v9 + 72) = v11;
      *(void *)(v9 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v12;
      *(void *)(v9 + 88) = v13;
      *(void *)(v9 + 96) = v10;
      *(void *)(v9 + 104) = v11;
      *(void *)(v9 + 112) = v12;
      *(void *)(v9 + 12AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v13;
      *(void *)&v0[v8] = v9;
      if (v9)
      {
        uint64_t v14 = v9;
        swift_retain();
        *(double *)(v14 + 32) = PaperTextAttachmentView.safePaperModelBounds.getter();
        *(void *)(v14 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v15;
        *(void *)(v14 + 48) = v16;
        *(void *)(v14 + 56) = v17;
        swift_release();
        CGFloat v18 = *(double **)&v0[v8];
        if (v18)
        {
          uint64_t v19 = *(void *)&v0[direct field offset for Canvas.paperView]
              + *(void *)((*MEMORY[0x263F8EED0] & **(void **)&v0[direct field offset for Canvas.paperView]) + 0x380);
          swift_beginAccess();
          (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v19, v2);
          swift_retain();
          double v20 = Capsule<>.contentBounds(includeDrawing:)(1);
          uint64_t v22 = v21;
          uint64_t v24 = v23;
          uint64_t v26 = v25;
          (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
          unsigned char v18[8] = v20;
          *((void *)v18 + 9) = v22;
          *((void *)v18 + 1AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v24;
          *((void *)v18 + 11) = v26;
          swift_release();
          __n128 v27 = *(void **)&v1[v8];
          if (v27)
          {
            swift_retain();
            objc_msgSend(v1, sel_frame);
            v27[12] = v28;
            v27[13] = v29;
            v27[14] = v30;
            unsigned char v27[15] = v31;
            swift_release();
          }
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void PaperTextAttachmentView.liveResize(yDistance:)(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)((char *)v1 + direct field offset for PaperTextAttachmentView.resizeInfo);
  if (v8)
  {
    swift_retain();
    double v9 = PaperTextAttachmentView.safePaperModelBounds.getter();
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    double v15 = v14 + a1;
    if (one-time initialization token for minimumTextAttachmentHeight != -1) {
      swift_once();
    }
    double v16 = *(double *)&static UIConstants.minimumTextAttachmentHeight;
    if (v15 > *(double *)&static UIConstants.minimumTextAttachmentHeight) {
      double v16 = v15;
    }
    *(double *)(v8 + 32) = v9;
    *(void *)(v8 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v11;
    *(void *)(v8 + 48) = v13;
    *(double *)(v8 + 56) = v16;
    uint64_t v17 = (void *)MEMORY[0x263F8EED0];
    uint64_t v18 = *(void *)((char *)v1 + direct field offset for Canvas.paperView)
        + *(void *)((*MEMORY[0x263F8EED0] & **(void **)((char *)v1 + direct field offset for Canvas.paperView))
                    + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v18, v4);
    double v19 = Capsule<>.contentBounds(includeDrawing:)(1);
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(double *)(v8 + 64) = v19;
    *(void *)(v8 + 72) = v21;
    *(void *)(v8 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v23;
    *(void *)(v8 + 88) = v25;
    objc_msgSend(v2, sel_frame);
    double v27 = v26;
    double v29 = v28;
    id v30 = objc_msgSend(v2, sel_frame);
    CGFloat v32 = v31;
    unint64_t v33 = (UIView_optional *)(*(uint64_t (**)(id))((*v17 & *v2) + 0x1190))(v30);
    if (!v33) {
      unint64_t v33 = (UIView_optional *)objc_msgSend(v2, sel_superview);
    }
    CGSize v34 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v33);

    Swift::Bool v35 = v34.height != v29 || v34.width != v27;
    v37.origin.CGFloat x = 0.0;
    v37.origin.CGFloat y = v32;
    v37.size.CGFloat width = v34.width;
    v37.size.CGFloat height = v34.height;
    PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v37, 1, v35, 1);
    swift_release();
  }
}

Swift::Void __swiftcall PaperTextAttachmentView.endLiveResize(discard:)(Swift::Bool discard)
{
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  uint64_t v4 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v4)
  {
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v4, sel_setNeedsLayout);
  uint64_t v5 = *(void **)((char *)v1 + v3);
  if (!v5)
  {
LABEL_17:
    __break(1u);
    return;
  }
  objc_msgSend(v5, sel_setHidden_, 0);
  uint64_t v6 = direct field offset for PaperTextAttachmentView.resizeInfo;
  uint64_t v7 = *(void *)((char *)v1 + direct field offset for PaperTextAttachmentView.resizeInfo);
  if (v7)
  {
    if (discard)
    {
      *(void *)((char *)v1 + direct field offset for PaperTextAttachmentView.resizeInfo) = 0;
      objc_msgSend(v1, sel_frame);
      double v9 = v8;
      double v11 = v10;
      id v12 = objc_msgSend(v1, sel_frame);
      CGFloat v14 = v13;
      double v15 = (UIView_optional *)(*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *v1) + 0x1190))(v12);
      if (!v15) {
        double v15 = (UIView_optional *)objc_msgSend(v1, sel_superview);
      }
      CGSize v16 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v15);

      Swift::Bool v17 = v16.height != v11 || v16.width != v9;
      v20.origin.CGFloat x = 0.0;
      v20.origin.CGFloat y = v14;
      v20.size.CGFloat width = v16.width;
      v20.size.CGFloat height = v16.height;
      PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v20, 1, v17, 1);
    }
    else
    {
      uint64_t v18 = v1;
      swift_retain();
      specialized Canvas.undoable(newChange:persistSelection:action:)(0, 0, v18, (uint64_t)v18, v7);

      *(void *)((char *)v1 + v6) = 0;
      swift_release();
    }
    swift_release();
  }
}

uint64_t closure #1 in closure #1 in PaperTextAttachmentView.endLiveResize(discard:)()
{
  return closure #1 in closure #1 in PaperTextAttachmentView.endLiveResize(discard:)();
}

{
  swift_getKeyPath();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  *(unsigned char *)(v6 + 169) = a6;
  *(unsigned char *)(v6 + 168) = a5;
  *(void *)(v6 + 96) = a4;
  type metadata accessor for MainActor();
  *(void *)(v6 + 104) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v6 + 112) = v8;
  *(void *)(v6 + 12AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v7;
  return MEMORY[0x270FA2498](closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:), v8, v7);
}

uint64_t closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)()
{
  if (*(unsigned char *)(v0 + 168))
  {
    char v1 = 1;
  }
  else
  {
    PaperTextAttachmentView.isAtEndOfDocument.getter();
    char v1 = v2;
  }
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:);
  return PaperTextAttachmentView.contentBounds(includeDrawing:)(v1 & 1);
}

{
  uint64_t v0;
  id *v1;
  uint64_t v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  double MaxY;
  void *v8;
  id v9;
  double v10;
  double v11;
  int v12;
  char *v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  CGFloat v18;
  double v19;
  double v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  id v37;
  double v38;
  CGFloat v39;
  UIView_optional *v40;
  CGSize v41;
  Swift::Bool v42;
  char v43;
  uint64_t (*v44)(void);
  CGRect v46;
  uint64_t v47;
  uint64_t v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  __C::CGRect v52;

  double v47 = v0;
  char v1 = (id *)(v0 + 96);
  char v2 = *(void *)(v0 + 96);
  uint64_t v4 = *(double *)(v0 + 152);
  uint64_t v3 = *(double *)(v0 + 160);
  uint64_t v6 = *(double *)(v0 + 136);
  uint64_t v5 = *(double *)(v0 + 144);
  swift_release();
  v49.origin.CGFloat x = v6;
  v49.origin.CGFloat y = v5;
  v49.size.CGFloat width = v4;
  v49.size.CGFloat height = v3;
  CGFloat MaxY = CGRectGetMaxY(v49);
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
  if (v8)
  {
    double v9 = v8;
    if (HandwritingReflowView.showRectangularSelection.getter())
    {
      HandwritingReflowView.rectangularSelectionTransformCoordinateSpace.getter(v0 + 16);
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v46, 0.0);
      uint64_t v10 = CGRectGetMaxY(v46);

      if (MaxY <= v10) {
        CGFloat MaxY = v10;
      }
    }
    else
    {
    }
  }
  v50.origin.CGFloat x = PaperTextAttachmentView.safePaperModelBounds.getter();
  double v11 = CGRectGetMaxY(v50);
  if (v11 + 1.0 < MaxY
    || (PaperTextAttachmentView.isAtEndOfDocument.getter(), (v43 & 1) != 0) && vabdd_f64(MaxY, v11) > 1.0)
  {
    id v12 = *(unsigned __int8 *)(v0 + 169);
    double v13 = *(char **)(v0 + 96);
    objc_msgSend(v13, sel_bounds);
    double v15 = v14;
    objc_msgSend(v13, sel_bounds);
    Swift::Bool v17 = v16;
    uint64_t v18 = *MEMORY[0x263F14CE0];
    objc_msgSend(v13, sel_bounds);
    __C::CGRect v20 = MaxY - v19;
    uint64_t v21 = swift_task_alloc();
    *(CGFloat *)(v21 + 16) = v15;
    *(CGFloat *)(v21 + 24) = v17;
    *(CGFloat *)(v21 + 32) = v18;
    *(double *)(v21 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v20;
    uint64_t v22 = *(void **)&v13[direct field offset for Canvas.paperView];
    uint64_t v23 = (void *)MEMORY[0x263F8EED0];
    swift_beginAccess();
    uint64_t v24 = v22;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
    Capsule.callAsFunction<A>(_:)();
    swift_task_dealloc();
    swift_endAccess();

    if (v12 != 5)
    {
      LOBYTE(v46.origin.x) = *(unsigned char *)(v0 + 169);
      PaperTextAttachmentView.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)&v46);
    }
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)logger);
    double v26 = Logger.logObject.getter();
    double v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      double v28 = (uint8_t *)swift_slowAlloc();
      double v29 = swift_slowAlloc();
      *(void *)&v46.origin.CGFloat x = v29;
      *(_DWORD *)double v28 = 136315138;
      v51.origin.CGFloat x = v15;
      v51.origin.CGFloat y = v17;
      v51.size.CGFloat width = v18;
      v51.size.CGFloat height = v20;
      CGRectGetHeight(v51);
      id v30 = Double.description.getter();
      *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)&v46);
      uint64_t v23 = (void *)MEMORY[0x263F8EED0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v26, v27, "Updated content height to: %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v29, -1, -1);
      MEMORY[0x210550270](v28, -1, -1);
    }

    CGFloat v32 = *v1;
    objc_msgSend(*v1, sel_frame);
    CGSize v34 = v33;
    uint64_t v36 = v35;
    __C::CGRect v37 = objc_msgSend(v32, sel_frame);
    CGRect v39 = v38;
    char v40 = (UIView_optional *)(*(uint64_t (**)(id))((*v23 & *v32) + 0x1190))(v37);
    if (!v40) {
      char v40 = (UIView_optional *)objc_msgSend(*v1, sel_superview);
    }
    double v41 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v40);

    char v42 = v41.height != v36 || v41.width != v34;
    v52.origin.CGFloat x = 0.0;
    v52.origin.CGFloat y = v39;
    v52.size.CGFloat width = v41.width;
    v52.size.CGFloat height = v41.height;
    PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v52, 1, v42, 1);
  }
  uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
  return v44();
}

uint64_t closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = *v4;
  uint64_t v6 = *v4;
  v6[17] = a1;
  v6[18] = a2;
  v6[19] = a3;
  v6[20] = a4;
  swift_task_dealloc();
  uint64_t v7 = *((void *)v5 + 15);
  uint64_t v8 = *((void *)v5 + 14);
  return MEMORY[0x270FA2498](closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:), v8, v7);
}

uint64_t closure #1 in closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)()
{
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v0 = (uint64_t (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  return v0(v2, 0);
}

Swift::Void __swiftcall PaperTextAttachmentView.resizeRootBoundsIfNecessary(alwaysIncludeDrawing:)(Swift::Bool alwaysIncludeDrawing)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!AnyCanvas.isLiveEditing()() && !*(void *)&v1[direct field offset for PaperTextAttachmentView.resizeInfo])
  {
    uint64_t v6 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
    type metadata accessor for MainActor();
    uint64_t v7 = v1;
    uint64_t v8 = static MainActor.shared.getter();
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = MEMORY[0x263F8F500];
    *(void *)(v9 + 16) = v8;
    *(void *)(v9 + 24) = v10;
    *(void *)(v9 + 32) = v7;
    *(unsigned char *)(v9 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = alwaysIncludeDrawing;
    *(unsigned char *)(v9 + 41) = 4;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)partial apply, v9);
    swift_release();
  }
}

double PaperTextAttachmentView.visibleBounds.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1190))();
  if (v1)
  {
    char v2 = (void *)v1;
    objc_msgSend(v0, sel_bounds);
    objc_msgSend(v0, sel_convertRect_toCoordinateSpace_, v2);
    CGFloat v4 = v3;
    CGFloat v6 = v5;
    CGFloat v8 = v7;
    double v10 = v9;
    PaperTextAttachmentView.isAtEndOfDocument.getter();
    if (v11)
    {
      objc_msgSend(v2, sel_bounds);
      double v10 = v10 + CGRectGetHeight(v25);
    }
    objc_msgSend(v2, sel_bounds);
    double v13 = v12;
    double v15 = v14;
    double v17 = v16;
    double v19 = v18;
    objc_msgSend(v2, sel_adjustedContentInset);
    v26.origin.CGFloat x = UIEdgeInsetsInsetRect(v13, v15, v17, v19, v20, v21);
    v27.origin.CGFloat x = v4;
    v27.origin.CGFloat y = v6;
    v27.size.CGFloat width = v8;
    v27.size.CGFloat height = v10;
    *(void *)&double v22 = (unint64_t)CGRectIntersection(v26, v27);
  }
  else
  {
    objc_msgSend(v0, sel_frame);
    return v23;
  }
  return v22;
}

Swift::Void __swiftcall PaperTextAttachmentView.forwardChanges(from:)(PaperKit::AnyCanvas::MergeSource from)
{
  char v2 = (unsigned __int8 *)from;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v3 - 8);
  double v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v14 = *v2;
  int v6 = v14;
  AnyCanvas.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)&v14);
  if ((v6 - 3) <= 1)
  {
    v1[direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging] = 0;
    double v7 = &v1[direct field offset for PaperTextAttachmentView.paperBoundsHint];
    *(_OWORD *)double v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    v7[32] = 1;
    if (!AnyCanvas.isLiveEditing()() && !*(void *)&v1[direct field offset for PaperTextAttachmentView.resizeInfo])
    {
      uint64_t v8 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
      type metadata accessor for MainActor();
      double v9 = v1;
      uint64_t v10 = static MainActor.shared.getter();
      uint64_t v11 = swift_allocObject();
      uint64_t v12 = MEMORY[0x263F8F500];
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = v12;
      *(void *)(v11 + 32) = v9;
      *(unsigned char *)(v11 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 0;
      *(unsigned char *)(v11 + 41) = v6;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:), v11);
      swift_release();
    }
  }
}

Swift::Void __swiftcall PaperTextAttachmentView.mergeToCanvasElements()()
{
  specialized Canvas.mergeToCanvasElements()();
  objc_msgSend(v0, sel_frame);
  double v2 = v1;
  double v4 = v3;
  id v5 = objc_msgSend(v0, sel_frame);
  CGFloat v7 = v6;
  uint64_t v8 = (UIView_optional *)(*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *v0) + 0x1190))(v5);
  if (!v8) {
    uint64_t v8 = (UIView_optional *)objc_msgSend(v0, sel_superview);
  }
  CGSize v9 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v8);

  Swift::Bool v10 = v9.height != v4 || v9.width != v2;
  v18.origin.CGFloat x = 0.0;
  v18.origin.CGFloat y = v7;
  v18.size.CGFloat width = v9.width;
  v18.size.CGFloat height = v9.height;
  PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v18, 0, v10, 1);
  uint64_t v11 = PaperTextAttachmentView.currentLinksIdentifiers()();
  uint64_t v12 = direct field offset for PaperTextAttachmentView.previousLinks;
  uint64_t v13 = *(void *)((char *)v0 + direct field offset for PaperTextAttachmentView.previousLinks);
  swift_bridgeObjectRetain();
  char v14 = specialized static Array<A>.== infix(_:_:)((uint64_t)v11, v13);
  swift_bridgeObjectRelease();
  if (v14)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)((char *)v0 + v12) = v11;
    swift_bridgeObjectRelease();
    if (*(void *)((char *)v0 + direct field offset for PaperTextAttachmentView.textAttachment))
    {
      double v15 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v15)
      {
        double v16 = v15;
        if (objc_msgSend(v15, sel_respondsToSelector_, sel__linkCanvasElementsDidChange)) {
          objc_msgSend(v16, sel__linkCanvasElementsDidChange);
        }
      }
    }
  }
}

Swift::Void __swiftcall PaperTextAttachmentView.layoutSubviews()()
{
  objc_msgSend(v0, sel_bounds);
  double v2 = v1;
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  PaperTextAttachmentView.isAtEndOfDocument.getter();
  char v10 = v9;
  v64.receiver = v0;
  v64.super_class = (Class)type metadata accessor for PaperTextAttachmentView();
  id v11 = objc_msgSendSuper2(&v64, sel_layoutSubviews);
  double v60 = v2;
  double v61 = v4;
  double v62 = v6;
  double v63 = v8;
  if ((v10 & 1) == 0)
  {
    uint64_t v12 = (void *)MEMORY[0x263F8EED0];
    if (one-time initialization token for resizeHandleSize != -1) {
      swift_once();
    }
    double v8 = fmax(v8 + *(double *)&static UIConstants.resizeHandleSize * -0.5, 1.0);
LABEL_11:
    double v63 = v8;
    goto LABEL_12;
  }
  uint64_t v12 = (void *)MEMORY[0x263F8EED0];
  uint64_t v13 = (*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *v0) + 0x1190))(v11);
  if (v13)
  {
    char v14 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v14) {
      goto LABEL_43;
    }
    double v15 = (void *)v13;
    id v16 = v14;
    uint64_t v17 = swift_bridgeObjectRetain();
    unint64_t v18 = specialized Sequence.compactMap<A>(_:)(v17, (uint64_t)v16);
    swift_bridgeObjectRelease();

    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v19)
    {

      goto LABEL_12;
    }
    objc_msgSend(v15, sel_bounds);
    double v2 = v20;

    double v8 = v8 + v2;
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v21 = *(void *)((char *)v0 + direct field offset for PaperTextAttachmentView.resizeInfo);
  if (v21)
  {
    double v22 = *(double *)(v21 + 24);
    double v61 = v4 + v22;
    double v63 = fmax(v8 - v22, 1.0);
  }
  uint64_t v23 = self;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v0;
  *(void *)(v24 + 24) = &v60;
  CGRect v25 = (void *)swift_allocObject();
  v25[2] = partial apply for closure #1 in PaperTextAttachmentView.layoutSubviews();
  v25[3] = v24;
  *(void *)&aBlock.tCGFloat x = thunk for @callee_guaranteed () -> ()partial apply;
  *(void *)&aBlock.tCGFloat y = v25;
  *(void *)&aBlock.CGFloat a = MEMORY[0x263EF8330];
  *(void *)&aBlock.CGFloat b = 1107296256;
  *(void *)&aBlock.CGFloat c = thunk for @escaping @callee_guaranteed () -> ();
  *(void *)&aBlock.CGFloat d = &block_descriptor_389;
  CGRect v26 = _Block_copy(&aBlock);
  CGRect v27 = v0;
  swift_retain();
  swift_release();
  objc_msgSend((id)v23, sel_performWithoutAnimation_, v26);
  _Block_release(v26);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v23)
  {
    __break(1u);
    goto LABEL_40;
  }
  objc_msgSend(*(id *)((char *)v27 + direct field offset for Canvas.paperView), sel_setClipsToBounds_, 1);
  double v28 = *(void **)((char *)v27 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v28)
  {
    objc_msgSend(v28, sel_setNeedsLayout);
    id v29 = objc_msgSend(*(id *)((char *)v27 + direct field offset for PaperTextAttachmentView.bottomResizeView), sel_layoutInsideSuperview);
    id v30 = *(void **)((char *)v27 + direct field offset for PaperTextAttachmentView.topResizeView);
    if (!v30)
    {
LABEL_19:
      CGFloat v35 = v60;
      CGFloat v36 = v61;
      CGFloat v37 = v62;
      double v38 = v63;
      if (v10)
      {
        CGRect v39 = (void *)(*(uint64_t (**)(id))((*v12 & *v27) + 0x1190))(v29);
        if (v39)
        {
          char v40 = v39;
          objc_msgSend(v39, sel_bounds);
          double v42 = v41;

          double v38 = v38 + v42;
        }
      }
      uint64_t v43 = (void *)(*(uint64_t (**)(void))((*v12 & *v27) + 0x320))();
      if (v43)
      {
        uint64_t v44 = v43;
        if (objc_msgSend(v43, sel_overrideUserInterfaceStyle)) {
          objc_msgSend(v27, sel_setOverrideUserInterfaceStyle_, objc_msgSend(v44, sel_overrideUserInterfaceStyle));
        }
      }
      uint64_t v45 = direct field offset for PaperTextAttachmentView.linedPaperView;
      objc_super v46 = *(char **)((char *)v27 + direct field offset for PaperTextAttachmentView.linedPaperView);
      if (!v46) {
        goto LABEL_36;
      }
      double v47 = *(void **)((char *)v27 + direct field offset for PaperTextAttachmentView.linedPaper);
      if (v47)
      {
        double v48 = v46;
        id v49 = v47;
      }
      else
      {
        uint64_t v50 = (void *)(*(uint64_t (**)(char *))((*v12 & *v27) + 0x1190))(v46);
        id v49 = objc_msgSend(v50, sel_linedPaper);
      }
      id v51 = *(void **)&v46[OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaper];
      *(void *)&v46[OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaper] = v49;
      id v52 = v47;

      id v53 = *(void **)((char *)v27 + v45);
      if (!v53) {
        goto LABEL_36;
      }
      uint64_t v54 = *(uint64_t (**)(void))((*v12 & *v27) + 0x1190);
      id v55 = v53;
      uint64_t v56 = v54();
      if (v56)
      {
        id v57 = (id)v56;
      }
      else
      {
        id v57 = objc_msgSend(v27, sel_superview);
        if (!v57)
        {
          double v59 = *MEMORY[0x263F14CE0];
          goto LABEL_35;
        }
      }
      objc_msgSend(v57, sel_bounds);
      double v59 = v58;

LABEL_35:
      PaperTextAttachmentView.drawingTransform(forViewWidth:)((long long *)&aBlock, v59);
      v66.origin.CGFloat x = v35;
      v66.origin.CGFloat y = v36;
      v66.size.CGFloat width = v37;
      v66.size.CGFloat height = v38;
      LinedPaperView.update(bounds:drawingTransform:shouldClip:)(v66, &aBlock, 1);

LABEL_36:
      swift_release();
      return;
    }
    CGRect v25 = v30;
    objc_msgSend(v25, sel_layoutInsideSuperview);
    objc_msgSend(v25, sel_frame);
    double v4 = v31;
    double v6 = v32;
    double v8 = v33;
    double v2 = v34;
    if (one-time initialization token for resizeHandleSize == -1)
    {
LABEL_18:
      objc_msgSend(v25, sel_setFrame_, v4, v6 + *(double *)&static UIConstants.resizeHandleSize * -0.5, v8, v2);

      goto LABEL_19;
    }
LABEL_40:
    swift_once();
    goto LABEL_18;
  }
  __break(1u);
LABEL_43:
  __break(1u);
}

void @objc PaperTextAttachmentView.layoutSubviews()(void *a1)
{
  id v1 = a1;
  PaperTextAttachmentView.layoutSubviews()();
}

id @objc PaperTextAttachmentView.canBecomeFirstResponder.getter(void *a1)
{
  id v1 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0x1190);
  double v2 = a1;
  double v3 = (void *)v1();
  if (v3)
  {
    double v4 = v3;
    id v5 = objc_msgSend(v3, sel__canSelectDrawing);

    double v2 = v4;
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id @objc PaperTextAttachmentView.becomeFirstResponder()(void *a1, uint64_t a2)
{
  return @objc PaperTextAttachmentView.becomeFirstResponder()(a1, a2, (const char **)&selRef_becomeFirstResponder);
}

id @objc PaperTextAttachmentView.resignFirstResponder()(void *a1, uint64_t a2)
{
  return @objc PaperTextAttachmentView.becomeFirstResponder()(a1, a2, (const char **)&selRef_resignFirstResponder);
}

id @objc PaperTextAttachmentView.becomeFirstResponder()(void *a1, uint64_t a2, const char **a3)
{
  v8.receiver = a1;
  v8.super_class = (Class)type metadata accessor for PaperTextAttachmentView();
  double v4 = *a3;
  id v5 = v8.receiver;
  id v6 = objc_msgSendSuper2(&v8, v4);
  PaperTextAttachmentView.setAdjustResizeIndicatorVisible(_:animated:highlightBackground:)((Swift::Bool)objc_msgSend(v5, sel_isFirstResponder, v8.receiver, v8.super_class), 1, 0);

  return v6;
}

void closure #1 in PaperTextAttachmentView.characterIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, void *a5, uint64_t a6)
{
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v13, &demangling cache variable for type metadata for Any?);
  if (v14)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSTextAttachment);
    if (swift_dynamicCast())
    {
      id v10 = a5;
      char v11 = static NSObject.== infix(_:_:)();

      if (v11)
      {
        *(void *)a6 = a2;
        *(unsigned char *)(a6 + 8) = 0;
        *a4 = 1;
      }
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Any?);
  }
}

Swift::Void __swiftcall PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(__C::CGRect frame, Swift::Bool ensureLayout, Swift::Bool needsInvalidateLayout, Swift::Bool shouldRedraw)
{
  double height = frame.size.height;
  double width = frame.size.width;
  CGFloat y = frame.origin.y;
  CGFloat x = frame.origin.x;
  PaperTextAttachmentView.reportUpdatedPaperBoundsIfNecessary()();
  id v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x1190);
  char v11 = (void *)v10();
  id v12 = objc_msgSend(v11, sel_textLayoutManager);

  if (v12)
  {

    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v14 = self;
    double v15 = (CGFloat *)swift_allocObject();
    *((void *)v15 + 2) = v4;
    v15[3] = x;
    v15[4] = y;
    v15[5] = width;
    void v15[6] = height;
    uint64_t v16 = swift_allocObject();
    uint64_t v13 = partial apply for closure #1 in PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:);
    *(void *)(v16 + 16) = partial apply for closure #1 in PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:);
    *(void *)(v16 + 24) = v15;
    id v52 = partial apply for thunk for @callee_guaranteed () -> ();
    uint64_t v53 = v16;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v49 = 1107296256;
    uint64_t v50 = thunk for @escaping @callee_guaranteed () -> ();
    id v51 = &block_descriptor_315;
    uint64_t v17 = _Block_copy(&aBlock);
    unint64_t v18 = v4;
    swift_retain();
    swift_release();
    objc_msgSend((id)v14, sel_performWithoutAnimation_, v17);
    _Block_release(v17);
    LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v14)
    {
      __break(1u);
      goto LABEL_24;
    }
  }
  uint64_t v19 = v10();
  if (!v19)
  {
LABEL_19:
    outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v13);
    return;
  }
  double v20 = (void *)v19;
  uint64_t v21 = direct field offset for PaperTextAttachmentView.textAttachment;
  double v22 = *(void **)((char *)v4 + direct field offset for PaperTextAttachmentView.textAttachment);
  if (!v22)
  {
    id v23 = (id)v19;
LABEL_18:

    goto LABEL_19;
  }
  id v23 = v22;
  uint64_t v24 = (void *)v10();
  if (!v24) {
    goto LABEL_16;
  }
  CGRect v25 = v24;
  id v26 = objc_msgSend(v24, sel_textStorage);

  if (!v26) {
    goto LABEL_16;
  }
  CGRect v27 = *(void **)((char *)v4 + v21);
  if (!v27)
  {

    goto LABEL_16;
  }
  Swift::Bool v41 = ensureLayout;
  uint64_t v46 = 0;
  char v47 = 1;
  uint64_t v43 = *MEMORY[0x263F814A0];
  id v28 = v27;
  id v42 = objc_msgSend(v26, sel_length);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v28;
  *(void *)(v29 + 24) = &v46;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = closure #1 in PaperTextAttachmentView.characterIndex.getterpartial apply;
  *(void *)(v30 + 24) = v29;
  id v52 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  uint64_t v53 = v30;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v49 = 1107296256;
  uint64_t v50 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  id v51 = &block_descriptor_326;
  double v31 = _Block_copy(&aBlock);
  id v32 = v28;
  swift_retain();
  swift_release();
  objc_msgSend(v26, sel_enumerateAttribute_inRange_options_usingBlock_, v43, 0, v42, 0, v31);

  _Block_release(v31);
  LOBYTE(v29) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v29 & 1) == 0)
  {
    uint64_t v33 = v46;
    char v34 = v47;
    swift_release();
    if ((v34 & 1) == 0)
    {
      objc_msgSend(v23, sel_bounds);
      v55.origin.CGFloat x = v35;
      v55.origin.CGFloat y = v36;
      v55.size.double width = v37;
      v55.size.double height = v38;
      v54.origin.CGFloat x = 0.0;
      v54.origin.CGFloat y = 0.0;
      v54.size.double width = width;
      v54.size.double height = height;
      if (CGRectEqualToRect(v54, v55)
        || (objc_msgSend(v23, sel_setBounds_, 0.0, 0.0, width, height), !needsInvalidateLayout))
      {
        if (shouldRedraw)
        {
          char v40 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x320))();
          objc_msgSend(v40, sel__layoutSubviews);
          objc_msgSend(v40, sel_updateTilesForVisibleRect);
        }
      }
      else
      {
        objc_msgSend(v20, sel__pk_invalidateLayoutForCharacterRange_invalidateDisplay_ensureLayout_, v33, 1, 1, v41);
      }
      CGRect v39 = v20;
      goto LABEL_17;
    }
LABEL_16:
    CGRect v39 = v23;
    id v23 = v20;
LABEL_17:

    goto LABEL_18;
  }
LABEL_24:
  __break(1u);
}

Swift::Void __swiftcall PaperTextAttachmentView.reportUpdatedPaperBoundsIfNecessary()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v2 - 8);
  double v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v7 = (char *)&v43 - v6;
  MEMORY[0x270FA5388](v8);
  id v10 = (char *)&v43 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v43 - v16;
  double v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = MEMORY[0x210550400](v1 + direct field offset for PaperTextAttachmentView.paperViewDelegate, v19);
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v49 = v14;
    uint64_t v24 = v1 + direct field offset for PaperTextAttachmentView.reportedBounds;
    CGRect v25 = (void *)MEMORY[0x263F8EED0];
    if (*(unsigned char *)(v1 + direct field offset for PaperTextAttachmentView.reportedBounds + 32)) {
      goto LABEL_5;
    }
    double v48 = v7;
    uint64_t v26 = *(void *)(v1 + direct field offset for Canvas.paperView)
        + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v1 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v21, v26, v11);
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    Capsule<>.root.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v11);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    CGPoint v27 = v50;
    CGFloat v28 = v51;
    double v29 = v52;
    outlined destroy of Paper((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Paper);
    if (*(unsigned char *)(v24 + 32))
    {
      __break(1u);
      return;
    }
    BOOL v30 = CGRect.almostEqual(_:threshold:)(*(CGFloat *)v24, *(CGFloat *)(v24 + 8), *(CGFloat *)(v24 + 16), *(CGFloat *)(v24 + 24), 0.1, v27.x, v27.y, v28, v29);
    double v7 = v48;
    CGRect v25 = (void *)MEMORY[0x263F8EED0];
    if (!v30)
    {
LABEL_5:
      uint64_t v46 = direct field offset for Canvas.paperView;
      uint64_t v31 = *(void *)(v1 + direct field offset for Canvas.paperView)
          + *(void *)((*v25 & **(void **)(v1 + direct field offset for Canvas.paperView)) + 0x380);
      swift_beginAccess();
      char v47 = v4;
      double v48 = (char *)v23;
      uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
      v45(v17, v31, v11);
      uint64_t v44 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
      Capsule<>.root.getter();
      id v32 = *(void (**)(char *, uint64_t))(v12 + 8);
      v32(v17, v11);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      CRRegister.wrappedValue.getter();
      CGPoint v43 = v50;
      uint64_t v33 = v1;
      double v34 = v51;
      double v35 = v52;
      outlined destroy of Paper((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Paper);
      *(CGPoint *)uint64_t v24 = v43;
      *(double *)(v24 + 16) = v34;
      *(double *)(v24 + 24) = v35;
      *(unsigned char *)(v24 + 32) = 0;
      uint64_t v36 = *(void *)(v33 + v46) + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v33 + v46)) + 0x380);
      swift_beginAccess();
      CGFloat v37 = v49;
      v45(v49, v36, v11);
      uint64_t v39 = (uint64_t)v47;
      CGFloat v38 = v48;
      Capsule<>.root.getter();
      v32(v37, v11);
      CRRegister.wrappedValue.getter();
      CGPoint v40 = v50;
      CGFloat v41 = v51;
      CGFloat v42 = v52;
      outlined destroy of Paper(v39, (uint64_t (*)(void))type metadata accessor for Paper);
      if (MEMORY[0x210550400](&v38[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasViewDelegate]))
      {
        v53.origin = v40;
        v53.size.double width = v41;
        v53.size.double height = v42;
        ExtensionViewController.reportPaperBounds(_:)(v53);
        swift_unknownObjectRelease();
      }
    }
    swift_unknownObjectRelease();
  }
}

double PaperTextAttachmentView.paperBounds(forViewWidth:)(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (double *)((char *)v2 + direct field offset for PaperTextAttachmentView.paperBoundsHint);
  uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  if (*((unsigned char *)v2 + direct field offset for PaperTextAttachmentView.paperBoundsHint + 32))
  {
    uint64_t v10 = *(void *)((char *)v2 + direct field offset for Canvas.paperView)
        + *(void *)((*MEMORY[0x263F8EED0] & **(void **)((char *)v2 + direct field offset for Canvas.paperView))
                    + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
    double v11 = Capsule<>.contentBounds(includeDrawing:)(1);
    CGFloat v13 = v12;
    CGFloat v15 = v14;
    CGFloat v17 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    CGFloat v15 = v8[2];
    CGFloat v17 = v8[3];
    double v11 = *v8;
    CGFloat v13 = v8[1];
  }
  v29.origin.CGFloat x = v11;
  v29.origin.CGFloat y = v13;
  v29.size.CGFloat width = v15;
  v29.size.CGFloat height = v17;
  __C::CGRect v30 = PaperTextAttachmentView.sensibleBounds(for:)(v29);
  CGFloat x = v30.origin.x;
  CGFloat y = v30.origin.y;
  CGFloat width = v30.size.width;
  CGFloat height = v30.size.height;
  uint64_t v22 = (void *)(*(uint64_t (**)(void))((*v9 & *v2) + 0x320))();
  if (!v22) {
    return 0.0;
  }
  uint64_t v23 = v22;
  unsigned __int8 v24 = objc_msgSend(v22, sel_cropDrawingAttachmentsWhenViewIsSmaller);

  if ((v24 & 1) == 0) {
    return 0.0;
  }
  if (objc_msgSend(self, sel_userInterfaceLayoutDirectionForSemanticContentAttribute_, objc_msgSend(v2, sel_semanticContentAttribute)))
  {
    v31.origin.CGFloat x = x;
    v31.origin.CGFloat y = y;
    v31.size.CGFloat width = width;
    v31.size.CGFloat height = height;
    double MinX = CGRectGetMinX(v31);
    if (*MEMORY[0x263F14CE0] - a1 + -16.0 < MinX) {
      double MinX = *MEMORY[0x263F14CE0] - a1 + -16.0;
    }
    if (MinX < 0.0) {
      return 0.0;
    }
    else {
      return MinX;
    }
  }
  else
  {
    double v26 = 0.0;
    v32.origin.CGFloat x = 0.0;
    v32.origin.CGFloat y = y;
    v32.size.CGFloat width = width;
    v32.size.CGFloat height = height;
    CGRectGetMaxX(v32);
  }
  return v26;
}

void PaperTextAttachmentView.drawingTransform(forViewWidth:)(long long *a1@<X8>, double a2@<D0>)
{
  uint64_t v5 = direct field offset for PaperTextAttachmentView.cachedDrawingTransformBoundsWidth;
  if (vabdd_f64(a2, *(double *)((char *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransformBoundsWidth)) < 1.0)
  {
    int v6 = *((unsigned __int8 *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransformShouldCrop);
    double v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x320))();
    if (v7)
    {
      uint64_t v8 = v7;
      unsigned int v9 = objc_msgSend(v7, sel_cropDrawingAttachmentsWhenViewIsSmaller);

      if (v6 == v9) {
        goto LABEL_15;
      }
    }
    else if (!v6)
    {
LABEL_15:
      long long v16 = *(_OWORD *)((char *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransform);
      long long v15 = *(_OWORD *)((char *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransform + 16);
      long long v17 = *(_OWORD *)((char *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransform + 32);
      goto LABEL_16;
    }
  }
  v28.origin.CGFloat x = PaperTextAttachmentView.paperBounds(forViewWidth:)(a2);
  CGFloat x = v28.origin.x;
  CGFloat y = v28.origin.y;
  CGFloat width = v28.size.width;
  CGFloat height = v28.size.height;
  double v14 = a2 / CGRectGetWidth(v28);
  long long v15 = xmmword_20C8356C0;
  long long v16 = xmmword_20C835600;
  long long v17 = 0uLL;
  if (v14 > 0.0 && (~*(void *)&v14 & 0x7FF0000000000000) != 0)
  {
    if (objc_msgSend(self, sel_userInterfaceLayoutDirectionForSemanticContentAttribute_, objc_msgSend(v2, sel_semanticContentAttribute)))
    {
      v29.origin.CGFloat x = x;
      v29.origin.CGFloat y = y;
      v29.size.CGFloat width = width;
      v29.size.CGFloat height = height;
      double v18 = -(v14 * CGRectGetMinX(v29));
      uint64_t v19 = direct field offset for PaperTextAttachmentView.cachedDrawingTransform;
      uint64_t v20 = (char *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransform;
      *(double *)uint64_t v20 = v14;
      *((void *)v20 + 1) = 0;
      *((void *)v20 + 2) = 0;
      *((double *)v20 + 3) = v14;
      *((void *)&v21 + 1) = 0;
      *(double *)&long long v21 = v18;
    }
    else
    {
      CGAffineTransformMakeScale(&v27, v14, v14);
      long long v22 = *(_OWORD *)&v27.c;
      long long v21 = *(_OWORD *)&v27.tx;
      uint64_t v19 = direct field offset for PaperTextAttachmentView.cachedDrawingTransform;
      uint64_t v23 = (_OWORD *)((char *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransform);
      *uint64_t v23 = *(_OWORD *)&v27.a;
      v23[1] = v22;
    }
    *(_OWORD *)((char *)v2 + v19 + 32) = v21;
    unsigned __int8 v24 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x320))();
    if (v24)
    {
      CGRect v25 = v24;
      unsigned __int8 v26 = objc_msgSend(v24, sel_cropDrawingAttachmentsWhenViewIsSmaller);
    }
    else
    {
      unsigned __int8 v26 = 0;
    }
    *((unsigned char *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransformShouldCrop) = v26;
    *(double *)((char *)v2 + v5) = a2;
    goto LABEL_15;
  }
LABEL_16:
  *a1 = v16;
  a1[1] = v15;
  a1[2] = v17;
}

id PaperTextAttachmentView.tiledView.getter()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1190))();
  id v2 = objc_msgSend(v1, sel__pkTiledViewIfEnabled);

  return v2;
}

uint64_t PaperTextAttachmentView.scrollView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1190))();
}

double PaperTextAttachmentView.drawingTransformOverride.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x1190))();
  if (v3)
  {
    id v4 = (id)v3;
  }
  else
  {
    id v4 = objc_msgSend(v1, sel_superview);
    if (!v4)
    {
      double v6 = *MEMORY[0x263F14CE0];
      goto LABEL_5;
    }
  }
  objc_msgSend(v4, sel_bounds);
  double v6 = v5;

LABEL_5:
  PaperTextAttachmentView.drawingTransform(forViewWidth:)(v10, v6);
  double result = *(double *)v10;
  long long v8 = v10[1];
  long long v9 = v10[2];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

uint64_t PaperTextAttachmentView.closestViewController.getter()
{
  id v1 = v0;
  while (1)
  {
    id v2 = objc_msgSend(v1, sel_nextResponder);
    if (v2) {
      break;
    }
LABEL_5:
    id v5 = objc_msgSend(v1, sel_nextResponder);

    if (!v5) {
      return 0;
    }
    self;
    id v1 = (id)swift_dynamicCastObjCClass();
    if (!v1)
    {

      return 0;
    }
  }
  uint64_t v3 = v2;
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (!v4)
  {

    goto LABEL_5;
  }
  uint64_t v6 = v4;

  return v6;
}

uint64_t PaperTextAttachmentView.viewControllerForPresentingUI.getter()
{
  uint64_t result = MEMORY[0x210550400](v0 + direct field offset for PaperTextAttachmentView._viewControllerForPresentingUI);
  if (!result)
  {
    return PaperTextAttachmentView.closestViewController.getter();
  }
  return result;
}

void PaperTextAttachmentView.viewControllerForPresentingUI.setter(void *a1)
{
  swift_unknownObjectWeakAssign();
}

void (*PaperTextAttachmentView.viewControllerForPresentingUI.modify(uint64_t *a1))(id *a1)
{
  uint64_t v3 = direct field offset for PaperTextAttachmentView._viewControllerForPresentingUI;
  a1[1] = v1;
  a1[2] = v3;
  uint64_t v4 = MEMORY[0x210550400](v1 + v3);
  if (!v4) {
    uint64_t v4 = PaperTextAttachmentView.closestViewController.getter();
  }
  *a1 = v4;
  return PaperTextAttachmentView.viewControllerForPresentingUI.modify;
}

void PaperTextAttachmentView.viewControllerForPresentingUI.modify(id *a1)
{
  id v1 = *a1;
  swift_unknownObjectWeakAssign();
}

Swift::Void __swiftcall PaperTextAttachmentView.observeTextView(_:)(UITextView_optional *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + direct field offset for PaperTextAttachmentView.observedTextView;
  id v5 = (void *)MEMORY[0x210550400](v1 + direct field offset for PaperTextAttachmentView.observedTextView);
  uint64_t v6 = v5;
  if (a1)
  {
    if (v5)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextView);
      double v7 = a1;
      char v8 = static NSObject.== infix(_:_:)();

      if (v8) {
        return;
      }
    }
  }
  else
  {
    if (!v5) {
      return;
    }
  }
  uint64_t v9 = MEMORY[0x210550400](v4);
  uint64_t v10 = (void *)MEMORY[0x263F83BE8];
  double v11 = (uint64_t *)MEMORY[0x263F815E0];
  if (v9)
  {
    double v12 = (void *)v9;
    CGFloat v13 = self;
    id v14 = objc_msgSend(v13, sel_defaultCenter);
    objc_msgSend(v14, sel_removeObserver_name_object_, v2, *v10, v12);

    id v15 = objc_msgSend(v13, sel_defaultCenter);
    uint64_t v16 = *v11;
    long long v17 = v11;
    id v18 = objc_msgSend(v12, sel_textStorage);
    objc_msgSend(v15, sel_removeObserver_name_object_, v2, v16, v18);

    double v11 = v17;
    uint64_t v10 = (void *)MEMORY[0x263F83BE8];
    objc_msgSend(v12, sel__removeScrollViewScrollObserver_, v2);
  }
  swift_unknownObjectWeakAssign();
  if (a1)
  {
    uint64_t v19 = self;
    unsigned __int8 v24 = a1;
    id v20 = objc_msgSend(v19, sel_defaultCenter);
    objc_msgSend(v20, sel_addObserver_selector_name_object_, v2, sel_updateAfterTextViewChange, *v10, v24);

    id v21 = objc_msgSend(v19, sel_defaultCenter);
    uint64_t v22 = *v11;
    id v23 = [(UITextView_optional *)v24 textStorage];
    objc_msgSend(v21, sel_addObserver_selector_name_object_, v2, sel_updateAfterTextViewChange, v22, v23);

    [(UITextView_optional *)v24 _addScrollViewScrollObserver:v2];
  }
}

Swift::Void __swiftcall PaperTextAttachmentView._observeScrollViewDidScroll(_:)(UIScrollView *a1)
{
  uint64_t v2 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v2)
  {
    __break(1u);
    return;
  }
  id v3 = objc_msgSend(v2, sel_setNeedsLayout);
  uint64_t v4 = (*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *v1) + 0x320))(v3);
  if (v4)
  {
    id v5 = (char *)v4;
    type metadata accessor for TiledTextView();
    if (!swift_dynamicCastClass())
    {
      uint64_t v10 = v5;
LABEL_13:

      return;
    }
    uint64_t v6 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
    uint64_t v7 = *(void *)&v6[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
    id v11 = v6;
    if (v7)
    {
      char v8 = (char *)objc_retain(*(id *)(v7
                                     + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool));

      uint64_t v9 = *(void **)&v8[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
      if (!v9
        || v8[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState] - 3 > 3)
      {
        id v11 = v5;
        goto LABEL_12;
      }
      id v11 = v9;
      objc_msgSend(v11, sel_setIsAnimating_, 0);
      swift_unknownObjectWeakAssign();
      objc_msgSend(self, sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v8, sel_updateBlobAnimation, 0);
      objc_msgSend(v8, sel_performSelector_withObject_afterDelay_, sel_updateBlobAnimation, 0, 0.5);
    }
    char v8 = v5;
LABEL_12:

    uint64_t v10 = v11;
    goto LABEL_13;
  }
}

void @objc PaperTextAttachmentView._observeScrollViewDidScroll(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  id v5 = a1;
  PaperTextAttachmentView._observeScrollViewDidScroll(_:)(v4);
}

id PaperTextAttachmentView.textView.getter()
{
  id result = objc_msgSend(v0, sel_superview);
  if (result)
  {
    uint64_t v2 = result;
    while (1)
    {
      self;
      id result = (id)swift_dynamicCastObjCClass();
      if (result) {
        break;
      }
      id v3 = objc_msgSend(v2, sel_superview);

      uint64_t v2 = v3;
      if (!v3) {
        return 0;
      }
    }
  }
  return result;
}

CGSize __swiftcall PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(UIView_optional *containerView)
{
  if (containerView) {
    [(UIView_optional *)containerView bounds];
  }
  else {
    double v3 = *MEMORY[0x263F14CE0];
  }
  float64_t v47 = v3;
  PaperTextAttachmentView.drawingTransform(forViewWidth:)(&v49, v3);
  double v4 = PaperTextAttachmentView.safePaperModelBounds.getter();
  uint64_t v8 = *(void *)((char *)v1 + direct field offset for PaperTextAttachmentView.resizeInfo);
  if (v8)
  {
    double v4 = *(double *)(v8 + 32);
    uint64_t v5 = *(void *)(v8 + 40);
    uint64_t v6 = *(void *)(v8 + 48);
    uint64_t v7 = *(void *)(v8 + 56);
  }
  double v9 = *MEMORY[0x263F14CD8];
  *(double *)&long long v11 = CGRectGetMaxY(*(CGRect *)&v4)
                  * sqrt(*(double *)&v49 * *(double *)&v49 + *((double *)&v49 + 1) * *((double *)&v49 + 1));
  if (v9 > *(double *)&v11) {
    *(double *)&long long v11 = v9;
  }
  long long v48 = v11;
  double v12 = (void *)MEMORY[0x263F8EED0];
  CGFloat v13 = *(char **)(*(void *)((char *)v1 + direct field offset for Canvas.paperView)
                 + *(void *)((*MEMORY[0x263F8EED0] & **(void **)((char *)v1
                                                                   + direct field offset for Canvas.paperView))
                             + 0x4C0));
  if (!v13) {
    goto LABEL_31;
  }
  uint64_t v14 = *(void *)&v13[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (!v14) {
    goto LABEL_31;
  }
  id v15 = *(void **)(v14 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
  if (!v15) {
    goto LABEL_31;
  }
  uint64_t v46 = v13;
  id v16 = objc_msgSend(v15, sel_overlayViews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v20)
    {
LABEL_13:
      if (v20 < 1)
      {
        __break(1u);
        goto LABEL_38;
      }
      for (uint64_t i = 0; i != v20; ++i)
      {
        if ((v17 & 0xC000000000000001) != 0) {
          id v22 = (id)MEMORY[0x21054E050](i, v17);
        }
        else {
          id v22 = *(id *)(v17 + 8 * i + 32);
        }
        id v23 = v22;
        objc_msgSend(v22, sel_frame);
        CGFloat v28 = v24;
        if ((~*(void *)&v24 & 0x7FF0000000000000) != 0
          && (CGFloat v29 = v25, (~*(void *)&v25 & 0x7FF0000000000000) != 0)
          && (CGFloat v30 = v26, (~*(void *)&v26 & 0x7FF0000000000000) != 0)
          && (CGFloat v31 = v27, (~*(void *)&v27 & 0x7FF0000000000000) != 0)
          && !CGRectIsEmpty(*(CGRect *)&v24))
        {
          v50.origin.CGFloat x = v28;
          v50.origin.CGFloat y = v29;
          v50.size.CGFloat width = v30;
          v50.size.CGFloat height = v31;
          double MaxY = CGRectGetMaxY(v50);

          long long v33 = v48;
          if (*(double *)&v48 <= MaxY) {
            *(double *)&long long v33 = MaxY;
          }
          long long v48 = v33;
        }
        else
        {
        }
      }
    }
  }

  id v10 = (id)swift_bridgeObjectRelease();
LABEL_31:
  double v34 = 1.0;
  double v35 = 1.0;
  if (containerView)
  {
    id v10 = [(UIView_optional *)containerView window];
    if (v10)
    {
      uint64_t v36 = v10;
      id v37 = objc_msgSend(v10, sel_screen);

      objc_msgSend(v37, sel_scale);
      double v35 = v38;
    }
  }
  uint64_t v39 = (void *)(*(uint64_t (**)(id))((*v12 & *v1) + 0x1190))(v10);
  if (v39)
  {
    CGPoint v40 = v39;
    objc_msgSend(v39, sel_zoomScale);
    double v34 = v41;
  }
  v42.f64[0] = v47;
  *(void *)&v42.f64[1] = v48;
  float64x2_t v43 = vmulq_n_f64(v42, v35 * v34);
  float64x2_t v44 = vrndmq_f64(v43);
  float64x2_t v18 = vdivq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v43, v44), (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL)), (int8x16_t)vrndpq_f64(v43), (int8x16_t)v44), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v35 * v34), 0));
  double v19 = v18.f64[1];
LABEL_38:
  result.CGFloat width = v18.f64[0];
  result.CGFloat height = v19;
  return result;
}

Swift::Void __swiftcall PaperTextAttachmentView.updateFrameForTextContainer(ensureLayout:shouldRedraw:avoidInvalidateLayout:)(Swift::Bool ensureLayout, Swift::Bool shouldRedraw, Swift::Bool avoidInvalidateLayout)
{
  objc_msgSend(v3, sel_frame);
  double v8 = v7;
  double v10 = v9;
  id v11 = objc_msgSend(v3, sel_frame);
  CGFloat v13 = v12;
  uint64_t v14 = (UIView_optional *)(*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *v3) + 0x1190))(v11);
  if (!v14) {
    uint64_t v14 = (UIView_optional *)objc_msgSend(v3, sel_superview);
  }
  CGSize v15 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v14);

  BOOL v16 = v15.height == v10 && v15.width == v8;
  v22.origin.CGFloat x = 0.0;
  v22.origin.CGFloat y = v13;
  v22.size.CGFloat width = v15.width;
  v22.size.CGFloat height = v15.height;
  PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v22, ensureLayout, !v16 && !avoidInvalidateLayout, shouldRedraw);
  if (!v16 && avoidInvalidateLayout)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v18))
    {
      double v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v19 = 0;
      _os_log_impl(&dword_20C2D7000, oslog, v18, "Mismatched frame size when we need to avoid invalidate layout.", v19, 2u);
      MEMORY[0x210550270](v19, -1, -1);
    }
  }
}

void PaperTextAttachmentView.isStandInCanvas.getter()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x320))();
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(v1, sel_standInAttachmentView);

  if (!v3) {
    return;
  }
  id v4 = *(id *)((char *)v0 + direct field offset for Canvas.paperView);
  unint64_t v5 = specialized ContainerCanvasElementView.pencilKitAttachmentViews()();

  if (!(v5 >> 62))
  {
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 0xC000000000000001) != 0)
  {
LABEL_12:
    id v6 = (id)MEMORY[0x21054E050](0, v5);
    goto LABEL_8;
  }
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v6 = *(id *)(v5 + 32);
LABEL_8:
    double v7 = v6;
    swift_bridgeObjectRelease();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    static NSObject.== infix(_:_:)();

    return;
  }
  __break(1u);
}

Swift::Void __swiftcall PaperTextAttachmentView.updateFrameForTextContainer()()
{
  objc_msgSend(v0, sel_frame);
  double v2 = v1;
  double v4 = v3;
  id v5 = objc_msgSend(v0, sel_frame);
  uint64_t v7 = v6;
  uint64_t v8 = (UIView_optional *)(*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *v0) + 0x1190))(v5);
  if (!v8) {
    uint64_t v8 = (UIView_optional *)objc_msgSend(v0, sel_superview);
  }
  CGSize v9 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v8);

  Swift::Bool v10 = v9.height != v4 || v9.width != v2;
  uint64_t v11 = 0;
  uint64_t v12 = v7;
  CGFloat width = v9.width;
  CGFloat height = v9.height;
  PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(*(__C::CGRect *)&v11, 0, v10, 1);
}

uint64_t PaperTextAttachmentView.isAtBeginningOfDocument.getter()
{
  if (objc_msgSend(v0, sel_isUserInteractionEnabled))
  {
    double v1 = *(void **)((char *)v0 + direct field offset for PaperTextAttachmentView.textAttachment);
    if (v1)
    {
      double v2 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1190);
      id v3 = v1;
      double v4 = (void *)v2();
      if (v4)
      {
        id v5 = v4;
        id v6 = objc_msgSend(v4, sel_textStorage);
        id v7 = objc_msgSend(v6, sel_length);

        if ((uint64_t)v7 > 0)
        {
          id v8 = objc_msgSend(v5, sel_textStorage);
          id v9 = objc_msgSend(v8, sel_attribute_atIndex_effectiveRange_, *MEMORY[0x263F814A0], 0, 0);

          if (v9)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            long long v15 = 0u;
            long long v16 = 0u;
          }
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v15, (uint64_t)v17, &demangling cache variable for type metadata for Any?);
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v17, (uint64_t)&v15, &demangling cache variable for type metadata for Any?);
          if (*((void *)&v16 + 1))
          {
            type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSTextAttachment);
            if (swift_dynamicCast())
            {
              uint64_t v12 = v14;
              id v13 = v3;
              char v10 = static NSObject.== infix(_:_:)();

              outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
LABEL_17:

              return v10 & 1;
            }
          }
          else
          {
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v15, &demangling cache variable for type metadata for Any?);
          }
          id v13 = v3;

          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
          char v10 = 0;
          uint64_t v12 = v13;
          goto LABEL_17;
        }
      }
      else
      {
      }
    }
  }
  char v10 = 1;
  return v10 & 1;
}

void PaperTextAttachmentView.isAtEndOfDocument.getter()
{
  uint64_t v1 = type metadata accessor for CharacterSet();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  double v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v6 = MEMORY[0x270FA5388](v5);
  id v8 = (char *)v25 - v7;
  if (objc_msgSend(v0, sel_isUserInteractionEnabled, v6))
  {
    id v9 = *(void **)((char *)v0 + direct field offset for PaperTextAttachmentView.textAttachment);
    if (v9)
    {
      char v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1190);
      id v11 = v9;
      uint64_t v12 = (void *)v10();
      if (!v12)
      {
LABEL_9:

        return;
      }
      id v13 = v12;
      id v14 = objc_msgSend(v12, sel_textStorage);
      id v15 = objc_msgSend(v14, sel_length);

      if ((uint64_t)v15 <= 0)
      {
LABEL_8:

        goto LABEL_9;
      }
      id v16 = objc_msgSend(v13, sel_textStorage);
      id v17 = objc_msgSend(v16, sel_string);

      if (!v17)
      {
        __break(1u);
        return;
      }
      static CharacterSet.whitespacesAndNewlines.getter();
      CharacterSet.inverted.getter();
      os_log_type_t v18 = *(void (**)(char *, uint64_t))(v2 + 8);
      v18(v8, v1);
      Class isa = CharacterSet._bridgeToObjectiveC()().super.isa;
      v18(v4, v1);
      id v20 = objc_msgSend(v17, sel_rangeOfCharacterFromSet_options_, isa, 4);

      if (v20 == (id)NSNotFound.getter())
      {

        goto LABEL_8;
      }
      id v21 = objc_msgSend(v13, sel_textStorage);
      id v22 = objc_msgSend(v21, sel_attribute_atIndex_effectiveRange_, *MEMORY[0x263F814A0], v20, 0);

      if (v22)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v26 = 0u;
        long long v27 = 0u;
      }
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v26, (uint64_t)v28, &demangling cache variable for type metadata for Any?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v28, (uint64_t)&v26, &demangling cache variable for type metadata for Any?);
      if (*((void *)&v27 + 1))
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSTextAttachment);
        if (swift_dynamicCast())
        {
          id v23 = (void *)v25[1];
          id v24 = v11;
          static NSObject.== infix(_:_:)();

          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for Any?);
LABEL_19:

          return;
        }
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v26, &demangling cache variable for type metadata for Any?);
      }
      id v24 = v11;

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for Any?);
      id v23 = v24;
      goto LABEL_19;
    }
  }
}

void PaperTextAttachmentView.registerUndo(_:selection:analyticsEvents:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  id v13 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x1190))();
  if (v13)
  {
    id v14 = *(void **)((char *)v6 + direct field offset for PaperTextAttachmentView.textAttachment);
    if (v14)
    {
      id v25 = v13;
      uint64_t v15 = swift_dynamicCastObjCProtocolConditional();
      if (v15)
      {
        id v16 = (void *)v15;
        id v17 = v14;
        id v18 = objc_msgSend(v6, sel_undoManager);
        if (v18)
        {
          double v19 = v18;
          id v20 = objc_msgSend(v16, sel__paperIdentifier);
          uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v24 = v17;
          uint64_t v23 = v22;

          UITextView._ppk_registerUndo(_:selection:undoManager:paperIdentifier:analyticsEvents:)(a1, a2, a3, a4, a5, (uint64_t)v19, v21, v23, a6);
          swift_bridgeObjectRelease();
        }
        else
        {
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
}

void PaperTextAttachmentView.registerUndo(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x1190))();
  if (v5)
  {
    double v6 = *(void **)((char *)v2 + direct field offset for PaperTextAttachmentView.textAttachment);
    if (v6)
    {
      id v17 = v5;
      uint64_t v7 = swift_dynamicCastObjCProtocolConditional();
      if (v7)
      {
        id v8 = (void *)v7;
        id v9 = v6;
        id v10 = objc_msgSend(v2, sel_undoManager);
        if (v10)
        {
          id v11 = v10;
          id v12 = objc_msgSend(v8, sel__paperIdentifier);
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;

          id v16 = (void *)swift_allocObject();
          void v16[2] = v13;
          void v16[3] = v15;
          v16[4] = a1;
          v16[5] = a2;
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextView);
          swift_bridgeObjectRetain();
          swift_retain();
          NSUndoManager.registerUndo<A>(withTarget:handler:)();

          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
}

void PaperTextAttachmentView.height(from:delta:)(void *a1)
{
  if (a1)
  {
    objc_msgSend(a1, sel_bounds);
    CGRectGetMaxY(v7);
    uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x1190))();
    if (v2)
    {
      id v3 = (id)v2;
    }
    else
    {
      id v3 = objc_msgSend(v1, sel_superview);
      if (!v3)
      {
        double v5 = *MEMORY[0x263F14CE0];
        goto LABEL_6;
      }
    }
    objc_msgSend(v3, sel_bounds);
    double v5 = v4;

LABEL_6:
    PaperTextAttachmentView.drawingTransform(forViewWidth:)(&v6, v5);
    return;
  }
  __break(1u);
}

void PaperTextAttachmentView.updateDrawingHeight(_:)(double a1)
{
  id v3 = objc_msgSend(v1, sel_bounds);
  double v5 = v4;
  double v6 = *MEMORY[0x263F14CD8];
  uint64_t v7 = (*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *v1) + 0x1190))(v3);
  if (v7)
  {
    id v8 = (id)v7;
LABEL_4:
    objc_msgSend(v8, sel_bounds);
    double v10 = v9;

    goto LABEL_5;
  }
  id v8 = objc_msgSend(v1, sel_superview);
  if (v8) {
    goto LABEL_4;
  }
  double v10 = *MEMORY[0x263F14CE0];
LABEL_5:
  PaperTextAttachmentView.drawingTransform(forViewWidth:)(&v18, v10);
  double v11 = fmax(v6 * sqrt(*(double *)&v18 * *(double *)&v18 + *((double *)&v18 + 1) * *((double *)&v18 + 1)), 8.0);
  if (v11 > a1) {
    double v12 = v11;
  }
  else {
    double v12 = a1;
  }
  if ((~*(void *)&a1 & 0x7FF0000000000000) != 0) {
    double v13 = v12;
  }
  else {
    double v13 = v11;
  }
  if (v5 < v13)
  {
    objc_msgSend(v1, sel_frame);
    double v17 = v13;
    PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(*(__C::CGRect *)&v14, 1, 1, 1);
  }
}

uint64_t PaperTextAttachmentView.__allocating_init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, int a8)
{
  id v17 = objc_allocWithZone(v8);
  return PaperTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t PaperTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, int a8)
{
  double v9 = v8;
  int v161 = a8;
  uint64_t v182 = a6;
  uint64_t v179 = a5;
  id v185 = a4;
  uint64_t v175 = a3;
  uint64_t v171 = a2;
  uint64_t v170 = a1;
  CGFloat v178 = 0;
  FileVersionPolicCGFloat y = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  double v172 = *(void (***)(char *, void, uint64_t))(FileVersionPolicy - 8);
  MEMORY[0x270FA5388](FileVersionPolicy);
  uint64_t v151 = (char *)v147 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v153 = (char *)v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v167 = (char *)v147 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = type metadata accessor for UUID();
  uint64_t v168 = *(void *)(v169 - 8);
  MEMORY[0x270FA5388](v169);
  uint64_t v156 = (char *)v147 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  id v155 = (char *)v147 - v18;
  uint64_t v183 = type metadata accessor for CRKeyPath();
  uint64_t v177 = *(void *)(v183 - 8);
  MEMORY[0x270FA5388](v183);
  uint64_t v184 = (char *)v147 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v166 = (char *)v147 - v21;
  uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v164);
  uint64_t v163 = (uint64_t)v147 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  id v25 = (char *)v147 - v24;
  uint64_t v26 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v26);
  CGFloat v28 = (char *)v147 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v186 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v181 = *(void *)(v186 - 8);
  MEMORY[0x270FA5388](v186);
  uint64_t v160 = (char *)v147 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  char v149 = (char *)v147 - v31;
  MEMORY[0x270FA5388](v32);
  v187 = (char *)v147 - v33;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v34 - 8);
  os_log_type_t v162 = (void (*)(char *, char *, uint64_t))((char *)v147 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v36);
  uint64_t v154 = (uint64_t)v147 - v37;
  MEMORY[0x270FA5388](v38);
  uint64_t v165 = (uint64_t)v147 - v39;
  MEMORY[0x270FA5388](v40);
  float64x2_t v42 = (char *)v147 - v41;
  MEMORY[0x270FA5388](v43);
  uint64_t v45 = (char *)v147 - v44;
  uint64_t v46 = type metadata accessor for URL();
  uint64_t v47 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v157 = (char *)v147 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v49 = *a7;
  *(void *)&v9[direct field offset for PaperTextAttachmentView.paperViewDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v9[direct field offset for PaperTextAttachmentView.syncManager] = 0;
  *(void *)&v9[direct field offset for PaperTextAttachmentView.syncCancellable] = 0;
  *(void *)&v9[direct field offset for PaperTextAttachmentView.saveCancellable] = 0;
  uint64_t v159 = direct field offset for PaperTextAttachmentView.textAttachment;
  *(void *)&v9[direct field offset for PaperTextAttachmentView.textAttachment] = 0;
  *(void *)&v9[direct field offset for PaperTextAttachmentView.eatTapGestureRecognizer] = 0;
  *(void *)&v9[direct field offset for PaperTextAttachmentView.tapBelowGestureRecognizer] = 0;
  *(void *)&v9[direct field offset for PaperTextAttachmentView.topResizeView] = 0;
  *(void *)&v9[direct field offset for PaperTextAttachmentView.bottomResizeView] = 0;
  *(void *)&v9[direct field offset for PaperTextAttachmentView.resizeDragGestureRecognizer] = 0;
  CGRect v50 = &v9[direct field offset for PaperTextAttachmentView.reportedBounds];
  *(_OWORD *)CGRect v50 = 0u;
  *((_OWORD *)v50 + 1) = 0u;
  v50[32] = 1;
  v9[direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging] = 0;
  *(void *)&v9[direct field offset for PaperTextAttachmentView.linedPaperView] = 0;
  *(void *)&v9[direct field offset for PaperTextAttachmentView.previousLinks] = MEMORY[0x263F8EE78];
  double v51 = &v9[direct field offset for PaperTextAttachmentView.paperBoundsHint];
  *(_OWORD *)double v51 = 0u;
  *((_OWORD *)v51 + 1) = 0u;
  id v150 = (CGFloat *)v51;
  v51[32] = 1;
  uint64_t v158 = direct field offset for PaperTextAttachmentView.shouldBecomeFirstResponder;
  v9[direct field offset for PaperTextAttachmentView.shouldBecomeFirstResponder] = 0;
  *(void *)&v9[direct field offset for PaperTextAttachmentView.resizeInfo] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v9[direct field offset for PaperTextAttachmentView.linedPaper] = 0;
  v9[direct field offset for PaperTextAttachmentView.isCurrentToolGenerationTool] = 0;
  double v52 = &v9[direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundContextToInitialize];
  *(void *)double v52 = 0;
  *((void *)v52 + 1) = 0;
  v52[16] = -1;
  __C::CGRect v53 = &v9[direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundBoundsToInitialize];
  *(_OWORD *)__C::CGRect v53 = 0u;
  *((_OWORD *)v53 + 1) = 0u;
  v53[32] = 1;
  CGRect v54 = &v9[direct field offset for PaperTextAttachmentView.cachedDrawingTransform];
  *CGRect v54 = 0x3FF0000000000000;
  v54[1] = 0;
  v54[2] = 0;
  v54[3] = 0x3FF0000000000000;
  v54[4] = 0;
  v54[5] = 0;
  *(void *)&v9[direct field offset for PaperTextAttachmentView.cachedDrawingTransformBoundsWidth] = 0xBFF0000000000000;
  v9[direct field offset for PaperTextAttachmentView.cachedDrawingTransformShouldCrop] = 0;
  swift_unknownObjectWeakInit();
  CGRect v55 = &v9[direct field offset for PaperTextAttachmentView.calculateDocument];
  *CGRect v55 = 0;
  v55[1] = 0;
  v9[direct field offset for PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior] = 0;
  int v180 = v49;
  uint64_t v176 = v46;
  uint64_t v173 = v47;
  if (!v49)
  {
    id v57 = v9;
    goto LABEL_5;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v179, (uint64_t)v45, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46) == 1)
  {
    uint64_t v56 = v9;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v45, &demangling cache variable for type metadata for URL?);
LABEL_5:
    type metadata accessor for CRContext();
    id v174 = (id)MEMORY[0x21054C990](0, v182);
    uint64_t v58 = v175;
    goto LABEL_14;
  }
  uint64_t v148 = v25;
  double v59 = v157;
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v157, v45, v46);
  double v60 = (void *)type metadata accessor for CRContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v42, 1, 1, v46);
  double v61 = v9;
  uint64_t v62 = v47;
  id v174 = v60;
  double v63 = v178;
  objc_super v64 = (void *)static CRContext.uniqueContextUnchecked(for:encryptionDelegate:temporaryDirectory:)();
  uint64_t v65 = v63;
  if (v63)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v42, &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    __swift_project_value_buffer(v66, (uint64_t)logger);
    id v67 = v63;
    id v68 = v63;
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.fault.getter();
    BOOL v71 = os_log_type_enabled(v69, v70);
    id v25 = v148;
    if (v71)
    {
      uint64_t v72 = v63;
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      CGFloat v178 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 138412290;
      v147[1] = v73 + 4;
      id v74 = v72;
      uint64_t v75 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&long long v189 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v76 = v178;
      *CGFloat v178 = v75;
      uint64_t v65 = v72;

      _os_log_impl(&dword_20C2D7000, v69, v70, "Cannot create CRContext for attachment %@", v73, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x210550270](v76, -1, -1);
      MEMORY[0x210550270](v73, -1, -1);
    }
    else
    {
    }
    uint64_t v77 = v69;
    uint64_t v58 = v175;

    id v174 = (id)MEMORY[0x21054C990](0, v182);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v157, v176);
    CGFloat v178 = 0;
  }
  else
  {
    id v174 = v64;
    CGFloat v178 = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v42, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v46);
    uint64_t v58 = v175;
    id v25 = v148;
  }
LABEL_14:
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v189 = 0u;
  long long v190 = 0u;
  CRRegister.init(wrappedValue:)();
  long long v189 = 0u;
  long long v190 = 0u;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v189 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v25, 1, 1, v78);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v25, v163, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(void *)&long long v189 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v189 = 0;
  *((void *)&v189 + 1) = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v189 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  CROrderedSet.init()();
  *(void *)&v28[*(int *)(v26 + 48)] = MEMORY[0x263F8EE80];
  id v79 = v166;
  CRKeyPath.init(_:)();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule<>.init(_:id:)();
  uint64_t v80 = (uint64_t)v167;
  UUID.init(uuidString:)();
  uint64_t v81 = v168;
  uint64_t v82 = v169;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v168 + 48))(v80, 1, v169) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v80, &demangling cache variable for type metadata for UUID?);
    uint64_t v83 = v184;
    CRKeyPath.init(_:)();
    uint64_t v84 = v177;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v85 = v79;
    uint64_t v86 = v155;
    (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v155, v80, v82);
    (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v156, v86, v82);
    CRKeyPath.init(_:)();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v86, v82);
    uint64_t v84 = v177;
    uint64_t v83 = v184;
    (*(void (**)(char *, char *, uint64_t))(v177 + 32))(v184, v85, v183);
  }
  id v87 = v172;
  uint64_t v88 = v165;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v58, v165, &demangling cache variable for type metadata for URL?);
  if (v180
    || (uint64_t v89 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v173 + 48), v89(v88, 1, v176) == 1))
  {
    uint64_t v90 = (void *)outlined destroy of StocksKitCurrencyCache.Provider?(v88, &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for initialHeightOfInsertedTextAttachment != -1) {
      uint64_t v90 = (void *)swift_once();
    }
    *(void *)&long long v189 = static UIConstants.initialHeightOfInsertedTextAttachment;
    uint64_t v91 = v159;
    char v92 = v161;
    if (v185)
    {
      uint64_t v188 = &unk_26C1F1D20;
      uint64_t v90 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v90)
      {
        id v93 = v90;
        unsigned __int8 v94 = objc_msgSend(v90, sel_respondsToSelector_, sel__paperSizeHint);
        id v95 = v185;
        uint64_t v96 = v95;
        if (v94)
        {
          id v97 = v95;
          objc_msgSend(v93, sel__paperSizeHint);
          if (v98 <= 0.0 || (double v100 = v99, v99 <= 0.0))
          {
          }
          else
          {
            double v101 = v98;
            if (one-time initialization token for minimumTextAttachmentHeight != -1) {
              swift_once();
            }
            double v102 = *(double *)&static UIConstants.minimumTextAttachmentHeight;
            double v103 = *MEMORY[0x263F14CE0];

            double v104 = v100 * v103 / v101;
            if (v102 > v104) {
              double v104 = v102;
            }
            *(double *)&long long v189 = v104;
          }
        }
        if (objc_msgSend(v93, sel_respondsToSelector_, sel__paperBoundsHint))
        {
          id v121 = v96;
          objc_msgSend(v93, sel__paperBoundsHint);
          CGFloat x = v191.origin.x;
          CGFloat y = v191.origin.y;
          CGFloat width = v191.size.width;
          CGFloat height = v191.size.height;
          BOOL v126 = CGRectEqualToRect(v191, *MEMORY[0x263F001A0]);

          uint64_t v84 = v177;
          uint64_t v83 = v184;
          if (!v126)
          {
            uint64_t v127 = v150;
            *id v150 = x;
            v127[1] = y;
            v127[2] = width;
            v127[3] = height;
            *((unsigned char *)v127 + 32) = 0;
          }
        }
        else
        {

          uint64_t v84 = v177;
          uint64_t v83 = v184;
        }
      }
    }
    MEMORY[0x270FA5388](v90);
    v147[-2] = &v189;
    v147[-1] = v83;
    Capsule.mutate<A>(_:)();
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v88, &demangling cache variable for type metadata for URL?);
    uint64_t v105 = v154;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v58, v154, &demangling cache variable for type metadata for URL?);
    uint64_t result = v89(v105, 1, v176);
    if (result == 1)
    {
      __break(1u);
      return result;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
    uint64_t v107 = type metadata accessor for CRCodableVersion();
    uint64_t v108 = *(void *)(v107 - 8);
    uint64_t v109 = *(void *)(v108 + 72);
    unint64_t v110 = (*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
    uint64_t v111 = swift_allocObject();
    *(_OWORD *)(v111 + 16) = xmmword_20C835740;
    unint64_t v112 = v111 + v110;
    id v113 = *(void (**)(unint64_t, void, uint64_t))(v108 + 104);
    v113(v112, *MEMORY[0x263F32EB0], v107);
    v113(v112 + v109, *MEMORY[0x263F32EB8], v107);
    uint64_t v114 = one-time initialization token for allReadableFileFormatVersions;
    uint64_t v115 = (void (**)(char *, void, uint64_t))v174;
    if (v114 != -1) {
      swift_once();
    }
    uint64_t v116 = v151;
    uint64_t v117 = FileVersionPolicy;
    v87[13](v151, *MEMORY[0x263F32FB0], FileVersionPolicy);
    uint64_t v118 = (uint64_t)v153;
    double v172 = v115;
    uint64_t v119 = v154;
    uint64_t v120 = v178;
    static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
    uint64_t v84 = v177;
    ((void (*)(char *, uint64_t))v87[1])(v116, v117);
    swift_bridgeObjectRelease();
    if (v120)
    {

      (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v119, v176);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v181 + 56))(v118, 1, 1, v186);
      outlined destroy of StocksKitCurrencyCache.Provider?(v118, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v119, v176);
      uint64_t v142 = v181;
      uint64_t v143 = v186;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v181 + 56))(v118, 0, 1, v186);
      os_log_type_t v144 = v187;
      (*(void (**)(char *, uint64_t))(v142 + 8))(v187, v143);
      uint64_t v145 = *(void (**)(char *, uint64_t, uint64_t))(v142 + 32);
      uint64_t v146 = v149;
      v145(v149, v118, v143);
      v145(v144, (uint64_t)v146, v143);
    }
    uint64_t v83 = v184;
    uint64_t v91 = v159;
    uint64_t v58 = v175;
    char v92 = v161;
  }
  uint64_t v128 = *(void **)&v9[v91];
  id v129 = v185;
  *(void *)&v9[v91] = v185;
  id v130 = v129;

  (*(void (**)(unsigned char *, char *, uint64_t))(v84 + 16))(&v9[direct field offset for PaperTextAttachmentView.paperDrawingKeyPath], v83, v183);
  v9[v158] = v92 & 1;

  double v131 = *MEMORY[0x263F14CE0];
  uint64_t v132 = one-time initialization token for defaultTextAttachmentHeight;
  id v133 = v174;
  if (v132 != -1) {
    swift_once();
  }
  double v134 = *(double *)&static UIConstants.defaultTextAttachmentHeight;
  uint64_t v135 = (uint64_t)v160;
  (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v160, v187, v186);
  int v136 = v180;
  specialized Canvas.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:)(v133, v135, v180, 1, 1, 0.0, 0.0, v131, v134);
  id v138 = v137;
  uint64_t v139 = (void *)MEMORY[0x21054D080](0xD000000000000027, 0x800000020C8510F0);
  objc_msgSend(v138, sel_setAccessibilityIdentifier_, v139);

  *((unsigned char *)v138 + direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging) = (v92 & 1) == 0;
  os_log_type_t v140 = v162;
  if (v136) {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v58, (uint64_t)v162, &demangling cache variable for type metadata for URL?);
  }
  else {
    (*(void (**)(void (*)(char *, char *, uint64_t), uint64_t, uint64_t, uint64_t))(v173 + 56))(v162, 1, 1, v176);
  }
  PaperTextAttachmentView.createPaperView(paperBundleURL:)(v140);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v140, &demangling cache variable for type metadata for URL?);
  PaperTextAttachmentView.addGestures()();
  unint64_t v141 = v184;
  if (v92)
  {
    LOBYTE(v189) = 3;
    PaperTextAttachmentView.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)&v189);
  }

  outlined destroy of StocksKitCurrencyCache.Provider?(v182, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v179, &demangling cache variable for type metadata for URL?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v58, &demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t))(v181 + 8))(v187, v186);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v141, v183);
  return (uint64_t)v138;
}

uint64_t closure #1 in PaperTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v30 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v29 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v27);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v31 = (uint64_t)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = *MEMORY[0x263F14CE0];
  uint64_t v14 = *a2;
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v15 = (void (*)(_OWORD *, void))Capsule.Ref<>.root.modify();
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = v13;
  uint64_t v35 = v14;
  uint64_t v28 = type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  v15(v36, 0);
  uint64_t v16 = *a2;
  uint64_t v17 = (void (*)(_OWORD *, void))Capsule.Ref<>.root.modify();
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = v13;
  uint64_t v35 = v16;
  CRRegister.wrappedValue.setter();
  v17(v36, 0);
  long long v18 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  v36[0] = *MEMORY[0x263F001A0];
  v36[1] = v18;
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  swift_retain();
  CRRegister.init(wrappedValue:)();
  uint64_t v19 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  CROrderedSet.init()();
  *(void *)&v7[*(int *)(v19 + 24)] = MEMORY[0x263F8EE80];
  uint64_t v20 = type metadata accessor for CRKeyPath();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v29, v30, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v22, 0, 1, v20);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Ref.init<A>(_:_:identity:)();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v12, 0, 1, v23);
  uint64_t v24 = (uint64_t (*)(_OWORD *, void))Capsule.Ref<>.root.modify();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v12, v31, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  return v24(v36, 0);
}

uint64_t @objc PaperTextAttachmentView.init(attachment:drawing:inserted:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  id v7 = a3;
  return specialized PaperTextAttachmentView.init(attachment:drawing:inserted:)(a3, a5);
}

Class @objc PaperTextAttachmentView.tiledViewAttachmentViews()(char *a1)
{
  uint64_t v1 = *(void **)&a1[direct field offset for Canvas.paperView];
  uint64_t v2 = a1;
  id v3 = v1;
  specialized ContainerCanvasElementView.pencilKitAttachmentViews()();

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKAttachmentView);
  v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return v4.super.isa;
}

void @objc PaperTextAttachmentView.topLevelAttachmentView()(char *a1)
{
  uint64_t v1 = *(void **)&a1[direct field offset for Canvas.paperView];
  uint64_t v2 = a1;
  id v3 = v1;
  unint64_t v4 = specialized ContainerCanvasElementView.pencilKitAttachmentViews()();

  if (!(v4 >> 62))
  {
    if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
LABEL_11:
    id v5 = (id)MEMORY[0x21054E050](0, v4);
    goto LABEL_6;
  }
  if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return;
  }
  id v5 = *(id *)(v4 + 32);
LABEL_6:
  uint64_t v6 = v5;

  swift_bridgeObjectRelease();
  id v7 = v6;
}

double @objc PaperTextAttachmentView.drawingTextAttachmentBounds()(void *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0x1190);
  uint64_t v2 = a1;
  id v3 = (UIView_optional *)v1();
  if (!v3) {
    id v3 = (UIView_optional *)objc_msgSend(v2, sel_superview);
  }
  PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v3);

  return 0.0;
}

double @objc PaperTextAttachmentView.drawingTextAttachmentBounds(forContainerView:)(void *a1, uint64_t a2, UIView_optional *a3)
{
  id v5 = a3;
  id v6 = a1;
  PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(a3);

  return 0.0;
}

void PaperTextAttachmentView.didBeginDrawingInCanvasElementView(_:)()
{
  uint64_t v1 = v0;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v2 = *(id *)&v0[direct field offset for Canvas.paperView];
  char v3 = static NSObject.== infix(_:_:)();

  if (v3)
  {
    objc_msgSend(v1, sel_becomeFirstResponder);
  }
}

void *PaperTextAttachmentView.attachmentViewForCanvasElementView(_:)()
{
  id v1 = v0;
  return v0;
}

uint64_t PaperTextAttachmentView.hitChromeForCanvasElementView(_:location:isStylus:)(CGFloat a1, CGFloat a2, uint64_t a3, char a4)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v8 = *(id *)(v4 + direct field offset for Canvas.paperView);
  char v9 = static NSObject.== infix(_:_:)();

  if (v9)
  {
    objc_msgSend(self, sel_resizeHitSize);
    if (PaperTextAttachmentView.hitTestResizeHandles(location:threshold:)(a1, a2, v10)) {
      return 1;
    }
  }
  return specialized Canvas.hitChromeForCanvasElementView(_:location:isStylus:)(a4 & 1, a1, a2);
}

Swift::Bool __swiftcall PaperTextAttachmentView.gestureRecognizerShouldBegin(_:)(UIGestureRecognizer *a1)
{
  id v2 = v1;
  uint64_t v4 = *(void **)&v1[direct field offset for PaperTextAttachmentView.eatTapGestureRecognizer];
  if (!v4
    || (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer), v5 = a1, v6 = v4, char v7 = static NSObject.== infix(_:_:)(), v5, v6, (v7 & 1) == 0))
  {
    uint64_t v15 = *(void **)&v2[direct field offset for PaperTextAttachmentView.tapBelowGestureRecognizer];
    if (v15
      && (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer), uint64_t v16 = a1, v17 = v15, v18 = static NSObject.== infix(_:_:)(), v16, v17, (v18 & 1) != 0))
    {
      [(UIGestureRecognizer *)v16 locationInView:v2];
      unint64_t v20 = v19;
      unint64_t v22 = v21;
      objc_msgSend(v2, sel_bounds);
      CGFloat v24 = v23;
      CGFloat v26 = v25;
      v32.origin.CGFloat x = v27;
      v32.origin.CGFloat y = v28;
      v32.size.CGFloat width = v24;
      v32.size.CGFloat height = v26;
      unsigned __int8 v29 = PaperTextAttachmentView.hit(byTouchLocation:canvasBounds:)((CGPoint)__PAIR128__(v22, v20), v32);
    }
    else
    {
      uint64_t v30 = (NSString *)MEMORY[0x21054D080](0xD00000000000001CLL, 0x800000020C8511B0);
      Class v31 = NSClassFromString(v30);

      if (!v31)
      {
        char v14 = 1;
        return v14 & 1;
      }
      unsigned __int8 v29 = [(UIGestureRecognizer *)a1 isKindOfClass:v31];
    }
    char v14 = v29 ^ 1;
    return v14 & 1;
  }
  char v9 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = swift_bridgeObjectRetain();
    unint64_t v12 = specialized Sequence.compactMap<A>(_:)(v11, (uint64_t)v10);

    swift_bridgeObjectRelease();
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    char v14 = v13 != 0;
    return v14 & 1;
  }
  __break(1u);
  return result;
}

uint64_t @objc PaperTextAttachmentView.gestureRecognizerShouldBegin(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  id v5 = a1;
  LOBYTE(a1) = PaperTextAttachmentView.gestureRecognizerShouldBegin(_:)(v4);

  return a1 & 1;
}

Swift::Bool __swiftcall PaperTextAttachmentView.gestureRecognizer(_:shouldReceive:)(UIGestureRecognizer *_, UITouch shouldReceive)
{
  uint64_t v4 = *(void **)(v2 + direct field offset for PaperTextAttachmentView.resizeDragGestureRecognizer);
  if (!v4
    || (uint64_t v5 = v2,
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer), id v7 = v4, v8 = _, v9 = static NSObject.== infix(_:_:)(), v8, v7, (v9 & 1) == 0))
  {
    id v17 = (NSString *)MEMORY[0x21054D080](0xD00000000000001CLL, 0x800000020C8511B0);
    Class v18 = NSClassFromString(v17);

    if (v18) {
      return [(UIGestureRecognizer *)_ isKindOfClass:v18] ^ 1;
    }
LABEL_8:
    LOBYTE(v16) = 1;
    return v16;
  }
  [(objc_class *)shouldReceive.super.isa locationInView:v5];
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  objc_msgSend(self, sel_resizeHitSize);
  if ((PaperTextAttachmentView.hitTestResizeHandles(location:threshold:)(v11, v13, v14) & 1) == 0)
  {
    LOBYTE(v16) = 0;
    return v16;
  }
  uint64_t v15 = *(void **)(v5 + direct field offset for PaperTextAttachmentView.bottomResizeView);
  if (!v15) {
    goto LABEL_8;
  }
  LOBYTE(v16) = 1;
  objc_msgSend(v15, sel_setHighlighted_, 1);
  return v16;
}

BOOL @objc PaperTextAttachmentView.gestureRecognizer(_:shouldReceive:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  Swift::Bool v9 = PaperTextAttachmentView.gestureRecognizer(_:shouldReceive:)(v6, (UITouch)v7);

  return v9;
}

Swift::Void __swiftcall PaperTextAttachmentView.resizeGestureRecognizerDidChangeState(_:)(UIGestureRecognizer *a1)
{
  uint64_t v2 = *(void **)(v1 + direct field offset for PaperTextAttachmentView.bottomResizeView);
  if (v2)
  {
    id v5 = v2;
    BOOL v4 = (id)[(UIGestureRecognizer *)a1 state] == (id)1
      || (id)[(UIGestureRecognizer *)a1 state] == (id)2;
    objc_msgSend(v5, sel_setHighlighted_, v4);
  }
}

uint64_t @objc PaperTextAttachmentView.gestureRecognizerShouldDelayLift(_:)(char *a1, uint64_t a2, void *a3)
{
  char v3 = *(void **)&a1[direct field offset for PaperTextAttachmentView.resizeDragGestureRecognizer];
  if (v3)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    id v6 = a3;
    id v7 = a1;
    id v8 = v3;
    char v9 = static NSObject.== infix(_:_:)();
  }
  else
  {
    char v9 = 0;
  }
  return v9 & 1;
}

void @objc PaperTextAttachmentView.tapBelowGesture(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  specialized PaperTextAttachmentView.tapBelowGesture(_:)();
}

Swift::Void __swiftcall PaperTextAttachmentView.addGestures()()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v0, sel_noOpForGesture_);
  objc_msgSend(v1, sel_setDelegate_, v0);
  uint64_t v2 = *(void **)&v0[direct field offset for PaperTextAttachmentView.eatTapGestureRecognizer];
  *(void *)&v0[direct field offset for PaperTextAttachmentView.eatTapGestureRecognizer] = v1;
  id v3 = v1;

  objc_msgSend(v0, sel_addGestureRecognizer_, v3);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v0, sel_tapBelowGesture_);
  objc_msgSend(v4, sel_setDelegate_, v0);
  id v5 = *(void **)&v0[direct field offset for PaperTextAttachmentView.tapBelowGestureRecognizer];
  *(void *)&v0[direct field offset for PaperTextAttachmentView.tapBelowGestureRecognizer] = v4;
  id v13 = v4;

  objc_msgSend(v0, sel_addGestureRecognizer_, v13);
  id v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ResizeGestureRecognizer()), sel_initWithTarget_action_, v0, sel_resizeGesture_);
  uint64_t v7 = direct field offset for PaperTextAttachmentView.resizeDragGestureRecognizer;
  id v8 = *(void **)&v0[direct field offset for PaperTextAttachmentView.resizeDragGestureRecognizer];
  *(void *)&v0[direct field offset for PaperTextAttachmentView.resizeDragGestureRecognizer] = v6;

  char v9 = *(void **)&v0[v7];
  if (v9
    && (objc_msgSend(v9, sel_setDelegate_, v0), (double v10 = *(void **)&v0[v7]) != 0)
    && (id v11 = v10,
        double v12 = (void *)MEMORY[0x21054D080](0xD00000000000001BLL, 0x800000020C850E70),
        objc_msgSend(v11, sel_setName_, v12),
        v11,
        v12,
        *(void *)&v0[v7]))
  {
    objc_msgSend(v0, sel_addGestureRecognizer_);
  }
  else
  {
    __break(1u);
  }
}

id PaperTextAttachmentView.hitTestResizeHandles(location:threshold:)(CGFloat a1, CGFloat a2, CGFloat a3)
{
  id v4 = *(void **)&v3[direct field offset for PaperTextAttachmentView.bottomResizeView];
  if (!v4) {
    return 0;
  }
  id v5 = v3;
  id v6 = *(void **)&v3[direct field offset for PaperTextAttachmentView.topResizeView];
  if (!v6) {
    return 0;
  }
  id v10 = v4;
  id v11 = v6;
  objc_msgSend(v5, sel_bounds);
  double v13 = a3 * 0.5;
  if (a3 * 0.5 + v12 * 0.5 <= a3) {
    double v14 = a3 * 0.5 + v12 * 0.5;
  }
  else {
    double v14 = a3;
  }
  if (objc_msgSend(v5, sel_effectiveUserInterfaceLayoutDirection) == (id)1)
  {
    objc_msgSend(v5, sel_bounds);
    double v16 = v15 - v13;
    double v17 = a3 * -0.5;
  }
  else
  {
    double v17 = a3 * -0.5;
    double v16 = a3 * -0.5;
  }
  objc_msgSend(v5, sel_bounds);
  double v20 = v19;
  v25.origin.CGFloat x = v16;
  v25.origin.CGFloat y = v17;
  v25.size.CGFloat width = a3;
  v25.size.CGFloat height = v14;
  v23.CGFloat x = a1;
  v23.CGFloat y = a2;
  if (CGRectContainsPoint(v25, v23) && (objc_msgSend(v11, sel_shown) & 1) != 0)
  {
    id v18 = 0;
    unint64_t v21 = v11;
  }
  else
  {
    v26.origin.CGFloat y = v13 + v20 - v14;
    v26.origin.CGFloat x = v16;
    v26.size.CGFloat width = a3;
    v26.size.CGFloat height = v14;
    v24.CGFloat x = a1;
    v24.CGFloat y = a2;
    if (CGRectContainsPoint(v26, v24)) {
      id v18 = objc_msgSend(v10, sel_shown);
    }
    else {
      id v18 = 0;
    }
    unint64_t v21 = v10;
    id v10 = v11;
  }

  return v18;
}

void __swiftcall PaperTextAttachmentView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  id v4 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (v4)
  {
    id v5 = v3;
    Class isa = with.value.super.isa;
    double y = _.y;
    double x = _.x;
    id v9 = v4;
    if (objc_msgSend(v9, sel_isHidden))
    {

LABEL_4:
      v16.receiver = v5;
      v16.super_class = (Class)type metadata accessor for PaperTextAttachmentView();
      -[UIView_optional hitTest:withEvent:](&v16, sel_hitTest_withEvent_, isa, x, y);
      return;
    }
    v10.value.super.Class isa = isa;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v10);
    if (v12.value.super.isa)
    {
    }
    else
    {
      v12.value.super.Class isa = isa;
      ResizeView.hitTestChrome(_:with:)(v13, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v12);
      uint64_t v15 = v14;

      if (!v15) {
        goto LABEL_4;
      }
    }
  }
  else
  {
    __break(1u);
  }
}

id @objc PaperTextAttachmentView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  v16.value.super.Class isa = (Class)a5;
  PaperTextAttachmentView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v16);
  double v13 = v12;

  return v13;
}

Swift::Void __swiftcall PaperTextAttachmentView.setAdjustResizeIndicatorVisible(_:animated:highlightBackground:)(Swift::Bool _, Swift::Bool animated, Swift::Bool highlightBackground)
{
  if (_)
  {
    *(void *)&_ = objc_msgSend(v3, sel_frame);
    BOOL v6 = 0;
    char v7 = 0;
    if (v8 > 1.0 && !highlightBackground)
    {
      char v7 = PaperTextAttachmentView.isAtBeginningOfDocument.getter() ^ 1;
      PaperTextAttachmentView.isAtEndOfDocument.getter();
      BOOL v6 = !_;
    }
  }
  else
  {
    BOOL v6 = 0;
    char v7 = 0;
  }
  id v9 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x1190);
  id v10 = (void *)((uint64_t (*)(Swift::Bool))v9)(_);
  id v11 = v10;
  if (v10)
  {
    id v12 = objc_msgSend(v10, sel__pkTiledViewIfEnabled);

    if (!v12)
    {
      LODWORD(v11) = 0;
      double v13 = (void *)v9();
      if (!v13) {
        goto LABEL_14;
      }
      goto LABEL_10;
    }
    LODWORD(v11) = objc_msgSend(v12, sel_allowsFingerDrawing);
  }
  double v13 = (void *)v9();
  if (!v13) {
    goto LABEL_14;
  }
LABEL_10:
  uint64_t v14 = v13;
  if (highlightBackground) {
    id v15 = objc_msgSend(v13, sel_selectionHighlightColor);
  }
  else {
    id v15 = 0;
  }
  objc_msgSend(v3, sel_setBackgroundColor_, v15);

LABEL_14:
  UIEvent_optional v16 = *(void **)((char *)v3 + direct field offset for PaperTextAttachmentView.topResizeView);
  if (v16) {
    objc_msgSend(v16, sel_show_enabled_animated_, v7 & 1, v11 ^ 1, animated);
  }
  double v17 = *(void **)((char *)v3 + direct field offset for PaperTextAttachmentView.bottomResizeView);
  if (v17) {
    objc_msgSend(v17, sel_show_enabled_animated_, v6, v11 ^ 1, animated);
  }
  PaperTextAttachmentView.updateTouchInsets(fingerDrawingEnabled:)((Swift::Bool)v11);
}

Swift::Void __swiftcall PaperTextAttachmentView.resizeGesture(_:)(UIPanGestureRecognizer *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  double v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = direct field offset for PaperTextAttachmentView.resizeInfo;
  uint64_t v10 = *(void *)&v1[direct field offset for PaperTextAttachmentView.resizeInfo];
  if (v10) {
    goto LABEL_2;
  }
  type metadata accessor for ResizeInfo();
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  uint64_t v12 = *MEMORY[0x263F001A0];
  uint64_t v13 = *(void *)(MEMORY[0x263F001A0] + 8);
  uint64_t v14 = *(void *)(MEMORY[0x263F001A0] + 16);
  uint64_t v15 = *(void *)(MEMORY[0x263F001A0] + 24);
  *(void *)(v11 + 32) = *MEMORY[0x263F001A0];
  *(void *)(v11 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v13;
  *(void *)(v11 + 48) = v14;
  *(void *)(v11 + 56) = v15;
  *(void *)(v11 + 64) = v12;
  *(void *)(v11 + 72) = v13;
  *(void *)(v11 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v14;
  *(void *)(v11 + 88) = v15;
  *(void *)(v11 + 96) = v12;
  *(void *)(v11 + 104) = v13;
  *(void *)(v11 + 112) = v14;
  *(void *)(v11 + 12AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v15;
  *(void *)&v1[v9] = v11;
  if (v11)
  {
    uint64_t v16 = v11;
    swift_retain();
    *(double *)(v16 + 32) = PaperTextAttachmentView.safePaperModelBounds.getter();
    *(void *)(v16 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v17;
    *(void *)(v16 + 48) = v18;
    *(void *)(v16 + 56) = v19;
    swift_release();
    double v20 = *(double **)&v1[v9];
    if (v20)
    {
      uint64_t v21 = *(void *)&v1[direct field offset for Canvas.paperView]
          + *(void *)((*MEMORY[0x263F8EED0] & **(void **)&v1[direct field offset for Canvas.paperView]) + 0x380);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v21, v4);
      swift_retain();
      double v22 = Capsule<>.contentBounds(includeDrawing:)(1);
      uint64_t v24 = v23;
      uint64_t v26 = v25;
      uint64_t v28 = v27;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v20[8] = v22;
      *((void *)v20 + 9) = v24;
      *((void *)v20 + 1AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v26;
      *((void *)v20 + 11) = v28;
      swift_release();
      unsigned __int8 v29 = *(void **)&v2[v9];
      if (v29)
      {
        swift_retain();
        objc_msgSend(v2, sel_frame);
        v29[12] = v30;
        v29[13] = v31;
        v29[14] = v32;
        v29[15] = v33;
        swift_release();
        uint64_t v10 = *(void *)&v2[v9];
        if (v10)
        {
LABEL_2:
          *(unsigned char *)(v10 + 16) = 0;
          objc_msgSend(*(id *)&v2[direct field offset for PaperTextAttachmentView.bottomResizeView], sel_handleGesture_, a1, v6);
        }
      }
    }
  }
}

void @objc PaperTextAttachmentView.resizeGesture(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  id v5 = a1;
  PaperTextAttachmentView.resizeGesture(_:)(v4);
}

Swift::Void __swiftcall PaperTextAttachmentView.updateTouchInsets(fingerDrawingEnabled:)(Swift::Bool fingerDrawingEnabled)
{
  double v4 = *MEMORY[0x263F834E8];
  double v3 = *(double *)(MEMORY[0x263F834E8] + 8);
  double v6 = *(double *)(MEMORY[0x263F834E8] + 16);
  double v5 = *(double *)(MEMORY[0x263F834E8] + 24);
  unsigned int v7 = objc_msgSend(v1, sel_isFirstResponder);
  double v8 = 0.0;
  if (fingerDrawingEnabled) {
    double v9 = v5;
  }
  else {
    double v9 = 0.0;
  }
  double v10 = -10.0;
  if (fingerDrawingEnabled) {
    double v11 = v6;
  }
  else {
    double v11 = -10.0;
  }
  if (fingerDrawingEnabled)
  {
    double v8 = v3;
    double v10 = v4;
  }
  if (v7)
  {
    double v5 = v9;
    double v6 = v11;
    double v3 = v8;
    double v4 = v10;
  }
  objc_msgSend(v1, sel__setTouchInsets_, v4, v3, v6, v5);
  uint64_t v12 = *(void **)&v1[direct field offset for PaperTextAttachmentView.bottomResizeView];
  if (v12) {
    objc_msgSend(v12, sel__setTouchInsets_, v4, v3, v6, v5);
  }
  uint64_t v13 = *(void **)&v1[direct field offset for PaperTextAttachmentView.topResizeView];
  if (v13)
  {
    objc_msgSend(v13, sel__setTouchInsets_, v4, v3, v6, v5);
  }
}

id @objc PaperTextAttachmentView.updateAfterTextViewChange()(void *a1)
{
  return objc_msgSend(a1, sel_setNeedsLayout);
}

double PaperTextAttachmentView.safePaperModelBounds.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  double v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = direct field offset for Canvas.paperView;
  unsigned int v7 = (void *)MEMORY[0x263F8EED0];
  uint64_t v8 = *(void *)(v1 + direct field offset for Canvas.paperView)
     + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v1 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  double v9 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16);
  v9(v5, v8, v2);
  swift_getKeyPath();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule<>.subscript.getter();
  swift_release();
  double v10 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  if (!CGRect.isFinite.getter(v17, v18, v19, v20))
  {
    uint64_t v11 = *(void *)(v1 + v6) + *(void *)((*v7 & **(void **)(v1 + v6)) + 0x380);
    swift_beginAccess();
    v9(v5, v11, v2);
    double v12 = Capsule<>.contentBounds(includeDrawing:)(1);
    double v14 = v13;
    ((void (*)(unsigned char *, uint64_t, double))v10)(v5, v2, v12);
    double v19 = *MEMORY[0x263F14C78];
    double v20 = v14;
    double v17 = 0.0;
    double v18 = 0.0;
    if ((~*(void *)&v14 & 0x7FF0000000000000) == 0)
    {
      if (one-time initialization token for minimumTextAttachmentHeight != -1) {
        swift_once();
      }
LABEL_8:
      double v20 = *(double *)&static UIConstants.minimumTextAttachmentHeight;
      return v17;
    }
    if (one-time initialization token for minimumTextAttachmentHeight != -1) {
      swift_once();
    }
    if (v14 < *(double *)&static UIConstants.minimumTextAttachmentHeight) {
      goto LABEL_8;
    }
  }
  return v17;
}

id @objc PaperTextAttachmentView.resizeViewTextView(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0x1190);
  id v5 = a3;
  uint64_t v6 = a1;
  unsigned int v7 = (void *)v4();

  return v7;
}

double @objc PaperTextAttachmentView.resizeViewDrawingBounds(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  double v6 = specialized PaperTextAttachmentView.resizeViewDrawingBounds(_:)();

  return v6;
}

void @objc PaperTextAttachmentView.resizeView(_:setDrawingHeight:originalHeight:growFromTop:)(void *a1, double a2, double a3, uint64_t a4, void *a5, char a6)
{
  id v11 = a5;
  id v10 = a1;
  specialized PaperTextAttachmentView.resizeView(_:setDrawingHeight:originalHeight:growFromTop:)(a6, a2, a3);
}

void @objc PaperTextAttachmentView.resizeViewRemoveAttachment(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0x1190);
  id v5 = a3;
  double v9 = a1;
  double v6 = (void *)v4();
  if (v6)
  {
    unsigned int v7 = v6;
    uint64_t v8 = *(void *)((char *)v9 + direct field offset for PaperTextAttachmentView.textAttachment);
    if (v8) {
      objc_msgSend(v6, sel__removeDrawingAttachment_withView_forDeletion_, v8, v9, 0);
    }

    id v5 = v9;
    double v9 = v7;
  }
}

void @objc PaperTextAttachmentView.resizeViewLayoutAttachment(_:)(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v4 = a1;
  objc_msgSend(v4, sel_frame);
  PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v7, 1, 1, 1);
}

char *@objc PaperTextAttachmentView.resizeView(_:finishedWithOriginalDrawingBounds:originalViewBounds:)(char *result, uint64_t a2, void *a3)
{
  uint64_t v3 = direct field offset for PaperTextAttachmentView.resizeInfo;
  uint64_t v4 = *(void *)&result[direct field offset for PaperTextAttachmentView.resizeInfo];
  if (v4)
  {
    double v6 = result;
    __C::CGRect v7 = result;
    swift_retain();
    id v8 = a3;
    specialized Canvas.undoable(newChange:persistSelection:action:)(1, 0, v7, (uint64_t)v7, v4);
    *(void *)&v6[v3] = 0;

    swift_release();
    return (char *)swift_release();
  }
  return result;
}

void @objc PaperTextAttachmentView.resizeViewDidUpdate(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  PaperTextAttachmentView.setAdjustResizeIndicatorVisible(_:animated:highlightBackground:)((Swift::Bool)objc_msgSend(v5, sel_isFirstResponder), 0, 0);
}

void (*PaperTextAttachmentView.calculateDocument.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperTextAttachmentView.calculateDocument.modify;
}

void PaperTextAttachmentView.calculateDocument.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    if (one-time initialization token for mathLogger != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)mathLogger);
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      __C::CGRect v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)__C::CGRect v7 = 0;
      _os_log_impl(&dword_20C2D7000, v5, v6, "setupCanvasMathIfNecessary", v7, 2u);
      MEMORY[0x210550270](v7, -1, -1);
    }
    uint64_t v8 = *(void *)(a1 + 24);

    uint64_t v9 = direct field offset for Canvas.paperView;
    id v10 = *(void **)(v8 + direct field offset for Canvas.paperView);
    id v11 = (void *)MEMORY[0x263F8EED0];
    double v12 = *(void **)((char *)v10 + *(void *)((*MEMORY[0x263F8EED0] & *v10) + 0x4C0));
    if (v12)
    {
      id v13 = v12;
      CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();

      id v10 = *(void **)(v8 + v9);
    }
    double v14 = (void *)MEMORY[0x210550400]((char *)v10 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (v14)
    {
      id v15 = v14;
      (*(void (**)(void))((*v11 & *v14) + 0x770))();
    }
  }
}

uint64_t PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (unsigned char *)(v1 + direct field offset for PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior.setter(char *a1)
{
  uint64_t v2 = v1;
  char v3 = *a1;
  uint64_t v4 = (unsigned char *)(v1 + direct field offset for PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior);
  swift_beginAccess();
  *uint64_t v4 = v3;
  if (one-time initialization token for mathLogger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)mathLogger);
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_20C2D7000, v6, v7, "setupCanvasMathIfNecessary", v8, 2u);
    MEMORY[0x210550270](v8, -1, -1);
  }

  uint64_t v9 = *(void **)(*(void *)(v2 + direct field offset for Canvas.paperView)
                + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v2 + direct field offset for Canvas.paperView))
                            + 0x4C0));
  if (v9)
  {
    id v10 = v9;
    CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
  }
}

void (*PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior.modify;
}

void PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    if (one-time initialization token for mathLogger != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)mathLogger);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v7 = 0;
      _os_log_impl(&dword_20C2D7000, v5, v6, "setupCanvasMathIfNecessary", v7, 2u);
      MEMORY[0x210550270](v7, -1, -1);
    }
    uint64_t v8 = *(void *)(a1 + 24);

    uint64_t v9 = *(void **)(*(void *)(v8 + direct field offset for Canvas.paperView)
                  + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v8 + direct field offset for Canvas.paperView))
                              + 0x4C0));
    if (v9)
    {
      id v10 = v9;
      CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
    }
  }
}

uint64_t PaperTextAttachmentView.canvasCalculateDocument.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t PaperTextAttachmentView.canvasCalculateDocumentExpressionSolvingBehavior.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x12C0))();
}

Swift::Void __swiftcall PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:)(PKToolPicker a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v4 - 8);
  os_log_type_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PKInk();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  id v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [(objc_class *)a1.super.isa selectedToolItem];
  PKToolPickerItem.ink.getter((uint64_t)v11);

  Class isa = PKInk._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  double v14 = isa;
  int v15 = [(objc_class *)v14 _isGenerationTool];

  if (v15 != v2[direct field offset for PaperTextAttachmentView.isCurrentToolGenerationTool])
  {
    v2[direct field offset for PaperTextAttachmentView.isCurrentToolGenerationTool] = v15;
    if (v15)
    {
      uint64_t v16 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v6, 1, 1, v16);
      type metadata accessor for MainActor();
      double v17 = v2;
      uint64_t v18 = static MainActor.shared.getter();
      double v19 = (void *)swift_allocObject();
      uint64_t v20 = MEMORY[0x263F8F500];
      _OWORD v19[2] = v18;
      v19[3] = v20;
      v19[4] = v17;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:), (uint64_t)v19);
      swift_release();
    }
  }
}

uint64_t closure #1 in PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:), v6, v5);
}

uint64_t closure #1 in PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  swift_release();
  id v2 = specialized static CanvasGenerationTool.preload()();
  uint64_t v3 = (*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *v1) + 0x320))(v2);
  if (v3)
  {
    uint64_t v4 = (char *)v3;
    type metadata accessor for TiledTextView();
    if (swift_dynamicCastClass())
    {
      uint64_t v5 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
      uint64_t v6 = *(void *)&v5[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
      if (v6)
      {
        uint64_t v7 = v4;
        uint64_t v4 = (char *)objc_retain(*(id *)(v6
                                       + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool));

        CanvasGenerationTool.prewarm()();
        uint64_t v5 = v7;
      }
    }
    else
    {
      uint64_t v5 = v4;
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

void @objc PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v4 = a1;
  PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:)((PKToolPicker)v5);
}

uint64_t type metadata accessor for PaperTextAttachmentView()
{
  uint64_t result = type metadata singleton initialization cache for PaperTextAttachmentView;
  if (!type metadata singleton initialization cache for PaperTextAttachmentView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PaperTextAttachmentView()
{
  uint64_t result = type metadata accessor for CRKeyPath();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

void PaperTextAttachmentView.prepareForInitiateMagicGenerativePlaygroundFromMenu(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  id v11 = *(void **)a1;
  uint64_t v10 = *(void **)(a1 + 8);
  uint64_t v12 = v5 + direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundContextToInitialize;
  id v13 = *(void **)(v5 + direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundContextToInitialize);
  double v14 = *(void **)(v5 + direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundContextToInitialize + 8);
  *(void *)uint64_t v12 = *(void *)a1;
  *(void *)(v12 + 8) = v10;
  char v15 = *(unsigned char *)(a1 + 16);
  char v16 = *(unsigned char *)(v12 + 16);
  *(unsigned char *)(v12 + 16) = v15;
  outlined copy of MagicGenerativePlaygroundContext(v11, v10, v15);
  outlined consume of MagicGenerativePlaygroundContext?(v13, v14, v16);
  uint64_t v17 = v5 + direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundBoundsToInitialize;
  *(double *)uint64_t v17 = a2;
  *(double *)(v17 + 8) = a3;
  *(double *)(v17 + 16) = a4;
  *(double *)(v17 + 24) = a5;
  *(unsigned char *)(v17 + 32) = 0;
}

uint64_t ObjC metadata update function for PaperTextAttachmentView()
{
  return type metadata accessor for PaperTextAttachmentView();
}

uint64_t protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.getter in conformance PaperTextAttachmentView()
{
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.setter in conformance PaperTextAttachmentView(uint64_t a1, uint64_t a2)
{
  specialized PaperTextAttachmentView.calculateDocument.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperTextAttachmentView.calculateDocument.modify((uint64_t)v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.getter in conformance PaperTextAttachmentView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v0) + 0x12C0))();
}

uint64_t protocol witness for PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.setter in conformance PaperTextAttachmentView(char *a1)
{
  char v3 = *a1;
  return (*(uint64_t (**)(char *))((*MEMORY[0x263F8EED0] & **v1) + 0x12C8))(&v3);
}

uint64_t (*protocol witness for PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.modify in conformance PaperTextAttachmentView(void *a1))()
{
  char v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v1) + 0x12D0))();
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

void protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

Swift::Bool __swiftcall PaperTextAttachmentView._wantsToolPickerVisible(_:)(PKToolPicker a1)
{
  if (!*(void *)&v1[direct field offset for PaperTextAttachmentView.textAttachment]
    || (char v3 = (void *)swift_dynamicCastObjCProtocolConditional()) == 0
    || (id v4 = v3, (objc_msgSend(v3, sel_respondsToSelector_, sel__wantsToolPickerVisible_) & 1) == 0))
  {
    if ([(objc_class *)a1.super.isa isVisible])
    {
      id v6 = [(objc_class *)a1.super.isa _windowScene];
      id v7 = objc_msgSend(v1, sel_window);
      id v8 = objc_msgSend(v7, sel_windowScene);

      if (v6)
      {
        if (v8)
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIWindowScene);
          id v9 = v6;
          unsigned __int8 v5 = static NSObject.== infix(_:_:)();

          return v5 & 1;
        }
      }
      else
      {
        if (!v8)
        {
          unsigned __int8 v5 = 1;
          return v5 & 1;
        }
      }
    }
    unsigned __int8 v5 = 0;
    return v5 & 1;
  }
  unsigned __int8 v5 = objc_msgSend(v4, sel__wantsToolPickerVisible_, a1.super.isa);
  return v5 & 1;
}

void specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  char v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v3 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v3;
}

uint64_t specialized Set.formSymmetricDifference(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v40 = (uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  double v52 = (char *)&v39 - v10;
  uint64_t result = MEMORY[0x270FA5388](v9);
  uint64_t v45 = (char *)&v39 - v13;
  int64_t v14 = 0;
  uint64_t v46 = v12;
  uint64_t v47 = a1;
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v16 = a1 + 56;
  uint64_t v15 = v17;
  uint64_t v18 = 1 << *(unsigned char *)(v16 - 24);
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v15;
  uint64_t v41 = v16;
  int64_t v42 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v43 = v1;
  uint64_t v44 = v12 + 32;
  CGRect v50 = (uint64_t (**)(char *, uint64_t))(v12 + 8);
  uint64_t v51 = v12 + 16;
  while (v20)
  {
    uint64_t v48 = (v20 - 1) & v20;
    int64_t v49 = v14;
    unint64_t v21 = __clz(__rbit64(v20)) | (v14 << 6);
LABEL_20:
    uint64_t v26 = v46;
    uint64_t v27 = *(void *)(v46 + 72);
    uint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 16);
    unsigned __int8 v29 = v45;
    v28(v45, *(void *)(v47 + 48) + v27 * v21, v5);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v52, v29, v5);
    uint64_t v30 = *v1;
    if (*(void *)(*v1 + 16) {
      && (lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>), uint64_t v31 = dispatch thunk of Hashable._rawHashValue(seed:)(), v32 = -1 << *(unsigned char *)(v30 + 32), v33 = v31 & ~v32, ((*(void *)(v30 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) != 0))
    }
    {
      uint64_t v34 = ~v32;
      while (1)
      {
        v28(v8, *(void *)(v30 + 48) + v33 * v27, v5);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
        char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v36 = *v50;
        (*v50)(v8, v5);
        if (v35) {
          break;
        }
        unint64_t v33 = (v33 + 1) & v34;
        if (((*(void *)(v30 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) == 0) {
          goto LABEL_5;
        }
      }
      uint64_t v37 = v40;
      uint64_t v38 = v52;
      unint64_t v1 = v43;
      specialized Set._Variant.remove(_:)((uint64_t)v52, v40);
      outlined destroy of StocksKitCurrencyCache.Provider?(v37, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      uint64_t result = v36(v38, v5);
    }
    else
    {
LABEL_5:
      unint64_t v1 = v43;
      specialized Set._Variant.insert(_:)((uint64_t)v8, v52);
      uint64_t result = (*v50)(v8, v5);
    }
    unint64_t v20 = v48;
    int64_t v14 = v49;
  }
  int64_t v22 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v22 >= v42) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v41 + 8 * v22);
  int64_t v24 = v14 + 1;
  if (v23) {
    goto LABEL_19;
  }
  int64_t v24 = v14 + 2;
  if (v14 + 2 >= v42) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v41 + 8 * v24);
  if (v23) {
    goto LABEL_19;
  }
  uint64_t v25 = v14 + 3;
  if (v14 + 3 >= v42) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v41 + 8 * v25);
  int64_t v24 = v14 + 3;
  if (v23)
  {
LABEL_19:
    uint64_t v48 = (v23 - 1) & v23;
    int64_t v49 = v24;
    unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v42) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v41 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_19;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, unint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t (*v36)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t (**v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v40 = (uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  double v52 = (char *)&v39 - v10;
  uint64_t result = MEMORY[0x270FA5388](v9);
  uint64_t v45 = (char *)&v39 - v13;
  int64_t v14 = 0;
  uint64_t v46 = v12;
  uint64_t v47 = a1;
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v16 = a1 + 56;
  uint64_t v15 = v17;
  uint64_t v18 = 1 << *(unsigned char *)(v16 - 24);
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v15;
  uint64_t v41 = v16;
  int64_t v42 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v43 = v1;
  uint64_t v44 = v12 + 32;
  CGRect v50 = (uint64_t (**)(char *, uint64_t))(v12 + 8);
  uint64_t v51 = v12 + 16;
  while (v20)
  {
    uint64_t v48 = (v20 - 1) & v20;
    int64_t v49 = v14;
    unint64_t v21 = __clz(__rbit64(v20)) | (v14 << 6);
LABEL_20:
    uint64_t v26 = v46;
    uint64_t v27 = *(void *)(v46 + 72);
    uint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 16);
    unsigned __int8 v29 = v45;
    v28(v45, *(void *)(v47 + 48) + v27 * v21, v5);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v52, v29, v5);
    uint64_t v30 = *v1;
    if (*(void *)(*v1 + 16) {
      && (lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>), uint64_t v31 = dispatch thunk of Hashable._rawHashValue(seed:)(), v32 = -1 << *(unsigned char *)(v30 + 32), v33 = v31 & ~v32, ((*(void *)(v30 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) != 0))
    }
    {
      uint64_t v34 = ~v32;
      while (1)
      {
        v28(v8, *(void *)(v30 + 48) + v33 * v27, v5);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
        char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v36 = *v50;
        (*v50)(v8, v5);
        if (v35) {
          break;
        }
        unint64_t v33 = (v33 + 1) & v34;
        if (((*(void *)(v30 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) == 0) {
          goto LABEL_5;
        }
      }
      uint64_t v37 = v40;
      uint64_t v38 = v52;
      unint64_t v1 = v43;
      specialized Set._Variant.remove(_:)((uint64_t)v52, v40);
      outlined destroy of StocksKitCurrencyCache.Provider?(v37, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
      uint64_t result = v36(v38, v5);
    }
    else
    {
LABEL_5:
      unint64_t v1 = v43;
      specialized Set._Variant.insert(_:)((uint64_t)v8, v52);
      uint64_t result = (*v50)(v8, v5);
    }
    unint64_t v20 = v48;
    int64_t v14 = v49;
  }
  int64_t v22 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v22 >= v42) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v41 + 8 * v22);
  int64_t v24 = v14 + 1;
  if (v23) {
    goto LABEL_19;
  }
  int64_t v24 = v14 + 2;
  if (v14 + 2 >= v42) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v41 + 8 * v24);
  if (v23) {
    goto LABEL_19;
  }
  uint64_t v25 = v14 + 3;
  if (v14 + 3 >= v42) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v41 + 8 * v25);
  int64_t v24 = v14 + 3;
  if (v23)
  {
LABEL_19:
    uint64_t v48 = (v23 - 1) & v23;
    int64_t v49 = v24;
    unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v42) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v41 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_19;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

id specialized CRRegister<>.isEraserStroke<A>(in:)(uint64_t a1)
{
  uint64_t v55 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v1 - 8);
  __C::CGRect v53 = (char *)v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v54);
  uint64_t v4 = (char *)v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v56 = (char *)v46 - v6;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v7 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  CGRect v50 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v51 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  id v57 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int64_t v14 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v18 - 8);
  unint64_t v20 = (char *)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  unint64_t v23 = (char *)v46 - v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v17, 1, v24) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    return 0;
  }
  int64_t v49 = v4;
  uint64_t v26 = type metadata accessor for Paper();
  uint64_t v27 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v28 = v55;
  v46[0] = v27;
  v46[1] = v26;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v24);
  outlined init with take of PKStrokeStruct((uint64_t)v20, (uint64_t)v23);
  uint64_t v48 = v7;
  unsigned __int8 v29 = v50;
  uint64_t v30 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v50, v28, v52);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  uint64_t v47 = v23;
  CRRegister.wrappedValue.getter();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Capsule<Paper> and conformance Capsule<A>, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v31 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  uint64_t v32 = (void (**)(char *, uint64_t))(v51 + 8);
  unint64_t v33 = (void (**)(char *, uint64_t, uint64_t))(v51 + 32);
  uint64_t v34 = v30;
  char v35 = v29;
  uint64_t v36 = (uint64_t)v53;
  uint64_t v37 = (uint64_t)v56;
  while (1)
  {
    uint64_t v38 = v35;
    uint64_t v39 = v34;
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of Paper(v37, type metadata accessor for PKStrokeInheritedProperties);
    if ((*v31)(v36, 1, v9) == 1) {
      break;
    }
    uint64_t v40 = v57;
    (*v32)(v57, v9);
    (*v33)(v40, v36, v9);
    uint64_t v34 = v39;
    char v35 = v38;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v36, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v39);
  uint64_t v41 = (uint64_t)v49;
  int64_t v42 = v57;
  Ref.subscript.getter();
  (*v32)(v42, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  uint64_t v43 = v58;
  outlined destroy of Paper(v41, type metadata accessor for PKStrokeInheritedProperties);
  if (!v43)
  {
    outlined destroy of Paper((uint64_t)v47, type metadata accessor for PKStrokeStruct);
    return 0;
  }
  id v44 = objc_msgSend(v43, sel__isEraserInk);

  outlined destroy of Paper((uint64_t)v47, type metadata accessor for PKStrokeStruct);
  return v44;
}

uint64_t specialized CRRegister<>.isEraserStroke<A>(in:createdBefore:)(void *a1, uint64_t a2)
{
  uint64_t v70 = a2;
  id v79 = a1;
  uint64_t v2 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v69 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v64);
  uint64_t v65 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v66 = *(void *)(v5 - 8);
  uint64_t v67 = v5;
  MEMORY[0x270FA5388](v5);
  double v63 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v72 = *(void *)(v7 - 8);
  uint64_t v73 = v7;
  MEMORY[0x270FA5388](v7);
  id v68 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  BOOL v71 = (char *)&v60 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v76);
  uint64_t v77 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v60 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v75 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  unint64_t v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v62);
  unsigned __int8 v29 = (char *)&v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  id v74 = (char *)&v60 - v31;
  MEMORY[0x270FA5388](v32);
  uint64_t v78 = (uint64_t)&v60 - v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v27, 1, v34) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
LABEL_12:
    char v56 = 0;
    return v56 & 1;
  }
  double v61 = v29;
  uint64_t v36 = (uint64_t)v74;
  uint64_t v37 = v79;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v27, v34);
  outlined init with take of PKStrokeStruct(v36, v78);
  uint64_t v80 = v37;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Capsule<Paper>.Ref and conformance Capsule<A>.Ref, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>.Ref);
  uint64_t v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48);
  uint64_t v39 = (void (**)(char *, uint64_t))(v75 + 8);
  for (uint64_t i = (void (**)(char *, char *, uint64_t))(v75 + 32); ; (*i)(v20, v13, v18))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>.Ref);
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of Paper((uint64_t)v17, type metadata accessor for PKStrokeInheritedProperties);
    if ((*v38)(v13, 1, v18) == 1) {
      break;
    }
    (*v39)(v20, v18);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  swift_release();
  uint64_t v41 = (uint64_t)v77;
  Ref.subscript.getter();
  (*v39)(v20, v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  int64_t v42 = v80;
  outlined destroy of Paper(v41, type metadata accessor for PKStrokeInheritedProperties);
  if (!v42)
  {
    uint64_t v58 = v78;
LABEL_11:
    outlined destroy of Paper(v58, type metadata accessor for PKStrokeStruct);
    goto LABEL_12;
  }
  unsigned __int8 v43 = objc_msgSend(v42, sel__isEraserInk);
  uint64_t v44 = v78;
  uint64_t v45 = (uint64_t)v61;
  outlined init with copy of PKStrokeStruct(v78, (uint64_t)v61);
  uint64_t v47 = v71;
  uint64_t v46 = v72;
  uint64_t v48 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v70, v73);
  if ((v43 & 1) == 0)
  {

    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v48);
    outlined destroy of Paper(v45, type metadata accessor for PKStrokeStruct);
    uint64_t v58 = v44;
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  uint64_t v49 = (uint64_t)v65;
  CRRegister.wrappedValue.getter();
  CGRect v50 = v63;
  uint64_t v52 = v66;
  uint64_t v51 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v63, v49 + *(int *)(v64 + 32), v67);
  outlined destroy of Paper(v49, type metadata accessor for PKStrokeProperties);
  __C::CGRect v53 = v69;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
  uint64_t v54 = v68;
  PKStrokePath.creationDate.getter();
  uint64_t v55 = type metadata accessor for PKStrokePath();
  (*(void (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v53, v55);
  char v56 = static Date.< infix(_:_:)();

  id v57 = *(void (**)(char *, uint64_t))(v46 + 8);
  v57(v54, v48);
  v57(v47, v48);
  outlined destroy of Paper((uint64_t)v61, type metadata accessor for PKStrokeStruct);
  outlined destroy of Paper(v44, type metadata accessor for PKStrokeStruct);
  return v56 & 1;
}

uint64_t specialized CRRegister<>.creationDate<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v35 = a2;
  uint64_t v2 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v34 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v30);
  uint64_t v31 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v32 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unsigned __int8 v29 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v28 - v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v13, 1, v20) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    return static Date.distantPast.getter();
  }
  else
  {
    uint64_t v28 = type metadata accessor for Paper();
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v20);
    outlined init with take of PKStrokeStruct((uint64_t)v16, (uint64_t)v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    uint64_t v23 = (uint64_t)v31;
    CRRegister.wrappedValue.getter();
    uint64_t v24 = v29;
    uint64_t v25 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v29, v23 + *(int *)(v30 + 32), v5);
    outlined destroy of Paper(v23, type metadata accessor for PKStrokeProperties);
    uint64_t v26 = v34;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v24, v5);
    PKStrokePath.creationDate.getter();
    outlined destroy of Paper((uint64_t)v19, type metadata accessor for PKStrokeStruct);
    uint64_t v27 = type metadata accessor for PKStrokePath();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
  }
}

uint64_t specialized PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v27 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v25 = *(void *)(v5 - 8);
  uint64_t v26 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for PKDrawingStruct();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v3 + *(int *)(v19 + 20), v8);
  uint64_t v29 = a1;
  specialized Sequence.first(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:), (uint64_t)v28, v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
    uint64_t v20 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v27, 1, 1, v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    type metadata accessor for Paper();
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    Ref.subscript.getter();
    uint64_t v22 = v27;
    specialized CRRegister<>.creationDate<A>(in:)(a1, v27);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v26);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    uint64_t v23 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 0, 1, v23);
  }
}

uint64_t specialized closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  type metadata accessor for Paper();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Ref.subscript.getter();
  unsigned __int8 v7 = specialized CRRegister<>.isEraserStroke<A>(in:)(a2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7 & 1;
}

uint64_t specialized closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a2;
  uint64_t v35 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v35);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v30 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v27 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v28 = (char *)v26 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for Paper();
  uint64_t v32 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v33 = &protocol witness table for Paper;
  swift_getKeyPath();
  Capsule.Ref<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  Ref.subscript.getter();
  uint64_t v17 = a1;
  v26[2] = a1;
  uint64_t v18 = v5;
  uint64_t v19 = v30;
  uint64_t v20 = v27;
  uint64_t v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v30 + 16))(v27, &v4[*(int *)(v35 + 20)], v18);
  v26[1] = v26;
  MEMORY[0x270FA5388](v21);
  uint64_t v22 = v29;
  v26[-2] = v17;
  v26[-1] = v22;
  uint64_t v23 = v28;
  CROrderedSet.filter(_:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v18);
  outlined destroy of Paper((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
  uint64_t v24 = (void (*)(char *, void))Ref.subscript.modify();
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 40))(v25 + *(int *)(v35 + 20), v23, v18);
  v24(v34, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

BOOL specialized closure #1 in closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  char v9 = specialized CRRegister<>.isEraserStroke<A>(in:createdBefore:)(a2, a3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (v9 & 1) == 0;
}

uint64_t specialized Capsule<>.hasAnyEraserStrokes()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v35 = (uint64_t)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  uint64_t v34 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v31 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v32 = (char *)&v30 - v7;
  uint64_t v8 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for Paper();
  uint64_t v37 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v38 = &protocol witness table for Paper;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  Capsule<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    char v18 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    Ref.subscript.getter();
    uint64_t v19 = v32;
    static Date.now.getter();
    uint64_t v20 = v35;
    specialized PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(v0, v35);
    uint64_t v22 = v33;
    uint64_t v21 = v34;
    uint64_t v23 = v19;
    uint64_t v24 = (uint64_t)v10;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v20, 1, v33) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v20, &demangling cache variable for type metadata for Date?);
      char v18 = 0;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v22);
    }
    else
    {
      uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 32);
      uint64_t v30 = v10;
      uint64_t v26 = v31;
      v25(v31, v20, v22);
      char v18 = static Date.< infix(_:_:)();
      uint64_t v27 = *(void (**)(char *, uint64_t))(v21 + 8);
      uint64_t v28 = v26;
      uint64_t v24 = (uint64_t)v30;
      v27(v28, v22);
      v27(v23, v22);
    }
    outlined destroy of Paper(v24, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  return v18 & 1;
}

unint64_t specialized ContainerCanvasElementView.pencilKitAttachmentViews()()
{
  uint64_t v1 = (void *)v0;
  uint64_t v2 = type metadata accessor for IndexSet();
  uint64_t v45 = *(void *)(v2 - 8);
  uint64_t v46 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v44 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v44 - v8;
  uint64_t v10 = (void *)MEMORY[0x263F8EED0];
  uint64_t v11 = *(void **)(v0 + *(void *)((*MEMORY[0x263F8EED0] & *(void *)v0) + 0x4C0));
  if (v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_20C835790;
    *(void *)(v12 + 32) = v11;
    unint64_t v49 = v12;
    specialized Array._endMutation()();
    unint64_t v13 = v49;
  }
  else
  {
    unint64_t v13 = MEMORY[0x263F8EE78];
  }
  unint64_t v50 = v13;
  uint64_t v14 = specialized ContainerCanvasElementView.subelementViews.getter(v11);
  uint64_t v15 = v14;
  unint64_t v49 = MEMORY[0x263F8EE78];
  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0) {
      uint64_t v0 = v14;
    }
    else {
      uint64_t v0 = v14 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    if (v16) {
      goto LABEL_6;
    }
LABEL_17:
    swift_bridgeObjectRelease_n();
    unint64_t v21 = MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
  uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v16) {
    goto LABEL_17;
  }
LABEL_6:
  if (v16 < 1) {
    goto LABEL_44;
  }
  uint64_t v17 = 0;
  do
  {
    if ((v15 & 0xC000000000000001) != 0) {
      char v18 = (void *)MEMORY[0x21054E050](v17, v15);
    }
    else {
      char v18 = *(id *)(v15 + 8 * v17 + 32);
    }
    uint64_t v19 = v18;
    ++v17;
    unint64_t v20 = (*(uint64_t (**)(void))((*v10 & *v18) + 0x298))();

    specialized Array.append<A>(contentsOf:)(v20);
  }
  while (v16 != v17);
  swift_bridgeObjectRelease_n();
  unint64_t v21 = v49;
LABEL_18:
  specialized Array.append<A>(contentsOf:)(v21);
  uint64_t v22 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  if (v22)
  {
  }
  else
  {
    uint64_t v23 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (v23)
    {
      uint64_t v24 = v23;
      (*(void (**)(void))((*v10 & *v23) + 0x300))();

      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v9, v6, v48);
      uint64_t v25 = (void *)((char *)v1 + *(void *)((*v10 & *v1) + 0x4D8));
      swift_beginAccess();
      uint64_t v26 = *v25;
      uint64_t v27 = *(void **)((char *)v1 + *(void *)((*v10 & *v1) + 0x4D0));
      swift_bridgeObjectRetain();
      if (v27)
      {
        id v28 = v27;
        uint64_t v29 = FormFillingView.unorderedFormFields.getter();
      }
      else
      {
        uint64_t v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      }
      uint64_t v30 = specialized Dictionary.merging(_:uniquingKeysWith:)(v29, v26);
      if (*(void *)(v30 + 16) && (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v32 & 1) != 0))
      {
        uint64_t v1 = *(id *)(*(void *)(v30 + 56) + 8 * v31);
        swift_bridgeObjectRelease();
        uint64_t v0 = v50;
        if (v50 >> 62) {
          goto LABEL_45;
        }
        uint64_t v33 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v34 = v1;
        swift_bridgeObjectRetain();
        for (; v33; uint64_t v33 = _CocoaArrayWrapper.endIndex.getter())
        {
          uint64_t v35 = 0;
          while (1)
          {
            id v36 = (v0 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x21054E050](v35, v0)
                : *(id *)(v0 + 8 * v35 + 32);
            uint64_t v37 = v36;
            type metadata accessor for CanvasElementDrawingView();
            uint64_t v38 = swift_dynamicCastClass();
            if (v38)
            {
              uint64_t v39 = (void *)MEMORY[0x210550400](v38 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);

              if (v39)
              {

                if (v39 == v1)
                {
                  swift_bridgeObjectRelease();

                  int64_t v42 = v44;
                  IndexSet.init(integer:)();
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKAttachmentView]);
                  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [PKAttachmentView] and conformance [A], &demangling cache variable for type metadata for [PKAttachmentView]);
                  MutableCollection.move(fromOffsets:toOffset:)();

                  (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v46);
                  goto LABEL_41;
                }
              }
            }
            else
            {
            }
            uint64_t v40 = v35 + 1;
            if (__OFADD__(v35, 1)) {
              break;
            }
            ++v35;
            if (v40 == v33) {
              goto LABEL_39;
            }
          }
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          unsigned __int8 v43 = v1;
          swift_bridgeObjectRetain();
        }
LABEL_39:
        swift_bridgeObjectRelease();

        (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v48);
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_41:
        (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v48);
      }
    }
  }
  return v50;
}

void specialized closure #1 in Canvas.setupBandSelection()(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v6 - 8);
  int v136 = (char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v8 - 8);
  os_log_type_t v140 = (char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v137 = *(void *)(v139 - 8);
  MEMORY[0x270FA5388](v139);
  id v138 = (char *)&v124 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v135 = (char *)&v124 - v12;
  uint64_t v142 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v130 = *(void *)(v142 - 8);
  MEMORY[0x270FA5388](v142);
  unint64_t v141 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v14 - 8);
  os_log_type_t v144 = (char *)&v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v131 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  char v18 = (char *)&v124 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = (void *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v19 = *(v143 - 1);
  MEMORY[0x270FA5388](v143);
  uint64_t v145 = (char *)&v124 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v132 = (uint64_t)&v124 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v124 - v24;
  uint64_t v26 = swift_projectBox();
  swift_beginAccess();
  uint64_t v27 = MEMORY[0x210550400](a2 + 16);
  if (!v27) {
    return;
  }
  id v28 = (char *)v27;
  switch((unint64_t)objc_msgSend(a1, sel_state))
  {
    case 1uLL:
      uint64_t v29 = *(void *)&v28[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
      if (!v29) {
        goto LABEL_73;
      }
      uint64_t v30 = v26;
      uint64_t v31 = a3;
      char v32 = (uint64_t *)(v29 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
      uint64_t v33 = *v32;
      uint64_t v34 = v32[1];
      uint64_t v35 = v32[2];
      char v36 = *((unsigned char *)v32 + 24);
      swift_beginAccess();
      *(void *)(v31 + 16) = v33;
      *(void *)(v31 + 24) = v34;
      *(void *)(v31 + 32) = v35;
      *(unsigned char *)(v31 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = *(void **)&v28[direct field offset for Canvas._editingView];
      if (v37)
      {
        uint64_t v38 = *(_UNKNOWN ***)&v28[direct field offset for Canvas._editingView + 8];
        id v39 = *(id *)&v28[direct field offset for Canvas._editingView];
      }
      else
      {
        id v39 = *(id *)&v28[direct field offset for Canvas.paperView];
        uint64_t v38 = &protocol witness table for ContainerCanvasElementView<A>;
      }
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v48 = (uint64_t (*)(uint64_t, _UNKNOWN **))v38[2];
      id v49 = v37;
      unint64_t v50 = (void *)v48(ObjectType, v38);

      if (v50)
      {
        id v51 = objc_msgSend(v50, sel_drawing);

        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v52 = type metadata accessor for PKDrawing();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v25, 0, 1, v52);
      }
      else
      {

        uint64_t v53 = type metadata accessor for PKDrawing();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v25, 1, 1, v53);
      }
      swift_beginAccess();
      outlined assign with take of Date?((uint64_t)v25, v30, &demangling cache variable for type metadata for PKDrawing?);
      return;
    case 2uLL:
      uint64_t v128 = v26;
      uint64_t v126 = a3 + 16;
      UIBandSelectionInteraction.selectionRect.getter();
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v153, (uint64_t)v154, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
      if (v155) {
        goto LABEL_3;
      }
      double v40 = *(double *)v154;
      double v41 = *(double *)&v154[1];
      double v42 = *(double *)&v154[2];
      double v43 = *(double *)&v154[3];
      uint64_t v44 = &v28[direct field offset for Canvas._editingView];
      uint64_t v45 = *(void **)&v28[direct field offset for Canvas._editingView];
      id v125 = a1;
      if (v45)
      {
        id v46 = v45;
      }
      else
      {
        id v46 = *(id *)&v28[direct field offset for Canvas.paperView];
        uint64_t v45 = 0;
      }
      id v54 = v45;
      objc_msgSend(v46, sel_convertRect_fromCoordinateSpace_, v28, v40, v41, v42, v43);
      double v56 = v55;
      double v58 = v57;
      double v60 = v59;
      double v62 = v61;

      uint64_t v151 = MEMORY[0x263F8EE88];
      uint64_t v152 = MEMORY[0x263F8EE88];
      double v63 = *(void **)v44;
      id v129 = v28;
      if (v63)
      {
        uint64_t v64 = a3;
        uint64_t v65 = (_UNKNOWN **)*((void *)v44 + 1);
        id v66 = v63;
      }
      else
      {
        uint64_t v67 = v28;
        uint64_t v64 = a3;
        id v66 = *(id *)&v67[direct field offset for Canvas.paperView];
        uint64_t v65 = &protocol witness table for ContainerCanvasElementView<A>;
      }
      uint64_t v68 = swift_getObjectType();
      uint64_t v69 = (uint64_t (*)(uint64_t, _UNKNOWN **))v65[7];
      id v70 = v63;
      unint64_t v71 = v69(v68, v65);

      uint64_t v72 = MEMORY[0x263F8EE78];
      *(void *)&long long v149 = MEMORY[0x263F8EE78];
      if (v71 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v73 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v127 = v64;
      if (v73)
      {
        id v74 = v129;
        if (v73 < 1)
        {
          __break(1u);
          goto LABEL_72;
        }
        for (uint64_t i = 0; i != v73; ++i)
        {
          if ((v71 & 0xC000000000000001) != 0) {
            uint64_t v76 = (void *)MEMORY[0x21054E050](i, v71);
          }
          else {
            uint64_t v76 = *(id *)(v71 + 8 * i + 32);
          }
          uint64_t v77 = v76;
          id v78 = objc_msgSend(v74, sel_bounds);
          v80.n128_u64[0] = v79;
          v82.n128_u64[0] = v81;
          v84.n128_u64[0] = v83;
          v86.n128_u64[0] = v85;
          if ((*(uint64_t (**)(id, double, double, double, double, __n128, __n128, __n128, __n128))((*MEMORY[0x263F8EED0] & *v77) + 0x328))(v78, v56, v58, v60, v62, v80, v82, v84, v86))
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            id v74 = v129;
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v87 = v149;
        uint64_t v88 = v127;
        uint64_t v72 = MEMORY[0x263F8EE78];
      }
      else
      {
        uint64_t v88 = v64;
        swift_bridgeObjectRelease();
        uint64_t v87 = MEMORY[0x263F8EE78];
        id v74 = v129;
      }
      if (v87 < 0 || (v87 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (v89)
        {
LABEL_36:
          v147[0] = v72;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89 & ~(v89 >> 63), 0);
          uint64_t v134 = v89;
          if ((v89 & 0x8000000000000000) == 0)
          {
            uint64_t v90 = 0;
            unint64_t v133 = v87 & 0xC000000000000001;
            uint64_t v91 = (void (**)(char *, uint64_t))(v131 + 8);
            uint64_t v92 = v87;
            do
            {
              if (v133) {
                id v93 = (void *)MEMORY[0x21054E050](v90, v87);
              }
              else {
                id v93 = *(id *)(v87 + 8 * v90 + 32);
              }
              unsigned __int8 v94 = v93;
              (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v93) + 0xE8))();
              SharedTagged_9.tag.getter();
              *(void *)&v148[0] = v149;
              BYTE8(v148[0]) = BYTE8(v149);
              MEMORY[0x21054BDF0](v16);
              lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
              WeakTagged_9.init(_:id:)();
              (*v91)(v18, v16);

              uint64_t v72 = v147[0];
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v72 + 16) + 1, 1);
                uint64_t v72 = v147[0];
              }
              unint64_t v96 = *(void *)(v72 + 16);
              unint64_t v95 = *(void *)(v72 + 24);
              if (v96 >= v95 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1, v96 + 1, 1);
                uint64_t v72 = v147[0];
              }
              ++v90;
              *(void *)(v72 + 16) = v96 + 1;
              (*(void (**)(unint64_t, char *, void *))(v19 + 32))(v72+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(void *)(v19 + 72) * v96, v145, v143);
              uint64_t v87 = v92;
            }
            while (v134 != v90);
            swift_release();
            uint64_t v88 = v127;
            id v74 = v129;
            goto LABEL_50;
          }
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
          JUMPOUT(0x20C3710C0);
        }
      }
      else
      {
        uint64_t v89 = *(void *)(v87 + 16);
        if (v89) {
          goto LABEL_36;
        }
      }
      swift_release();
LABEL_50:
      uint64_t v97 = specialized Set.init<A>(_:)(v72);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v152 = v97;
      uint64_t v98 = v128;
      swift_beginAccess();
      uint64_t v99 = v132;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v98, v132, &demangling cache variable for type metadata for PKDrawing?);
      uint64_t v100 = type metadata accessor for PKDrawing();
      int v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 48))(v99, 1, v100);
      uint64_t v102 = (uint64_t)v140;
      if (v101 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v99, &demangling cache variable for type metadata for PKDrawing?);
      }
      else
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
        swift_dynamicCast();
        double v103 = (void *)v149;
        id v104 = objc_msgSend((id)v149, sel_intersectedStrokesFromRect_visibleOnscreenStrokes_, 0, v56, v58, v60, v62);

        uint64_t v105 = v104;
        NSOrderedSet.makeIterator()();
        uint64_t v143 = v105;

        _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, MEMORY[0x263F06DC0]);
        dispatch thunk of IteratorProtocol.next()();
        if (v150)
        {
          objc_super v106 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 56);
          uint64_t v107 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48);
          uint64_t v108 = (void (**)(char *, uint64_t, uint64_t))(v137 + 32);
          uint64_t v109 = MEMORY[0x263F8EE78];
          uint64_t v110 = v139;
          do
          {
            outlined init with take of Any(&v149, v148);
            outlined init with copy of Any((uint64_t)v148, (uint64_t)v147);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKStroke);
            if (swift_dynamicCast())
            {
              uint64_t v145 = v146;
              id v111 = objc_msgSend(v146, sel__strokeUUID);
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              unint64_t v112 = v140;
              CRKeyPath.init(_:)();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
              uint64_t v102 = (uint64_t)v112;
              lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
              WeakRef.init(id:)();

              uint64_t v110 = v139;
              uint64_t v113 = 0;
            }
            else
            {
              uint64_t v113 = 1;
            }
            (*v106)(v102, v113, 1, v110);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v148);
            if ((*v107)(v102, 1, v110) == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(v102, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
            }
            else
            {
              uint64_t v114 = *v108;
              uint64_t v115 = v135;
              (*v108)(v135, v102, v110);
              v114(v138, (uint64_t)v115, v110);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v109 + 16) + 1, 1, v109);
              }
              unint64_t v117 = *(void *)(v109 + 16);
              unint64_t v116 = *(void *)(v109 + 24);
              if (v117 >= v116 >> 1) {
                uint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v116 > 1, v117 + 1, 1, v109);
              }
              *(void *)(v109 + 16) = v117 + 1;
              uint64_t v110 = v139;
              v114((char *)(v109+ ((*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80))+ *(void *)(v137 + 72) * v117), (uint64_t)v138, v139);
              uint64_t v102 = (uint64_t)v140;
            }
            dispatch thunk of IteratorProtocol.next()();
          }
          while (v150);
        }
        else
        {
          uint64_t v109 = MEMORY[0x263F8EE78];
        }
        (*(void (**)(char *, uint64_t))(v130 + 8))(v141, v142);

        uint64_t v118 = specialized Set.init<A>(_:)(v109);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v151 = v118;
        uint64_t v88 = v127;
        id v74 = v129;
      }
      if (objc_msgSend(v125, sel_initialModifierFlags) == (id)0x20000)
      {
        swift_beginAccess();
        uint64_t v119 = *(void *)(v88 + 16);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        specialized Set.formSymmetricDifference(_:)(v119);
        uint64_t v120 = swift_bridgeObjectRetain();
        specialized Set.formSymmetricDifference(_:)(v120);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v122 = v151;
      uint64_t v121 = v152;
      id v123 = v74;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AnyCanvas.selection.setter(v121, v122, 6, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    default:
LABEL_3:

      return;
  }
}

uint64_t specialized closure #2 in Canvas.setupBandSelection()(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + 16;
  swift_beginAccess();
  uint64_t v7 = (void *)MEMORY[0x210550400](v6);
  uint64_t v8 = (uint64_t)v7;
  if (v7)
  {
    uint64_t v9 = (void *)MEMORY[0x263F8EED0];
    (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x263F8EED0] & *v7) + 0x2C8))(&v25);
    if ((_BYTE)v25 && *(unsigned char *)(v8 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_nonDrawingToolMode) == 1)
    {
      uint64_t v10 = *(void **)(v8 + direct field offset for Canvas._editingView);
      if (v10)
      {
        uint64_t v11 = *(_UNKNOWN ***)(v8 + direct field offset for Canvas._editingView + 8);
        id v12 = *(id *)(v8 + direct field offset for Canvas._editingView);
      }
      else
      {
        id v12 = *(id *)(v8 + direct field offset for Canvas.paperView);
        uint64_t v11 = &protocol witness table for ContainerCanvasElementView<A>;
      }
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v14 = (uint64_t (*)(uint64_t, _UNKNOWN **))v11[7];
      id v15 = v10;
      unint64_t v16 = v14(ObjectType, v11);

      if (v16 >> 62) {
        goto LABEL_20;
      }
      uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v17; uint64_t v17 = _CocoaArrayWrapper.endIndex.getter())
      {
        uint64_t v18 = 4;
        while (1)
        {
          uint64_t v19 = (v16 & 0xC000000000000001) != 0
              ? (void *)MEMORY[0x21054E050](v18 - 4, v16)
              : *(id *)(v16 + 8 * v18);
          uint64_t v20 = v19;
          uint64_t v21 = v18 - 3;
          if (__OFADD__(v18 - 4, 1)) {
            break;
          }
          if (((*(uint64_t (**)(void))((*v9 & *v19) + 0x218))() & 1) == 0)
          {
            objc_msgSend(v20, sel_convertPoint_fromCoordinateSpace_, v8, a1, a2);
            id v22 = objc_msgSend(v20, sel_hitTest_withEvent_, 0);
            if (v22)
            {
              uint64_t v23 = v22;

              swift_bridgeObjectRelease();
              uint64_t v8 = 0;
              goto LABEL_22;
            }
          }

          ++v18;
          if (v21 == v17) {
            goto LABEL_21;
          }
        }
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
      }
LABEL_21:

      swift_bridgeObjectRelease();
      uint64_t v8 = 1;
LABEL_22:
      swift_bridgeObjectRelease();
    }
    else
    {

      return 0;
    }
  }
  return v8;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction, @unowned CGPoint) -> (@unowned Bool)(uint64_t a1, void *a2, double a3, double a4)
{
  uint64_t v7 = *(uint64_t (**)(double, double))(a1 + 32);
  swift_retain();
  id v8 = a2;
  LOBYTE(v7) = v7(a3, a4);
  swift_release();

  return v7 & 1;
}

void specialized closure #1 in Canvas.startCheckingForOldEraserStrokes()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x210550400](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    specialized Canvas.removeOldEraserStrokes()();
  }
}

uint64_t specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  v6[11] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v6[12] = v7;
  v6[13] = *(void *)(v7 - 8);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), 0, 0);
}

uint64_t specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)()
{
  uint64_t v1 = v0[8] + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  v0[16] = v2;
  uint64_t v3 = v0[11];
  if (v2)
  {
    uint64_t v4 = v0[12];
    uint64_t v5 = v0[13];
    specialized Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(v0[10], v0[11]);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v0[11], (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
      v0[18] = type metadata accessor for MainActor();
      v0[19] = static MainActor.shared.getter();
      uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v8 = v7;
      uint64_t v9 = specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:);
    }
    else
    {
      (*(void (**)(void, void, void))(v0[13] + 32))(v0[15], v0[11], v0[12]);
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)logger);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        id v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v15 = 0;
        _os_log_impl(&dword_20C2D7000, v13, v14, "Removed old eraser stroke(s)", v15, 2u);
        MEMORY[0x210550270](v15, -1, -1);
      }

      type metadata accessor for MainActor();
      v0[17] = static MainActor.shared.getter();
      uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v8 = v16;
      uint64_t v9 = specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:);
    }
    return MEMORY[0x270FA2498](v9, v6, v8);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void (*v4)(uint64_t, char *, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v10 = v0;
  uint64_t v1 = *(void **)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 120);
  swift_release();
  uint64_t v8 = 3;
  uint64_t v3 = (void *)MEMORY[0x263F8EED0];
  uint64_t v4 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v1) + 0x550);
  uint64_t v5 = type metadata accessor for Paper();
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  v4(v2, &v8, v5, v6);
  uint64_t v9 = 3;
  (*(void (**)(char *))((*v3 & *v1) + 0x530))(&v9);
  return MEMORY[0x270FA2498](specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(void, void))(v0[13] + 8))(v0[15], v0[12]);
  v0[18] = type metadata accessor for MainActor();
  v0[19] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 128);
  swift_release();
  *(void *)(v0 + 16AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = *(void *)(v1 + direct field offset for Canvas.eraserCheckingIndex);
  return MEMORY[0x270FA2498](specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 168) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), v2, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[16];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v4 = v0[12];
  swift_release();
  uint64_t v5 = *(void *)(v1 + direct field offset for Canvas.paperView)
     + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v1 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  return MEMORY[0x270FA2498](specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (specialized Capsule<>.hasAnyEraserStrokes()())
  {
    uint64_t v1 = (void *)v0[16];
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    v0[22] = static MainActor.shared.getter();
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    return MEMORY[0x270FA2498](specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), v5, v4);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 160);
  swift_release();
  specialized Canvas.stopCheckingForOldEraserStrokes(index:)(v1);
  return MEMORY[0x270FA2498](specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t closure #1 in $defer #1 () in PaperTextAttachmentView.didMoveToSuperview()(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  *(unsigned char *)(v12 + 33) = a12;
  *(void *)(v12 + 88) = a10;
  *(void *)(v12 + 96) = a11;
  *(void *)(v12 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a9;
  *(double *)(v12 + 64) = a3;
  *(double *)(v12 + 72) = a4;
  *(double *)(v12 + 48) = a1;
  *(double *)(v12 + 56) = a2;
  *(void *)(v12 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a8;
  type metadata accessor for MainActor();
  *(void *)(v12 + 104) = static MainActor.shared.getter();
  uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v12 + 112) = v14;
  *(void *)(v12 + 12AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v13;
  return MEMORY[0x270FA2498](closure #1 in $defer #1 () in PaperTextAttachmentView.didMoveToSuperview(), v14, v13);
}

uint64_t closure #1 in $defer #1 () in PaperTextAttachmentView.didMoveToSuperview()()
{
  objc_msgSend(*(id *)(v0 + 40), sel_convertRect_toCoordinateSpace_, *(void *)(v0 + 80), *(double *)(v0 + 48), *(double *)(v0 + 56), *(double *)(v0 + 64), *(double *)(v0 + 72));
  double v2 = v1;
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  uint64_t v9 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)&v9[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
  if (v11)
  {
    char v12 = *(unsigned char *)(v0 + 33);
    uint64_t v13 = *(void *)(v0 + 40);
    uint64_t v14 = *(void **)(v11 + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool);
    *(void *)(v0 + 128) = v14;
    v14;
    long long v18 = *(_OWORD *)(v0 + 88);

    *(_OWORD *)(v0 + 16) = v18;
    *(unsigned char *)(v0 + 32) = v12;
    id v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v15;
    *id v15 = v0;
    v15[1] = closure #1 in $defer #1 () in PaperTextAttachmentView.didMoveToSuperview();
    return CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:invocation:canvas:)(v0 + 16, 2, v13, v2, v4, v6, v8);
  }
  else
  {

    swift_release();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  double v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    double v3 = *(void **)(v2 + 128);
  }
  else
  {
  }
  double v4 = *(void *)(v2 + 112);
  double v5 = *(void *)(v2 + 120);
  return MEMORY[0x270FA2498](closure #1 in $defer #1 () in PaperTextAttachmentView.didMoveToSuperview(), v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  double v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ()(uint64_t a1, void *a2)
{
  double v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v192 = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v169 = (char *)&v166 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v181 = (char *)&v166 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v186 = (char *)&v166 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v184 = a1;
  id v185 = (char *)&v166 - v12;
  Swift::Int v13 = a1[1];
  Swift::Int v14 = _minimumMergeRunLength(_:)(v13);
  if (v14 >= v13)
  {
    if (v13 < 0) {
      goto LABEL_157;
    }
    if (v13) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v13, 1, v184);
    }
  }
  else
  {
    if (v13 >= 0) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = v13 + 1;
    }
    if (v13 < -1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      Swift::Int v167 = v14;
      uint64_t v173 = v5;
      if (v13 >= 2)
      {
        uint64_t v16 = v15 >> 1;
        uint64_t v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v17 + 16) = v16;
        unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        uint64_t v166 = v17;
        unint64_t v172 = v17 + v18;
        goto LABEL_12;
      }
      uint64_t v19 = (char *)MEMORY[0x263F8EE78];
      unint64_t v172 = MEMORY[0x263F8EE78]
           + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      uint64_t v166 = MEMORY[0x263F8EE78];
      if (v13 == 1)
      {
LABEL_12:
        uint64_t v20 = 0;
        CGFloat v178 = (void (**)(char *, uint64_t))(v5 + 8);
        uint64_t v179 = v5 + 16;
        uint64_t v182 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
        uint64_t v19 = (char *)MEMORY[0x263F8EE78];
        uint64_t v187 = v4;
        while (1)
        {
          uint64_t v22 = (uint64_t)v20;
          Swift::Int v23 = v13;
          if ((uint64_t)(v20 + 1) >= v13)
          {
            Swift::Int v44 = (Swift::Int)(v20 + 1);
          }
          else
          {
            Swift::Int v177 = v13;
            uint64_t v24 = *v184;
            uint64_t v170 = v24;
            uint64_t v25 = *(void *)(v173 + 72);
            uint64_t v175 = (uint64_t)(v20 + 1);
            uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v173 + 16);
            uint64_t v27 = v20;
            v26(v185, v24 + v25 * (void)(v20 + 1), v4);
            uint64_t v171 = v27;
            uint64_t v183 = v25;
            int v180 = v26;
            v26(v186, v24 + v25 * (void)v27, v4);
            unint64_t v190 = UUID.uuid.getter();
            LOWORD(v191) = v28;
            BYTE2(v191) = v29;
            BYTE3(v191) = v30;
            BYTE4(v191) = v31;
            BYTE5(v191) = v32;
            BYTE6(v191) = v33;
            HIBYTE(v191) = v34;
            unint64_t v188 = UUID.uuid.getter();
            LOWORD(v189) = v35;
            BYTE2(v189) = v36;
            BYTE3(v189) = v37;
            BYTE4(v189) = v38;
            BYTE5(v189) = v39;
            BYTE6(v189) = v40;
            HIBYTE(v189) = v41;
            unint64_t v42 = bswap64(v190);
            unint64_t v43 = bswap64(v188);
            if (v42 == v43 && (unint64_t v42 = bswap64(v191), v43 = bswap64(v189), v42 == v43))
            {
              LODWORD(v176) = 0;
              uint64_t v22 = (uint64_t)v171;
              Swift::Int v23 = v177;
            }
            else
            {
              uint64_t v22 = (uint64_t)v171;
              Swift::Int v23 = v177;
              if (v42 < v43) {
                int v45 = -1;
              }
              else {
                int v45 = 1;
              }
              LODWORD(v176) = v45;
            }
            id v46 = *v178;
            (*v178)(v186, v4);
            v46(v185, v4);
            Swift::Int v44 = v22 + 2;
            if (v22 + 2 < v23)
            {
              uint64_t v168 = v19;
              v175 *= v183;
              uint64_t v47 = v170;
              uint64_t v174 = v183 * v44;
              while (1)
              {
                Swift::Int v48 = v44;
                id v49 = v180;
                v180(v185, v47 + v174, v4);
                v49(v186, v47 + v175, v4);
                unint64_t v190 = UUID.uuid.getter();
                LOWORD(v191) = v50;
                BYTE2(v191) = v51;
                BYTE3(v191) = v52;
                BYTE4(v191) = v53;
                BYTE5(v191) = v54;
                BYTE6(v191) = v55;
                HIBYTE(v191) = v56;
                unint64_t v188 = UUID.uuid.getter();
                LOWORD(v189) = v57;
                BYTE2(v189) = v58;
                BYTE3(v189) = v59;
                BYTE4(v189) = v60;
                BYTE5(v189) = v61;
                BYTE6(v189) = v62;
                HIBYTE(v189) = v63;
                unint64_t v64 = bswap64(v190);
                unint64_t v65 = bswap64(v188);
                if (v64 != v65) {
                  goto LABEL_29;
                }
                unint64_t v64 = bswap64(v191);
                unint64_t v65 = bswap64(v189);
                if (v64 == v65) {
                  int v66 = 0;
                }
                else {
LABEL_29:
                }
                  int v66 = v64 < v65 ? -1 : 1;
                v46(v186, v4);
                v46(v185, v4);
                if (((v66 ^ v176) & 0x80000000) != 0) {
                  break;
                }
                ++v44;
                v47 += v183;
                Swift::Int v23 = v177;
                if (v177 == v48 + 1)
                {
                  Swift::Int v44 = v177;
                  uint64_t v19 = v168;
                  uint64_t v22 = (uint64_t)v171;
                  goto LABEL_36;
                }
              }
              uint64_t v19 = v168;
              uint64_t v22 = (uint64_t)v171;
              Swift::Int v23 = v177;
            }
LABEL_36:
            uint64_t v67 = v170;
            if ((v176 & 0x80000000) != 0)
            {
              if (v44 < v22) {
                goto LABEL_160;
              }
              if (v22 < v44)
              {
                uint64_t v168 = v19;
                Swift::Int v68 = v44;
                uint64_t v69 = 0;
                uint64_t v70 = v183 * (v68 - 1);
                uint64_t v71 = v68 * v183;
                uint64_t v72 = v22 * v183;
                int v180 = (void (*)(char *, uint64_t, uint64_t))v68;
                do
                {
                  if (v22 != v68 + v69 - 1)
                  {
                    if (!v67) {
                      goto LABEL_163;
                    }
                    uint64_t v74 = v67 + v70;
                    uint64_t v176 = *v182;
                    v176(v169, v67 + v72, v187);
                    if (v72 < v70 || v67 + v72 >= (unint64_t)(v67 + v71))
                    {
                      uint64_t v73 = v187;
                      swift_arrayInitWithTakeFrontToBack();
                    }
                    else
                    {
                      uint64_t v73 = v187;
                      if (v72 != v70) {
                        swift_arrayInitWithTakeBackToFront();
                      }
                    }
                    v176((char *)v74, (uint64_t)v169, v73);
                    uint64_t v4 = v73;
                    uint64_t v67 = v170;
                  }
                  ++v22;
                  --v69;
                  Swift::Int v68 = (Swift::Int)v180;
                  v70 -= v183;
                  v71 -= v183;
                  v72 += v183;
                }
                while (v22 < (uint64_t)v180 + v69);
                uint64_t v19 = v168;
                Swift::Int v44 = (Swift::Int)v180;
                uint64_t v22 = (uint64_t)v171;
                Swift::Int v23 = v177;
              }
            }
          }
          if (v44 < v23)
          {
            if (__OFSUB__(v44, v22)) {
              goto LABEL_156;
            }
            if (v44 - v22 < v167)
            {
              if (__OFADD__(v22, v167)) {
                goto LABEL_158;
              }
              if (v22 + v167 >= v23) {
                Swift::Int v75 = v23;
              }
              else {
                Swift::Int v75 = v22 + v167;
              }
              if (v75 < v22)
              {
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
              }
              if (v44 != v75)
              {
                uint64_t v171 = (char *)v22;
                uint64_t v168 = v19;
                uint64_t v76 = *(void (**)(char *, uint64_t, uint64_t))(v173 + 72);
                uint64_t v77 = *(char **)(v173 + 16);
                uint64_t v174 = v2;
                uint64_t v175 = (uint64_t)v77;
                uint64_t v183 = (void)v76 * (v44 - 1);
                uint64_t v176 = v76;
                Swift::Int v78 = v44 * (void)v76;
                uint64_t v170 = v75;
                do
                {
                  uint64_t v80 = 0;
                  unint64_t v81 = v171;
                  int v180 = (void (*)(char *, uint64_t, uint64_t))v44;
                  Swift::Int v177 = v78;
                  while (1)
                  {
                    uint64_t v82 = *v184;
                    uint64_t v83 = v78 + v80 + *v184;
                    __n128 v84 = (void (*)(char *, uint64_t, uint64_t))v175;
                    ((void (*)(char *, uint64_t, uint64_t))v175)(v185, v83, v4);
                    v84(v186, v183 + v80 + v82, v4);
                    unint64_t v190 = UUID.uuid.getter();
                    LOWORD(v191) = v85;
                    BYTE2(v191) = v86;
                    BYTE3(v191) = v87;
                    BYTE4(v191) = v88;
                    BYTE5(v191) = v89;
                    BYTE6(v191) = v90;
                    HIBYTE(v191) = v91;
                    unint64_t v188 = UUID.uuid.getter();
                    LOWORD(v189) = v92;
                    BYTE2(v189) = v93;
                    BYTE3(v189) = v94;
                    BYTE4(v189) = v95;
                    BYTE5(v189) = v96;
                    BYTE6(v189) = v97;
                    HIBYTE(v189) = v98;
                    unint64_t v99 = bswap64(v190);
                    unint64_t v100 = bswap64(v188);
                    if (v99 != v100) {
                      goto LABEL_67;
                    }
                    unint64_t v99 = bswap64(v191);
                    unint64_t v100 = bswap64(v189);
                    if (v99 == v100)
                    {
                      int v101 = 0;
                      Swift::Int v78 = v177;
                    }
                    else
                    {
LABEL_67:
                      Swift::Int v78 = v177;
                      int v101 = v99 < v100 ? -1 : 1;
                    }
                    uint64_t v102 = *v178;
                    uint64_t v103 = v187;
                    (*v178)(v186, v187);
                    v102(v185, v103);
                    if ((v101 & 0x80000000) == 0) {
                      break;
                    }
                    uint64_t v104 = *v184;
                    if (!*v184) {
                      goto LABEL_161;
                    }
                    uint64_t v105 = (char *)(v104 + v183 + v80);
                    objc_super v106 = *v182;
                    uint64_t v107 = v187;
                    (*v182)(v181, v104 + v78 + v80, v187);
                    uint64_t v4 = v107;
                    swift_arrayInitWithTakeFrontToBack();
                    v106(v105, (uint64_t)v181, v107);
                    v80 -= (uint64_t)v176;
                    ++v81;
                    unint64_t v79 = v180;
                    if ((char *)v180 == v81) {
                      goto LABEL_61;
                    }
                  }
                  uint64_t v4 = v187;
                  unint64_t v79 = v180;
LABEL_61:
                  Swift::Int v44 = (Swift::Int)v79 + 1;
                  v183 += (uint64_t)v176;
                  v78 += (Swift::Int)v176;
                }
                while (v44 != v170);
                Swift::Int v44 = v170;
                uint64_t v2 = v174;
                uint64_t v19 = v168;
                uint64_t v22 = (uint64_t)v171;
              }
            }
          }
          if (v44 < v22) {
            goto LABEL_151;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19);
          }
          unint64_t v109 = *((void *)v19 + 2);
          unint64_t v108 = *((void *)v19 + 3);
          unint64_t v21 = v109 + 1;
          int v180 = (void (*)(char *, uint64_t, uint64_t))v44;
          if (v109 >= v108 >> 1) {
            uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v108 > 1), v109 + 1, 1, v19);
          }
          uint64_t v174 = v2;
          *((void *)v19 + 2) = v21;
          uint64_t v110 = v19 + 32;
          id v111 = &v19[16 * v109 + 32];
          unint64_t v112 = v180;
          *(void *)id v111 = v22;
          *((void *)v111 + 1) = v112;
          if (v109) {
            break;
          }
          unint64_t v21 = 1;
LABEL_14:
          Swift::Int v13 = v184[1];
          uint64_t v20 = (char *)v180;
          uint64_t v2 = v174;
          if ((uint64_t)v180 >= v13) {
            goto LABEL_123;
          }
        }
        while (1)
        {
          unint64_t v113 = v21 - 1;
          if (v21 >= 4)
          {
            uint64_t v118 = &v110[16 * v21];
            uint64_t v119 = *((void *)v118 - 8);
            uint64_t v120 = *((void *)v118 - 7);
            BOOL v124 = __OFSUB__(v120, v119);
            uint64_t v121 = v120 - v119;
            if (v124) {
              goto LABEL_140;
            }
            uint64_t v123 = *((void *)v118 - 6);
            uint64_t v122 = *((void *)v118 - 5);
            BOOL v124 = __OFSUB__(v122, v123);
            uint64_t v116 = v122 - v123;
            char v117 = v124;
            if (v124) {
              goto LABEL_141;
            }
            unint64_t v125 = v21 - 2;
            uint64_t v126 = &v110[16 * v21 - 32];
            uint64_t v128 = *(void *)v126;
            uint64_t v127 = *((void *)v126 + 1);
            BOOL v124 = __OFSUB__(v127, v128);
            uint64_t v129 = v127 - v128;
            if (v124) {
              goto LABEL_143;
            }
            BOOL v124 = __OFADD__(v116, v129);
            uint64_t v130 = v116 + v129;
            if (v124) {
              goto LABEL_146;
            }
            if (v130 >= v121)
            {
              uint64_t v148 = &v110[16 * v113];
              uint64_t v150 = *(void *)v148;
              uint64_t v149 = *((void *)v148 + 1);
              BOOL v124 = __OFSUB__(v149, v150);
              uint64_t v151 = v149 - v150;
              if (v124) {
                goto LABEL_150;
              }
              BOOL v141 = v116 < v151;
              goto LABEL_111;
            }
          }
          else
          {
            if (v21 != 3)
            {
              uint64_t v142 = *((void *)v19 + 4);
              uint64_t v143 = *((void *)v19 + 5);
              BOOL v124 = __OFSUB__(v143, v142);
              uint64_t v135 = v143 - v142;
              char v136 = v124;
              goto LABEL_105;
            }
            uint64_t v115 = *((void *)v19 + 4);
            uint64_t v114 = *((void *)v19 + 5);
            BOOL v124 = __OFSUB__(v114, v115);
            uint64_t v116 = v114 - v115;
            char v117 = v124;
          }
          if (v117) {
            goto LABEL_142;
          }
          unint64_t v125 = v21 - 2;
          uint64_t v131 = &v110[16 * v21 - 32];
          uint64_t v133 = *(void *)v131;
          uint64_t v132 = *((void *)v131 + 1);
          BOOL v134 = __OFSUB__(v132, v133);
          uint64_t v135 = v132 - v133;
          char v136 = v134;
          if (v134) {
            goto LABEL_145;
          }
          uint64_t v137 = &v110[16 * v113];
          uint64_t v139 = *(void *)v137;
          uint64_t v138 = *((void *)v137 + 1);
          BOOL v124 = __OFSUB__(v138, v139);
          uint64_t v140 = v138 - v139;
          if (v124) {
            goto LABEL_148;
          }
          if (__OFADD__(v135, v140)) {
            goto LABEL_149;
          }
          if (v135 + v140 >= v116)
          {
            BOOL v141 = v116 < v140;
LABEL_111:
            if (v141) {
              unint64_t v113 = v125;
            }
            goto LABEL_113;
          }
LABEL_105:
          if (v136) {
            goto LABEL_144;
          }
          os_log_type_t v144 = &v110[16 * v113];
          uint64_t v146 = *(void *)v144;
          uint64_t v145 = *((void *)v144 + 1);
          BOOL v124 = __OFSUB__(v145, v146);
          uint64_t v147 = v145 - v146;
          if (v124) {
            goto LABEL_147;
          }
          if (v147 < v135) {
            goto LABEL_14;
          }
LABEL_113:
          unint64_t v152 = v113 - 1;
          if (v113 - 1 >= v21)
          {
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }
          if (!*v184) {
            goto LABEL_162;
          }
          uint64_t v153 = v19;
          uint64_t v154 = &v110[16 * v152];
          uint64_t v155 = *(void *)v154;
          uint64_t v156 = &v110[16 * v113];
          uint64_t v157 = *((void *)v156 + 1);
          uint64_t v158 = v174;
          specialized _merge<A>(low:mid:high:buffer:by:)(*v184 + *(void *)(v173 + 72) * *(void *)v154, *v184 + *(void *)(v173 + 72) * *(void *)v156, *v184 + *(void *)(v173 + 72) * v157, v172);
          uint64_t v174 = v158;
          if (v158) {
            goto LABEL_134;
          }
          if (v157 < v155) {
            goto LABEL_137;
          }
          if (v113 > *((void *)v153 + 2)) {
            goto LABEL_138;
          }
          *(void *)uint64_t v154 = v155;
          *(void *)&v110[16 * v152 + 8] = v157;
          unint64_t v159 = *((void *)v153 + 2);
          if (v113 >= v159) {
            goto LABEL_139;
          }
          uint64_t v19 = v153;
          unint64_t v21 = v159 - 1;
          memmove(&v110[16 * v113], v156 + 16, 16 * (v159 - 1 - v113));
          *((void *)v153 + 2) = v159 - 1;
          uint64_t v4 = v187;
          if (v159 <= 2) {
            goto LABEL_14;
          }
        }
      }
      unint64_t v21 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_123:
      if (v21 >= 2)
      {
        uint64_t v160 = *v184;
        do
        {
          unint64_t v161 = v21 - 2;
          if (v21 < 2) {
            goto LABEL_152;
          }
          if (!v160) {
            goto LABEL_164;
          }
          uint64_t v162 = *(void *)&v19[16 * v161 + 32];
          uint64_t v163 = *(void *)&v19[16 * v21 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v160 + *(void *)(v173 + 72) * v162, v160 + *(void *)(v173 + 72) * *(void *)&v19[16 * v21 + 16], v160 + *(void *)(v173 + 72) * v163, v172);
          if (v2) {
            break;
          }
          if (v163 < v162) {
            goto LABEL_153;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
          }
          if (v161 >= *((void *)v19 + 2)) {
            goto LABEL_154;
          }
          uint64_t v164 = &v19[16 * v161 + 32];
          *(void *)uint64_t v164 = v162;
          *((void *)v164 + 1) = v163;
          unint64_t v165 = *((void *)v19 + 2);
          if (v21 > v165) {
            goto LABEL_155;
          }
          memmove(&v19[16 * v21 + 16], &v19[16 * v21 + 32], 16 * (v165 - v21));
          *((void *)v19 + 2) = v165 - 1;
          unint64_t v21 = v165 - 1;
        }
        while (v165 > 2);
      }
LABEL_134:
      swift_bridgeObjectRelease();
      *(void *)(v166 + 16) = 0;
      swift_bridgeObjectRelease();
    }
  }
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  void **v42;
  char *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  void (*v58)(uint64_t, char *);
  uint64_t *v59;
  Swift::Int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  id v74;
  id v75;
  uint64_t v76;
  char v77;
  void (*v78)(uint64_t, uint64_t);
  void *v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  char v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  Swift::Int v143;
  char *v144;
  uint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void **v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;

  double v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v161 = (uint64_t)&v139 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v139 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v154 = (uint64_t)&v139 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v139 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v145 = (uint64_t)&v139 - v17;
  unint64_t v18 = a1[1];
  uint64_t v19 = _minimumMergeRunLength(_:)(v18);
  if (v19 >= v18)
  {
    if (v18 < 0) {
      goto LABEL_137;
    }
    if (v18) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v18, 1, a1);
    }
    return;
  }
  if (v18 >= 0) {
    uint64_t v20 = v18;
  }
  else {
    uint64_t v20 = v18 + 1;
  }
  if (v18 < -1) {
    goto LABEL_151;
  }
  uint64_t v143 = v19;
  os_log_type_t v144 = v15;
  uint64_t v156 = v1;
  uint64_t v140 = a1;
  if (v18 < 2)
  {
    uint64_t v24 = (char *)MEMORY[0x263F8EE78];
    uint64_t v162 = MEMORY[0x263F8EE78];
    uint64_t v155 = (void **)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v18 != 1)
    {
      __int16 v28 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_103:
      uint64_t v131 = v24;
      if (v28 >= 2)
      {
        uint64_t v132 = *v140;
        do
        {
          uint64_t v133 = v28 - 2;
          if (v28 < 2) {
            goto LABEL_132;
          }
          if (!v132) {
            goto LABEL_148;
          }
          BOOL v134 = *(void *)&v131[16 * v133 + 32];
          uint64_t v135 = *(void *)&v131[16 * v28 + 24];
          char v136 = v156;
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v132 + 8 * v134), (void **)(v132 + 8 * *(void *)&v131[16 * v28 + 16]), v132 + 8 * v135, v155);
          uint64_t v156 = v136;
          if (v136) {
            break;
          }
          if (v135 < v134) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v131 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v131);
          }
          if (v133 >= *((void *)v131 + 2)) {
            goto LABEL_134;
          }
          uint64_t v137 = &v131[16 * v133 + 32];
          *(void *)uint64_t v137 = v134;
          *((void *)v137 + 1) = v135;
          uint64_t v138 = *((void *)v131 + 2);
          if (v28 > v138) {
            goto LABEL_135;
          }
          memmove(&v131[16 * v28 + 16], &v131[16 * v28 + 32], 16 * (v138 - v28));
          *((void *)v131 + 2) = v138 - 1;
          __int16 v28 = v138 - 1;
        }
        while (v138 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)((v162 & 0xFFFFFFFFFFFFFF8) + 0x1AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    unint64_t v21 = a1;
    uint64_t v22 = v20 >> 1;
    type metadata accessor for SignatureItem();
    Swift::Int v23 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x1AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v22;
    a1 = v21;
    uint64_t v155 = (void **)((v23 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v162 = v23;
  }
  uint64_t v25 = 0;
  uint64_t v26 = *a1;
  uint64_t v27 = *a1 + 16;
  BOOL v141 = *a1 - 8;
  uint64_t v142 = v27;
  uint64_t v24 = (char *)MEMORY[0x263F8EE78];
  uint64_t v157 = v5;
  uint64_t v158 = v26;
  uint64_t v150 = v10;
  uint64_t v151 = (char *)v18;
  while (1)
  {
    char v29 = v25;
    char v30 = v25 + 1;
    unint64_t v152 = v25;
    if (v25 + 1 < v18)
    {
      char v31 = *(void **)(v26 + 8 * v30);
      char v32 = *(void **)(v26 + 8 * v25);
      char v33 = v145;
      outlined init with copy of Date?((uint64_t)v31 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v145);
      char v34 = type metadata accessor for Date();
      __int16 v35 = *(void *)(v34 - 8);
      char v36 = v35 + 48;
      char v37 = *(char **)(v35 + 48);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v37)(v33, 1, v34) == 1) {
        goto LABEL_149;
      }
      char v38 = (uint64_t)v144;
      outlined init with copy of Date?((uint64_t)v32 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, (uint64_t)v144);
      uint64_t v149 = v37;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v37)(v38, 1, v34) == 1) {
        goto LABEL_150;
      }
      uint64_t v160 = v31;
      char v39 = v32;
      char v40 = v145;
      LODWORD(v153) = static Date.> infix(_:_:)();
      char v41 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v41(v38, v34);
      uint64_t v147 = v35 + 8;
      uint64_t v148 = (char *)v34;
      uint64_t v146 = v41;
      v41(v40, v34);

      char v29 = v152;
      char v30 = v152 + 2;
      if (v152 + 2 < v18)
      {
        unint64_t v42 = (void **)(v142 + 8 * v152);
        while (1)
        {
          unint64_t v43 = v24;
          unint64_t v159 = (char *)v30;
          Swift::Int v44 = *(v42 - 1);
          int v45 = *v42;
          id v46 = v154;
          outlined init with copy of Date?((uint64_t)*v42 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v154);
          Swift::Int v48 = v148;
          uint64_t v47 = v149;
          if (((unsigned int (*)(uint64_t, uint64_t, char *))v149)(v46, 1, v148) == 1) {
            goto LABEL_145;
          }
          id v49 = (uint64_t)v150;
          outlined init with copy of Date?((uint64_t)v44 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, (uint64_t)v150);
          __int16 v50 = v48;
          char v51 = v48;
          char v52 = v36;
          if (((unsigned int (*)(uint64_t, uint64_t, char *))v47)(v49, 1, v50) == 1) {
            goto LABEL_146;
          }
          uint64_t v160 = v45;
          char v53 = v44;
          char v54 = v154;
          char v55 = static Date.> infix(_:_:)();
          char v56 = v49;
          __int16 v57 = v55;
          char v58 = (void (*)(uint64_t, char *))v146;
          v146(v56, (uint64_t)v51);
          v58(v54, v51);

          if ((v153 ^ v57)) {
            break;
          }
          char v30 = (Swift::Int)(v159 + 1);
          ++v42;
          unint64_t v18 = (Swift::Int)v151;
          uint64_t v24 = v43;
          char v36 = v52;
          if (v151 == v159 + 1)
          {
            char v30 = (Swift::Int)v151;
            char v29 = v152;
            goto LABEL_26;
          }
        }
        unint64_t v18 = (Swift::Int)v151;
        char v29 = v152;
        char v30 = (Swift::Int)v159;
        uint64_t v24 = v43;
      }
LABEL_26:
      uint64_t v26 = v158;
      if (v153)
      {
        if (v30 < v29) {
          goto LABEL_138;
        }
        if (v29 < v30)
        {
          char v59 = (uint64_t *)(v141 + 8 * v30);
          char v60 = v30;
          char v61 = v29;
          char v62 = (uint64_t *)(v158 + 8 * v29);
          do
          {
            if (v61 != --v60)
            {
              if (!v26) {
                goto LABEL_147;
              }
              char v63 = *v62;
              *char v62 = *v59;
              *char v59 = v63;
            }
            ++v61;
            --v59;
            ++v62;
          }
          while (v61 < v60);
        }
      }
    }
    if (v30 < v18)
    {
      if (__OFSUB__(v30, v29)) {
        goto LABEL_136;
      }
      if (v30 - v29 < v143) {
        break;
      }
    }
LABEL_55:
    if (v30 < v29) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
    }
    unint64_t v81 = *((void *)v24 + 2);
    uint64_t v80 = *((void *)v24 + 3);
    __int16 v28 = v81 + 1;
    uint64_t v26 = v158;
    if (v81 >= v80 >> 1)
    {
      uint64_t v130 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v80 > 1), v81 + 1, 1, v24);
      uint64_t v26 = v158;
      uint64_t v24 = v130;
    }
    *((void *)v24 + 2) = v28;
    uint64_t v82 = v24 + 32;
    uint64_t v83 = &v24[16 * v81 + 32];
    *(void *)uint64_t v83 = v29;
    *((void *)v83 + 1) = v30;
    unint64_t v159 = (char *)v30;
    if (v81)
    {
      while (1)
      {
        __n128 v84 = v28 - 1;
        if (v28 >= 4)
        {
          char v89 = &v82[16 * v28];
          char v90 = *((void *)v89 - 8);
          char v91 = *((void *)v89 - 7);
          char v95 = __OFSUB__(v91, v90);
          __int16 v92 = v91 - v90;
          if (v95) {
            goto LABEL_120;
          }
          char v94 = *((void *)v89 - 6);
          char v93 = *((void *)v89 - 5);
          char v95 = __OFSUB__(v93, v94);
          char v87 = v93 - v94;
          char v88 = v95;
          if (v95) {
            goto LABEL_121;
          }
          char v96 = v28 - 2;
          char v97 = &v82[16 * v28 - 32];
          unint64_t v99 = *(void *)v97;
          char v98 = *((void *)v97 + 1);
          char v95 = __OFSUB__(v98, v99);
          unint64_t v100 = v98 - v99;
          if (v95) {
            goto LABEL_123;
          }
          char v95 = __OFADD__(v87, v100);
          int v101 = v87 + v100;
          if (v95) {
            goto LABEL_126;
          }
          if (v101 >= v92)
          {
            uint64_t v119 = &v82[16 * v84];
            uint64_t v121 = *(void *)v119;
            uint64_t v120 = *((void *)v119 + 1);
            char v95 = __OFSUB__(v120, v121);
            uint64_t v122 = v120 - v121;
            if (v95) {
              goto LABEL_130;
            }
            unint64_t v112 = v87 < v122;
            goto LABEL_92;
          }
        }
        else
        {
          if (v28 != 3)
          {
            unint64_t v113 = *((void *)v24 + 4);
            uint64_t v114 = *((void *)v24 + 5);
            char v95 = __OFSUB__(v114, v113);
            objc_super v106 = v114 - v113;
            uint64_t v107 = v95;
            goto LABEL_86;
          }
          char v86 = *((void *)v24 + 4);
          __int16 v85 = *((void *)v24 + 5);
          char v95 = __OFSUB__(v85, v86);
          char v87 = v85 - v86;
          char v88 = v95;
        }
        if (v88) {
          goto LABEL_122;
        }
        char v96 = v28 - 2;
        uint64_t v102 = &v82[16 * v28 - 32];
        uint64_t v104 = *(void *)v102;
        uint64_t v103 = *((void *)v102 + 1);
        uint64_t v105 = __OFSUB__(v103, v104);
        objc_super v106 = v103 - v104;
        uint64_t v107 = v105;
        if (v105) {
          goto LABEL_125;
        }
        unint64_t v108 = &v82[16 * v84];
        uint64_t v110 = *(void *)v108;
        unint64_t v109 = *((void *)v108 + 1);
        char v95 = __OFSUB__(v109, v110);
        id v111 = v109 - v110;
        if (v95) {
          goto LABEL_128;
        }
        if (__OFADD__(v106, v111)) {
          goto LABEL_129;
        }
        if (v106 + v111 >= v87)
        {
          unint64_t v112 = v87 < v111;
LABEL_92:
          if (v112) {
            __n128 v84 = v96;
          }
          goto LABEL_94;
        }
LABEL_86:
        if (v107) {
          goto LABEL_124;
        }
        uint64_t v115 = &v82[16 * v84];
        char v117 = *(void *)v115;
        uint64_t v116 = *((void *)v115 + 1);
        char v95 = __OFSUB__(v116, v117);
        uint64_t v118 = v116 - v117;
        if (v95) {
          goto LABEL_127;
        }
        if (v118 < v106) {
          goto LABEL_14;
        }
LABEL_94:
        uint64_t v123 = v84 - 1;
        if (v84 - 1 >= v28)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v26) {
          goto LABEL_144;
        }
        BOOL v124 = &v82[16 * v123];
        unint64_t v125 = *(void *)v124;
        uint64_t v126 = &v82[16 * v84];
        uint64_t v127 = *((void *)v126 + 1);
        uint64_t v128 = v156;
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v26 + 8 * *(void *)v124), (void **)(v26 + 8 * *(void *)v126), v26 + 8 * v127, v155);
        uint64_t v156 = v128;
        if (v128) {
          goto LABEL_114;
        }
        if (v127 < v125) {
          goto LABEL_117;
        }
        if (v84 > *((void *)v24 + 2)) {
          goto LABEL_118;
        }
        *(void *)BOOL v124 = v125;
        *(void *)&v82[16 * v123 + 8] = v127;
        uint64_t v129 = *((void *)v24 + 2);
        if (v84 >= v129) {
          goto LABEL_119;
        }
        __int16 v28 = v129 - 1;
        memmove(&v82[16 * v84], v126 + 16, 16 * (v129 - 1 - v84));
        *((void *)v24 + 2) = v129 - 1;
        uint64_t v26 = v158;
        if (v129 <= 2) {
          goto LABEL_14;
        }
      }
    }
    __int16 v28 = 1;
LABEL_14:
    unint64_t v18 = (Swift::Int)v151;
    uint64_t v25 = (uint64_t)v159;
    if ((uint64_t)v159 >= (uint64_t)v151) {
      goto LABEL_103;
    }
  }
  if (__OFADD__(v29, v143)) {
    goto LABEL_139;
  }
  if (v29 + v143 >= v18) {
    unint64_t v64 = (char *)v18;
  }
  else {
    unint64_t v64 = (char *)(v29 + v143);
  }
  if ((uint64_t)v64 >= v29)
  {
    if ((char *)v30 != v64)
    {
      uint64_t v148 = v24;
      unint64_t v65 = v141 + 8 * v30;
      uint64_t v149 = v64;
      do
      {
        uint64_t v67 = *(void **)(v26 + 8 * v30);
        uint64_t v153 = v65;
        unint64_t v159 = (char *)v30;
        while (1)
        {
          uint64_t v160 = (char *)v29;
          Swift::Int v68 = *(void **)v65;
          uint64_t v69 = v161;
          outlined init with copy of Date?((uint64_t)v67 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v161);
          uint64_t v70 = type metadata accessor for Date();
          uint64_t v71 = *(void *)(v70 - 8);
          uint64_t v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
          if (v72(v69, 1, v70) == 1) {
            goto LABEL_141;
          }
          uint64_t v73 = (uint64_t)v157;
          outlined init with copy of Date?((uint64_t)v68 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, (uint64_t)v157);
          if (v72(v73, 1, v70) == 1) {
            goto LABEL_142;
          }
          uint64_t v74 = v67;
          Swift::Int v75 = v68;
          uint64_t v76 = v161;
          uint64_t v77 = static Date.> infix(_:_:)();
          Swift::Int v78 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
          v78(v73, v70);
          v78(v76, v70);

          if ((v77 & 1) == 0) {
            break;
          }
          uint64_t v26 = v158;
          if (!v158) {
            goto LABEL_143;
          }
          unint64_t v79 = *(void **)v65;
          uint64_t v67 = *(void **)(v65 + 8);
          *(void *)unint64_t v65 = v67;
          *(void *)(v65 + 8) = v79;
          v65 -= 8;
          int v66 = v159;
          char v29 = (uint64_t)(v160 + 1);
          if (v159 == v160 + 1) {
            goto LABEL_46;
          }
        }
        uint64_t v26 = v158;
        int v66 = v159;
LABEL_46:
        char v30 = (Swift::Int)(v66 + 1);
        char v29 = v152;
        unint64_t v65 = v153 + 8;
      }
      while ((char *)v30 != v149);
      char v30 = (Swift::Int)v149;
      uint64_t v24 = v148;
    }
    goto LABEL_55;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v46 = a1;
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v7 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v7);
  char v54 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  char v58 = (char *)&v44 - v10;
  v13.n128_f64[0] = MEMORY[0x270FA5388](v11);
  __int16 v57 = (char *)&v44 - v14;
  uint64_t v52 = a3;
  uint64_t v45 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void (**)(void, void, void, __n128))(v12 + 16);
    uint64_t v15 = v12 + 16;
    uint64_t v17 = *(void *)(v15 + 56);
    uint64_t v47 = (void (**)(char *, uint64_t))(v15 - 8);
    Swift::Int v48 = (void (*)(char *, uint64_t, uint64_t))v16;
    uint64_t v49 = v15;
    uint64_t v50 = v17;
    char v53 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v59 = v17 * (v52 - 1);
    uint64_t v18 = v17 * v52;
    do
    {
      uint64_t v19 = 0;
      uint64_t v20 = v46;
      uint64_t v51 = v18;
      do
      {
        uint64_t v21 = *a4;
        uint64_t v56 = v18 + v19;
        uint64_t v22 = v48;
        ((void (*)(char *, uint64_t, uint64_t, __n128))v48)(v57, v18 + v19 + v21, v7, v13);
        uint64_t v55 = v59 + v19;
        v22(v58, v59 + v19 + v21, v7);
        unint64_t v62 = UUID.uuid.getter();
        LOWORD(v63) = v23;
        BYTE2(v63) = v24;
        BYTE3(v63) = v25;
        BYTE4(v63) = v26;
        BYTE5(v63) = v27;
        BYTE6(v63) = v28;
        HIBYTE(v63) = v29;
        unint64_t v60 = UUID.uuid.getter();
        LOWORD(v61) = v30;
        BYTE2(v61) = v31;
        BYTE3(v61) = v32;
        BYTE4(v61) = v33;
        BYTE5(v61) = v34;
        BYTE6(v61) = v35;
        HIBYTE(v61) = v36;
        unint64_t v37 = bswap64(v62);
        unint64_t v38 = bswap64(v60);
        if (v37 == v38 && (unint64_t v37 = bswap64(v63), v38 = bswap64(v61), v37 == v38))
        {
          int v39 = 0;
          uint64_t v18 = v51;
        }
        else
        {
          uint64_t v18 = v51;
          if (v37 < v38) {
            int v39 = -1;
          }
          else {
            int v39 = 1;
          }
        }
        char v40 = *v47;
        (*v47)(v58, v7);
        v40(v57, v7);
        if ((v39 & 0x80000000) == 0) {
          break;
        }
        uint64_t v41 = *a4;
        if (!*a4) {
          __break(1u);
        }
        unint64_t v42 = (char *)(v41 + v59 + v19);
        unint64_t v43 = *v53;
        (*v53)(v54, v41 + v18 + v19, v7);
        swift_arrayInitWithTakeFrontToBack();
        v43(v42, (uint64_t)v54, v7);
        v19 -= v50;
        ++v20;
      }
      while (v52 != v20);
      v59 += v50;
      v18 += v50;
      ++v52;
    }
    while (v52 != v45);
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  char v28 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v7 - 8);
  __int16 v30 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  char v34 = (uint64_t)&v26 - v10;
  char v27 = a2;
  if (a3 != a2)
  {
    char v31 = *a4;
    uint64_t v11 = v31 + 8 * a3 - 8;
LABEL_5:
    uint64_t v12 = *(void **)(v31 + 8 * a3);
    char v32 = a3;
    char v33 = v28;
    char v29 = v11;
    while (1)
    {
      __n128 v13 = *(void **)v11;
      uint64_t v14 = v34;
      outlined init with copy of Date?((uint64_t)v12 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v34);
      uint64_t v15 = type metadata accessor for Date();
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
      if (v17(v14, 1, v15) == 1) {
        break;
      }
      uint64_t v18 = v30;
      outlined init with copy of Date?((uint64_t)v13 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v30);
      if (v17(v18, 1, v15) == 1) {
        goto LABEL_13;
      }
      uint64_t v19 = v12;
      uint64_t v20 = v13;
      uint64_t v21 = v34;
      uint64_t v22 = static Date.> infix(_:_:)();
      __int16 v23 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v23(v18, v15);
      v23(v21, v15);

      char v24 = v32;
      if (v22)
      {
        if (!v31) {
          goto LABEL_14;
        }
        char v25 = *(void **)v11;
        uint64_t v12 = *(void **)(v11 + 8);
        *(void *)uint64_t v11 = v12;
        *(void *)(v11 + 8) = v25;
        v11 -= 8;
        if (v24 != ++v33) {
          continue;
        }
      }
      a3 = v24 + 1;
      uint64_t v11 = v29 + 8;
      if (a3 == v27) {
        return;
      }
      goto LABEL_5;
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v82 = a3;
  v91[1] = *MEMORY[0x263EF8340];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  __n128 v84 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v83 = (char *)&v76 - v11;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  uint64_t v14 = v13;
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_75;
  }
  int64_t v15 = v82 - a2;
  if (v82 - a2 == 0x8000000000000000 && v13 == -1) {
LABEL_76:
  }
    __break(1u);
  uint64_t v16 = (uint64_t)(a2 - a1) / v13;
  unint64_t v90 = a4;
  v91[0] = a1;
  uint64_t v17 = v15 / v13;
  if (v16 >= v15 / v14)
  {
    if (v17 < 0) {
      goto LABEL_77;
    }
    uint64_t v19 = v17 * v14;
    if (a4 < a2 || a2 + v19 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v44 = a4 + v19;
    unint64_t v89 = a4 + v19;
    v91[0] = a2;
    if (v19 < 1 || a1 >= a2) {
      goto LABEL_73;
    }
    uint64_t v46 = -v14;
    Swift::Int v48 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    unint64_t v47 = v8 + 16;
    Swift::Int v78 = (void (**)(char *, uint64_t))(v47 - 8);
    unint64_t v79 = v48;
    unint64_t v80 = a1;
    unint64_t v81 = v47;
    unint64_t v77 = a4;
    while (1)
    {
      uint64_t v49 = v79;
      v79(v83, v44 + v46, v7);
      unint64_t v50 = a2 + v46;
      v49(v84, a2 + v46, v7);
      unint64_t v87 = UUID.uuid.getter();
      LOWORD(v88) = v51;
      BYTE2(v88) = v52;
      BYTE3(v88) = v53;
      BYTE4(v88) = v54;
      BYTE5(v88) = v55;
      BYTE6(v88) = v56;
      HIBYTE(v88) = v57;
      unint64_t v85 = UUID.uuid.getter();
      LOWORD(v86) = v58;
      BYTE2(v86) = v59;
      BYTE3(v86) = v60;
      BYTE4(v86) = v61;
      BYTE5(v86) = v62;
      BYTE6(v86) = v63;
      HIBYTE(v86) = v64;
      unint64_t v65 = bswap64(v87);
      unint64_t v66 = bswap64(v85);
      if (v65 != v66) {
        break;
      }
      unint64_t v65 = bswap64(v88);
      unint64_t v66 = bswap64(v86);
      unint64_t v67 = v82;
      if (v65 != v66) {
        goto LABEL_55;
      }
      int v68 = 0;
LABEL_58:
      unint64_t v69 = v67 + v46;
      uint64_t v70 = *v78;
      (*v78)(v84, v7);
      v70(v83, v7);
      if (v68 < 0)
      {
        if (v67 < a2 || v69 >= a2)
        {
          swift_arrayInitWithTakeFrontToBack();
          unint64_t v74 = v80;
          unint64_t v73 = v77;
        }
        else
        {
          BOOL v72 = v67 == a2;
          unint64_t v74 = v80;
          unint64_t v73 = v77;
          if (!v72) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        v91[0] += v46;
      }
      else
      {
        unint64_t v71 = v89;
        v89 += v46;
        if (v67 < v71 || v69 >= v71)
        {
          swift_arrayInitWithTakeFrontToBack();
          unint64_t v50 = a2;
          unint64_t v74 = v80;
          unint64_t v73 = v77;
        }
        else
        {
          BOOL v72 = v67 == v71;
          unint64_t v73 = v77;
          if (!v72) {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v50 = a2;
          unint64_t v74 = v80;
        }
      }
      unint64_t v44 = v89;
      if (v89 > v73)
      {
        a2 = v50;
        unint64_t v82 = v69;
        if (v50 > v74) {
          continue;
        }
      }
      goto LABEL_73;
    }
    unint64_t v67 = v82;
LABEL_55:
    if (v65 < v66) {
      int v68 = -1;
    }
    else {
      int v68 = 1;
    }
    goto LABEL_58;
  }
  if ((v16 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v81 = a4 + v18;
    unint64_t v89 = a4 + v18;
    if (v18 >= 1 && a2 < v82)
    {
      uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      uint64_t v22 = (void (**)(char *, uint64_t))(v8 + 8);
      do
      {
        v21(v83, a2, v7);
        v21(v84, a4, v7);
        unint64_t v87 = UUID.uuid.getter();
        LOWORD(v88) = v23;
        BYTE2(v88) = v24;
        BYTE3(v88) = v25;
        BYTE4(v88) = v26;
        BYTE5(v88) = v27;
        BYTE6(v88) = v28;
        HIBYTE(v88) = v29;
        unint64_t v85 = UUID.uuid.getter();
        LOWORD(v86) = v30;
        BYTE2(v86) = v31;
        BYTE3(v86) = v32;
        BYTE4(v86) = v33;
        BYTE5(v86) = v34;
        BYTE6(v86) = v35;
        HIBYTE(v86) = v36;
        unint64_t v37 = bswap64(v87);
        unint64_t v38 = bswap64(v85);
        if (v37 == v38 && (unint64_t v37 = bswap64(v88), v38 = bswap64(v86), v37 == v38))
        {
          int v39 = 0;
        }
        else if (v37 < v38)
        {
          int v39 = -1;
        }
        else
        {
          int v39 = 1;
        }
        char v40 = *v22;
        (*v22)(v84, v7);
        v40(v83, v7);
        unint64_t v41 = v91[0];
        if (v39 < 0)
        {
          unint64_t v43 = a2 + v14;
          if (v91[0] < a2 || v91[0] >= v43)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v91[0] == a2)
          {
            unint64_t v41 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v42 = v90 + v14;
          if (v91[0] < v90 || v91[0] >= v42)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v91[0] != v90)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v90 = v42;
          unint64_t v43 = a2;
        }
        v91[0] = v41 + v14;
        a4 = v90;
        if (v90 >= v81) {
          break;
        }
        a2 = v43;
      }
      while (v43 < v82);
    }
LABEL_73:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(v91, &v90, (uint64_t *)&v89);
    return 1;
  }
LABEL_77:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v70 = a4;
  uint64_t v47 = a2;
  Swift::Int v48 = a1;
  uint64_t v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v69 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v7 = *(void *)(v68 - 8);
  MEMORY[0x270FA5388](v68);
  unint64_t v67 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v66 = (char *)&v46 - v10;
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v11 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  char v64 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v13 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  char v62 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v61);
  char v60 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  unint64_t v81 = (char *)&v46 - v18;
  uint64_t v49 = 0;
  int64_t v19 = 0;
  uint64_t v72 = a3;
  uint64_t v20 = *(void *)(a3 + 56);
  uint64_t v50 = a3 + 56;
  uint64_t v21 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  uint64_t v59 = direct field offset for Canvas.paperView;
  int64_t v51 = (unint64_t)(v21 + 63) >> 6;
  __int16 v58 = v17 + 2;
  char v57 = (uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
  char v56 = (void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v76 = v17;
  char v55 = v17 + 1;
  char v54 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  char v53 = (void (**)(char *, uint64_t))(v7 + 8);
  char v52 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v24 = v61;
  char v25 = v64;
  while (1)
  {
    if (v23)
    {
      uint64_t v74 = (v23 - 1) & v23;
      int64_t v75 = v19;
      unint64_t v26 = __clz(__rbit64(v23)) | (v19 << 6);
      goto LABEL_5;
    }
    int64_t v40 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v40 >= v51) {
      goto LABEL_24;
    }
    unint64_t v41 = *(void *)(v50 + 8 * v40);
    int64_t v42 = v19 + 1;
    if (!v41)
    {
      int64_t v42 = v19 + 2;
      if (v19 + 2 >= v51) {
        goto LABEL_24;
      }
      unint64_t v41 = *(void *)(v50 + 8 * v42);
      if (!v41)
      {
        int64_t v42 = v19 + 3;
        if (v19 + 3 >= v51) {
          goto LABEL_24;
        }
        unint64_t v41 = *(void *)(v50 + 8 * v42);
        if (!v41) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v74 = (v41 - 1) & v41;
    int64_t v75 = v42;
    unint64_t v26 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_5:
    uint64_t v27 = *(void *)(v72 + 48);
    uint64_t v28 = v76[9];
    unint64_t v71 = v26;
    unint64_t v73 = (void (*)(char *, unint64_t, uint64_t))v76[2];
    v73(v81, v27 + v28 * v26, v24);
    uint64_t v29 = *(void *)(v70 + v59) + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v70 + v59)) + 0x380);
    swift_beginAccess();
    __int16 v30 = v62;
    uint64_t v31 = v63;
    uint64_t v32 = (*v57)(v62, v29, v63);
    MEMORY[0x270FA5388](v32);
    *(&v46 - 4) = type metadata accessor for Paper();
    *(&v46 - 3) = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    *(&v46 - 2) = (uint64_t)&protocol witness table for Paper;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*v56)(v30, v31);
    char v33 = v60;
    v73(v60, (unint64_t)v81, v24);
    WeakTagged_9.tag.getter();
    uint64_t v77 = v79;
    char v78 = v80;
    MEMORY[0x21054B9C0](v24);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    char v34 = v67;
    SharedTagged_9.init(_:id:)();
    char v35 = (void (*)(char *, uint64_t))v76[1];
    v35(v33, v24);
    char v36 = v66;
    uint64_t v37 = v68;
    (*v54)(v66, v34, v68);
    uint64_t v38 = v65;
    char v39 = CROrderedSet.contains(_:)();
    (*v53)(v36, v37);
    (*v52)(v25, v38);
    v35(v81, v24);
    unint64_t v23 = v74;
    int64_t v19 = v75;
    if (v39)
    {
      *(unint64_t *)((char *)v48 + ((v71 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v71;
      if (__OFADD__(v49++, 1))
      {
        __break(1u);
LABEL_24:
        uint64_t v45 = v72;
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(v48, v47, v49, v45);
        return;
      }
    }
  }
  uint64_t v43 = v19 + 4;
  if (v19 + 4 >= v51) {
    goto LABEL_24;
  }
  unint64_t v41 = *(void *)(v50 + 8 * v43);
  if (v41)
  {
    int64_t v42 = v19 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v42 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v42 >= v51) {
      goto LABEL_24;
    }
    unint64_t v41 = *(void *)(v50 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1, void *a2)
{
  v17[1] = *MEMORY[0x263EF8340];
  char v4 = *(unsigned char *)(a1 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1 << v4) + 63) >> 6;
  uint64_t isStackAllocationSafe = a2;
  uint64_t v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    uint64_t v9 = (char *)v17 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v9, 8 * v6);
    id v10 = v8;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v9, v6, a1, (uint64_t)v10);
    uint64_t v12 = v11;
    swift_release();

    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, 8 * v6);
    id v14 = v8;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v13, v6, a1, (uint64_t)v14);
    uint64_t v12 = v15;
    swift_release();

    MEMORY[0x210550270](v13, -1, -1);
  }
  return v12;
}

{
  uint64_t v2;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t isStackAllocationSafe;
  void *v8;
  char *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  void v15[2];

  v15[1] = *MEMORY[0x263EF8340];
  char v4 = *(unsigned char *)(a1 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1 << v4) + 63) >> 6;
  uint64_t isStackAllocationSafe = a2;
  uint64_t v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    uint64_t v9 = (char *)v15 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v9, 8 * v6);
    id v10 = v8;
    uint64_t v11 = specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v9, v6, a1, (uint64_t)v10);
    swift_release();

    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, 8 * v6);
    uint64_t v13 = v8;
    uint64_t v11 = specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v12, v6, a1, (uint64_t)v13);
    swift_release();

    MEMORY[0x210550270](v12, -1, -1);
  }
  return v11;
}

uint64_t specialized Canvas.hitChromeForCanvasElementView(_:location:isStylus:)(int a1, double a2, double a3)
{
  char v4 = v3;
  uint64_t v8 = type metadata accessor for PKLassoTool();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39[3] = (uint64_t)&type metadata for PencilAndPaperFeatureFlags;
  v39[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v39[0]) = 0;
  char v12 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  uint64_t result = 0;
  if (v12)
  {
    uint64_t v36 = v9;
    uint64_t v37 = v8;
    int v38 = a1;
    uint64_t v14 = AnyCanvas.overlays.getter();
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v16 = direct field offset for Canvas.paperView;
      uint64_t v17 = 16 * v15 + 16;
      while (v15 <= *(void *)(v14 + 16))
      {
        uint64_t v18 = *(void **)((char *)v4 + v16);
        id v19 = *(id *)(v14 + v17);
        objc_msgSend(v18, sel_convertPoint_toCoordinateSpace_, v19, a2, a3);
        id v20 = objc_msgSend(v19, sel_hitTest_withEvent_, 0);

        if (v20)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        v17 -= 16;
        if (!--v15) {
          goto LABEL_7;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_7:
      uint64_t v21 = swift_bridgeObjectRelease();
      uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v4) + 0x320))(v21);
      if (v22)
      {
        unint64_t v23 = v22;
        unsigned int v24 = objc_msgSend(v22, sel_allowsFingerDrawing);

        if (v24)
        {
          specialized Canvas.tool.getter(v39);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKTool);
          uint64_t v25 = v37;
          uint64_t result = swift_dynamicCast();
          if (!result) {
            return result;
          }
          (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v25);
        }
      }
      if (v38) {
        return 0;
      }
    }
    uint64_t v26 = direct field offset for Canvas.paperView;
    id v27 = *(id *)((char *)v4 + direct field offset for Canvas.paperView);
    unint64_t v28 = specialized ContainerCanvasElementView.subelementViews.getter(v27);

    if (v28 >> 62) {
      goto LABEL_29;
    }
    uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v29; uint64_t v29 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v30 = 4;
      while (1)
      {
        uint64_t v31 = (v28 & 0xC000000000000001) != 0
            ? (void *)MEMORY[0x21054E050](v30 - 4, v28)
            : *(id *)(v28 + 8 * v30);
        uint64_t v32 = v31;
        uint64_t v33 = v30 - 3;
        if (__OFADD__(v30 - 4, 1)) {
          break;
        }
        if (((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v31) + 0x218))() & 1) == 0)
        {
          objc_msgSend(v32, sel_convertPoint_fromCoordinateSpace_, *(void *)((char *)v4 + v26), a2, a3);
          id v34 = objc_msgSend(v32, sel_hitTest_withEvent_, 0);
          if (v34)
          {
            char v35 = v34;
            swift_bridgeObjectRelease_n();

            return 1;
          }
        }

        ++v30;
        if (v33 == v29) {
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_29:
      swift_bridgeObjectRetain();
    }
LABEL_30:
    swift_bridgeObjectRelease_n();
    uint64_t result = *(void *)(*(void *)((char *)v4 + v26)
                       + *(void *)((*MEMORY[0x263F8EED0] & **(void **)((char *)v4 + v26)) + 0x4D0));
    if (result)
    {
      uint64_t result = (uint64_t)objc_msgSend((id)result, sel_hitTest_withEvent_, 0, a2, a3);
      if (result)
      {

        return 1;
      }
    }
  }
  return result;
}

{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29[5];

  uint64_t v7 = type metadata accessor for PKLassoTool();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[3] = (uint64_t)&type metadata for PencilAndPaperFeatureFlags;
  v29[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v29[0]) = 0;
  uint64_t v11 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  LOBYTE(v12) = 0;
  if (v11)
  {
    uint64_t v26 = v8;
    id v27 = v7;
    unint64_t v28 = a1;
    uint64_t v13 = AnyCanvas.overlays.getter();
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      uint64_t v15 = 16 * v14 + 16;
      while (v14 <= *(void *)(v13 + 16))
      {
        uint64_t v16 = *(void **)((char *)v3 + direct field offset for Canvas.paperView);
        uint64_t v17 = *(id *)(v13 + v15);
        objc_msgSend(v16, sel_convertPoint_toCoordinateSpace_, v17, a2, a3);
        uint64_t v18 = objc_msgSend(v17, sel_hitTest_withEvent_, 0);

        if (v18)
        {
          swift_bridgeObjectRelease();
          LOBYTE(v12) = 1;
          return v12 & 1;
        }
        v15 -= 16;
        if (!--v14) {
          goto LABEL_7;
        }
      }
      __break(1u);
LABEL_15:
      if (v28) {
        goto LABEL_16;
      }
LABEL_11:
      LOBYTE(v12) = Canvas.canvasElementOrFormFieldExistsAtPoint(_:)((CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));
      return v12 & 1;
    }
LABEL_7:
    id v19 = swift_bridgeObjectRelease();
    id v20 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x320))(v19);
    if (!v20) {
      goto LABEL_15;
    }
    uint64_t v21 = v20;
    uint64_t v22 = objc_msgSend(v20, sel_allowsFingerDrawing);

    if (!v22) {
      goto LABEL_15;
    }
    Canvas.tool.getter(v29);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKTool);
    unint64_t v23 = v27;
    char v12 = swift_dynamicCast();
    unsigned int v24 = v28;
    if (v12)
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v23);
      if (v24)
      {
LABEL_16:
        LOBYTE(v12) = 0;
        return v12 & 1;
      }
      goto LABEL_11;
    }
  }
  return v12 & 1;
}

void specialized Canvas.paperView.setter(void *a1)
{
  uint64_t v2 = direct field offset for Canvas.paperView;
  double v3 = *(void **)(v1 + direct field offset for Canvas.paperView);
  *(void *)(v1 + direct field offset for Canvas.paperView) = a1;
  id v4 = a1;

  uint64_t v5 = *(void *)(v1 + direct field offset for Canvas.scribbleInteraction);
  if (!v5)
  {
    __break(1u);
    goto LABEL_7;
  }
  id v6 = *(id *)(v1 + v2);
  objc_msgSend(v6, sel_addInteraction_, v5);
  if (!*(void *)(v1 + direct field offset for Canvas.indirectScribbleInteraction))
  {
LABEL_7:
    __break(1u);
    return;
  }
  objc_msgSend(v6, sel_addInteraction_);
}

void specialized PaperTextAttachmentView.init(coder:)()
{
  *(void *)&v0[direct field offset for PaperTextAttachmentView.paperViewDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[direct field offset for PaperTextAttachmentView.syncManager] = 0;
  *(void *)&v0[direct field offset for PaperTextAttachmentView.syncCancellable] = 0;
  *(void *)&v0[direct field offset for PaperTextAttachmentView.saveCancellable] = 0;
  *(void *)&v0[direct field offset for PaperTextAttachmentView.textAttachment] = 0;
  *(void *)&v0[direct field offset for PaperTextAttachmentView.eatTapGestureRecognizer] = 0;
  *(void *)&v0[direct field offset for PaperTextAttachmentView.tapBelowGestureRecognizer] = 0;
  *(void *)&v0[direct field offset for PaperTextAttachmentView.topResizeView] = 0;
  *(void *)&v0[direct field offset for PaperTextAttachmentView.bottomResizeView] = 0;
  *(void *)&v0[direct field offset for PaperTextAttachmentView.resizeDragGestureRecognizer] = 0;
  uint64_t v1 = &v0[direct field offset for PaperTextAttachmentView.reportedBounds];
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  v1[32] = 1;
  v0[direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging] = 0;
  *(void *)&v0[direct field offset for PaperTextAttachmentView.linedPaperView] = 0;
  *(void *)&v0[direct field offset for PaperTextAttachmentView.previousLinks] = MEMORY[0x263F8EE78];
  uint64_t v2 = &v0[direct field offset for PaperTextAttachmentView.paperBoundsHint];
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  unsigned char v2[32] = 1;
  v0[direct field offset for PaperTextAttachmentView.shouldBecomeFirstResponder] = 0;
  *(void *)&v0[direct field offset for PaperTextAttachmentView.resizeInfo] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[direct field offset for PaperTextAttachmentView.linedPaper] = 0;
  v0[direct field offset for PaperTextAttachmentView.isCurrentToolGenerationTool] = 0;
  double v3 = &v0[direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundContextToInitialize];
  *(void *)double v3 = 0;
  *((void *)v3 + 1) = 0;
  v3[16] = -1;
  id v4 = &v0[direct field offset for PaperTextAttachmentView.magicGenerativePlaygroundBoundsToInitialize];
  *(_OWORD *)id v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  uint64_t v5 = &v0[direct field offset for PaperTextAttachmentView.cachedDrawingTransform];
  void *v5 = 0x3FF0000000000000;
  v5[1] = 0;
  uint64_t v5[2] = 0;
  v5[3] = 0x3FF0000000000000;
  v5[4] = 0;
  v5[5] = 0;
  *(void *)&v0[direct field offset for PaperTextAttachmentView.cachedDrawingTransformBoundsWidth] = 0xBFF0000000000000;
  v0[direct field offset for PaperTextAttachmentView.cachedDrawingTransformShouldCrop] = 0;
  swift_unknownObjectWeakInit();
  id v6 = &v0[direct field offset for PaperTextAttachmentView.calculateDocument];
  *id v6 = 0;
  v6[1] = 0;
  v0[direct field offset for PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized PaperTextAttachmentView.init(attachment:drawing:inserted:)(void *a1, int a2)
{
  int v155 = a2;
  uint64_t v170 = *MEMORY[0x263EF8340];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL??);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v144 = (uint64_t)&v136 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v145 = (char *)&v136 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v147 = (uint64_t)&v136 - v9;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v137 = (char *)&v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v139 = (char *)&v136 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v146 = (char *)&v136 - v16;
  MEMORY[0x270FA5388](v17);
  id v19 = (char *)&v136 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v140 = (char *)&v136 - v21;
  uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v157 = *(void *)(v158 - 8);
  MEMORY[0x270FA5388](v158);
  uint64_t v154 = (uint64_t)&v136 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v153 = (uint64_t)&v136 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v149 = (uint64_t)&v136 - v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v148 = (uint64_t)&v136 - v28;
  MEMORY[0x270FA5388](v29);
  unint64_t v161 = (char *)&v136 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v142 = (char *)&v136 - v32;
  MEMORY[0x270FA5388](v33);
  uint64_t v138 = (uint64_t)&v136 - v34;
  MEMORY[0x270FA5388](v35);
  uint64_t v143 = (char *)&v136 - v36;
  MEMORY[0x270FA5388](v37);
  char v39 = (char *)&v136 - v38;
  MEMORY[0x270FA5388](v40);
  uint64_t v141 = (uint64_t)&v136 - v41;
  MEMORY[0x270FA5388](v42);
  unint64_t v44 = (char *)&v136 - v43;
  MEMORY[0x270FA5388](v45);
  uint64_t v47 = (char *)&v136 - v46;
  if (!a1 || (v169 = &unk_26C1F1D20, (uint64_t v48 = swift_dynamicCastObjCProtocolConditional()) == 0))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v49 = (void *)v48;
  id v152 = v2;
  uint64_t v156 = a1;
  id v160 = a1;
  id v50 = objc_msgSend(v49, sel__paperIdentifier);
  uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v150 = v51;

  char v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v163 = v47;
  v52(v47, 1, 1, v10);
  uint64_t v168 = 0;
  memset(v167, 0, sizeof(v167));
  id v53 = objc_msgSend(v49, sel__encryptionDelegateCRContextURL);
  uint64_t v159 = v11;
  uint64_t v162 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v52;
  if (v53)
  {
    char v54 = v53;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    char v55 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v55(v44, v19, v10);
    v52(v44, 0, 1, v10);
    uint64_t v56 = v11;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v44, 1, v10) != 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v167, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
      uint64_t v57 = (uint64_t)v163;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v163, &demangling cache variable for type metadata for URL?);
      __int16 v58 = v140;
      v55(v140, v44, v10);
      v55((char *)v57, v58, v10);
      uint64_t v59 = v57;
      v162(v57, 0, 1, v10);
      uint64_t v164 = (uint64_t)v49;
      id v60 = v160;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKPaperTextAttachment);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EncryptionDelegate);
      if ((swift_dynamicCast() & 1) == 0)
      {
        uint64_t v166 = 0;
        memset(v165, 0, sizeof(v165));
      }
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v165, (uint64_t)v167, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
      uint64_t v61 = (uint64_t)v161;
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v56 = v11;
    v52(v44, 1, 1, v10);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v44, &demangling cache variable for type metadata for URL?);
  if (objc_msgSend(v49, sel_respondsToSelector_, sel__nonEncryptedContentCRContextURL))
  {
    id v62 = objc_msgSend(v49, sel__nonEncryptedContentCRContextURL);
    if (v62)
    {
      uint64_t v63 = v62;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v64 = 0;
    }
    else
    {
      uint64_t v64 = 1;
    }
    uint64_t v140 = (char *)v10;
    v162((uint64_t)v39, v64, 1, v10);
    uint64_t v66 = (uint64_t)v39;
    uint64_t v67 = v141;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v66, v141, &demangling cache variable for type metadata for URL?);
    uint64_t v68 = v67;
    uint64_t v69 = v147;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v68, v147, &demangling cache variable for type metadata for URL?);
    uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56);
    v70(v69, 0, 1, v158);
    outlined destroy of StocksKitCurrencyCache.Provider?(v69, &demangling cache variable for type metadata for URL??);
    unsigned __int8 v71 = objc_msgSend(v49, sel_respondsToSelector_, sel__nonEncryptedContentCRContextURL);
    uint64_t v72 = (uint64_t)v142;
    if (v71)
    {
      id v73 = objc_msgSend(v49, sel__nonEncryptedContentCRContextURL);
      uint64_t v61 = (uint64_t)v161;
      if (v73)
      {
        uint64_t v74 = v73;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v75 = 0;
      }
      else
      {
        uint64_t v75 = 1;
      }
      uint64_t v59 = (uint64_t)v163;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v163, &demangling cache variable for type metadata for URL?);
      uint64_t v80 = v75;
      uint64_t v77 = v162;
      v162(v72, v80, 1, (uint64_t)v140);
      uint64_t v79 = v144;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v72, v144, &demangling cache variable for type metadata for URL?);
      uint64_t v76 = 0;
      uint64_t v78 = (uint64_t)v145;
    }
    else
    {
      uint64_t v59 = (uint64_t)v163;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v163, &demangling cache variable for type metadata for URL?);
      uint64_t v76 = 1;
      uint64_t v61 = (uint64_t)v161;
      uint64_t v77 = v162;
      uint64_t v78 = (uint64_t)v145;
      uint64_t v79 = v144;
    }
    uint64_t v81 = v158;
    v70(v79, v76, 1, v158);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v79, v78, &demangling cache variable for type metadata for URL??);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v157 + 48))(v78, 1, v81) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v78, &demangling cache variable for type metadata for URL??);
      uint64_t v82 = 1;
      uint64_t v56 = v159;
      uint64_t v83 = (uint64_t)v143;
      uint64_t v10 = (uint64_t)v140;
    }
    else
    {
      uint64_t v84 = v138;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v78, v138, &demangling cache variable for type metadata for URL?);
      uint64_t v56 = v159;
      uint64_t v10 = (uint64_t)v140;
      if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v159 + 48))(v84, 1, v140) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v84, &demangling cache variable for type metadata for URL?);
        uint64_t v82 = 1;
        uint64_t v83 = (uint64_t)v143;
      }
      else
      {
        uint64_t v83 = (uint64_t)v143;
        (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v143, v84, v10);
        uint64_t v82 = 0;
      }
    }
    v77(v83, v82, 1, v10);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v83, v59, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    uint64_t v65 = v147;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56))(v147, 1, 1, v158);
    outlined destroy of StocksKitCurrencyCache.Provider?(v65, &demangling cache variable for type metadata for URL??);
    uint64_t v61 = (uint64_t)v161;
    uint64_t v59 = (uint64_t)v163;
  }
LABEL_26:
  uint64_t v85 = v148;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v59, v148, &demangling cache variable for type metadata for URL?);
  unint64_t v86 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
  uint64_t v87 = 1;
  int v88 = v86(v85, 1, v10);
  outlined destroy of StocksKitCurrencyCache.Provider?(v85, &demangling cache variable for type metadata for URL?);
  if (v88 != 1)
  {
    id v89 = objc_msgSend(v49, sel__paperBundleURL);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v87 = 0;
  }
  v162(v61, v87, 1, v10);
  uint64_t v90 = v149;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v61, v149, &demangling cache variable for type metadata for URL?);
  if (v86(v90, 1, v10) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v90, &demangling cache variable for type metadata for URL?);
    char v91 = 0;
  }
  else
  {
    uint64_t v92 = v159;
    char v93 = v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v159 + 32))(v146, v90, v10);
    char v94 = self;
    id v95 = objc_msgSend(v94, sel_defaultManager);
    uint64_t v96 = URL.path.getter();
    char v97 = (void *)MEMORY[0x21054D080](v96);
    swift_bridgeObjectRelease();
    unsigned __int8 v98 = objc_msgSend(v95, sel_isWritableFileAtPath_, v97);

    if (v98)
    {
      (*(void (**)(char *, uint64_t))(v92 + 8))(v93, v10);
      char v91 = 3;
    }
    else
    {
      unint64_t v99 = v139;
      URL.deletingLastPathComponent()();
      id v100 = objc_msgSend(v94, sel_defaultManager);
      uint64_t v101 = URL.absoluteString.getter();
      uint64_t v102 = (void *)MEMORY[0x21054D080](v101);
      swift_bridgeObjectRelease();
      unsigned __int8 v103 = objc_msgSend(v100, sel_fileExistsAtPath_, v102);

      if ((v103 & 1) == 0)
      {
        id v104 = objc_msgSend(v94, sel_defaultManager);
        URL._bridgeToObjectiveC()(v105);
        uint64_t v107 = v106;
        *(void *)&v165[0] = 0;
        unsigned int v108 = objc_msgSend(v104, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v106, 1, 0, v165);

        if (v108)
        {
          id v109 = *(id *)&v165[0];
        }
        else
        {
          id v110 = *(id *)&v165[0];
          id v111 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))_convertNSErrorToError(_:)();

          uint64_t v162 = v111;
          swift_willThrow();
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v112 = type metadata accessor for Logger();
          __swift_project_value_buffer(v112, (uint64_t)logger);
          uint64_t v113 = v159;
          uint64_t v114 = v137;
          (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v137, v99, v10);
          uint64_t v115 = Logger.logObject.getter();
          uint64_t v116 = v113;
          os_log_type_t v117 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v115, v117))
          {
            uint64_t v118 = (uint8_t *)swift_slowAlloc();
            uint64_t v119 = swift_slowAlloc();
            *(void *)&v165[0] = v119;
            *(_DWORD *)uint64_t v118 = 136315138;
            uint64_t v158 = (uint64_t)(v118 + 4);
            _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
            uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v121, (uint64_t *)v165);
            unint64_t v99 = v139;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v159 + 8))(v137, v10);
            _os_log_impl(&dword_20C2D7000, v115, v117, "Failed to create PaperKit parent directory at: %s", v118, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x210550270](v119, -1, -1);
            uint64_t v122 = v118;
            char v93 = v146;
            MEMORY[0x210550270](v122, -1, -1);
          }
          else
          {

            (*(void (**)(char *, uint64_t))(v116 + 8))(v114, v10);
          }
        }
      }
      id v123 = objc_msgSend(v94, sel_defaultManager);
      uint64_t v124 = URL.path.getter();
      unint64_t v125 = (void *)MEMORY[0x21054D080](v124);
      swift_bridgeObjectRelease();
      unsigned int v126 = objc_msgSend(v123, sel_isWritableFileAtPath_, v125);

      uint64_t v127 = *(void (**)(char *, uint64_t))(v159 + 8);
      v127(v99, v10);
      v127(v93, v10);
      if (v126) {
        char v91 = 3;
      }
      else {
        char v91 = 0;
      }
    }
    uint64_t v61 = (uint64_t)v161;
  }
  uint64_t v128 = v152;
  uint64_t v129 = v151;
  uint64_t ObjectType = swift_getObjectType();

  uint64_t v131 = v153;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v61, v153, &demangling cache variable for type metadata for URL?);
  uint64_t v132 = (uint64_t)v163;
  uint64_t v133 = v154;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v163, v154, &demangling cache variable for type metadata for URL?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v167, (uint64_t)v165, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  LOBYTE(v164) = v91;
  uint64_t v134 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, _OWORD *, uint64_t *, void))(ObjectType + 4552))(v129, v150, v131, v156, v133, v165, &v164, v155 & 1);

  outlined destroy of StocksKitCurrencyCache.Provider?(v61, &demangling cache variable for type metadata for URL?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v167, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v132, &demangling cache variable for type metadata for URL?);
  swift_deallocPartialClassInstance();
  return v134;
}

void specialized PaperTextAttachmentView.tapBelowGesture(_:)()
{
  uint64_t v1 = v0;
  if (objc_msgSend(v0, sel_isFirstResponder))
  {
    id v2 = objc_msgSend(v0, sel_resignFirstResponder);
    double v3 = (void *)(*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *(void *)v0) + 0x1190))(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      if (objc_msgSend(v3, sel_isFirstResponder)) {
        objc_msgSend(v4, sel_resignFirstResponder);
      }
    }
  }
  uint64_t v5 = direct field offset for Canvas.paperView;
  uint64_t v6 = MEMORY[0x210550400](*(void *)&v1[direct field offset for Canvas.paperView]+ OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    AnyCanvas.selectedCanvasElementIds.getter();
    uint64_t v9 = *(void *)(v8 + 16);
    swift_bridgeObjectRelease();
    if (v9)
    {
      uint64_t v10 = MEMORY[0x210550400](*(void *)&v1[v5] + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        AnyCanvas.selectedCanvasElementIds.setter(MEMORY[0x263F8EE78]);
      }
    }
  }
  id v12 = objc_msgSend(v1, sel_window);
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = objc_msgSend(self, sel_activeToolPickerForWindow_, v12);

    objc_msgSend(v14, sel__tellDelegateToHideToolPicker);
  }
  else
  {
    __break(1u);
  }
}

double specialized PaperTextAttachmentView.resizeViewDrawingBounds(_:)()
{
  uint64_t v1 = *(double **)(v0 + direct field offset for PaperTextAttachmentView.resizeInfo);
  if (!v1) {
    return PaperTextAttachmentView.safePaperModelBounds.getter();
  }
  CGFloat v2 = v1[8];
  CGFloat v3 = v1[9];
  CGFloat v4 = v1[10];
  CGFloat v5 = v1[11];
  swift_retain();
  v8.origin.double x = v2;
  v8.origin.double y = v3;
  v8.size.CGFloat width = v4;
  v8.size.CGFloat height = v5;
  if (CGRectIsNull(v8)) {
    double v6 = *MEMORY[0x263F001A0];
  }
  else {
    double v6 = v1[4];
  }
  swift_release();
  return v6;
}

void specialized PaperTextAttachmentView.resizeView(_:setDrawingHeight:originalHeight:growFromTop:)(char a1, double a2, double a3)
{
  CGFloat v4 = v3;
  uint64_t v8 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v3) + 0x1190))();
  if (v8)
  {
    id v9 = (id)v8;
  }
  else
  {
    id v9 = objc_msgSend(v3, sel_superview);
    if (!v9)
    {
      double v11 = *MEMORY[0x263F14CE0];
      goto LABEL_5;
    }
  }
  objc_msgSend(v9, sel_bounds);
  double v11 = v10;

LABEL_5:
  PaperTextAttachmentView.drawingTransform(forViewWidth:)(&v38, v11);
  uint64_t v12 = *(void *)&v4[direct field offset for PaperTextAttachmentView.resizeInfo];
  if (v12)
  {
    double v13 = sqrt(*(double *)&v38 * *(double *)&v38 + *((double *)&v38 + 1) * *((double *)&v38 + 1));
    if (v13 > 0.0)
    {
      swift_retain();
      objc_msgSend(v4, sel_frame);
      uint64_t v36 = v15;
      uint64_t v37 = v14;
      uint64_t v17 = v16;
      uint64_t v18 = *(void *)(v12 + 32);
      uint64_t v19 = *(void *)(v12 + 40);
      uint64_t v20 = *(void *)(v12 + 48);
      double v21 = *(double *)(v12 + 56);
      BOOL IsNull = CGRectIsNull(*(CGRect *)(v12 + 64));
      double v23 = 0.0;
      if (!IsNull)
      {
        double MaxY = CGRectGetMaxY(*(CGRect *)(v12 + 64));
        if (one-time initialization token for resizeHandleSize != -1)
        {
          double v35 = MaxY;
          swift_once();
          double MaxY = v35;
        }
        double v23 = 64.0 / v13 + MaxY + *(double *)&static UIConstants.resizeHandleSize * 0.5 / v13;
      }
      if (a1)
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)logger);
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v28 = 0;
          _os_log_impl(&dword_20C2D7000, v26, v27, "Resize from top not supported yet", v28, 2u);
          MEMORY[0x210550270](v28, -1, -1);
        }
      }
      else
      {
        double v29 = a2 / v13;
        if (a2 / v13 < v23 && a2 < a3)
        {
          double v29 = a3 / v13;
          if (v23 < a3 / v13) {
            double v29 = v23;
          }
          a2 = v13 * v29;
        }
        if (v29 != v21)
        {
          *(void *)(v12 + 32) = v18;
          *(void *)(v12 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v19;
          *(void *)(v12 + 48) = v20;
          *(double *)(v12 + 56) = v29;
        }
      }
      if (one-time initialization token for resizeHandleSize != -1) {
        swift_once();
      }
      if (a2 > *(double *)&static UIConstants.resizeHandleSize) {
        double v31 = a2;
      }
      else {
        double v31 = *(double *)&static UIConstants.resizeHandleSize;
      }
      uint64_t v33 = v36;
      uint64_t v32 = v37;
      uint64_t v34 = v17;
      PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(*(__C::CGRect *)(&v31 - 3), 1, 1, 1);
      swift_release();
    }
  }
}

void specialized PaperTextAttachmentView.calculateDocument.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  double v6 = (void *)(v3 + direct field offset for PaperTextAttachmentView.calculateDocument);
  swift_beginAccess();
  *double v6 = a1;
  v6[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (one-time initialization token for mathLogger != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)mathLogger);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    double v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v10 = 0;
    _os_log_impl(&dword_20C2D7000, v8, v9, "setupCanvasMathIfNecessary", v10, 2u);
    MEMORY[0x210550270](v10, -1, -1);
  }

  uint64_t v11 = direct field offset for Canvas.paperView;
  uint64_t v12 = *(void **)(v3 + direct field offset for Canvas.paperView);
  double v13 = (void *)MEMORY[0x263F8EED0];
  uint64_t v14 = *(void **)((char *)v12 + *(void *)((*MEMORY[0x263F8EED0] & *v12) + 0x4C0));
  if (v14)
  {
    id v15 = v14;
    CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();

    uint64_t v12 = *(void **)(v3 + v11);
  }
  uint64_t v16 = (void *)MEMORY[0x210550400]((char *)v12 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v16)
  {
    uint64_t v17 = v16;
    (*(void (**)(void))((*v13 & *v16) + 0x770))();
  }
}

unint64_t lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Ref<PKDrawingStruct>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Ref<PKDrawingStruct>? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags;
  if (!lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags;
  if (!lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags;
  if (!lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags;
  if (!lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags;
  if (!lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags;
  if (!lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags;
  if (!lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags);
  }
  return result;
}

uint64_t partial apply for closure #1 in PaperTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(uint64_t a1)
{
  return closure #1 in PaperTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_20C3766AC()
{
  return objectdestroyTm_0(MEMORY[0x263F8EEA0], MEMORY[0x263F8EEA0], 41);
}

uint64_t sub_20C3766DC()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for specialized closure #1 in Canvas.setupBandSelection()(void *a1)
{
  specialized closure #1 in Canvas.setupBandSelection()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t partial apply for specialized closure #2 in Canvas.setupBandSelection()(uint64_t a1, double a2, double a3)
{
  return specialized closure #2 in Canvas.setupBandSelection()(a2, a3, a1, v3) & 1;
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void outlined consume of MagicGenerativePlaygroundContext?(void *a1, id a2, char a3)
{
  if (a3 != -1) {
    outlined consume of MagicGenerativePlaygroundContext(a1, a2, a3);
  }
}

void outlined consume of MagicGenerativePlaygroundContext(void *a1, id a2, char a3)
{
  if (a3 == 1)
  {
  }
  else if (!a3)
  {
    swift_bridgeObjectRelease();
  }
}

id outlined copy of MagicGenerativePlaygroundContext(id result, id a2, char a3)
{
  if (a3 == 1) {
    return result;
  }
  if (!a3) {
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_20C376828()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #1 in UITextView._ppk_registerUndo(_:undoManager:paperIdentifier:)(void *a1)
{
  closure #1 in UITextView._ppk_registerUndo(_:undoManager:paperIdentifier:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void *))(v1 + 32));
}

uint64_t partial apply for closure #1 in AnyCanvas.selection.modify(void *a1)
{
  return closure #1 in AnyCanvas.selection.modify(a1, *(void *)(v1 + 16));
}

uint64_t sub_20C376884()
{
  return 24;
}

__n128 sub_20C376890(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C3768A4()
{
  return objectdestroy_280Tm(42);
}

uint64_t partial apply for closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  char v8 = *(unsigned char *)(v1 + 41);
  os_log_type_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *os_log_type_t v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)()
{
  return closure #1 in closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)();
}

uint64_t sub_20C376998()
{
  return objectdestroy_280Tm(42);
}

uint64_t sub_20C3769A8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in PaperTextAttachmentView.characterIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  closure #1 in PaperTextAttachmentView.characterIndex.getter(a1, a2, a3, a4, *(void **)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_20C3769E8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t sub_20C376A00()
{
  return objectdestroy_280Tm(40);
}

uint64_t partial apply for closure #1 in PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  char v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *char v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:)(a1, v4, v5, v6);
}

uint64_t sub_20C376ABC()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

id partial apply for closure #1 in PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setFrame_, *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t sub_20C376B0C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C376B1C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C376B2C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in PaperTextAttachmentView.contentBounds(includeDrawing:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  char v7 = *(unsigned char *)(v1 + v5 + *(void *)(v4 + 64));
  uint64_t v8 = swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *(void *)uint64_t v8 = v2;
  *(unsigned char *)(v8 + 32) = v7;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = v6;
  *(void *)(v8 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return MEMORY[0x270FA2498](closure #1 in PaperTextAttachmentView.contentBounds(includeDrawing:), 0, 0);
}

uint64_t sub_20C376D1C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

id partial apply for closure #1 in PaperTextAttachmentView.cleanupViewProviders()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id result = objc_msgSend(v1, sel_respondsToSelector_, sel__cleanupStaleCachedViewProviders);
  if (result)
  {
    return objc_msgSend(v1, sel__cleanupStaleCachedViewProviders);
  }
  return result;
}

uint64_t sub_20C376DB4()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

unint64_t lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop()
{
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop;
  if (!lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop);
  }
  return result;
}

uint64_t sub_20C376E2C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

void partial apply for closure #1 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  closure #1 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(a1, v4);
}

uint64_t sub_20C376F2C()
{
  return objectdestroyTm_0(MEMORY[0x263F8EED8], MEMORY[0x263F8EED8], 32);
}

uint64_t partial apply for closure #2 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(unsigned char *a1)
{
  return closure #2 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_20C376F64()
{
  return objectdestroyTm_0(MEMORY[0x263F8EED8], MEMORY[0x263F8EEE8], 32);
}

uint64_t objectdestroyTm_0(void (*a1)(void), void (*a2)(void), uint64_t a3)
{
  a1(*(void *)(v3 + 16));
  a2(*(void *)(v3 + 24));
  return MEMORY[0x270FA0238](v3, a3, 7);
}

uint64_t partial apply for closure #3 in PaperTextAttachmentView.createPaperView(paperBundleURL:)()
{
  return closure #3 in PaperTextAttachmentView.createPaperView(paperBundleURL:)();
}

void *partial apply for closure #1 in closure #3 in PaperTextAttachmentView.createPaperView(paperBundleURL:)()
{
  return closure #1 in closure #3 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(v0);
}

uint64_t sub_20C377008()
{
  return objectdestroy_280Tm(42);
}

uint64_t partial apply for closure #1 in PaperTextAttachmentView.handleMerge(newModel:firstMerge:)(uint64_t a1)
{
  return closure #1 in PaperTextAttachmentView.handleMerge(newModel:firstMerge:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_20C37702C()
{
  return objectdestroy_280Tm(42);
}

uint64_t objectdestroy_280Tm(uint64_t a1)
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v1, a1, 7);
}

uint64_t sub_20C377088()
{
  return 24;
}

__n128 sub_20C377094(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(uint64_t a1)
{
  return specialized closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(a1, *(void *)(v1 + 16));
}

BOOL partial apply for specialized closure #1 in closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(uint64_t a1)
{
  return specialized closure #1 in closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined init with take of PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKStrokeStruct(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKStrokeStruct(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(uint64_t a1)
{
  return specialized closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(a1, *(void *)(v1 + 16)) & 1;
}

void partial apply for specialized closure #1 in Canvas.startCheckingForOldEraserStrokes()(uint64_t a1)
{
  specialized closure #1 in Canvas.startCheckingForOldEraserStrokes()(a1, v1);
}

uint64_t sub_20C3771D4()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return MEMORY[0x270FA0238](v0, v10, v11);
}

uint64_t partial apply for specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for Date() - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + (v9 & ~v8);
  id v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *id v15 = v3;
  v15[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)(a1, v10, v11, v12, v13, v14);
}

id partial apply for closure #1 in PaperTextAttachmentView.layoutSubviews()()
{
  return objc_msgSend(*(id *)(*(void *)(v0 + 16) + direct field offset for Canvas.paperView), sel_setFrame_, **(double **)(v0 + 24), *(double *)(*(void *)(v0 + 24) + 8), *(double *)(*(void *)(v0 + 24) + 16), *(double *)(*(void *)(v0 + 24) + 24));
}

uint64_t sub_20C3774C4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C3774D4()
{
  return MEMORY[0x270FA0238](v0, 33, 7);
}

id partial apply for closure #1 in PaperTextAttachmentView.didMoveToSuperview()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 32);
  id result = objc_msgSend(v1, sel_becomeFirstResponder);
  if (v2)
  {
    return objc_msgSend(v2, sel_setVisible_forFirstResponder_, v3, v1);
  }
  return result;
}

id outlined copy of MagicGenerativePlaygroundContext?(id result, id a2, char a3)
{
  if (a3 != -1) {
    return outlined copy of MagicGenerativePlaygroundContext(result, a2, a3);
  }
  return result;
}

uint64_t sub_20C37759C()
{
  swift_unknownObjectRelease();

  outlined consume of MagicGenerativePlaygroundContext(*(void **)(v0 + 80), *(id *)(v0 + 88), *(unsigned char *)(v0 + 96));
  return MEMORY[0x270FA0238](v0, 97, 7);
}

uint64_t partial apply for closure #1 in $defer #1 () in PaperTextAttachmentView.didMoveToSuperview()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  double v7 = *(double *)(v1 + 40);
  double v8 = *(double *)(v1 + 48);
  double v9 = *(double *)(v1 + 56);
  double v10 = *(double *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  uint64_t v12 = *(void *)(v1 + 80);
  uint64_t v13 = *(void *)(v1 + 88);
  char v14 = *(unsigned char *)(v1 + 96);
  id v15 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v15;
  *id v15 = v2;
  v15[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in $defer #1 () in PaperTextAttachmentView.didMoveToSuperview()(v7, v8, v9, v10, a1, v4, v5, v6, v11, v12, v13, v14);
}

uint64_t outlined destroy of Paper(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t objectdestroy_270Tm()
{
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t PDFAnnotationElement.stringValue.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for PDFAnnotationElement.stringValue : PDFAnnotationElement()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t PDFAnnotationElement.stringValue.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PDFAnnotationElement.stringValue.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$stringValue.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PDFAnnotationElement.$stringValue : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  double v9 = (char *)&v12 - v8;
  double v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PDFAnnotationElement.$stringValue.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*PDFAnnotationElement.$stringValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t PDFAnnotationElement.contents.getter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for PDFAnnotationElement()
{
  uint64_t result = type metadata singleton initialization cache for PDFAnnotationElement;
  if (!type metadata singleton initialization cache for PDFAnnotationElement) {
    return swift_getSingletonMetadata();
  }
  return result;
}

double key path getter for PDFAnnotationElement.contents : PDFAnnotationElement@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for PDFAnnotationElement.contents : PDFAnnotationElement()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t PDFAnnotationElement.contents.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PDFAnnotationElement.contents.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$contents.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PDFAnnotationElement.$contents : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  double v9 = (char *)&v12 - v8;
  double v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PDFAnnotationElement.$contents.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PDFAnnotationElement.$contents.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PDFAnnotationElement() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PDFAnnotationElement.color.getter()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t key path getter for PDFAnnotationElement.color : PDFAnnotationElement@<X0>(void *a1@<X8>)
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PDFAnnotationElement.color : PDFAnnotationElement(void **a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for PDFAnnotationElement();
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PDFAnnotationElement.color.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PDFAnnotationElement.color.modify(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$color.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PDFAnnotationElement.$color : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  double v9 = (char *)&v12 - v8;
  double v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PDFAnnotationElement.$color.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PDFAnnotationElement.$color.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PDFAnnotationElement() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PDFAnnotationElement.AnnotationShape.quadPoints.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PDFAnnotationElement.AnnotationShape.quadPoints.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*PDFAnnotationElement.AnnotationShape.quadPoints.modify())()
{
  return UnknownCanvasElementView.flags.modify;
}

double PDFAnnotationElement.AnnotationShape.rect.getter()
{
  return *(double *)(v0 + 8);
}

void PDFAnnotationElement.AnnotationShape.rect.setter(double a1, double a2, double a3, double a4)
{
  v4[1] = a1;
  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
}

uint64_t (*PDFAnnotationElement.AnnotationShape.rect.modify())()
{
  return UnknownCanvasElementView.flags.modify;
}

PaperKit::PDFAnnotationElement::AnnotationShape::CodingKeys_optional __swiftcall PDFAnnotationElement.AnnotationShape.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return (PaperKit::PDFAnnotationElement::AnnotationShape::CodingKeys_optional)rawValue;
}

PaperKit::PDFAnnotationElement::AnnotationShape::CodingKeys_optional __swiftcall PDFAnnotationElement.AnnotationShape.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char v2 = v1;
  BOOL v3 = stringValue._countAndFlagsBits == 0x6E696F5064617571 && stringValue._object == (void *)0xEA00000000007374;
  if (v3
    || (object = stringValue._object,
        uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 1952671090 && object == (void *)0xE400000000000000)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 1;
    }
    else {
      char v7 = 2;
    }
  }
  *char v2 = v7;
  return result;
}

PaperKit::PDFAnnotationElement::AnnotationShape::CodingKeys_optional __swiftcall PDFAnnotationElement.AnnotationShape.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  if (intValue)
  {
    if (intValue == 1) {
      *uint64_t v1 = 1;
    }
    else {
      *uint64_t v1 = 2;
    }
  }
  else
  {
    *uint64_t v1 = 0;
  }
  return (PaperKit::PDFAnnotationElement::AnnotationShape::CodingKeys_optional)intValue;
}

void *static PDFAnnotationElement.AnnotationShape.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static PDFAnnotationElement.AnnotationShape.CodingKeys.allCases.getter;
}

uint64_t PDFAnnotationElement.AnnotationShape.CodingKeys.intValue.getter()
{
  return *v0;
}

uint64_t PDFAnnotationElement.AnnotationShape.CodingKeys.rawValue.getter()
{
  return *v0;
}

uint64_t PDFAnnotationElement.AnnotationShape.CodingKeys.stringValue.getter()
{
  if (*v0) {
    return 1952671090;
  }
  else {
    return 0x6E696F5064617571;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PDFAnnotationElement.AnnotationShape.CodingKeys()
{
  if (*v0) {
    return 1952671090;
  }
  else {
    return 0x6E696F5064617571;
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance PDFAnnotationElement.AnnotationShape.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance PDFAnnotationElement.AnnotationShape.CodingKeys(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys();
  unint64_t v5 = lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys();
  return MEMORY[0x270F180C8](a1, a2, v4, v5);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PDFAnnotationElement.AnnotationShape.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PDFAnnotationElement.AnnotationShape.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

BOOL PDFAnnotationElement.AnnotationShape.isDefaultState.getter()
{
  if (*(void *)v0) {
    return 0;
  }
  v2.origin.double x = 0.0;
  v2.origin.double y = 0.0;
  v2.size.CGFloat width = 0.0;
  v2.size.CGFloat height = 0.0;
  return CGRectEqualToRect(*(CGRect *)(v0 + 8), v2);
}

BOOL static PDFAnnotationElement.AnnotationShape.== infix(_:_:)(uint64_t *a1, uint64_t *a2, int32x2_t a3)
{
  uint64_t v5 = *a1;
  CGFloat v6 = *((double *)a1 + 1);
  CGFloat v7 = *((double *)a1 + 2);
  CGFloat v8 = *((double *)a1 + 3);
  CGFloat v9 = *((double *)a1 + 4);
  uint64_t v10 = *a2;
  CGFloat v11 = *((double *)a2 + 1);
  CGFloat v12 = *((double *)a2 + 2);
  CGFloat v13 = *((double *)a2 + 3);
  CGFloat v14 = *((double *)a2 + 4);
  if (v5)
  {
    if (v10)
    {
      specialized static Array<A>.== infix(_:_:)(v5, v10, a3);
      if (v15) {
        goto LABEL_4;
      }
    }
  }
  else if (!v10)
  {
LABEL_4:
    v17.origin.double x = v6;
    v17.origin.double y = v7;
    v17.size.CGFloat width = v8;
    v17.size.CGFloat height = v9;
    v18.origin.double x = v11;
    v18.origin.double y = v12;
    v18.size.CGFloat width = v13;
    v18.size.CGFloat height = v14;
    return CGRectEqualToRect(v17, v18);
  }
  return 0;
}

double PDFAnnotationElement.AnnotationShape.init(defaultState:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void PDFAnnotationElement.AnnotationShape.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  double v4 = *((double *)v1 + 1);
  double v5 = *((double *)v1 + 2);
  double v6 = *((double *)v1 + 3);
  double v7 = *((double *)v1 + 4);
  if (*v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)(a1, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  CGRect.hash(into:)(v4, v5, v6, v7);
}

uint64_t PDFAnnotationElement.AnnotationShape.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PDFAnnotationElement.AnnotationShape.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v9 = v1[1];
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14[0] = v8;
  char v15 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGPoint]);
  lazy protocol witness table accessor for type [CGPoint] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGPoint] and conformance <A> [A], &lazy protocol witness table cache variable for type CGPoint and conformance CGPoint);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    v14[0] = v9;
    v14[1] = v10;
    void v14[2] = v11;
    v14[3] = v12;
    char v15 = 1;
    type metadata accessor for CGRect(0);
    lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int PDFAnnotationElement.AnnotationShape.hashValue.getter()
{
  uint64_t v1 = *v0;
  double v2 = *((double *)v0 + 1);
  double v3 = *((double *)v0 + 2);
  double v4 = *((double *)v0 + 3);
  double v5 = *((double *)v0 + 4);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v7, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  CGRect.hash(into:)(v2, v3, v4, v5);
  return Hasher._finalize()();
}

uint64_t PDFAnnotationElement.AnnotationShape.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PDFAnnotationElement.AnnotationShape.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGPoint]);
    char v14 = 0;
    lazy protocol witness table accessor for type [CGPoint] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGPoint] and conformance <A> [A], &lazy protocol witness table cache variable for type CGPoint and conformance CGPoint);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v9 = *(void *)&v13[0];
    type metadata accessor for CGRect(0);
    char v14 = 1;
    lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    long long v10 = v13[0];
    long long v11 = v13[1];
    *(void *)a2 = v9;
    *(_OWORD *)(a2 + 8) = v10;
    *(_OWORD *)(a2 + 24) = v11;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PDFAnnotationElement.AnnotationShape()
{
  uint64_t v1 = *v0;
  double v2 = *((double *)v0 + 1);
  double v3 = *((double *)v0 + 2);
  double v4 = *((double *)v0 + 3);
  double v5 = *((double *)v0 + 4);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v7, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  CGRect.hash(into:)(v2, v3, v4, v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PDFAnnotationElement.AnnotationShape(uint64_t a1)
{
  uint64_t v3 = *v1;
  double v4 = *((double *)v1 + 1);
  double v5 = *((double *)v1 + 2);
  double v6 = *((double *)v1 + 3);
  double v7 = *((double *)v1 + 4);
  if (*v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)(a1, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  CGRect.hash(into:)(v4, v5, v6, v7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PDFAnnotationElement.AnnotationShape()
{
  uint64_t v1 = *v0;
  double v2 = *((double *)v0 + 1);
  double v3 = *((double *)v0 + 2);
  double v4 = *((double *)v0 + 3);
  double v5 = *((double *)v0 + 4);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v7, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  CGRect.hash(into:)(v2, v3, v4, v5);
  return Hasher._finalize()();
}

BOOL protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance PDFAnnotationElement.AnnotationShape()
{
  if (*(void *)v0) {
    return 0;
  }
  v2.origin.double x = 0.0;
  v2.origin.double y = 0.0;
  v2.size.CGFloat width = 0.0;
  v2.size.CGFloat height = 0.0;
  return CGRectEqualToRect(*(CGRect *)(v0 + 8), v2);
}

double protocol witness for CRDefaultStateRepresentable.init(defaultState:) in conformance PDFAnnotationElement.AnnotationShape@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PDFAnnotationElement.AnnotationShape(uint64_t *a1, uint64_t *a2, int32x2_t a3)
{
  uint64_t v5 = *a1;
  CGFloat v6 = *((double *)a1 + 1);
  CGFloat v7 = *((double *)a1 + 2);
  CGFloat v8 = *((double *)a1 + 3);
  CGFloat v9 = *((double *)a1 + 4);
  uint64_t v10 = *a2;
  CGFloat v11 = *((double *)a2 + 1);
  CGFloat v12 = *((double *)a2 + 2);
  CGFloat v13 = *((double *)a2 + 3);
  CGFloat v14 = *((double *)a2 + 4);
  if (v5)
  {
    if (v10)
    {
      specialized static Array<A>.== infix(_:_:)(v5, v10, a3);
      if (v15) {
        goto LABEL_4;
      }
    }
  }
  else if (!v10)
  {
LABEL_4:
    v17.origin.double x = v6;
    v17.origin.double y = v7;
    v17.size.CGFloat width = v8;
    v17.size.CGFloat height = v9;
    v18.origin.double x = v11;
    v18.origin.double y = v12;
    v18.size.CGFloat width = v13;
    v18.size.CGFloat height = v14;
    return CGRectEqualToRect(v17, v18);
  }
  return 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PDFAnnotationElement.AnnotationShape@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PDFAnnotationElement.AnnotationShape.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PDFAnnotationElement.AnnotationShape(void *a1)
{
  return PDFAnnotationElement.AnnotationShape.encode(to:)(a1);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PDFAnnotationElement.AnnotationShape@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PDFAnnotationElement.AnnotationShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape();
  unint64_t v7 = lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PDFAnnotationElement.AnnotationShape()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PDFAnnotationElement.AnnotationShape()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PDFAnnotationElement.AnnotationShape(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape();
  return MEMORY[0x270F17688](a1, v2);
}

uint64_t PDFAnnotationElement.flags.getter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for PDFAnnotationElement.flags : PDFAnnotationElement@<X0>(void *a1@<X8>)
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PDFAnnotationElement.flags : PDFAnnotationElement()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t PDFAnnotationElement.flags.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PDFAnnotationElement.flags.modify(void *a1))()
{
  unint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$flags.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PDFAnnotationElement.$flags : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  CGFloat v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PDFAnnotationElement.$flags.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PDFAnnotationElement.$flags.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PDFAnnotationElement() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PDFAnnotationElement.modificationDate.getter()
{
  return PDFAnnotationElement.modificationDate.getter(MEMORY[0x263F32C30]);
}

uint64_t key path setter for PDFAnnotationElement.modificationDate : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for Date?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for Date?);
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Date?);
}

uint64_t PDFAnnotationElement.modificationDate.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for Date?);
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for Date?);
}

uint64_t (*PDFAnnotationElement.modificationDate.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$modificationDate.getter()
{
  return PDFAnnotationElement.modificationDate.getter(MEMORY[0x263F32C38]);
}

uint64_t PDFAnnotationElement.modificationDate.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for PDFAnnotationElement();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  return a1(v2);
}

uint64_t key path setter for PDFAnnotationElement.$modificationDate : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PDFAnnotationElement.$modificationDate.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PDFAnnotationElement.$modificationDate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PDFAnnotationElement() + 32);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PDFAnnotationElement.shape.getter()
{
  return CRRegister.wrappedValue.getter();
}

double key path getter for PDFAnnotationElement.shape : PDFAnnotationElement@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  CRRegister.wrappedValue.getter();
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v4;
  double result = *(double *)&v5;
  *(_OWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t key path setter for PDFAnnotationElement.shape : PDFAnnotationElement()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t PDFAnnotationElement.shape.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PDFAnnotationElement.shape.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$shape.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PDFAnnotationElement.$shape : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  long long v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PDFAnnotationElement.$shape.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PDFAnnotationElement.$shape.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PDFAnnotationElement() + 36);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PDFAnnotationElement.subtype.getter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for PDFAnnotationElement.subtype : PDFAnnotationElement@<X0>(void *a1@<X8>)
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for PDFAnnotationElement.subtype : PDFAnnotationElement()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t PDFAnnotationElement.subtype.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PDFAnnotationElement.subtype.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$subtype.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PDFAnnotationElement.$subtype : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PDFAnnotationElement.$subtype.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PDFAnnotationElement.$subtype.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PDFAnnotationElement() + 40);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PDFAnnotationElement.popup.getter()
{
  return PDFAnnotationElement.popup.getter(MEMORY[0x263F32C30]);
}

uint64_t key path setter for PDFAnnotationElement.popup : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
}

uint64_t PDFAnnotationElement.popup.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
}

uint64_t (*PDFAnnotationElement.popup.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$popup.getter()
{
  return PDFAnnotationElement.popup.getter(MEMORY[0x263F32C38]);
}

uint64_t PDFAnnotationElement.popup.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for PDFAnnotationElement();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  return a1(v2);
}

uint64_t key path setter for PDFAnnotationElement.$popup : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PDFAnnotationElement.$popup.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PDFAnnotationElement.$popup.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PDFAnnotationElement() + 44);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PDFAnnotationElement.additionalFields.getter()
{
  type metadata accessor for PDFAnnotationElement();
  return swift_bridgeObjectRetain();
}

uint64_t PDFAnnotationElement.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for PDFAnnotationElement() + 48);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*PDFAnnotationElement.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

double static PDFAnnotationElement.fields.getter@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  long long v24 = xmmword_2676C9A40;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)&qword_2676C9A50;
  *(_OWORD *)&v25[16] = xmmword_2676C9A60;
  long long v26 = *(_OWORD *)&qword_2676C9A70;
  *(_OWORD *)&unsigned char v21[16] = xmmword_2676C9A00;
  long long v22 = *(_OWORD *)&qword_2676C9A10;
  *(_OWORD *)double v23 = *(_OWORD *)&qword_2676C9A20;
  *(_OWORD *)&v23[16] = *(_OWORD *)&qword_2676C9A30;
  *(_OWORD *)uint64_t v19 = static PDFAnnotationElement.fields;
  *(_OWORD *)&v19[16] = *(_OWORD *)&qword_2676C99D0;
  long long v20 = xmmword_2676C99E0;
  *(_OWORD *)double v21 = *(_OWORD *)&qword_2676C99F0;
  uint64_t v2 = static PDFAnnotationElement.fields;
  uint64_t v3 = unk_2676C99D8;
  uint64_t v4 = qword_2676C99F0;
  uint64_t v5 = *((void *)&xmmword_2676C9A00 + 1);
  uint64_t v6 = qword_2676C9A20;
  uint64_t v7 = unk_2676C9A38;
  uint64_t v8 = qword_2676C9A50;
  uint64_t v9 = *((void *)&xmmword_2676C9A60 + 1);
  long long v11 = *(_OWORD *)&v19[8];
  long long v12 = xmmword_2676C99E0;
  long long v13 = *(_OWORD *)&v21[8];
  long long v14 = *(_OWORD *)&qword_2676C9A10;
  long long v15 = *(_OWORD *)&v23[8];
  long long v16 = xmmword_2676C9A40;
  long long v17 = *(_OWORD *)&v25[8];
  long long v18 = *(_OWORD *)&qword_2676C9A70;
  outlined retain of ((String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Color?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Int>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Date?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<PDFAnnotationElement.AnnotationShape>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<WeakRef<PDFAnnotationElement>?>>))((uint64_t)v19);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v11;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v12;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v14;
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v15;
  *(void *)(a1 + 12AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v7;
  *(_OWORD *)(a1 + 128) = v16;
  *(void *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v17;
  *(void *)(a1 + 168) = v9;
  double result = *(double *)&v18;
  *(_OWORD *)(a1 + 176) = v18;
  return result;
}

uint64_t PDFAnnotationElement.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x270FA5388](v19);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v18 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  long long v12 = (char *)&v18 - v11;
  long long v20 = 0uLL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type String? and conformance <A> A?, &demangling cache variable for type metadata for String?);
  CRRegister.init(wrappedValue:)();
  uint64_t v13 = type metadata accessor for PDFAnnotationElement();
  long long v20 = 0uLL;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v20 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v20 = 0;
  CRRegister.init(wrappedValue:)();
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 1, 1, v14);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v12, (uint64_t)v9, &demangling cache variable for type metadata for Date?);
  lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type Date? and conformance <A> A?, &demangling cache variable for type metadata for Date?);
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for Date?);
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape();
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v22 = 0;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v20 + 1) = v15;
  CRRegister.init(wrappedValue:)();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v6, 1, 1, v16);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v6, (uint64_t)v3, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  lazy protocol witness table accessor for type WeakRef<PDFAnnotationElement>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  *(void *)(a1 + *(int *)(v13 + 48)) = MEMORY[0x263F8EE80];
  return result;
}

void PDFAnnotationElement.init(_:)(PDFAnnotation *a1@<X0>, uint64_t a2@<X8>)
{
  long long v20 = a1;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x270FA5388](v19);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v19 - v12;
  long long v21 = 0uLL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type String? and conformance <A> A?, &demangling cache variable for type metadata for String?);
  CRRegister.init(wrappedValue:)();
  uint64_t v14 = type metadata accessor for PDFAnnotationElement();
  long long v21 = 0uLL;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v21 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v21 = 0;
  CRRegister.init(wrappedValue:)();
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 1, 1, v15);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v13, (uint64_t)v10, &demangling cache variable for type metadata for Date?);
  lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type Date? and conformance <A> A?, &demangling cache variable for type metadata for Date?);
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Date?);
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape();
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v23 = 0;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v21 + 1) = v16;
  CRRegister.init(wrappedValue:)();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v7, 1, 1, v17);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  lazy protocol witness table accessor for type WeakRef<PDFAnnotationElement>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  *(void *)(a2 + *(int *)(v14 + 48)) = MEMORY[0x263F8EE80];
  uint64_t v18 = v20;
  PDFAnnotationElement.updateFrom(_:)(v20);
}

Swift::Void __swiftcall PDFAnnotationElement.updateFrom(_:)(PDFAnnotation *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  uint64_t v155 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v153 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v154 = (char *)&v130 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v137 = (uint64_t)&v130 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = type metadata accessor for CRKeyPath();
  uint64_t v138 = *(void *)(v139 - 8);
  MEMORY[0x270FA5388](v139);
  uint64_t v134 = (char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v135 = (char *)&v130 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v136 = (char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v156 = (char *)&v130 - v16;
  uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  uint64_t v144 = *(void *)(v145 - 8);
  MEMORY[0x270FA5388](v145);
  uint64_t v151 = (char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  id v152 = (char *)&v130 - v19;
  uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  uint64_t v150 = *(void *)(v143 - 8);
  MEMORY[0x270FA5388](v143);
  uint64_t v148 = (char *)&v130 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v149 = (char *)&v130 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v142 = (char *)&v130 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  uint64_t v147 = *(void *)(v141 - 8);
  MEMORY[0x270FA5388](v141);
  uint64_t v146 = (char *)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v140 = (char *)&v130 - v27;
  uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t v161 = *(void *)(v160 - 8);
  MEMORY[0x270FA5388](v160);
  uint64_t v158 = (char *)&v130 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v159 = (char *)&v130 - v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v130 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v36 = MEMORY[0x270FA5388](v35);
  long long v38 = (char *)&v130 - v37;
  uint64_t v39 = *MEMORY[0x263F147B0];
  uint64_t v162 = a1;
  if (!-[PDFAnnotation valueForAnnotationKey:](a1, sel_valueForAnnotationKey_, v39, v36))
  {
    __break(1u);
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v169, &v163);
  swift_dynamicCast();
  unint64_t v40 = v167;
  unint64_t v41 = v168;
  uint64_t v157 = type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  if (v163 == __PAIR128__(v41, v40))
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v133 = (void (*)(char *, char *, uint64_t))v4;
    uint64_t v42 = v2;
    char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v43)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      *(void *)&long long v163 = v40;
      *((void *)&v163 + 1) = v41;
      CRRegister.value.setter();
    }
    uint64_t v2 = v42;
    uint64_t v4 = (uint64_t)v133;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v34, v38, v31);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v38, v31);
  CRRegister.wrappedValue.getter();
  long long v44 = v163;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == (void)v44 && v45 == *((void *)&v44 + 1))
  {
    swift_bridgeObjectRelease_n();
    return;
  }
  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v46)
  {
    swift_bridgeObjectRelease();
    return;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() != (void)v44 || v47 != *((void *)&v44 + 1))
  {
    char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v48 = v162;
    if (v49) {
      goto LABEL_17;
    }
    __int16 v58 = [(PDFAnnotation *)v162 widgetStringValue];
    if (v58)
    {
      uint64_t v59 = v58;
      uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v62 = v61;
    }
    else
    {
      uint64_t v60 = 0;
      uint64_t v62 = 0;
    }
    uint64_t v63 = v159;
    uint64_t v64 = v160;
    CRRegister.projectedValue.getter();
    specialized CRRegister<>.setIfDifferent(_:)(v60, v62);
    swift_bridgeObjectRelease();
    uint64_t v65 = v161;
    uint64_t v66 = v2;
    uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v161 + 16);
    v67(v158, v63, v64);
    uint64_t v132 = v66;
    CRRegister.projectedValue.setter();
    uint64_t v68 = *(void (**)(char *, uint64_t))(v65 + 8);
    uint64_t v161 = v65 + 8;
    v68(v63, v64);
    uint64_t v69 = [(PDFAnnotation *)v48 contents];
    uint64_t v133 = v67;
    uint64_t v131 = v68;
    if (v69)
    {
      uint64_t v70 = v69;
      uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v73 = v72;
    }
    else
    {
      uint64_t v71 = 0;
      uint64_t v73 = 0;
    }
    uint64_t v74 = v159;
    uint64_t v75 = v160;
    CRRegister.projectedValue.getter();
    specialized CRRegister<>.setIfDifferent(_:)(v71, v73);
    swift_bridgeObjectRelease();
    v133(v158, v74, v75);
    CRRegister.projectedValue.setter();
    v131(v74, v75);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    uint64_t v76 = (void *)v163;
    if ((void)v163)
    {
      uint64_t v77 = (UIColor *)objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, (void)v163);
    }
    else
    {
      uint64_t v77 = 0;
    }
    uint64_t v78 = v162;
    uint64_t v79 = v141;
    uint64_t v80 = [(PDFAnnotation *)v162 color];
    uint64_t v81 = v80;
    if (v77)
    {
      if (v80)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        uint64_t v82 = v77;
        uint64_t v78 = v162;
        char v83 = static NSObject.== infix(_:_:)();

        if (v83) {
          goto LABEL_39;
        }
LABEL_38:
        uint64_t v84 = [(PDFAnnotation *)v78 color];
        Color.init(cgColor:)([(UIColor *)v84 CGColor], (CGColor **)&v163);

        CRRegister.wrappedValue.setter();
        goto LABEL_39;
      }
      uint64_t v81 = v77;
    }
    else if (!v80)
    {
LABEL_39:
      if ([(PDFAnnotation *)v78 valueForAnnotationKey:*MEMORY[0x263F14790]])
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v169, 0, sizeof(v169));
      }
      uint64_t v85 = v145;
      uint64_t v86 = v143;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v169, (uint64_t)&v163, &demangling cache variable for type metadata for Any?);
      if (v165 == 0.0)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v163, &demangling cache variable for type metadata for Any?);
      }
      else if (swift_dynamicCast())
      {
        unint64_t v87 = v167;
        goto LABEL_47;
      }
      unint64_t v87 = 0;
LABEL_47:
      int v88 = v140;
      CRRegister.projectedValue.getter();
      CRRegister.value.getter();
      if ((void)v163 != v87)
      {
        *(void *)&long long v163 = v87;
        CRRegister.value.setter();
      }
      uint64_t v89 = v147;
      (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v146, v88, v79);
      CRRegister.projectedValue.setter();
      (*(void (**)(char *, uint64_t))(v89 + 8))(v88, v79);
      uint64_t v90 = [(PDFAnnotation *)v78 modificationDate];
      if (v90)
      {
        char v91 = v90;
        uint64_t v92 = (uint64_t)v142;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v93 = type metadata accessor for Date();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v92, 0, 1, v93);
      }
      else
      {
        uint64_t v94 = type metadata accessor for Date();
        uint64_t v92 = (uint64_t)v142;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 56))(v142, 1, 1, v94);
      }
      id v95 = v149;
      CRRegister.projectedValue.getter();
      specialized CRRegister<>.setIfDifferent(_:)(v92);
      outlined destroy of StocksKitCurrencyCache.Provider?(v92, &demangling cache variable for type metadata for Date?);
      uint64_t v96 = v150;
      (*(void (**)(char *, char *, uint64_t))(v150 + 16))(v148, v95, v86);
      CRRegister.projectedValue.setter();
      (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v86);
      uint64_t v97 = PDFAnnotation.quadPoints.getter();
      [(PDFAnnotation *)v78 bounds];
      CGFloat v99 = v98;
      CGFloat v101 = v100;
      CGFloat v103 = v102;
      CGFloat v105 = v104;
      objc_super v106 = v152;
      CRRegister.projectedValue.getter();
      CRRegister.value.getter();
      CGFloat v108 = *((double *)&v163 + 1);
      CGFloat v109 = v164;
      CGFloat v110 = v165;
      CGFloat v111 = v166;
      if ((void)v163)
      {
        uint64_t v112 = v144;
        uint64_t v113 = (uint64_t)v156;
        if (!v97 || (specialized static Array<A>.== infix(_:_:)(v163, v97, v107), (v114 & 1) == 0))
        {
          swift_bridgeObjectRelease();
LABEL_58:
          *(void *)&long long v163 = v97;
          *((CGFloat *)&v163 + 1) = v99;
          double v164 = v101;
          double v165 = v103;
          double v166 = v105;
          swift_bridgeObjectRetain();
          CRRegister.value.setter();
LABEL_59:
          (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v151, v106, v85);
          CRRegister.projectedValue.setter();
          (*(void (**)(char *, uint64_t))(v112 + 8))(v106, v85);
          swift_bridgeObjectRelease();
          uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
          os_log_type_t v117 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56);
          v117(v113, 1, 1, v116);
          uint64_t v118 = [(PDFAnnotation *)v162 popup];
          if (v118)
          {
            uint64_t v119 = v118;
            type metadata accessor for CanvasElementPDFAnnotation();
            uint64_t v120 = swift_dynamicCastClass();
            if (v120)
            {
              uint64_t v121 = v120 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
              swift_beginAccess();
              uint64_t v122 = v137;
              outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v121, v137, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
              uint64_t v123 = v138;
              uint64_t v124 = v139;
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v138 + 48))(v122, 1, v139) != 1)
              {
                unint64_t v125 = v135;
                (*(void (**)(char *, uint64_t, uint64_t))(v123 + 32))(v135, v122, v124);
                (*(void (**)(char *, char *, uint64_t))(v123 + 16))(v134, v125, v124);
                lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
                uint64_t v126 = (uint64_t)v136;
                WeakRef.init(id:)();

                uint64_t v127 = v125;
                uint64_t v113 = (uint64_t)v156;
                (*(void (**)(char *, uint64_t))(v123 + 8))(v127, v124);
                outlined destroy of StocksKitCurrencyCache.Provider?(v113, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
                v117(v126, 0, 1, v116);
                outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v126, v113, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
                goto LABEL_65;
              }
            }
            else
            {
              uint64_t v122 = v137;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 56))(v137, 1, 1, v139);
            }

            outlined destroy of StocksKitCurrencyCache.Provider?(v122, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
          }
LABEL_65:
          uint64_t v128 = v154;
          CRRegister.projectedValue.getter();
          specialized CRRegister<>.setIfDifferent(_:)(v113);
          uint64_t v129 = v155;
          (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v153, v128, v4);
          CRRegister.projectedValue.setter();
          (*(void (**)(char *, uint64_t))(v129 + 8))(v128, v4);
          outlined destroy of StocksKitCurrencyCache.Provider?(v113, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
          return;
        }
      }
      else
      {
        uint64_t v112 = v144;
        uint64_t v113 = (uint64_t)v156;
        if (v97) {
          goto LABEL_58;
        }
      }
      v170.origin.double x = v108;
      v170.origin.double y = v109;
      v170.size.CGFloat width = v110;
      v170.size.CGFloat height = v111;
      v171.origin.double x = v99;
      v171.origin.double y = v101;
      v171.size.CGFloat width = v103;
      v171.size.CGFloat height = v105;
      BOOL v115 = CGRectEqualToRect(v170, v171);
      swift_bridgeObjectRelease();
      if (v115) {
        goto LABEL_59;
      }
      goto LABEL_58;
    }

    goto LABEL_38;
  }
  swift_bridgeObjectRelease_n();
  uint64_t v48 = v162;
LABEL_17:
  id v50 = [(PDFAnnotation *)v48 widgetStringValue];
  if (v50)
  {
    uint64_t v51 = v50;
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v54 = v53;
  }
  else
  {
    uint64_t v52 = 0;
    uint64_t v54 = 0;
  }
  char v55 = v159;
  uint64_t v56 = v160;
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)(v52, v54);
  swift_bridgeObjectRelease();
  uint64_t v57 = v161;
  (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v158, v55, v56);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v55, v56);
}

void PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(unint64_t *a1, void *a2, void *a3)
{
}

uint64_t PDFAnnotationElement.applyDifference<A, B>(id:in:from:)(uint64_t a1, void *a2, void (*a3)(char *, uint64_t), void (*a4)(char *, char *, uint64_t), uint64_t a5)
{
  return specialized PDFAnnotationElement.applyDifference<A, B>(id:in:from:)(a1, a3, *(void *)(*a2 + *MEMORY[0x263F33088]), a4, *(void *)(*a2 + *MEMORY[0x263F33088] + 8), a5);
}

uint64_t PDFAnnotationElement.minAppFormatVersion.getter()
{
  return 4;
}

uint64_t PDFAnnotationElement.minEncodingVersion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263F32EB8];
  uint64_t v3 = type metadata accessor for CRCodableVersion();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PDFAnnotationElement()
{
  return CRStruct_8.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PDFAnnotationElement()
{
  return CRStruct_8.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PDFAnnotationElement@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263F32EB8];
  uint64_t v3 = type metadata accessor for CRCodableVersion();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t protocol witness for CRCodable.minAppFormatVersion.getter in conformance PDFAnnotationElement()
{
  return 4;
}

double protocol witness for static CRStruct_Base_8.fields.getter in conformance PDFAnnotationElement@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  long long v24 = xmmword_2676C9A40;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)&qword_2676C9A50;
  *(_OWORD *)&v25[16] = xmmword_2676C9A60;
  long long v26 = *(_OWORD *)&qword_2676C9A70;
  *(_OWORD *)&unsigned char v21[16] = xmmword_2676C9A00;
  long long v22 = *(_OWORD *)&qword_2676C9A10;
  *(_OWORD *)uint64_t v23 = *(_OWORD *)&qword_2676C9A20;
  *(_OWORD *)&v23[16] = *(_OWORD *)&qword_2676C9A30;
  *(_OWORD *)uint64_t v19 = static PDFAnnotationElement.fields;
  *(_OWORD *)&v19[16] = *(_OWORD *)&qword_2676C99D0;
  long long v20 = xmmword_2676C99E0;
  *(_OWORD *)uint64_t v21 = *(_OWORD *)&qword_2676C99F0;
  uint64_t v2 = static PDFAnnotationElement.fields;
  uint64_t v3 = unk_2676C99D8;
  uint64_t v4 = qword_2676C99F0;
  uint64_t v5 = *((void *)&xmmword_2676C9A00 + 1);
  uint64_t v6 = qword_2676C9A20;
  uint64_t v7 = unk_2676C9A38;
  uint64_t v8 = qword_2676C9A50;
  uint64_t v9 = *((void *)&xmmword_2676C9A60 + 1);
  long long v11 = *(_OWORD *)&v19[8];
  long long v12 = xmmword_2676C99E0;
  long long v13 = *(_OWORD *)&v21[8];
  long long v14 = *(_OWORD *)&qword_2676C9A10;
  long long v15 = *(_OWORD *)&v23[8];
  long long v16 = xmmword_2676C9A40;
  long long v17 = *(_OWORD *)&v25[8];
  long long v18 = *(_OWORD *)&qword_2676C9A70;
  outlined retain of ((String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Color?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Int>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Date?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<PDFAnnotationElement.AnnotationShape>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<WeakRef<PDFAnnotationElement>?>>))((uint64_t)v19);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v11;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v12;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v14;
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v15;
  *(void *)(a1 + 12AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v7;
  *(_OWORD *)(a1 + 128) = v16;
  *(void *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v17;
  *(void *)(a1 + 168) = v9;
  double result = *(double *)&v18;
  *(_OWORD *)(a1 + 176) = v18;
  return result;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return MEMORY[0x270F17388](a1, v2);
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance PDFAnnotationElement()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 48);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*protocol witness for CRStruct_Base.additionalFields.modify in conformance PDFAnnotationElement())()
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CRDT.context.getter in conformance PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return MEMORY[0x270F17328](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return MEMORY[0x270F17350](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return MEMORY[0x270F17380](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return MEMORY[0x270F17358](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return MEMORY[0x270F17378](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return MEMORY[0x270F17360](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return MEMORY[0x270F17340](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return MEMORY[0x270F17338](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return MEMORY[0x270F17320](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return MEMORY[0x270F17308](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return CRStruct_8.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return MEMORY[0x270F17310](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  return MEMORY[0x270F17368](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance PDFAnnotationElement()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance PDFAnnotationElement()
{
  return CRDT.init(serializedData:)();
}

double PDFAnnotationElement.frame.getter()
{
  return 0.0;
}

uint64_t (*PDFAnnotationElement.frame.modify(uint64_t a1))()
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  return UnknownCanvasElementView.flags.modify;
}

double PDFAnnotationElement.rotation.getter()
{
  return 0.0;
}

uint64_t (*PDFAnnotationElement.rotation.modify(void *a1))()
{
  *a1 = 0;
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PDFAnnotationElement.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CRAsset();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t PDFAnnotationElement.shared(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  double v3 = MEMORY[0x270FA5388](v2);
  v7[15] = 8;
  (*(void (**)(unsigned char *, uint64_t, double))(v5 + 16))(&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t PDFAnnotationElement.render<A>(in:id:capsule:options:)()
{
  return PDFAnnotationElement.render<A>(in:id:capsule:options:)(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t (*protocol witness for CanvasElement.frame.modify in conformance PDFAnnotationElement(uint64_t a1))()
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  return UnknownCanvasElementView.flags.modify;
}

double protocol witness for CanvasElement.rotation.getter in conformance PDFAnnotationElement()
{
  return 0.0;
}

uint64_t (*protocol witness for CanvasElement.rotation.modify in conformance PDFAnnotationElement(void *a1))()
{
  *a1 = 0;
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  double v3 = MEMORY[0x270FA5388](v2);
  v7[15] = 8;
  (*(void (**)(unsigned char *, uint64_t, double))(v5 + 16))(&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

void protocol witness for CanvasElement.update<A>(use:ref:pdfAnnotation:in:capsule:options:) in conformance PDFAnnotationElement(unint64_t *a1, void *a2, void *a3)
{
}

uint64_t protocol witness for CanvasElement.applyDifference<A, B>(id:in:from:) in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, void (*a5)(char *, char *, uint64_t), uint64_t a6, uint64_t a7)
{
  return specialized PDFAnnotationElement.applyDifference<A, B>(id:in:from:)(a1, a3, a4, a5, a6, a7);
}

double protocol witness for PaperRenderable.frame.getter in conformance PDFAnnotationElement()
{
  return 0.0;
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance PDFAnnotationElement()
{
  return PDFAnnotationElement.render<A>(in:id:capsule:options:)(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, MEMORY[0x263F330F8], (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8], MEMORY[0x263F33110]);
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, MEMORY[0x263F07508], (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508], MEMORY[0x263F07528]);
}

{
  uint64_t v2;
  uint64_t *v3;
  unsigned char *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    double v3 = (uint64_t *)(a1 + 32);
    for (uint64_t i = (unsigned char *)(a2 + 40); ; i += 16)
    {
      uint64_t v6 = *v3;
      v3 += 2;
      uint64_t v5 = v6;
      uint64_t v7 = *((void *)i - 1);
      if (*i == 1)
      {
        switch(v7)
        {
          case 1:
            if (v5 != 1) {
              return 0;
            }
            goto LABEL_6;
          case 2:
            if (v5 != 2) {
              return 0;
            }
            goto LABEL_6;
          case 3:
            if (v5 != 3) {
              return 0;
            }
            goto LABEL_6;
          case 4:
            if (v5 != 4) {
              return 0;
            }
            goto LABEL_6;
          default:
            if (v5) {
              return 0;
            }
            goto LABEL_6;
        }
      }
      if (v5 != v7) {
        break;
      }
LABEL_6:
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;

  uint64_t v4 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v6 = (unint64_t)a2 >> 62;
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    long long v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 != v15) {
      return 0;
    }
  }
  else if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  if (!v5) {
    return 1;
  }
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  if (a1 < 0) {
    uint64_t v7 = a1;
  }
  if (!v4) {
    uint64_t v7 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v8 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v9 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if (v6) {
    uint64_t v9 = v10;
  }
  if (v7 == v9) {
    return 1;
  }
  if (v5 < 0)
  {
    __break(1u);
LABEL_26:
    uint64_t result = MEMORY[0x21054E050](0, a1);
    long long v11 = result;
    long long v13 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0) {
      goto LABEL_19;
    }
LABEL_27:
    long long v16 = MEMORY[0x21054E050](0, a2);
    swift_release();
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v30 = v11 == v16;
    uint64_t v8 = a2 & 0xFFFFFFFFFFFFFF8;
    if (!v30) {
      return 0;
    }
    goto LABEL_29;
  }
  uint64_t v6 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    goto LABEL_26;
  }
  long long v11 = *(void *)(a1 + 32);
  uint64_t result = swift_retain();
  long long v13 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0) {
    goto LABEL_27;
  }
LABEL_19:
  if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_57;
  }
  long long v14 = *(void *)(a2 + 32);
  uint64_t result = swift_release();
  if (v11 != v14) {
    return 0;
  }
LABEL_29:
  long long v17 = v5 - 1;
  if (v5 == 1) {
    return 1;
  }
  if (((a2 | a1) & 0xC000000000000001) != 0)
  {
    long long v18 = 1 - v5;
    uint64_t v19 = 5;
    while (1)
    {
      if (v18 + v19 == 5) {
        goto LABEL_56;
      }
      if (v6)
      {
        uint64_t result = MEMORY[0x21054E050](v19 - 4, a1);
        long long v20 = result;
        if (v13)
        {
LABEL_35:
          uint64_t v21 = MEMORY[0x21054E050](v19 - 4, a2);
          swift_release();
          swift_unknownObjectRelease();
          if (v20 != v21) {
            return 0;
          }
          goto LABEL_36;
        }
      }
      else
      {
        long long v20 = *(void *)(a1 + 8 * v19);
        uint64_t result = swift_retain();
        if (v13) {
          goto LABEL_35;
        }
      }
      if ((unint64_t)(v19 - 4) >= *(void *)(v8 + 16)) {
        goto LABEL_58;
      }
      long long v22 = *(void *)(a2 + 8 * v19);
      swift_release();
      if (v20 != v22) {
        return 0;
      }
LABEL_36:
      ++v19;
      uint64_t result = 1;
      if (v18 + v19 == 5) {
        return result;
      }
    }
  }
  uint64_t v23 = *(void *)(v8 + 16);
  if (v23 <= 1) {
    uint64_t v23 = 1;
  }
  long long v24 = v23 - 1;
  uint64_t v25 = (uint64_t *)(a1 + 40);
  long long v26 = (uint64_t *)(a2 + 40);
  while (v17)
  {
    if (!v24) {
      goto LABEL_55;
    }
    uint64_t v28 = *v25++;
    uint64_t v27 = v28;
    uint64_t v29 = *v26++;
    --v24;
    uint64_t result = v27 == v29;
    uint64_t v30 = v27 != v29 || v17-- == 1;
    if (v30) {
      return result;
    }
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v38 = a6;
  uint64_t v10 = a3(0);
  MEMORY[0x270FA5388](v10);
  v14.n128_f64[0] = MEMORY[0x270FA5388](v11);
  long long v16 = (char *)&v31 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17 == *(void *)(a2 + 16))
  {
    if (!v17 || a1 == a2)
    {
      char v25 = 1;
    }
    else
    {
      unint64_t v18 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      long long v20 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
      uint64_t v19 = v12 + 16;
      uint64_t v35 = v20;
      double v36 = v13;
      uint64_t v31 = *(void *)(v19 + 56);
      uint64_t v32 = a2;
      uint64_t v37 = v19;
      uint64_t v33 = a1;
      uint64_t v34 = (void (**)(char *, uint64_t))(v19 - 8);
      uint64_t v21 = v17 - 1;
      do
      {
        long long v22 = v35;
        ((void (*)(char *, unint64_t, uint64_t, __n128))v35)(v16, a1 + v18, v10, v14);
        uint64_t v23 = v16;
        long long v24 = v36;
        v22(v36, a2 + v18, v10);
        lazy protocol witness table accessor for type CGPoint and conformance CGPoint(a4, a5);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        long long v26 = *v34;
        uint64_t v27 = v24;
        long long v16 = v23;
        (*v34)(v27, v10);
        v26(v23, v10);
        BOOL v29 = v21-- != 0;
        if ((v25 & 1) == 0) {
          break;
        }
        v18 += v31;
        a2 = v32;
        a1 = v33;
      }
      while (v29);
    }
  }
  else
  {
    char v25 = 0;
  }
  return v25 & 1;
}

int32x2_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, int32x2_t result)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == *(void *)(a2 + 16) && v3 && a1 != a2)
  {
    uint64_t result = *(int32x2_t *)(a1 + 40);
    if (*(double *)(a1 + 32) == *(double *)(a2 + 32) && *(double *)&result == *(double *)(a2 + 40))
    {
      uint64_t v5 = (float64x2_t *)(a1 + 48);
      uint64_t v6 = (float64x2_t *)(a2 + 48);
      uint64_t v7 = v3 - 1;
      do
      {
        if (!v7) {
          break;
        }
        float64x2_t v8 = *v5++;
        float64x2_t v9 = v8;
        float64x2_t v10 = *v6++;
        uint64_t result = vmovn_s64(vceqq_f64(v9, v10));
        --v7;
      }
      while ((result.i32[0] & result.i32[1] & 1) != 0);
    }
  }
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (double *)(a1 + 40);
  uint64_t v4 = (double *)(a2 + 40);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    double v7 = *v3++;
    double v8 = v7;
    double v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

{
  uint64_t v2;
  BOOL result;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v12;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (double *)(a1 + 40);
  uint64_t v6 = (double *)(a2 + 40);
  do
  {
    double v7 = *v5++;
    double v8 = v7;
    double v9 = *v6++;
    float64x2_t v10 = v9;
    uint64_t v12 = v4-- != 0;
    BOOL result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, uint64_t a2)
{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for AnyCanvasElementView);
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for CanvasAttachment);
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for MathExpression);
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for MathExpressionEvaluationResult);
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a1;
  unint64_t v6 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 == v31) {
      goto LABEL_5;
    }
LABEL_49:
    LOBYTE(v7) = 0;
    return (id)(v7 & 1);
  }
  if (v7 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v7) {
    goto LABEL_38;
  }
  uint64_t v8 = v5 & 0xFFFFFFFFFFFFFF8;
  if (v5 < 0) {
    uint64_t v8 = v5;
  }
  if (!v6) {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v10 = v11;
  }
  if (v8 == v10)
  {
LABEL_38:
    LOBYTE(v7) = 1;
    return (id)(v7 & 1);
  }
  if ((v7 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  unint64_t v32 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  for (id result = *(id *)(v5 + 32); ; id result = (id)MEMORY[0x21054E050](0, v5))
  {
    long long v13 = result;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
    id v14 = (id)MEMORY[0x21054E050](0, a2);
LABEL_22:
    uint64_t v15 = v14;
    a3 = (uint64_t (*)(void))a3(0);
    char v16 = static NSObject.== infix(_:_:)();

    if ((v16 & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v17 = v7 - 1;
    if (v7 == 1) {
      return (id)(v7 & 1);
    }
    if (((a2 | v5) & 0xC000000000000001) != 0)
    {
      uint64_t v18 = 0;
      unint64_t v19 = v7 - 2;
      while (v17 != v18)
      {
        unint64_t v7 = v18 + 1;
        if (v32) {
          id v20 = (id)MEMORY[0x21054E050](v18 + 1, v5);
        }
        else {
          id v20 = *(id *)(v5 + 40 + 8 * v18);
        }
        uint64_t v21 = v20;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v22 = (id)MEMORY[0x21054E050](v18 + 1, a2);
        }
        else
        {
          if (v7 >= *(void *)(v9 + 16)) {
            goto LABEL_54;
          }
          id v22 = *(id *)(a2 + 40 + 8 * v18);
        }
        uint64_t v23 = v22;
        unint64_t v7 = static NSObject.== infix(_:_:)();

        if ((v7 & 1) != 0 && v19 != v18++) {
          continue;
        }
        return (id)(v7 & 1);
      }
      __break(1u);
    }
    else
    {
      unint64_t v25 = *(void *)(v9 + 16);
      if (v25 <= 1) {
        unint64_t v25 = 1;
      }
      unint64_t v26 = v25 - 1;
      uint64_t v27 = (void **)(v5 + 40);
      uint64_t v9 = a2 + 40;
      while (v17)
      {
        if (!v26) {
          goto LABEL_53;
        }
        BOOL v29 = *v27++;
        uint64_t v28 = v29;
        uint64_t v30 = *(void **)v9;
        v9 += 8;
        a2 = v28;
        uint64_t v5 = v30;
        unint64_t v7 = static NSObject.== infix(_:_:)();

        if (v7)
        {
          --v26;
          if (--v17) {
            continue;
          }
        }
        return (id)(v7 & 1);
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    ;
  }
  if (*(void *)(v9 + 16))
  {
    id v14 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

void CGRect.hash(into:)(double a1, double a2, double a3, double a4)
{
  CGRect v11 = CGRectStandardize(*(CGRect *)&a1);
  CGFloat y = v11.origin.y;
  CGFloat width = v11.size.width;
  CGFloat height = v11.size.height;
  if ((*(void *)&v11.origin.x & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    CGFloat x = v11.origin.x;
  }
  else {
    CGFloat x = 0.0;
  }
  Hasher._combine(_:)(*(Swift::UInt64 *)&x);
  if ((*(void *)&y & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = *(void *)&y;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((*(void *)&width & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = *(void *)&width;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((*(void *)&height & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = *(void *)&height;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      Swift::UInt64 v5 = *v4;
      if ((*(v4 - 1) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v6 = *(v4 - 1);
      }
      else {
        Swift::UInt64 v6 = 0;
      }
      Hasher._combine(_:)(v6);
      if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v7 = v5;
      }
      else {
        Swift::UInt64 v7 = 0;
      }
      Hasher._combine(_:)(v7);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  Swift::UInt64 *v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;

  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt64 *)(a2 + 32);
    do
    {
      Swift::UInt64 v6 = *v4++;
      Swift::UInt64 v5 = v6;
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v7 = v5;
      }
      else {
        Swift::UInt64 v7 = 0;
      }
      Hasher._combine(_:)(v7);
      --v3;
    }
    while (v3);
  }
}

unint64_t lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CGPoint] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CGPoint]);
    lazy protocol witness table accessor for type CGPoint and conformance CGPoint(a2, type metadata accessor for CGPoint);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of ((String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Color?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Int>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Date?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<PDFAnnotationElement.AnnotationShape>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<WeakRef<PDFAnnotationElement>?>>))(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type String? and conformance <A> A?(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape()
{
  unint64_t result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WeakRef<PDFAnnotationElement>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type WeakRef<PDFAnnotationElement>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type WeakRef<PDFAnnotationElement>? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<PDFAnnotationElement> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WeakRef<PDFAnnotationElement>? and conformance <A> A?);
  }
  return result;
}

uint64_t specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  Swift::UInt64 v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v8 - 8);
  Swift::UInt64 v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v11 = *(void *)(a2 + 16);
  uint64_t v27 = a1;
  Hasher._combine(_:)(v11);
  if (v11)
  {
    long long v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v14 = a2 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    unint64_t v15 = v12 + 40;
    uint64_t v16 = v12;
    unint64_t v17 = (uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 32);
    long long v24 = (void (**)(char *, char *, uint64_t))(v16 + 16);
    unint64_t v25 = v13;
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    uint64_t v26 = v16;
    uint64_t v19 = *(void *)(v16 + 56);
    unint64_t v22 = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v23 = v19;
    while (1)
    {
      v25(v10, v14, v4);
      id v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v10, 0, 1, v4);
      uint64_t result = (*v17)(v10, 1, v4);
      if (result == 1) {
        break;
      }
      (*v24)(v7, v10, v4);
      lazy protocol witness table accessor for type CGPoint and conformance CGPoint((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      dispatch thunk of Hashable.hash(into:)();
      (*v18)(v7, v4);
      v14 += v23;
      if (!--v11) {
        return v20(v10, 1, 1, v4);
      }
    }
  }
  else
  {
    id v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v20(v10, 1, 1, v4);
  }
  return result;
}

void specialized PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:capsule:options:)(unint64_t *a1, void *a2, void *a3)
{
  id v173 = a2;
  uint64_t v154 = type metadata accessor for CRKeyPath();
  uint64_t v153 = *(void *)(v154 - 8);
  MEMORY[0x270FA5388](v154);
  id v152 = (char *)&v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v161 = (char *)&v151 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  uint64_t v159 = *(void *)(v162 - 8);
  MEMORY[0x270FA5388](v162);
  uint64_t v156 = (char *)&v151 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = type metadata accessor for Date();
  uint64_t v165 = *(void *)(v164 - 8);
  MEMORY[0x270FA5388](v164);
  uint64_t v155 = (char *)&v151 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
  MEMORY[0x270FA5388](v160);
  uint64_t v169 = (uint64_t)&v151 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v158 = (char *)&v151 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v157 = (char *)&v151 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v163 = (uint64_t)&v151 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v166 = (uint64_t)&v151 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
  unint64_t v168 = *(char **)(v19 - 8);
  uint64_t v20 = *((void *)v168 + 8);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v171 = (uint64_t)&v151 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v172 = (uint64_t)&v151 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  uint64_t v167 = *(void *)(v23 - 8);
  uint64_t v24 = *(void *)(v167 + 64);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v170 = (uint64_t)&v151 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v151 - v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v151 - v29;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v151 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v35 = *a1;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v173, (uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  int v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31);
  id v173 = a3;
  if (v36 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v34, v30, v31);
    uint64_t v37 = v35;
    if (v35 >> 62)
    {
      if (v35 >> 62 != 1)
      {
LABEL_8:
        (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
        goto LABEL_9;
      }
      uint64_t v37 = v35 & 0x3FFFFFFFFFFFFFFFLL;
    }
    type metadata accessor for CanvasElementPDFAnnotation();
    uint64_t v38 = swift_dynamicCastClass();
    if (v38)
    {
      uint64_t v151 = v38;
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>);
      uint64_t v40 = v172;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v172, 1, 1, v39);
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v27, v34, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v27, 0, 1, v31);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v40, v171, (uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v27, v170, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      unint64_t v41 = (v168[80] + 16) & ~(unint64_t)v168[80];
      unint64_t v42 = (v20 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v43 = (*(unsigned __int8 *)(v167 + 80) + v42 + 8) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80);
      uint64_t v167 = v43 + v24;
      uint64_t v44 = swift_allocObject();
      unint64_t v168 = v27;
      uint64_t v45 = v37;
      uint64_t v46 = v44;
      unint64_t v47 = ((v43 + v24) & 0xFFFFFFFFFFFFFFF8) + v44;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v171, v44 + v41, (uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
      *(void *)(v46 + v42) = v45;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v170, v46 + v43, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      *(unsigned char *)(v46 + v167) = 0;
      *(void *)(v47 + 8) = 0;
      *(void *)(v47 + 16) = 0;
      uint64_t v48 = (void (**)(void *))(v151
                                         + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation);
      uint64_t v49 = *(void *)(v151 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation);
      *uint64_t v48 = partial apply for specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:);
      v48[1] = (void (*)(void *))v46;
      outlined copy of PaperDocument.PDFDocumentUse(v35);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v49);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v168, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v172, (uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
    }
    goto LABEL_8;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
LABEL_9:
  uint64_t v50 = type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  long long v51 = v176;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == (void)v51 && v52 == *((void *)&v51 + 1))
  {
    swift_bridgeObjectRelease_n();
    return;
  }
  char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v53)
  {
    swift_bridgeObjectRelease();
    return;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == (void)v51 && v54 == *((void *)&v51 + 1))
  {
    swift_bridgeObjectRelease_n();
    id v55 = v173;
    goto LABEL_18;
  }
  char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v55 = v173;
  if ((v56 & 1) == 0)
  {
    uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
    CRRegister.wrappedValue.getter();
    long long v63 = v176;
    id v64 = objc_msgSend(v55, sel_widgetStringValue);
    if (v64)
    {
      uint64_t v65 = v64;
      uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v68 = v67;

      if (*((void *)&v63 + 1))
      {
        if (v68)
        {
          if (v63 == __PAIR128__(v68, v66))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_46;
          }
          char v143 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v143)
          {
LABEL_46:
            CRRegister.wrappedValue.getter();
            long long v72 = v176;
            id v73 = objc_msgSend(v173, sel_contents);
            if (v73)
            {
              uint64_t v74 = v73;
              uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v77 = v76;

              if (*((void *)&v72 + 1))
              {
                uint64_t v78 = v160;
                if (v77)
                {
                  if (v72 == __PAIR128__(v77, v75))
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    goto LABEL_59;
                  }
                  char v144 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v144)
                  {
LABEL_59:
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
                    CRRegister.wrappedValue.getter();
                    uint64_t v80 = v176;
                    uint64_t v81 = *MEMORY[0x263F14790];
                    if (objc_msgSend(v173, sel_valueForAnnotationKey_, *MEMORY[0x263F14790]))
                    {
                      _bridgeAnyObjectToAny(_:)();
                      swift_unknownObjectRelease();
                    }
                    else
                    {
                      memset(v180, 0, sizeof(v180));
                    }
                    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v180, (uint64_t)&v176, &demangling cache variable for type metadata for Any?);
                    id v82 = v173;
                    if (v178 == 0.0)
                    {
                      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v176, &demangling cache variable for type metadata for Any?);
                    }
                    else if ((swift_dynamicCast() & 1) != 0 && v80 == (void)v175)
                    {
                      goto LABEL_68;
                    }
                    CRRegister.wrappedValue.getter();
                    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
                    objc_msgSend(v82, sel_setValue_forAnnotationKey_, isa, v81);

LABEL_68:
                    uint64_t v84 = v174 + *(int *)(v50 + 32);
                    uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
                    CRRegister.wrappedValue.getter();
                    id v86 = objc_msgSend(v82, sel_modificationDate);
                    uint64_t v87 = v164;
                    uint64_t v171 = v85;
                    uint64_t v172 = v84;
                    if (v86)
                    {
                      int v88 = v86;
                      uint64_t v89 = v163;
                      static Date._unconditionallyBridgeFromObjectiveC(_:)();

                      uint64_t v90 = 0;
                      uint64_t v91 = v169;
                    }
                    else
                    {
                      uint64_t v90 = 1;
                      uint64_t v91 = v169;
                      uint64_t v89 = v163;
                    }
                    uint64_t v92 = v165;
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v165 + 56))(v89, v90, 1, v87);
                    uint64_t v93 = v91 + *(int *)(v78 + 48);
                    uint64_t v94 = v166;
                    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v166, v169, &demangling cache variable for type metadata for Date?);
                    uint64_t v95 = v169;
                    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v89, v93, &demangling cache variable for type metadata for Date?);
                    uint64_t v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48);
                    if (v96(v95, 1, v87) == 1)
                    {
                      outlined destroy of StocksKitCurrencyCache.Provider?(v89, &demangling cache variable for type metadata for Date?);
                      uint64_t v95 = v169;
                      outlined destroy of StocksKitCurrencyCache.Provider?(v94, &demangling cache variable for type metadata for Date?);
                      if (v96(v93, 1, v87) == 1)
                      {
                        outlined destroy of StocksKitCurrencyCache.Provider?(v95, &demangling cache variable for type metadata for Date?);
                        uint64_t v97 = &selRef_allowsFingerDrawing;
                        goto LABEL_81;
                      }
                    }
                    else
                    {
                      uint64_t v98 = (uint64_t)v157;
                      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v95, (uint64_t)v157, &demangling cache variable for type metadata for Date?);
                      if (v96(v93, 1, v87) != 1)
                      {
                        uint64_t v107 = v165;
                        CGFloat v108 = v155;
                        (*(void (**)(char *, uint64_t, uint64_t))(v165 + 32))(v155, v93, v87);
                        lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
                        char v109 = dispatch thunk of static Equatable.== infix(_:_:)();
                        CGFloat v110 = *(void (**)(char *, uint64_t))(v107 + 8);
                        v110(v108, v164);
                        outlined destroy of StocksKitCurrencyCache.Provider?(v163, &demangling cache variable for type metadata for Date?);
                        outlined destroy of StocksKitCurrencyCache.Provider?(v166, &demangling cache variable for type metadata for Date?);
                        v110(v157, v164);
                        uint64_t v87 = v164;
                        outlined destroy of StocksKitCurrencyCache.Provider?(v169, &demangling cache variable for type metadata for Date?);
                        CGFloat v99 = v158;
                        uint64_t v97 = &selRef_allowsFingerDrawing;
                        if (v109) {
                          goto LABEL_81;
                        }
                        goto LABEL_77;
                      }
                      outlined destroy of StocksKitCurrencyCache.Provider?(v163, &demangling cache variable for type metadata for Date?);
                      outlined destroy of StocksKitCurrencyCache.Provider?(v166, &demangling cache variable for type metadata for Date?);
                      (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v98, v87);
                    }
                    outlined destroy of StocksKitCurrencyCache.Provider?(v95, (uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
                    CGFloat v99 = v158;
                    uint64_t v97 = &selRef_allowsFingerDrawing;
LABEL_77:
                    CRRegister.wrappedValue.getter();
                    if (v96((uint64_t)v99, 1, v87) == 1)
                    {
                      Class v100 = 0;
                    }
                    else
                    {
                      Class v100 = Date._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(char *, uint64_t))(v165 + 8))(v99, v87);
                    }
                    objc_msgSend(v173, sel_setModificationDate_, v100);

LABEL_81:
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
                    CRRegister.wrappedValue.getter();
                    uint64_t v101 = v176;
                    uint64_t v102 = PDFAnnotation.quadPoints.getter();
                    if (v101)
                    {
                      if (v102)
                      {
                        specialized static Array<A>.== infix(_:_:)(v101, v102, v103);
                        char v105 = v104;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        id v106 = v173;
                        if (v105)
                        {
LABEL_91:
                          CRRegister.wrappedValue.getter();
                          CGFloat v111 = *((double *)&v176 + 1);
                          CGFloat v112 = v177;
                          CGFloat v113 = v178;
                          CGFloat v114 = v179;
                          swift_bridgeObjectRelease();
                          objc_msgSend(v106, sel_bounds);
                          v182.origin.CGFloat x = v115;
                          v182.origin.CGFloat y = v116;
                          v182.size.CGFloat width = v117;
                          v182.size.CGFloat height = v118;
                          v181.origin.CGFloat x = v111;
                          v181.origin.CGFloat y = v112;
                          v181.size.CGFloat width = v113;
                          v181.size.CGFloat height = v114;
                          if (!CGRectEqualToRect(v181, v182))
                          {
                            CRRegister.wrappedValue.getter();
                            double v119 = *((double *)&v176 + 1);
                            double v120 = v177;
                            double v121 = v178;
                            double v122 = v179;
                            swift_bridgeObjectRelease();
                            objc_msgSend(v106, sel_setBounds_, v119, v120, v121, v122);
                          }
                          CRRegister.wrappedValue.getter();
                          long long v123 = v176;
                          uint64_t v124 = *MEMORY[0x263F147B0];
                          if (!objc_msgSend(v106, v97[134], *MEMORY[0x263F147B0]))
                          {
                            __break(1u);
                            return;
                          }
                          _bridgeAnyObjectToAny(_:)();
                          swift_unknownObjectRelease();
                          outlined init with take of Any(v180, &v176);
                          swift_dynamicCast();
                          if (v123 == v175)
                          {
                            swift_bridgeObjectRelease_n();
                            id v125 = v173;
                          }
                          else
                          {
                            char v126 = _stringCompareWithSmolCheck(_:_:expecting:)();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            id v125 = v173;
                            if ((v126 & 1) == 0)
                            {
                              CRRegister.wrappedValue.getter();
                              uint64_t v127 = (void *)MEMORY[0x21054D080](v176, *((void *)&v176 + 1));
                              swift_bridgeObjectRelease();
                              objc_msgSend(v125, sel_setValue_forAnnotationKey_, v127, v124);
                            }
                          }
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
                          CRRegister.wrappedValue.getter();
                          uint64_t v128 = (void *)v176;
                          if ((void)v176)
                          {
                            id v129 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, (void)v176);

                            id v130 = objc_msgSend(v125, sel_color);
                            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
                            char v131 = static NSObject.== infix(_:_:)();

                            uint64_t v132 = v162;
                            if ((v131 & 1) == 0) {
                              objc_msgSend(v125, sel_setColor_, v129);
                            }
                          }
                          else
                          {
                            uint64_t v132 = v162;
                          }
                          uint64_t v133 = (uint64_t)v161;
                          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
                          CRRegister.wrappedValue.getter();
                          uint64_t v134 = v159;
                          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v159 + 48))(v133, 1, v132) == 1)
                          {
                            outlined destroy of StocksKitCurrencyCache.Provider?(v133, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
                            return;
                          }
                          uint64_t v135 = v156;
                          (*(void (**)(char *, uint64_t, uint64_t))(v134 + 32))(v156, v133, v132);
                          id v136 = objc_msgSend(v125, sel_page);
                          if (v136)
                          {
                            uint64_t v137 = v136;
                            type metadata accessor for PaperKitPDFPage(0);
                            id v138 = (id)swift_dynamicCastClass();
                            if (v138)
                            {
                              uint64_t v139 = v152;
                              WeakRef.id.getter();
                              id v140 = objc_msgSend(v138, sel_annotations);
                              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
                              unint64_t v141 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                              MEMORY[0x270FA5388](v142);
                              *(&v151 - 2) = (uint64_t)v139;
                              id v138 = specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperKitPDFPage.annotationFor(id:), (uint64_t)(&v151 - 4), v141);

                              swift_bridgeObjectRelease();
                              id v125 = v173;
                              (*(void (**)(char *, uint64_t))(v153 + 8))(v139, v154);
                            }
                            else
                            {
                            }
                          }
                          else
                          {
                            id v138 = 0;
                          }
                          id v145 = objc_msgSend(v125, sel_popup);
                          if (v145)
                          {
                            uint64_t v146 = v145;
                            if (!v138)
                            {

LABEL_122:
                              objc_msgSend(v125, sel_setPopup_, v138);
LABEL_123:

                              goto LABEL_124;
                            }
                            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
                            id v138 = v138;
                            id v147 = v146;
                            char v148 = static NSObject.== infix(_:_:)();

                            if (v148) {
                              goto LABEL_123;
                            }
                          }
                          else if (!v138)
                          {
LABEL_124:
                            (*(void (**)(char *, uint64_t))(v134 + 8))(v135, v132);
                            return;
                          }
                          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
                          id v138 = v138;
                          id v149 = v125;
                          char v150 = static NSObject.== infix(_:_:)();

                          if (v150) {
                            goto LABEL_123;
                          }
                          goto LABEL_122;
                        }
LABEL_90:
                        CRRegister.wrappedValue.getter();
                        PDFAnnotation.quadPoints.setter(v176);
                        goto LABEL_91;
                      }
                    }
                    else if (!v102)
                    {
                      id v106 = v173;
                      goto LABEL_91;
                    }
                    swift_bridgeObjectRelease();
                    id v106 = v173;
                    goto LABEL_90;
                  }
LABEL_55:
                  CRRegister.wrappedValue.getter();
                  if (*((void *)&v176 + 1))
                  {
                    uint64_t v79 = (void *)MEMORY[0x21054D080](v176, *((void *)&v176 + 1));
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    uint64_t v79 = 0;
                  }
                  objc_msgSend(v173, sel_setContents_, v79);

                  goto LABEL_59;
                }
              }
              else
              {
                uint64_t v78 = v160;
                if (!v77) {
                  goto LABEL_59;
                }
              }
            }
            else
            {
              uint64_t v78 = v160;
              if (!*((void *)&v72 + 1)) {
                goto LABEL_59;
              }
            }
            swift_bridgeObjectRelease();
            goto LABEL_55;
          }
LABEL_42:
          CRRegister.wrappedValue.getter();
          if (*((void *)&v176 + 1))
          {
            uint64_t v71 = (void *)MEMORY[0x21054D080](v176, *((void *)&v176 + 1));
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v71 = 0;
          }
          objc_msgSend(v173, sel_setWidgetStringValue_, v71);

          goto LABEL_46;
        }
      }
      else if (!v68)
      {
        goto LABEL_46;
      }
    }
    else if (!*((void *)&v63 + 1))
    {
      goto LABEL_46;
    }
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
LABEL_18:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  long long v57 = v176;
  id v58 = objc_msgSend(v55, sel_widgetStringValue);
  if (!v58)
  {
    if (!*((void *)&v57 + 1)) {
      return;
    }
    goto LABEL_31;
  }
  uint64_t v59 = v58;
  uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v62 = v61;

  if (!*((void *)&v57 + 1))
  {
    if (!v62) {
      return;
    }
    goto LABEL_31;
  }
  if (!v62)
  {
LABEL_31:
    swift_bridgeObjectRelease();
LABEL_32:
    CRRegister.wrappedValue.getter();
    if (*((void *)&v176 + 1))
    {
      uint64_t v69 = (void *)MEMORY[0x21054D080](v176, *((void *)&v176 + 1));
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v69 = 0;
    }
    objc_msgSend(v173, sel_setWidgetStringValue_, v69);

    return;
  }
  if (v57 == __PAIR128__(v62, v60))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v70 & 1) == 0) {
    goto LABEL_32;
  }
}

id specialized PDFAnnotationElement.newPDFAnnotation<A>(in:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  CRRegister.wrappedValue.getter();
  double v3 = *((double *)&v10 + 1);
  long long v5 = v11;
  double v4 = *(double *)&v12;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  uint64_t v6 = (void *)MEMORY[0x21054D080](v14[0], v14[1]);
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasElementPDFAnnotation()), sel_initWithBounds_forType_withProperties_, v6, 0, v3, v5, v4);

  v14[0] = 0x8000000000000000;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v2, 1, 1, v8);
  long long v10 = xmmword_20C834980;
  long long v11 = 0u;
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  specialized PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:capsule:options:)(v14, v2, v7);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  return v7;
}

void specialized PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v5 = *a1;
  type metadata accessor for Capsule();
  swift_getWitnessTable();
  specialized PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:capsule:options:)(&v5, a2, a3);
}

uint64_t specialized PDFAnnotationElement.applyDifference<A, B>(id:in:from:)(uint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v126 = a6;
  id v125 = a4;
  uint64_t v124 = a2;
  uint64_t v123 = a1;
  uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  uint64_t v117 = *(void *)(v112 - 8);
  MEMORY[0x270FA5388](v112);
  CGFloat v115 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  CGFloat v116 = (char *)&v94 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x270FA5388](v9 - 8);
  double v119 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v114 = *(void *)(v122 - 8);
  MEMORY[0x270FA5388](v122);
  CGFloat v113 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  double v121 = (char *)&v94 - v13;
  uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  uint64_t v118 = *(void *)(v110 - 8);
  MEMORY[0x270FA5388](v110);
  CGFloat v111 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  double v120 = (char *)&v94 - v16;
  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  uint64_t v108 = *(void *)(v109 - 8);
  MEMORY[0x270FA5388](v109);
  id v106 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v107 = (char *)&v94 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v20 - 8);
  char v105 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  uint64_t v103 = *(void *)(v104 - 8);
  MEMORY[0x270FA5388](v104);
  uint64_t v101 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v102 = (char *)&v94 - v24;
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v99 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  uint64_t v97 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v98 = (char *)&v94 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t v96 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v95 = (char *)&v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v94 = (char *)&v94 - v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFAnnotationElement?);
  MEMORY[0x270FA5388](v32 - 8);
  uint64_t v34 = (char *)&v94 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for CRKeyPath();
  uint64_t v36 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v38 = (char *)&v94 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  uint64_t v40 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  unint64_t v42 = (char *)&v94 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for PDFAnnotationElement();
  uint64_t v44 = *(void *)(v43 - 8);
  double v45 = MEMORY[0x270FA5388](v43);
  uint64_t v127 = (uint64_t)&v94 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v36 + 16))(v38, v123, v35, v45);
  lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  WeakRef.init(id:)();
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v34, 1, v43) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, &demangling cache variable for type metadata for PDFAnnotationElement?);
  }
  outlined init with take of PDFAnnotationElement((uint64_t)v34, v127);
  CRRegister.wrappedValue.getter();
  uint64_t v48 = (uint64_t)v133;
  uint64_t v49 = *(void *)&v134;
  uint64_t v50 = v94;
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)(v48, v49);
  swift_bridgeObjectRelease();
  uint64_t v51 = v96;
  id v125 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
  uint64_t v52 = v95;
  v125(v95, v50, v28);
  CRRegister.projectedValue.setter();
  uint64_t v124 = *(void (**)(char *, uint64_t))(v51 + 8);
  v124(v50, v28);
  CRRegister.wrappedValue.getter();
  uint64_t v53 = (uint64_t)v133;
  uint64_t v54 = *(void *)&v134;
  uint64_t v126 = v43;
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)(v53, v54);
  swift_bridgeObjectRelease();
  v125(v52, v50, v28);
  CRRegister.projectedValue.setter();
  v124(v50, v28);
  uint64_t v55 = v100;
  CRRegister.wrappedValue.getter();
  char v56 = v133;
  long long v57 = v98;
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)(v56);

  uint64_t v58 = v99;
  (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v97, v57, v55);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v55);
  uint64_t v59 = v104;
  CRRegister.wrappedValue.getter();
  uint64_t v60 = v133;
  unint64_t v61 = v102;
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  if (v133 != v60)
  {
    uint64_t v133 = v60;
    CRRegister.value.setter();
  }
  uint64_t v62 = v103;
  (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v101, v61, v59);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v59);
  uint64_t v63 = (uint64_t)v105;
  uint64_t v64 = v109;
  CRRegister.wrappedValue.getter();
  uint64_t v65 = v107;
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)(v63);
  outlined destroy of StocksKitCurrencyCache.Provider?(v63, &demangling cache variable for type metadata for Date?);
  uint64_t v66 = v108;
  (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v106, v65, v64);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v64);
  uint64_t v67 = v110;
  CRRegister.wrappedValue.getter();
  uint64_t v68 = (uint64_t)v133;
  CGFloat v69 = v134;
  CGFloat v70 = v135;
  CGFloat v71 = v136;
  CGFloat v72 = v137;
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  CGFloat v74 = v129;
  CGFloat v75 = v130;
  CGFloat v76 = v131;
  CGFloat v77 = v132;
  uint64_t v78 = v112;
  uint64_t v79 = v117;
  uint64_t v80 = v116;
  uint64_t v81 = (uint64_t)v119;
  if (v128)
  {
    uint64_t v82 = v118;
    if (!v68 || (specialized static Array<A>.== infix(_:_:)(v128, v68, v73), (v83 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v82 = v118;
    if (v68) {
      goto LABEL_12;
    }
  }
  v138.origin.CGFloat x = v74;
  v138.origin.CGFloat y = v75;
  v138.size.CGFloat width = v76;
  v138.size.CGFloat height = v77;
  v139.origin.CGFloat x = v69;
  v139.origin.CGFloat y = v70;
  v139.size.CGFloat width = v71;
  v139.size.CGFloat height = v72;
  BOOL v84 = CGRectEqualToRect(v138, v139);
  swift_bridgeObjectRelease();
  if (v84)
  {
    swift_bridgeObjectRelease();
    uint64_t v85 = v120;
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v128 = v68;
  double v129 = v69;
  double v130 = v70;
  double v131 = v71;
  double v132 = v72;
  uint64_t v85 = v120;
  CRRegister.value.setter();
LABEL_13:
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v111, v85, v67);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v85, v67);
  CRRegister.wrappedValue.getter();
  uint64_t v87 = v133;
  double v86 = v134;
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  if (v133 == v87 && *(void *)&v134 == *(void *)&v86)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v88 = v122;
    uint64_t v89 = v114;
    uint64_t v90 = v121;
    uint64_t v91 = v113;
  }
  else
  {
    char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v89 = v114;
    uint64_t v91 = v113;
    if (v92)
    {
      swift_bridgeObjectRelease();
      uint64_t v81 = (uint64_t)v119;
      uint64_t v88 = v122;
      uint64_t v90 = v121;
    }
    else
    {
      uint64_t v133 = v87;
      double v134 = v86;
      uint64_t v88 = v122;
      uint64_t v90 = v121;
      CRRegister.value.setter();
      uint64_t v81 = (uint64_t)v119;
    }
  }
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v91, v90, v88);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v88);
  uint64_t v93 = v127;
  CRRegister.wrappedValue.getter();
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)(v81);
  outlined destroy of StocksKitCurrencyCache.Provider?(v81, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v115, v80, v78);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v78);
  return outlined destroy of PDFAnnotationElement(v93);
}

uint64_t PDFAnnotationElement.render<A>(in:id:capsule:options:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PDFAnnotationElement.AnnotationShape.CodingKeys()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [PDFAnnotationElement.AnnotationShape.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [PDFAnnotationElement.AnnotationShape.CodingKeys]);
}

uint64_t base witness table accessor for CRStruct_Base_8 in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
}

uint64_t base witness table accessor for CRStruct_Base in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
}

uint64_t associated type witness table accessor for CRStruct_Base_8.Type_1 : CRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<String?> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_8.Type_4 : CRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<Int> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
}

uint64_t associated type witness table accessor for CRStruct_Base_8.Type_5 : CRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<Date?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Date?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_8.Type_6 : CRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<PDFAnnotationElement.AnnotationShape> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
}

uint64_t associated type witness table accessor for CRStruct_Base_8.Type_7 : CRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<String> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
}

uint64_t associated type witness table accessor for CRStruct_Base_8.Type_8 : CRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<WeakRef<PDFAnnotationElement>?> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
}

uint64_t base witness table accessor for CRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
}

uint64_t base witness table accessor for CRMergeable in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
}

uint64_t base witness table accessor for CRType in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_8<PDFAnnotationElement> and conformance CRStructMergeableDelta_8<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_8<PDFAnnotationElement>);
}

uint64_t base witness table accessor for CRCodable in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
}

double sub_20C382284@<D0>(_OWORD *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_20C3822D0()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C382314()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C382370()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C3823CC()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C382420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_17Tm(a1, a2, a3, MEMORY[0x263F32C30]);
}

uint64_t sub_20C38243C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_17Tm(a1, a2, a3, MEMORY[0x263F32C38]);
}

uint64_t keypath_get_17Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for PDFAnnotationElement();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  return a4(v5);
}

uint64_t sub_20C3824B8()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C382514()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C382568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_29Tm(a1, a2, a3, MEMORY[0x263F32C30]);
}

uint64_t sub_20C382584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_29Tm(a1, a2, a3, MEMORY[0x263F32C38]);
}

uint64_t keypath_get_29Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for PDFAnnotationElement();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  return a4(v5);
}

__n128 sub_20C3825F8@<Q0>(__n128 *a1@<X8>)
{
  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  __asm { FMOV            V0.2D, #1.0 }
  a1[1] = result;
  return result;
}

void sub_20C38260C(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for PDFAnnotationElement(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v33 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[7];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    uint64_t v21 = a3[9];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
    uint64_t v25 = a3[10];
    uint64_t v26 = (char *)a1 + v25;
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
    uint64_t v29 = a3[11];
    uint64_t v30 = (char *)a1 + v29;
    uint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PDFAnnotationElement(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = a1 + a2[8];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = a1 + a2[9];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  uint64_t v14 = a1 + a2[10];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  uint64_t v16 = a1 + a2[11];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PDFAnnotationElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PDFAnnotationElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 24))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 24))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 24))(v29, v30, v31);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PDFAnnotationElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for PDFAnnotationElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 40))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 40))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 40))(v29, v30, v31);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PDFAnnotationElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C383508);
}

uint64_t sub_20C383508(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_16:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_15:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_16;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_15;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[8];
    goto LABEL_15;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v12 = *(void *)(v16 - 8);
    uint64_t v13 = a3[9];
    goto LABEL_15;
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v8 = v17;
    uint64_t v12 = *(void *)(v17 - 8);
    uint64_t v13 = a3[10];
    goto LABEL_15;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a2)
  {
    uint64_t v8 = v18;
    uint64_t v12 = *(void *)(v18 - 8);
    uint64_t v13 = a3[11];
    goto LABEL_15;
  }
  unint64_t v20 = *(void *)(a1 + a3[12]);
  if (v20 >= 0xFFFFFFFF) {
    LODWORD(v2AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = -1;
  }
  return (v20 + 1);
}

uint64_t storeEnumTagSinglePayload for PDFAnnotationElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C3837C8);
}

uint64_t sub_20C3837C8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[6];
    }
    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[7];
      }
      else
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
        if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
        {
          uint64_t v10 = v17;
          uint64_t v14 = *(void *)(v17 - 8);
          uint64_t v15 = a4[8];
        }
        else
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
          if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a3)
          {
            uint64_t v10 = v18;
            uint64_t v14 = *(void *)(v18 - 8);
            uint64_t v15 = a4[9];
          }
          else
          {
            uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
            if (*(_DWORD *)(*(void *)(v19 - 8) + 84) == a3)
            {
              uint64_t v10 = v19;
              uint64_t v14 = *(void *)(v19 - 8);
              uint64_t v15 = a4[10];
            }
            else
            {
              uint64_t result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
              if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
              {
                *(void *)(a1 + a4[12]) = (a2 - 1);
                return result;
              }
              uint64_t v10 = result;
              uint64_t v14 = *(void *)(result - 8);
              uint64_t v15 = a4[11];
            }
          }
        }
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for PDFAnnotationElement()
{
  type metadata accessor for CRRegister<String?>(319, &lazy cache variable for type metadata for CRRegister<String?>, &demangling cache variable for type metadata for String?, &lazy protocol witness table cache variable for type String? and conformance <A> A?);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<WeakRef<PDFAnnotationElement>?>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Color?>, (uint64_t *)&demangling cache variable for type metadata for Color?, (void (*)(void))lazy protocol witness table accessor for type Color? and conformance <A> A?);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<Int>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Int>);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<String?>(319, &lazy cache variable for type metadata for CRRegister<Date?>, &demangling cache variable for type metadata for Date?, &lazy protocol witness table cache variable for type Date? and conformance <A> A?);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CRRegister<PDFAnnotationElement.AnnotationShape>();
          if (v4 <= 0x3F)
          {
            type metadata accessor for CRRegister<Int>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<String>);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CRRegister<WeakRef<PDFAnnotationElement>?>(319, &lazy cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?, (void (*)(void))lazy protocol witness table accessor for type WeakRef<PDFAnnotationElement>? and conformance <A> A?);
              if (v6 <= 0x3F) {
                swift_initStructMetadata();
              }
            }
          }
        }
      }
    }
  }
}

void type metadata accessor for CRRegister<WeakRef<PDFAnnotationElement>?>(uint64_t a1, unint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    a4();
    unint64_t v6 = type metadata accessor for CRRegister();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for CRRegister<String?>(uint64_t a1, unint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    lazy protocol witness table accessor for type String? and conformance <A> A?(a4, a3);
    unint64_t v7 = type metadata accessor for CRRegister();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for CRRegister<PDFAnnotationElement.AnnotationShape>()
{
  if (!lazy cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>)
  {
    lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape();
    unint64_t v0 = type metadata accessor for CRRegister();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
    }
  }
}

void type metadata accessor for CRRegister<Int>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for CRRegister();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t destroy for PDFAnnotationElement.AnnotationShape()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PDFAnnotationElement.AnnotationShape(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PDFAnnotationElement.AnnotationShape(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PDFAnnotationElement.AnnotationShape(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PDFAnnotationElement.AnnotationShape(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PDFAnnotationElement.AnnotationShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PDFAnnotationElement.AnnotationShape()
{
  return &type metadata for PDFAnnotationElement.AnnotationShape;
}

unsigned char *storeEnumTagSinglePayload for PDFAnnotationElement.AnnotationShape.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C384160);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PDFAnnotationElement.AnnotationShape.CodingKeys()
{
  return &type metadata for PDFAnnotationElement.AnnotationShape.CodingKeys;
}

uint64_t partial apply for closure #1 in PaperKitPDFPage.annotationFor(id:)(uint64_t a1)
{
  return closure #1 in PaperKitPDFPage.annotationFor(id:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_20C38420C()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v4 + v6 + 8) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = v0 + v3;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>);
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }

  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v0 + v7, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0 + v7, v12);
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((v7 + v8) & 0xFFFFFFFFFFFFFFF8) + 24, v2 | v6 | 7);
}

void partial apply for specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(void *a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  uint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + v1;
  uint64_t v10 = *(void *)(v1 + v5);
  int v11 = *(unsigned __int8 *)(v1 + v8);
  uint64_t v12 = *(void *)(v9 + 8);
  uint64_t v13 = *(void *)(v9 + 16);
  specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(a1, v1 + v4, v10, v1 + v7, v11, v12, v13);
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(a1, v1 + v4, *(void *)(v1 + v5), v1 + v7, *(unsigned __int8 *)(v1 + v7 + *(void *)(v6 + 64)), *(void *)(((v7 + *(void *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(void *)(((v7 + *(void *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 16), &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>, (uint64_t)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_9<TaggedCanvasElement>> and conformance CRRegister<A>, (uint64_t)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x263F32C58], (void (*)(uint64_t, uint64_t, uint64_t))lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie);
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t vars8;

  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>?)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  uint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + v1;
  uint64_t v10 = *(void *)(v1 + v5);
  int v11 = *(unsigned __int8 *)(v1 + v8);
  uint64_t v12 = *(void *)(v9 + 8);
  uint64_t v13 = *(void *)(v9 + 16);
  specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(a1, v1 + v4, v10, v1 + v7, v11, v12, v13);
}

unint64_t outlined copy of PaperDocument.PDFDocumentUse(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1) {
      return result;
    }
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return (unint64_t)(id)result;
}

uint64_t outlined init with take of PDFAnnotationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PDFAnnotationElement();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PDFAnnotationElement();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(long long *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    *((void *)&v12 + 1) = swift_getObjectType();
    *(void *)&long long v11 = a2;
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  swift_unknownObjectRetain();
  v9(&v11, a3, a4, a5);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v11, &demangling cache variable for type metadata for Any?);
}

uint64_t UITextView._ppk_registerUndo(_:selection:undoManager:paperIdentifier:analyticsEvents:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v55 = a8;
  uint64_t v53 = a7;
  uint64_t v59 = a6;
  int v58 = a5;
  uint64_t v57 = a4;
  uint64_t v56 = a3;
  uint64_t v54 = a2;
  uint64_t v52 = type metadata accessor for CapsuleUndoAction();
  uint64_t v51 = *(void *)(v52 - 8);
  uint64_t v10 = *(void *)(v51 + 64);
  v11.n128_f64[0] = MEMORY[0x270FA5388](v52);
  uint64_t v50 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = (void *)MEMORY[0x263F8EE78];
  uint64_t v68 = (void *)MEMORY[0x263F8EE78];
  uint64_t v13 = *(void *)(a9 + 16);
  if (v13)
  {
    uint64_t v48 = v10;
    uint64_t v49 = a1;
    uint64_t v14 = a9 + 32;
    v47[1] = a9;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of FindResult(v14, (uint64_t)v65);
      uint64_t v16 = v66;
      uint64_t v15 = v67;
      __swift_project_boxed_opaque_existential_1(v65, v66);
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, double))(v15 + 40);
      uint64_t v18 = type metadata accessor for Optional();
      uint64_t v60 = v47;
      uint64_t v19 = *(void *)(v18 - 8);
      double v20 = MEMORY[0x270FA5388](v18);
      uint64_t v22 = (char *)v47 - v21;
      v17(v16, v15, v20);
      uint64_t v23 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, v16) == 1)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
        uint64_t v63 = 0;
        long long v61 = 0u;
        long long v62 = 0u;
      }
      else
      {
        *((void *)&v62 + 1) = v16;
        uint64_t v63 = v15;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v61);
        (*(void (**)(uint64_t *, char *, uint64_t))(v23 + 32))(boxed_opaque_existential_1, v22, v16);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
      if (*((void *)&v62 + 1))
      {
        outlined init with take of FindResult(&v61, (uint64_t)v64);
        outlined init with take of FindResult(v64, (uint64_t)&v61);
        uint64_t v25 = v68;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
          uint64_t v68 = v25;
        }
        unint64_t v27 = v25[2];
        unint64_t v26 = v25[3];
        if (v27 >= v26 >> 1) {
          uint64_t v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v25);
        }
        uint64_t v28 = *((void *)&v62 + 1);
        uint64_t v29 = v63;
        uint64_t v30 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v61, *((uint64_t *)&v62 + 1));
        double v31 = MEMORY[0x270FA5388](v30);
        uint64_t v33 = (char *)v47 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v34 + 16))(v33, v31);
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v33, (uint64_t *)&v68, v28, v29);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v61, (uint64_t *)&demangling cache variable for type metadata for AnalyticsEvent?);
      }
      v14 += 40;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    long long v12 = v68;
    a1 = v49;
    uint64_t v10 = v48;
  }
  uint64_t v35 = v51;
  uint64_t v36 = v50;
  uint64_t v37 = a1;
  uint64_t v38 = v52;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v51 + 16))(v50, v37, v52, v11);
  unint64_t v39 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  unint64_t v40 = (v39 + v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = swift_allocObject();
  uint64_t v42 = v55;
  *(void *)(v41 + 16) = v53;
  *(void *)(v41 + 24) = v42;
  (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v41 + v39, v36, v38);
  unint64_t v43 = v41 + ((v39 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v44 = v54;
  uint64_t v45 = v56;
  *(void *)unint64_t v43 = v54;
  *(void *)(v43 + 8) = v45;
  *(void *)(v43 + 16) = v57;
  *(unsigned char *)(v43 + 24) = v58;
  *(void *)(v41 + v4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v12;
  swift_bridgeObjectRetain();
  outlined copy of CanvasMembers?(v44);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextView);
  NSUndoManager.registerUndo<A>(withTarget:handler:)();
  return swift_release();
}

uint64_t UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = v6;
  id v14 = objc_msgSend(v7, sel_textStorage);
  uint64_t v15 = *MEMORY[0x263F814A0];
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v7;
  *(unsigned char *)(v16 + 24) = a3;
  *(void *)(v16 + 32) = a5;
  *(void *)(v16 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a6;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for closure #1 in UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:);
  *(void *)(v17 + 24) = v16;
  v21[4] = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  v21[5] = v17;
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 1107296256;
  void v21[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v21[3] = &block_descriptor_37_0;
  uint64_t v18 = _Block_copy(v21);
  id v19 = v7;
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateAttribute_inRange_options_usingBlock_, v15, a1, a2, a4, v18);

  _Block_release(v18);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a4) {
    __break(1u);
  }
  return result;
}

void closure #1 in UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6, uint64_t a7)
{
  outlined init with copy of Any?(a1, (uint64_t)v29);
  if (!v30)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v29, &demangling cache variable for type metadata for Any?);
    return;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSTextAttachment);
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  id v13 = objc_msgSend(v28, sel_fileType);
  if (!v13) {
    goto LABEL_18;
  }
  id v14 = v13;
  uint64_t v26 = a7;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0) {
      goto LABEL_18;
    }
  }
  id v21 = objc_msgSend(a5, sel__pk_viewProviderForAttachment_atCharacterIndex_createIfNeeded_, v28, a2, a6 & 1, v26);
  if (v21)
  {
    uint64_t v22 = v21;
    id v23 = objc_msgSend(v21, sel_view);
    if (v23)
    {
      uint64_t v24 = v23;
      type metadata accessor for PaperTextAttachmentView();
      uint64_t v25 = swift_dynamicCastClass();
      if (v25)
      {
        v27(v25, a2, a3, a4);

        return;
      }
    }
  }
LABEL_18:
}

uint64_t UITextView.enumeratePaperDocumentTextAttachments(in:createIfNeeded:options:using:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = v6;
  id v14 = objc_msgSend(v7, sel_textStorage);
  uint64_t v15 = *MEMORY[0x263F814A0];
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v7;
  *(unsigned char *)(v16 + 24) = a3;
  *(void *)(v16 + 32) = a5;
  *(void *)(v16 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a6;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for closure #1 in UITextView.enumeratePaperDocumentTextAttachments(in:createIfNeeded:options:using:);
  *(void *)(v17 + 24) = v16;
  v21[4] = _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0;
  v21[5] = v17;
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 1107296256;
  void v21[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v21[3] = &block_descriptor_6;
  uint64_t v18 = _Block_copy(v21);
  id v19 = v7;
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateAttribute_inRange_options_usingBlock_, v15, a1, a2, a4, v18);

  _Block_release(v18);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a4) {
    __break(1u);
  }
  return result;
}

void closure #1 in UITextView.enumeratePaperDocumentTextAttachments(in:createIfNeeded:options:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6, uint64_t a7, uint64_t a8)
{
  outlined init with copy of Any?(a1, (uint64_t)v32);
  if (!v33)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v32, &demangling cache variable for type metadata for Any?);
    return;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSTextAttachment);
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  id v15 = objc_msgSend(v31, sel_fileType);
  if (!v15) {
    goto LABEL_22;
  }
  uint64_t v16 = v15;
  uint64_t v29 = a8;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  if (v17 == 0xD000000000000013 && v19 == 0x800000020C851310)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0) {
      goto LABEL_22;
    }
  }
  id v21 = objc_msgSend(a5, sel__pk_viewProviderForAttachment_atCharacterIndex_createIfNeeded_, v31, a2, a6 & 1, v29, a7);
  if (v21)
  {
    uint64_t v22 = v21;
    id v23 = objc_msgSend(v21, sel_view);
    if (v23)
    {
      uint64_t v24 = v23;
      swift_getObjectType();
      if (swift_conformsToProtocol2()) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      if (v25)
      {
        id v26 = v24;
        unint64_t v27 = specialized UIView.firstDescendent(where:)(v25);

        if (v27)
        {
          type metadata accessor for PaperDocumentView();
          uint64_t v28 = swift_dynamicCastClass();
          if (v28)
          {
            v30(v28, a2, a3, a4);

            return;
          }
        }
      }
      else
      {
      }
    }
  }
LABEL_22:
}

uint64_t sub_20C385418()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #1 in UITextView.enumeratePaperDocumentTextAttachments(in:createIfNeeded:options:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  closure #1 in UITextView.enumeratePaperDocumentTextAttachments(in:createIfNeeded:options:using:)(a1, a2, a3, a4, *(void **)(v4 + 16), *(unsigned char *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40));
}

uint64_t sub_20C385460()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void closure #2 in UITextView._ppk_registerUndo(_:selection:undoManager:paperIdentifier:analyticsEvents:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v33 = 0;
  id v13 = objc_msgSend(a1, sel_textStorage);
  uint64_t v14 = *MEMORY[0x263F814A0];
  id v15 = objc_msgSend(a1, sel_textStorage);
  id v16 = objc_msgSend(v15, sel_length);

  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a2;
  v17[3] = a3;
  v17[4] = &v33;
  v17[5] = a1;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = closure #1 in UITextView._ppk_paperTextAttachmentView(from:)partial apply;
  *(void *)(v18 + 24) = v17;
  id v31 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  uint64_t v32 = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  uint64_t v30 = &block_descriptor_27;
  uint64_t v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v20 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v13, sel_enumerateAttribute_inRange_options_usingBlock_, v14, 0, v16, 0, v19);

  _Block_release(v19);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v16)
  {
    __break(1u);
  }
  else
  {
    id v21 = v33;
    uint64_t v22 = swift_release();
    if (v21)
    {
      MEMORY[0x270FA5388](v22);
      specialized Canvas.undoable(newChange:persistSelection:action:)(1, v23, (uint64_t (*)(double))partial apply for specialized closure #1 in Canvas.applyUndo(_:selection:));
      if (a5)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        AnyCanvas.selection.setter(a5, a6, a7, a8 & 1);
      }
    }
    uint64_t v24 = *(void *)(a9 + 16);
    if (v24)
    {
      uint64_t v25 = a9 + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of FindResult(v25, (uint64_t)aBlock);
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)aBlock, (uint64_t)v30);
        AnalyticsEvent.send()();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
        v25 += 40;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
    }
  }
}

void closure #1 in UITextView._ppk_registerUndo(_:undoManager:paperIdentifier:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  uint64_t v19 = 0;
  id v7 = objc_msgSend(a1, sel_textStorage);
  uint64_t v8 = *MEMORY[0x263F814A0];
  id v9 = objc_msgSend(a1, sel_textStorage);
  id v10 = objc_msgSend(v9, sel_length);

  __n128 v11 = (void *)swift_allocObject();
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = &v19;
  v11[5] = a1;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for closure #1 in UITextView._ppk_paperTextAttachmentView(from:);
  *(void *)(v12 + 24) = v11;
  aBlock[4] = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  void aBlock[5] = v12;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  void aBlock[3] = &block_descriptor_13_0;
  id v13 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v14 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_enumerateAttribute_inRange_options_usingBlock_, v8, 0, v10, 0, v13);

  _Block_release(v13);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    id v16 = v19;
    swift_release();
    if (v16)
    {
      a4(v16);
    }
  }
}

void closure #1 in UITextView._ppk_paperTextAttachmentView(from:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6, void **a7, void *a8)
{
  outlined init with copy of Any?(a1, (uint64_t)v27);
  if (!v28)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for Any?);
    return;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSTextAttachment);
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  id v14 = v26;
  uint64_t v15 = swift_dynamicCastObjCProtocolConditional();
  if (v15)
  {
    id v16 = (void *)v15;
    id v14 = v26;
    id v17 = objc_msgSend(v16, sel__paperIdentifier, &unk_26C1F1D20);
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    if (v18 == a5 && v20 == a6)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0)
      {
LABEL_15:

        goto LABEL_16;
      }
    }
    id v22 = objc_msgSend(a8, sel__pk_viewProviderForAttachment_atCharacterIndex_createIfNeeded_, v14, a2, 1);
    if (v22)
    {
      char v23 = v22;
      id v24 = objc_msgSend(v22, sel_view);

      if (!v24)
      {
LABEL_13:
        id v22 = 0;
        goto LABEL_14;
      }
      type metadata accessor for PaperTextAttachmentView();
      id v22 = (id)swift_dynamicCastClass();
      if (!v22)
      {

        goto LABEL_13;
      }
    }
LABEL_14:
    uint64_t v25 = *a7;
    *a7 = v22;

    *a4 = 1;
    goto LABEL_15;
  }
LABEL_16:
}

void specialized closure #1 in Canvas.applyUndo(_:selection:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CapsuleUndoAction();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a2, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  id v9 = *(void **)(a1 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  id v10 = v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  Capsule.apply(_:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for CapsuleUndoAction?);
  swift_endAccess();
}

void partial apply for closure #1 in UITextView._ppk_paperTextAttachmentView(from:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  closure #1 in UITextView._ppk_paperTextAttachmentView(from:)(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void ***)(v4 + 32), *(void **)(v4 + 40));
}

uint64_t sub_20C385D84()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C385D94()
{
  uint64_t v1 = type metadata accessor for CapsuleUndoAction();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  if (*(void *)(v0 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8)))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((v5 + 39) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void partial apply for closure #2 in UITextView._ppk_registerUndo(_:selection:undoManager:paperIdentifier:analyticsEvents:)(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CapsuleUndoAction() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  closure #2 in UITextView._ppk_registerUndo(_:selection:undoManager:paperIdentifier:analyticsEvents:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + v4, *(void *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 24), *(void *)(v1 + ((v5 + 39) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t outlined copy of CanvasMembers?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t objectdestroy_5Tm()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_20C386028()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for specialized closure #1 in Canvas.applyUndo(_:selection:)()
{
  specialized closure #1 in Canvas.applyUndo(_:selection:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void partial apply for closure #1 in UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  closure #1 in UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:)(a1, a2, a3, a4, *(void **)(v4 + 16), *(unsigned char *)(v4 + 24), *(void *)(v4 + 32));
}

uint64_t sub_20C386050()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t GraphElement.visitReferences(_:)()
{
  return CROrderedSet.visitReferences(_:)();
}

uint64_t type metadata accessor for GraphElement()
{
  uint64_t result = type metadata singleton initialization cache for GraphElement;
  if (!type metadata singleton initialization cache for GraphElement) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t GraphElement.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for CRKeyPath();
  uint64_t v9 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  uint64_t v81 = (char *)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  BOOL v84 = (char *)v65 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v80 = (char *)v65 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: CRKeyPath)?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v78 = (char *)v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v76 = (uint64_t)v65 - v18;
  outlined init with copy of GraphElement(v2, a2, (uint64_t (*)(void))type metadata accessor for GraphElement);
  uint64_t v73 = a1;
  if (!a1)
  {
LABEL_33:
    uint64_t v64 = type metadata accessor for GraphElement();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<GraphableExpression>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
    CRType.copy(renamingReferences:)();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 40))(a2 + *(int *)(v64 + 28), v8, v5);
  }
  v65[1] = v2;
  uint64_t v66 = v8;
  uint64_t v67 = v6;
  uint64_t v68 = v5;
  uint64_t v69 = a2;
  uint64_t v19 = *(void *)(v73 + 64);
  uint64_t v70 = v73 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(v73 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  char v23 = (void (**)(char *, char *, uint64_t))(v9 + 16);
  int64_t v71 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v72 = v9;
  CGFloat v74 = (void (**)(char *, uint64_t))(v9 + 8);
  CGFloat v75 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
  v65[0] = v71 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v79 = 0;
  uint64_t v25 = (void *)&demangling cache variable for type metadata for Image?;
  id v26 = &off_2640D6000;
  unint64_t v27 = v80;
  char v83 = (void (**)(char *, char *, uint64_t))(v9 + 16);
  uint64_t v28 = v77;
  while (1)
  {
    uint64_t v29 = (uint64_t)v78;
    if (v22)
    {
      uint64_t v30 = v26;
      unint64_t v31 = __clz(__rbit64(v22));
      uint64_t v32 = (v22 - 1) & v22;
      unint64_t v33 = v31 | (v79 << 6);
LABEL_8:
      uint64_t v34 = v73;
      unint64_t v35 = *(void *)(v72 + 72) * v33;
      uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v72 + 16);
      char v23 = v83;
      v36(v78, *(void *)(v73 + 48) + v35, v28);
      unint64_t v37 = *(void *)(v34 + 56) + v35;
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: CRKeyPath));
      v36((char *)(v29 + *(int *)(v38 + 48)), v37, v28);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v29, 0, 1, v38);
      id v26 = v30;
      unint64_t v27 = v80;
      goto LABEL_27;
    }
    int64_t v39 = v79 + 1;
    if (__OFADD__(v79, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v39 < v71)
    {
      unint64_t v40 = *(void *)(v70 + 8 * v39);
      if (v40) {
        goto LABEL_12;
      }
      int64_t v41 = v79 + 2;
      ++v79;
      if (v39 + 1 < v71)
      {
        unint64_t v40 = *(void *)(v70 + 8 * v41);
        if (v40) {
          goto LABEL_15;
        }
        int64_t v79 = v39 + 1;
        if (v39 + 2 < v71)
        {
          unint64_t v40 = *(void *)(v70 + 8 * (v39 + 2));
          if (v40)
          {
            v39 += 2;
            goto LABEL_12;
          }
          int64_t v41 = v39 + 3;
          int64_t v79 = v39 + 2;
          if (v39 + 3 < v71) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: CRKeyPath));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v29, 1, 1, v42);
    uint64_t v32 = 0;
LABEL_27:
    uint64_t v43 = v76;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v29, v76, &demangling cache variable for type metadata for (key: CRKeyPath, value: CRKeyPath)?);
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: CRKeyPath));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v43, 1, v44) == 1)
    {
      swift_release();
      uint64_t v5 = v68;
      a2 = v69;
      uint64_t v6 = v67;
      uint64_t v8 = v66;
      goto LABEL_33;
    }
    unint64_t v82 = v32;
    uint64_t v45 = v25;
    uint64_t v46 = v43 + *(int *)(v44 + 48);
    unint64_t v47 = *v75;
    uint64_t v48 = v43;
    uint64_t v49 = v77;
    (*v75)(v27, v48, v77);
    v47(v84, v46, v49);
    uint64_t v50 = v27;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v51 = *(void **)(static GraphCanvasElementRenderedImageCache.shared + 16);
    uint64_t v52 = *v23;
    uint64_t v53 = v81;
    (*v23)(v81, v50, v49);
    uint64_t v54 = (objc_class *)type metadata accessor for KeyPathWrapper();
    uint64_t v55 = (char *)objc_allocWithZone(v54);
    v52(&v55[v45[340]], v53, v49);
    v86.receiver = v55;
    v86.super_class = v54;
    id v56 = objc_msgSendSuper2(&v86, (SEL)v26[471]);
    uint64_t v57 = *v74;
    (*v74)(v53, v49);
    id v58 = objc_msgSend(v51, sel_objectForKey_, v56);

    if (v58)
    {
      uint64_t v59 = *(void **)(static GraphCanvasElementRenderedImageCache.shared + 16);
      uint64_t v60 = v81;
      v52(v81, v84, v49);
      long long v61 = (char *)objc_allocWithZone(v54);
      v52(&v61[OBJC_IVAR____TtC8PaperKitP33_F808299E7C487FAE28308AED5F0A446914KeyPathWrapper_path], v60, v49);
      v85.receiver = v61;
      v85.super_class = v54;
      uint64_t v50 = v80;
      id v62 = v58;
      id v63 = objc_msgSendSuper2(&v85, sel_init);
      v57(v60, v49);
      objc_msgSend(v59, sel_setObject_forKey_, v62, v63);
    }
    v57(v84, v49);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v57)(v50, v49);
    uint64_t v28 = v49;
    uint64_t v25 = &demangling cache variable for type metadata for Image?;
    id v26 = &off_2640D6000;
    unint64_t v27 = v50;
    unint64_t v22 = v82;
    char v23 = v83;
  }
  unint64_t v40 = *(void *)(v70 + 8 * v41);
  if (v40)
  {
LABEL_15:
    int64_t v39 = v41;
LABEL_12:
    uint64_t v30 = v26;
    uint64_t v32 = (v40 - 1) & v40;
    unint64_t v33 = __clz(__rbit64(v40)) + (v39 << 6);
    int64_t v79 = v39;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v39 = v41 + 1;
    if (__OFADD__(v41, 1)) {
      break;
    }
    if (v39 >= v71)
    {
      int64_t v79 = v65[0];
      goto LABEL_26;
    }
    unint64_t v40 = *(void *)(v70 + 8 * v39);
    ++v41;
    if (v40) {
      goto LABEL_12;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t GraphElement.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CRKeyPath();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v76 = (char *)&v59 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v73 = (char *)&v59 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: CRKeyPath)?);
  MEMORY[0x270FA5388](v17 - 8);
  CGFloat v74 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v72 = (uint64_t)&v59 - v20;
  outlined init with copy of GraphElement(v2, a2, (uint64_t (*)(void))type metadata accessor for GraphElement);
  uint64_t v21 = *a1;
  if (!*(void *)(*a1 + 16))
  {
LABEL_33:
    uint64_t v58 = type metadata accessor for GraphElement();
    CROrderedSet.copy(renamingReferences:)();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 40))(a2 + *(int *)(v58 + 28), v8, v5);
  }
  int64_t v71 = v12;
  uint64_t v60 = v8;
  uint64_t v61 = v2;
  id v62 = a1;
  uint64_t v63 = v6;
  uint64_t v64 = v5;
  uint64_t v22 = *(void *)(v21 + 64);
  uint64_t v65 = a2;
  uint64_t v66 = v21 + 64;
  uint64_t v23 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & v22;
  id v26 = (void (**)(char *, char *, uint64_t))(v10 + 16);
  uint64_t v70 = (void (**)(char *, uint64_t, uint64_t))(v10 + 32);
  int64_t v67 = (unint64_t)(v23 + 63) >> 6;
  uint64_t v68 = v10;
  unint64_t v27 = (void (**)(char *, uint64_t))(v10 + 8);
  int64_t v59 = v67 - 1;
  uint64_t v69 = v21;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v75 = 0;
  uint64_t v29 = v76;
  uint64_t v30 = v73;
  while (1)
  {
    uint64_t v31 = (uint64_t)v74;
    if (v25)
    {
      uint64_t v77 = (v25 - 1) & v25;
      unint64_t v32 = __clz(__rbit64(v25)) | (v75 << 6);
LABEL_8:
      uint64_t v33 = v69;
      unint64_t v34 = *(void *)(v68 + 72) * v32;
      unint64_t v35 = *(void (**)(char *, unint64_t, uint64_t))(v68 + 16);
      v35(v74, *(void *)(v69 + 48) + v34, v9);
      unint64_t v36 = *(void *)(v33 + 56) + v34;
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: CRKeyPath));
      v35((char *)(v31 + *(int *)(v37 + 48)), v36, v9);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v31, 0, 1, v37);
      uint64_t v29 = v76;
      goto LABEL_27;
    }
    int64_t v38 = v75 + 1;
    if (__OFADD__(v75, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v38 < v67)
    {
      unint64_t v39 = *(void *)(v66 + 8 * v38);
      if (v39) {
        goto LABEL_12;
      }
      int64_t v40 = v75 + 2;
      ++v75;
      if (v38 + 1 < v67)
      {
        unint64_t v39 = *(void *)(v66 + 8 * v40);
        if (v39) {
          goto LABEL_15;
        }
        int64_t v75 = v38 + 1;
        if (v38 + 2 < v67)
        {
          unint64_t v39 = *(void *)(v66 + 8 * (v38 + 2));
          if (v39)
          {
            v38 += 2;
            goto LABEL_12;
          }
          int64_t v40 = v38 + 3;
          int64_t v75 = v38 + 2;
          if (v38 + 3 < v67) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: CRKeyPath));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v31, 1, 1, v41);
    uint64_t v77 = 0;
LABEL_27:
    uint64_t v42 = v72;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v31, v72, &demangling cache variable for type metadata for (key: CRKeyPath, value: CRKeyPath)?);
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: CRKeyPath));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48))(v42, 1, v43) == 1)
    {
      swift_release();
      uint64_t v5 = v64;
      a2 = v65;
      uint64_t v6 = v63;
      uint64_t v8 = v60;
      goto LABEL_33;
    }
    uint64_t v44 = v42 + *(int *)(v43 + 48);
    uint64_t v45 = *v70;
    (*v70)(v30, v42, v9);
    v45(v29, v44, v9);
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v46 = *(void **)(static GraphCanvasElementRenderedImageCache.shared + 16);
    unint64_t v47 = *v26;
    uint64_t v48 = v71;
    (*v26)(v71, v30, v9);
    uint64_t v49 = (objc_class *)type metadata accessor for KeyPathWrapper();
    uint64_t v50 = (char *)objc_allocWithZone(v49);
    v47(&v50[OBJC_IVAR____TtC8PaperKitP33_F808299E7C487FAE28308AED5F0A446914KeyPathWrapper_path], v48, v9);
    v79.receiver = v50;
    v79.super_class = v49;
    id v51 = objc_msgSendSuper2(&v79, sel_init);
    uint64_t v52 = *v27;
    (*v27)(v48, v9);
    id v53 = objc_msgSend(v46, sel_objectForKey_, v51);

    if (v53)
    {
      uint64_t v54 = *(void **)(static GraphCanvasElementRenderedImageCache.shared + 16);
      v47(v48, v29, v9);
      uint64_t v55 = (char *)objc_allocWithZone(v49);
      v47(&v55[OBJC_IVAR____TtC8PaperKitP33_F808299E7C487FAE28308AED5F0A446914KeyPathWrapper_path], v48, v9);
      v78.receiver = v55;
      v78.super_class = v49;
      id v56 = v53;
      id v57 = objc_msgSendSuper2(&v78, sel_init);
      v52(v48, v9);
      objc_msgSend(v54, sel_setObject_forKey_, v56, v57);

      uint64_t v29 = v76;
    }
    v52(v29, v9);
    uint64_t v30 = v73;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v52)(v73, v9);
    unint64_t v25 = v77;
  }
  unint64_t v39 = *(void *)(v66 + 8 * v40);
  if (v39)
  {
LABEL_15:
    int64_t v38 = v40;
LABEL_12:
    uint64_t v77 = (v39 - 1) & v39;
    unint64_t v32 = __clz(__rbit64(v39)) + (v38 << 6);
    int64_t v75 = v38;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v38 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v38 >= v67)
    {
      int64_t v75 = v59;
      goto LABEL_26;
    }
    unint64_t v39 = *(void *)(v66 + 8 * v38);
    ++v40;
    if (v39) {
      goto LABEL_12;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

double GraphElement.frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t GraphElement.frame.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*GraphElement.frame.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t GraphElement.$frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for GraphElement.$frame : GraphElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t GraphElement.$frame.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*GraphElement.$frame.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

double GraphElement.rotation.getter()
{
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for GraphElement.rotation : GraphElement@<D0>(double *a1@<X8>)
{
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for GraphElement.rotation : GraphElement()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t GraphElement.rotation.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*GraphElement.rotation.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t GraphElement.$rotation.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for GraphElement.$rotation : GraphElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for GraphElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t GraphElement.$rotation.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for GraphElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*GraphElement.$rotation.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for GraphElement() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

double GraphElement.visibleRange.getter()
{
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for GraphElement.visibleRange : GraphElement@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for GraphElement.visibleRange : GraphElement()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t GraphElement.visibleRange.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*GraphElement.visibleRange.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t GraphElement.$visibleRange.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for GraphElement.$visibleRange : GraphElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for GraphElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t GraphElement.$visibleRange.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for GraphElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*GraphElement.$visibleRange.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for GraphElement() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t GraphElement.expressions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for GraphElement() + 28);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t GraphElement.expressions.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for GraphElement() + 28);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*GraphElement.expressions.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t GraphElement.additionalFields.getter()
{
  type metadata accessor for GraphElement();
  return swift_bridgeObjectRetain();
}

uint64_t GraphElement.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for GraphElement() + 32);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*GraphElement.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static GraphElement.fields.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_26ACB1728;
  uint64_t v4 = qword_26ACB1730;
  uint64_t v3 = unk_26ACB1738;
  uint64_t v5 = qword_26ACB1740;
  uint64_t v6 = qword_26ACB1748;
  uint64_t v7 = qword_26ACB1750;
  uint64_t v8 = qword_26ACB1758;
  uint64_t v10 = qword_26ACB1760;
  uint64_t v9 = *(void *)byte_26ACB1768;
  uint64_t v11 = qword_26ACB1770;
  uint64_t v12 = qword_26ACB1778;
  *a1 = static GraphElement.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t GraphElement.init()@<X0>(uint64_t a1@<X8>)
{
  double v2 = specialized static GraphElement.defaultVisibleRange.getter();
  return GraphElement.init(frame:visibleRange:rotation:)(a1, 0.0, 0.0, 0.0, 0.0, v2, v3, v4, v5, 0);
}

uint64_t GraphElement.init(frame:visibleRange:rotation:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>, uint64_t a10)
{
  double v43 = a9;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v44 = *(void *)(v18 - 8);
  uint64_t v45 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v42 = (char *)v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v40 = *(void *)(v20 - 8);
  uint64_t v41 = v20;
  MEMORY[0x270FA5388](v20);
  unint64_t v39 = (char *)v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v22 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v24 = (char *)v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v46 = 0u;
  long long v47 = 0u;
  CRRegister.init(wrappedValue:)();
  unint64_t v25 = (int *)type metadata accessor for GraphElement();
  uint64_t v37 = a1 + v25[5];
  *(void *)&long long v46 = 0;
  v35[1] = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  uint64_t v36 = a1 + v25[6];
  *(void *)&long long v46 = specialized static GraphElement.defaultVisibleRange.getter();
  *((void *)&v46 + 1) = v26;
  *(void *)&long long v47 = v27;
  *((void *)&v47 + 1) = v28;
  CRRegister.init(wrappedValue:)();
  v35[0] = a1 + v25[7];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<GraphableExpression> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<GraphableExpression> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  CROrderedSet.init()();
  *(void *)(a1 + v25[8]) = MEMORY[0x263F8EE80];
  *(double *)&long long v46 = a2;
  *((double *)&v46 + 1) = a3;
  *(double *)&long long v47 = a4;
  *((double *)&v47 + 1) = a5;
  CRRegister.init(_:)();
  uint64_t v29 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 40);
  uint64_t v30 = a1;
  uint64_t v31 = v38;
  v29(v30, v24, v38);
  *(void *)&long long v46 = a10;
  unint64_t v32 = v39;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 40))(v37, v32, v41);
  *(double *)&long long v46 = a6;
  *((double *)&v46 + 1) = a7;
  *(double *)&long long v47 = a8;
  *((double *)&v47 + 1) = v43;
  CRRegister.init(_:)();
  v29(v36, v24, v31);
  uint64_t v33 = v42;
  CROrderedSet.init()();
  return (*(uint64_t (**)(void, char *, uint64_t))(v44 + 40))(v35[0], v33, v45);
}

uint64_t GraphElement.minAppFormatVersion.getter()
{
  return 6;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance GraphElement()
{
  return CRStruct_4.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance GraphElement()
{
  return CRStruct_4.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance GraphElement(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  return MEMORY[0x270F170F0](a1, v2);
}

uint64_t protocol witness for CRCodable.minAppFormatVersion.getter in conformance GraphElement()
{
  return 6;
}

uint64_t protocol witness for static CRStruct_Base_4.fields.getter in conformance GraphElement@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_26ACB1728;
  uint64_t v4 = qword_26ACB1730;
  uint64_t v3 = unk_26ACB1738;
  uint64_t v5 = qword_26ACB1740;
  uint64_t v6 = qword_26ACB1748;
  uint64_t v7 = qword_26ACB1750;
  uint64_t v8 = qword_26ACB1758;
  uint64_t v10 = qword_26ACB1760;
  uint64_t v9 = *(void *)byte_26ACB1768;
  uint64_t v11 = qword_26ACB1770;
  uint64_t v12 = qword_26ACB1778;
  *a1 = static GraphElement.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance GraphElement(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  return MEMORY[0x270F17160](a1, v2);
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance GraphElement()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance GraphElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 32);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*protocol witness for CRStruct_Base.additionalFields.modify in conformance GraphElement())()
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CRStruct_Base.init() in conformance GraphElement@<X0>(uint64_t a1@<X8>)
{
  double v2 = specialized static GraphElement.defaultVisibleRange.getter();
  return GraphElement.init(frame:visibleRange:rotation:)(a1, 0.0, 0.0, 0.0, 0.0, v2, v3, v4, v5, 0);
}

uint64_t protocol witness for CRDT.context.getter in conformance GraphElement(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance GraphElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  return MEMORY[0x270F17100](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance GraphElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  return MEMORY[0x270F17128](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance GraphElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  return MEMORY[0x270F17158](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance GraphElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  return MEMORY[0x270F17130](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance GraphElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  return MEMORY[0x270F17150](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance GraphElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  return MEMORY[0x270F17138](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance GraphElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  return MEMORY[0x270F170F8](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance GraphElement()
{
  return CROrderedSet.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance GraphElement()
{
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  return CRStruct_4.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance GraphElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  return MEMORY[0x270F170E8](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance GraphElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  return MEMORY[0x270F17140](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance GraphElement()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance GraphElement()
{
  return CRDT.init(serializedData:)();
}

double GraphElement.bounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

void (*GraphElement.bounds.modify(void *a1))(void **a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  long long v3 = v2[3];
  *uint64_t v2 = v2[2];
  v2[1] = v3;
  return GraphElement.bounds.modify;
}

void GraphElement.bounds.modify(void **a1)
{
}

uint64_t GraphElement.shared(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  double v3 = MEMORY[0x270FA5388](v2);
  v7[15] = 2;
  (*(void (**)(unsigned char *, uint64_t, double))(v5 + 16))(&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t GraphElement.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CRAsset();
  double v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t GraphElement.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a6;
  *(void *)(v7 + 88) = v6;
  *(void *)(v7 + 64) = a3;
  *(void *)(v7 + 72) = a5;
  *(void *)(v7 + 48) = a1;
  *(void *)(v7 + 56) = a2;
  *(unsigned char *)(v7 + 16AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = *(unsigned char *)a4;
  *(unsigned char *)(v7 + 161) = *(unsigned char *)(a4 + 1);
  *(unsigned char *)(v7 + 162) = *(unsigned char *)(a4 + 2);
  *(void *)(v7 + 96) = *(void *)(a4 + 8);
  *(unsigned char *)(v7 + 163) = *(unsigned char *)(a4 + 16);
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(v7 + 12AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = *(_OWORD *)(a4 + 40);
  *(unsigned char *)(v7 + 164) = *(unsigned char *)(a4 + 56);
  *(void *)(v7 + 136) = *(void *)(a4 + 64);
  *(unsigned char *)(v7 + 165) = *(unsigned char *)(a4 + 72);
  *(unsigned char *)(v7 + 166) = *(unsigned char *)(a4 + 73);
  *(unsigned char *)(v7 + 167) = *(unsigned char *)(a4 + 74);
  return MEMORY[0x270FA2498](GraphElement.render<A>(in:id:capsule:options:), 0, 0);
}

uint64_t GraphElement.render<A>(in:id:capsule:options:)()
{
  uint64_t v32 = v0;
  char v1 = *(unsigned char *)(v0 + 167);
  char v2 = *(unsigned char *)(v0 + 166);
  char v3 = *(unsigned char *)(v0 + 165);
  uint64_t v4 = *(void *)(v0 + 136);
  char v5 = *(unsigned char *)(v0 + 164);
  char v6 = *(unsigned char *)(v0 + 163);
  char v7 = *(unsigned char *)(v0 + 162);
  char v8 = *(unsigned char *)(v0 + 161);
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v10 = *(CGContext **)(v0 + 48);
  uint64_t v11 = *(void *)(v0 + 56);
  v22[0] = *(unsigned char *)(v0 + 160);
  v22[1] = v8;
  v22[2] = v7;
  uint64_t v23 = v9;
  char v24 = v6;
  long long v25 = *(_OWORD *)(v0 + 104);
  long long v26 = *(_OWORD *)(v0 + 120);
  char v27 = v5;
  uint64_t v28 = v4;
  char v29 = v3;
  char v30 = v2;
  char v31 = v1;
  if ((specialized GraphElement.renderFromPrerenderCache<A>(in:id:capsule:options:)(v10, v11, (uint64_t)v22) & 1) != 0
    || (v1 & 1) != 0)
  {
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    double v12 = *(double *)(v0 + 32);
    double v13 = *(double *)(v0 + 40);
    uint64_t v21 = (uint64_t (*)(char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double))((char *)&async function pointer to specialized GraphElement.image<A>(size:darkMode:isRTL:in:document:) + async function pointer to specialized GraphElement.image<A>(size:darkMode:isRTL:in:document:));
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v14;
    *uint64_t v14 = v0;
    v14[1] = GraphElement.render<A>(in:id:capsule:options:);
    char v15 = *(unsigned char *)(v0 + 161);
    uint64_t v16 = *(void *)(v0 + 80);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 72);
    return v21(v15, v17, 0, 0, v18, v16, v12, v13);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  char v1 = *(void **)(v0 + 152);
  if (v1)
  {
    GraphElement.renderImage(_:in:)(*(CGImageRef *)(v0 + 152), *(CGContextRef *)(v0 + 48));
  }
  char v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t GraphElement.render<A>(in:id:capsule:options:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](GraphElement.render<A>(in:id:capsule:options:), 0, 0);
}

Swift::Void __swiftcall GraphElement.renderImage(_:in:)(CGImageRef _, CGContextRef in)
{
  CGContextSaveGState(in);
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  v29.origin.CGFloat x = t1.a;
  v29.origin.CGFloat y = t1.b;
  v29.size.CGFloat width = t1.c;
  v29.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v29);
  v30.origin.CGFloat x = t1.a;
  v30.origin.CGFloat y = t1.b;
  v30.size.CGFloat width = t1.c;
  v30.size.CGFloat height = t1.d;
  double MidY = CGRectGetMidY(v30);
  CGAffineTransformMakeRotation(&t1, t1.a);
  long long v22 = *(_OWORD *)&t1.c;
  long long v24 = *(_OWORD *)&t1.a;
  CGFloat v6 = -MidY;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v6);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  CGFloat v13 = t1.tx;
  CGFloat v14 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v24;
  *(_OWORD *)&t2.CGFloat c = v22;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v26, &t1, &t2);
  long long v23 = *(_OWORD *)&v26.c;
  long long v25 = *(_OWORD *)&v26.a;
  CGFloat v15 = v26.tx;
  CGFloat v16 = v26.ty;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tCGFloat x = v13;
  t1.tCGFloat y = v14;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v25;
  *(_OWORD *)&t1.CGFloat c = v23;
  t1.tCGFloat x = v15;
  t1.tCGFloat y = v16;
  CGAffineTransformConcat(&v26, &t1, &t2);
  CGAffineTransform t1 = v26;
  CGContextConcatCTM(in, &t1);
  CRRegister.wrappedValue.getter();
  CGPoint v17 = *(CGPoint *)&t1.a;
  CGFloat v18 = t1.c;
  CGFloat v19 = t1.d;
  UIGraphicsPushContext(in);
  CGContextSaveGState(in);
  v31.origin = v17;
  v31.size.CGFloat width = v18;
  v31.size.CGFloat height = v19;
  CGFloat MinX = CGRectGetMinX(v31);
  v32.origin = v17;
  v32.size.CGFloat width = v18;
  v32.size.CGFloat height = v19;
  CGFloat MaxY = CGRectGetMaxY(v32);
  CGContextTranslateCTM(in, MinX, MaxY);
  CGContextScaleCTM(in, 1.0, -1.0);
  v33.origin.CGFloat x = 0.0;
  v33.origin.CGFloat y = 0.0;
  v33.size.CGFloat width = v18;
  v33.size.CGFloat height = v19;
  CGContextRef.draw(_:in:byTiling:)(_, v33, 0);
  CGContextRestoreGState(in);
  UIGraphicsPopContext();
  CGContextRestoreGState(in);
}

uint64_t GraphElement.graphables<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for GraphElement();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v10, v3 + *(int *)(v11 + 28), v7);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a1;
  type metadata accessor for GraphableExpression();
  uint64_t v12 = CROrderedSet.map<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  return v12;
}

void GraphElement.imageRenderingCalculateGraph<A>(in:document:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v73 = a3;
  uint64_t v75 = a1;
  uint64_t v70 = type metadata accessor for CalculateExpression.Base();
  uint64_t v65 = *(void (***)(char *, void, uint64_t))(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v69 = (char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  uint64_t v68 = (char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v63 = (char *)v60 - v15;
  uint64_t v16 = type metadata accessor for GraphableExpression();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  CGFloat v19 = (char *)v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  CGFloat v20 = *(double *)&v76;
  CGFloat v21 = v77;
  CGFloat v22 = v78;
  CGFloat v23 = *(double *)&v79;
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    a2 = CanvasCalculateDocument.proxyDocumentRepresentation.getter(ObjectType, (uint64_t)v73);
  }
  id v73 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInteger_, 1);
  uint64_t v81 = MEMORY[0x263F8EE78];
  uint64_t v25 = GraphElement.graphables<A>(in:)(v75, a4, a5);
  uint64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    uint64_t v72 = v11;
    unint64_t v27 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v60[1] = v25;
    uint64_t v28 = v25 + v27;
    uint64_t v75 = *(void *)(v17 + 72);
    int64_t v71 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    id v62 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
    v60[2] = a2 + 56;
    uint64_t v61 = (void (**)(char *, uint64_t))(v12 + 8);
    int64_t v67 = (void *)*MEMORY[0x263F2FCD0];
    unsigned int v66 = *MEMORY[0x263F2FBD0];
    v65 += 13;
    long long v64 = xmmword_20C832C20;
    do
    {
      outlined init with copy of GraphElement(v28, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
      if (!a2 || (swift_retain(), uint64_t v29 = CanvasCalculateDocumentProxy.expression(for:)(), swift_release(), !v29))
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
        CRRegister.wrappedValue.getter();
        uint64_t v30 = (uint64_t)v72;
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        uint64_t v31 = v74;
        if ((*v71)(v30, 1, v74) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v30, &demangling cache variable for type metadata for UUID?);
        }
        else
        {
          uint64_t v32 = (uint64_t)v63;
          (*v62)(v63, v30, v31);
          if (a2)
          {
            swift_retain();
            CanvasCalculateDocumentProxy.updateDocumentIfNecessary()();
            swift_beginAccess();
            uint64_t v33 = *(void *)(a2 + 56);
            if (*(void *)(v33 + 16))
            {
              unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
              if (v35)
              {
                uint64_t v36 = *(void *)(v33 + 56) + 40 * v34;
                uint64_t v37 = *(void **)v36;
                uint64_t v38 = *(void *)(v36 + 8);
                swift_endAccess();
                id v39 = v37;
                swift_retain_n();
                swift_bridgeObjectRetain();
                outlined consume of SortableCalculateExpression?(v37, v38);
                swift_release();
                (*v61)(v63, v74);
                goto LABEL_16;
              }
            }
            swift_endAccess();
            swift_release();
            (*v61)((char *)v32, v74);
          }
          else
          {
            (*v61)((char *)v32, v31);
          }
        }
        CRRegister.wrappedValue.getter();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
        initeCGFloat d = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v64;
        uint64_t v41 = v67;
        *(void *)(inited + 32) = v67;
        *(void *)(inited + 64) = type metadata accessor for NSNumber();
        id v42 = v73;
        *(void *)(inited + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v73;
        id v43 = v41;
        id v44 = v42;
        specialized Dictionary.init(dictionaryLiteral:)(inited);
        UUID.init()();
        (*v65)(v69, v66, v70);
        type metadata accessor for CalculateExpression();
        swift_allocObject();
        CalculateExpression.init(_:options:base:id:)();
      }
LABEL_16:
      *(double *)&objc_super v79 = COERCE_DOUBLE(&type metadata for PencilAndPaperFeatureFlags);
      unint64_t v80 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
      LOBYTE(v76) = 8;
      swift_retain();
      char v45 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
      if ((v45 & 1) == 0) {
        goto LABEL_36;
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
      CRRegister.wrappedValue.getter();
      unint64_t v46 = (unint64_t)v76;
      double v47 = v77;
      swift_bridgeObjectRelease();
      uint64_t v48 = HIBYTE(*(void *)&v47) & 0xFLL;
      if ((*(void *)&v47 & 0x2000000000000000) == 0) {
        uint64_t v48 = v46 & 0xFFFFFFFFFFFFLL;
      }
      if (v48)
      {
        CRRegister.wrappedValue.getter();
        uint64_t v49 = v76;
        double v50 = v77;
      }
      else
      {
        uint64_t v51 = *(void *)(CalculateExpression.graphableVariables.getter() + 16);
        swift_bridgeObjectRelease();
        if (!v51) {
          goto LABEL_25;
        }
        uint64_t v52 = (double *)CalculateExpression.graphableVariables.getter();
        if (!*((void *)v52 + 2))
        {
          swift_bridgeObjectRelease();
LABEL_25:
          uint64_t v49 = 0;
          double v50 = 0.0;
          goto LABEL_26;
        }
        uint64_t v49 = (void *)*((void *)v52 + 4);
        double v50 = v52[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
LABEL_26:
      swift_bridgeObjectRetain();
      uint64_t v53 = CalculateExpression.graphableVariable.getter();
      if (v50 != 0.0)
      {
        if (v54)
        {
          if (v49 == (void *)v53 && *(void *)&v50 == v54)
          {
            swift_bridgeObjectRelease_n();
LABEL_35:
            swift_bridgeObjectRelease();
            goto LABEL_36;
          }
          char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v55) {
            goto LABEL_35;
          }
        }
        else
        {
LABEL_32:
          swift_bridgeObjectRelease();
        }
        CalculateExpression.graphableVariable.setter();
        goto LABEL_36;
      }
      if (v54) {
        goto LABEL_32;
      }
LABEL_36:
      type metadata accessor for CalculateGraphExpression();
      swift_allocObject();
      swift_retain();
      CalculateGraphExpression.init(_:color:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
      CRRegister.wrappedValue.getter();
      id v56 = v76;
      if (*(double *)&v76 != 0.0)
      {
        MEMORY[0x21054A5D0](objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v76));
        dispatch thunk of CalculateGraphExpression.color.setter();
      }
      uint64_t v57 = swift_retain();
      MEMORY[0x21054D330](v57);
      if (*(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release_n();
      swift_release();
      outlined destroy of GraphElement((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
      v28 += v75;
      --v26;
    }
    while (v26);
  }
  swift_bridgeObjectRelease();
  v82.origin.CGFloat x = v20;
  v82.origin.CGFloat y = v21;
  v82.size.CGFloat width = v22;
  v82.size.CGFloat height = v23;
  if (CGRectIsEmpty(v82)) {
    goto LABEL_44;
  }
  v83.origin.CGFloat x = v20;
  v83.origin.CGFloat y = v21;
  v83.size.CGFloat width = v22;
  v83.size.CGFloat height = v23;
  double MinX = CGRectGetMinX(v83);
  v84.origin.CGFloat x = v20;
  v84.origin.CGFloat y = v21;
  v84.size.CGFloat width = v22;
  v84.size.CGFloat height = v23;
  if (MinX > CGRectGetMaxX(v84))
  {
    __break(1u);
  }
  else
  {
    v85.origin.CGFloat x = v20;
    v85.origin.CGFloat y = v21;
    v85.size.CGFloat width = v22;
    v85.size.CGFloat height = v23;
    double MinY = CGRectGetMinY(v85);
    v86.origin.CGFloat x = v20;
    v86.origin.CGFloat y = v21;
    v86.size.CGFloat width = v22;
    v86.size.CGFloat height = v23;
    if (MinY <= CGRectGetMaxY(v86))
    {
LABEL_44:
      static Animation.easeIn(duration:)();
      type metadata accessor for CalculateGraph();
      swift_allocObject();
      CalculateGraph.init(graphExpressions:xAxisBounds:yAxisBounds:animation:isSelected:)();
      dispatch thunk of CalculateGraph.isSelected.setter();

      swift_release();
      return;
    }
  }
  __break(1u);
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance GraphElement(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  double v3 = MEMORY[0x270FA5388](v2);
  v7[15] = 2;
  (*(void (**)(unsigned char *, uint64_t, double))(v5 + 16))(&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance GraphElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return GraphElement.render<A>(in:id:capsule:options:)(a1, a2, a3, a4, a5, a6);
}

uint64_t Capsule<>.graphElementClosestTo(_:maxDistance:)@<X0>(double a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  uint64_t v80 = a5;
  uint64_t v76 = a4;
  LODWORD(v79) = a2;
  double v72 = a1;
  double v74 = a8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphElement>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v68 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v69 = (uint64_t)&v65 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v65 - v16;
  uint64_t v18 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v18 - 8);
  id v73 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v81 = (uint64_t)&v65 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v77 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  long long v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v25 - 8);
  unint64_t v27 = (char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = *(void *)(a3 + 16);
  uint64_t v28 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v65 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v78 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v71 = *(v78 - 1);
  MEMORY[0x270FA5388](v78);
  uint64_t v33 = (char *)&v65 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  unsigned int v66 = (char *)&v65 - v35;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v67 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  CGRect v82 = (char *)&v65 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  uint64_t v65 = *(void *)(v37 - 8);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56);
  uint64_t v70 = a6;
  v38(a6, 1, 1, v37);
  if (v79)
  {
    if (one-time initialization token for maxGraphElementDistance != -1) {
      swift_once();
    }
    double v72 = *(double *)&static UIConstants.maxGraphElementDistance;
  }
  Capsule<>.root.getter();
  uint64_t v39 = v75;
  (*(void (**)(uint64_t))(v80 + 72))(v75);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v39);
  uint64_t v40 = v66;
  uint64_t v41 = v78;
  CROrderedSet.filter(_:)();
  uint64_t v80 = *(void *)(v71 + 8);
  ((void (*)(char *, void *))v80)(v33, v41);
  CROrderedSet.makeIterator()();
  ((void (*)(char *, void *))v80)(v40, v41);
  CROrderedSet.Iterator.next()();
  uint64_t v42 = v77;
  objc_super v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
  uint64_t v80 = v77 + 48;
  if (v79(v27, 1, v22) != 1)
  {
    char v45 = *(void **)(v42 + 32);
    uint64_t v44 = v42 + 32;
    double v78 = v45;
    unint64_t v46 = (unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
    uint64_t v71 = v65 + 8;
    double v47 = (void (**)(char *, uint64_t))(v44 - 24);
    double v48 = 0.0;
    uint64_t v77 = v44;
    ((void (*)(char *, char *, uint64_t))v45)(v24, v27, v22);
    while (1)
    {
      SharedTagged_9.tagged3.getter();
      double v50 = *v46;
      if ((*v46)(v17, 1, v37) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Ref<GraphElement>?);
        (*v47)(v24, v22);
        double v49 = v48;
      }
      else
      {
        uint64_t v51 = (uint64_t)v73;
        Ref.subscript.getter();
        (*(void (**)(char *, uint64_t))v71)(v17, v37);
        outlined init with take of GraphElement(v51, v81);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
        CRRegister.wrappedValue.getter();
        CGFloat x = v84.origin.x;
        CGFloat y = v84.origin.y;
        CGFloat width = v84.size.width;
        CGFloat height = v84.size.height;
        double MinX = CGRectGetMinX(v84);
        v85.origin.CGFloat x = x;
        v85.origin.CGFloat y = y;
        v85.size.CGFloat width = width;
        v85.size.CGFloat height = height;
        double MaxX = CGRectGetMaxX(v85);
        if (MaxX >= a7) {
          double MaxX = a7;
        }
        if (MinX <= a7) {
          double v58 = MaxX;
        }
        else {
          double v58 = MinX;
        }
        v86.origin.CGFloat x = x;
        v86.origin.CGFloat y = y;
        v86.size.CGFloat width = width;
        v86.size.CGFloat height = height;
        double MinY = CGRectGetMinY(v86);
        v87.origin.CGFloat x = x;
        v87.origin.CGFloat y = y;
        v87.size.CGFloat width = width;
        v87.size.CGFloat height = height;
        double MaxY = CGRectGetMaxY(v87);
        if (MaxY >= v74) {
          double MaxY = v74;
        }
        if (MinY > v74) {
          double MaxY = MinY;
        }
        double v49 = sqrt((v58 - a7) * (v58 - a7) + (MaxY - v74) * (MaxY - v74));
        if (v49 < v72
          && ((uint64_t v61 = v69,
               outlined init with copy of Ref<GraphElement>?(v70, v69),
               unsigned int v62 = v50((char *)v61, 1, v37),
               outlined destroy of StocksKitCurrencyCache.Provider?(v61, &demangling cache variable for type metadata for Ref<GraphElement>?), v62 == 1)|| v49 < v48))
        {
          uint64_t v63 = (uint64_t)v68;
          SharedTagged_9.tagged3.getter();
          outlined destroy of GraphElement(v81, (uint64_t (*)(void))type metadata accessor for GraphElement);
          (*v47)(v24, v22);
          uint64_t v64 = v70;
          outlined destroy of StocksKitCurrencyCache.Provider?(v70, &demangling cache variable for type metadata for Ref<GraphElement>?);
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v63, v64, &demangling cache variable for type metadata for Ref<GraphElement>?);
        }
        else
        {
          outlined destroy of GraphElement(v81, (uint64_t (*)(void))type metadata accessor for GraphElement);
          (*v47)(v24, v22);
          double v49 = v48;
        }
      }
      CROrderedSet.Iterator.next()();
      double v48 = v49;
      if (v79(v27, 1, v22) == 1) {
        break;
      }
      ((void (*)(char *, char *, uint64_t))v78)(v24, v27, v22);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v82, v83);
}

BOOL closure #1 in Capsule<>.graphElementClosestTo(_:maxDistance:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphElement>?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  SharedTagged_9.tagged3.getter();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  BOOL v4 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3) != 1;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v2, &demangling cache variable for type metadata for Ref<GraphElement>?);
  return v4;
}

uint64_t specialized GraphElement.renderFromPrerenderCache<A>(in:id:capsule:options:)(CGContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CRKeyPath();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = *(unsigned __int8 *)(a3 + 1);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v11 = *(void **)(static GraphCanvasElementRenderedImageCache.shared + 16);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v12(v9, a2, v6);
  uint64_t v13 = (objc_class *)type metadata accessor for KeyPathWrapper();
  uint64_t v14 = (char *)objc_allocWithZone(v13);
  v12(&v14[OBJC_IVAR____TtC8PaperKitP33_F808299E7C487FAE28308AED5F0A446914KeyPathWrapper_path], (uint64_t)v9, v6);
  v30.receiver = v14;
  v30.super_class = v13;
  id v15 = [(CGContext *)&v30 init];
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  id v16 = objc_msgSend(v11, sel_objectForKey_, v15);

  if (!v16) {
    return 0;
  }
  id v29 = 0;
  if (v10) {
    uint64_t v17 = 2;
  }
  else {
    uint64_t v17 = 1;
  }
  id v18 = objc_msgSend(self, sel_traitCollectionWithUserInterfaceStyle_, v17);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = &v29;
  *(void *)(v19 + 24) = v16;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = partial apply for closure #1 in GraphElement.image<A>(size:darkMode:isRTL:in:document:);
  *(void *)(v20 + 24) = v19;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  void aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_32_0;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  id v22 = v16;
  swift_release();
  objc_msgSend(v18, sel_performAsCurrentTraitCollection_, v21);
  _Block_release(v21);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v21 & 1) == 0)
  {
    if (v29)
    {
      long long v24 = (CGImage *)v29;
      GraphElement.renderImage(_:in:)(v24, a1);

      id v25 = v29;
      swift_release();

      return 1;
    }

    id v26 = v29;
    swift_release();

    return 0;
  }
  __break(1u);
  return result;
}

uint64_t specialized GraphElement.image<A>(size:darkMode:isRTL:in:document:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  *(void *)(v9 + 12AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a6;
  *(void *)(v9 + 128) = v8;
  *(void *)(v9 + 104) = a4;
  *(void *)(v9 + 112) = a5;
  *(void *)(v9 + 88) = a2;
  *(void *)(v9 + 96) = a3;
  *(unsigned char *)(v9 + 16AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a1;
  *(double *)(v9 + 72) = a7;
  *(double *)(v9 + 8AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = a8;
  return MEMORY[0x270FA2498](specialized GraphElement.image<A>(size:darkMode:isRTL:in:document:), 0, 0);
}

uint64_t specialized GraphElement.image<A>(size:darkMode:isRTL:in:document:)()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = (void *)v0[13];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[12];
  v0[8] = 0;
  GraphElement.imageRenderingCalculateGraph<A>(in:document:)(v4, v5, v2, v3, v1);
  v0[17] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[18] = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized GraphElement.image<A>(size:darkMode:isRTL:in:document:);
  v8.n128_u64[0] = v0[9];
  v9.n128_u64[0] = v0[10];
  return MEMORY[0x270F13548](v8, v9);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  uint64_t v1 = (void *)v0[19];
  if (*((unsigned char *)v0 + 160)) {
    uint64_t v2 = 2;
  }
  else {
    uint64_t v2 = 1;
  }
  uint64_t v3 = objc_msgSend(self, sel_traitCollectionWithUserInterfaceStyle_, v2);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v0 + 8;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in GraphElement.image<A>(size:darkMode:isRTL:in:document:);
  *(void *)(v5 + 24) = v4;
  v0[6] = partial apply for thunk for @callee_guaranteed () -> ();
  v0[7] = v5;
  v0[2] = MEMORY[0x263EF8330];
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed () -> ();
  v0[5] = &block_descriptor_7;
  uint64_t v6 = _Block_copy(v0 + 2);
  uint64_t v7 = v1;
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_performAsCurrentTraitCollection_, v6);

  swift_release();
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    int v10 = v0[8];
    swift_release();
    uint64_t v11 = (uint64_t (*)(uint64_t))v0[1];
    return v11(v10);
  }
  return result;
}

uint64_t specialized GraphElement.image<A>(size:darkMode:isRTL:in:document:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized GraphElement.image<A>(size:darkMode:isRTL:in:document:), 0, 0);
}

double specialized static GraphElement.defaultVisibleRange.getter()
{
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_standardUserDefaults);
  uint64_t v2 = (void *)MEMORY[0x21054D080](0xD000000000000021, 0x800000020C851340);
  objc_msgSend(v1, sel_doubleForKey_, v2);
  double v4 = v3;

  id v5 = objc_msgSend(v0, sel_standardUserDefaults);
  uint64_t v6 = (void *)MEMORY[0x21054D080](0xD000000000000021, 0x800000020C851370);
  objc_msgSend(v5, sel_doubleForKey_, v6);

  id v7 = objc_msgSend(v0, sel_standardUserDefaults);
  __n128 v8 = (void *)MEMORY[0x21054D080](0xD000000000000022, 0x800000020C8513A0);
  objc_msgSend(v7, sel_doubleForKey_, v8);
  double v10 = v9;

  id v11 = objc_msgSend(v0, sel_standardUserDefaults);
  uint64_t v12 = (void *)MEMORY[0x21054D080](0xD000000000000022, 0x800000020C8513D0);
  objc_msgSend(v11, sel_doubleForKey_, v12);
  double v14 = v13;

  if (v10 <= 0.0 || v14 <= 0.0) {
    return 0.0;
  }
  return v4;
}

uint64_t outlined init with take of GraphElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GraphElement();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Ref<GraphElement>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphElement>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for CRStruct_Base_4 in GraphElement()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
}

uint64_t base witness table accessor for CRStruct_Base in GraphElement()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
}

uint64_t associated type witness table accessor for CRStruct_Base_4.Type_3 : CRDT in GraphElement()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<GraphableExpression>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
}

uint64_t base witness table accessor for CRDT in GraphElement()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
}

uint64_t base witness table accessor for CRMergeable in GraphElement()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
}

uint64_t base witness table accessor for CRType in GraphElement()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in GraphElement()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_4<GraphElement> and conformance CRStructMergeableDelta_4<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_4<GraphElement>);
}

uint64_t base witness table accessor for CRCodable in GraphElement()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
}

uint64_t sub_20C38BE40()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C38BE84()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C38BEE0()
{
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for GraphElement(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    __n128 v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    double v10 = (char *)a1 + v9;
    id v11 = (char *)a2 + v9;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    uint64_t v13 = a3[7];
    double v14 = (char *)a1 + v13;
    id v15 = (char *)a2 + v13;
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for GraphElement(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + a2[5];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  v5(a1 + a2[6], v4);
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GraphElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GraphElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for GraphElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for GraphElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C38C754);
}

uint64_t sub_20C38C754(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[8]);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C38C8D4);
}

uint64_t sub_20C38C8D4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[8]) = (a2 - 1);
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[7];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for GraphElement()
{
  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CGFloat>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CROrderedSet<Ref<GraphableExpression>>();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for CROrderedSet<Ref<GraphableExpression>>()
{
  if (!lazy cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<GraphableExpression> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<GraphableExpression> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
    unint64_t v0 = type metadata accessor for CROrderedSet();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
    }
  }
}

uint64_t partial apply for closure #1 in GraphElement.graphables<A>(in:)()
{
  return Ref.subscript.getter();
}

uint64_t sub_20C38CC78()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in GraphElement.image<A>(size:darkMode:isRTL:in:document:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  *uint64_t v1 = objc_msgSend(*(id *)(v0 + 24), sel_CGImage);
  return MEMORY[0x270F9A758]();
}

uint64_t sub_20C38CCFC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t outlined init with copy of GraphElement(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t outlined destroy of GraphElement(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void outlined consume of SortableCalculateExpression?(void *a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_20C38CE84()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t destroy for MiniObjectButtons()
{
  swift_release();
  swift_release();
  swift_release();
  swift_weakDestroy();
  return swift_release();
}

uint64_t initializeWithCopy for MiniObjectButtons(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_weakCopyInit();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MiniObjectButtons(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  swift_weakCopyAssign();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for MiniObjectButtons(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_weakTakeInit();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for MiniObjectButtons(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = v4;
  swift_release();
  swift_weakTakeAssign();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniObjectButtons(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MiniObjectButtons(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 4AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MiniObjectButtons()
{
  return &type metadata for MiniObjectButtons;
}

uint64_t associated type witness table accessor for View.Body : View in MiniObjectButtons()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized static ViewBuilder.buildBlock<each A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*a1, a2, &demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>?);
  uint64_t v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TupleView<(Button<Label<Text, Image>>, Divider)>?, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?, Divider, Button<Label<Text, Image>>));
  uint64_t v5 = a2 + v4[12];
  uint64_t v6 = a1[1];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Label<Text, Image>>);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t))v14)((void *)(v7 - 8), v5, v6, v7);
  v14(a2 + v4[16], a1[2], v7);
  v14(a2 + v4[20], a1[3], v7);
  v14(a2 + v4[24], a1[4], v7);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1[5], a2 + v4[28], &demangling cache variable for type metadata for Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1[6], a2 + v4[32], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1[7], a2 + v4[36], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1[8], a2 + v4[40], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1[9], a2 + v4[44], &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1[10], a2 + v4[48], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1[11], a2 + v4[52], &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1[12], a2 + v4[56], &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?);
  uint64_t v8 = a2 + v4[60];
  uint64_t v9 = a1[13];
  uint64_t v10 = type metadata accessor for Divider();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a2 + v4[64];
  uint64_t v12 = a1[14];
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v11, v12, v7);
}

uint64_t MiniObjectButtons.body.getter@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v68 = a1;
  uint64_t v3 = type metadata accessor for LiftHoverEffect();
  uint64_t v85 = *(void *)(v3 - 8);
  uint64_t v86 = v3;
  MEMORY[0x270FA5388](v3);
  CGRect v84 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for PlainButtonStyle();
  uint64_t v81 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  double v78 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for MenuOrder();
  uint64_t v64 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  unsigned int v62 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Menu<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, TupleView<(TupleView<(Button<Label<Text, Image>>, Divider)>?, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?, Divider, Button<Label<Text, Image>>)>>);
  uint64_t v61 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.menuOrder(_:)>>.0);
  uint64_t v69 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  uint64_t v60 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v74 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  id v73 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0);
  uint64_t v79 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  uint64_t v77 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>);
  MEMORY[0x270FA5388](v75);
  uint64_t v67 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v83 = (uint64_t)&v59 - v14;
  uint64_t v15 = *(void *)(v1 + 40);
  swift_getKeyPath();
  *(void *)&long long v92 = v15;
  lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v16 = *(void *)(v15 + 40);
  swift_release();
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  id v22 = 0;
  uint64_t v23 = 0;
  long long v24 = 0;
  if ((v16 & 0x10000) != 0)
  {
    outlined init with copy of MiniObjectButtons(v2, (uint64_t)&v92);
    uint64_t v18 = swift_allocObject();
    outlined init with take of MiniObjectButtons((uint64_t)&v92, v18 + 16);
    if (one-time initialization token for buttonSize != -1) {
      swift_once();
    }
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v19 = v95;
    uint64_t v20 = (uint64_t (*)@<X0>(uint64_t@<X8>))v96;
    uint64_t v21 = v97;
    id v22 = (uint64_t (*)@<X0>(uint64_t@<X8>))v98;
    uint64_t v23 = v99;
    long long v24 = v100;
    uint64_t v17 = partial apply for closure #1 in MiniObjectButtons.body.getter;
  }
  CGRect v87 = v23;
  unsigned int v66 = v17;
  uint64_t v88 = v24;
  uint64_t v70 = v22;
  uint64_t v71 = v21;
  uint64_t v89 = v20;
  uint64_t v90 = v19;
  uint64_t v91 = v18;
  outlined init with copy of MiniObjectButtons(v2, (uint64_t)&v92);
  uint64_t v25 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)&v92, v25 + 16);
  id v26 = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject();
  *((void *)v26 + 2) = partial apply for closure #2 in MiniObjectButtons.body.getter;
  *((void *)v26 + 3) = v25;
  *((void *)v26 + 4) = 0xD000000000000015;
  *((void *)v26 + 5) = 0x800000020C851400;
  int64_t v59 = v26;
  outlined init with copy of MiniObjectButtons(v2, (uint64_t)&v92);
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = outlined init with take of MiniObjectButtons((uint64_t)&v92, v27 + 16);
  MEMORY[0x270FA5388](v28);
  *(&v59 - 2) = (uint64_t (*)@<X0>(uint64_t@<X8>))v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(TupleView<(Button<Label<Text, Image>>, Divider)>?, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?, Divider, Button<Label<Text, Image>>)>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t *)&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type TupleView<(TupleView<(Button<Label<Text, Image>>, Divider)>?, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?, Divider, Button<Label<Text, Image>>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(TupleView<(Button<Label<Text, Image>>, Divider)>?, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?, Divider, Button<Label<Text, Image>>)>);
  Menu.init(content:label:)();
  id v29 = v62;
  static MenuOrder.fixed.getter();
  uint64_t v30 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Menu<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, TupleView<(TupleView<(Button<Label<Text, Image>>, Divider)>?, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?, Divider, Button<Label<Text, Image>>)>> and conformance Menu<A, B>, &demangling cache variable for type metadata for Menu<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, TupleView<(TupleView<(Button<Label<Text, Image>>, Divider)>?, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?, Divider, Button<Label<Text, Image>>)>>);
  uint64_t v31 = v60;
  uint64_t v32 = v63;
  View.menuOrder(_:)();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v29, v65);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v8, v32);
  uint64_t v33 = v78;
  PlainButtonStyle.init()();
  *(void *)&long long v92 = v32;
  *((void *)&v92 + 1) = v30;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v35 = lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
  uint64_t v36 = v73;
  uint64_t v37 = v72;
  uint64_t v38 = v82;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v33, v38);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v31, v37);
  uint64_t v39 = v84;
  static CustomHoverEffect<>.lift.getter();
  *(void *)&long long v92 = v37;
  *((void *)&v92 + 1) = v38;
  *(void *)&long long v93 = OpaqueTypeConformance2;
  *((void *)&v93 + 1) = v35;
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState(&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect, MEMORY[0x263F18DF8]);
  uint64_t v40 = v77;
  uint64_t v41 = v76;
  uint64_t v42 = v86;
  View.hoverEffect<A>(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v39, v42);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v36, v41);
  if (one-time initialization token for buttonSize != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v43 = v79;
  uint64_t v44 = (uint64_t)v67;
  uint64_t v45 = v80;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v67, v40, v80);
  unint64_t v46 = (_OWORD *)(v44 + *(int *)(v75 + 36));
  long long v47 = v93;
  *unint64_t v46 = v92;
  v46[1] = v47;
  void v46[2] = v94;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v45);
  uint64_t v48 = v83;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v44, v83, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v48, v44, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>);
  double v49 = v68;
  uint64_t v50 = (uint64_t)v66;
  uint64_t v51 = v90;
  uint64_t v52 = v91;
  *uint64_t v68 = v66;
  v49[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v52;
  uint64_t v53 = v89;
  double v49[2] = v51;
  v49[3] = v53;
  uint64_t v54 = v70;
  v49[4] = v71;
  v49[5] = v54;
  char v55 = v88;
  v49[6] = v87;
  v49[7] = v55;
  id v56 = v59;
  v49[8] = partial apply for closure #1 in miniButton(systemName:_:);
  v49[9] = v56;
  v49[10] = partial apply for closure #3 in MiniObjectButtons.body.getter;
  v49[11] = (uint64_t (*)@<X0>(uint64_t@<X8>))v27;
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?, MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>, MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>, ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>));
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v44, (uint64_t)v49 + *(int *)(v57 + 80), &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>);
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(v50);
  swift_retain();
  swift_retain();
  outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v44, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>);
  swift_release();
  swift_release();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v50);
}