uint64_t CanvasFormattingProxy.bold.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (**v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int64_t v71;
  uint64_t (**v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v3 - 8);
  v57 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v59 = *(void *)(v5 - 8);
  v60 = v5;
  MEMORY[0x270FA5388](v5);
  v58 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void *)(a1 + 16);
  v65 = *(void *)(*(void *)(a1 + 24) + 16);
  v66 = v7;
  v64 = type metadata accessor for Capsule();
  v8 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  v63 = (uint64_t)&v57 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v10 - 8);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v13 - 8);
  v69 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  v21 = (char *)&v57 - v20;
  v67 = v1;
  v22 = *(void *)(v1 + 8);
  v23 = *(void *)(v22 + 56);
  v70 = v22 + 56;
  v24 = 1 << *(unsigned char *)(v22 + 32);
  v25 = -1;
  if (v24 < 64) {
    v25 = ~(-1 << v24);
  }
  v26 = v25 & v23;
  v73 = v16 + 32;
  v74 = v16 + 16;
  v62 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  v71 = (unint64_t)(v24 + 63) >> 6;
  v72 = (uint64_t (**)(char *, uint64_t))(v16 + 8);
  v75 = v22;
  result = swift_bridgeObjectRetain();
  v28 = 0;
  v68 = v18;
  v61 = v15;
  while (1)
  {
    if (v26)
    {
      v29 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      v30 = v29 | (v28 << 6);
      goto LABEL_22;
    }
    v31 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v31 >= v71) {
      goto LABEL_25;
    }
    v32 = *(void *)(v70 + 8 * v31);
    ++v28;
    if (!v32)
    {
      v28 = v31 + 1;
      if (v31 + 1 >= v71) {
        goto LABEL_25;
      }
      v32 = *(void *)(v70 + 8 * v28);
      if (!v32)
      {
        v28 = v31 + 2;
        if (v31 + 2 >= v71) {
          goto LABEL_25;
        }
        v32 = *(void *)(v70 + 8 * v28);
        if (!v32) {
          break;
        }
      }
    }
LABEL_21:
    v26 = (v32 - 1) & v32;
    v30 = __clz(__rbit64(v32)) + (v28 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v21, *(void *)(v75 + 48) + *(void *)(v16 + 72) * v30, v15);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v21, v15);
    WeakTagged_9.tagged6.getter();
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
    v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v12, 1, v34) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakRef<Shape>?);
    }
    else
    {
      v36 = v21;
      v37 = v63;
      Canvas.updatablePaper2.getter(v63);
      v38 = (uint64_t)v69;
      WeakRef.subscript.getter();
      (*v62)(v37, v64);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v34);
      v39 = type metadata accessor for Shape();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v38, 1, v39) != 1)
      {
        v42 = v58;
        v41 = v59;
        v43 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v38 + *(int *)(v39 + 52), v60);
        v44 = (void *)CRAttributedString.attributedString.getter();
        v45 = objc_msgSend(v44, sel_string);

        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v48 = v47;

        if (v46 || v48 != 0xE000000000000000)
        {
          v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
          if (v49) {
            goto LABEL_30;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
          v56 = swift_allocObject();
          *(_OWORD *)(v56 + 16) = xmmword_20C832C20;
          CRAttributedString.runs.getter();
          v55 = Array<A>.textStyles.getter(v56);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          v54 = v61;
        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
LABEL_30:
          type metadata accessor for ShapeSecondaryProperties();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          v50 = (uint64_t)v57;
          CRRegister.wrappedValue.getter();
          v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
          v52 = *(void *)(v51 - 8);
          v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51);
          v54 = v61;
          if (v53 == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            v55 = 0;
          }
          else
          {
            v55 = CRAttributedString.Attributes<>.textStyles.getter();
            (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
          }
        }
        _s8PaperKit5ShapeVWOhTm_0(v38, (uint64_t (*)(void))type metadata accessor for Shape);
        v40 = v55 & 1;
        (*v72)(v68, v54);
LABEL_35:
        swift_release();
        return v40;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v38, &demangling cache variable for type metadata for Shape?);
      v18 = v68;
      v21 = v36;
      v15 = v61;
    }
    result = (*v72)(v18, v15);
  }
  v33 = v31 + 3;
  if (v33 >= v71)
  {
LABEL_25:
    v40 = 0;
    goto LABEL_35;
  }
  v32 = *(void *)(v70 + 8 * v33);
  if (v32)
  {
    v28 = v33;
    goto LABEL_21;
  }
  while (1)
  {
    v28 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v28 >= v71) {
      goto LABEL_25;
    }
    v32 = *(void *)(v70 + 8 * v28);
    ++v33;
    if (v32) {
      goto LABEL_21;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.italic.getter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v3 - 8);
  v57 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v59 = *(void *)(v5 - 8);
  uint64_t v60 = v5;
  MEMORY[0x270FA5388](v5);
  v58 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v65 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t v66 = v7;
  uint64_t v64 = type metadata accessor for Capsule();
  uint64_t v8 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v63 = (uint64_t)&v57 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v10 - 8);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v13 - 8);
  v69 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  v21 = (char *)&v57 - v20;
  uint64_t v67 = v1;
  uint64_t v22 = *(void *)(v1 + 8);
  uint64_t v23 = *(void *)(v22 + 56);
  uint64_t v70 = v22 + 56;
  uint64_t v24 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & v23;
  uint64_t v73 = v16 + 32;
  uint64_t v74 = v16 + 16;
  v62 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  int64_t v71 = (unint64_t)(v24 + 63) >> 6;
  v72 = (uint64_t (**)(char *, uint64_t))(v16 + 8);
  uint64_t v75 = v22;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v28 = 0;
  v68 = v18;
  uint64_t v61 = v15;
  while (1)
  {
    if (v26)
    {
      unint64_t v29 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      unint64_t v30 = v29 | (v28 << 6);
      goto LABEL_22;
    }
    int64_t v31 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v31 >= v71) {
      goto LABEL_25;
    }
    unint64_t v32 = *(void *)(v70 + 8 * v31);
    ++v28;
    if (!v32)
    {
      int64_t v28 = v31 + 1;
      if (v31 + 1 >= v71) {
        goto LABEL_25;
      }
      unint64_t v32 = *(void *)(v70 + 8 * v28);
      if (!v32)
      {
        int64_t v28 = v31 + 2;
        if (v31 + 2 >= v71) {
          goto LABEL_25;
        }
        unint64_t v32 = *(void *)(v70 + 8 * v28);
        if (!v32) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v26 = (v32 - 1) & v32;
    unint64_t v30 = __clz(__rbit64(v32)) + (v28 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v21, *(void *)(v75 + 48) + *(void *)(v16 + 72) * v30, v15);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v21, v15);
    WeakTagged_9.tagged6.getter();
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v12, 1, v34) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakRef<Shape>?);
    }
    else
    {
      v36 = v21;
      uint64_t v37 = v63;
      Canvas.updatablePaper2.getter(v63);
      uint64_t v38 = (uint64_t)v69;
      WeakRef.subscript.getter();
      (*v62)(v37, v64);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v34);
      uint64_t v39 = type metadata accessor for Shape();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v38, 1, v39) != 1)
      {
        v42 = v58;
        uint64_t v41 = v59;
        uint64_t v43 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v38 + *(int *)(v39 + 52), v60);
        v44 = (void *)CRAttributedString.attributedString.getter();
        id v45 = objc_msgSend(v44, sel_string);

        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v48 = v47;

        if (v46 || v48 != 0xE000000000000000)
        {
          char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
          if (v49) {
            goto LABEL_30;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
          uint64_t v56 = swift_allocObject();
          *(_OWORD *)(v56 + 16) = xmmword_20C832C20;
          CRAttributedString.runs.getter();
          unint64_t v55 = Array<A>.textStyles.getter(v56);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          uint64_t v54 = v61;
        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
LABEL_30:
          type metadata accessor for ShapeSecondaryProperties();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          uint64_t v50 = (uint64_t)v57;
          CRRegister.wrappedValue.getter();
          uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
          uint64_t v52 = *(void *)(v51 - 8);
          int v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51);
          uint64_t v54 = v61;
          if (v53 == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            unint64_t v55 = 0;
          }
          else
          {
            unint64_t v55 = CRAttributedString.Attributes<>.textStyles.getter();
            (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
          }
        }
        _s8PaperKit5ShapeVWOhTm_0(v38, (uint64_t (*)(void))type metadata accessor for Shape);
        uint64_t v40 = (v55 >> 1) & 1;
        (*v72)(v68, v54);
LABEL_35:
        swift_release();
        return v40;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v38, &demangling cache variable for type metadata for Shape?);
      v18 = v68;
      v21 = v36;
      uint64_t v15 = v61;
    }
    uint64_t result = (*v72)(v18, v15);
  }
  int64_t v33 = v31 + 3;
  if (v33 >= v71)
  {
LABEL_25:
    uint64_t v40 = 0;
    goto LABEL_35;
  }
  unint64_t v32 = *(void *)(v70 + 8 * v33);
  if (v32)
  {
    int64_t v28 = v33;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v28 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v28 >= v71) {
      goto LABEL_25;
    }
    unint64_t v32 = *(void *)(v70 + 8 * v28);
    ++v33;
    if (v32) {
      goto LABEL_21;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.bold.setter(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  v260 = a6;
  uint64_t v213 = a5;
  uint64_t v212 = a4;
  int v259 = a3;
  uint64_t v214 = a2;
  v239 = a1;
  uint64_t v211 = *a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  v228 = (char *)&v192 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  v265 = (char *)&v192 - v10;
  uint64_t v266 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  uint64_t v277 = *(void *)(v266 - 8);
  MEMORY[0x270FA5388](v266);
  v269 = (char *)&v192 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v12 - 8);
  v221 = (char *)&v192 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v206 = (uint64_t)&v192 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v205 = (uint64_t)&v192 - v17;
  MEMORY[0x270FA5388](v18);
  v204 = (char *)&v192 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v20 - 8);
  v251 = (char *)&v192 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v252 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  int64_t v268 = *(void *)(v252 - 8);
  MEMORY[0x270FA5388](v252);
  v198 = (char *)&v192 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v257 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v267 = *(void *)(v257 - 8);
  MEMORY[0x270FA5388](v257);
  v197 = (char *)&v192 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  v256 = (char *)&v192 - v25;
  uint64_t v261 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v26 = *(void *)(v261 - 8);
  MEMORY[0x270FA5388](v261);
  v209 = (char *)&v192 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  v193 = (char *)&v192 - v29;
  MEMORY[0x270FA5388](v30);
  v200 = (char *)&v192 - v31;
  MEMORY[0x270FA5388](v32);
  v232 = (char *)&v192 - v33;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v34 - 8);
  v199 = (char *)&v192 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (char *)&v192 - v37;
  uint64_t v238 = type metadata accessor for Shape();
  uint64_t v39 = *(void *)(v238 - 8);
  MEMORY[0x270FA5388](v238 - 8);
  uint64_t v219 = (uint64_t)&v192 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v41);
  uint64_t v236 = (uint64_t)&v192 - v42;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v43 - 8);
  id v45 = (char *)&v192 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v47 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  char v49 = (char *)&v192 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v50);
  v262 = (char *)&v192 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v52);
  v248 = (char *)&v192 - v55;
  uint64_t v56 = *(void *)(v214 + 8);
  uint64_t v57 = *(void *)(v56 + 56);
  uint64_t v234 = v56 + 56;
  uint64_t v58 = 1 << *(unsigned char *)(v56 + 32);
  uint64_t v59 = -1;
  if (v58 < 64) {
    uint64_t v59 = ~(-1 << v58);
  }
  unint64_t v60 = v59 & v57;
  int64_t v235 = (unint64_t)(v58 + 63) >> 6;
  uint64_t v247 = v54 + 16;
  uint64_t v246 = v54 + 32;
  v245 = (unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  v231 = (void (**)(char *, char *, uint64_t))(v47 + 32);
  v237 = (unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  v226 = (void (**)(char *))(v26 + 16);
  v225 = (void (**)(char *, uint64_t))(v26 + 8);
  v196 = (void (**)(char *, uint64_t))(v268 + 8);
  v195 = (void (**)(char *, char *, uint64_t))(v267 + 32);
  v250 = (uint64_t (**)(char *, uint64_t, uint64_t))(v277 + 48);
  v242 = (void (**)(char *, char *, uint64_t))(v277 + 32);
  v258 = (void (**)(char *, uint64_t))(v7 + 8);
  p_Swift::String_optional familyName = &v275._familyName;
  v240 = (void (**)(char *, uint64_t))(v277 + 8);
  v194 = (void (**)(char *, uint64_t))(v267 + 8);
  v203 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  v217 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v210 = (void (**)(char *, uint64_t, uint64_t))(v7 + 32);
  v201 = (void (**)(char *, char *, uint64_t))(v7 + 16);
  v229 = (void (**)(char *, uint64_t))(v47 + 8);
  uint64_t v61 = v46;
  uint64_t v62 = v53;
  uint64_t v249 = v54;
  v244 = (void (**)(char *, uint64_t))(v54 + 8);
  uint64_t v253 = v56;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v64 = 0;
  Swift::String_optional v207 = (Swift::String_optional)xmmword_20C834980;
  uint64_t v277 = v6;
  uint64_t v218 = v61;
  v222 = v49;
  v220 = v38;
  v223 = v45;
  uint64_t v230 = v62;
  while (1)
  {
    if (v60)
    {
      uint64_t v267 = (v60 - 1) & v60;
      int64_t v268 = v64;
      unint64_t v67 = __clz(__rbit64(v60)) | (v64 << 6);
      goto LABEL_23;
    }
    int64_t v68 = v64 + 1;
    if (__OFADD__(v64, 1)) {
      goto LABEL_123;
    }
    if (v68 >= v235) {
      return swift_release();
    }
    unint64_t v69 = *(void *)(v234 + 8 * v68);
    int64_t v70 = v64 + 1;
    if (!v69)
    {
      int64_t v70 = v64 + 2;
      if (v64 + 2 >= v235) {
        return swift_release();
      }
      unint64_t v69 = *(void *)(v234 + 8 * v70);
      if (!v69)
      {
        int64_t v70 = v64 + 3;
        if (v64 + 3 >= v235) {
          return swift_release();
        }
        unint64_t v69 = *(void *)(v234 + 8 * v70);
        if (!v69) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v267 = (v69 - 1) & v69;
    int64_t v268 = v70;
    unint64_t v67 = __clz(__rbit64(v69)) + (v70 << 6);
LABEL_23:
    uint64_t v72 = v249;
    uint64_t v73 = v248;
    (*(void (**)(char *, unint64_t, uint64_t))(v249 + 16))(v248, *(void *)(v253 + 48) + *(void *)(v249 + 72) * v67, v62);
    uint64_t v74 = v262;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v262, v73, v62);
    WeakTagged_9.tagged6.getter();
    if ((*v245)(v45, 1, v61) == 1)
    {
      (*v244)(v74, v62);
      uint64_t v65 = (uint64_t)v45;
      uint64_t v66 = &demangling cache variable for type metadata for WeakRef<Shape>?;
LABEL_5:
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v65, v66);
      int64_t v64 = v268;
      goto LABEL_6;
    }
    (*v231)(v49, v45, v61);
    WeakRef.subscript.getter();
    uint64_t v75 = *v237;
    uint64_t v76 = v238;
    if ((*v237)(v38, 1, v238) == 1)
    {
      (*v229)(v49, v61);
      uint64_t v62 = v230;
      (*v244)(v262, v230);
      uint64_t v65 = (uint64_t)v38;
      uint64_t v66 = &demangling cache variable for type metadata for Shape?;
      goto LABEL_5;
    }
    v233 = v75;
    uint64_t v77 = (uint64_t)v38;
    uint64_t v78 = v236;
    _s8PaperKit5ShapeVWObTm_0(v77, v236, (uint64_t (*)(void))type metadata accessor for Shape);
    v79 = *v226;
    uint64_t v227 = v78 + *(int *)(v76 + 52);
    uint64_t v80 = v261;
    v79(v232);
    v81 = (void *)CRAttributedString.attributedString.getter();
    id v82 = objc_msgSend(v81, sel_string);

    uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v85 = v84;

    if (!v83 && v85 == 0xE000000000000000)
    {
      swift_bridgeObjectRelease();
      (*v225)(v232, v80);
      goto LABEL_94;
    }
    v216 = (void (*)(char *, uint64_t, uint64_t))v79;
    char v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v87 = *v225;
    (*v225)(v232, v80);
    v88 = v269;
    if ((v86 & 1) == 0)
    {
      v215 = v87;
      uint64_t v89 = (uint64_t)v199;
      WeakRef.subscript.getter();
      uint64_t v90 = v238;
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v233)(v89, 1, v238);
      if (result == 1) {
        goto LABEL_129;
      }
      v91 = v200;
      v216(v200, v89 + *(int *)(v90 + 52), v80);
      _s8PaperKit5ShapeVWOhTm_0(v89, (uint64_t (*)(void))type metadata accessor for Shape);
      CRAttributedString.count.getter();
      v215(v91, v80);
      uint64_t KeyPath = swift_getKeyPath();
      v202 = (void (*)(char *, void))WeakRef.subscript.modify();
      uint64_t v93 = v92;
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v233)(v92, 1, v90);
      if (result == 1)
      {
LABEL_130:
        __break(1u);
        return result;
      }
      uint64_t v94 = *(int *)(v90 + 52);
      uint64_t result = NSNotFound.getter();
      if (!result) {
        goto LABEL_127;
      }
      uint64_t v95 = v93 + v94;
      v96 = v198;
      uint64_t v254 = v95;
      CRAttributedString.subscript.getter();
      v97 = v197;
      uint64_t v98 = v252;
      CRAttributedString.Substring.runs.getter();
      (*v196)(v96, v98);
      (*v195)(v256, v97, v257);
      v99 = v251;
      CRAttributedString.Runs.next()();
      uint64_t v100 = v266;
      v243 = *v250;
      int v101 = v243(v99, 1, v266);
      v102 = (void *)MEMORY[0x263F8EE78];
      if (v101 == 1)
      {
LABEL_34:
        (*v194)(v256, v257);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v103 = v254;
        v216(v209, v254, v80);
        v104 = (void *)CRAttributedString.attributedString.getter();
        id v105 = objc_msgSend(v104, sel_string);

        uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v108 = v107;

        if (v106 || v108 != 0xE000000000000000)
        {
          char v152 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v153 = v215;
          v215(v209, v80);
          if ((v152 & 1) == 0)
          {
            v154 = v200;
            v155 = v216;
            v216(v200, v103, v80);
            v156 = v193;
            v155(v193, v103, v80);
            v157 = (void *)CRAttributedString.attributedString.getter();
            v153(v156, v80);
            id v158 = objc_msgSend(v157, sel_length);

            uint64_t result = (uint64_t)v158 - 1;
            if (__OFSUB__(v158, 1)) {
              goto LABEL_128;
            }
            uint64_t v159 = (uint64_t)v204;
            CRAttributedString.attributes(at:effectiveRange:)();
            v153(v154, v80);
            (*v203)(v159, 0, 1, v6);
            uint64_t v160 = v205;
            outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v159, v205);
            outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v160, v206);
            type metadata accessor for ShapeSecondaryProperties();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
            CRRegister.wrappedValue.setter();
            outlined destroy of StocksKitCurrencyCache.Provider?(v160, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            outlined destroy of StocksKitCurrencyCache.Provider?(v159, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v215(v209, v80);
        }
        v202(v276, 0);
        goto LABEL_94;
      }
      v241 = *v242;
      while (2)
      {
        v241(v88, v99, v100);
        CRAttributedString.Runs.Run.attributes.getter();
        swift_getKeyPath();
        unint64_t v264 = lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
        CRAttributedString.Attributes.subscript.getter();
        swift_release();
        if (v271 == (void *)1)
        {
          if (one-time initialization token for textBoxDefaultFont != -1) {
            swift_once();
          }
          Font.init(_:)(&v275, (UIFont)(id)static UIConstants.textBoxDefaultFont);
        }
        else
        {
          v275._name.value._uint64_t countAndFlagsBits = v270;
          v275._name.value._object = v271;
          v275._Swift::String_optional familyName = familyName;
          LODWORD(v275.pointSize) = v273;
          v275.traits.Swift::Int rawValue = v274;
        }
        if (v259)
        {
          v109 = v260;
          swift_beginAccess();
          Swift::Int rawValue = v275.traits.rawValue;
          if ((*v109 & ~v275.traits.rawValue) != 0)
          {
            Swift::Int rawValue = v275.traits.rawValue | *v109;
            goto LABEL_48;
          }
        }
        else
        {
          v111 = v260;
          swift_beginAccess();
          Swift::Int rawValue = v275.traits.rawValue;
          if ((v275.traits.rawValue & *v111) != 0)
          {
            Swift::Int rawValue = v275.traits.rawValue & ~*v111;
LABEL_48:
            v275.traits.Swift::Int rawValue = rawValue;
          }
        }
        uint64_t v263 = (uint64_t)v102;
        uint64_t countAndFlagsBits = v275._name.value._countAndFlagsBits;
        object = v275._name.value._object;
        uint64_t v114 = v275._familyName.value._countAndFlagsBits;
        v115 = v275._familyName.value._object;
        Swift::Float pointSize = v275.pointSize;
        uint64_t v270 = v275._name.value._countAndFlagsBits;
        v271 = v275._name.value._object;
        Swift::String_optional familyName = v275._familyName;
        *(Swift::Float *)&uint64_t v273 = v275.pointSize;
        Swift::Int v274 = rawValue;
        id v117 = Font.platformFont.getter();
        id v118 = objc_msgSend(v117, sel_fontName);

        uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v121 = v120;

        uint64_t v122 = v277;
        if (object
          && (v119 == countAndFlagsBits && object == v121 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          v123._uint64_t countAndFlagsBits = 46;
          v123._object = (void *)0xE100000000000000;
          Swift::Bool v124 = String.hasPrefix(_:)(v123);
          swift_bridgeObjectRelease();
          if (v124)
          {
            swift_bridgeObjectRelease();
            uint64_t v119 = 0;
            v121 = 0;
          }
          swift_bridgeObjectRelease();
          v275._name.value._uint64_t countAndFlagsBits = v119;
          v275._name.value._object = v121;
          uint64_t v270 = v119;
          v271 = v121;
          familyName.value._uint64_t countAndFlagsBits = v114;
          familyName.value._object = v115;
          *(Swift::Float *)&uint64_t v273 = pointSize;
          Swift::Int v274 = rawValue;
          id v125 = Font.platformFont.getter();
          id v126 = objc_msgSend(v125, sel_familyName);

          uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v129 = v128;

          Font.familyName.setter(v127, v129);
        }
        uint64_t v130 = v275._name.value._countAndFlagsBits;
        v131 = v275._name.value._object;
        uint64_t v133 = v275._familyName.value._countAndFlagsBits;
        v132 = v275._familyName.value._object;
        float v134 = v275.pointSize;
        Swift::Int v135 = v275.traits.rawValue;
        (*v258)(v265, v122);
        uint64_t result = CRAttributedString.Runs.Run.range.getter();
        uint64_t v137 = v136 - result;
        if (__OFSUB__(v136, result))
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
          goto LABEL_130;
        }
        uint64_t v138 = result;
        if (one-time initialization token for defaultValue != -1) {
          uint64_t result = swift_once();
        }
        uint64_t v139 = qword_2676CCEA0;
        uint64_t v140 = qword_2676CCEA8;
        float v141 = *(float *)&dword_2676CCEB0;
        uint64_t v142 = qword_2676CCEB8;
        if (v131)
        {
          if (!qword_2676CCE98
            || (v130 != static TextAttributeScope.FontAttribute.defaultValue || v131 != (void *)qword_2676CCE98)
            && (uint64_t v224 = qword_2676CCEB8,
                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                uint64_t v142 = v224,
                (result & 1) == 0))
          {
LABEL_81:
            if (__OFADD__(v138, v137)) {
              goto LABEL_121;
            }
            if (v138 + v137 < v138) {
              goto LABEL_122;
            }
            v275._name.value._uint64_t countAndFlagsBits = v130;
            v275._name.value._object = v131;
            v275._familyName.value._uint64_t countAndFlagsBits = v133;
            v275._familyName.value._object = v132;
            *(void *)&v275.Swift::Float pointSize = LODWORD(v134);
            v275.traits.Swift::Int rawValue = v135;
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v80 = v261;
            v146 = (void (*)(uint64_t *, void))CRAttributedString.subscript.modify();
            CRAttributedString.Substring.subscript.setter();
            v146(&v270, 0);
            swift_bridgeObjectRelease();
            goto LABEL_84;
          }
        }
        else if (qword_2676CCE98)
        {
          goto LABEL_81;
        }
        if (v132)
        {
          if (!v140) {
            goto LABEL_81;
          }
          if (v133 != v139 || v132 != (void *)v140)
          {
            uint64_t v143 = v142;
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0 || v134 != v141 || v135 != v143) {
              goto LABEL_81;
            }
LABEL_78:
            if (__OFADD__(v138, v137)) {
              goto LABEL_124;
            }
            if (v138 + v137 < v138) {
              goto LABEL_125;
            }
            v275._name = v207;
            v144 = p_familyName;
            Swift::String_optional *p_familyName = 0u;
            v144[1] = 0u;
            swift_retain();
            uint64_t v80 = v261;
            v145 = (void (*)(uint64_t *, void))CRAttributedString.subscript.modify();
            CRAttributedString.Substring.subscript.setter();
            v145(&v270, 0);
            swift_bridgeObjectRelease();
LABEL_84:
            swift_bridgeObjectRelease();
            v102 = (void *)v263;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v88 = v269;
            v99 = v251;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              v102 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v102[2] + 1, 1, v102);
            }
            unint64_t v149 = v102[2];
            unint64_t v148 = v102[3];
            if (v149 >= v148 >> 1) {
              v102 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v148 > 1), v149 + 1, 1, v102);
            }
            v102[2] = v149 + 1;
            v150 = &v102[2 * v149];
            v150[4] = v138;
            v150[5] = v137;
            uint64_t v100 = v266;
            (*v240)(v88, v266);
            CRAttributedString.Runs.next()();
            int v151 = v243(v99, 1, v100);
            uint64_t v6 = v277;
            if (v151 == 1) {
              goto LABEL_34;
            }
            continue;
          }
        }
        else if (v140)
        {
          goto LABEL_81;
        }
        break;
      }
      if (v134 != v141 || v135 != v142) {
        goto LABEL_81;
      }
      goto LABEL_78;
    }
LABEL_94:
    uint64_t v263 = type metadata accessor for ShapeSecondaryProperties();
    uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    uint64_t v162 = (uint64_t)v221;
    uint64_t KeyPath = v161;
    CRRegister.wrappedValue.getter();
    uint64_t v163 = v219;
    outlined init with copy of Shape(v236, v219);
    if ((*v217)(v162, 1, v6) == 1)
    {
      type metadata accessor for CanvasFormattingProxy();
      CanvasFormattingProxy.defaultEmptyTextBoxAttribues(for:)();
      _s8PaperKit5ShapeVWOhTm_0(v163, (uint64_t (*)(void))type metadata accessor for Shape);
      outlined destroy of StocksKitCurrencyCache.Provider?(v162, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    }
    else
    {
      _s8PaperKit5ShapeVWOhTm_0(v163, (uint64_t (*)(void))type metadata accessor for Shape);
      (*v210)(v228, v162, v6);
    }
    unint64_t v264 = swift_getKeyPath();
    swift_getKeyPath();
    lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    if (v271 == (void *)1)
    {
      if (one-time initialization token for textBoxDefaultFont != -1) {
        swift_once();
      }
      Font.init(_:)(&v275, (UIFont)(id)static UIConstants.textBoxDefaultFont);
    }
    else
    {
      v275._name.value._uint64_t countAndFlagsBits = v270;
      v275._name.value._object = v271;
      v275._Swift::String_optional familyName = familyName;
      LODWORD(v275.pointSize) = v273;
      v275.traits.Swift::Int rawValue = v274;
    }
    if (v259)
    {
      v164 = v260;
      swift_beginAccess();
      Swift::Int v165 = v275.traits.rawValue;
      if ((*v164 & ~v275.traits.rawValue) == 0) {
        goto LABEL_108;
      }
      Swift::Int v165 = v275.traits.rawValue | *v164;
    }
    else
    {
      v166 = v260;
      swift_beginAccess();
      Swift::Int v165 = v275.traits.rawValue;
      if ((v275.traits.rawValue & *v166) == 0) {
        goto LABEL_108;
      }
      Swift::Int v165 = v275.traits.rawValue & ~*v166;
    }
    v275.traits.Swift::Int rawValue = v165;
LABEL_108:
    uint64_t v168 = v275._name.value._countAndFlagsBits;
    v167 = v275._name.value._object;
    uint64_t v169 = v275._familyName.value._countAndFlagsBits;
    v170 = v275._familyName.value._object;
    Swift::Float v171 = v275.pointSize;
    uint64_t v270 = v275._name.value._countAndFlagsBits;
    v271 = v275._name.value._object;
    Swift::String_optional familyName = v275._familyName;
    *(Swift::Float *)&uint64_t v273 = v275.pointSize;
    Swift::Int v274 = v165;
    id v172 = Font.platformFont.getter();
    id v173 = objc_msgSend(v172, sel_fontName);

    uint64_t v174 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v176 = v175;

    uint64_t v6 = v277;
    if (v167 && (v174 == v168 && v167 == v176 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      v177._uint64_t countAndFlagsBits = 46;
      v177._object = (void *)0xE100000000000000;
      Swift::Bool v178 = String.hasPrefix(_:)(v177);
      swift_bridgeObjectRelease();
      if (v178)
      {
        swift_bridgeObjectRelease();
        uint64_t v174 = 0;
        v176 = 0;
      }
      swift_bridgeObjectRelease();
      v275._name.value._uint64_t countAndFlagsBits = v174;
      v275._name.value._object = v176;
      uint64_t v270 = v174;
      v271 = v176;
      familyName.value._uint64_t countAndFlagsBits = v169;
      familyName.value._object = v170;
      *(Swift::Float *)&uint64_t v273 = v171;
      Swift::Int v274 = v165;
      id v179 = Font.platformFont.getter();
      id v180 = objc_msgSend(v179, sel_familyName);

      uint64_t v181 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v183 = v182;

      Font.familyName.setter(v181, v183);
    }
    *(void *)&v275.Swift::Float pointSize = LODWORD(v275.pointSize);
    v184 = v228;
    CRAttributedString.Attributes.subscript.setter();
    uint64_t v61 = v218;
    char v49 = v222;
    v185 = (void (*)(PaperKit::Font *, void))WeakRef.subscript.modify();
    unsigned int v187 = v233(v186, 1, v238);
    id v45 = v223;
    v188 = v262;
    if (!v187)
    {
      uint64_t v189 = (uint64_t)v204;
      (*v201)(v204, v184, v6);
      (*v203)(v189, 0, 1, v6);
      uint64_t v190 = v205;
      outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v189, v205);
      outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v190, v206);
      id v45 = v223;
      CRRegister.wrappedValue.setter();
      outlined destroy of StocksKitCurrencyCache.Provider?(v190, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      uint64_t v191 = v189;
      char v49 = v222;
      outlined destroy of StocksKitCurrencyCache.Provider?(v191, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    }
    v185(&v275, 0);
    int64_t v64 = v268;
    (*v258)(v184, v6);
    _s8PaperKit5ShapeVWOhTm_0(v236, (uint64_t (*)(void))type metadata accessor for Shape);
    (*v229)(v49, v61);
    uint64_t v62 = v230;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v244)(v188, v230);
    uint64_t v38 = v220;
LABEL_6:
    unint64_t v60 = v267;
  }
  uint64_t v71 = v64 + 4;
  if (v64 + 4 >= v235) {
    return swift_release();
  }
  unint64_t v69 = *(void *)(v234 + 8 * v71);
  if (v69)
  {
    int64_t v70 = v64 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v70 = v71 + 1;
    if (__OFADD__(v71, 1)) {
      goto LABEL_126;
    }
    if (v70 >= v235) {
      return swift_release();
    }
    unint64_t v69 = *(void *)(v234 + 8 * v70);
    ++v71;
    if (v69) {
      goto LABEL_22;
    }
  }
}

uint64_t CanvasFormattingProxy.underline.getter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v57 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v59 = *(void *)(v5 - 8);
  uint64_t v60 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v58 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v65 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t v66 = v7;
  uint64_t v64 = type metadata accessor for Capsule();
  uint64_t v8 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v63 = (uint64_t)&v57 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v13 - 8);
  unint64_t v69 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v57 - v20;
  uint64_t v67 = v1;
  uint64_t v22 = *(void *)(v1 + 8);
  uint64_t v23 = *(void *)(v22 + 56);
  uint64_t v70 = v22 + 56;
  uint64_t v24 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & v23;
  uint64_t v73 = v16 + 32;
  uint64_t v74 = v16 + 16;
  uint64_t v62 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  int64_t v71 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v72 = (uint64_t (**)(char *, uint64_t))(v16 + 8);
  uint64_t v75 = v22;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v28 = 0;
  int64_t v68 = v18;
  uint64_t v61 = v15;
  while (1)
  {
    if (v26)
    {
      unint64_t v29 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      unint64_t v30 = v29 | (v28 << 6);
      goto LABEL_22;
    }
    int64_t v31 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v31 >= v71) {
      goto LABEL_25;
    }
    unint64_t v32 = *(void *)(v70 + 8 * v31);
    ++v28;
    if (!v32)
    {
      int64_t v28 = v31 + 1;
      if (v31 + 1 >= v71) {
        goto LABEL_25;
      }
      unint64_t v32 = *(void *)(v70 + 8 * v28);
      if (!v32)
      {
        int64_t v28 = v31 + 2;
        if (v31 + 2 >= v71) {
          goto LABEL_25;
        }
        unint64_t v32 = *(void *)(v70 + 8 * v28);
        if (!v32) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v26 = (v32 - 1) & v32;
    unint64_t v30 = __clz(__rbit64(v32)) + (v28 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v21, *(void *)(v75 + 48) + *(void *)(v16 + 72) * v30, v15);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v21, v15);
    WeakTagged_9.tagged6.getter();
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v12, 1, v34) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakRef<Shape>?);
    }
    else
    {
      uint64_t v36 = v21;
      uint64_t v37 = v63;
      Canvas.updatablePaper2.getter(v63);
      uint64_t v38 = (uint64_t)v69;
      WeakRef.subscript.getter();
      (*v62)(v37, v64);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v34);
      uint64_t v39 = type metadata accessor for Shape();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v38, 1, v39) != 1)
      {
        uint64_t v42 = v58;
        uint64_t v41 = v59;
        uint64_t v43 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v38 + *(int *)(v39 + 52), v60);
        uint64_t v44 = (void *)CRAttributedString.attributedString.getter();
        id v45 = objc_msgSend(v44, sel_string);

        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v48 = v47;

        if (v46 || v48 != 0xE000000000000000)
        {
          char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
          if (v49) {
            goto LABEL_30;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
          uint64_t v56 = swift_allocObject();
          *(_OWORD *)(v56 + 16) = xmmword_20C832C20;
          CRAttributedString.runs.getter();
          unint64_t v55 = Array<A>.textStyles.getter(v56);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          uint64_t v54 = v61;
        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
LABEL_30:
          type metadata accessor for ShapeSecondaryProperties();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          uint64_t v50 = (uint64_t)v57;
          CRRegister.wrappedValue.getter();
          uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
          uint64_t v52 = *(void *)(v51 - 8);
          int v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51);
          uint64_t v54 = v61;
          if (v53 == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            unint64_t v55 = 0;
          }
          else
          {
            unint64_t v55 = CRAttributedString.Attributes<>.textStyles.getter();
            (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
          }
        }
        _s8PaperKit5ShapeVWOhTm_0(v38, (uint64_t (*)(void))type metadata accessor for Shape);
        uint64_t v40 = (v55 >> 2) & 1;
        (*v72)(v68, v54);
LABEL_35:
        swift_release();
        return v40;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v38, &demangling cache variable for type metadata for Shape?);
      uint64_t v18 = v68;
      uint64_t v21 = v36;
      uint64_t v15 = v61;
    }
    uint64_t result = (*v72)(v18, v15);
  }
  int64_t v33 = v31 + 3;
  if (v33 >= v71)
  {
LABEL_25:
    uint64_t v40 = 0;
    goto LABEL_35;
  }
  unint64_t v32 = *(void *)(v70 + 8 * v33);
  if (v32)
  {
    int64_t v28 = v33;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v28 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v28 >= v71) {
      goto LABEL_25;
    }
    unint64_t v32 = *(void *)(v70 + 8 * v28);
    ++v33;
    if (v32) {
      goto LABEL_21;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.strikethrough.getter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v57 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v59 = *(void *)(v5 - 8);
  uint64_t v60 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v58 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v65 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t v66 = v7;
  uint64_t v64 = type metadata accessor for Capsule();
  uint64_t v8 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v63 = (uint64_t)&v57 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v13 - 8);
  unint64_t v69 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v57 - v20;
  uint64_t v67 = v1;
  uint64_t v22 = *(void *)(v1 + 8);
  uint64_t v23 = *(void *)(v22 + 56);
  uint64_t v70 = v22 + 56;
  uint64_t v24 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & v23;
  uint64_t v73 = v16 + 32;
  uint64_t v74 = v16 + 16;
  uint64_t v62 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  int64_t v71 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v72 = (uint64_t (**)(char *, uint64_t))(v16 + 8);
  uint64_t v75 = v22;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v28 = 0;
  int64_t v68 = v18;
  uint64_t v61 = v15;
  while (1)
  {
    if (v26)
    {
      unint64_t v29 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      unint64_t v30 = v29 | (v28 << 6);
      goto LABEL_22;
    }
    int64_t v31 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v31 >= v71) {
      goto LABEL_25;
    }
    unint64_t v32 = *(void *)(v70 + 8 * v31);
    ++v28;
    if (!v32)
    {
      int64_t v28 = v31 + 1;
      if (v31 + 1 >= v71) {
        goto LABEL_25;
      }
      unint64_t v32 = *(void *)(v70 + 8 * v28);
      if (!v32)
      {
        int64_t v28 = v31 + 2;
        if (v31 + 2 >= v71) {
          goto LABEL_25;
        }
        unint64_t v32 = *(void *)(v70 + 8 * v28);
        if (!v32) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v26 = (v32 - 1) & v32;
    unint64_t v30 = __clz(__rbit64(v32)) + (v28 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v21, *(void *)(v75 + 48) + *(void *)(v16 + 72) * v30, v15);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v21, v15);
    WeakTagged_9.tagged6.getter();
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v12, 1, v34) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakRef<Shape>?);
    }
    else
    {
      uint64_t v36 = v21;
      uint64_t v37 = v63;
      Canvas.updatablePaper2.getter(v63);
      uint64_t v38 = (uint64_t)v69;
      WeakRef.subscript.getter();
      (*v62)(v37, v64);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v34);
      uint64_t v39 = type metadata accessor for Shape();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v38, 1, v39) != 1)
      {
        uint64_t v42 = v58;
        uint64_t v41 = v59;
        uint64_t v43 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v38 + *(int *)(v39 + 52), v60);
        uint64_t v44 = (void *)CRAttributedString.attributedString.getter();
        id v45 = objc_msgSend(v44, sel_string);

        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v48 = v47;

        if (v46 || v48 != 0xE000000000000000)
        {
          char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
          if (v49) {
            goto LABEL_30;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
          uint64_t v56 = swift_allocObject();
          *(_OWORD *)(v56 + 16) = xmmword_20C832C20;
          CRAttributedString.runs.getter();
          unint64_t v55 = Array<A>.textStyles.getter(v56);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          uint64_t v54 = v61;
        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
LABEL_30:
          type metadata accessor for ShapeSecondaryProperties();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          uint64_t v50 = (uint64_t)v57;
          CRRegister.wrappedValue.getter();
          uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
          uint64_t v52 = *(void *)(v51 - 8);
          int v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51);
          uint64_t v54 = v61;
          if (v53 == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            unint64_t v55 = 0;
          }
          else
          {
            unint64_t v55 = CRAttributedString.Attributes<>.textStyles.getter();
            (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
          }
        }
        _s8PaperKit5ShapeVWOhTm_0(v38, (uint64_t (*)(void))type metadata accessor for Shape);
        uint64_t v40 = (v55 >> 3) & 1;
        (*v72)(v68, v54);
LABEL_35:
        swift_release();
        return v40;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v38, &demangling cache variable for type metadata for Shape?);
      uint64_t v18 = v68;
      uint64_t v21 = v36;
      uint64_t v15 = v61;
    }
    uint64_t result = (*v72)(v18, v15);
  }
  int64_t v33 = v31 + 3;
  if (v33 >= v71)
  {
LABEL_25:
    uint64_t v40 = 0;
    goto LABEL_35;
  }
  unint64_t v32 = *(void *)(v70 + 8 * v33);
  if (v32)
  {
    int64_t v28 = v33;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v28 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v28 >= v71) {
      goto LABEL_25;
    }
    unint64_t v32 = *(void *)(v70 + 8 * v28);
    ++v33;
    if (v32) {
      goto LABEL_21;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.bold.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(double))
{
  return Canvas.undoable(newChange:persistSelection:action:)(1, 0, a3);
}

void closure #1 in CanvasFormattingProxy.bold.setter()
{
  v0 = (void *)specialized Canvas.paperView.getter();
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v1 = v0;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.underline.setter(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  v209 = a7;
  uint64_t v175 = a6;
  uint64_t v166 = a5;
  uint64_t v165 = a4;
  int v217 = a3;
  uint64_t v189 = a1;
  uint64_t v163 = *a1;
  uint64_t v211 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  int64_t v214 = *(void *)(v211 - 8);
  MEMORY[0x270FA5388](v211);
  id v173 = (char *)&v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v191 = (char *)&v143 - v10;
  uint64_t v203 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  uint64_t v208 = *(void *)(v203 - 8);
  MEMORY[0x270FA5388](v203);
  v202 = (char *)&v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v12 - 8);
  v176 = (char *)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v159 = (uint64_t)&v143 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v158 = (uint64_t)&v143 - v17;
  MEMORY[0x270FA5388](v18);
  v157 = (char *)&v143 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v20 - 8);
  v201 = (char *)&v143 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  v210 = *(void (***)(char *, uint64_t))(v200 - 8);
  MEMORY[0x270FA5388](v200);
  unint64_t v149 = (char *)&v143 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v207 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v204 = *(void *)(v207 - 8);
  MEMORY[0x270FA5388](v207);
  unint64_t v148 = (char *)&v143 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v206 = (char *)&v143 - v25;
  uint64_t v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v26 = *(void *)(v212 - 8);
  MEMORY[0x270FA5388](v212 - 8);
  uint64_t v161 = (char *)&v143 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  v144 = (char *)&v143 - v29;
  MEMORY[0x270FA5388](v30);
  int v151 = (char *)&v143 - v31;
  MEMORY[0x270FA5388](v32);
  uint64_t v183 = (char *)&v143 - v33;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v34 - 8);
  v150 = (char *)&v143 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (char *)&v143 - v37;
  uint64_t v39 = type metadata accessor for Shape();
  uint64_t v40 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v171 = (uint64_t)&v143 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v42);
  uint64_t v44 = (char *)&v143 - v43;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v45 - 8);
  uint64_t v47 = (char *)&v143 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v213 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v48 = *(void *)(v213 - 8);
  MEMORY[0x270FA5388](v213);
  uint64_t v205 = (char *)&v143 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v50);
  MEMORY[0x270FA5388](v51);
  v197 = (char *)&v143 - v54;
  uint64_t v164 = a2;
  uint64_t v55 = *(void *)(a2 + 8);
  uint64_t v56 = *(void *)(v55 + 56);
  uint64_t v186 = v55 + 56;
  uint64_t v57 = 1 << *(unsigned char *)(v55 + 32);
  uint64_t v58 = -1;
  if (v57 < 64) {
    uint64_t v58 = ~(-1 << v57);
  }
  unint64_t v59 = v58 & v56;
  int64_t v187 = (unint64_t)(v57 + 63) >> 6;
  uint64_t v196 = v52 + 16;
  uint64_t v195 = v52 + 32;
  v194 = (unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  uint64_t v182 = (void (**)(char *, char *, uint64_t))(v48 + 32);
  v188 = (unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  uint64_t v60 = v53;
  id v179 = (void (**)(char *, char *, uint64_t))(v26 + 16);
  Swift::Bool v178 = (void (**)(char *, uint64_t))(v26 + 8);
  v147 = v210 + 1;
  v146 = (void (**)(char *, char *, uint64_t))(v204 + 32);
  v199 = (unsigned int (**)(char *, uint64_t, uint64_t))(v208 + 48);
  uint64_t v192 = (void (**)(char *, char *, uint64_t))(v208 + 32);
  v210 = (void (**)(char *, uint64_t))(v214 + 8);
  uint64_t v190 = (void (**)(char *, uint64_t))(v208 + 8);
  v145 = (void (**)(char *, uint64_t))(v204 + 8);
  v156 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v214 + 56);
  uint64_t v169 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v214 + 48);
  uint64_t v162 = (void (**)(char *, uint64_t, uint64_t))(v214 + 32);
  int v168 = v217 & 1;
  char v152 = (void (**)(char *, char *, uint64_t))(v214 + 16);
  id v180 = (void (**)(char *, uint64_t))(v48 + 8);
  uint64_t v61 = v47;
  uint64_t v198 = v52;
  v193 = (void (**)(uint64_t, uint64_t))(v52 + 8);
  uint64_t v204 = v55;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v63 = 0;
  uint64_t v174 = v44;
  id v172 = v38;
  uint64_t v184 = v39;
  v170 = v61;
  uint64_t v181 = v50;
  uint64_t v185 = v60;
  if (v59) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v68 = v63 + 1;
  if (!__OFADD__(v63, 1))
  {
    if (v68 < v187)
    {
      unint64_t v69 = *(void *)(v186 + 8 * v68);
      int64_t v70 = v63 + 1;
      if (v69) {
        goto LABEL_21;
      }
      int64_t v70 = v63 + 2;
      if (v63 + 2 >= v187) {
        return swift_release();
      }
      unint64_t v69 = *(void *)(v186 + 8 * v70);
      if (v69) {
        goto LABEL_21;
      }
      int64_t v70 = v63 + 3;
      if (v63 + 3 >= v187) {
        return swift_release();
      }
      unint64_t v69 = *(void *)(v186 + 8 * v70);
      if (v69)
      {
LABEL_21:
        unint64_t v59 = (v69 - 1) & v69;
        int64_t v214 = v70;
        for (unint64_t i = __clz(__rbit64(v69)) + (v70 << 6); ; unint64_t i = v66 | (v63 << 6))
        {
          uint64_t v72 = v198;
          uint64_t v73 = v197;
          (*(void (**)(char *, unint64_t, uint64_t))(v198 + 16))(v197, *(void *)(v204 + 48) + *(void *)(v198 + 72) * i, v50);
          (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v60, v73, v50);
          WeakTagged_9.tagged6.getter();
          uint64_t v74 = v213;
          if ((*v194)(v61, 1, v213) == 1) {
            break;
          }
          uint64_t v75 = v205;
          (*v182)(v205, v61, v74);
          WeakRef.subscript.getter();
          uint64_t v76 = *v188;
          if ((*v188)(v38, 1, v39) == 1)
          {
            (*v180)(v75, v74);
            uint64_t v60 = v185;
            uint64_t v50 = v181;
            (*v193)(v185, v181);
            uint64_t v64 = (uint64_t)v38;
            uint64_t v65 = &demangling cache variable for type metadata for Shape?;
LABEL_6:
            uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v64, v65);
            int64_t v63 = v214;
            if (!v59) {
              goto LABEL_8;
            }
            goto LABEL_7;
          }
          _s8PaperKit5ShapeVWObTm_0((uint64_t)v38, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for Shape);
          uint64_t v77 = &v44[*(int *)(v39 + 52)];
          uint64_t v78 = *v179;
          uint64_t v79 = v212;
          (*v179)(v183, v77, v212);
          uint64_t v80 = (void *)CRAttributedString.attributedString.getter();
          id v81 = objc_msgSend(v80, sel_string);

          uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v84 = v83;

          if (v82 || v84 != 0xE000000000000000)
          {
            Swift::String v177 = (void (*)(char *, uint64_t, uint64_t))v78;
            char v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            v87 = *v178;
            (*v178)(v183, v79);
            uint64_t v60 = v185;
            uint64_t v85 = (uint64_t)v176;
            if ((v86 & 1) == 0)
            {
              v167 = v87;
              uint64_t v160 = v77;
              uint64_t v88 = (uint64_t)v150;
              WeakRef.subscript.getter();
              uint64_t v89 = v184;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v76)(v88, 1, v184);
              if (result == 1) {
                goto LABEL_75;
              }
              uint64_t v90 = v76;
              v91 = v151;
              uint64_t v92 = v212;
              v177(v151, v88 + *(int *)(v89 + 52), v212);
              _s8PaperKit5ShapeVWOhTm_0(v88, (uint64_t (*)(void))type metadata accessor for Shape);
              uint64_t v155 = CRAttributedString.count.getter();
              v167(v91, v92);
              swift_getKeyPath();
              uint64_t v93 = WeakRef.subscript.modify();
              uint64_t v95 = v94;
              v154 = v90;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v90)(v94, 1, v89);
              if (result == 1) {
                goto LABEL_76;
              }
              uint64_t v96 = *(int *)(v89 + 52);
              uint64_t result = NSNotFound.getter();
              if (!result) {
                goto LABEL_73;
              }
              v153 = (void (*)(char *, void))v93;
              v97 = v149;
              uint64_t v208 = v95 + v96;
              CRAttributedString.subscript.getter();
              uint64_t v98 = v148;
              uint64_t v99 = v200;
              CRAttributedString.Substring.runs.getter();
              (*v147)(v97, v99);
              (*v146)(v206, v98, v207);
              uint64_t v100 = v201;
              CRAttributedString.Runs.next()();
              int v101 = *v199;
              uint64_t v102 = v203;
              unsigned int v103 = (*v199)(v100, 1, v203);
              v104 = (void *)MEMORY[0x263F8EE78];
              id v105 = v202;
              if (v103 != 1)
              {
                v112 = *v192;
                while (1)
                {
                  v112(v105, v100, v102);
                  v113 = v191;
                  CRAttributedString.Runs.Run.attributes.getter();
                  (*v210)(v113, v211);
                  uint64_t result = CRAttributedString.Runs.Run.range.getter();
                  uint64_t v115 = v114 - result;
                  if (__OFSUB__(v114, result)) {
                    break;
                  }
                  uint64_t v116 = result;
                  BOOL v117 = __OFADD__(result, v115);
                  if (v217)
                  {
                    if (v117) {
                      goto LABEL_67;
                    }
                    if (v114 < result) {
                      goto LABEL_69;
                    }
                    char v218 = 1;
                  }
                  else
                  {
                    if (v117) {
                      goto LABEL_68;
                    }
                    if (v114 < result) {
                      goto LABEL_70;
                    }
                    char v218 = 2;
                  }
                  swift_retain();
                  id v118 = (void (*)(char *, void))CRAttributedString.subscript.modify();
                  v209();
                  CRAttributedString.Substring.subscript.setter();
                  v118(v215, 0);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v104[2] + 1, 1, v104);
                  }
                  unint64_t v120 = v104[2];
                  unint64_t v119 = v104[3];
                  if (v120 >= v119 >> 1) {
                    v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v119 > 1), v120 + 1, 1, v104);
                  }
                  v104[2] = v120 + 1;
                  v121 = &v104[2 * v120];
                  v121[4] = v116;
                  v121[5] = v115;
                  id v105 = v202;
                  uint64_t v102 = v203;
                  (*v190)(v202, v203);
                  uint64_t v100 = v201;
                  CRAttributedString.Runs.next()();
                  if (v101(v100, 1, v102) == 1) {
                    goto LABEL_33;
                  }
                }
                __break(1u);
LABEL_67:
                __break(1u);
LABEL_68:
                __break(1u);
LABEL_69:
                __break(1u);
LABEL_70:
                __break(1u);
                goto LABEL_71;
              }
LABEL_33:
              (*v145)(v206, v207);
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v106 = v212;
              v177(v161, v208, v212);
              uint64_t v107 = (void *)CRAttributedString.attributedString.getter();
              id v108 = objc_msgSend(v107, sel_string);

              uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v111 = v110;

              if (v109 || v111 != 0xE000000000000000)
              {
                char v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                v167(v161, v106);
                uint64_t v85 = (uint64_t)v176;
                uint64_t v44 = v174;
                uint64_t v60 = v185;
                if ((v122 & 1) == 0)
                {
                  uint64_t v123 = v208;
                  uint64_t v124 = v212;
                  id v125 = v177;
                  v177(v151, v208, v212);
                  id v126 = v144;
                  v125(v144, v123, v124);
                  uint64_t v127 = (void *)CRAttributedString.attributedString.getter();
                  uint64_t v128 = v167;
                  v167(v126, v124);
                  id v129 = objc_msgSend(v127, sel_length);

                  uint64_t result = (uint64_t)v129 - 1;
                  if (__OFSUB__(v129, 1)) {
                    goto LABEL_74;
                  }
                  uint64_t v130 = (uint64_t)v157;
                  v131 = v151;
                  CRAttributedString.attributes(at:effectiveRange:)();
                  v128(v131, v124);
                  (*v156)(v130, 0, 1, v211);
                  uint64_t v132 = v158;
                  outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v130, v158);
                  outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v132, v159);
                  type metadata accessor for ShapeSecondaryProperties();
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
                  CRRegister.wrappedValue.setter();
                  outlined destroy of StocksKitCurrencyCache.Provider?(v132, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
                  outlined destroy of StocksKitCurrencyCache.Provider?(v130, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                v167(v161, v106);
                uint64_t v85 = (uint64_t)v176;
                uint64_t v44 = v174;
                uint64_t v60 = v185;
              }
              v153(v216, 0);
              uint64_t v76 = v154;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            (*v178)(v183, v79);
            uint64_t v60 = v185;
            uint64_t v85 = (uint64_t)v176;
          }
          uint64_t v208 = type metadata accessor for ShapeSecondaryProperties();
          Swift::String v177 = (void (*)(char *, uint64_t, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          CRRegister.wrappedValue.getter();
          uint64_t v133 = (uint64_t)v44;
          uint64_t v134 = v171;
          outlined init with copy of Shape(v133, v171);
          uint64_t v135 = v211;
          uint64_t v136 = v76;
          if ((*v169)(v85, 1, v211) == 1)
          {
            type metadata accessor for CanvasFormattingProxy();
            uint64_t v137 = v173;
            CanvasFormattingProxy.defaultEmptyTextBoxAttribues(for:)();
            _s8PaperKit5ShapeVWOhTm_0(v134, (uint64_t (*)(void))type metadata accessor for Shape);
            outlined destroy of StocksKitCurrencyCache.Provider?(v85, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          }
          else
          {
            _s8PaperKit5ShapeVWOhTm_0(v134, (uint64_t (*)(void))type metadata accessor for Shape);
            uint64_t v137 = v173;
            (*v162)(v173, v85, v135);
          }
          swift_getKeyPath();
          v216[0] = v168;
          v209();
          CRAttributedString.Attributes.subscript.setter();
          uint64_t v138 = (void (*)(char *, void))WeakRef.subscript.modify();
          if (!v136(v139, 1, v184))
          {
            uint64_t v140 = (uint64_t)v157;
            (*v152)(v157, v137, v135);
            (*v156)(v140, 0, 1, v135);
            uint64_t v141 = v158;
            outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v140, v158);
            outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v141, v159);
            uint64_t v135 = v211;
            CRRegister.wrappedValue.setter();
            uint64_t v142 = v141;
            uint64_t v60 = v185;
            outlined destroy of StocksKitCurrencyCache.Provider?(v142, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            outlined destroy of StocksKitCurrencyCache.Provider?(v140, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          }
          v138(v216, 0);
          uint64_t v38 = v172;
          uint64_t v61 = v170;
          int64_t v63 = v214;
          (*v210)(v137, v135);
          uint64_t v44 = v174;
          _s8PaperKit5ShapeVWOhTm_0((uint64_t)v174, (uint64_t (*)(void))type metadata accessor for Shape);
          (*v180)(v205, v213);
          uint64_t v50 = v181;
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*v193)(v60, v181);
          uint64_t v39 = v184;
          if (!v59) {
            goto LABEL_8;
          }
LABEL_7:
          unint64_t v66 = __clz(__rbit64(v59));
          v59 &= v59 - 1;
          int64_t v214 = v63;
        }
        (*v193)(v60, v50);
        uint64_t v64 = (uint64_t)v61;
        uint64_t v65 = &demangling cache variable for type metadata for WeakRef<Shape>?;
        goto LABEL_6;
      }
      uint64_t v71 = v63 + 4;
      if (v63 + 4 < v187)
      {
        unint64_t v69 = *(void *)(v186 + 8 * v71);
        if (v69)
        {
          int64_t v70 = v63 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v70 = v71 + 1;
          if (__OFADD__(v71, 1)) {
            goto LABEL_72;
          }
          if (v70 >= v187) {
            return swift_release();
          }
          unint64_t v69 = *(void *)(v186 + 8 * v70);
          ++v71;
          if (v69) {
            goto LABEL_21;
          }
        }
      }
    }
    return swift_release();
  }
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
  return result;
}

void CanvasFormattingProxy.fontColor.getter(uint64_t a1@<X0>, CGColorRef *a2@<X8>)
{
  uint64_t v83 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v4 - 8);
  v87 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x270FA5388](v6 - 8);
  id v81 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
  MEMORY[0x270FA5388](v78);
  uint64_t v80 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v79 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v77 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v10 = *(void *)(v103 - 8);
  MEMORY[0x270FA5388](v103);
  int v101 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v99 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t v100 = v15;
  uint64_t v98 = type metadata accessor for Capsule();
  uint64_t v16 = *(void *)(v98 - 8);
  MEMORY[0x270FA5388](v98);
  uint64_t v97 = (uint64_t)&v76 - v17;
  uint64_t v96 = type metadata accessor for Shape();
  uint64_t v18 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  uint64_t v102 = (uint64_t)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v24 = *(char **)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v106 = (char *)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v26);
  MEMORY[0x270FA5388](v27);
  uint64_t v110 = (char *)&v76 - v30;
  uint64_t v95 = v2;
  uint64_t v31 = *(void *)(v2 + 8);
  uint64_t v32 = *(void *)(v31 + 56);
  uint64_t v104 = v31 + 56;
  uint64_t v33 = 1 << *(unsigned char *)(v31 + 32);
  uint64_t v34 = -1;
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  unint64_t v35 = v34 & v32;
  int64_t v105 = (unint64_t)(v33 + 63) >> 6;
  id v108 = v29 + 32;
  uint64_t v109 = v29 + 16;
  uint64_t v107 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  uint64_t v94 = (void (**)(char *, uint64_t, uint64_t))(v24 + 32);
  uint64_t v93 = (void (**)(uint64_t, uint64_t))(v16 + 8);
  uint64_t v92 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v36 = (uint64_t)v22;
  char v86 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v85 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v90 = (void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v37 = v28;
  uint64_t v111 = v29;
  uint64_t v112 = v31;
  uint64_t v38 = (void (**)(uint64_t, uint64_t))(v29 + 8);
  swift_bridgeObjectRetain();
  int64_t v39 = 0;
  uint64_t v88 = v23;
  uint64_t v91 = v37;
  uint64_t v84 = v38;
  uint64_t v89 = v36;
  if (v35) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v42 = v39 + 1;
  if (__OFADD__(v39, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v42 >= v105)
  {
LABEL_32:
    swift_release();
    Color.init(red:green:blue:alpha:)(v83, 0.0, 0.0, 0.0, 1.0);
    return;
  }
  unint64_t v43 = *(void *)(v104 + 8 * v42);
  ++v39;
  if (!v43)
  {
    int64_t v39 = v42 + 1;
    if (v42 + 1 >= v105) {
      goto LABEL_32;
    }
    unint64_t v43 = *(void *)(v104 + 8 * v39);
    if (!v43)
    {
      int64_t v39 = v42 + 2;
      if (v42 + 2 >= v105) {
        goto LABEL_32;
      }
      unint64_t v43 = *(void *)(v104 + 8 * v39);
      if (!v43)
      {
        int64_t v44 = v42 + 3;
        if (v44 < v105)
        {
          unint64_t v43 = *(void *)(v104 + 8 * v44);
          if (v43)
          {
            int64_t v39 = v44;
            goto LABEL_20;
          }
          while (1)
          {
            int64_t v39 = v44 + 1;
            if (__OFADD__(v44, 1)) {
              break;
            }
            if (v39 >= v105) {
              goto LABEL_32;
            }
            unint64_t v43 = *(void *)(v104 + 8 * v39);
            ++v44;
            if (v43) {
              goto LABEL_20;
            }
          }
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          swift_once();
          goto LABEL_35;
        }
        goto LABEL_32;
      }
    }
  }
LABEL_20:
  unint64_t v35 = (v43 - 1) & v43;
  for (unint64_t i = __clz(__rbit64(v43)) + (v39 << 6); ; unint64_t i = v40 | (v39 << 6))
  {
    uint64_t v24 = v111;
    uint64_t v45 = v110;
    (*((void (**)(char *, unint64_t, uint64_t))v111 + 2))(v110, *(void *)(v112 + 48) + *((void *)v111 + 9) * i, v26);
    (*((void (**)(uint64_t, char *, uint64_t))v24 + 4))(v37, v45, v26);
    WeakTagged_9.tagged6.getter();
    if ((*v107)(v36, 1, v23) == 1)
    {
      (*v38)(v37, v26);
      outlined destroy of StocksKitCurrencyCache.Provider?(v36, &demangling cache variable for type metadata for WeakRef<Shape>?);
      if (!v35) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    uint64_t v46 = v106;
    (*v94)(v106, v36, v23);
    uint64_t v47 = v97;
    Canvas.updatablePaper2.getter(v97);
    WeakRef.subscript.getter();
    (*v93)(v47, v98);
    uint64_t v48 = v96;
    if ((*v92)(v14, 1, v96) == 1)
    {
      (*v90)(v46, v23);
      uint64_t v37 = v91;
      (*v38)(v91, v26);
      uint64_t v49 = (uint64_t)v14;
      uint64_t v50 = &demangling cache variable for type metadata for Shape?;
      goto LABEL_30;
    }
    uint64_t v51 = v102;
    _s8PaperKit5ShapeVWObTm_0((uint64_t)v14, v102, (uint64_t (*)(void))type metadata accessor for Shape);
    (*v86)(v101, v51 + *(int *)(v48 + 52), v103);
    uint64_t v52 = (void *)CRAttributedString.attributedString.getter();
    id v53 = objc_msgSend(v52, sel_string);

    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v56 = v55;

    if (v54 || v56 != 0xE000000000000000)
    {
      char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*v85)(v101, v103);
      uint64_t v24 = v87;
      if ((v57 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
        uint64_t v60 = v79;
        unint64_t v61 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
        uint64_t v62 = swift_allocObject();
        *(_OWORD *)(v62 + 16) = xmmword_20C832C20;
        unint64_t v63 = v62 + v61;
        CRAttributedString.runs.getter();
        uint64_t v114 = (CGColor *)MEMORY[0x263F8EE78];
        uint64_t v64 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
        swift_bridgeObjectRetain();
        uint64_t v65 = v77;
        uint64_t v36 = v82;
        v64(v77, v63, v82);
        uint64_t v66 = (uint64_t)v81;
        v64(v81, (unint64_t)v65, v36);
        uint64_t v67 = (uint64_t)v80;
        v64(v80, v66, v36);
        int64_t v68 = (id (**)@<X0>(uint64_t *@<X8>))(v67
                                                      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>)
                                                               + 44));
        char *v68 = closure #1 in CRAttributedString.Runs<>.fontColors.getter;
        v68[1] = 0;
        unint64_t v69 = (void *)(v67
                       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>)
                                + 36));
        void *v69 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
        v69[1] = 0;
        int64_t v70 = (void *)(v67 + *(int *)(v78 + 44));
        *int64_t v70 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
        v70[1] = 0;
        outlined destroy of StocksKitCurrencyCache.Provider?(v66, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
        uint64_t v71 = specialized Sequence<>.uniqueElements()();
        outlined destroy of StocksKitCurrencyCache.Provider?(v67, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v65, v36);
        specialized Array.append<A>(contentsOf:)(v71);
        swift_bridgeObjectRelease();
        uint64_t v37 = specialized Set.init<A>(_:)((uint64_t)v114);
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        uint64_t v72 = specialized Set.startIndex.getter(v37);
        if (v74)
        {
          __break(1u);
        }
        else
        {
          uint64_t v23 = v102;
          uint64_t v24 = (char *)v88;
          uint64_t v75 = v106;
          if (*(_DWORD *)(v37 + 36) != v73) {
            goto LABEL_44;
          }
          if (v72 != 1 << *(unsigned char *)(v37 + 32))
          {
            specialized Set.subscript.getter(v72, v73, v37, &v114);
            swift_bridgeObjectRelease();
            uint64_t v58 = v114;
            _s8PaperKit5ShapeVWOhTm_0(v23, (uint64_t (*)(void))type metadata accessor for Shape);
            (*v90)(v75, (uint64_t)v24);
            (*v84)(v91, v26);
            goto LABEL_41;
          }
        }
        swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_48;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      (*v85)(v101, v103);
      uint64_t v24 = v87;
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    CRRegister.wrappedValue.getter();
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    uint64_t v23 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v24, 1, v36) != 1) {
      break;
    }
    _s8PaperKit5ShapeVWOhTm_0(v102, (uint64_t (*)(void))type metadata accessor for Shape);
    uint64_t v23 = v88;
    (*v90)(v106, v88);
    uint64_t v38 = v84;
    uint64_t v37 = v91;
    (*v84)(v91, v26);
    uint64_t v49 = (uint64_t)v24;
    uint64_t v50 = &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?;
LABEL_30:
    outlined destroy of StocksKitCurrencyCache.Provider?(v49, v50);
    uint64_t v36 = v89;
    if (!v35) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v40 = __clz(__rbit64(v35));
    v35 &= v35 - 1;
  }
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  uint64_t v58 = v114;
  uint64_t v37 = v88;
  if (v114) {
    goto LABEL_36;
  }
  if (one-time initialization token for textBoxDefaultTextColor != -1) {
    goto LABEL_45;
  }
LABEL_35:
  id v59 = (id)static UIConstants.textBoxDefaultTextColor;
  Color.init(cgColor:)((CGColor *)objc_msgSend(v59, sel_CGColor), &v113);

  uint64_t v58 = v113;
  if (v113)
  {
LABEL_36:
    _s8PaperKit5ShapeVWOhTm_0(v102, (uint64_t (*)(void))type metadata accessor for Shape);
    (*v90)(v106, v37);
    (*v84)(v91, v26);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v36);
LABEL_41:
    swift_release();
    *uint64_t v83 = v58;
  }
  else
  {
LABEL_48:
    __break(1u);
  }
}

void CanvasFormattingProxy.fontColor.setter(void **a1)
{
  id v1 = *a1;
  Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.fontColor.setter);
}

void closure #1 in CanvasFormattingProxy.fillColor.setter()
{
  v0 = (void *)specialized Canvas.paperView.getter();
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v1 = v0;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
}

void closure #1 in closure #1 in CanvasFormattingProxy.fontColor.setter(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v173 = a5;
  uint64_t v172 = a4;
  id v196 = a3;
  uint64_t v174 = a2;
  uint64_t v171 = *a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v181 = (char *)&v153 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v168 = (uint64_t)&v153 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v167 = (uint64_t)&v153 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v166 = (char *)&v153 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v185 = (char *)&v153 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  v199 = (char *)&v153 - v18;
  uint64_t v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  int64_t v224 = *(void *)(v212 - 8);
  MEMORY[0x270FA5388](v212);
  uint64_t v211 = (char *)&v153 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v20 - 8);
  v210 = (char *)&v153 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v209 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  uint64_t v223 = *(void *)(v209 - 8);
  MEMORY[0x270FA5388](v209);
  uint64_t v159 = (char *)&v153 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v217 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v215 = *(void *)(v217 - 8);
  MEMORY[0x270FA5388](v217);
  uint64_t v158 = (char *)&v153 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  v216 = (char *)&v153 - v25;
  uint64_t v220 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v26 = *(void *)(v220 - 8);
  MEMORY[0x270FA5388](v220 - 8);
  v154 = (char *)&v153 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v169 = (char *)&v153 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v161 = (char *)&v153 - v31;
  MEMORY[0x270FA5388](v32);
  uint64_t v189 = (char *)&v153 - v33;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v34 - 8);
  uint64_t v160 = (char *)&v153 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (char *)&v153 - v37;
  uint64_t v197 = type metadata accessor for Shape();
  uint64_t v39 = *(void *)(v197 - 8);
  MEMORY[0x270FA5388](v197 - 8);
  uint64_t v179 = (uint64_t)&v153 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v41);
  uint64_t v195 = (uint64_t)&v153 - v42;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v43 - 8);
  uint64_t v45 = (char *)&v153 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v46 = *(void *)(v222 - 8);
  MEMORY[0x270FA5388](v222);
  uint64_t v48 = (char *)&v153 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v49);
  v221 = (char *)&v153 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v51);
  uint64_t v206 = (char *)&v153 - v54;
  uint64_t v55 = *(void *)(v174 + 8);
  uint64_t v56 = *(void *)(v55 + 56);
  uint64_t v193 = v55 + 56;
  uint64_t v57 = 1 << *(unsigned char *)(v55 + 32);
  uint64_t v58 = -1;
  if (v57 < 64) {
    uint64_t v58 = ~(-1 << v57);
  }
  unint64_t v59 = v58 & v56;
  int64_t v194 = (unint64_t)(v57 + 63) >> 6;
  uint64_t v205 = v53 + 16;
  uint64_t v204 = v53 + 32;
  uint64_t v203 = (unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
  v188 = (void (**)(char *, char *, uint64_t))(v46 + 32);
  uint64_t v191 = (unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  uint64_t v60 = v52;
  uint64_t v184 = (void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  uint64_t v183 = (void (**)(char *, uint64_t))(v26 + 8);
  unint64_t v61 = a1;
  v157 = (void (**)(char *, uint64_t))(v223 + 8);
  v156 = (void (**)(char *, char *, uint64_t))(v215 + 32);
  uint64_t v208 = (char **)(v224 + 48);
  v201 = (void (**)(char *, char *, uint64_t))(v224 + 32);
  char v218 = (void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v198 = (void (**)(char *, uint64_t))(v224 + 8);
  uint64_t v155 = (void (**)(char *, uint64_t))(v215 + 8);
  uint64_t v165 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56);
  Swift::String v177 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  v170 = (void (**)(char *, uint64_t, uint64_t))(v15 + 32);
  uint64_t v162 = (void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v62 = (uint64_t)v181;
  unint64_t v63 = (void (**)(char *, uint64_t))(v46 + 8);
  uint64_t v64 = v61;
  int64_t v187 = v63;
  uint64_t v207 = v53;
  v202 = (void (**)(char *, uint64_t))(v53 + 8);
  uint64_t v213 = v55;
  swift_bridgeObjectRetain();
  int64_t v65 = 0;
  uint64_t v219 = v14;
  uint64_t v186 = v64;
  id v180 = v38;
  Swift::Bool v178 = v45;
  uint64_t v182 = v48;
  uint64_t v192 = v60;
  if (v59) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v69 = v65 + 1;
  if (!__OFADD__(v65, 1))
  {
    if (v69 < v194)
    {
      unint64_t v70 = *(void *)(v193 + 8 * v69);
      int64_t v71 = v65 + 1;
      if (v70) {
        goto LABEL_21;
      }
      int64_t v71 = v65 + 2;
      if (v65 + 2 >= v194) {
        goto LABEL_68;
      }
      unint64_t v70 = *(void *)(v193 + 8 * v71);
      if (v70) {
        goto LABEL_21;
      }
      int64_t v71 = v65 + 3;
      if (v65 + 3 >= v194) {
        goto LABEL_68;
      }
      unint64_t v70 = *(void *)(v193 + 8 * v71);
      if (v70)
      {
LABEL_21:
        uint64_t v223 = (v70 - 1) & v70;
        int64_t v224 = v71;
        for (unint64_t i = __clz(__rbit64(v70)) + (v71 << 6); ; unint64_t i = __clz(__rbit64(v59)) | (v65 << 6))
        {
          uint64_t v73 = v207;
          char v74 = v206;
          (*(void (**)(char *, unint64_t, uint64_t))(v207 + 16))(v206, *(void *)(v213 + 48) + *(void *)(v207 + 72) * i, v60);
          uint64_t v75 = v221;
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v221, v74, v60);
          WeakTagged_9.tagged6.getter();
          uint64_t v76 = v222;
          if ((*v203)(v45, 1, v222) == 1) {
            break;
          }
          (*v188)(v48, v45, v76);
          uint64_t v77 = v76;
          WeakRef.subscript.getter();
          uint64_t v78 = *v191;
          uint64_t v79 = v197;
          if ((*v191)(v38, 1, v197) == 1)
          {
            (*v187)(v48, v77);
            uint64_t v60 = v192;
            (*v202)(v221, v192);
            uint64_t v66 = (uint64_t)v38;
            uint64_t v67 = &demangling cache variable for type metadata for Shape?;
LABEL_6:
            outlined destroy of StocksKitCurrencyCache.Provider?(v66, v67);
            unint64_t v59 = v223;
            int64_t v65 = v224;
            if (!v223) {
              goto LABEL_8;
            }
            goto LABEL_7;
          }
          uint64_t v190 = v78;
          uint64_t v80 = (uint64_t)v38;
          uint64_t v81 = v195;
          _s8PaperKit5ShapeVWObTm_0(v80, v195, (uint64_t (*)(void))type metadata accessor for Shape);
          uint64_t v82 = v81 + *(int *)(v79 + 52);
          uint64_t v83 = *v184;
          uint64_t v84 = v220;
          (*v184)(v189, v82, v220);
          uint64_t v85 = (void *)CRAttributedString.attributedString.getter();
          id v86 = objc_msgSend(v85, sel_string);

          uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v89 = v88;

          if (v87 || v89 != 0xE000000000000000)
          {
            v176 = (void (*)(char *, char *, uint64_t))v83;
            char v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t v91 = *v183;
            (*v183)(v189, v84);
            uint64_t v48 = v182;
            uint64_t v60 = v192;
            if ((v90 & 1) == 0)
            {
              uint64_t v175 = v91;
              uint64_t v164 = v82;
              uint64_t v38 = v160;
              WeakRef.subscript.getter();
              uint64_t v92 = v197;
              uint64_t v93 = v190;
              if (v190(v38, 1, v197) == 1) {
                goto LABEL_78;
              }
              uint64_t v94 = v161;
              uint64_t v95 = v220;
              v176(v161, &v38[*(int *)(v92 + 52)], v220);
              _s8PaperKit5ShapeVWOhTm_0((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for Shape);
              uint64_t v200 = (void (*)(char *, char *, uint64_t))CRAttributedString.count.getter();
              v175(v94, v95);
              swift_getKeyPath();
              uint64_t v38 = (char *)v196;
              uint64_t v96 = WeakRef.subscript.modify();
              uint64_t v98 = v97;
              if (v93(v97, 1, v92) == 1) {
                goto LABEL_79;
              }
              uint64_t v99 = *(int *)(v92 + 52);
              int64_t v214 = v38;
              if (!NSNotFound.getter()) {
                goto LABEL_76;
              }
              uint64_t v163 = (void (*)(id *, void))v96;
              uint64_t v100 = (uint64_t)&v98[v99];
              int v101 = v159;
              uint64_t v215 = v100;
              CRAttributedString.subscript.getter();
              uint64_t v102 = v158;
              uint64_t v103 = v209;
              CRAttributedString.Substring.runs.getter();
              (*v157)(v101, v103);
              (*v156)(v216, v102, v217);
              uint64_t v104 = v210;
              CRAttributedString.Runs.next()();
              uint64_t v38 = *v208;
              uint64_t v105 = v212;
              int v106 = ((uint64_t (*)(char *, uint64_t, uint64_t))*v208)(v104, 1, v212);
              uint64_t v107 = (void *)MEMORY[0x263F8EE78];
              id v108 = v211;
              if (v106 != 1)
              {
                uint64_t v200 = *v201;
                while (1)
                {
                  v200(v108, v104, v105);
                  BOOL v117 = v199;
                  CRAttributedString.Runs.Run.attributes.getter();
                  id v118 = *v218;
                  unint64_t v119 = v214;
                  v118(v117, v219);
                  uint64_t v120 = CRAttributedString.Runs.Run.range.getter();
                  uint64_t v122 = v121 - v120;
                  if (__OFSUB__(v121, v120)) {
                    break;
                  }
                  uint64_t v123 = v120;
                  if (one-time initialization token for defaultValue != -1) {
                    swift_once();
                  }
                  uint64_t v124 = (void *)static TextAttributeScope.ColorAttribute.defaultValue;
                  type metadata accessor for CGColorRef(0);
                  _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_0(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
                  id v125 = v124;
                  char v126 = static _CFObject.== infix(_:_:)();

                  uint64_t v127 = v123 + v122;
                  BOOL v128 = __OFADD__(v123, v122);
                  if (v126)
                  {
                    if (v128) {
                      goto LABEL_70;
                    }
                    if (v127 < v123) {
                      goto LABEL_72;
                    }
                    id v227 = 0;
                  }
                  else
                  {
                    if (v128) {
                      goto LABEL_71;
                    }
                    if (v127 < v123) {
                      goto LABEL_73;
                    }
                    id v227 = v196;
                    unint64_t v119 = v119;
                  }
                  swift_retain();
                  id v129 = (void (*)(char *, void))CRAttributedString.subscript.modify();
                  lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
                  CRAttributedString.Substring.subscript.setter();
                  v129(v225, 0);

                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v105 = v212;
                  id v108 = v211;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                    uint64_t v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v107[2] + 1, 1, v107);
                  }
                  unint64_t v132 = v107[2];
                  unint64_t v131 = v107[3];
                  if (v132 >= v131 >> 1) {
                    uint64_t v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v131 > 1), v132 + 1, 1, v107);
                  }
                  v107[2] = v132 + 1;
                  uint64_t v133 = &v107[2 * v132];
                  v133[4] = v123;
                  v133[5] = v122;
                  (*v198)(v108, v105);
                  uint64_t v104 = v210;
                  CRAttributedString.Runs.next()();
                  if (((unsigned int (*)(char *, uint64_t, uint64_t))v38)(v104, 1, v105) == 1) {
                    goto LABEL_33;
                  }
                }
                __break(1u);
LABEL_70:
                __break(1u);
LABEL_71:
                __break(1u);
LABEL_72:
                __break(1u);
LABEL_73:
                __break(1u);
                goto LABEL_74;
              }
LABEL_33:
              (*v155)(v216, v217);
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v109 = v214;

              uint64_t v110 = v215;
              uint64_t v111 = v220;
              v176(v169, (char *)v215, v220);
              uint64_t v112 = (void *)CRAttributedString.attributedString.getter();
              id v113 = objc_msgSend(v112, sel_string);

              uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v116 = v115;

              if (v114 || v116 != 0xE000000000000000)
              {
                char v134 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                v175(v169, v111);
                uint64_t v48 = v182;
                uint64_t v60 = v192;
                if ((v134 & 1) == 0)
                {
                  uint64_t v135 = v161;
                  uint64_t v136 = (void (*)(char *, uint64_t, uint64_t))v176;
                  v176(v161, (char *)v110, v111);
                  uint64_t v137 = v154;
                  v136(v154, v110, v111);
                  uint64_t v38 = (char *)CRAttributedString.attributedString.getter();
                  uint64_t v138 = v175;
                  v175(v137, v111);
                  id v139 = objc_msgSend(v38, sel_length);

                  if (__OFSUB__(v139, 1)) {
                    goto LABEL_77;
                  }
                  uint64_t v140 = (uint64_t)v166;
                  CRAttributedString.attributes(at:effectiveRange:)();
                  v138(v135, v111);
                  (*v165)(v140, 0, 1, v219);
                  uint64_t v141 = v167;
                  outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v140, v167);
                  outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v141, v168);
                  type metadata accessor for ShapeSecondaryProperties();
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
                  CRRegister.wrappedValue.setter();
                  outlined destroy of StocksKitCurrencyCache.Provider?(v141, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
                  outlined destroy of StocksKitCurrencyCache.Provider?(v140, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                v175(v169, v111);
                uint64_t v48 = v182;
                uint64_t v60 = v192;
              }
              v163(&v226, 0);
              uint64_t v62 = (uint64_t)v181;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            (*v183)(v189, v84);
            uint64_t v48 = v182;
            uint64_t v60 = v192;
          }
          uint64_t v215 = type metadata accessor for ShapeSecondaryProperties();
          int64_t v214 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          CRRegister.wrappedValue.getter();
          uint64_t v142 = v179;
          outlined init with copy of Shape(v195, v179);
          uint64_t v143 = v219;
          if ((*v177)(v62, 1, v219) == 1)
          {
            type metadata accessor for CanvasFormattingProxy();
            v144 = v185;
            CanvasFormattingProxy.defaultEmptyTextBoxAttribues(for:)();
            _s8PaperKit5ShapeVWOhTm_0(v142, (uint64_t (*)(void))type metadata accessor for Shape);
            outlined destroy of StocksKitCurrencyCache.Provider?(v62, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          }
          else
          {
            _s8PaperKit5ShapeVWOhTm_0(v142, (uint64_t (*)(void))type metadata accessor for Shape);
            v144 = v185;
            (*v170)(v185, v62, v143);
          }
          swift_getKeyPath();
          id v145 = v196;
          id v226 = v196;
          lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
          id v146 = v145;
          CRAttributedString.Attributes.subscript.setter();
          v147 = (void (*)(id *, void))WeakRef.subscript.modify();
          if (v190(v148, 1, v197))
          {
            unint64_t v149 = v144;
          }
          else
          {
            uint64_t v150 = (uint64_t)v166;
            (*v162)(v166, v185, v143);
            (*v165)(v150, 0, 1, v143);
            uint64_t v151 = v167;
            outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v150, v167);
            outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v151, v168);
            CRRegister.wrappedValue.setter();
            uint64_t v152 = v151;
            uint64_t v143 = v219;
            outlined destroy of StocksKitCurrencyCache.Provider?(v152, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            unint64_t v149 = v185;
            outlined destroy of StocksKitCurrencyCache.Provider?(v150, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          }
          v147(&v226, 0);
          uint64_t v38 = v180;
          int64_t v65 = v224;
          (*v218)(v149, v143);
          _s8PaperKit5ShapeVWOhTm_0(v195, (uint64_t (*)(void))type metadata accessor for Shape);
          (*v187)(v48, v222);
          (*v202)(v221, v60);
          uint64_t v45 = v178;
          unint64_t v59 = v223;
          uint64_t v62 = (uint64_t)v181;
          if (!v223) {
            goto LABEL_8;
          }
LABEL_7:
          uint64_t v223 = (v59 - 1) & v59;
          int64_t v224 = v65;
        }
        (*v202)(v75, v60);
        uint64_t v66 = (uint64_t)v45;
        uint64_t v67 = &demangling cache variable for type metadata for WeakRef<Shape>?;
        goto LABEL_6;
      }
      uint64_t v72 = v65 + 4;
      if (v65 + 4 < v194)
      {
        unint64_t v70 = *(void *)(v193 + 8 * v72);
        if (v70)
        {
          int64_t v71 = v65 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v71 = v72 + 1;
          if (__OFADD__(v72, 1)) {
            goto LABEL_75;
          }
          if (v71 >= v194) {
            break;
          }
          unint64_t v70 = *(void *)(v193 + 8 * v71);
          ++v72;
          if (v70) {
            goto LABEL_21;
          }
        }
      }
    }
LABEL_68:
    swift_release();
    return;
  }
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:

  __break(1u);
}

uint64_t closure #1 in CanvasFormattingProxy.boldAllowed.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v69 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v59 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v61 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v60 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v64 = *(void *)(v9 - 8);
  uint64_t v65 = v9;
  MEMORY[0x270FA5388](v9);
  unint64_t v63 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a4 + 16);
  uint64_t v70 = a3;
  uint64_t v68 = v11;
  uint64_t v12 = type metadata accessor for Capsule();
  uint64_t v66 = *(void *)(v12 - 8);
  uint64_t v67 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v57 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Shape();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v17, 1, v25) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for WeakRef<Shape>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v21);
  }
  else
  {
    uint64_t v58 = v24;
    Canvas.updatablePaper2.getter((uint64_t)v14);
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v14, v67);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v25);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) != 1)
    {
      uint64_t v31 = (uint64_t)v20;
      uint64_t v32 = (uint64_t)v58;
      _s8PaperKit5ShapeVWObTm_0(v31, (uint64_t)v58, (uint64_t (*)(void))type metadata accessor for Shape);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
      uint64_t v33 = v63;
      CRRegister.wrappedValue.getter();
      uint64_t v34 = v65;
      TaggedValue_9.tagged3.getter();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v33, v34);
      if (v83 == 1)
      {
        uint64_t v35 = v61;
        uint64_t v36 = v60;
        uint64_t v37 = v62;
        (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v32 + *(int *)(v21 + 52), v62);
        uint64_t v38 = (void *)CRAttributedString.attributedString.getter();
        id v39 = objc_msgSend(v38, sel_string);

        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v42 = v41;

        if (v40 || v42 != 0xE000000000000000)
        {
          char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
          uint64_t v43 = v59;
          if ((v45 & 1) == 0)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
            uint64_t v55 = swift_allocObject();
            *(_OWORD *)(v55 + 16) = xmmword_20C832C20;
            CRAttributedString.runs.getter();
            char v56 = Array<A>.allowedTextStyles.getter(v55);
            swift_setDeallocating();
            swift_arrayDestroy();
            swift_deallocClassInstance();
            char v29 = v56 & 1;
            _s8PaperKit5ShapeVWOhTm_0(v32, (uint64_t (*)(void))type metadata accessor for Shape);
            return v29 & 1;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
          uint64_t v43 = v59;
        }
        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
        CRRegister.wrappedValue.getter();
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
        uint64_t v47 = *(void *)(v46 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v43, 1, v46) == 1)
        {
          _s8PaperKit5ShapeVWOhTm_0(v32, (uint64_t (*)(void))type metadata accessor for Shape);
          uint64_t v27 = &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?;
          uint64_t v28 = (uint64_t)v43;
          goto LABEL_5;
        }
        swift_getKeyPath();
        lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
        CRAttributedString.Attributes.subscript.getter();
        swift_release();
        uint64_t v49 = v77;
        uint64_t v48 = v78;
        uint64_t v50 = v79;
        uint64_t v51 = v80;
        uint64_t v52 = v43;
        int v53 = v81;
        uint64_t v54 = v82;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v52, v46);
        if (v48 != 1)
        {
          uint64_t v71 = v49;
          uint64_t v72 = v48;
          uint64_t v73 = v50;
          uint64_t v74 = v51;
          int v75 = v53;
          uint64_t v76 = v54;
          char v29 = Font.supportsBold.getter();
          outlined consume of Font?(v49, v48);
          _s8PaperKit5ShapeVWOhTm_0((uint64_t)v58, (uint64_t (*)(void))type metadata accessor for Shape);
          return v29 & 1;
        }
        uint64_t v44 = (uint64_t)v58;
      }
      else
      {
        uint64_t v44 = v32;
      }
      _s8PaperKit5ShapeVWOhTm_0(v44, (uint64_t (*)(void))type metadata accessor for Shape);
      goto LABEL_6;
    }
  }
  uint64_t v27 = &demangling cache variable for type metadata for Shape?;
  uint64_t v28 = (uint64_t)v20;
LABEL_5:
  outlined destroy of StocksKitCurrencyCache.Provider?(v28, v27);
LABEL_6:
  char v29 = 0;
  return v29 & 1;
}

uint64_t CanvasFormattingProxy.strokeIsRequired.getter(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v4 = *(void *)(v2 + 8);
  v6[1] = *(_OWORD *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain();
  LOBYTE(a2) = specialized Sequence.contains(where:)(a2, (char)v6, v4);
  swift_bridgeObjectRelease();
  return a2 & 1;
}

uint64_t closure #1 in CanvasFormattingProxy.italicAllowed.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v69 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v59 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v61 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v60 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v64 = *(void *)(v9 - 8);
  uint64_t v65 = v9;
  MEMORY[0x270FA5388](v9);
  unint64_t v63 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a4 + 16);
  uint64_t v70 = a3;
  uint64_t v68 = v11;
  uint64_t v12 = type metadata accessor for Capsule();
  uint64_t v66 = *(void *)(v12 - 8);
  uint64_t v67 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v57 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Shape();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v17, 1, v25) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for WeakRef<Shape>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v21);
  }
  else
  {
    uint64_t v58 = v24;
    Canvas.updatablePaper2.getter((uint64_t)v14);
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v14, v67);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v25);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) != 1)
    {
      uint64_t v31 = (uint64_t)v20;
      uint64_t v32 = (uint64_t)v58;
      _s8PaperKit5ShapeVWObTm_0(v31, (uint64_t)v58, (uint64_t (*)(void))type metadata accessor for Shape);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
      uint64_t v33 = v63;
      CRRegister.wrappedValue.getter();
      uint64_t v34 = v65;
      TaggedValue_9.tagged3.getter();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v33, v34);
      if (v83 == 1)
      {
        uint64_t v35 = v61;
        uint64_t v36 = v60;
        uint64_t v37 = v62;
        (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v32 + *(int *)(v21 + 52), v62);
        uint64_t v38 = (void *)CRAttributedString.attributedString.getter();
        id v39 = objc_msgSend(v38, sel_string);

        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v42 = v41;

        if (v40 || v42 != 0xE000000000000000)
        {
          char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
          uint64_t v43 = v59;
          if ((v45 & 1) == 0)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
            uint64_t v55 = swift_allocObject();
            *(_OWORD *)(v55 + 16) = xmmword_20C832C20;
            CRAttributedString.runs.getter();
            unint64_t v56 = Array<A>.allowedTextStyles.getter(v55);
            swift_setDeallocating();
            swift_arrayDestroy();
            swift_deallocClassInstance();
            uint64_t v29 = (v56 >> 1) & 1;
            _s8PaperKit5ShapeVWOhTm_0(v32, (uint64_t (*)(void))type metadata accessor for Shape);
            return v29 & 1;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
          uint64_t v43 = v59;
        }
        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
        CRRegister.wrappedValue.getter();
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
        uint64_t v47 = *(void *)(v46 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v43, 1, v46) == 1)
        {
          _s8PaperKit5ShapeVWOhTm_0(v32, (uint64_t (*)(void))type metadata accessor for Shape);
          uint64_t v27 = &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?;
          uint64_t v28 = (uint64_t)v43;
          goto LABEL_5;
        }
        swift_getKeyPath();
        lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
        CRAttributedString.Attributes.subscript.getter();
        swift_release();
        uint64_t v49 = v77;
        uint64_t v48 = v78;
        uint64_t v50 = v79;
        uint64_t v51 = v80;
        uint64_t v52 = v43;
        int v53 = v81;
        uint64_t v54 = v82;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v52, v46);
        if (v48 != 1)
        {
          uint64_t v71 = v49;
          uint64_t v72 = v48;
          uint64_t v73 = v50;
          uint64_t v74 = v51;
          int v75 = v53;
          uint64_t v76 = v54;
          LOBYTE(v29) = Font.supportsItalic.getter();
          outlined consume of Font?(v49, v48);
          _s8PaperKit5ShapeVWOhTm_0((uint64_t)v58, (uint64_t (*)(void))type metadata accessor for Shape);
          return v29 & 1;
        }
        uint64_t v44 = (uint64_t)v58;
      }
      else
      {
        uint64_t v44 = v32;
      }
      _s8PaperKit5ShapeVWOhTm_0(v44, (uint64_t (*)(void))type metadata accessor for Shape);
      goto LABEL_6;
    }
  }
  uint64_t v27 = &demangling cache variable for type metadata for Shape?;
  uint64_t v28 = (uint64_t)v20;
LABEL_5:
  outlined destroy of StocksKitCurrencyCache.Provider?(v28, v27);
LABEL_6:
  LOBYTE(v29) = 0;
  return v29 & 1;
}

uint64_t CanvasFormattingProxy.hasMultipleFontSizes.getter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs?);
  MEMORY[0x270FA5388](v3 - 8);
  char v83 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v5 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  uint64_t v78 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v7 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  uint64_t v77 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v94 = (char *)&v77 - v10;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v104 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t v105 = v11;
  uint64_t v103 = type metadata accessor for Capsule();
  uint64_t v109 = *(void (***)(uint64_t, uint64_t))(v103 - 8);
  MEMORY[0x270FA5388](v103);
  uint64_t v86 = (uint64_t)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v98 = (uint64_t)&v77 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v85 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v97 = (char *)&v77 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v26);
  MEMORY[0x270FA5388](v27);
  id v113 = (char *)&v77 - v30;
  uint64_t v31 = *(void *)(v1 + 8);
  uint64_t v32 = *(void *)(v31 + 56);
  uint64_t v106 = v1;
  uint64_t v107 = v31 + 56;
  uint64_t v33 = 1 << *(unsigned char *)(v31 + 32);
  uint64_t v34 = -1;
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  unint64_t v35 = v34 & v32;
  int64_t v108 = (unint64_t)(v33 + 63) >> 6;
  uint64_t v111 = v29 + 32;
  uint64_t v112 = v29 + 16;
  uint64_t v110 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  uint64_t v96 = (void (**)(char *, uint64_t, uint64_t))(v23 + 32);
  uint64_t v102 = v109 + 1;
  uint64_t v88 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v89 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v79 = v5;
  uint64_t v82 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v36 = v22;
  uint64_t v37 = (void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v38 = v29;
  uint64_t v39 = (uint64_t)v21;
  uint64_t v92 = v37;
  uint64_t v40 = v28;
  uint64_t v109 = (void (**)(uint64_t, uint64_t))(v29 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v42 = 0;
  uint64_t v99 = v36;
  uint64_t v95 = v31;
  int v101 = v25;
  uint64_t v93 = v40;
  uint64_t v91 = v39;
  uint64_t v90 = v38;
  uint64_t v81 = v26;
  if (v35) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v45 = v42 + 1;
  if (__OFADD__(v42, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v45 >= v108)
  {
LABEL_34:
    BOOL v66 = 0;
    goto LABEL_35;
  }
  unint64_t v46 = *(void *)(v107 + 8 * v45);
  ++v42;
  if (!v46)
  {
    int64_t v42 = v45 + 1;
    if (v45 + 1 >= v108) {
      goto LABEL_34;
    }
    unint64_t v46 = *(void *)(v107 + 8 * v42);
    if (!v46)
    {
      int64_t v42 = v45 + 2;
      if (v45 + 2 >= v108) {
        goto LABEL_34;
      }
      unint64_t v46 = *(void *)(v107 + 8 * v42);
      if (!v46)
      {
        int64_t v47 = v45 + 3;
        if (v47 < v108)
        {
          unint64_t v46 = *(void *)(v107 + 8 * v47);
          if (v46)
          {
            int64_t v42 = v47;
            goto LABEL_20;
          }
          while (1)
          {
            int64_t v42 = v47 + 1;
            if (__OFADD__(v47, 1)) {
              break;
            }
            if (v42 >= v108) {
              goto LABEL_34;
            }
            unint64_t v46 = *(void *)(v107 + 8 * v42);
            ++v47;
            if (v46) {
              goto LABEL_20;
            }
          }
LABEL_38:
          __break(1u);
          return result;
        }
        goto LABEL_34;
      }
    }
  }
LABEL_20:
  unint64_t v35 = (v46 - 1) & v46;
  for (unint64_t i = __clz(__rbit64(v46)) + (v42 << 6); ; unint64_t i = v43 | (v42 << 6))
  {
    uint64_t v48 = v113;
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v113, *(void *)(v31 + 48) + *(void *)(v38 + 72) * i, v26);
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v40, v48, v26);
    WeakTagged_9.tagged6.getter();
    if ((*v110)(v39, 1, v36) == 1)
    {
      (*v109)(v40, v26);
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for WeakRef<Shape>?);
      if (!v35) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    (*v96)(v25, v39, v36);
    uint64_t v49 = v98;
    Canvas.updatablePaper2.getter(v98);
    uint64_t v50 = (uint64_t)v97;
    WeakRef.subscript.getter();
    uint64_t v51 = *v102;
    (*v102)(v49, v103);
    uint64_t v52 = type metadata accessor for Shape();
    int v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48);
    if (v53(v50, 1, v52) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for Shape?);
LABEL_29:
      uint64_t v25 = v101;
      uint64_t v36 = v99;
      (*v92)(v101, v99);
      uint64_t v40 = v93;
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*v109)(v93, v26);
      goto LABEL_32;
    }
    uint64_t v54 = v50 + *(int *)(v52 + 52);
    uint64_t v87 = *v88;
    v87(v94, v54, v100);
    _s8PaperKit5ShapeVWOhTm_0(v50, (uint64_t (*)(void))type metadata accessor for Shape);
    uint64_t v55 = (void *)CRAttributedString.attributedString.getter();
    id v56 = objc_msgSend(v55, sel_string);

    uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v59 = v58;

    if (v57 || v59 != 0xE000000000000000)
    {
      char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      char v60 = 1;
    }
    uint64_t v61 = *v89;
    (*v89)(v94, v100);
    if (v60) {
      goto LABEL_29;
    }
    uint64_t v80 = v61;
    uint64_t v62 = v86;
    Canvas.updatablePaper2.getter(v86);
    unint64_t v63 = v51;
    uint64_t v64 = (uint64_t)v85;
    uint64_t v36 = v99;
    WeakRef.subscript.getter();
    v63(v62, v103);
    if (v53(v64, 1, v52) != 1) {
      break;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v64, &demangling cache variable for type metadata for Shape?);
    uint64_t v65 = (uint64_t)v83;
    (*v82)(v83, 1, 1, v84);
    uint64_t v25 = v101;
    (*v92)(v101, v36);
    uint64_t v40 = v93;
    uint64_t v26 = v81;
    (*v109)(v93, v81);
    uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v65, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs?);
LABEL_32:
    uint64_t v31 = v95;
    uint64_t v39 = v91;
    uint64_t v38 = v90;
    if (!v35) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v43 = __clz(__rbit64(v35));
    v35 &= v35 - 1;
  }
  uint64_t v67 = v64 + *(int *)(v52 + 52);
  uint64_t v68 = v77;
  uint64_t v69 = v100;
  v87(v77, v67, v100);
  _s8PaperKit5ShapeVWOhTm_0(v64, (uint64_t (*)(void))type metadata accessor for Shape);
  uint64_t v70 = v36;
  uint64_t v71 = v83;
  CRAttributedString.runs.getter();
  v80(v68, v69);
  uint64_t v72 = v79;
  uint64_t v73 = v84;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v71, 0, 1, v84);
  uint64_t v74 = v78;
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v78, v71, v73);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
  unint64_t v75 = (*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_20C832C20;
  (*(void (**)(unint64_t, char *, uint64_t))(v72 + 16))(v76 + v75, v74, v73);
  BOOL v66 = Array<A>.hasMultipleFontSizes.getter(v76);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v73);
  (*v92)(v101, v70);
  (*v109)(v93, v81);
LABEL_35:
  swift_release();
  return v66;
}

uint64_t CanvasFormattingProxy.lineEnds.getter(void *a1, void *a2, uint64_t a3)
{
  uint64_t v49 = a1;
  uint64_t v50 = a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v57 = *(void *)(*(void *)(a3 + 24) + 16);
  uint64_t v58 = v4;
  uint64_t v56 = type metadata accessor for Capsule();
  uint64_t v5 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v55 = (uint64_t)&v48 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = &demangling cache variable for type metadata for Shape?;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Shape();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v48 = (uint64_t)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v65 = (char *)&v48 - v22;
  uint64_t v23 = *(void *)(v3 + 8);
  uint64_t v24 = *(void *)(v23 + 56);
  uint64_t v59 = v3;
  uint64_t v60 = v23 + 56;
  uint64_t v25 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & v24;
  uint64_t v63 = v21 + 32;
  uint64_t v64 = v21 + 16;
  uint64_t v52 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v53 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v51 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  uint64_t v66 = v21;
  int64_t v61 = (unint64_t)(v25 + 63) >> 6;
  uint64_t v62 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v29 = 0;
  uint64_t v54 = v23;
  while (1)
  {
    if (v27)
    {
      uint64_t v67 = (v27 - 1) & v27;
      int64_t v68 = v29;
      unint64_t v30 = __clz(__rbit64(v27)) | (v29 << 6);
      goto LABEL_22;
    }
    int64_t v31 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v31 >= v61) {
      goto LABEL_25;
    }
    unint64_t v32 = *(void *)(v60 + 8 * v31);
    int64_t v33 = v29 + 1;
    if (!v32)
    {
      int64_t v33 = v29 + 2;
      if (v29 + 2 >= v61) {
        goto LABEL_25;
      }
      unint64_t v32 = *(void *)(v60 + 8 * v33);
      if (!v32)
      {
        int64_t v33 = v29 + 3;
        if (v29 + 3 >= v61) {
          goto LABEL_25;
        }
        unint64_t v32 = *(void *)(v60 + 8 * v33);
        if (!v32) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v67 = (v32 - 1) & v32;
    int64_t v68 = v33;
    unint64_t v30 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_22:
    uint64_t v36 = v65;
    uint64_t v35 = v66;
    (*(void (**)(char *, unint64_t, uint64_t))(v66 + 16))(v65, *(void *)(v23 + 48) + *(void *)(v66 + 72) * v30, v17);
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v19, v36, v17);
    WeakTagged_9.tagged6.getter();
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v9, 1, v37) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakRef<Shape>?);
      (*v51)(v13, 1, 1, v14);
    }
    else
    {
      uint64_t v39 = v19;
      uint64_t v40 = v17;
      uint64_t v41 = v10;
      uint64_t v42 = v14;
      uint64_t v43 = v55;
      Canvas.updatablePaper2.getter(v55);
      WeakRef.subscript.getter();
      uint64_t v44 = v43;
      uint64_t v14 = v42;
      uint64_t v10 = v41;
      uint64_t v17 = v40;
      uint64_t v19 = v39;
      uint64_t v23 = v54;
      (*v53)(v44, v56);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v37);
      if ((*v52)(v13, 1, v14) != 1)
      {
        uint64_t v45 = v48;
        _s8PaperKit5ShapeVWObTm_0((uint64_t)v13, v48, (uint64_t (*)(void))type metadata accessor for Shape);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
        CRRegister.wrappedValue.getter();
        CRRegister.wrappedValue.getter();
        _s8PaperKit5ShapeVWOhTm_0(v45, (uint64_t (*)(void))type metadata accessor for Shape);
        (*v62)(v19, v17);
        return swift_release();
      }
    }
    (*v62)(v19, v17);
    uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, v10);
    unint64_t v27 = v67;
    int64_t v29 = v68;
  }
  uint64_t v34 = v29 + 4;
  if (v29 + 4 >= v61)
  {
LABEL_25:
    uint64_t result = swift_release();
    unint64_t v46 = v49;
    *uint64_t v49 = 0;
    *((unsigned char *)v46 + 8) = 0;
    int64_t v47 = v50;
    *uint64_t v50 = 0;
    *((unsigned char *)v47 + 8) = 0;
    return result;
  }
  unint64_t v32 = *(void *)(v60 + 8 * v34);
  if (v32)
  {
    int64_t v33 = v29 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v33 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v33 >= v61) {
      goto LABEL_25;
    }
    unint64_t v32 = *(void *)(v60 + 8 * v33);
    ++v34;
    if (v32) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.lineEnds.setter()
{
  return Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.lineEnds.setter);
}

void closure #1 in CanvasFormattingProxy.lineEnds.setter()
{
  v0 = (void *)specialized Canvas.paperView.getter();
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v1 = v0;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.lineEnds.setter(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  int v41 = a6;
  uint64_t v44 = a5;
  int v42 = a4;
  uint64_t v43 = a3;
  uint64_t v54 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = &v40[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v62 = &v40[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = &v40[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v17);
  uint64_t v58 = &v40[-v18];
  uint64_t v19 = *(void *)(a2 + 8);
  uint64_t v20 = *(void *)(v19 + 56);
  uint64_t v51 = v19 + 56;
  uint64_t v21 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  uint64_t v56 = v14 + 32;
  uint64_t v57 = v14 + 16;
  uint64_t v55 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v45 = (void (**)(unsigned char *, uint64_t))(v11 + 8);
  unint64_t v46 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32);
  int64_t v52 = (unint64_t)(v21 + 63) >> 6;
  int v53 = (void (**)(unsigned char *, uint64_t))(v14 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v25 = 0;
  v42 &= 1u;
  v41 &= 1u;
  uint64_t v49 = v14;
  uint64_t v50 = v9;
  uint64_t v47 = v19;
  uint64_t v48 = v16;
  if (v23) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v28 = v25 + 1;
  if (!__OFADD__(v25, 1))
  {
    if (v28 < v52)
    {
      unint64_t v29 = *(void *)(v51 + 8 * v28);
      ++v25;
      if (v29) {
        goto LABEL_20;
      }
      int64_t v25 = v28 + 1;
      if (v28 + 1 >= v52) {
        return swift_release();
      }
      unint64_t v29 = *(void *)(v51 + 8 * v25);
      if (v29) {
        goto LABEL_20;
      }
      int64_t v25 = v28 + 2;
      if (v28 + 2 >= v52) {
        return swift_release();
      }
      unint64_t v29 = *(void *)(v51 + 8 * v25);
      if (v29)
      {
LABEL_20:
        unint64_t v23 = (v29 - 1) & v29;
        for (unint64_t i = __clz(__rbit64(v29)) + (v25 << 6); ; unint64_t i = v26 | (v25 << 6))
        {
          int64_t v31 = v58;
          (*(void (**)(unsigned char *, unint64_t, uint64_t))(v14 + 16))(v58, *(void *)(v19 + 48) + *(void *)(v14 + 72) * i, v13);
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(v16, v31, v13);
          WeakTagged_9.tagged6.getter();
          if ((*v55)(v9, 1, v10) == 1)
          {
            (*v53)(v16, v13);
            uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakRef<Shape>?);
            if (!v23) {
              goto LABEL_7;
            }
          }
          else
          {
            (*v46)(v62, v9, v10);
            uint64_t v32 = v10;
            int64_t v33 = (void (*)(unsigned char *, void))WeakRef.subscript.modify();
            uint64_t v35 = v34;
            uint64_t v36 = type metadata accessor for Shape();
            uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48);
            if (!v37(v35, 1, v36))
            {
              uint64_t v59 = v43;
              char v60 = v42;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
              CRRegister.wrappedValue.setter();
            }
            v33(v61, 0);
            uint64_t v38 = (void (*)(unsigned char *, void))WeakRef.subscript.modify();
            if (!v37(v39, 1, v36))
            {
              uint64_t v59 = v44;
              char v60 = v41;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
              CRRegister.wrappedValue.setter();
            }
            v38(v61, 0);
            uint64_t v9 = v50;
            uint64_t v19 = v47;
            uint64_t v10 = v32;
            (*v45)(v62, v32);
            uint64_t v16 = v48;
            uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))*v53)(v48, v13);
            uint64_t v14 = v49;
            if (!v23) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v26 = __clz(__rbit64(v23));
          v23 &= v23 - 1;
        }
      }
      int64_t v30 = v28 + 3;
      if (v30 < v52)
      {
        unint64_t v29 = *(void *)(v51 + 8 * v30);
        if (v29)
        {
          int64_t v25 = v30;
          goto LABEL_20;
        }
        while (1)
        {
          int64_t v25 = v30 + 1;
          if (__OFADD__(v30, 1)) {
            goto LABEL_30;
          }
          if (v25 >= v52) {
            return swift_release();
          }
          unint64_t v29 = *(void *)(v51 + 8 * v25);
          ++v30;
          if (v29) {
            goto LABEL_20;
          }
        }
      }
    }
    return swift_release();
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.opacity.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v44 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t v45 = v2;
  uint64_t v43 = type metadata accessor for Capsule();
  uint64_t v3 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v42 = (uint64_t)&v38 - v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Shape();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v38 = (uint64_t)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  int64_t v52 = (char *)&v38 - v19;
  uint64_t v20 = *(void *)(v1 + 8);
  uint64_t v21 = *(void *)(v20 + 56);
  uint64_t v46 = v1;
  uint64_t v47 = v20 + 56;
  uint64_t v22 = 1 << *(unsigned char *)(v20 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v21;
  uint64_t v50 = v18 + 32;
  uint64_t v51 = v18 + 16;
  uint64_t v40 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v41 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v39 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  uint64_t v53 = v18;
  int64_t v48 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v49 = (void (**)(char *, uint64_t))(v18 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v55)
  {
    if (v24)
    {
      uint64_t v54 = (v24 - 1) & v24;
      int64_t v55 = i;
      unint64_t v27 = __clz(__rbit64(v24)) | (i << 6);
      goto LABEL_22;
    }
    int64_t v28 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 >= v48) {
      return swift_release();
    }
    unint64_t v29 = *(void *)(v47 + 8 * v28);
    int64_t v30 = i + 1;
    if (!v29)
    {
      int64_t v30 = i + 2;
      if (i + 2 >= v48) {
        return swift_release();
      }
      unint64_t v29 = *(void *)(v47 + 8 * v30);
      if (!v29)
      {
        int64_t v30 = i + 3;
        if (i + 3 >= v48) {
          return swift_release();
        }
        unint64_t v29 = *(void *)(v47 + 8 * v30);
        if (!v29) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v54 = (v29 - 1) & v29;
    int64_t v55 = v30;
    unint64_t v27 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_22:
    int64_t v33 = v52;
    uint64_t v32 = v53;
    (*(void (**)(char *, unint64_t, uint64_t))(v53 + 16))(v52, *(void *)(v20 + 48) + *(void *)(v53 + 72) * v27, v14);
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v16, v33, v14);
    WeakTagged_9.tagged6.getter();
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v7, 1, v34) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for WeakRef<Shape>?);
      (*v39)(v10, 1, 1, v11);
    }
    else
    {
      uint64_t v36 = v42;
      Canvas.updatablePaper2.getter(v42);
      WeakRef.subscript.getter();
      (*v41)(v36, v43);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v34);
      if ((*v40)(v10, 1, v11) != 1)
      {
        uint64_t v37 = v38;
        _s8PaperKit5ShapeVWObTm_0((uint64_t)v10, v38, (uint64_t (*)(void))type metadata accessor for Shape);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
        CRRegister.wrappedValue.getter();
        _s8PaperKit5ShapeVWOhTm_0(v37, (uint64_t (*)(void))type metadata accessor for Shape);
        (*v49)(v16, v14);
        return swift_release();
      }
    }
    (*v49)(v16, v14);
    uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Shape?);
    unint64_t v24 = v54;
  }
  uint64_t v31 = i + 4;
  if (i + 4 >= v48) {
    return swift_release();
  }
  unint64_t v29 = *(void *)(v47 + 8 * v31);
  if (v29)
  {
    int64_t v30 = i + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v48) {
      return swift_release();
    }
    unint64_t v29 = *(void *)(v47 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.opacity.setter()
{
  return Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.opacity.setter);
}

void closure #1 in CanvasFormattingProxy.opacity.setter()
{
  v0 = (void *)specialized Canvas.paperView.getter();
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v1 = v0;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.opacity.setter(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v39 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v43 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v47 = (char *)&v34 - v16;
  uint64_t v17 = *(void *)(a2 + 8);
  uint64_t v18 = *(void *)(v17 + 56);
  uint64_t v40 = v17 + 56;
  uint64_t v19 = 1 << *(unsigned char *)(v17 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v45 = v12 + 32;
  uint64_t v46 = v12 + 16;
  uint64_t v44 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v35 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v36 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  int64_t v41 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v42 = (void (**)(char *, uint64_t))(v12 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v23 = 0;
  uint64_t v37 = v17;
  uint64_t v38 = v12;
  if (v21) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v26 = v23 + 1;
  if (!__OFADD__(v23, 1))
  {
    if (v26 < v41)
    {
      unint64_t v27 = *(void *)(v40 + 8 * v26);
      ++v23;
      if (v27) {
        goto LABEL_20;
      }
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v41) {
        return swift_release();
      }
      unint64_t v27 = *(void *)(v40 + 8 * v23);
      if (v27) {
        goto LABEL_20;
      }
      int64_t v23 = v26 + 2;
      if (v26 + 2 >= v41) {
        return swift_release();
      }
      unint64_t v27 = *(void *)(v40 + 8 * v23);
      if (v27)
      {
LABEL_20:
        unint64_t v21 = (v27 - 1) & v27;
        for (unint64_t i = __clz(__rbit64(v27)) + (v23 << 6); ; unint64_t i = v24 | (v23 << 6))
        {
          unint64_t v29 = v47;
          (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v47, *(void *)(v17 + 48) + *(void *)(v12 + 72) * i, v11);
          (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v29, v11);
          WeakTagged_9.tagged6.getter();
          if ((*v44)(v7, 1, v8) == 1)
          {
            (*v42)(v14, v11);
            uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for WeakRef<Shape>?);
            if (!v21) {
              goto LABEL_7;
            }
          }
          else
          {
            (*v36)(v43, v7, v8);
            int64_t v30 = (void (*)(char *, void))WeakRef.subscript.modify();
            uint64_t v32 = v31;
            uint64_t v33 = type metadata accessor for Shape();
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v32, 1, v33))
            {
              double v48 = a3;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
              CRRegister.wrappedValue.setter();
            }
            v30(v49, 0);
            (*v35)(v43, v8);
            uint64_t result = ((uint64_t (*)(char *, uint64_t))*v42)(v14, v11);
            uint64_t v17 = v37;
            uint64_t v12 = v38;
            if (!v21) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v24 = __clz(__rbit64(v21));
          v21 &= v21 - 1;
        }
      }
      int64_t v28 = v26 + 3;
      if (v28 < v41)
      {
        unint64_t v27 = *(void *)(v40 + 8 * v28);
        if (v27)
        {
          int64_t v23 = v28;
          goto LABEL_20;
        }
        while (1)
        {
          int64_t v23 = v28 + 1;
          if (__OFADD__(v28, 1)) {
            goto LABEL_28;
          }
          if (v23 >= v41) {
            return swift_release();
          }
          unint64_t v27 = *(void *)(v40 + 8 * v23);
          ++v28;
          if (v27) {
            goto LABEL_20;
          }
        }
      }
    }
    return swift_release();
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.hasMultipleOpacities.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v34 = *(void *)(a1 + 24);
  uint64_t v35 = a1;
  uint64_t v3 = *(void *)(v34 + 16);
  uint64_t v39 = v2;
  uint64_t v37 = v3;
  uint64_t v38 = type metadata accessor for Capsule();
  uint64_t v36 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v5 = (char *)&v32 - v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Shape();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v33 = (uint64_t)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = v1;
  uint64_t v18 = *(void *)(v1 + 8);
  specialized Collection.first.getter(v18, (uint64_t)v8);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v8, 1, v19) == 1)
  {
    unint64_t v21 = (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?;
    uint64_t v22 = (uint64_t)v8;
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?(v22, v21);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
    goto LABEL_6;
  }
  WeakTagged_9.tagged6.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v19);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v11, 1, v23) == 1)
  {
    unint64_t v21 = &demangling cache variable for type metadata for WeakRef<Shape>?;
    uint64_t v22 = (uint64_t)v11;
    goto LABEL_5;
  }
  Canvas.updatablePaper2.getter((uint64_t)v5);
  uint64_t v27 = v39;
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v38);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    uint64_t v28 = v33;
    uint64_t v29 = _s8PaperKit5ShapeVWObTm_0((uint64_t)v14, v33, (uint64_t (*)(void))type metadata accessor for Shape);
    MEMORY[0x270FA5388](v29);
    uint64_t v30 = v34;
    *(&v32 - 6) = v27;
    *(&v32 - 5) = v30;
    uint64_t v31 = v40;
    *(&v32 - 4) = *(void *)(v35 + 32);
    *(&v32 - 3) = v31;
    *(&v32 - 2) = v28;
    swift_bridgeObjectRetain();
    char v25 = specialized Sequence.allSatisfy(_:)((uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.hasMultipleOpacities.getter, (char)(&v32 - 8), v18);
    swift_bridgeObjectRelease();
    _s8PaperKit5ShapeVWOhTm_0(v28, (uint64_t (*)(void))type metadata accessor for Shape);
    return v25 & 1;
  }
LABEL_6:
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for Shape?);
  char v25 = 0;
  return v25 & 1;
}

BOOL closure #1 in CanvasFormattingProxy.hasMultipleOpacities.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a4;
  v23[1] = a3;
  v23[2] = a2;
  uint64_t v26 = *(void *)(a5 + 16);
  uint64_t v5 = type metadata accessor for Capsule();
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v25 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v23 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Shape();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v10, 1, v18) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for WeakRef<Shape>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
LABEL_4:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Shape?);
    return 0;
  }
  Canvas.updatablePaper2.getter((uint64_t)v7);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v25);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1) {
    goto LABEL_4;
  }
  _s8PaperKit5ShapeVWObTm_0((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Shape);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  double v21 = v28;
  CRRegister.wrappedValue.getter();
  double v22 = v28;
  _s8PaperKit5ShapeVWOhTm_0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Shape);
  return v21 == v22;
}

void CanvasFormattingProxy.hasLink.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = specialized Sequence.compactMap<A>(_:)(v2, v1);
  swift_bridgeObjectRelease();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_3;
      }
    }
LABEL_9:
    swift_bridgeObjectRelease();
    return;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) != 1) {
    goto LABEL_9;
  }
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x21054E050](0, v3);
    goto LABEL_6;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v4 = *(id *)(v3 + 32);
LABEL_6:
    uint64_t v5 = v4;
    swift_bridgeObjectRelease();
    type metadata accessor for LinkCanvasElementView();
    swift_dynamicCastClass();

    return;
  }
  __break(1u);
}

uint64_t CanvasFormattingProxy.init(canvas:members:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = a5 & 1;
  return result;
}

uint64_t destroy for CanvasFormattingProxy(id *a1)
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CanvasFormattingProxy(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CanvasFormattingProxy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v7;
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CanvasFormattingProxy(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasFormattingProxy(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasFormattingProxy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for CanvasFormattingProxy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for CanvasMembersFormattingState.supportsFillColor.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsFillColor.getter(a1, (uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.supportsFillColor.getter) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.supportsStrokeColor.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsStrokeColor.getter(a1) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.supportsTextStyle.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsFillColor.getter(a1, (uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.supportsTextStyle.getter) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.supportsLineEnds.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsFillColor.getter(a1, (uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.supportsLineEnds.getter) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.supportsOpacity.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsFillColor.getter(a1, (uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.supportsOpacity.getter) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.supportsImageRegeneration.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsImageRegeneration.getter(a1) & 1;
}

BOOL protocol witness for CanvasMembersFormattingState.supportsImageGeneration.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsImageGeneration.getter(a1);
}

uint64_t protocol witness for CanvasMembersFormattingState.supportsMagicGenerativePlaygroundForSelection.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsMagicGenerativePlaygroundForSelection.getter(a1) & 1;
}

void protocol witness for CanvasMembersFormattingState.fillColor.setter in conformance CanvasFormattingProxy<A>(void **a1, uint64_t a2)
{
}

void protocol witness for CanvasMembersFormattingState.strokeColor.setter in conformance CanvasFormattingProxy<A>(void **a1, uint64_t a2)
{
}

uint64_t protocol witness for CanvasMembersFormattingState.strokeWidth.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.strokeWidth.getter(a1);
}

uint64_t protocol witness for CanvasMembersFormattingState.strokeWidth.setter in conformance CanvasFormattingProxy<A>()
{
  return CanvasFormattingProxy.strokeWidth.setter();
}

uint64_t protocol witness for CanvasMembersFormattingState.strokeIsRequired.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.strokeIsRequired.getter(a1, (uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.strokeIsRequired.getter) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.fontName.setter in conformance CanvasFormattingProxy<A>()
{
  specialized CanvasFormattingProxy.fontName.setter();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CanvasMembersFormattingState.fontSize.setter in conformance CanvasFormattingProxy<A>(uint64_t a1, uint64_t a2)
{
  return CanvasFormattingProxy.fontSize.setter(a1, a2, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.fontSize.setter);
}

uint64_t protocol witness for CanvasMembersFormattingState.textAlignment.setter in conformance CanvasFormattingProxy<A>(uint64_t a1, uint64_t a2)
{
  return CanvasFormattingProxy.fontSize.setter(a1, a2, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.textAlignment.setter);
}

uint64_t protocol witness for CanvasMembersFormattingState.bold.setter in conformance CanvasFormattingProxy<A>(uint64_t a1, uint64_t a2)
{
  return CanvasFormattingProxy.bold.setter(a1, a2, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.bold.setter);
}

uint64_t protocol witness for CanvasMembersFormattingState.italic.setter in conformance CanvasFormattingProxy<A>(uint64_t a1, uint64_t a2)
{
  return CanvasFormattingProxy.bold.setter(a1, a2, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.italic.setter);
}

uint64_t protocol witness for CanvasMembersFormattingState.underline.setter in conformance CanvasFormattingProxy<A>(uint64_t a1, uint64_t a2)
{
  return CanvasFormattingProxy.bold.setter(a1, a2, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.underline.setter);
}

uint64_t protocol witness for CanvasMembersFormattingState.strikethrough.setter in conformance CanvasFormattingProxy<A>(uint64_t a1, uint64_t a2)
{
  return CanvasFormattingProxy.bold.setter(a1, a2, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.strikethrough.setter);
}

void protocol witness for CanvasMembersFormattingState.fontColor.setter in conformance CanvasFormattingProxy<A>(void **a1)
{
}

uint64_t protocol witness for CanvasMembersFormattingState.boldAllowed.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.strokeIsRequired.getter(a1, (uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.boldAllowed.getter) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.italicAllowed.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.strokeIsRequired.getter(a1, (uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.italicAllowed.getter) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.lineEnds.setter in conformance CanvasFormattingProxy<A>()
{
  return CanvasFormattingProxy.lineEnds.setter();
}

uint64_t protocol witness for CanvasMembersFormattingState.opacity.setter in conformance CanvasFormattingProxy<A>()
{
  return CanvasFormattingProxy.opacity.setter();
}

uint64_t protocol witness for CanvasMembersFormattingState.hasMultipleOpacities.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.hasMultipleOpacities.getter(a1) & 1;
}

BOOL partial apply for closure #1 in CanvasFormattingProxy.hasMultipleOpacities.getter(uint64_t a1)
{
  return closure #1 in CanvasFormattingProxy.hasMultipleOpacities.getter(a1, v1[5], v1[6], v1[2], v1[3]);
}

void partial apply for closure #1 in CanvasFormattingProxy.opacity.setter()
{
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.opacity.setter(uint64_t a1)
{
  return closure #1 in closure #1 in CanvasFormattingProxy.opacity.setter(a1, *(void *)(v1 + 32), *(double *)(v1 + 40));
}

void partial apply for closure #1 in CanvasFormattingProxy.lineEnds.setter()
{
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.lineEnds.setter(uint64_t a1)
{
  return closure #1 in closure #1 in CanvasFormattingProxy.lineEnds.setter(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(void *)(v1 + 56), *(unsigned __int8 *)(v1 + 64));
}

uint64_t partial apply for closure #1 in CanvasFormattingProxy.italicAllowed.getter(uint64_t a1)
{
  return closure #1 in CanvasFormattingProxy.italicAllowed.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t partial apply for closure #1 in CanvasFormattingProxy.boldAllowed.getter(uint64_t a1)
{
  return closure #1 in CanvasFormattingProxy.boldAllowed.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

void partial apply for closure #1 in CanvasFormattingProxy.fontColor.setter()
{
}

{
  closure #1 in CanvasFormattingProxy.fillColor.setter();
}

void partial apply for closure #1 in closure #1 in CanvasFormattingProxy.fontColor.setter(void *a1)
{
  closure #1 in closure #1 in CanvasFormattingProxy.fontColor.setter(a1, *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in CanvasFormattingProxy.strikethrough.setter()
{
}

{
  closure #1 in CanvasFormattingProxy.bold.setter();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.strikethrough.setter(void *a1)
{
  return closure #1 in closure #1 in CanvasFormattingProxy.underline.setter(a1, *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_20C845A60, (void (*)(void))lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute);
}

void partial apply for closure #1 in CanvasFormattingProxy.underline.setter()
{
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.underline.setter(void *a1)
{
  return closure #1 in closure #1 in CanvasFormattingProxy.underline.setter(a1, *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_20C845A80, (void (*)(void))lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute);
}

void partial apply for closure #1 in CanvasFormattingProxy.italic.setter()
{
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.italic.setter(void *a1)
{
  return closure #1 in closure #1 in CanvasFormattingProxy.bold.setter(a1, *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24), &static Font.Traits.italic);
}

void partial apply for closure #1 in CanvasFormattingProxy.bold.setter()
{
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.bold.setter(void *a1)
{
  return closure #1 in closure #1 in CanvasFormattingProxy.bold.setter(a1, *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24), &static Font.Traits.bold);
}

void partial apply for closure #1 in CanvasFormattingProxy.textAlignment.setter()
{
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.textAlignment.setter(void *a1)
{
  return closure #1 in closure #1 in CanvasFormattingProxy.textAlignment.setter(a1, v1[4], v1[5], v1[2], v1[3]);
}

void partial apply for closure #1 in CanvasFormattingProxy.fontSize.setter()
{
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.fontSize.setter(void *a1)
{
  return closure #1 in closure #1 in CanvasFormattingProxy.fontSize.setter(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t specialized CanvasFormattingProxy.fontName.setter()
{
  return Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.fontName.setter);
}

void partial apply for closure #1 in CanvasFormattingProxy.fontName.setter()
{
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.fontName.setter(void *a1)
{
  return closure #1 in closure #1 in CanvasFormattingProxy.fontName.setter(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in CanvasFormattingProxy.strokeIsRequired.getter(uint64_t a1)
{
  return closure #1 in CanvasFormattingProxy.strokeIsRequired.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

void partial apply for closure #1 in CanvasFormattingProxy.strokeWidth.setter()
{
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.strokeWidth.setter(uint64_t a1)
{
  return closure #1 in closure #1 in CanvasFormattingProxy.strokeWidth.setter(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
}

void partial apply for closure #1 in CanvasFormattingProxy.strokeColor.setter()
{
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.strokeColor.setter(void *a1)
{
  return closure #1 in closure #1 in CanvasFormattingProxy.strokeColor.setter(a1, *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 16));
}

uint64_t _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in CanvasFormattingProxy.fillColor.setter()
{
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.fillColor.setter(uint64_t a1)
{
  return closure #1 in closure #1 in CanvasFormattingProxy.fillColor.setter(a1, *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t partial apply for closure #1 in implicit closure #3 in CanvasFormattingProxy.supportsMagicGenerativePlaygroundForSelection.getter(uint64_t a1)
{
  return closure #1 in implicit closure #3 in CanvasFormattingProxy.supportsMagicGenerativePlaygroundForSelection.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t _s8PaperKit5ShapeVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s8PaperKit5ShapeVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in CanvasFormattingProxy.supportsOpacity.getter(uint64_t a1)
{
  return closure #1 in CanvasFormattingProxy.supportsOpacity.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t partial apply for closure #1 in CanvasFormattingProxy.supportsLineEnds.getter(uint64_t a1)
{
  return closure #1 in CanvasFormattingProxy.supportsLineEnds.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t partial apply for closure #1 in CanvasFormattingProxy.supportsTextStyle.getter(uint64_t a1)
{
  return closure #1 in CanvasFormattingProxy.supportsTextStyle.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t partial apply for closure #1 in CanvasFormattingProxy.supportsStrokeColor.getter(uint64_t a1)
{
  return closure #1 in CanvasFormattingProxy.supportsStrokeColor.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

BOOL partial apply for closure #1 in CanvasFormattingProxy.supportsFillColor.getter(uint64_t a1)
{
  return closure #1 in CanvasFormattingProxy.supportsFillColor.getter(a1, v1[5], v1[2], v1[3]);
}

uint64_t AnyCanvas.delegate.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate);
}

uint64_t AnyCanvas.delegate.setter(uint64_t a1, uint64_t a2)
{
  return AnyCanvas.delegate.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate);
}

uint64_t (*AnyCanvas.delegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

uint64_t AnyCanvas.overlays.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CanvasUIOverlay?>);
  uint64_t result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_20C837A90;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v2)
  {
    uint64_t v3 = (void *)result;
    *(void *)(result + 32) = v2;
    *(void *)(result + 40) = &protocol witness table for CanvasElementResizeView;
    uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
    uint64_t v5 = &protocol witness table for HandwritingReflowView;
    if (!v4) {
      uint64_t v5 = 0;
    }
    *(void *)(result + 48) = v4;
    *(void *)(result + 56) = v5;
    uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView);
    *(void *)(result + 64) = v6;
    *(void *)(result + 72) = &protocol witness table for CanvasCollaborationStateView;
    id v7 = v4;
    id v8 = v6;
    id v9 = v2;
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v12 = v10[2];
    unint64_t v11 = v10[3];
    if (v12 >= v11 >> 1) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v10);
    }
    v10[2] = v12 + 1;
    uint64_t v13 = &v10[2 * v12];
    v13[4] = v9;
    v13[5] = &protocol witness table for CanvasElementResizeView;
    uint64_t v14 = (void *)v3[6];
    if (v14)
    {
      uint64_t v15 = v3[7];
      id v16 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      }
      unint64_t v18 = v10[2];
      unint64_t v17 = v10[3];
      if (v18 >= v17 >> 1) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v10);
      }
      v10[2] = v18 + 1;
      uint64_t v19 = &v10[2 * v18];
      v19[4] = v16;
      v19[5] = v15;
    }
    uint64_t v20 = (void *)v3[8];
    if (v20)
    {
      uint64_t v21 = v3[9];
      id v22 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      }
      unint64_t v24 = v10[2];
      unint64_t v23 = v10[3];
      if (v24 >= v23 >> 1) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v10);
      }
      v10[2] = v24 + 1;
      uint64_t v25 = &v10[2 * v24];
      v25[4] = v22;
      v25[5] = v21;
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *AnyCanvas.overlayViewControllerForPresentingUI.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void AnyCanvas.overlayViewControllerForPresentingUI.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*AnyCanvas.overlayViewControllerForPresentingUI.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t AnyCanvas.participantDetailsDataSource.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource);
}

uint64_t AnyCanvas.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
  return swift_unknownObjectRelease();
}

void (*AnyCanvas.participantDetailsDataSource.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return AnyCanvas.participantDetailsDataSource.modify;
}

void AnyCanvas.participantDetailsDataSource.modify(uint64_t a1, char a2)
{
  id v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    uint64_t v4 = v3[5];
    swift_endAccess();
    swift_unknownObjectRelease();
    objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
  }
  free(v3);
}

Swift::Void __swiftcall AnyCanvas.participantDetailsDidChange()()
{
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
}

uint64_t AnyCanvas.showParticipantCursors.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

id AnyCanvas.showParticipantCursors.setter(char a1)
{
  id v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors);
  swift_beginAccess();
  *id v3 = a1;
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
}

id (*AnyCanvas.showParticipantCursors.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return AnyCanvas.showParticipantCursors.modify;
}

id AnyCanvas.showParticipantCursors.modify(uint64_t a1, char a2)
{
  id result = (id)swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = *(void **)(*(void *)(a1 + 24) + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView);
    return objc_msgSend(v5, sel_setNeedsLayout);
  }
  return result;
}

uint64_t AnyCanvas.wantsDataDetection.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_wantsDataDetection);
  swift_beginAccess();
  return *v1;
}

void AnyCanvas.wantsDataDetection.setter(unsigned __int8 a1)
{
}

void (*AnyCanvas.wantsDataDetection.modify(void *a1))(uint64_t *a1, char a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_wantsDataDetection;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return AnyCanvas.wantsDataDetection.modify;
}

void AnyCanvas.wantsDataDetection.modify(uint64_t *a1, char a2)
{
}

uint64_t AnyCanvas.isSharedViaICloud.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_isSharedViaICloud);
  swift_beginAccess();
  return *v1;
}

void AnyCanvas.isSharedViaICloud.setter(unsigned __int8 a1)
{
}

void AnyCanvas.wantsDataDetection.setter(unsigned __int8 a1, void *a2, SEL *a3)
{
  uint64_t v6 = (unsigned __int8 *)v3 + *a2;
  uint64_t v7 = swift_beginAccess();
  *uint64_t v6 = a1;
  id v8 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x2F8))(v7);
  uint64_t v10 = v9;
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(ObjectType, v10);

  if (v12)
  {
    objc_msgSend(v12, *a3, *v6);
  }
}

void (*AnyCanvas.isSharedViaICloud.modify(void *a1))(uint64_t *a1, char a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_isSharedViaICloud;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return AnyCanvas.isSharedViaICloud.modify;
}

void AnyCanvas.isSharedViaICloud.modify(uint64_t *a1, char a2)
{
}

void AnyCanvas.wantsDataDetection.modify(uint64_t *a1, char a2, SEL *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & **(void **)(v5 + 24)) + 0x2F8))(v6);
    uint64_t v9 = v8;
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(ObjectType, v9);

    if (v11)
    {
      objc_msgSend(v11, *a3, *(unsigned __int8 *)(*(void *)(v5 + 24) + *(void *)(v5 + 32)));
    }
  }
  free((void *)v5);
}

uint64_t AnyCanvas.textualContextProvider.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider);
}

uint64_t AnyCanvas.textualContextProvider.setter(uint64_t a1, uint64_t a2)
{
  return AnyCanvas.delegate.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider);
}

uint64_t AnyCanvas.delegate.setter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3 + *a3;
  swift_beginAccess();
  *(void *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*AnyCanvas.textualContextProvider.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

uint64_t AnyCanvas.liveStreamDrawings.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings);
  swift_beginAccess();
  return *v1;
}

void AnyCanvas.liveStreamDrawings.setter(unsigned __int8 a1)
{
  uint64_t v3 = (unsigned __int8 *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings;
  uint64_t v4 = swift_beginAccess();
  *uint64_t v3 = a1;
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v1) + 0x320))(v4);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = objc_msgSend(v5, sel_canvasView);

    if (v7)
    {
      objc_msgSend(v7, sel_setGenerateLiveDrawing_, *v3);
    }
  }
}

void (*AnyCanvas.liveStreamDrawings.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return AnyCanvas.liveStreamDrawings.modify;
}

void AnyCanvas.liveStreamDrawings.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & **(void **)(v3 + 24)) + 0x320))(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = objc_msgSend(v5, sel_canvasView);

      if (v7)
      {
        objc_msgSend(v7, sel_setGenerateLiveDrawing_, *(unsigned __int8 *)(*(void *)(v3 + 24) + *(void *)(v3 + 32)));
      }
    }
  }
  free((void *)v3);
}

uint64_t AnyCanvas.scrollViewForAvoidingKeyboard.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x308))();
}

Swift::Bool __swiftcall AnyCanvas.isLiveEditing()()
{
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
  MEMORY[0x270FA5388](v52);
  uint64_t v51 = (char *)&v46 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v49 = (char *)&v46 - v3;
  v5.n128_f64[0] = MEMORY[0x270FA5388](v4);
  uint64_t v50 = (char *)&v46 - v6;
  id v7 = (void *)MEMORY[0x263F8EED0];
  uint64_t v8 = *(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *v0) + 0x2F8);
  uint64_t v9 = (void *)v8(v5);
  char v10 = (*(uint64_t (**)(void))((*v7 & *v9) + 0x1E0))();

  if (v10) {
    return 1;
  }
  unint64_t v12 = (void *)((uint64_t (*)(void))v8)();
  uint64_t v14 = v13;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(ObjectType, v14);

  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v46 = v16 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v47 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v48 = v16;
  Swift::Bool result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  uint64_t v23 = (uint64_t)v49;
  while (v20)
  {
    unint64_t v24 = __clz(__rbit64(v20));
    v20 &= v20 - 1;
    int64_t v53 = v22;
    unint64_t v25 = v24 | (v22 << 6);
LABEL_7:
    uint64_t v26 = v48;
    uint64_t v27 = *(void *)(v48 + 48);
    uint64_t v28 = type metadata accessor for CRKeyPath();
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t v30 = v29;
    uint64_t v31 = v27 + *(void *)(v29 + 72) * v25;
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
    uint64_t v33 = (uint64_t)v50;
    v32(v50, v31, v28);
    uint64_t v34 = *(void **)(*(void *)(v26 + 56) + 8 * v25);
    uint64_t v35 = v52;
    *(void *)(v33 + *(int *)(v52 + 48)) = v34;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v33, v23, &demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
    uint64_t v36 = *(int *)(v35 + 48);
    uint64_t v37 = v51;
    v32(v51, v23, v28);
    uint64_t v38 = *(void **)(v23 + v36);
    *(void *)&v37[v36] = v38;
    uint64_t v39 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v38) + 0x1E0);
    id v40 = v34;
    int64_t v41 = v38;
    LOBYTE(v39) = v39();

    (*(void (**)(char *, uint64_t))(v30 + 8))(v37, v28);
    Swift::Bool result = outlined destroy of StocksKitCurrencyCache.Provider?(v23, &demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
    int64_t v22 = v53;
    if (v39)
    {
      Swift::Bool v11 = 1;
LABEL_29:
      swift_release();
      swift_bridgeObjectRelease();
      return v11;
    }
  }
  int64_t v42 = v22 + 1;
  if (__OFADD__(v22, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v42 >= v47) {
    goto LABEL_28;
  }
  unint64_t v43 = *(void *)(v46 + 8 * v42);
  int64_t v44 = v22 + 1;
  if (v43) {
    goto LABEL_26;
  }
  int64_t v44 = v22 + 2;
  if (v22 + 2 >= v47) {
    goto LABEL_28;
  }
  unint64_t v43 = *(void *)(v46 + 8 * v44);
  if (v43) {
    goto LABEL_26;
  }
  int64_t v44 = v22 + 3;
  if (v22 + 3 >= v47) {
    goto LABEL_28;
  }
  unint64_t v43 = *(void *)(v46 + 8 * v44);
  if (v43) {
    goto LABEL_26;
  }
  int64_t v44 = v22 + 4;
  if (v22 + 4 >= v47) {
    goto LABEL_28;
  }
  unint64_t v43 = *(void *)(v46 + 8 * v44);
  if (v43) {
    goto LABEL_26;
  }
  int64_t v44 = v22 + 5;
  if (v22 + 5 >= v47) {
    goto LABEL_28;
  }
  unint64_t v43 = *(void *)(v46 + 8 * v44);
  if (v43)
  {
LABEL_26:
    unint64_t v20 = (v43 - 1) & v43;
    int64_t v53 = v44;
    unint64_t v25 = __clz(__rbit64(v43)) + (v44 << 6);
    goto LABEL_7;
  }
  uint64_t v45 = v22 + 6;
  if (v22 + 6 >= v47)
  {
LABEL_28:
    Swift::Bool v11 = 0;
    goto LABEL_29;
  }
  unint64_t v43 = *(void *)(v46 + 8 * v45);
  if (v43)
  {
    int64_t v44 = v22 + 6;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v44 = v45 + 1;
    if (__OFADD__(v45, 1)) {
      break;
    }
    if (v44 >= v47) {
      goto LABEL_28;
    }
    unint64_t v43 = *(void *)(v46 + 8 * v44);
    ++v45;
    if (v43) {
      goto LABEL_26;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

Swift::Void __swiftcall AnyCanvas.isResizingChanged()()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  uint64_t v2 = *(void *)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v2)
  {
    __break(1u);
    goto LABEL_18;
  }
  double v3 = 0.0;
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing) & 1) == 0)
  {
    uint64_t v4 = *(void *)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
    if (!v4 || (*(unsigned char *)(v4 + OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing) & 1) == 0) {
      double v3 = 1.0;
    }
  }
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView;
  objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_alpha);
  if (v3 != v6)
  {
    id v7 = self;
    uint64_t v8 = *(void **)((char *)v0 + v5);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v8;
    *(double *)(v9 + 24) = v3;
    v18[4] = partial apply for closure #1 in AnyCanvas.isResizingChanged();
    v18[5] = v9;
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 1107296256;
    v18[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v18[3] = &block_descriptor_117_0;
    char v10 = _Block_copy(v18);
    id v11 = v8;
    swift_release();
    objc_msgSend(v7, sel_animateWithDuration_animations_, v10, 0.2);
    _Block_release(v10);
  }
  unint64_t v12 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x320))();
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = objc_msgSend(v12, sel_selectionInteraction);

    uint64_t v15 = *(void *)((char *)v0 + v1);
    if (v15)
    {
      if (*(unsigned char *)(v15 + OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing))
      {
        char v16 = 0;
      }
      else
      {
        uint64_t v17 = *(void *)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
        if (v17) {
          char v16 = *(unsigned char *)(v17 + OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing) ^ 1;
        }
        else {
          char v16 = 1;
        }
      }
      objc_msgSend(v14, sel_setEnabled_, v16 & 1);

      return;
    }
LABEL_18:
    __break(1u);
  }
}

void AnyCanvas.selection.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v56 = type metadata accessor for Logger();
  uint64_t v58 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v57 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  unint64_t v12 = *(char **)&v5[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v12)
  {
    __break(1u);
    goto LABEL_40;
  }
  int v13 = a4 & 1;
  a4 = *(void *)&v12[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  uint64_t v14 = *(void *)&v12[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
  uint64_t v53 = *(void *)&v12[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
  int v54 = v12[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = v12;
  CanvasElementResizeView.selection.setter(a1, a2, a3, v13);

  uint64_t v55 = v11;
  uint64_t v16 = *(void *)&v5[v11];
  if (!v16)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v17 = v16 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  uint64_t v18 = *(void *)v17;
  uint64_t v19 = *(void *)(v17 + 8);
  uint64_t v20 = *(void *)(v17 + 16);
  char v21 = *(unsigned char *)(v17 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Set.== infix(_:_:)(a4, v18) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v23 = v56;
    goto LABEL_9;
  }
  char v22 = specialized static Set.== infix(_:_:)(v14, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v56;
  if ((v22 & 1) == 0) {
    goto LABEL_9;
  }
  if (v54)
  {
    if (v21) {
      return;
    }
LABEL_9:
    if (one-time initialization token for miniMenuLogger != -1) {
      swift_once();
    }
    uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)miniMenuLogger);
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v24, v23);
    unint64_t v25 = v5;
    a4 = v5;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = v55;
    if (v28)
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 134217984;
      uint64_t v31 = *(void *)&v5[v29];
      if (!v31)
      {
LABEL_42:

        __break(1u);
        goto LABEL_43;
      }
      uint64_t v32 = v30;
      uint64_t v59 = *(void *)(*(void *)(v31 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_20C2D7000, v26, v27, "Changing selection to have %ld elements", v32, 0xCu);
      MEMORY[0x210550270](v32, -1, -1);
    }
    else
    {
    }
    uint64_t v33 = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v57, v23);
    MEMORY[0x270FA5388](v33);
    *(&v53 - 2) = a4;
    AnyCanvas.updateCanvasState(_:)();
    if (objc_msgSend((id)a4, sel_isFirstResponder)) {
      goto LABEL_31;
    }
    uint64_t v34 = *(void **)&v5[v29];
    if (!v34)
    {
LABEL_43:
      __break(1u);
      return;
    }
    id v35 = v34;
    uint64_t v36 = swift_bridgeObjectRetain();
    unint64_t v37 = specialized Sequence.compactMap<A>(_:)(v36, (uint64_t)v35);

    swift_bridgeObjectRelease();
    if (v37 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v38) {
      goto LABEL_31;
    }
    id v39 = (id)a4;
    id v40 = objc_msgSend(v39, sel_window);
    if (v40)
    {
      int64_t v41 = v40;
      id v42 = objc_msgSend(self, sel_activeToolPickerForWindow_, v40);
      if (v42)
      {
        unint64_t v43 = v42;
        id v44 = objc_msgSend(v42, sel__visibilityUpdatesEnabled);
        objc_msgSend(v43, sel__setVisibilityUpdatesEnabled_, 0);
        objc_msgSend(v39, sel_becomeFirstResponder);
        objc_msgSend(v43, sel__setVisibilityUpdatesEnabled_, v44);

        id v39 = v43;
LABEL_30:

LABEL_31:
        uint64_t v46 = *(void **)(a4 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
        if (v46)
        {
          id v47 = v46;
          HandwritingReflowView.updateForNewSelection()();
        }
        uint64_t v48 = (void *)MEMORY[0x263F8EED0];
        uint64_t v49 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)a4) + 0x3A8))();
        uint64_t v50 = *(void *)&v25[v29];
        if (v50)
        {
          uint64_t v51 = (void *)(v50 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
          if (!*(void *)(*v51 + 16) && !*(void *)(v51[1] + 16))
          {
            uint64_t v52 = (void *)(*(uint64_t (**)(uint64_t))((*v48 & *(void *)a4) + 0x320))(v49);
            objc_msgSend(v52, sel__clearSelectionIfNecessary);
          }
          return;
        }
        goto LABEL_41;
      }
    }
    objc_msgSend(v39, sel_becomeFirstResponder);
    goto LABEL_30;
  }
  if (v53 == v20) {
    char v45 = v21;
  }
  else {
    char v45 = 1;
  }
  if (v45) {
    goto LABEL_9;
  }
}

uint64_t AnyCanvas.updateCanvasState(_:)()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v1);
  if (result)
  {
    uint64_t v3 = *((void *)v1 + 1);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    uint64_t v5 = swift_unknownObjectRelease();
    MEMORY[0x270FA5388](v5);
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<CanvasState>);
    Capsule.callAsFunction<A>(_:)();
    swift_endAccess();
    uint64_t v6 = swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v0) + 0x3A0))(v6);
  }
  return result;
}

uint64_t AnyCanvas.canvasUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas__canvasUUID;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

void AnyCanvas.selectedCanvasElementIds.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v29 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  BOOL v28 = (char *)v24 - v5;
  uint64_t v27 = type metadata accessor for CRKeyPath();
  uint64_t v30 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  id v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v8)
  {
LABEL_18:
    __break(1u);
    return;
  }
  uint64_t v9 = *(void *)(v8 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  int64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v31 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    int64_t v11 = specialized Set.startIndex.getter(v9);
    int v13 = v12;
    char v15 = v14 & 1;
    unint64_t v25 = v7;
    uint64_t v26 = v9 + 56;
    v24[3] = v2 + 32;
    v24[4] = v2 + 16;
    v24[1] = v30 + 32;
    v24[2] = v2 + 8;
    while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(unsigned char *)(v9 + 32))
    {
      if (((*(void *)(v26 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_16;
      }
      if (*(_DWORD *)(v9 + 36) != v13) {
        goto LABEL_17;
      }
      uint64_t v16 = v28;
      (*(void (**)(char *, int64_t, uint64_t))(v2 + 16))(v28, *(void *)(v9 + 48) + *(void *)(v2 + 72) * v11, v1);
      uint64_t v17 = v29;
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v29, v16, v1);
      MEMORY[0x21054BA70](v1);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v17, v1);
      uint64_t v18 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1);
        uint64_t v18 = v31;
      }
      unint64_t v20 = *(void *)(v18 + 16);
      unint64_t v19 = *(void *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v18 = v31;
      }
      *(void *)(v18 + 16) = v20 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v18+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v20, v25, v27);
      uint64_t v31 = v18;
      int64_t v21 = specialized _NativeSet.index(after:)(v11, v13, v15 & 1, v9);
      int64_t v11 = v21;
      int v13 = v22;
      char v15 = v23 & 1;
      if (!--v10)
      {
        outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(v21, v22, v23 & 1);
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
}

void AnyCanvas.selectedCanvasElementIds.setter(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v72 = *(void *)(v5 - 8);
  uint64_t v73 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v77 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  uint64_t v8 = *(void *)&v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v8)
  {
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v9 = v8 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  uint64_t v11 = *(void *)v9;
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t v69 = *(void *)(v9 + 16);
  int v70 = *(unsigned __int8 *)(v9 + 24);
  int v12 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v13 = specialized Sequence.compactMap<A>(_:)(a1, v12);
  uint64_t v71 = 0;
  swift_bridgeObjectRelease();
  uint64_t v76 = v12;

  uint64_t v14 = specialized Set.init<A>(_:)(v13, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, MEMORY[0x263F32D58], (void (*)(char *, char *))specialized Set._Variant.insert(_:));
  swift_bridgeObjectRelease();
  char v15 = *(char **)&v3[v7];
  if (!v15)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  uint64_t v75 = v10;
  uint64_t v2 = *(NSObject **)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  uint64_t v16 = *(void *)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
  uint64_t v17 = *(void *)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
  int v18 = v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  unint64_t v19 = v15;
  CanvasElementResizeView.selection.setter(v14, v16, v17, v18);

  uint64_t v78 = v7;
  uint64_t v79 = v3;
  uint64_t v20 = *(void *)&v3[v7];
  if (!v20)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v74 = v11;
  uint64_t v21 = v20 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  uint64_t v23 = *(void *)v21;
  uint64_t v22 = *(void *)(v21 + 8);
  uint64_t v24 = *(void *)(v21 + 16);
  int v25 = *(unsigned __int8 *)(v21 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v26 = specialized static Set.== infix(_:_:)((uint64_t)v2, v23);
  uint64_t v27 = (void *)MEMORY[0x263F8EED0];
  if (v26)
  {
    char v28 = specialized static Set.== infix(_:_:)(v16, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v28)
    {
      if (v18)
      {
        if (v25) {
          goto LABEL_38;
        }
      }
      else
      {
        if (v17 == v24) {
          char v52 = v25;
        }
        else {
          char v52 = 1;
        }
        if ((v52 & 1) == 0) {
          goto LABEL_38;
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for miniMenuLogger != -1) {
    swift_once();
  }
  uint64_t v29 = v73;
  uint64_t v30 = __swift_project_value_buffer(v73, (uint64_t)miniMenuLogger);
  uint64_t v31 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v77, v30, v29);
  uint64_t v2 = v76;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v36 = v78;
  id v35 = v79;
  if (v34)
  {
    unint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v37 = 134217984;
    uint64_t v38 = *(void *)&v35[v36];
    if (!v38)
    {
LABEL_56:

      __break(1u);
      goto LABEL_57;
    }
    id v39 = v37;
    uint64_t v80 = *(void *)(*(void *)(v38 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_20C2D7000, v32, v33, "Changing selection to have %ld elements", v39, 0xCu);
    MEMORY[0x210550270](v39, -1, -1);
  }
  else
  {

    uint64_t v32 = v2;
  }

  uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v77, v29);
  MEMORY[0x270FA5388](v40);
  *(&v68 - 2) = (uint64_t)v2;
  AnyCanvas.updateCanvasState(_:)();
  if (([v2 isFirstResponder] & 1) == 0)
  {
    int64_t v41 = *(void **)&v35[v36];
    if (!v41)
    {
LABEL_57:
      __break(1u);
      return;
    }
    id v42 = v41;
    uint64_t v43 = swift_bridgeObjectRetain();
    unint64_t v44 = specialized Sequence.compactMap<A>(_:)(v43, (uint64_t)v42);

    swift_bridgeObjectRelease();
    if (v44 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v45 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v45)
    {
      uint64_t v46 = v2;
      id v47 = [v46 window];
      if (v47)
      {
        uint64_t v48 = v47;
        uint64_t v49 = objc_msgSend(self, sel_activeToolPickerForWindow_, v47);
        if (v49)
        {
          uint64_t v50 = v49;
          id v51 = [v49 _visibilityUpdatesEnabled];
          [v50 _setVisibilityUpdatesEnabled:0];
          [v46 becomeFirstResponder];
          [v50 _setVisibilityUpdatesEnabled:v51];

          uint64_t v46 = v50;
LABEL_31:

          goto LABEL_32;
        }
      }
      [v46 becomeFirstResponder];
      goto LABEL_31;
    }
  }
LABEL_32:
  uint64_t v53 = *(Class *)((char *)&v2->isa + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
  if (v53)
  {
    id v54 = v53;
    HandwritingReflowView.updateForNewSelection()();
  }
  uint64_t v55 = (*(uint64_t (**)(void))((*v27 & (uint64_t)v2->isa) + 0x3A8))();
  uint64_t v56 = *(void *)&v35[v36];
  if (!v56) {
    goto LABEL_55;
  }
  uint64_t v57 = (void *)(v56 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (!*(void *)(*v57 + 16) && !*(void *)(v57[1] + 16))
  {
    uint64_t v58 = (void *)(*(uint64_t (**)(uint64_t))((*v27 & (uint64_t)v2->isa) + 0x320))(v55);
    objc_msgSend(v58, sel__clearSelectionIfNecessary);
  }
LABEL_38:
  uint64_t v59 = *(void *)&v79[v78];
  if (!v59)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v60 = v59 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  uint64_t v62 = *(void *)v60;
  uint64_t v61 = *(void *)(v60 + 8);
  uint64_t v63 = *(void *)(v60 + 16);
  char v64 = *(unsigned char *)(v60 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Set.== infix(_:_:)(v62, v74) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v66 = swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  char v65 = specialized static Set.== infix(_:_:)(v61, v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v66 = swift_bridgeObjectRelease();
  if ((v65 & 1) == 0)
  {
LABEL_45:
    (*(void (**)(uint64_t))((*v27 & *(void *)v76) + 0x3A8))(v66);
    return;
  }
  if (v64)
  {
    if (v70) {
      return;
    }
    goto LABEL_45;
  }
  char v67 = v70;
  if (v63 != v69) {
    char v67 = 1;
  }
  if (v67) {
    goto LABEL_45;
  }
}

void (*AnyCanvas.selectedCanvasElementIds.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  AnyCanvas.selectedCanvasElementIds.getter();
  *a1 = v3;
  return AnyCanvas.selectedCanvasElementIds.modify;
}

void AnyCanvas.selectedCanvasElementIds.modify(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    AnyCanvas.selectedCanvasElementIds.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    AnyCanvas.selectedCanvasElementIds.setter(*a1);
  }
}

BOOL AnyCanvas.hasSelectedCanvasElements.getter()
{
  AnyCanvas.selectedCanvasElementIds.getter();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRelease();
  return v1 != 0;
}

uint64_t AnyCanvas.addCanvasElement<A>(_:setSelected:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v5)
                                                                                                + 0x490))(a1, a2, 0, 0, a3, a4, a5);
}

uint64_t AnyCanvas.addTextBox(_:frame:setSelected:)(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6)
{
  unsigned int v34 = a2;
  uint64_t v30 = a1;
  uint64_t v10 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v32 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x270FA5388](v15 - 8);
  char v26 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v28);
  uint64_t v27 = (uint64_t)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v29 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  unint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  uint64_t v20 = v26;
  TaggedValue_9.init(_:)();
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, v30, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, v21);
  uint64_t v35 = 0;
  Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v20, &v37, &v36, (uint64_t)v14, &v35, v27, a3, a4, a5, a6, 0.0);
  static CRKeyPath.unique.getter();
  uint64_t v23 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  uint64_t v24 = v28;
  Capsule<>.init(_:id:)();
  (*(void (**)(char *, void, void, void, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x263F8EED0] & *v33)
                                                                                        + 0x490))(v19, v34, 0, 0, v24, v23, &protocol witness table for Shape);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v19, v31);
}

uint64_t AnyCanvas.acceptedDropLayouts.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit9AnyCanvas____lazy_storage___acceptedDropLayouts;
  if (*(void *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas____lazy_storage___acceptedDropLayouts))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas____lazy_storage___acceptedDropLayouts);
  }
  else
  {
    uint64_t v2 = closure #1 in AnyCanvas.acceptedDropLayouts.getter();
    *(void *)(v0 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AnyCanvas.merge<A>(_:from:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v12 = *a2;
  int v8 = v12;
  uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(uint64_t, unsigned __int8 *))((*MEMORY[0x263F8EED0] & *v4) + 0x550))(a1, &v12);
  if (!v8) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))((*v9 & *v4) + 0x548))(a1, a3, a4);
  }
  char v11 = v8;
  return (*(uint64_t (**)(char *))((*v9 & *v4) + 0x530))(&v11);
}

Swift::Void __swiftcall AnyCanvas.forwardChanges(from:)(PaperKit::AnyCanvas::MergeSource from)
{
  switch(*(unsigned char *)from)
  {
    case 2:
      uint64_t v4 = (void *)MEMORY[0x263F8EED0];
      uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x558))();
      (*(void (**)(uint64_t))((*v4 & *v1) + 0x560))(v5);
      break;
    case 3:
      double v6 = MEMORY[0x270FA5388](from);
      (*(void (**)(uint64_t (*)(), double))((*MEMORY[0x263F8EED0] & *v1) + 0x538))(partial apply for closure #1 in AnyCanvas.forwardChanges(from:), v6);
      break;
    case 4:
      uint64_t v7 = (void *)MEMORY[0x263F8EED0];
      uint64_t v8 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x560))();
      (*(void (**)(uint64_t))((*v7 & *v1) + 0x568))(v8);
      break;
    default:
      uint64_t v2 = (void *)MEMORY[0x263F8EED0];
      uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x558))();
      (*(void (**)(uint64_t))((*v2 & *v1) + 0x540))(v3);
      break;
  }
  uint64_t v9 = *(unsigned char **)((char *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v9)
  {
    __break(1u);
    JUMPOUT(0x20C636240);
  }
  uint64_t v10 = MEMORY[0x210550400](&v9[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v10)
  {
    char v11 = (void *)v10;
    if (*(void *)&v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController])
    {
      uint64_t v12 = *(void *)&v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
      uint64_t v13 = *(void *)&v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
      uint64_t v14 = *(void *)&v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
      char v15 = v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
      uint64_t v16 = v9;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      MiniMenuState.update(from:in:)(v12, v13, v14, v15, v11);

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

Swift::Bool __swiftcall AnyCanvas.hit(byTouchLocation:canvasBounds:)(CGPoint byTouchLocation, __C::CGRect canvasBounds)
{
  CGFloat y = byTouchLocation.y;
  CGFloat x = byTouchLocation.x;
  v5.CGFloat x = x;
  v5.CGFloat y = y;
  return CGRectContainsPoint((CGRect)canvasBounds, v5);
}

void *AnyCanvas.height(from:delta:)(void *result)
{
  if (result)
  {
    objc_msgSend(result, sel_bounds);
    CGRectGetHeight(v7);
    uint64_t v2 = (void *)MEMORY[0x263F8EED0];
    uint64_t v3 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x308))();
    if (v3)
    {
      uint64_t v4 = v3;
      objc_msgSend(v3, sel_zoomScale);
    }
    (*(void (**)(void *__return_ptr))((*v2 & *v1) + 0x5D0))(v5);
    return (void *)outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v5, (uint64_t)&v6, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall AnyCanvas.beginLiveResize()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v1) {
    objc_msgSend(v1, sel_setHidden_, 1);
  }
  else {
    __break(1u);
  }
}

Swift::Void __swiftcall AnyCanvas.endLiveResize(discard:)(Swift::Bool discard)
{
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  objc_msgSend(v3, sel_setNeedsLayout);
  uint64_t v4 = *(void **)(v1 + v2);
  if (!v4)
  {
LABEL_7:
    __break(1u);
    return;
  }
  objc_msgSend(v4, sel_setHidden_, 0);
}

double AnyCanvas.drawingTransformOverride.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

uint64_t AnyCanvas.viewControllerForPresentingUI.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_viewControllerForPresentingUI;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

void AnyCanvas.viewControllerForPresentingUI.setter(void *a1)
{
  swift_beginAccess();
  uint64_t v3 = swift_unknownObjectWeakAssign();
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v1) + 0x2F8))(v3);
  uint64_t v6 = v5;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(ObjectType, v6);
}

void (*AnyCanvas.viewControllerForPresentingUI.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_viewControllerForPresentingUI;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x210550400](v5);
  return AnyCanvas.viewControllerForPresentingUI.modify;
}

void AnyCanvas.viewControllerForPresentingUI.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)(*a1 + 24);
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    uint64_t v5 = *(void **)(v3 + 32);
    swift_endAccess();

    uint64_t v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v5) + 0x2F8))();
    uint64_t v8 = v7;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v8 + 24))(ObjectType, v8);
  }
  free((void *)v3);
}

double AnyCanvas.scaleFactorForNewElements.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x278))();
  if ((v2 & 1) != 0
    || (double v3 = *(double *)&v1, (v4 = objc_msgSend(v0, sel_window)) == 0))
  {
    objc_msgSend(v0, sel_bounds);
    double v12 = v11;
    objc_msgSend(v0, sel_bounds);
    if (v13 < v12) {
      double v12 = v13;
    }
    if (one-time initialization token for maxCanvasSizeBeforeScalingNewElements != -1) {
      swift_once();
    }
    double v10 = v12 / *(double *)&static UIConstants.maxCanvasSizeBeforeScalingNewElements;
    if (*(double *)&static UIConstants.maxCanvasSizeBeforeScalingNewElements >= v12) {
      double v10 = 1.0;
    }
  }
  else
  {
    uint64_t v5 = v4;
    double v6 = v3;
    id v7 = objc_msgSend(v4, sel_screen);

    objc_msgSend(v7, sel_scale);
    double v9 = v8;

    double v10 = v9 / v6;
  }
  double v14 = v10 * 10.0;
  double v15 = floor(v14);
  double v16 = v14 - v15;
  double v17 = ceil(v14);
  if (v16 < 0.49) {
    double v17 = v15;
  }
  return fmax(v17 / 10.0, 0.1);
}

UIContextMenuConfiguration_optional __swiftcall AnyCanvas.customContextMenuInteraction(canvasElementViews:suggestedActions:)(Swift::OpaquePointer canvasElementViews, Swift::OpaquePointer suggestedActions)
{
  uint64_t v3 = v2;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v6 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  double v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
  swift_beginAccess();
  uint64_t v10 = MEMORY[0x210550400](v9);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)(v9 + 8);
    if ((unint64_t)canvasElementViews._rawValue >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)(((unint64_t)canvasElementViews._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v14 = MEMORY[0x263F8EE78];
    if (v13)
    {
      aBlock[0] = MEMORY[0x263F8EE78];
      double v15 = (objc_class *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13 & ~(v13 >> 63), 0);
      if (v13 < 0)
      {
        __break(1u);
        goto LABEL_19;
      }
      Swift::Int rawValue = suggestedActions._rawValue;
      uint64_t v34 = v13;
      uint64_t v30 = v12;
      uint64_t v31 = v11;
      uint64_t v32 = v2;
      uint64_t v17 = 0;
      uint64_t v14 = aBlock[0];
      unint64_t v18 = (unint64_t)canvasElementViews._rawValue & 0xC000000000000001;
      unint64_t v19 = canvasElementViews._rawValue;
      do
      {
        if (v18) {
          uint64_t v20 = (void *)MEMORY[0x21054E050](v17, canvasElementViews._rawValue);
        }
        else {
          uint64_t v20 = *((id *)canvasElementViews._rawValue + v17 + 4);
        }
        uint64_t v21 = v20;
        (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v20) + 0xE8))();

        aBlock[0] = v14;
        unint64_t v23 = *(void *)(v14 + 16);
        unint64_t v22 = *(void *)(v14 + 24);
        if (v23 >= v22 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
          uint64_t v14 = aBlock[0];
        }
        ++v17;
        *(void *)(v14 + 16) = v23 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v14+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v23, v8, v35);
        canvasElementViews._Swift::Int rawValue = v19;
      }
      while (v34 != v17);
      uint64_t v3 = v32;
      suggestedActions._Swift::Int rawValue = rawValue;
      uint64_t v12 = v30;
    }
    uint64_t ObjectType = swift_getObjectType();
    int v25 = (objc_class *)(*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v12 + 32))(v3, v14, suggestedActions._rawValue, ObjectType, v12);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v26 = (Swift::OpaquePointer *)swift_allocObject();
    v26[2]._Swift::Int rawValue = suggestedActions._rawValue;
    uint64_t v27 = self;
    aBlock[4] = partial apply for closure #1 in PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:);
    aBlock[5] = v26;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
    aBlock[3] = &block_descriptor_51;
    uint64_t v28 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    int v25 = (objc_class *)objc_msgSend(v27, sel_configurationWithIdentifier_previewProvider_actionProvider_, 0, 0, v28);
    swift_release();
    _Block_release(v28);
  }
  double v15 = v25;
LABEL_19:
  result.value.super.isa = v15;
  result.is_nil = v16;
  return result;
}

uint64_t AnyCanvas.viewControllerForPresenting.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x620))();
}

uint64_t AnyCanvas.viewControllerForPresenting.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x628))();
}

void (*AnyCanvas.viewControllerForPresenting.modify(void *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  *a1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x620))();
  return AnyCanvas.viewControllerForPresenting.modify;
}

void AnyCanvas.viewControllerForPresenting.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void (**)(void *))((*MEMORY[0x263F8EED0] & **(void **)(a1 + 8)) + 0x628);
  if (a2)
  {
    id v4 = v2;
    v3(v2);
  }
  else
  {
    v3(*(void **)a1);
  }
}

uint64_t AnyCanvas.calculateDocumentForGraphing.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x738))();
}

uint64_t AnyCanvas.magicGenerativePlaygroundTokenProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return AnyCanvas.magicGenerativePlaygroundTokenProvider.getter(&OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?, a1);
}

uint64_t AnyCanvas.magicGenerativePlaygroundTokenProvider.setter(uint64_t a1)
{
  return AnyCanvas.magicGenerativePlaygroundTokenProvider.setter(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
}

uint64_t (*AnyCanvas.magicGenerativePlaygroundTokenProvider.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t AnyCanvas.magicGenerativePlaygroundContainerStateObserver.getter@<X0>(uint64_t a1@<X8>)
{
  return AnyCanvas.magicGenerativePlaygroundTokenProvider.getter(&OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundContainerStateObserver, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundContainerStateObserver?, a1);
}

uint64_t AnyCanvas.magicGenerativePlaygroundTokenProvider.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  swift_beginAccess();
  return outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v6, a3, a2);
}

uint64_t AnyCanvas.magicGenerativePlaygroundContainerStateObserver.setter(uint64_t a1)
{
  return AnyCanvas.magicGenerativePlaygroundTokenProvider.setter(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundContainerStateObserver, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundContainerStateObserver?);
}

uint64_t AnyCanvas.magicGenerativePlaygroundTokenProvider.setter(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = v3 + *a2;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v6, a3);
  return swift_endAccess();
}

uint64_t (*AnyCanvas.magicGenerativePlaygroundContainerStateObserver.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

void static CanvasEditingMode.default.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

BOOL static CanvasEditingMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  double v8 = (char *)&v25 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v25 - v10;
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v13 = 0;
  uint64_t v29 = a1;
  uint64_t v30 = result;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v15 = a1 + 64;
  uint64_t v14 = v16;
  uint64_t v17 = 1 << *(unsigned char *)(v15 - 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v14;
  uint64_t v26 = v15;
  int64_t v27 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v28 = v3 + 16;
  while (1)
  {
    if (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_5;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v13);
      if (!v23)
      {
        int64_t v13 = v22 + 2;
        if (v22 + 2 >= v27) {
          goto LABEL_23;
        }
        unint64_t v23 = *(void *)(v26 + 8 * v13);
        if (!v23)
        {
          int64_t v13 = v22 + 3;
          if (v22 + 3 >= v27) {
            goto LABEL_23;
          }
          unint64_t v23 = *(void *)(v26 + 8 * v13);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v19 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v11, *(void *)(v29 + 48) + *(void *)(v3 + 72) * v21, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v11, v2);
    specialized Set._Variant.insert(_:)((uint64_t)v8, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v27)
  {
LABEL_23:
    swift_release();
    return v30;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  double v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  return specialized Set.init<A>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, MEMORY[0x263F32D58], (void (*)(char *, char *))specialized Set._Variant.insert(_:));
}

{
  uint64_t v2;
  uint64_t result;
  void **v4;
  void *v5;
  id v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type Color and conformance Color();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type ResizeHandleType and conformance ResizeHandleType();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v2 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  double v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    int64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v5, v14, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v8, v5);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

{
  return specialized Set.init<A>(_:)(a1, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, MEMORY[0x263F330C0], (void (*)(char *, char *))specialized Set._Variant.insert(_:));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(uint64_t, uint64_t);
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  void v21[2];
  void (**v22)(char *, char *, uint64_t);
  uint64_t v23;
  unsigned int (**v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v28 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  int64_t v27 = (char *)v21 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    int64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = v11 + 40;
    int64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    uint64_t v25 = v12;
    int64_t v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    unint64_t v23 = v14;
    uint64_t v26 = v11;
    uint64_t v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    uint64_t v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      specialized Set._Variant.insert(_:)(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  double v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v45 = (char *)&v34 - v10;
  uint64_t result = MEMORY[0x270FA5388](v9);
  int64_t v13 = (char *)&v34 - v12;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v14 = 0;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v38 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v42 = v5 + 32;
  uint64_t v43 = a2 + 56;
  uint64_t v44 = v5 + 16;
  unint64_t v19 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v34 = v13;
  uint64_t v35 = v5;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v40 = (v18 - 1) & v18;
  int64_t v41 = v14;
  for (unint64_t i = __clz(__rbit64(v18)) | (v14 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    uint64_t v25 = *(void *)(v5 + 72);
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v26(v13, *(void *)(a1 + 48) + v25 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v45, v13, v4);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    uint64_t v27 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v29 = v27 & ~v28;
    if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*v19)(v45, v4);
      return 0;
    }
    uint64_t v39 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v30 = a2;
    uint64_t v31 = ~v28;
    while (1)
    {
      v26(v8, *(void *)(v30 + 48) + v29 * v25, v4);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      os_log_type_t v33 = *v19;
      (*v19)(v8, v4);
      if (v32) {
        break;
      }
      unint64_t v29 = (v29 + 1) & v31;
      if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v33(v45, v4);
        return 0;
      }
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v45, v4);
    a2 = v30;
    uint64_t v5 = v35;
    a1 = v36;
    int64_t v13 = v34;
    unint64_t v18 = v40;
    int64_t v14 = v41;
    if (v40) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v21 >= v38) {
      return 1;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v21);
    int64_t v23 = v14 + 1;
    if (!v22)
    {
      int64_t v23 = v14 + 2;
      if (v14 + 2 >= v38) {
        return 1;
      }
      unint64_t v22 = *(void *)(v37 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v14 + 3;
        if (v14 + 3 >= v38) {
          return 1;
        }
        unint64_t v22 = *(void *)(v37 + 8 * v23);
        if (!v22)
        {
          int64_t v23 = v14 + 4;
          if (v14 + 4 >= v38) {
            return 1;
          }
          unint64_t v22 = *(void *)(v37 + 8 * v23);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v40 = (v22 - 1) & v22;
    int64_t v41 = v23;
  }
  uint64_t v24 = v14 + 5;
  if (v14 + 5 >= v38) {
    return 1;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v14 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v38) {
      return 1;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_24;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (**v19)(char *, uint64_t);
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  double v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v45 = (char *)&v34 - v10;
  uint64_t result = MEMORY[0x270FA5388](v9);
  int64_t v13 = (char *)&v34 - v12;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v14 = 0;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v38 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v42 = v5 + 32;
  uint64_t v43 = a2 + 56;
  uint64_t v44 = v5 + 16;
  unint64_t v19 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v34 = v13;
  uint64_t v35 = v5;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v40 = (v18 - 1) & v18;
  int64_t v41 = v14;
  for (unint64_t i = __clz(__rbit64(v18)) | (v14 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    uint64_t v25 = *(void *)(v5 + 72);
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v26(v13, *(void *)(a1 + 48) + v25 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v45, v13, v4);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
    uint64_t v27 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v29 = v27 & ~v28;
    if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*v19)(v45, v4);
      return 0;
    }
    uint64_t v39 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v30 = a2;
    uint64_t v31 = ~v28;
    while (1)
    {
      v26(v8, *(void *)(v30 + 48) + v29 * v25, v4);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      os_log_type_t v33 = *v19;
      (*v19)(v8, v4);
      if (v32) {
        break;
      }
      unint64_t v29 = (v29 + 1) & v31;
      if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v33(v45, v4);
        return 0;
      }
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v45, v4);
    a2 = v30;
    uint64_t v5 = v35;
    a1 = v36;
    int64_t v13 = v34;
    unint64_t v18 = v40;
    int64_t v14 = v41;
    if (v40) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v21 >= v38) {
      return 1;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v21);
    int64_t v23 = v14 + 1;
    if (!v22)
    {
      int64_t v23 = v14 + 2;
      if (v14 + 2 >= v38) {
        return 1;
      }
      unint64_t v22 = *(void *)(v37 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v14 + 3;
        if (v14 + 3 >= v38) {
          return 1;
        }
        unint64_t v22 = *(void *)(v37 + 8 * v23);
        if (!v22)
        {
          int64_t v23 = v14 + 4;
          if (v14 + 4 >= v38) {
            return 1;
          }
          unint64_t v22 = *(void *)(v37 + 8 * v23);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v40 = (v22 - 1) & v22;
    int64_t v41 = v23;
  }
  uint64_t v24 = v14 + 5;
  if (v14 + 5 >= v38) {
    return 1;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v14 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v38) {
      return 1;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_24;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v3 + 4;
          if (v3 + 4 >= v30) {
            return 1;
          }
          unint64_t v11 = *(void *)(v29 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    uint64_t v14 = result;
    uint64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    unint64_t v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 5;
  if (v3 + 5 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_25;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

double static AnyCanvas.strokeBounds<A, B>(_:in:)()
{
  type metadata accessor for CGRect(0);
  Sequence.reduce<A>(_:_:)();
  return v1;
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance Canvas<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.setter in conformance Canvas<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitAttachment.textualContextProvider.modify in conformance Canvas<A>(void *a1))()
{
  int64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider;
  v3[5] = *v1;
  v3[6] = v5;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x210550400](v6);
  uint64_t v8 = *(void *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return SynapseLinkItem.delegate.modify;
}

uint64_t protocol witness for PaperKitAttachment.viewControllerForPresentingUI.getter in conformance Canvas<A>()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v0) + 0x620))();
}

uint64_t protocol witness for PaperKitAttachment.viewControllerForPresentingUI.setter in conformance Canvas<A>()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v0) + 0x628))();
}

uint64_t (*protocol witness for PaperKitAttachment.viewControllerForPresentingUI.modify in conformance Canvas<A>(void *a1))()
{
  int64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v1) + 0x630))();
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.getter in conformance Canvas<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource);
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.setter in conformance Canvas<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource;
  swift_beginAccess();
  *(void *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign();
  objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance Canvas<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnyCanvas.participantDetailsDataSource.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

id protocol witness for PaperKitStreamableAttachment.participantDetailsDidChange() in conformance Canvas<A>()
{
  return objc_msgSend(*(id *)(*v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
}

uint64_t protocol witness for PaperKitStreamableAttachment.showParticipantCursors.getter in conformance Canvas<A>()
{
  double v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

id protocol witness for PaperKitStreamableAttachment.showParticipantCursors.setter in conformance Canvas<A>(char a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (unsigned char *)(*v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors);
  swift_beginAccess();
  *uint64_t v4 = a1;
  return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
}

id (*protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance Canvas<A>(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = *v1;
  swift_beginAccess();
  return AnyCanvas.showParticipantCursors.modify;
}

uint64_t protocol witness for LiveEditable.isCurrentlyLiveEditing.getter in conformance AnyCanvas()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_isCurrentlyLiveEditing);
}

uint64_t (*protocol witness for LiveEditable.liveEditingContinuations.modify in conformance AnyCanvas())()
{
  return CanvasElementRenderer.tintColor.modify;
}

void CanvasEditingMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

double @objc UIViewController.visibleBoundsForOverlay.getter(void *a1)
{
  id v1 = a1;
  id v2 = objc_msgSend(v1, sel_viewForOverlay);
  objc_msgSend(v2, sel_bounds);
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;

  id v11 = objc_msgSend(v1, sel_viewForOverlay);
  objc_msgSend(v11, sel_safeAreaInsets);
  double v13 = v12;
  double v15 = v14;

  return UIEdgeInsetsInsetRect(v4, v6, v8, v10, v13, v15);
}

double UIViewController.visibleBoundsForOverlay.getter()
{
  id v1 = objc_msgSend(v0, sel_viewForOverlay);
  objc_msgSend(v1, sel_bounds);
  double v3 = v2;
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;

  id v10 = objc_msgSend(v0, sel_viewForOverlay);
  objc_msgSend(v10, sel_safeAreaInsets);
  double v12 = v11;
  double v14 = v13;

  return UIEdgeInsetsInsetRect(v3, v5, v7, v9, v12, v14);
}

id @objc UIViewController.viewForOverlay.getter(void *a1)
{
  id v1 = a1;
  id result = objc_msgSend(v1, sel_view);
  if (result)
  {
    double v3 = result;

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id UIViewController.viewForOverlay.getter()
{
  id result = objc_msgSend(v0, sel_view);
  if (!result) {
    __break(1u);
  }
  return result;
}

void key path setter for AnyCanvas.overlayViewControllerForPresentingUI : AnyCanvas(void **a1, void *a2)
{
  double v2 = *a1;
  double v3 = (void **)(*a2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI);
  swift_beginAccess();
  double v4 = *v3;
  *double v3 = v2;
  id v5 = v2;
}

id key path setter for AnyCanvas.participantDetailsDataSource : AnyCanvas(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource;
  swift_beginAccess();
  *(void *)(v4 + 8) = v2;
  swift_unknownObjectWeakAssign();
  return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
}

void key path setter for AnyCanvas.wantsDataDetection : AnyCanvas(unsigned __int8 *a1, void **a2, uint64_t a3, uint64_t a4, void *a5, SEL *a6)
{
  unsigned __int8 v7 = *a1;
  double v8 = *a2;
  double v9 = (unsigned __int8 *)*a2 + *a5;
  uint64_t v10 = swift_beginAccess();
  *double v9 = v7;
  double v11 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v8) + 0x2F8))(v10);
  uint64_t v13 = v12;
  uint64_t ObjectType = swift_getObjectType();
  double v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(ObjectType, v13);

  if (v15)
  {
    objc_msgSend(v15, *a6, *v9);
  }
}

uint64_t AnyCanvas.screenScaleOverride.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_screenScaleOverride;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t AnyCanvas.screenScaleOverride.setter(uint64_t a1, char a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_screenScaleOverride;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = a2 & 1;
  return result;
}

uint64_t (*AnyCanvas.screenScaleOverride.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t AnyCanvas.editingMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t AnyCanvas.editingMode.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = v2;
  return result;
}

uint64_t (*AnyCanvas.editingMode.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

void AnyCanvas.editingView.getter()
{
}

void AnyCanvas.editingContainerElementId.getter()
{
}

void AnyCanvas.scrollView.getter()
{
}

void AnyCanvas.tiledView.getter()
{
}

void AnyCanvas.overlayBounds.getter()
{
}

void AnyCanvas.visibleBounds.getter()
{
}

void AnyCanvas.visibleBoundsInModelSpace.getter()
{
}

Swift::Void __swiftcall AnyCanvas.canvasSelectionDidChange()()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = *((void *)v1 + 1);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t))(v3 + 8))(v0, ObjectType, v3);
    uint64_t v2 = swift_unknownObjectRelease();
  }
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v0) + 0x680))(v2);
}

uint64_t closure #1 in AnyCanvas.selection.modify(void *a1, uint64_t a2)
{
  AnyCanvas.selectedCanvasElementIds.getter();
  uint64_t v5 = v4;
  static Date.timeIntervalSinceReferenceDate.getter();
  *a1 = v6;
  uint64_t result = swift_bridgeObjectRelease();
  a1[3] = v5;
  if (*(void *)(a2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView))
  {
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = specialized Sequence.compactMap<A>(_:)(v8);
    swift_bridgeObjectRelease();
    static Date.timeIntervalSinceReferenceDate.getter();
    *a1 = v10;
    uint64_t result = swift_bridgeObjectRelease();
    a1[4] = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in AnyCanvas.updateCanvasState(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v19 = a5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *a2) + 0x3E0))(v10);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  swift_bridgeObjectRetain();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_2(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  double v14 = (void (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  double v15 = (void (*)(unsigned char *, void))CRDictionary.subscript.modify();
  v19(v16);
  v15(v20, 0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v14(v21, 0);
  return swift_release();
}

double AnyCanvas.strokeBounds<A>(_:)()
{
  return *MEMORY[0x263F001A0];
}

void closure #1 in static AnyCanvas.strokeBounds<A, B>(_:in:)(CGFloat *a1@<X0>, void *a2@<X2>, CGFloat *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGFloat x = *a1;
  CGFloat y = a1[1];
  CGFloat width = a1[2];
  CGFloat height = a1[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  WeakRef.subscript.getter();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, v13) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  }
  else
  {
    uint64_t v15 = type metadata accessor for Capsule();
    uint64_t WitnessTable = swift_getWitnessTable();
    double v17 = specialized CRRegister<>.bounds(in:)(a2, (uint64_t)v8, v15, WitnessTable);
    CGFloat v19 = v18;
    CGFloat v21 = v20;
    CGFloat v23 = v22;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v13);
    v25.origin.CGFloat x = x;
    v25.origin.CGFloat y = y;
    v25.size.CGFloat width = width;
    v25.size.CGFloat height = height;
    v27.origin.CGFloat x = v17;
    v27.origin.CGFloat y = v19;
    v27.size.CGFloat width = v21;
    v27.size.CGFloat height = v23;
    CGRect v26 = CGRectUnion(v25, v27);
    CGFloat x = v26.origin.x;
    CGFloat y = v26.origin.y;
    CGFloat width = v26.size.width;
    CGFloat height = v26.size.height;
  }
  *a3 = x;
  a3[1] = y;
  a3[2] = width;
  a3[3] = height;
}

uint64_t AnyCanvas.canvasDescription.setter()
{
  return swift_bridgeObjectRelease();
}

void AnyCanvas.formattingState(for:)()
{
}

uint64_t AnyCanvas.duplicate(members:)()
{
  return MEMORY[0x263F8EE88];
}

uint64_t closure #1 in AnyCanvas.acceptedDropLayouts.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Layout.Type>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_20C8387B0;
  *(void *)(v0 + 32) = type metadata accessor for PaperLayout();
  *(void *)(v0 + 40) = &protocol witness table for PaperLayout;
  *(void *)(v0 + 48) = type metadata accessor for ImageLayout();
  *(void *)(v0 + 56) = &protocol witness table for ImageLayout;
  *(void *)(v0 + 64) = type metadata accessor for LinkLayout();
  *(void *)(v0 + 72) = &protocol witness table for LinkLayout;
  *(void *)(v0 + 80) = type metadata accessor for TextBoxLayout();
  *(void *)(v0 + 88) = &protocol witness table for TextBoxLayout;
  *(void *)(v0 + 96) = type metadata accessor for GraphLayout();
  *(void *)(v0 + 104) = &protocol witness table for GraphLayout;
  return v0;
}

uint64_t closure #1 in AnyCanvas.forwardChanges(from:)(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0x558))();
  uint64_t v4 = (*(uint64_t (**)(uint64_t))((*v2 & *a1) + 0x560))(v3);
  return (*(uint64_t (**)(uint64_t))((*v2 & *a1) + 0x568))(v4);
}

uint64_t AnyCanvas.createElementAndStrokeImages(elementMembers:strokeMembers:)()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](AnyCanvas.createElementAndStrokeImages(elementMembers:strokeMembers:), v2, v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void, void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void, void))(v0 + 8);
  return v1(0, 0);
}

void AnyCanvas.createNewPaper(from:)()
{
}

double AnyCanvas.suggestedPositionForNewCanvasElement(withSize:)()
{
  return 0.0;
}

uint64_t AnyCanvas.canvasCalculateDocument.getter()
{
  return 0;
}

uint64_t AnyCanvas.imageElementFor(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t AnyCanvas.encodedRecipeFor(_:)()
{
  return 0;
}

uint64_t key path setter for AnyCanvas.magicGenerativePlaygroundTokenProvider : AnyCanvas(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v11, a5);
  uint64_t v9 = *a2 + *a6;
  swift_beginAccess();
  outlined assign with take of Date?((uint64_t)v11, v9, a5);
  return swift_endAccess();
}

id AnyCanvas.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnyCanvas();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for PageOverlayView.nonDrawingToolMode.setter in conformance PaperDocumentPageView<A>(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_nonDrawingToolMode) = result;
  return result;
}

uint64_t protocol witness for PageOverlayView.textualContextProvider.setter in conformance PaperDocumentPageView<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void protocol witness for PageOverlayView.viewControllerForPresentingUI.setter in conformance PaperDocumentPageView<A>(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  id v2 = Canvas.editingView.getter();
  uint64_t v4 = v3;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(ObjectType, v4);
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized Set.subscript.getter@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (result < 0 || (uint64_t v4 = result, 1 << *(unsigned char *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a3 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a3 + 36) != a2)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(a3 + 48);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v6 + *(void *)(v8 + 72) * v4;
  return v9(a4, v10, v7);
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t vars8;

  if (result < 0 || (uint64_t v4 = result, 1 << *(unsigned char *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a3 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a3 + 36) != a2)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(a3 + 48);
  uint64_t v7 = type metadata accessor for CRAsset();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v6 + *(void *)(v8 + 72) * v4;
  return v9(a4, v10, v7);
}

uint64_t specialized Set.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(unsigned __int8 *)(*(void *)(a4 + 48) + result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Set.subscript.getter@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  if (result < 0 || 1 << *(unsigned char *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a3 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    uint64_t v4 = *(void **)(*(void *)(a3 + 48) + 8 * result);
    *a4 = v4;
    return (uint64_t)v4;
  }
LABEL_8:
  __break(1u);
  return result;
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for UIColor);
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v7 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        uint64_t v8 = a4;
      }
      else {
        uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      MEMORY[0x21054DF50](a1, a2, v8);
      type metadata accessor for NSObject(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
LABEL_27:
    __break(1u);
    return;
  }
  if (a3) {
    goto LABEL_13;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_13:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  __CocoaSet.Index.element.getter();
  type metadata accessor for NSObject(0, a5);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  a5 = v18;
  swift_unknownObjectRelease();
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v7 = v9 & ~v10;
  if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_26:

    __break(1u);
    goto LABEL_27;
  }
  id v11 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
  char v12 = static NSObject.== infix(_:_:)();

  if ((v12 & 1) == 0)
  {
    uint64_t v13 = ~v10;
    do
    {
      unint64_t v7 = (v7 + 1) & v13;
      if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        goto LABEL_26;
      }
      id v14 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
      char v15 = static NSObject.== infix(_:_:)();
    }
    while ((v15 & 1) == 0);
  }

LABEL_20:
  uint64_t v16 = *(void **)(*(void *)(a4 + 48) + 8 * v7);
  id v17 = v16;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  char v52 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v8 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v50 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  id v54 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v49 = (char *)v43 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v48 = (char *)v43 - v16;
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17) {
    return MEMORY[0x263F8EE78];
  }
  v43[1] = v2;
  uint64_t v18 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  CGFloat v19 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a2) + 0x2F8);
  uint64_t v60 = (*MEMORY[0x263F8EED0] & *a2) + 760;
  uint64_t v55 = *(void *)(v6 + 72);
  uint64_t v44 = (void (**)(char *, uint64_t))(v8 + 8);
  double v20 = v19;
  uint64_t v53 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  v43[0] = a1;
  uint64_t v21 = swift_bridgeObjectRetain();
  unint64_t v22 = MEMORY[0x263F8EE78];
  uint64_t v46 = v11;
  id v47 = a2;
  uint64_t v45 = v20;
  do
  {
    CGFloat v23 = (void *)v20(v21);
    uint64_t v25 = v24;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 32))(ObjectType, v25);

    if (*(void *)(v27 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v18), (v29 & 1) != 0))
    {
      int64_t v30 = *(id *)(*(void *)(v27 + 56) + 8 * v28);
      uint64_t v31 = swift_bridgeObjectRelease();
      char v32 = v50;
      (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v30) + 0xE8))(v31);
      uint64_t v33 = v10;
      uint64_t v34 = v51;
      SharedTagged_9.tag.getter();
      uint64_t v56 = v58;
      char v57 = v59;
      MEMORY[0x21054BDF0](v34);
      lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
      uint64_t v35 = v49;
      WeakTagged_9.init(_:id:)();
      uint64_t v36 = v34;
      uint64_t v10 = v33;
      (*v44)(v32, v36);

      uint64_t v37 = *v53;
      int64_t v38 = v48;
      (*v53)(v48, v35, v33);
      v37(v54, v38, v33);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1, v22);
      }
      unint64_t v40 = *(void *)(v22 + 16);
      unint64_t v39 = *(void *)(v22 + 24);
      double v20 = v45;
      uint64_t v41 = v46;
      if (v40 >= v39 >> 1) {
        unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, v22);
      }
      *(void *)(v22 + 16) = v40 + 1;
      uint64_t v21 = ((uint64_t (*)(unint64_t, char *, uint64_t))v37)(v22+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v40, v54, v10);
    }
    else
    {
      uint64_t v21 = swift_bridgeObjectRelease();
    }
    v18 += v55;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t type metadata accessor for AnyCanvas()
{
  uint64_t result = type metadata singleton initialization cache for AnyCanvas;
  if (!type metadata singleton initialization cache for AnyCanvas) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CanvasEditingMode and conformance CanvasEditingMode()
{
  unint64_t result = lazy protocol witness table cache variable for type CanvasEditingMode and conformance CanvasEditingMode;
  if (!lazy protocol witness table cache variable for type CanvasEditingMode and conformance CanvasEditingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasEditingMode and conformance CanvasEditingMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyCanvas.MergeSource and conformance AnyCanvas.MergeSource()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyCanvas.MergeSource and conformance AnyCanvas.MergeSource;
  if (!lazy protocol witness table cache variable for type AnyCanvas.MergeSource and conformance AnyCanvas.MergeSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyCanvas.MergeSource and conformance AnyCanvas.MergeSource);
  }
  return result;
}

uint64_t sub_20C63B5BC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate, a2);
}

uint64_t sub_20C63B5C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate);
}

id sub_20C63B5D4@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  uint64_t v3 = (void **)(*a1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t sub_20C63B63C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource, a2);
}

uint64_t sub_20C63B64C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors, a2);
}

id sub_20C63B658(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = (unsigned char *)(*a2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors);
  swift_beginAccess();
  *uint64_t v4 = v2;
  return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
}

uint64_t sub_20C63B6C8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_wantsDataDetection, a2);
}

void sub_20C63B6D4(unsigned __int8 *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_20C63B6FC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_isSharedViaICloud, a2);
}

void sub_20C63B708(unsigned __int8 *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_20C63B730@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider, a2);
}

uint64_t sub_20C63B73C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider);
}

uint64_t keypath_setTm_0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *a2 + *a5;
  swift_beginAccess();
  *(void *)(v6 + 8) = v5;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_20C63B7A8@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x278))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_20C63B814(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x263F8EED0] & **a2) + 0x280))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_20C63B880@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings, a2);
}

void sub_20C63B88C(unsigned __int8 *a1)
{
}

void *sub_20C63B8B4@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))((*MEMORY[0x263F8EED0] & **a1) + 0x2C8))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_20C63B928(char *a1, void **a2)
{
  char v2 = *a2;
  char v4 = *a1;
  return (*(uint64_t (**)(char *))((*MEMORY[0x263F8EED0] & *v2) + 0x2D0))(&v4);
}

void sub_20C63B998(void *a1@<X8>)
{
  AnyCanvas.selectedCanvasElementIds.getter();
  *a1 = v2;
}

void sub_20C63B9C4()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  AnyCanvas.selectedCanvasElementIds.setter(v0);
}

uint64_t sub_20C63B9F0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x620))();
  *a2 = result;
  return result;
}

uint64_t sub_20C63BA54(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & **a2) + 0x628);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_20C63BAC4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x620))();
  *a2 = result;
  return result;
}

uint64_t sub_20C63BB28(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & **a2) + 0x628);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_20C63BB98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_29Tm_0(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?, a2);
}

uint64_t sub_20C63BBAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AnyCanvas.magicGenerativePlaygroundTokenProvider : AnyCanvas(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider);
}

uint64_t sub_20C63BBD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_29Tm_0(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundContainerStateObserver, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundContainerStateObserver?, a2);
}

uint64_t keypath_get_29Tm_0@<X0>(void *a1@<X0>, void *a2@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a1 + *a2;
  swift_beginAccess();
  return outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v6, a4, a3);
}

uint64_t sub_20C63BC4C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AnyCanvas.magicGenerativePlaygroundTokenProvider : AnyCanvas(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundContainerStateObserver?, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundContainerStateObserver);
}

ValueMetadata *type metadata accessor for CanvasEditingMode()
{
  return &type metadata for CanvasEditingMode;
}

uint64_t ObjC metadata update function for AnyCanvas()
{
  return type metadata accessor for AnyCanvas();
}

void type metadata completion function for AnyCanvas()
{
  type metadata accessor for Capsule<CanvasState>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for AnyCanvas(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyCanvas);
}

uint64_t dispatch thunk of AnyCanvas.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of AnyCanvas.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of AnyCanvas.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of AnyCanvas.movableOverlayViews.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of AnyCanvas.overlayViewControllerForPresentingUI.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of AnyCanvas.overlayViewControllerForPresentingUI.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of AnyCanvas.overlayViewControllerForPresentingUI.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of AnyCanvas.participantDetailsDataSource.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of AnyCanvas.participantDetailsDataSource.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of AnyCanvas.participantDetailsDataSource.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of AnyCanvas.participantDetailsDidChange()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of AnyCanvas.showParticipantCursors.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of AnyCanvas.showParticipantCursors.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of AnyCanvas.showParticipantCursors.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x228))();
}

uint64_t dispatch thunk of AnyCanvas.wantsDataDetection.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of AnyCanvas.wantsDataDetection.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x238))();
}

uint64_t dispatch thunk of AnyCanvas.wantsDataDetection.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x240))();
}

uint64_t dispatch thunk of AnyCanvas.isSharedViaICloud.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of AnyCanvas.isSharedViaICloud.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x250))();
}

uint64_t dispatch thunk of AnyCanvas.isSharedViaICloud.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x258))();
}

uint64_t dispatch thunk of AnyCanvas.textualContextProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x260))();
}

uint64_t dispatch thunk of AnyCanvas.textualContextProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x268))();
}

uint64_t dispatch thunk of AnyCanvas.textualContextProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x270))();
}

uint64_t dispatch thunk of AnyCanvas.screenScaleOverride.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x278))();
}

uint64_t dispatch thunk of AnyCanvas.screenScaleOverride.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x263F8EED0] & *v2) + 0x280))(a1, a2 & 1);
}

uint64_t dispatch thunk of AnyCanvas.screenScaleOverride.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x288))();
}

uint64_t dispatch thunk of AnyCanvas.liveStreamDrawings.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of AnyCanvas.liveStreamDrawings.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of AnyCanvas.liveStreamDrawings.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of AnyCanvas.editingMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of AnyCanvas.editingMode.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of AnyCanvas.editingMode.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of AnyCanvas.editingContainerElementId.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x300))();
}

uint64_t dispatch thunk of AnyCanvas.overlayBounds.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x340))();
}

uint64_t dispatch thunk of AnyCanvas.visibleBounds.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x348))();
}

uint64_t dispatch thunk of AnyCanvas.visibleBoundsInModelSpace.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x350))();
}

uint64_t dispatch thunk of AnyCanvas.selectedCanvasElementIds.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of AnyCanvas.selectedCanvasElementIds.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of AnyCanvas.selectedCanvasElementIds.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of AnyCanvas.hasSelectedCanvasElements.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x400))();
}

uint64_t dispatch thunk of AnyCanvas.isStandInCanvas.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x408))();
}

uint64_t dispatch thunk of AnyCanvas.addCanvasElement<A>(_:setSelected:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x488))();
}

uint64_t dispatch thunk of AnyCanvas.addTextBox(_:frame:setSelected:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x498))();
}

uint64_t dispatch thunk of AnyCanvas.merge<A>(_:from:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x528))();
}

uint64_t dispatch thunk of AnyCanvas.viewControllerForPresentingUI.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x620))();
}

uint64_t dispatch thunk of AnyCanvas.viewControllerForPresentingUI.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x628))();
}

uint64_t dispatch thunk of AnyCanvas.viewControllerForPresentingUI.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x630))();
}

uint64_t dispatch thunk of AnyCanvas.viewControllerForPresenting.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x6F8))();
}

uint64_t dispatch thunk of AnyCanvas.viewControllerForPresenting.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x700))();
}

uint64_t dispatch thunk of AnyCanvas.viewControllerForPresenting.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x708))();
}

uint64_t dispatch thunk of AnyCanvas.magicGenerativePlaygroundTokenProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x778))();
}

uint64_t dispatch thunk of AnyCanvas.magicGenerativePlaygroundTokenProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x780))();
}

uint64_t dispatch thunk of AnyCanvas.magicGenerativePlaygroundTokenProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x788))();
}

uint64_t dispatch thunk of AnyCanvas.initiateMagicGenerativePlayground(context:in:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x790))();
}

uint64_t dispatch thunk of AnyCanvas.imageElementFor(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x798))();
}

uint64_t dispatch thunk of AnyCanvas.encodedRecipeFor(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x7A0))();
}

uint64_t dispatch thunk of AnyCanvas.prepareForInitiateMagicGenerativePlaygroundFromMenu(context:in:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x7A8))();
}

uint64_t dispatch thunk of AnyCanvas.magicGenerativePlaygroundContainerState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x7B0))();
}

uint64_t dispatch thunk of AnyCanvas.magicGenerativePlaygroundContainerStateObserver.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x7B8))();
}

uint64_t dispatch thunk of AnyCanvas.magicGenerativePlaygroundContainerStateObserver.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x7C0))();
}

uint64_t dispatch thunk of AnyCanvas.magicGenerativePlaygroundContainerStateObserver.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x7C8))();
}

uint64_t dispatch thunk of AnyCanvas.magicGenerativePlaygroundUndoManager.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x7D0))();
}

void type metadata accessor for Capsule<CanvasState>()
{
  if (!lazy cache variable for type metadata for Capsule<CanvasState>)
  {
    type metadata accessor for CanvasState();
    _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_2(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
    unint64_t v0 = type metadata accessor for Capsule();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Capsule<CanvasState>);
    }
  }
}

uint64_t _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AnyCanvas.MergeSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C63CE94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyCanvas.MergeSource()
{
  return &type metadata for AnyCanvas.MergeSource;
}

unsigned char *storeEnumTagSinglePayload for CanvasEditingMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C63CF98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasNonDrawingToolMode()
{
  return &type metadata for CanvasNonDrawingToolMode;
}

unint64_t lazy protocol witness table accessor for type CanvasNonDrawingToolMode and conformance CanvasNonDrawingToolMode()
{
  unint64_t result = lazy protocol witness table cache variable for type CanvasNonDrawingToolMode and conformance CanvasNonDrawingToolMode;
  if (!lazy protocol witness table cache variable for type CanvasNonDrawingToolMode and conformance CanvasNonDrawingToolMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasNonDrawingToolMode and conformance CanvasNonDrawingToolMode);
  }
  return result;
}

void partial apply for closure #1 in static AnyCanvas.strokeBounds<A, B>(_:in:)(CGFloat *a1@<X0>, CGFloat *a2@<X8>)
{
  closure #1 in static AnyCanvas.strokeBounds<A, B>(_:in:)(a1, *(void **)(v2 + 48), a2);
}

id specialized AnyCanvas.init(context:frame:editingMode:transparentBackground:)(void *a1, unsigned __int8 *a2, int a3, double a4, double a5, double a6, double a7)
{
  int v32 = a3;
  uint64_t v14 = type metadata accessor for CanvasState();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v31 = *a2;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasStateLiveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors] = 0;
  v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_wantsDataDetection] = 1;
  v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isSharedViaICloud] = 1;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v17 = &v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_screenScaleOverride];
  *(void *)uint64_t v17 = 0;
  v17[8] = 1;
  type metadata accessor for UUID();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  uint64_t v18 = v7;
  CRDictionary.init()();
  *(void *)&v16[*(int *)(v14 + 20)] = MEMORY[0x263F8EE80];
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_2(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  Capsule<>.init(_:id:)();
  v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings] = 0;
  v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas_nonDrawingToolMode] = 0;
  v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isCurrentlyLiveEditing] = 0;
  uint64_t v19 = MEMORY[0x263F8EE78];
  *(void *)&v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveEditingContinuations] = MEMORY[0x263F8EE78];
  UUID.init()();
  *(void *)&v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas____lazy_storage___acceptedDropLayouts] = 0;
  swift_unknownObjectWeakInit();
  v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isScribbling] = 0;
  double v20 = &v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_timeOfOpeningContainerView];
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(void *)&v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_latencyOfFormFields] = v19;
  unint64_t v22 = &v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider];
  *(_OWORD *)unint64_t v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  *((void *)v22 + 4) = 0;
  CGFloat v23 = &v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundContainerStateObserver];
  uint64_t v24 = (objc_class *)type metadata accessor for CanvasCollaborationStateView();
  *(_OWORD *)CGFloat v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  *((void *)v23 + 4) = 0;
  id v25 = objc_msgSend(objc_allocWithZone(v24), sel_initWithFrame_, a4, a5, a6, a7);
  *(void *)&v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView] = v25;
  v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas_transparentBackground] = v32;
  *(void *)&v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas_context] = a1;
  v18[OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode] = v31;
  id v26 = a1;

  uint64_t v27 = (objc_class *)type metadata accessor for AnyCanvas();
  v33.receiver = v18;
  v33.super_class = v27;
  id v28 = objc_msgSendSuper2(&v33, sel_initWithFrame_, a4, a5, a6, a7);
  swift_unknownObjectWeakAssign();
  return v28;
}

unint64_t lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection()
{
  unint64_t result = lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection;
  if (!lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection;
  if (!lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection;
  if (!lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection;
  if (!lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection;
  if (!lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection;
  if (!lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection;
  if (!lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection);
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, void (*a5)(char *, char *))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(a3, a2);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v24 = result;
  if (v16)
  {
    uint64_t v18 = v10 + 16;
    CGFloat v23 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    uint64_t v19 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v20 = *(void *)(v10 + 72);
    uint64_t v21 = a5;
    unint64_t v22 = (void (**)(char *, uint64_t))(v18 - 8);
    do
    {
      v23(v13, v19, v9);
      v21(v15, v13);
      (*v22)(v15, v9);
      v19 += v20;
      --v16;
    }
    while (v16);
    return v24;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for AnyCanvasElementView();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_2(&lazy protocol witness table cache variable for type AnyCanvasElementView and conformance NSObject, (void (*)(uint64_t))type metadata accessor for AnyCanvasElementView);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        unsigned int v6 = (void *)MEMORY[0x21054E050](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  lazy protocol witness table accessor for type UIColor and conformance NSObject();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        unsigned int v6 = (void *)MEMORY[0x21054E050](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in AnyCanvas.forwardChanges(from:)()
{
  return closure #1 in AnyCanvas.forwardChanges(from:)(*(void **)(v0 + 16));
}

void specialized AnyCanvas.init(coder:)()
{
  uint64_t v1 = type metadata accessor for CanvasState();
  MEMORY[0x270FA5388](v1);
  int v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasStateLiveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors] = 0;
  v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_wantsDataDetection] = 1;
  v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isSharedViaICloud] = 1;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v4 = &v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_screenScaleOverride];
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  type metadata accessor for UUID();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  CRDictionary.init()();
  *(void *)&v3[*(int *)(v1 + 20)] = MEMORY[0x263F8EE80];
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_2(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  Capsule<>.init(_:id:)();
  v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings] = 0;
  v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_nonDrawingToolMode] = 0;
  v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isCurrentlyLiveEditing] = 0;
  uint64_t v5 = MEMORY[0x263F8EE78];
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveEditingContinuations] = MEMORY[0x263F8EE78];
  UUID.init()();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas____lazy_storage___acceptedDropLayouts] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isScribbling] = 0;
  unsigned int v6 = &v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_timeOfOpeningContainerView];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_latencyOfFormFields] = v5;
  uint64_t v8 = &v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider];
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((void *)v8 + 4) = 0;
  id v9 = &v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundContainerStateObserver];
  *((void *)v9 + 4) = 0;
  *(_OWORD *)id v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_20C63E300()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t block_copy_helper_51(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_51()
{
  return swift_release();
}

uint64_t sub_20C63E350()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

id partial apply for closure #1 in AnyCanvas.isResizingChanged()()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setAlpha_, *(double *)(v0 + 24));
}

uint64_t partial apply for closure #1 in AnyCanvas.updateCanvasState(_:)(uint64_t a1)
{
  return closure #1 in AnyCanvas.updateCanvasState(_:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void (**)(uint64_t))(v1 + 40));
}

uint64_t sub_20C63E3C0()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for implicit closure #1 in closure #1 in AnyCanvas.updateCanvasState(_:)@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  uint64_t result = static Date.timeIntervalSinceReferenceDate.getter();
  *a1 = v6;
  a1[1] = v4;
  a1[2] = v3;
  uint64_t v7 = MEMORY[0x263F8EE78];
  a1[3] = MEMORY[0x263F8EE78];
  a1[4] = v7;
  return result;
}

void one-time initialization function for paletteHeight()
{
  static MiniMenuConstants.paletteHeight = 0x4045000000000000;
}

void one-time initialization function for paletteHorizontalPadding()
{
  static MiniMenuConstants.paletteHorizontalPadding = 0x4020000000000000;
}

void one-time initialization function for paletteShadowRadius()
{
  static MiniMenuConstants.paletteShadowRadius = 0x4034000000000000;
}

void one-time initialization function for buttonFontSize()
{
  static MiniMenuConstants.buttonFontSize = 0x4030000000000000;
}

void one-time initialization function for colorSwatchPadding()
{
  static MiniMenuConstants.colorSwatchPadding = 0x4020000000000000;
}

void one-time initialization function for colorSwatchSize()
{
  static MiniMenuConstants.colorSwatchSize = 0x4040000000000000;
}

void one-time initialization function for colorSwatchSelectionSize()
{
  static MiniMenuConstants.colorSwatchSelectionSize = 0x4036000000000000;
}

double one-time initialization function for strokeSwatchEndPoint()
{
  double result = 12.0;
  static MiniMenuConstants.strokeSwatchEndPoint = xmmword_20C845D40;
  return result;
}

void one-time initialization function for buttonSpacing()
{
  static MiniMenuConstants.buttonSpacing = 0x4010000000000000;
}

double one-time initialization function for popoverMargin()
{
  double result = 40.0;
  static MiniMenuConstants.popoverMargin = xmmword_20C845D50;
  *(_OWORD *)&qword_2676E92E0 = xmmword_20C845D50;
  return result;
}

uint64_t PaperDocumentInlineView.paperDocument.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  if (*v3)
  {
    uint64_t v4 = *v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    uint64_t v6 = *(void *)(v5 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, v4, v5);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t PaperDocumentInlineView.delegate.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate);
}

uint64_t PaperDocumentInlineView.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PaperDocumentInlineView.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

id PaperDocumentInlineView.enclosingTextViewTiledViewRulerHostingView.getter()
{
  id v1 = objc_msgSend(v0, sel_superview);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  while (1)
  {
    self;
    uint64_t v4 = swift_dynamicCastObjCClass();
    if (!v4) {
      goto LABEL_4;
    }
    uint64_t v5 = (void *)v4;
    id v17 = v2;
    id v6 = objc_msgSend(v5, sel_subviews);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v7 >> 62))
    {
      uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v8) {
        break;
      }
      goto LABEL_3;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8) {
      break;
    }
LABEL_3:

    swift_bridgeObjectRelease();
LABEL_4:
    id v3 = objc_msgSend(v2, sel_superview);

    uint64_t v2 = v3;
    if (!v3) {
      return 0;
    }
  }
  uint64_t v9 = 4;
  while (1)
  {
    if ((v7 & 0xC000000000000001) != 0) {
      id result = (id)MEMORY[0x21054E050](v9 - 4, v7);
    }
    else {
      id result = *(id *)(v7 + 8 * v9);
    }
    uint64_t v11 = result;
    uint64_t v12 = v9 - 3;
    if (__OFADD__(v9 - 4, 1))
    {
      __break(1u);
      return result;
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
      uint64_t v13 = swift_dynamicCastObjCProtocolConditional();
      if (v13) {
        break;
      }
    }

    ++v9;
    if (v12 == v8) {
      goto LABEL_3;
    }
  }
  uint64_t v14 = (void *)v13;
  id v15 = v11;
  swift_bridgeObjectRelease();
  if (objc_msgSend(v14, sel_respondsToSelector_, sel_rulerHostingView))
  {
    id v16 = objc_msgSend(v14, sel_rulerHostingView);

    return v16;
  }

  return 0;
}

Swift::Void __swiftcall PaperDocumentInlineView.layoutSubviews()()
{
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for PaperDocumentInlineView();
  objc_msgSendSuper2(&v6, sel_layoutSubviews);
  id v1 = (id *)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
  swift_beginAccess();
  if (*v1)
  {
    uint64_t v2 = (char *)*v1;
    id v3 = PaperDocumentInlineView.enclosingTextViewTiledViewRulerHostingView.getter();
    uint64_t v4 = &v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView];
    swift_beginAccess();
    uint64_t v5 = (void *)MEMORY[0x210550400](v4);
    swift_unknownObjectWeakAssign();
    PaperDocumentView.rulerHostView.didset(v5);
  }
}

void *PaperDocumentInlineView.toolPicker.getter()
{
  id v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_toolPicker);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void PaperDocumentInlineView.toolPicker.setter(void *a1)
{
  specialized PaperDocumentInlineView.toolPicker.setter(a1);
}

void (*PaperDocumentInlineView.toolPicker.modify(void *a1))(void **a1, char a2)
{
  id v3 = malloc(0x58uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_toolPicker;
  v3[9] = v1;
  v3[10] = v4;
  swift_beginAccess();
  return PaperDocumentInlineView.toolPicker.modify;
}

void PaperDocumentInlineView.toolPicker.modify(void **a1, char a2)
{
  id v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = (void **)(v3[9] + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    uint64_t v5 = (char *)*v4;
    if (v5)
    {
      objc_super v6 = *(void **)(v3[9] + v3[10]);
      unint64_t v7 = (id *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
      swift_beginAccess();
      id v8 = *v7;
      *unint64_t v7 = v6;
      id v9 = v6;
      uint64_t v10 = v5;
      if (v8)
      {
        objc_msgSend(v8, sel_removeObserver_, v10);
        id v11 = PaperDocumentView.paperDocumentViewProxy.getter();
        objc_msgSend(v8, sel_removeObserver_, v11);
      }
      swift_beginAccess();
      uint64_t v12 = v10;
      uint64_t v13 = swift_bridgeObjectRetain();
      specialized Sequence.forEach(_:)(v13, (uint64_t)v12);

      swift_bridgeObjectRelease();
      if (*v7)
      {
        id v14 = *v7;
        objc_msgSend(v14, sel_addObserver_, v12);
        id v15 = PaperDocumentView.paperDocumentViewProxy.getter();
        objc_msgSend(v14, sel_addObserver_, v15);

        PaperDocumentView.updateTiledViewInk(for:)(v14);
        PaperDocumentView.updateToolPicker()();
      }
    }
  }
  free(v3);
}

void key path setter for PaperDocumentInlineView.paperDocumentView : PaperDocumentInlineView(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v3 = (void **)(*a2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = v2;
  id v5 = v2;
}

void *PaperDocumentInlineView.paperDocumentView.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

uint64_t type metadata accessor for PaperDocumentInlineView()
{
  uint64_t result = type metadata singleton initialization cache for PaperDocumentInlineView;
  if (!type metadata singleton initialization cache for PaperDocumentInlineView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id PaperDocumentInlineView.__allocating_init(paperURL:coherenceContextURL:encryptionDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return PaperDocumentInlineView.init(paperURL:coherenceContextURL:encryptionDelegate:)(a1, a2, a3);
}

id PaperDocumentInlineView.init(paperURL:coherenceContextURL:encryptionDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v7 - 8);
  id v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_toolPicker] = 0;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_syncManager] = 0;
  id v14 = v3;
  uint64_t v45 = a3;
  uint64_t v46 = a2;
  uint64_t v44 = v10;
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v15 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v15 = MEMORY[0x263F8EE88];
  }
  *(void *)&v14[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_syncCancellables] = v15;
  *(void *)&v14[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView] = 0;
  swift_unknownObjectWeakInit();
  id v16 = &v14[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_temporaryPaperDocument];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = &v14[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  uint64_t v19 = &v14[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource];
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  v14[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors] = 0;
  *(void *)&v14[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v20 = self;
  id v21 = objc_msgSend(v20, sel_defaultManager);
  uint64_t v22 = URL.path.getter();
  uint64_t v23 = MEMORY[0x21054D080](v22);
  uint64_t v47 = a1;
  uint64_t v24 = (void *)v23;
  swift_bridgeObjectRelease();
  unsigned __int8 v25 = objc_msgSend(v21, sel_isWritableFileAtPath_, v24);

  char v26 = 0;
  uint64_t v27 = v44;
  if ((v25 & 1) == 0)
  {
    id v28 = objc_msgSend(v20, sel_defaultManager);
    URL.deletingLastPathComponent()();
    uint64_t v29 = URL.path.getter();
    uint64_t v31 = v30;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
    int v32 = (void *)MEMORY[0x21054D080](v29, v31);
    swift_bridgeObjectRelease();
    LOBYTE(v31) = objc_msgSend(v28, sel_isWritableFileAtPath_, v32);

    char v26 = v31 ^ 1;
  }
  uint64_t v33 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, v46, v27);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v27);
  uint64_t v34 = v45;
  uint64_t v35 = specialized static PaperDocumentInlineView.createContext(coherenceContextURL:encryptionDelegate:readOnly:)((uint64_t)v9, v45, v26);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
  *(void *)&v14[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_crContext] = v35;

  uint64_t v36 = (objc_class *)type metadata accessor for PaperDocumentInlineView();
  v48.receiver = v14;
  v48.super_class = v36;
  id v37 = objc_msgSendSuper2(&v48, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v38 = v47;
  PaperDocumentInlineView.watchFile(_:readOnly:)(v47, v26);
  id v39 = objc_msgSend(self, sel_defaultCenter);
  id v40 = v37;
  uint64_t v41 = (void *)MEMORY[0x21054D080](0xD000000000000020, 0x800000020C85C190);
  objc_msgSend(v39, sel_addObserver_selector_name_object_, v40, sel_toolPickerWillShow_, v41, 0);

  outlined destroy of StocksKitCurrencyCache.Provider?(v34, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v42(v33, v27);
  v42(v38, v27);
  return v40;
}

uint64_t PaperDocumentInlineView.viewControllerForPresentingUI.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_viewControllerForPresentingUI;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

void PaperDocumentInlineView.viewControllerForPresentingUI.setter(void *a1)
{
  specialized PaperDocumentInlineView.viewControllerForPresentingUI.setter();
}

void (*PaperDocumentInlineView.viewControllerForPresentingUI.modify(void *a1))(uint64_t *a1, char a2)
{
  id v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_viewControllerForPresentingUI;
  v3[6] = v1;
  v3[7] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x210550400](v5);
  return PaperDocumentInlineView.viewControllerForPresentingUI.modify;
}

void PaperDocumentInlineView.viewControllerForPresentingUI.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)(*a1 + 24);
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    uint64_t v5 = *(void *)(v3 + 48);
    swift_endAccess();

    objc_super v6 = (void **)(v5 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    uint64_t v7 = *v6;
    if (v7)
    {
      id v8 = (id)MEMORY[0x210550400](*(void *)(v3 + 48) + *(void *)(v3 + 56));
      id v9 = v7;
      if (!v8)
      {
        id v10 = objc_msgSend(*(id *)(v3 + 48), sel_window);
        id v8 = objc_msgSend(v10, sel_rootViewController);
      }
      swift_beginAccess();
      swift_unknownObjectWeakAssign();
      PaperDocumentView.viewControllerForPresentingUI.didset();
    }
  }
  free((void *)v3);
}

Swift::Void __swiftcall PaperDocumentInlineView.didMoveToWindow()()
{
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for PaperDocumentInlineView();
  objc_msgSendSuper2(&v7, sel_didMoveToWindow);
  uint64_t v1 = (void **)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
  swift_beginAccess();
  uint64_t v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = &v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_viewControllerForPresentingUI];
    swift_beginAccess();
    id v4 = (id)MEMORY[0x210550400](v3);
    id v5 = v2;
    if (!v4)
    {
      id v6 = objc_msgSend(v0, sel_window);
      id v4 = objc_msgSend(v6, sel_rootViewController);
    }
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    PaperDocumentView.viewControllerForPresentingUI.didset();
  }
}

uint64_t PaperDocumentInlineView.watchFile(_:readOnly:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v56 = a1;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v54 = *(void *)(v5 - 8);
  uint64_t v55 = v5;
  uint64_t v6 = *(void *)(v54 + 64);
  MEMORY[0x270FA5388](v5);
  objc_super v48 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v50 = (char *)&v48 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Error>, NSRunLoop>);
  uint64_t v52 = *(void *)(v12 - 8);
  uint64_t v53 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v51 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x270FA5388](v14 - 8);
  id v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  FileVersionPolicCGFloat y = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  uint64_t v17 = *(void *)(FileVersionPolicy - 8);
  MEMORY[0x270FA5388](FileVersionPolicy);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v21 = *(void *)(v20 - 8);
  double v23 = MEMORY[0x270FA5388](v20);
  unsigned __int8 v25 = (char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v26 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_crContext];
  if (a2)
  {
    uint64_t v53 = *(void *)&v3[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_crContext];
    uint64_t v50 = v22;
    uint64_t v51 = v3;
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<PaperDocument>);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
    uint64_t v27 = type metadata accessor for CRCodableVersion();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v29 = *(void *)(v28 + 72);
    unint64_t v30 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_20C835740;
    unint64_t v32 = v31 + v30;
    uint64_t v33 = *(void (**)(unint64_t, void, uint64_t))(v28 + 104);
    v33(v32, *MEMORY[0x263F32EB0], v27);
    v33(v32 + v29, *MEMORY[0x263F32EB8], v27);
    if (one-time initialization token for allReadableFileFormatVersions != -1) {
      swift_once();
    }
    uint64_t v34 = FileVersionPolicy;
    (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x263F32FB0], FileVersionPolicy);
    static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v34);
    swift_bridgeObjectRelease();
    PaperDocumentInlineView.handleMerge(newModel:)((uint64_t)v25);
    return (*(uint64_t (**)(char *, char *))(v21 + 8))(v25, v50);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 56))(v16, 1, 1, v23);
    uint64_t v35 = v26;
    uint64_t v36 = v56;
    uint64_t v37 = specialized static CRDataStoreBundle.paperBundle(_:sync:at:)(v35, (uint64_t)v16, v56);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
    *(void *)&v3[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_syncManager] = v37;
    FileVersionPolicCGFloat y = v37;
    swift_retain();
    swift_release();
    uint64_t v57 = CRDataStoreBundle.publisher.getter();
    id v58 = objc_msgSend(self, sel_mainRunLoop);
    uint64_t v38 = type metadata accessor for NSRunLoop.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v11, 1, 1, v38);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Error>);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type AnyPublisher<Capsule<PaperDocument>, Error> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Error>);
    lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
    id v39 = v51;
    Publisher.receive<A>(on:options:)();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

    swift_release();
    uint64_t v40 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v42 = v54;
    uint64_t v41 = v55;
    uint64_t v43 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v50, v36, v55);
    unint64_t v44 = (*(unsigned __int8 *)(v42 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = v40;
    (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))(v45 + v44, v43, v41);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Error>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Error>, NSRunLoop>);
    uint64_t v46 = v53;
    Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v46);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    return swift_release();
  }
}

void closure #1 in PaperDocumentInlineView.watchFile(_:readOnly:)(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  if (v10)
  {
    swift_beginAccess();
    uint64_t v11 = MEMORY[0x210550400](a2 + 16);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      id v13 = v10;
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)logger);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
      id v15 = v10;
      id v16 = v10;
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        v31[0] = v29;
        *(_DWORD *)uint64_t v19 = 136315394;
        lazy protocol witness table accessor for type CalculateExpression and conformance CalculateExpression((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
        uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        *(_WORD *)(v19 + 12) = 2080;
        uint64_t v30 = (uint64_t)v10;
        id v22 = v10;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        uint64_t v23 = String.init<A>(describing:)();
        uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_20C2D7000, v17, v18, "Failed to load inline document file: %s. Error: %s", (uint8_t *)v19, 0x16u);
        uint64_t v25 = v29;
        swift_arrayDestroy();
        MEMORY[0x210550270](v25, -1, -1);
        MEMORY[0x210550270](v19, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      char v26 = &v12[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate];
      swift_beginAccess();
      if (MEMORY[0x210550400](v26))
      {
        uint64_t v27 = *((void *)v26 + 1);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, uint64_t))(v27 + 24))(v10, ObjectType, v27);

        swift_unknownObjectRelease();
      }
      else
      {
      }
    }
  }
}

void closure #2 in PaperDocumentInlineView.watchFile(_:readOnly:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x210550400](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    PaperDocumentInlineView.handleMerge(newModel:)(a1);
  }
}

uint64_t (*PaperDocumentInlineView.temporaryPaperDocument.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

void PaperDocumentInlineView.handleMerge(newModel:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  v35[1] = v6;
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  v35[0] = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  id v15 = (char *)v35 - v14;
  id v16 = PaperDocumentInlineView.temporaryPaperDocument.modify();
  uint64_t v37 = v5;
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  int v19 = v17(v18, 1, v4);
  uint64_t v36 = v7;
  if (!v19)
  {
    type metadata accessor for PaperDocument(0);
    lazy protocol witness table accessor for type CalculateExpression and conformance CalculateExpression(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    Capsule.merge<A>(_:)();
  }
  ((void (*)(char *, void))v16)(v38, 0);
  uint64_t v20 = (id *)&v1[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
  swift_beginAccess();
  if (!*v20
    || (id v21 = *v20,
        specialized PaperDocumentView.merge<A>(_:from:page:)(a1, 0, 0),
        v21,
        !*v20))
  {
    uint64_t v22 = (uint64_t)v2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_temporaryPaperDocument;
    swift_beginAccess();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v22, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
    int v23 = v17((uint64_t)v15, 1, v4);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
    if (v23 == 1)
    {
      uint64_t v24 = v37;
      uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
      v25(v12, a1, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v12, 0, 1, v4);
      swift_beginAccess();
      outlined assign with take of Capsule<PaperDocument>?((uint64_t)v12, v22);
      swift_endAccess();
      uint64_t v26 = type metadata accessor for TaskPriority();
      uint64_t v27 = v35[0];
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v35[0], 1, 1, v26);
      uint64_t v28 = a1;
      uint64_t v29 = v36;
      v25(v36, v28, v4);
      type metadata accessor for MainActor();
      id v30 = v2;
      uint64_t v31 = static MainActor.shared.getter();
      unint64_t v32 = (*(unsigned __int8 *)(v24 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v33 = (char *)swift_allocObject();
      uint64_t v34 = MEMORY[0x263F8F500];
      *((void *)v33 + 2) = v31;
      *((void *)v33 + 3) = v34;
      *((void *)v33 + 4) = v30;
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v33[v32], v29, v4);
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v27, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentInlineView.handleMerge(newModel:), (uint64_t)v33);
      swift_release();
    }
  }
}

uint64_t closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[56] = a4;
  v5[57] = a5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  v5[58] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Never>, NSRunLoop>);
  v5[59] = v6;
  v5[60] = *(void *)(v6 - 8);
  v5[61] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  v5[62] = swift_task_alloc();
  v5[63] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[64] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[65] = v8;
  v5[66] = v7;
  return MEMORY[0x270FA2498](closure #1 in PaperDocumentInlineView.handleMerge(newModel:), v8, v7);
}

uint64_t closure #1 in PaperDocumentInlineView.handleMerge(newModel:)()
{
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_crContext);
  uint64_t v3 = *(void *)(v0 + 504);
  *(void *)(v0 + 536) = v2;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_temporaryPaperDocument;
  *(void *)(v0 + 544) = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_temporaryPaperDocument;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v5, v3, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  *(void *)(v0 + 552) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v0 + 560) = v7;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = (void **)(*(void *)(v0 + 448) + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_toolPicker);
    swift_beginAccess();
    uint64_t v10 = *v9;
    *(void *)(v0 + 568) = v10;
    *(unsigned char *)(v0 + 592) = 3;
    objc_allocWithZone((Class)type metadata accessor for PaperDocumentView());
    id v15 = (uint64_t (*)(uint64_t, uint64_t, unsigned char *, uint64_t))((char *)&async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)
                                                                     + async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:));
    id v11 = v2;
    id v12 = v10;
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 576) = v13;
    *uint64_t v13 = v0;
    v13[1] = closure #1 in PaperDocumentInlineView.handleMerge(newModel:);
    uint64_t v14 = *(void *)(v0 + 504);
    return v15((uint64_t)v11, v14, (unsigned char *)(v0 + 592), (uint64_t)v10);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  Class isa;
  char *v27;
  void **v28;
  void *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  id v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ObjectType;
  uint64_t (*v52)(void);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v1 = *(void *)(v0 + 448);
  swift_release();
  uint64_t v2 = v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_viewControllerForPresentingUI;
  swift_beginAccess();
  uint64_t v3 = (id)MEMORY[0x210550400](v2);
  if (!v3)
  {
    uint64_t v4 = objc_msgSend(*(id *)(v0 + 448), sel_window);
    uint64_t v3 = objc_msgSend(v4, sel_rootViewController);
  }
  uint64_t v5 = *(char **)(v0 + 584);
  uint64_t v6 = *(void *)(v0 + 560);
  uint64_t v7 = *(void *)(v0 + 552);
  uint64_t v8 = *(void *)(v0 + 496);
  uint64_t v55 = *(void *)(v0 + 488);
  uint64_t v56 = *(void *)(v0 + 472);
  uint64_t v57 = *(void *)(v0 + 480);
  uint64_t v54 = *(void *)(v0 + 464);
  uint64_t v9 = *(char **)(v0 + 448);
  uint64_t v10 = (uint64_t)&v9[*(void *)(v0 + 544)];
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  PaperDocumentView.viewControllerForPresentingUI.didset();

  id v11 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate];
  swift_beginAccess();
  *((void *)v11 + 1) = &protocol witness table for PaperDocumentInlineView;
  swift_unknownObjectWeakAssign();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v8, 1, 1, v7);
  swift_beginAccess();
  outlined assign with take of Capsule<PaperDocument>?(v8, v10);
  swift_endAccess();
  objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v9, sel_addSubview_, v5);
  id v12 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_20C8344C0;
  uint64_t v14 = objc_msgSend(v5, sel_leadingAnchor);
  id v15 = objc_msgSend(v9, sel_leadingAnchor);
  uint64_t v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v15);

  *(void *)(v13 + 32) = v16;
  uint64_t v17 = objc_msgSend(v5, sel_trailingAnchor);
  uint64_t v18 = objc_msgSend(v9, sel_trailingAnchor);
  int v19 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v18);

  *(void *)(v13 + 40) = v19;
  uint64_t v20 = objc_msgSend(v5, sel_topAnchor);
  id v21 = objc_msgSend(v9, sel_topAnchor);
  uint64_t v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(void *)(v13 + 48) = v22;
  int v23 = objc_msgSend(v5, sel_bottomAnchor);
  uint64_t v24 = objc_msgSend(v9, sel_bottomAnchor);
  uint64_t v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

  *(void *)(v13 + 56) = v25;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_activateConstraints_, isa);

  uint64_t v27 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor];
  swift_beginAccess();
  *uint64_t v27 = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyApplySafeAreaInsetsToAxes] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  uint64_t v28 = (void **)&v9[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
  swift_beginAccess();
  uint64_t v29 = *v28;
  *uint64_t v28 = v5;
  id v30 = v5;

  uint64_t v31 = &v9[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger];
  swift_beginAccess();
  unint64_t v32 = *((void *)v31 + 1);
  uint64_t v33 = &v30[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger];
  swift_beginAccess();
  *((void *)v33 + 1) = v32;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRetain();
  PaperDocumentView.liveStreamMessenger.didset();
  swift_unknownObjectRelease();
  uint64_t v34 = &v9[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource];
  swift_beginAccess();
  uint64_t v35 = *((void *)v34 + 1);
  uint64_t v36 = &v30[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource];
  swift_beginAccess();
  *((void *)v36 + 1) = v35;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRetain();
  PaperDocumentView.participantDetailsDataSource.didset();
  swift_unknownObjectRelease();
  uint64_t v37 = &v9[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors];
  swift_beginAccess();
  LOBYTE(v29) = *v37;
  uint64_t v38 = &v30[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
  swift_beginAccess();
  *uint64_t v38 = (char)v29;
  PaperDocumentView.showParticipantCursors.didset();
  id v39 = PaperDocumentInlineView.enclosingTextViewTiledViewRulerHostingView.getter();
  uint64_t v40 = &v30[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView];
  swift_beginAccess();
  uint64_t v41 = (void *)MEMORY[0x210550400](v40);
  swift_unknownObjectWeakAssign();
  PaperDocumentView.rulerHostView.didset(v41);

  objc_msgSend(v30, sel_setOverrideUserInterfaceStyle_, 1);
  *(void *)(v0 + 440) = *(void *)&v30[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_passThroughSubject];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type PassthroughSubject<Capsule<PaperDocument>, Never> and conformance PassthroughSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  *(void *)(v0 + 424) = Publisher.eraseToAnyPublisher()();
  *(void *)(v0 + 432) = objc_msgSend(self, sel_mainRunLoop);
  uint64_t v42 = type metadata accessor for NSRunLoop.SchedulerOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v54, 1, 1, v42);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Capsule<PaperDocument>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>);
  lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  Publisher.receive<A>(on:options:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v54, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  unint64_t v44 = swift_allocObject();
  uint64_t v45 = &v9[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate];
  swift_beginAccess();
  MEMORY[0x210550400](v45);
  *(void *)(v44 + 24) = *((void *)v45 + 1);
  swift_unknownObjectWeakInit();
  swift_unknownObjectRelease();
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = v43;
  *(void *)(v46 + 24) = v44;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Never>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Never>, NSRunLoop>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v55, v56);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v47 = MEMORY[0x210550400](v45);
  objc_super v48 = *(void **)(v0 + 584);
  if (v47)
  {
    uint64_t v49 = *(void *)(v0 + 456);
    uint64_t v50 = *((void *)v45 + 1);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v50 + 8))(v49, v48, ObjectType, v50);
    swift_unknownObjectRelease();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v52 = *(uint64_t (**)(void))(v0 + 8);
  return v52();
}

uint64_t closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 568);
  uint64_t v4 = *(void **)(*v1 + 536);
  *(void *)(*v1 + 584) = a1;
  swift_task_dealloc();

  uint64_t v5 = *(void *)(v2 + 528);
  uint64_t v6 = *(void *)(v2 + 520);
  return MEMORY[0x270FA2498](closure #1 in PaperDocumentInlineView.handleMerge(newModel:), v6, v5);
}

uint64_t closure #1 in closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = swift_allocObject();
    swift_beginAccess();
    MEMORY[0x210550400](a3 + 16);
    *(void *)(v5 + 24) = *(void *)(a3 + 24);
    swift_unknownObjectWeakInit();
    swift_unknownObjectRelease();
    swift_retain();
    CRDataStoreBundle.sync(_:finished:)();
    swift_release();
    return swift_release_n();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v2);
  if (result)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  return result;
}

void PaperDocumentInlineView.toolPickerWillShow(_:)()
{
  id v1 = objc_msgSend(v0, sel_window);
  if (v1)
  {
    uint64_t v2 = v1;
    Notification.object.getter();
    if (v11)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKToolPicker);
      if (swift_dynamicCast())
      {
        uint64_t v3 = self;
        id v4 = v9;
        id v5 = objc_msgSend(v3, sel_activeToolPickerForWindow_, v2);
        if (v5)
        {
          uint64_t v6 = v5;
          id v4 = v4;
          char v7 = static NSObject.== infix(_:_:)();

          if (v7)
          {
            id v8 = v4;
            specialized PaperDocumentInlineView.toolPicker.setter(v4);

            return;
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    else
    {

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
    }
  }
}

uint64_t PaperDocumentInlineView.liveStreamMessenger.getter()
{
  return PaperDocumentInlineView.liveStreamMessenger.getter();
}

{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t PaperDocumentInlineView.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentInlineView.liveStreamMessenger.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, (void (*)(uint64_t))PaperDocumentView.liveStreamMessenger.didset);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentInlineView.liveStreamMessenger.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger;
  v3[6] = v1;
  v3[7] = v4;
  swift_beginAccess();
  return PaperDocumentInlineView.liveStreamMessenger.modify;
}

void PaperDocumentInlineView.liveStreamMessenger.modify(void **a1, char a2)
{
}

uint64_t key path setter for PaperDocumentInlineView.liveStreamMessenger : PaperDocumentInlineView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void (*a7)(uint64_t))
{
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = swift_unknownObjectRetain();
  specialized PaperDocumentInlineView.liveStreamMessenger.setter(v11, v10, a5, a6, a7);
  return swift_unknownObjectRelease();
}

uint64_t PaperDocumentInlineView.participantDetailsDataSource.getter()
{
  return PaperDocumentInlineView.liveStreamMessenger.getter();
}

uint64_t PaperDocumentInlineView.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentInlineView.liveStreamMessenger.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, (void (*)(uint64_t))PaperDocumentView.participantDetailsDataSource.didset);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentInlineView.participantDetailsDataSource.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource;
  v3[6] = v1;
  v3[7] = v4;
  swift_beginAccess();
  return PaperDocumentInlineView.participantDetailsDataSource.modify;
}

void PaperDocumentInlineView.participantDetailsDataSource.modify(void **a1, char a2)
{
}

void PaperDocumentInlineView.liveStreamMessenger.modify(void **a1, char a2, void *a3, void (*a4)(uint64_t))
{
  char v7 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    id v8 = (void **)(v7[6] + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    uint64_t v9 = (char *)*v8;
    if (*v8)
    {
      uint64_t v10 = *(void *)(v7[6] + v7[7] + 8);
      uint64_t v11 = &v9[*a3];
      swift_beginAccess();
      *((void *)v11 + 1) = v10;
      swift_unknownObjectWeakAssign();
      id v12 = v9;
      uint64_t v13 = swift_unknownObjectRetain();
      a4(v13);
      swift_unknownObjectRelease();
    }
  }
  free(v7);
}

void key path setter for PaperDocumentInlineView.showParticipantCursors : PaperDocumentInlineView(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = (char *)(*a2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors);
  swift_beginAccess();
  *uint64_t v4 = v2;
  id v5 = (void **)(v3 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  uint64_t v6 = (char *)*v5;
  if (*v5)
  {
    char v7 = &v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
    swift_beginAccess();
    *char v7 = v2;
    id v8 = v6;
    PaperDocumentView.showParticipantCursors.didset();
  }
}

uint64_t PaperDocumentInlineView.showParticipantCursors.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

void PaperDocumentInlineView.showParticipantCursors.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors);
  swift_beginAccess();
  *uint64_t v3 = a1;
  uint64_t v4 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  id v5 = (char *)*v4;
  if (v5)
  {
    char v6 = a1 & 1;
    char v7 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
    swift_beginAccess();
    *char v7 = v6;
    id v8 = v5;
    PaperDocumentView.showParticipantCursors.didset();
  }
}

void (*PaperDocumentInlineView.showParticipantCursors.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors;
  v3[6] = v1;
  v3[7] = v4;
  swift_beginAccess();
  return PaperDocumentInlineView.showParticipantCursors.modify;
}

void PaperDocumentInlineView.showParticipantCursors.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = (void **)(v3[6] + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    id v5 = (char *)*v4;
    if (*v4)
    {
      char v6 = *(unsigned char *)(v3[6] + v3[7]);
      char v7 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
      swift_beginAccess();
      *char v7 = v6;
      id v8 = v5;
      PaperDocumentView.showParticipantCursors.didset();
    }
  }
  free(v3);
}

Swift::Void __swiftcall PaperDocumentInlineView.participantDetailsDidChange()()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  if (*v1)
  {
    id v2 = *v1;
    PaperDocumentView.participantDetailsDidChange()();
  }
}

uint64_t key path setter for PaperDocumentInlineView.textualContextProvider : PaperDocumentInlineView(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = swift_unknownObjectRetain();
  specialized PaperDocumentInlineView.textualContextProvider.setter(v2, v1);
  return swift_unknownObjectRelease();
}

uint64_t PaperDocumentInlineView.textualContextProvider.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider);
}

uint64_t PaperDocumentInlineView.textualContextProvider.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentInlineView.textualContextProvider.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentInlineView.textualContextProvider.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider;
  v3[6] = v1;
  v3[7] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentInlineView.textualContextProvider.modify;
}

void PaperDocumentInlineView.textualContextProvider.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 48) + *(void *)(*(void *)a1 + 56) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    uint64_t v4 = v3[6];
    swift_endAccess();
    swift_unknownObjectRelease();
    uint64_t v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    uint64_t v6 = *v5;
    if (*v5)
    {
      uint64_t v7 = v3[6] + v3[7];
      MEMORY[0x210550400](v7);
      uint64_t v8 = *(void *)(v7 + 8);
      uint64_t v9 = v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
      swift_beginAccess();
      *(void *)(v9 + 8) = v8;
      swift_unknownObjectWeakAssign();
      swift_unknownObjectRelease();
    }
  }
  free(v3);
}

id PaperDocumentInlineView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void PaperDocumentInlineView.init(frame:)()
{
}

id PaperDocumentInlineView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperDocumentInlineView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentInlineView()
{
  uint64_t v1 = *v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.setter in conformance PaperDocumentInlineView(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentInlineView.textualContextProvider.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitAttachment.textualContextProvider.modify in conformance PaperDocumentInlineView(void *a1))()
{
  objc_super v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentInlineView.textualContextProvider.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for PaperKitAttachment.viewControllerForPresentingUI.getter in conformance PaperDocumentInlineView()
{
  uint64_t v1 = *v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_viewControllerForPresentingUI;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

void protocol witness for PaperKitAttachment.viewControllerForPresentingUI.setter in conformance PaperDocumentInlineView(void *a1)
{
  specialized PaperDocumentInlineView.viewControllerForPresentingUI.setter();
}

uint64_t (*protocol witness for PaperKitAttachment.viewControllerForPresentingUI.modify in conformance PaperDocumentInlineView(void *a1))()
{
  objc_super v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentInlineView.viewControllerForPresentingUI.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.getter in conformance PaperDocumentInlineView()
{
  return protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.getter in conformance PaperDocumentInlineView();
}

{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperDocumentInlineView(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentInlineView.liveStreamMessenger.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, (void (*)(uint64_t))PaperDocumentView.liveStreamMessenger.didset);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance PaperDocumentInlineView(void *a1))()
{
  objc_super v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentInlineView.liveStreamMessenger.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.getter in conformance PaperDocumentInlineView()
{
  return protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.getter in conformance PaperDocumentInlineView();
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.setter in conformance PaperDocumentInlineView(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentInlineView.liveStreamMessenger.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, (void (*)(uint64_t))PaperDocumentView.participantDetailsDataSource.didset);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperDocumentInlineView(void *a1))()
{
  objc_super v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentInlineView.participantDetailsDataSource.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

void protocol witness for PaperKitStreamableAttachment.participantDetailsDidChange() in conformance PaperDocumentInlineView()
{
  uint64_t v1 = (id *)(*v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  if (*v1)
  {
    id v2 = *v1;
    PaperDocumentView.participantDetailsDidChange()();
  }
}

uint64_t protocol witness for PaperKitStreamableAttachment.showParticipantCursors.getter in conformance PaperDocumentInlineView()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

void protocol witness for PaperKitStreamableAttachment.showParticipantCursors.setter in conformance PaperDocumentInlineView(char a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (unsigned char *)(*v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors);
  swift_beginAccess();
  *uint64_t v4 = a1;
  uint64_t v5 = (void **)(v3 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  uint64_t v6 = (char *)*v5;
  if (v6)
  {
    char v7 = a1 & 1;
    uint64_t v8 = &v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
    swift_beginAccess();
    *uint64_t v8 = v7;
    id v9 = v6;
    PaperDocumentView.showParticipantCursors.didset();
  }
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance PaperDocumentInlineView(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentInlineView.showParticipantCursors.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t PaperDocumentInlineView.documentViewDidScroll(_:)()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v1);
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 32))(ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t protocol witness for PaperDocumentViewDelegate.documentViewDidScroll(_:) in conformance PaperDocumentInlineView()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v1);
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 32))(ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CalculateExpression>);
      uint64_t result = static _SetStorage.allocate(capacity:)();
      unint64_t v3 = result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v5) {
        return v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  unint64_t v3 = MEMORY[0x263F8EE88];
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return v3;
  }
LABEL_9:
  unint64_t v7 = 0;
  unint64_t v8 = v3 + 56;
  unint64_t v22 = v1 & 0xC000000000000001;
  unint64_t v19 = v1 + 32;
  uint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v21 = v1;
  while (v22)
  {
    uint64_t result = MEMORY[0x21054E050](v7, v1);
    unint64_t v9 = result;
    BOOL v10 = __OFADD__(v7++, 1);
    if (v10) {
      goto LABEL_26;
    }
LABEL_18:
    type metadata accessor for CalculateExpression();
    lazy protocol witness table accessor for type CalculateExpression and conformance CalculateExpression(&lazy protocol witness table cache variable for type CalculateExpression and conformance CalculateExpression, MEMORY[0x263F2FC68]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v11 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v8 + 8 * (v12 >> 6));
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      uint64_t v16 = ~v11;
      lazy protocol witness table accessor for type CalculateExpression and conformance CalculateExpression(&lazy protocol witness table cache variable for type CalculateExpression and conformance CalculateExpression, MEMORY[0x263F2FC68]);
      do
      {
        uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
        if (result)
        {
          uint64_t result = swift_release();
          unint64_t v1 = v21;
          goto LABEL_11;
        }
        unint64_t v12 = (v12 + 1) & v16;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v8 + 8 * (v12 >> 6));
        uint64_t v15 = 1 << v12;
      }
      while ((v14 & (1 << v12)) != 0);
      unint64_t v1 = v21;
    }
    *(void *)(v8 + 8 * v13) = v15 | v14;
    *(void *)(*(void *)(v3 + 48) + 8 * v12) = v9;
    uint64_t v17 = *(void *)(v3 + 16);
    BOOL v10 = __OFADD__(v17, 1);
    uint64_t v18 = v17 + 1;
    if (v10) {
      goto LABEL_27;
    }
    *(void *)(v3 + 16) = v18;
LABEL_11:
    if (v7 == v5) {
      return v3;
    }
  }
  if (v7 >= *(void *)(v20 + 16)) {
    goto LABEL_28;
  }
  unint64_t v9 = *(void *)(v19 + 8 * v7);
  uint64_t result = swift_retain();
  BOOL v10 = __OFADD__(v7++, 1);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
      uint64_t result = static _SetStorage.allocate(capacity:)();
      unint64_t v3 = result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v5) {
        return v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  unint64_t v3 = MEMORY[0x263F8EE88];
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return v3;
  }
LABEL_9:
  unint64_t v7 = 0;
  unint64_t v8 = v3 + 56;
  unint64_t v22 = v1 & 0xC000000000000001;
  unint64_t v19 = v1 + 32;
  uint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v21 = v1;
  while (v22)
  {
    uint64_t result = MEMORY[0x21054E050](v7, v1);
    unint64_t v9 = result;
    BOOL v10 = __OFADD__(v7++, 1);
    if (v10) {
      goto LABEL_26;
    }
LABEL_18:
    type metadata accessor for AnyCancellable();
    lazy protocol witness table accessor for type CalculateExpression and conformance CalculateExpression(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x263EFDD18]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v11 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v8 + 8 * (v12 >> 6));
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      uint64_t v16 = ~v11;
      lazy protocol witness table accessor for type CalculateExpression and conformance CalculateExpression((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x263EFDD18]);
      do
      {
        uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
        if (result)
        {
          uint64_t result = swift_release();
          unint64_t v1 = v21;
          goto LABEL_11;
        }
        unint64_t v12 = (v12 + 1) & v16;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v8 + 8 * (v12 >> 6));
        uint64_t v15 = 1 << v12;
      }
      while ((v14 & (1 << v12)) != 0);
      unint64_t v1 = v21;
    }
    *(void *)(v8 + 8 * v13) = v15 | v14;
    *(void *)(*(void *)(v3 + 48) + 8 * v12) = v9;
    uint64_t v17 = *(void *)(v3 + 16);
    BOOL v10 = __OFADD__(v17, 1);
    uint64_t v18 = v17 + 1;
    if (v10) {
      goto LABEL_27;
    }
    *(void *)(v3 + 16) = v18;
LABEL_11:
    if (v7 == v5) {
      return v3;
    }
  }
  if (v7 >= *(void *)(v20 + 16)) {
    goto LABEL_28;
  }
  unint64_t v9 = *(void *)(v19 + 8 * v7);
  uint64_t result = swift_retain();
  BOOL v10 = __OFADD__(v7++, 1);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<WeakTagged_9<TaggedCanvasElement>>);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  unint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      uint64_t v7 = v6;
      String.hash(into:)();
      uint64_t v8 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      uint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        uint64_t v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          uint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25) {
            goto LABEL_3;
          }
          uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      BOOL v28 = *(void *)(v3 + 16);
      uint64_t v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t specialized static PaperDocumentInlineView.createContext(coherenceContextURL:encryptionDelegate:readOnly:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) == 0)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v11, &demangling cache variable for type metadata for URL?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
      type metadata accessor for CRContext();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v8, 1, 1, v12);
      uint64_t v16 = static CRContext.uniqueContextUnchecked(for:encryptionDelegate:temporaryDirectory:)();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      return v16;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
  }
  type metadata accessor for CRContext();
  return MEMORY[0x21054C990](0, a2);
}

void specialized PaperDocumentInlineView.viewControllerForPresentingUI.setter()
{
  unint64_t v1 = &v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_viewControllerForPresentingUI];
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  uint64_t v2 = (void **)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
  swift_beginAccess();
  uint64_t v3 = *v2;
  if (*v2)
  {
    id v4 = (id)MEMORY[0x210550400](v1);
    id v5 = v3;
    if (!v4)
    {
      id v6 = objc_msgSend(v0, sel_window);
      id v4 = objc_msgSend(v6, sel_rootViewController);
    }
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    PaperDocumentView.viewControllerForPresentingUI.didset();
  }
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, &demangling cache variable for type metadata for _SetStorage<UIColor>, (unint64_t *)&lazy cache variable for type metadata for UIColor);
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ResizeHandleType>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v14 + v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(unsigned char *)(v14 + v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = a1;
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(a2);
      uint64_t v6 = static _SetStorage.allocate(capacity:)();
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v6 = MEMORY[0x263F8EE88];
  uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return;
  }
LABEL_9:
  uint64_t v10 = v6 + 56;
  uint64_t v47 = v8;
  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = 0;
    unint64_t v44 = v4;
    while (1)
    {
      uint64_t v12 = MEMORY[0x21054E050](v11, v4);
      BOOL v13 = __OFADD__(v11++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_37;
      }
      uint64_t v14 = v12;
      Swift::Int v15 = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v16 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v17 = v15 & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)(v10 + 8 * (v17 >> 6));
      uint64_t v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        type metadata accessor for NSObject(0, a3);
        id v21 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_11:
          swift_unknownObjectRelease();
          unint64_t v4 = v44;
          goto LABEL_12;
        }
        uint64_t v23 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v23;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)(v10 + 8 * (v17 >> 6));
          uint64_t v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0) {
            break;
          }
          id v24 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25) {
            goto LABEL_11;
          }
        }
        unint64_t v4 = v44;
      }
      *(void *)(v10 + 8 * v18) = v20 | v19;
      *(void *)(*(void *)(v6 + 48) + 8 * v17) = v14;
      uint64_t v26 = *(void *)(v6 + 16);
      BOOL v13 = __OFADD__(v26, 1);
      uint64_t v27 = v26 + 1;
      if (v13) {
        goto LABEL_38;
      }
      *(void *)(v6 + 16) = v27;
LABEL_12:
      if (v11 == v47) {
        return;
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v45 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v28 != v45)
  {
    Swift::Int v29 = *(void *)(v6 + 40);
    id v30 = *(id *)(v4 + 32 + 8 * v28);
    Swift::Int v31 = NSObject._rawHashValue(seed:)(v29);
    uint64_t v32 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v33 = v31 & ~v32;
    unint64_t v34 = v33 >> 6;
    uint64_t v35 = *(void *)(v10 + 8 * (v33 >> 6));
    uint64_t v36 = 1 << v33;
    if (((1 << v33) & v35) != 0)
    {
      type metadata accessor for NSObject(0, a3);
      id v37 = *(id *)(*(void *)(v6 + 48) + 8 * v33);
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_24;
      }
      uint64_t v39 = ~v32;
      unint64_t v33 = (v33 + 1) & v39;
      unint64_t v34 = v33 >> 6;
      uint64_t v35 = *(void *)(v10 + 8 * (v33 >> 6));
      uint64_t v36 = 1 << v33;
      if ((v35 & (1 << v33)) != 0)
      {
        while (1)
        {
          id v40 = *(id *)(*(void *)(v6 + 48) + 8 * v33);
          char v41 = static NSObject.== infix(_:_:)();

          if (v41) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v39;
          unint64_t v34 = v33 >> 6;
          uint64_t v35 = *(void *)(v10 + 8 * (v33 >> 6));
          uint64_t v36 = 1 << v33;
          if ((v35 & (1 << v33)) == 0) {
            goto LABEL_32;
          }
        }
LABEL_24:

        uint64_t v8 = v47;
        goto LABEL_25;
      }
LABEL_32:
      uint64_t v8 = v47;
    }
    *(void *)(v10 + 8 * v34) = v36 | v35;
    *(void *)(*(void *)(v6 + 48) + 8 * v33) = v30;
    uint64_t v42 = *(void *)(v6 + 16);
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_39;
    }
    *(void *)(v6 + 16) = v43;
LABEL_25:
    if (++v28 == v8) {
      return;
    }
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

void specialized PaperDocumentInlineView.toolPicker.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_toolPicker);
  swift_beginAccess();
  unint64_t v4 = *v3;
  *uint64_t v3 = a1;
  id v5 = a1;

  uint64_t v6 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  uint64_t v7 = (char *)*v6;
  if (v7)
  {
    uint64_t v8 = *v3;
    uint64_t v9 = (id *)&v7[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
    swift_beginAccess();
    id v10 = *v9;
    *uint64_t v9 = v8;
    id v11 = v8;
    uint64_t v12 = v7;
    if (v10)
    {
      objc_msgSend(v10, sel_removeObserver_, v12);
      id v13 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v10, sel_removeObserver_, v13);
    }
    swift_beginAccess();
    uint64_t v14 = v12;
    uint64_t v15 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v15, (uint64_t)v14);
    swift_bridgeObjectRelease();

    if (*v9)
    {
      id v16 = *v9;
      objc_msgSend(v16, sel_addObserver_, v14);
      id v17 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v16, sel_addObserver_, v17);

      PaperDocumentView.updateTiledViewInk(for:)(v16);
      PaperDocumentView.updateToolPicker()();

      uint64_t v14 = (char *)v10;
      id v10 = v11;
      id v11 = v16;
    }
  }
}

void specialized PaperDocumentInlineView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_toolPicker] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_syncManager] = 0;
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v1 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v1 = MEMORY[0x263F8EE88];
  }
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_syncCancellables] = v1;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v2 = &v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_temporaryPaperDocument];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  unint64_t v4 = &v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger];
  *unint64_t v4 = 0;
  v4[1] = 0;
  id v5 = &v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource];
  *id v5 = 0;
  v5[1] = 0;
  v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized PaperDocumentInlineView.liveStreamMessenger.setter(uint64_t a1, uint64_t a2, void *a3, void *a4, void (*a5)(uint64_t))
{
  id v10 = (void *)(v5 + *a3);
  swift_beginAccess();
  *id v10 = a1;
  v10[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  id v11 = (void **)(v5 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  uint64_t result = swift_beginAccess();
  id v13 = (char *)*v11;
  if (*v11)
  {
    uint64_t v14 = v10[1];
    uint64_t v15 = &v13[*a4];
    swift_beginAccess();
    *((void *)v15 + 1) = v14;
    swift_unknownObjectWeakAssign();
    id v16 = v13;
    uint64_t v17 = swift_unknownObjectRetain();
    a5(v17);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t specialized PaperDocumentInlineView.textualContextProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *v5;
  if (*v5)
  {
    MEMORY[0x210550400](v4);
    uint64_t v8 = *(void *)(v4 + 8);
    uint64_t v9 = v7 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
    swift_beginAccess();
    *(void *)(v9 + 8) = v8;
    swift_unknownObjectWeakAssign();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_20C644858@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate, a2);
}

uint64_t sub_20C644864(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

id sub_20C6448C8@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_toolPicker, a2);
}

void sub_20C6448D4(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  specialized PaperDocumentInlineView.toolPicker.setter(v1);
}

id sub_20C644924@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView, a2);
}

uint64_t sub_20C644934@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_viewControllerForPresentingUI;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v3);
  *a2 = result;
  return result;
}

void sub_20C64498C(id *a1)
{
  id v1 = *a1;
  specialized PaperDocumentInlineView.viewControllerForPresentingUI.setter();
}

uint64_t sub_20C6449DC@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return keypath_get_7Tm(a1, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger, a2);
}

uint64_t sub_20C6449E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentInlineView.liveStreamMessenger : PaperDocumentInlineView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, (void (*)(uint64_t))PaperDocumentView.liveStreamMessenger.didset);
}

uint64_t sub_20C644A24@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return keypath_get_7Tm(a1, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource, a2);
}

uint64_t keypath_get_7Tm@<X0>(void *a1@<X0>, void *a2@<X3>, _OWORD *a3@<X8>)
{
  uint64_t v4 = (_OWORD *)(*a1 + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_unknownObjectRetain();
}

uint64_t sub_20C644A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentInlineView.liveStreamMessenger : PaperDocumentInlineView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, (void (*)(uint64_t))PaperDocumentView.participantDetailsDataSource.didset);
}

uint64_t sub_20C644AC4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_20C644B1C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider, a2);
}

uint64_t dispatch thunk of PaperDocumentInlineViewDelegate.paperDocumentDidLoad(dataModel:view:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of PaperDocumentInlineViewDelegate.paperDocumentDidSave()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PaperDocumentInlineViewDelegate.paperDocumentDidFailToLoad(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PaperDocumentInlineViewDelegate.paperDocumentDidScroll()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t ObjC metadata update function for PaperDocumentInlineView()
{
  return type metadata accessor for PaperDocumentInlineView();
}

void type metadata completion function for PaperDocumentInlineView()
{
  type metadata accessor for Capsule<PaperDocument>?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for PaperDocumentInlineView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PaperDocumentInlineView);
}

uint64_t dispatch thunk of PaperDocumentInlineView.paperDocument.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.toolPicker.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.toolPicker.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.toolPicker.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.paperDocumentView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.__allocating_init(paperURL:coherenceContextURL:encryptionDelegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.viewControllerForPresentingUI.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.viewControllerForPresentingUI.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.viewControllerForPresentingUI.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.liveStreamMessenger.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.liveStreamMessenger.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.liveStreamMessenger.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.participantDetailsDataSource.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.participantDetailsDataSource.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.participantDetailsDataSource.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.showParticipantCursors.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.showParticipantCursors.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.showParticipantCursors.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.participantDetailsDidChange()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.textualContextProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.textualContextProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.textualContextProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F8))();
}

uint64_t lazy protocol witness table accessor for type CalculateExpression and conformance CalculateExpression(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of Capsule<PaperDocument>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C6452AC()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(a1, v5, v6, v7, v8);
}

uint64_t sub_20C645484()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C6454BC()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C6454F4()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(uint64_t a1)
{
  return closure #1 in closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PaperDocumentInlineView.handleMerge(newModel:)()
{
  return closure #1 in closure #1 in closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(v0);
}

uint64_t sub_20C645544()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C64557C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

void partial apply for closure #1 in PaperDocumentInlineView.watchFile(_:readOnly:)(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  closure #1 in PaperDocumentInlineView.watchFile(_:readOnly:)(a1, v4, v5);
}

void partial apply for closure #2 in PaperDocumentInlineView.watchFile(_:readOnly:)(uint64_t a1)
{
  closure #2 in PaperDocumentInlineView.watchFile(_:readOnly:)(a1, v1);
}

void specialized Sequence.first(where:)(void (**a1)(uint64_t, uint64_t, uint64_t, uint64_t)@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  id v100 = a3;
  uint64_t v95 = a2;
  BOOL v117 = a1;
  uint64_t v85 = a4;
  uint64_t v99 = type metadata accessor for CRAsset();
  uint64_t v107 = *(char **)(v99 - 8);
  MEMORY[0x270FA5388](v99 - 8);
  uint64_t v115 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
  id v118 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v114 - 8);
  MEMORY[0x270FA5388](v114);
  uint64_t v92 = (uint64_t)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v110 = (uint64_t)&v84 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset??);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v109 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v102 = (char *)&v84 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v108 = (uint64_t)&v84 - v16;
  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  uint64_t v106 = *(char **)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  uint64_t v86 = (uint64_t)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v91 = (uint64_t)&v84 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v93 = (char *)&v84 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  char v25 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>)
       - 8;
  MEMORY[0x270FA5388](v113);
  uint64_t v27 = (char *)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>)
       - 8;
  MEMORY[0x270FA5388](v112);
  Swift::Int v29 = (char *)&v84 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>)
       - 8;
  MEMORY[0x270FA5388](v111);
  Swift::Int v31 = (char *)&v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>.Iterator);
  uint64_t v33 = v32 - 8;
  MEMORY[0x270FA5388](v32);
  uint64_t v35 = (char *)&v84 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v117, (uint64_t)v31, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v31, (uint64_t)v29, &demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v29, (uint64_t)v27, &demangling cache variable for type metadata for LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>);
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v23 += 32;
  v36(v25, v27, v22);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CollectionDifference<PaperDocument.PDFPageAndPaperPage> and conformance CollectionDifference<A>, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>);
  uint64_t v90 = v25;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v37 = *(int *)(v113 + 52);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>.Iterator);
  long long v39 = *(_OWORD *)&v27[v37];
  uint64_t v113 = (uint64_t)&v35[*(int *)(v38 + 44)];
  *(_OWORD *)uint64_t v113 = v39;
  uint64_t v40 = *(int *)(v112 + 44);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>.Iterator);
  long long v42 = *(_OWORD *)&v29[v40];
  uint64_t v89 = (uint64_t (**)(uint64_t))&v35[*(int *)(v41 + 36)];
  *(_OWORD *)uint64_t v89 = v42;
  uint64_t v43 = *(int *)(v33 + 52);
  unint64_t v44 = v93;
  uint64_t v45 = v22;
  uint64_t v46 = (uint64_t)v102;
  long long v47 = *(_OWORD *)&v31[*(int *)(v111 + 52)];
  uint64_t v98 = &v35[v43];
  *(_OWORD *)uint64_t v98 = v47;
  objc_super v48 = &v35[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>)
                    + 36)];
  uint64_t v49 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CollectionDifference<PaperDocument.PDFPageAndPaperPage> and conformance CollectionDifference<A>, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>);
  uint64_t v88 = (void (**)(char *, char *, uint64_t))(v23 - 16);
  uint64_t v87 = (void (**)(char *, uint64_t))(v23 - 24);
  uint64_t v50 = v48;
  uint64_t v111 = (uint64_t)(v118 + 6);
  uint64_t v112 = (uint64_t)(v118 + 7);
  BOOL v117 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56);
  id v118 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
  int v101 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56);
  uint64_t v97 = (uint64_t (**)(char *, uint64_t, uint64_t))(v107 + 48);
  uint64_t v96 = (void (**)(char *, char *, uint64_t))(v107 + 32);
  uint64_t v94 = (void (**)(char *, uint64_t))(v107 + 8);
  uint64_t v106 = v8;
  uint64_t v107 = v35;
  uint64_t v103 = v45;
  uint64_t v104 = v49;
  for (i = v48; ; uint64_t v50 = i)
  {
    uint64_t v51 = *(void *)v50;
    dispatch thunk of Collection.endIndex.getter();
    if (v51 == v119)
    {
      uint64_t v52 = 1;
      uint64_t v53 = v110;
    }
    else
    {
      uint64_t v54 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v53 = v110;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v55, v110, &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
      v54(&v119, 0);
      uint64_t v56 = v90;
      (*v88)(v90, v35, v45);
      dispatch thunk of Collection.formIndex(after:)();
      (*v87)(v56, v45);
      uint64_t v52 = 0;
    }
    uint64_t v57 = v53;
    uint64_t v58 = v53;
    uint64_t v59 = v114;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v112)(v57, v52, 1, v114);
    uint64_t v60 = *(void (**)(uint64_t))v113;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v58, (uint64_t)v8, &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v111)(v8, 1, v59) == 1)
    {
      uint64_t v61 = *v117;
      (*v117)(v46, 1, 1, v120);
    }
    else
    {
      uint64_t v62 = (uint64_t)v8;
      uint64_t v63 = v92;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v62, v92, &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
      v60(v63);
      outlined destroy of StocksKitCurrencyCache.Provider?(v63, &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
      uint64_t v61 = *v117;
      (*v117)(v46, 0, 1, v120);
    }
    uint64_t v64 = (uint64_t)v109;
    char v65 = *v118;
    if ((*v118)(v46, 1, v120) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for CRAsset??);
      uint64_t v66 = 1;
    }
    else
    {
      uint64_t v67 = v91;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v46, v91, &demangling cache variable for type metadata for CRAsset?);
      if (((*v89)(v67) & 1) == 0)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v67, &demangling cache variable for type metadata for CRAsset?);
        uint64_t v8 = v106;
        uint64_t v35 = v107;
        unint64_t v44 = v93;
        uint64_t v45 = v103;
        continue;
      }
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v67, v108, &demangling cache variable for type metadata for CRAsset?);
      uint64_t v66 = 0;
      unint64_t v44 = v93;
      uint64_t v45 = v103;
    }
    uint64_t v68 = v108;
    uint64_t v69 = v120;
    v61(v108, v66, 1, v120);
    int v70 = *(void (**)(uint64_t))v98;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v68, v64, &demangling cache variable for type metadata for CRAsset??);
    if (v65(v64, 1, v69) == 1)
    {
      uint64_t v71 = *v101;
      uint64_t v72 = v44;
      uint64_t v73 = 1;
    }
    else
    {
      uint64_t v74 = v86;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v64, v86, &demangling cache variable for type metadata for CRAsset?);
      v70(v74);
      uint64_t v75 = v74;
      uint64_t v45 = v103;
      outlined destroy of StocksKitCurrencyCache.Provider?(v75, &demangling cache variable for type metadata for CRAsset?);
      uint64_t v71 = *v101;
      uint64_t v72 = v44;
      uint64_t v73 = 0;
    }
    uint64_t v76 = v99;
    v71(v72, v73, 1, v99);
    uint64_t v35 = v107;
    int v77 = (*v97)(v44, 1, v76);
    uint64_t v46 = (uint64_t)v102;
    if (v77 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>.Iterator);
      uint64_t v82 = 1;
      char v83 = v85;
      goto LABEL_24;
    }
    uint64_t v78 = *v96;
    uint64_t v79 = (uint64_t)v115;
    (*v96)(v115, v44, v76);
    uint64_t v80 = v116;
    BOOL v81 = closure #4 in PaperDocument.update<A>(_:in:otherDocuments:use:)(v79, v95, (uint64_t)v100);
    uint64_t v116 = v80;
    if (v80)
    {
      (*v94)(v115, v76);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>.Iterator);
      goto LABEL_25;
    }
    if (v81) {
      break;
    }
    (*v94)(v115, v76);
    uint64_t v8 = v106;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>.Iterator);
  char v83 = v85;
  v78(v85, v115, v76);
  uint64_t v82 = 0;
LABEL_24:
  v71(v83, v82, 1, v76);
LABEL_25:
}

uint64_t PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(v5 + 56) = a2;
  *(void *)(v5 + 64) = v4;
  *(unsigned char *)(v5 + 177) = a4;
  *(unsigned char *)(v5 + 176) = a3;
  *(void *)(v5 + 48) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v5 + 72) = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  *(void *)(v5 + 80) = v6;
  *(void *)(v5 + 88) = *(void *)(v6 - 8);
  *(void *)(v5 + 96) = swift_task_alloc();
  *(void *)(v5 + 104) = type metadata accessor for MainActor();
  *(void *)(v5 + 112) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 120) = v8;
  *(void *)(v5 + 128) = v7;
  return MEMORY[0x270FA2498](PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:), v8, v7);
}

uint64_t PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  char v4 = *(unsigned char *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 64) + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v6;
  *uint64_t v6 = v0;
  v6[1] = PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:);
  char v7 = *(unsigned char *)(v0 + 177);
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 56);
  return Capsule<>.search(query:fullWordsOnly:caseMatchingOnly:)(v9, v8, v7, (v4 & 1) == 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ResultVG_Tgm5;
  void *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v30 = v0;
    Swift::Int v31 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument;
    uint64_t v32 = *(char **)(v0 + 64);
    char v4 = v32;
    swift_bridgeObjectRetain();
    uint64_t v5 = (uint64_t *)(v2 + 64);
    uint64_t v6 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v9 = *(v5 - 2);
      uint64_t v8 = *(v5 - 1);
      uint64_t v10 = *v5;
      uint64_t v11 = *(v5 - 3);
      uint64_t v12 = objc_msgSend(*(id *)&v32[v31], sel_pageAtIndex_, *(v5 - 4), v30);
      if (v12)
      {
        uint64_t v13 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        }
        uint64_t v15 = v6[2];
        uint64_t v14 = v6[3];
        if (v15 >= v14 >> 1) {
          uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v6);
        }
        _OWORD v6[2] = v15 + 1;
        char v7 = &v6[6 * v15];
        v7[4] = v11;
        v7[5] = v9;
        v7[6] = v8;
        v7[7] = v10;
        v7[8] = v13;
        *((unsigned char *)v7 + 72) = 1;
      }
      v5 += 5;
      --v3;
    }
    while (v3);
    uint64_t v1 = v30;
    uint64_t v16 = *(void **)(v30 + 64);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = (void *)MEMORY[0x263F8EE78];
  }
  *(void *)(v1 + 152) = v6;
  uint64_t v17 = *(void *)(v1 + 72);
  uint64_t v18 = *(unsigned char *)(v1 + 176);
  uint64_t v20 = *(void *)(v1 + 48);
  uint64_t v19 = *(void *)(v1 + 56);
  swift_bridgeObjectRelease();
  uint64_t v21 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v17, 1, 1, v21);
  uint64_t v22 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v23 = static MainActor.shared.getter();
  uint64_t v24 = swift_allocObject();
  char v25 = MEMORY[0x263F8F500];
  *(void *)(v24 + 16) = v23;
  *(void *)(v24 + 24) = v25;
  *(void *)(v24 + 32) = v22;
  *(void *)(v24 + 40) = v20;
  *(void *)(v24 + 48) = v19;
  *(unsigned char *)(v24 + 56) = v18;
  swift_release();
  ResultVG_Tgm5 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSay8PaperKit0D18DocumentFindResultVG_Tgm5(v17, (uint64_t)&async function pointer to partial apply for closure #2 in PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:), v24);
  *(void *)(v1 + 160) = ResultVG_Tgm5;
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v1 + 168) = v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [PaperDocumentFindResult]);
  *uint64_t v27 = v1;
  v27[1] = PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:);
  return MEMORY[0x270FA1FD0](v1 + 40, ResultVG_Tgm5, v28);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 128);
  uint64_t v3 = *(void *)(v1 + 120);
  return MEMORY[0x270FA2498](PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:), v3, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;
  void *v7;
  uint64_t v8;

  char v7 = v0;
  uint64_t v1 = v0[19];
  swift_release();
  uint64_t v2 = v0[5];
  uint64_t v6 = v1;
  specialized Array.append<A>(contentsOf:)(v2);
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v6);
  swift_bridgeObjectRelease();
  uint64_t v3 = v6;
  swift_task_dealloc();
  swift_task_dealloc();
  char v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(v3);
}

uint64_t PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 96);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 144) = a1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 128);
  uint64_t v7 = *(void *)(v2 + 120);
  return MEMORY[0x270FA2498](PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:), v7, v6);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)MEMORY[0x21054E050](0, a2);
LABEL_5:
      uint64_t v6 = v5;
      type metadata accessor for AnyCanvasElementView();
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      MEMORY[0x21054E050](v9, a2);
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 >> 62) {
    goto LABEL_12;
  }
  unint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while ((a2 & 0xC000000000000001) == 0)
    {
      if (*(void *)(a2 + 32) == a1) {
        goto LABEL_21;
      }
      if (v4 != 1)
      {
        id v5 = 5;
        while (1)
        {
          uint64_t v6 = v5 - 3;
          if (__OFADD__(v5 - 4, 1)) {
            break;
          }
          if (*(void *)(a2 + 8 * v5) == a1) {
            goto LABEL_21;
          }
          ++v5;
          if (v6 == v4) {
            goto LABEL_10;
          }
        }
        __break(1u);
LABEL_12:
        swift_bridgeObjectRetain();
        unint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        if (v4) {
          continue;
        }
      }
      goto LABEL_10;
    }
    uint64_t v8 = MEMORY[0x21054E050](0, a2);
    swift_unknownObjectRelease();
    if (v8 == a1)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      return 1;
    }
    if (v4 == 1) {
      goto LABEL_10;
    }
    uint64_t v9 = 1;
    while (1)
    {
      uint64_t result = MEMORY[0x21054E050](v9, a2);
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = result;
      swift_unknownObjectRelease();
      if (v11 == a1) {
        goto LABEL_21;
      }
      ++v9;
      if (v10 == v4) {
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    goto LABEL_5;
  }
  if ((((result & 1) == 0) ^ *(unsigned __int8 *)(a2 + 32))) {
    return 1;
  }
  if (v2 != 1)
  {
    uint64_t v4 = 33;
    while (1)
    {
      uint64_t v5 = v4 - 31;
      if (__OFADD__(v4 - 32, 1)) {
        break;
      }
      char v3 = ((result & 1) == 0) ^ *(unsigned char *)(a2 + v4);
      if ((v3 & 1) == 0)
      {
        ++v4;
        if (v5 != v2) {
          continue;
        }
      }
      return v3 & 1;
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    char v3 = 0;
    return v3 & 1;
  }
  return result;
}

uint64_t specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  *(void *)(v11 + 352) = a6;
  *(void *)(v11 + 360) = v10;
  *(unsigned char *)(v11 + 92) = a5;
  *(unsigned char *)(v11 + 91) = a4;
  *(double *)(v11 + 336) = a9;
  *(double *)(v11 + 344) = a10;
  *(double *)(v11 + 320) = a7;
  *(double *)(v11 + 328) = a8;
  *(void *)(v11 + 304) = a2;
  *(void *)(v11 + 312) = a3;
  *(void *)(v11 + 296) = a1;
  uint64_t v12 = type metadata accessor for CRKeyPath();
  *(void *)(v11 + 368) = v12;
  *(void *)(v11 + 376) = *(void *)(v12 - 8);
  *(void *)(v11 + 384) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:), 0, 0);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  *(void *)(v11 + 560) = v10;
  *(void *)(v11 + 552) = a6;
  *(unsigned char *)(v11 + 92) = a5;
  *(unsigned char *)(v11 + 91) = a4;
  *(double *)(v11 + 544) = a10;
  *(double *)(v11 + 536) = a9;
  *(double *)(v11 + 528) = a8;
  *(double *)(v11 + 520) = a7;
  *(void *)(v11 + 504) = a2;
  *(void *)(v11 + 512) = a3;
  *(void *)(v11 + 496) = a1;
  uint64_t v12 = type metadata accessor for CRKeyPath();
  *(void *)(v11 + 568) = v12;
  *(void *)(v11 + 576) = *(void *)(v12 - 8);
  *(void *)(v11 + 584) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:), 0, 0);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  *(void *)(v11 + 352) = a6;
  *(void *)(v11 + 360) = v10;
  *(unsigned char *)(v11 + 92) = a5;
  *(unsigned char *)(v11 + 91) = a4;
  *(double *)(v11 + 336) = a9;
  *(double *)(v11 + 344) = a10;
  *(double *)(v11 + 320) = a7;
  *(double *)(v11 + 328) = a8;
  *(void *)(v11 + 304) = a2;
  *(void *)(v11 + 312) = a3;
  *(void *)(v11 + 296) = a1;
  uint64_t v12 = type metadata accessor for CRKeyPath();
  *(void *)(v11 + 368) = v12;
  *(void *)(v11 + 376) = *(void *)(v12 - 8);
  *(void *)(v11 + 384) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:), 0, 0);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  *(void *)(v11 + 560) = v10;
  *(void *)(v11 + 552) = a6;
  *(unsigned char *)(v11 + 92) = a5;
  *(unsigned char *)(v11 + 91) = a4;
  *(double *)(v11 + 544) = a10;
  *(double *)(v11 + 536) = a9;
  *(double *)(v11 + 528) = a8;
  *(double *)(v11 + 520) = a7;
  *(void *)(v11 + 504) = a2;
  *(void *)(v11 + 512) = a3;
  *(void *)(v11 + 496) = a1;
  uint64_t v12 = type metadata accessor for CRKeyPath();
  *(void *)(v11 + 568) = v12;
  *(void *)(v11 + 576) = *(void *)(v12 - 8);
  *(void *)(v11 + 584) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:), 0, 0);
}

uint64_t specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 91);
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v0 + 360) + 72);
  swift_beginAccess();
  if (v1 == 1)
  {
    int v3 = 0;
    uint64_t v4 = 2;
  }
  else
  {
    int v3 = *v2;
    uint64_t v4 = 1;
  }
  uint64_t v5 = *(void *)(v0 + 360);
  id v6 = objc_msgSend(self, sel_traitCollectionWithUserInterfaceStyle_, v4);
  *(void *)(v0 + 392) = v6;
  swift_beginAccess();
  char v7 = *(void **)(v5 + 56);
  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_resolvedColorWithTraitCollection_, v6);
    id v9 = objc_msgSend(v8, sel_CGColor);
  }
  else
  {
    id v9 = 0;
  }
  char v40 = v3;
  if (v9) {
    int v10 = 0;
  }
  else {
    int v10 = v3;
  }
  if (v10 == 1)
  {
    id v11 = objc_msgSend(self, sel_systemBackgroundColor);
    id v12 = objc_msgSend(v11, sel_resolvedColorWithTraitCollection_, v6);

    id v9 = objc_msgSend(v12, sel_CGColor);
  }
  *(void *)(v0 + 400) = v9;
  uint64_t v13 = *(void *)(v0 + 352);
  uint64_t v14 = *(void **)(v0 + 360);
  uint64_t v15 = v14[5];
  uint64_t v16 = v14[6];
  __swift_project_boxed_opaque_existential_1(v14 + 2, v15);
  double v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  uint64_t v18 = v14[5];
  uint64_t v19 = v14[6];
  __swift_project_boxed_opaque_existential_1(v14 + 2, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v13, v18, v19);
  if (*(void *)(v0 + 208))
  {
    outlined init with take of FindResult((long long *)(v0 + 184), v0 + 144);
    uint64_t v20 = *(void *)(v0 + 168);
    uint64_t v21 = *(void *)(v0 + 176);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 144), v20);
    uint64_t v22 = (CGContext *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    *(void *)(v0 + 408) = v22;
    uint64_t v23 = *(void *)(v0 + 168);
    uint64_t v24 = *(void *)(v0 + 176);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 144), v23);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    if (v9)
    {
      char v25 = (CGColor *)v9;
      CGContextSetFillColorWithColor(v22, v25);
      ClipBoundingBoCGFloat x = CGContextGetClipBoundingBox(v22);
      CGContextFillRect(v22, ClipBoundingBox);
    }
    uint64_t v26 = *(void *)(v0 + 360);
    char v27 = *(unsigned char *)(v0 + 92);
    char v28 = *(unsigned char *)(v0 + 91);
    v44.size.CGFloat width = *(CGFloat *)(v0 + 336);
    v44.size.CGFloat height = *(CGFloat *)(v0 + 344);
    double v30 = *(double *)(v0 + 320);
    double v29 = *(double *)(v0 + 328);
    v44.origin.CGFloat x = v30;
    v44.origin.CGFloat y = v29;
    double v31 = v17 / CGRectGetWidth(v44);
    *(double *)(v0 + 96) = v31;
    *(void *)(v0 + 104) = 0;
    *(void *)(v0 + 112) = 0;
    *(double *)(v0 + 120) = v31;
    *(double *)(v0 + 128) = -(v30 * v31);
    *(double *)(v0 + 136) = -(v29 * v31);
    CGContextConcatCTM(v22, (CGAffineTransform *)(v0 + 96));
    swift_beginAccess();
    uint64_t v32 = *(void **)(v26 + 64);
    *(void *)(v0 + 416) = v32;
    LOBYTE(v26) = *(unsigned char *)(v26 + 73);
    id v33 = v32;
    static CRKeyPath.unique.getter();
    *(unsigned char *)(v0 + 16) = v40;
    *(unsigned char *)(v0 + 17) = v28;
    *(unsigned char *)(v0 + 18) = v27;
    *(void *)(v0 + 24) = v32;
    *(unsigned char *)(v0 + 32) = 1;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(unsigned char *)(v0 + 72) = 1;
    *(void *)(v0 + 80) = 0;
    *(_WORD *)(v0 + 88) = 0;
    *(unsigned char *)(v0 + 90) = v26;
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)
                                                            + async function pointer to specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:));
    id v34 = v33;
    uint64_t v35 = (void *)swift_task_alloc();
    *(void *)(v0 + 424) = v35;
    *uint64_t v35 = v0;
    v35[1] = specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:);
    uint64_t v36 = *(void *)(v0 + 312);
    return v41((uint64_t)v22, v36, v0 + 16);
  }
  else
  {
    uint64_t v38 = *(void *)(v0 + 296);

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 184, &demangling cache variable for type metadata for RendererContext?);
    *(_OWORD *)uint64_t v38 = 0u;
    *(_OWORD *)(v38 + 16) = 0u;
    *(void *)(v38 + 32) = 0;
    swift_task_dealloc();
    long long v39 = *(uint64_t (**)(void))(v0 + 8);
    return v39();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  int v1 = *(void **)(*(void *)v0 + 416);
  uint64_t v2 = *(void *)(*(void *)v0 + 384);
  int v3 = *(void *)(*(void *)v0 + 376);
  uint64_t v4 = *(void *)(*(void *)v0 + 368);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return MEMORY[0x270FA2498](specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:), 0, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v2 = (void *)v0[51];
  int v1 = (void *)v0[52];
  uint64_t v4 = (void *)v0[49];
  int v3 = (void *)v0[50];
  uint64_t v5 = v0[37];
  id v6 = v0[21];
  char v7 = v0[22];
  __swift_project_boxed_opaque_existential_1(v0 + 18, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);

  outlined init with copy of FindResult((uint64_t)(v0 + 18), v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 18));
  swift_task_dealloc();
  id v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  uint64_t v0;
  int v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  int v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGContext *v22;
  uint64_t v23;
  uint64_t v24;
  CGColor *v25;
  uint64_t v26;
  char v27;
  char v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  id v33;
  id v34;
  CGFloat v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  void *v53;
  uint64_t v55;
  uint64_t (*v56)(void);
  CGFloat rect;
  char v58;
  CGFloat v59;
  CGAffineTransform v60;
  uint64_t v61;
  uint64_t v62;
  CGRect ClipBoundingBox;
  CGRect v64;
  CGRect v65;
  CGRect v66;

  uint64_t v61 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 91);
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v0 + 560) + 72);
  swift_beginAccess();
  if (v1 == 1)
  {
    int v3 = 0;
    uint64_t v4 = 2;
  }
  else
  {
    int v3 = *v2;
    uint64_t v4 = 1;
  }
  uint64_t v5 = *(void *)(v0 + 560);
  id v6 = objc_msgSend(self, sel_traitCollectionWithUserInterfaceStyle_, v4);
  *(void *)(v0 + 592) = v6;
  swift_beginAccess();
  char v7 = *(void **)(v5 + 56);
  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_resolvedColorWithTraitCollection_, v6);
    id v9 = objc_msgSend(v8, sel_CGColor);
  }
  else
  {
    id v9 = 0;
  }
  uint64_t v58 = v3;
  if (v9) {
    int v10 = 0;
  }
  else {
    int v10 = v3;
  }
  if (v10 == 1)
  {
    id v11 = objc_msgSend(self, sel_systemBackgroundColor);
    id v12 = objc_msgSend(v11, sel_resolvedColorWithTraitCollection_, v6);

    id v9 = objc_msgSend(v12, sel_CGColor);
  }
  *(void *)(v0 + 600) = v9;
  uint64_t v13 = *(void **)(v0 + 560);
  uint64_t v14 = *(void *)(v0 + 552);
  uint64_t v15 = v13[5];
  uint64_t v16 = v13[6];
  __swift_project_boxed_opaque_existential_1(v13 + 2, v15);
  double v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  uint64_t v18 = v13[5];
  uint64_t v19 = v13[6];
  __swift_project_boxed_opaque_existential_1(v13 + 2, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v14, v18, v19);
  if (*(void *)(v0 + 400))
  {
    outlined init with take of FindResult((long long *)(v0 + 376), v0 + 336);
    uint64_t v20 = *(void *)(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 368);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 336), v20);
    uint64_t v22 = (CGContext *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    *(void *)(v0 + 608) = v22;
    uint64_t v23 = *(void *)(v0 + 360);
    uint64_t v24 = *(void *)(v0 + 368);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 336), v23);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    if (v9)
    {
      char v25 = (CGColor *)v9;
      CGContextSetFillColorWithColor(v22, v25);
      ClipBoundingBoCGFloat x = CGContextGetClipBoundingBox(v22);
      CGContextFillRect(v22, ClipBoundingBox);
    }
    uint64_t v26 = *(void *)(v0 + 560);
    char v27 = *(unsigned char *)(v0 + 92);
    char v28 = *(unsigned char *)(v0 + 91);
    v64.size.CGFloat height = *(CGFloat *)(v0 + 544);
    v64.size.CGFloat width = *(CGFloat *)(v0 + 536);
    double v29 = *(double *)(v0 + 528);
    double v30 = *(double *)(v0 + 520);
    v64.origin.CGFloat x = v30;
    v64.origin.CGFloat y = v29;
    double v31 = v17 / CGRectGetWidth(v64);
    *(double *)(v0 + 192) = v31;
    *(void *)(v0 + 200) = 0;
    *(void *)(v0 + 208) = 0;
    *(double *)(v0 + 216) = v31;
    *(double *)(v0 + 224) = -(v30 * v31);
    *(double *)(v0 + 232) = -(v29 * v31);
    CGContextConcatCTM(v22, (CGAffineTransform *)(v0 + 192));
    swift_beginAccess();
    uint64_t v32 = *(void **)(v26 + 64);
    *(void *)(v0 + 616) = v32;
    LOBYTE(v26) = *(unsigned char *)(v26 + 73);
    id v33 = v32;
    static CRKeyPath.unique.getter();
    *(unsigned char *)(v0 + 16) = v58;
    *(unsigned char *)(v0 + 17) = v28;
    *(unsigned char *)(v0 + 18) = v27;
    *(void *)(v0 + 24) = v32;
    *(unsigned char *)(v0 + 32) = 1;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(unsigned char *)(v0 + 72) = 1;
    *(void *)(v0 + 80) = 0;
    *(_WORD *)(v0 + 88) = 0;
    *(unsigned char *)(v0 + 90) = v26;
    id v34 = v33;
    CGContextSaveGState(v22);
    type metadata accessor for Image();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    uint64_t v35 = *(double *)(v0 + 488);
    Image.pdfContentsBounds.getter();
    uint64_t v37 = v36;
    long long v39 = v38;
    uint64_t v59 = v40;
    rect = v41;
    CGAffineTransformMakeRotation(&v60, v35);
    a = v60.a;
    b = v60.b;
    c = v60.c;
    d = v60.d;
    tCGFloat x = v60.tx;
    tCGFloat y = v60.ty;
    *(CGFloat *)(v0 + 288) = v60.a;
    *(CGFloat *)(v0 + 296) = b;
    *(CGFloat *)(v0 + 304) = c;
    *(CGFloat *)(v0 + 312) = d;
    *(CGFloat *)(v0 + 320) = tx;
    *(CGFloat *)(v0 + 328) = ty;
    v65.origin.CGFloat x = v37;
    v65.origin.CGFloat y = v39;
    v65.size.CGFloat width = v59;
    v65.size.CGFloat height = rect;
    uint64_t v66 = CGRectApplyAffineTransform(v65, (CGAffineTransform *)(v0 + 288));
    CGAffineTransformMakeTranslation(&v60, v37 - v66.origin.x, v39 - v66.origin.y);
    objc_super v48 = *(_OWORD *)&v60.a;
    uint64_t v49 = *(_OWORD *)&v60.c;
    uint64_t v50 = *(_OWORD *)&v60.tx;
    *(CGFloat *)(v0 + 240) = a;
    *(CGFloat *)(v0 + 248) = b;
    *(CGFloat *)(v0 + 256) = c;
    *(CGFloat *)(v0 + 264) = d;
    *(CGFloat *)(v0 + 272) = tx;
    *(CGFloat *)(v0 + 280) = ty;
    *(_OWORD *)(v0 + 144) = v48;
    *(_OWORD *)(v0 + 160) = v49;
    *(_OWORD *)(v0 + 176) = v50;
    CGAffineTransformConcat(&v60, (CGAffineTransform *)(v0 + 240), (CGAffineTransform *)(v0 + 144));
    uint64_t v51 = *(_OWORD *)&v60.c;
    uint64_t v52 = *(_OWORD *)&v60.tx;
    *(_OWORD *)(v0 + 96) = *(_OWORD *)&v60.a;
    *(_OWORD *)(v0 + 112) = v51;
    *(_OWORD *)(v0 + 128) = v52;
    CGContextConcatCTM(v22, (CGAffineTransform *)(v0 + 96));
    uint64_t v53 = (void *)swift_task_alloc();
    *(void *)(v0 + 624) = v53;
    *uint64_t v53 = v0;
    v53[1] = specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:);
    return Image.renderImage(in:isTopLevel:)((uint64_t)v22, 1);
  }
  else
  {
    uint64_t v55 = *(void *)(v0 + 496);

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 376, &demangling cache variable for type metadata for RendererContext?);
    *(_OWORD *)uint64_t v55 = 0u;
    *(_OWORD *)(v55 + 16) = 0u;
    *(void *)(v55 + 32) = 0;
    swift_task_dealloc();
    uint64_t v56 = *(uint64_t (**)(void))(v0 + 8);
    return v56();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  CGContextRestoreGState(*(CGContextRef *)(v0 + 608));
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)
                                                         + async function pointer to specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:));
  int v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 632) = v1;
  *int v1 = v0;
  v1[1] = specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:);
  uint64_t v2 = *(void *)(v0 + 608);
  int v3 = *(void *)(v0 + 512);
  return v5(v2, v3, v0 + 16);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  int v1 = *(void **)(*(void *)v0 + 616);
  uint64_t v2 = *(void *)(*(void *)v0 + 584);
  int v3 = *(void *)(*(void *)v0 + 576);
  uint64_t v4 = *(void *)(*(void *)v0 + 568);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return MEMORY[0x270FA2498](specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:), 0, 0);
}

{
  uint64_t v0;
  int v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  int v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGContext *v22;
  uint64_t v23;
  uint64_t v24;
  CGColor *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  char v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  char v48;
  uint64_t v49;
  CGRect ClipBoundingBox;
  CGRect v51;

  int v1 = *(unsigned __int8 *)(v0 + 91);
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v0 + 360) + 72);
  swift_beginAccess();
  if (v1 == 1)
  {
    int v3 = 0;
    uint64_t v4 = 2;
  }
  else
  {
    int v3 = *v2;
    uint64_t v4 = 1;
  }
  uint64_t v5 = *(void *)(v0 + 360);
  id v6 = objc_msgSend(self, sel_traitCollectionWithUserInterfaceStyle_, v4);
  swift_beginAccess();
  char v7 = *(void **)(v5 + 56);
  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_resolvedColorWithTraitCollection_, v6);
    id v9 = objc_msgSend(v8, sel_CGColor);
  }
  else
  {
    id v9 = 0;
  }
  objc_super v48 = v3;
  if (v9) {
    int v10 = 0;
  }
  else {
    int v10 = v3;
  }
  if (v10 == 1)
  {
    id v11 = objc_msgSend(self, sel_systemBackgroundColor);
    id v12 = objc_msgSend(v11, sel_resolvedColorWithTraitCollection_, v6);

    id v9 = objc_msgSend(v12, sel_CGColor);
  }
  uint64_t v13 = *(void *)(v0 + 352);
  uint64_t v14 = *(void **)(v0 + 360);
  uint64_t v15 = v14[5];
  uint64_t v16 = v14[6];
  __swift_project_boxed_opaque_existential_1(v14 + 2, v15);
  double v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  uint64_t v18 = v14[5];
  uint64_t v19 = v14[6];
  __swift_project_boxed_opaque_existential_1(v14 + 2, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v13, v18, v19);
  if (*(void *)(v0 + 208))
  {
    long long v47 = v6;
    outlined init with take of FindResult((long long *)(v0 + 184), v0 + 144);
    uint64_t v20 = *(void *)(v0 + 168);
    uint64_t v21 = *(void *)(v0 + 176);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 144), v20);
    uint64_t v22 = (CGContext *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    uint64_t v23 = *(void *)(v0 + 168);
    uint64_t v24 = *(void *)(v0 + 176);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 144), v23);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    if (v9)
    {
      char v25 = (CGColor *)v9;
      CGContextSetFillColorWithColor(v22, v25);
      ClipBoundingBoCGFloat x = CGContextGetClipBoundingBox(v22);
      CGContextFillRect(v22, ClipBoundingBox);
    }
    char v27 = *(void *)(v0 + 376);
    uint64_t v26 = *(void *)(v0 + 384);
    char v28 = *(void *)(v0 + 360);
    double v29 = *(unsigned char *)(v0 + 92);
    double v30 = *(unsigned char *)(v0 + 91);
    v51.size.CGFloat width = *(CGFloat *)(v0 + 336);
    v51.size.CGFloat height = *(CGFloat *)(v0 + 344);
    uint64_t v32 = *(double *)(v0 + 320);
    double v31 = *(double *)(v0 + 328);
    uint64_t v43 = *(void *)(v0 + 312);
    CGRect v44 = *(void *)(v0 + 368);
    uint64_t v45 = *(void *)(v0 + 296);
    v51.origin.CGFloat x = v32;
    v51.origin.CGFloat y = v31;
    id v33 = v17 / CGRectGetWidth(v51);
    *(double *)(v0 + 96) = v33;
    *(void *)(v0 + 104) = 0;
    *(void *)(v0 + 112) = 0;
    *(double *)(v0 + 120) = v33;
    *(double *)(v0 + 128) = -(v32 * v33);
    *(double *)(v0 + 136) = -(v31 * v33);
    CGContextConcatCTM(v22, (CGAffineTransform *)(v0 + 96));
    swift_beginAccess();
    id v34 = *(void **)(v28 + 64);
    uint64_t v46 = v9;
    uint64_t v35 = *(unsigned char *)(v28 + 73);
    uint64_t v36 = v34;
    static CRKeyPath.unique.getter();
    *(unsigned char *)(v0 + 16) = v48;
    *(unsigned char *)(v0 + 17) = v30;
    *(unsigned char *)(v0 + 18) = v29;
    *(void *)(v0 + 24) = v34;
    *(unsigned char *)(v0 + 32) = 1;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(unsigned char *)(v0 + 72) = 1;
    *(void *)(v0 + 80) = 0;
    *(_WORD *)(v0 + 88) = 0;
    *(unsigned char *)(v0 + 90) = v35;
    uint64_t v37 = v36;
    specialized Shape.renderSync<A>(in:id:capsule:options:)(v22, v26, v43, v0 + 16);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v44);
    uint64_t v38 = *(void *)(v0 + 168);
    long long v39 = *(void *)(v0 + 176);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 144), v38);
    (*(void (**)(uint64_t, uint64_t))(v39 + 32))(v38, v39);

    outlined init with copy of FindResult(v0 + 144, v45);
    __swift_destroy_boxed_opaque_existential_1(v0 + 144);
  }
  else
  {
    char v40 = *(void *)(v0 + 296);

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 184, &demangling cache variable for type metadata for RendererContext?);
    *(_OWORD *)char v40 = 0u;
    *(_OWORD *)(v40 + 16) = 0u;
    *(void *)(v40 + 32) = 0;
  }
  swift_task_dealloc();
  uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
  return v41();
}

{
  uint64_t v0;
  int v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  int v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGContext *v22;
  uint64_t v23;
  uint64_t v24;
  CGColor *v25;
  uint64_t v26;
  char v27;
  char v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  id v33;
  id v34;
  CGFloat v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  void *v53;
  uint64_t v55;
  uint64_t (*v56)(void);
  CGFloat rect;
  char v58;
  CGFloat v59;
  CGAffineTransform v60;
  uint64_t v61;
  uint64_t v62;
  CGRect ClipBoundingBox;
  CGRect v64;
  CGRect v65;
  CGRect v66;

  uint64_t v61 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 91);
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v0 + 560) + 72);
  swift_beginAccess();
  if (v1 == 1)
  {
    int v3 = 0;
    uint64_t v4 = 2;
  }
  else
  {
    int v3 = *v2;
    uint64_t v4 = 1;
  }
  uint64_t v5 = *(void *)(v0 + 560);
  id v6 = objc_msgSend(self, sel_traitCollectionWithUserInterfaceStyle_, v4);
  *(void *)(v0 + 592) = v6;
  swift_beginAccess();
  char v7 = *(void **)(v5 + 56);
  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_resolvedColorWithTraitCollection_, v6);
    id v9 = objc_msgSend(v8, sel_CGColor);
  }
  else
  {
    id v9 = 0;
  }
  uint64_t v58 = v3;
  if (v9) {
    int v10 = 0;
  }
  else {
    int v10 = v3;
  }
  if (v10 == 1)
  {
    id v11 = objc_msgSend(self, sel_systemBackgroundColor);
    id v12 = objc_msgSend(v11, sel_resolvedColorWithTraitCollection_, v6);

    id v9 = objc_msgSend(v12, sel_CGColor);
  }
  *(void *)(v0 + 600) = v9;
  uint64_t v13 = *(void **)(v0 + 560);
  uint64_t v14 = *(void *)(v0 + 552);
  uint64_t v15 = v13[5];
  uint64_t v16 = v13[6];
  __swift_project_boxed_opaque_existential_1(v13 + 2, v15);
  double v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  uint64_t v18 = v13[5];
  uint64_t v19 = v13[6];
  __swift_project_boxed_opaque_existential_1(v13 + 2, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v14, v18, v19);
  if (*(void *)(v0 + 400))
  {
    outlined init with take of FindResult((long long *)(v0 + 376), v0 + 336);
    uint64_t v20 = *(void *)(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 368);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 336), v20);
    uint64_t v22 = (CGContext *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    *(void *)(v0 + 608) = v22;
    uint64_t v23 = *(void *)(v0 + 360);
    uint64_t v24 = *(void *)(v0 + 368);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 336), v23);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    if (v9)
    {
      char v25 = (CGColor *)v9;
      CGContextSetFillColorWithColor(v22, v25);
      ClipBoundingBoCGFloat x = CGContextGetClipBoundingBox(v22);
      CGContextFillRect(v22, ClipBoundingBox);
    }
    uint64_t v26 = *(void *)(v0 + 560);
    char v27 = *(unsigned char *)(v0 + 92);
    char v28 = *(unsigned char *)(v0 + 91);
    v64.size.CGFloat height = *(CGFloat *)(v0 + 544);
    v64.size.CGFloat width = *(CGFloat *)(v0 + 536);
    double v29 = *(double *)(v0 + 528);
    double v30 = *(double *)(v0 + 520);
    v64.origin.CGFloat x = v30;
    v64.origin.CGFloat y = v29;
    double v31 = v17 / CGRectGetWidth(v64);
    *(double *)(v0 + 192) = v31;
    *(void *)(v0 + 200) = 0;
    *(void *)(v0 + 208) = 0;
    *(double *)(v0 + 216) = v31;
    *(double *)(v0 + 224) = -(v30 * v31);
    *(double *)(v0 + 232) = -(v29 * v31);
    CGContextConcatCTM(v22, (CGAffineTransform *)(v0 + 192));
    swift_beginAccess();
    uint64_t v32 = *(void **)(v26 + 64);
    *(void *)(v0 + 616) = v32;
    LOBYTE(v26) = *(unsigned char *)(v26 + 73);
    id v33 = v32;
    static CRKeyPath.unique.getter();
    *(unsigned char *)(v0 + 16) = v58;
    *(unsigned char *)(v0 + 17) = v28;
    *(unsigned char *)(v0 + 18) = v27;
    *(void *)(v0 + 24) = v32;
    *(unsigned char *)(v0 + 32) = 1;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(unsigned char *)(v0 + 72) = 1;
    *(void *)(v0 + 80) = 0;
    *(_WORD *)(v0 + 88) = 0;
    *(unsigned char *)(v0 + 90) = v26;
    id v34 = v33;
    CGContextSaveGState(v22);
    type metadata accessor for Image();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    uint64_t v35 = *(double *)(v0 + 488);
    Image.pdfContentsBounds.getter();
    uint64_t v37 = v36;
    long long v39 = v38;
    uint64_t v59 = v40;
    rect = v41;
    CGAffineTransformMakeRotation(&v60, v35);
    a = v60.a;
    b = v60.b;
    c = v60.c;
    d = v60.d;
    tCGFloat x = v60.tx;
    tCGFloat y = v60.ty;
    *(CGFloat *)(v0 + 288) = v60.a;
    *(CGFloat *)(v0 + 296) = b;
    *(CGFloat *)(v0 + 304) = c;
    *(CGFloat *)(v0 + 312) = d;
    *(CGFloat *)(v0 + 320) = tx;
    *(CGFloat *)(v0 + 328) = ty;
    v65.origin.CGFloat x = v37;
    v65.origin.CGFloat y = v39;
    v65.size.CGFloat width = v59;
    v65.size.CGFloat height = rect;
    uint64_t v66 = CGRectApplyAffineTransform(v65, (CGAffineTransform *)(v0 + 288));
    CGAffineTransformMakeTranslation(&v60, v37 - v66.origin.x, v39 - v66.origin.y);
    objc_super v48 = *(_OWORD *)&v60.a;
    uint64_t v49 = *(_OWORD *)&v60.c;
    uint64_t v50 = *(_OWORD *)&v60.tx;
    *(CGFloat *)(v0 + 240) = a;
    *(CGFloat *)(v0 + 248) = b;
    *(CGFloat *)(v0 + 256) = c;
    *(CGFloat *)(v0 + 264) = d;
    *(CGFloat *)(v0 + 272) = tx;
    *(CGFloat *)(v0 + 280) = ty;
    *(_OWORD *)(v0 + 144) = v48;
    *(_OWORD *)(v0 + 160) = v49;
    *(_OWORD *)(v0 + 176) = v50;
    CGAffineTransformConcat(&v60, (CGAffineTransform *)(v0 + 240), (CGAffineTransform *)(v0 + 144));
    uint64_t v51 = *(_OWORD *)&v60.c;
    uint64_t v52 = *(_OWORD *)&v60.tx;
    *(_OWORD *)(v0 + 96) = *(_OWORD *)&v60.a;
    *(_OWORD *)(v0 + 112) = v51;
    *(_OWORD *)(v0 + 128) = v52;
    CGContextConcatCTM(v22, (CGAffineTransform *)(v0 + 96));
    uint64_t v53 = (void *)swift_task_alloc();
    *(void *)(v0 + 624) = v53;
    *uint64_t v53 = v0;
    v53[1] = specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:);
    return Image.renderImage(in:isTopLevel:)((uint64_t)v22, 1);
  }
  else
  {
    uint64_t v55 = *(void *)(v0 + 496);

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 376, &demangling cache variable for type metadata for RendererContext?);
    *(_OWORD *)uint64_t v55 = 0u;
    *(_OWORD *)(v55 + 16) = 0u;
    *(void *)(v55 + 32) = 0;
    swift_task_dealloc();
    uint64_t v56 = *(uint64_t (**)(void))(v0 + 8);
    return v56();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  CGContextRestoreGState(*(CGContextRef *)(v0 + 608));
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)
                                                         + async function pointer to specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:));
  int v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 632) = v1;
  *int v1 = v0;
  v1[1] = specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:);
  uint64_t v2 = *(void *)(v0 + 608);
  int v3 = *(void *)(v0 + 512);
  return v5(v2, v3, v0 + 16);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  int v1 = *(void **)(*(void *)v0 + 616);
  uint64_t v2 = *(void *)(*(void *)v0 + 584);
  int v3 = *(void *)(*(void *)v0 + 576);
  uint64_t v4 = *(void *)(*(void *)v0 + 568);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return MEMORY[0x270FA2498](specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:), 0, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  int v1 = (void *)v0[77];
  uint64_t v2 = (void *)v0[76];
  int v3 = (void *)v0[75];
  uint64_t v4 = (void *)v0[74];
  uint64_t v5 = v0[62];
  id v6 = v0[45];
  char v7 = v0[46];
  __swift_project_boxed_opaque_existential_1(v0 + 42, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);

  outlined init with copy of FindResult((uint64_t)(v0 + 42), v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 42));
  swift_task_dealloc();
  id v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t specialized PaperDocument.init<A>(url:in:assetManager:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocument?);
  MEMORY[0x270FA5388](v7 - 8);
  id v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset)?);
  MEMORY[0x270FA5388](v10 - 8);
  id v12 = (void **)((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for CRAsset();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v30 - v18;
  type metadata accessor for PaperKitPDFDocument();
  static PaperKitPDFDocument._load(_:assetManager:)(a1, v12);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset));
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v12, 1, v20) == 1)
  {
    swift_release();
    swift_release();
    uint64_t v21 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a1, v21);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset)?);
LABEL_5:
    uint64_t v26 = type metadata accessor for PaperDocument(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(a4, 1, 1, v26);
  }
  uint64_t v30 = a4;
  uint64_t v22 = *v12;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, (char *)v12 + *(int *)(v20 + 48), v13);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, v13);
  specialized PaperDocument.init<A>(pdfDocument:asset:in:assetManager:useProxyPages:)(v22, (uint64_t)v16, v31, a3, 0, (uint64_t)v9);
  uint64_t v23 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(a1, v23);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  uint64_t v24 = type metadata accessor for PaperDocument(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v9, 1, v24))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for PaperDocument?);
    a4 = v30;
    goto LABEL_5;
  }
  uint64_t v28 = (uint64_t)v9;
  uint64_t v29 = v30;
  outlined init with take of Image(v28, v30, type metadata accessor for PaperDocument);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v29, 0, 1, v24);
}

char *specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t specialized static AnnotationImporter.importElement<A>(_:from:in:id:scale:mediaBox:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, CGFloat a6@<D0>, double a7@<D2>, double a8@<D4>)
{
  uint64_t v191 = a4;
  uint64_t v192 = a3;
  uint64_t v194 = a5;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v181 = (char *)&v171 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x270FA5388](v15 - 8);
  id v180 = (char *)&v171 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Signature?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v183 = (char *)&v171 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = type metadata accessor for Signature();
  uint64_t v182 = *(void *)(v184 - 8);
  MEMORY[0x270FA5388](v184);
  uint64_t v172 = (uint64_t)&v171 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v173 = (uint64_t)&v171 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v176 = *(void *)(v22 - 8);
  uint64_t v177 = v22;
  MEMORY[0x270FA5388](v22);
  Swift::Bool v178 = (char *)&v171 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for PKDrawing();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v185 = v24;
  uint64_t v186 = v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v174 = (char *)&v171 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v175 = (char *)&v171 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v31 = (char *)&v171 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  id v34 = (char *)&v171 - v33;
  uint64_t v35 = type metadata accessor for CRKeyPath();
  uint64_t v188 = *(void *)(v35 - 8);
  uint64_t v189 = v35;
  MEMORY[0x270FA5388](v35);
  uint64_t v190 = (char *)&v171 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v37 - 8);
  long long v39 = (char *)&v171 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)&v171 - v41;
  uint64_t v193 = type metadata accessor for Shape();
  uint64_t v43 = *(void *)(v193 - 8);
  MEMORY[0x270FA5388](v193);
  uint64_t v179 = (uint64_t)&v171 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v45);
  long long v47 = (char *)&v171 - v46;
  MEMORY[0x270FA5388](v48);
  uint64_t v187 = (uint64_t)&v171 - v49;
  MEMORY[0x270FA5388](v50);
  uint64_t v52 = (char *)&v171 - v51;
  CGAffineTransformMakeScale(&t1, a6, a6);
  double a = t1.a;
  double b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransform v198 = t1;
  if (!a2)
  {
    memset(&t1, 0, 32);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&t1, &demangling cache variable for type metadata for Any?);
    goto LABEL_27;
  }
  if (objc_msgSend(a2, sel_valueForAnnotationKey_, *MEMORY[0x263F14790]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(&v197, 0, 32);
  }
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v197, (uint64_t)&t1, &demangling cache variable for type metadata for Any?);
  if (*(void *)&t1.d)
  {
    if (swift_dynamicCast()) {
      char a_low = LOBYTE(v197.a);
    }
    else {
      char a_low = 0;
    }
    if ((a_low & 2) == 0)
    {
      if ((a_low & 0x40) != 0)
      {
        uint64_t v60 = 2;
        if ((a_low & 0x80) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v60 = 0;
        if ((a_low & 0x80) == 0) {
          goto LABEL_22;
        }
      }
      goto LABEL_21;
    }
    if ((a_low & 0x40) == 0)
    {
      uint64_t v60 = 1;
      if ((a_low & 0x80) == 0) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    uint64_t v60 = 3;
    if (a_low < 0) {
LABEL_21:
    }
      v60 |= 4uLL;
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&t1, &demangling cache variable for type metadata for Any?);
    uint64_t v60 = 0;
  }
LABEL_22:
  uint64_t v61 = unk_26C14D610;
  if ((unk_26C14D610 & ~qword_26C14D608) == 0) {
    uint64_t v61 = 0;
  }
  uint64_t v62 = qword_26C14D618;
  if ((qword_26C14D618 & ~(v61 | qword_26C14D608)) == 0) {
    uint64_t v62 = 0;
  }
  a2 = (void *)(v60 | v61 | qword_26C14D608 | v62);
LABEL_27:
  self;
  if (swift_dynamicCastObjCClass())
  {
    uint64_t v63 = type metadata accessor for AnnotationImporter.ImportedElement();
    uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56);
    uint64_t v65 = v194;
LABEL_54:
    uint64_t v112 = 1;
    return v64(v65, v112, 1, v63);
  }
  unint64_t v171 = (unint64_t)a2;
  self;
  uint64_t v66 = swift_dynamicCastObjCClass();
  if (v66)
  {
    uint64_t v67 = (void *)v66;
    id v68 = a1;
    static AnnotationImporter.translateDoodleAnnotation(_:)(v67, (uint64_t)v42);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v42, 1, v193) == 1)
    {

      uint64_t v69 = &demangling cache variable for type metadata for Shape?;
LABEL_32:
      uint64_t v70 = (uint64_t)v42;
LABEL_53:
      outlined destroy of StocksKitCurrencyCache.Provider?(v70, v69);
      uint64_t v118 = v194;
      uint64_t v63 = type metadata accessor for AnnotationImporter.ImportedElement();
      uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56);
      uint64_t v65 = v118;
      goto LABEL_54;
    }
    outlined init with take of Image((uint64_t)v42, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for Shape);
    specialized CanvasElement.coordinateSpace.getter(&v197);
    CGAffineTransform t1 = v197;
    v196.double a = a;
    v196.double b = b;
    v196.CGFloat c = c;
    v196.CGFloat d = d;
    v196.tCGFloat x = tx;
    v196.tCGFloat y = ty;
    CGAffineTransformConcat(&v195, &t1, &v196);
    CGAffineTransform t1 = v195;
    specialized CanvasElement.coordinateSpace.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    uint64_t v74 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    *uint64_t v75 = sqrt(a * a + b * b) * *v75;
    v74(&v196, 0);
    CRAttributedString<>.apply(_:)(&v198.a);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    uint64_t v76 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    uint64_t v78 = v77;
    CGFloat v79 = *v77;
    CGFloat v80 = v77[1];
    CGFloat v81 = v77[2];
    CGFloat v82 = v77[3];
    v200.origin.CGFloat x = *v77;
    v200.origin.CGFloat y = v80;
    v200.size.CGFloat width = v81;
    v200.size.CGFloat height = v82;
    CGFloat MinX = CGRectGetMinX(v200);
    v201.origin.CGFloat x = v79;
    v201.origin.CGFloat y = v80;
    v201.size.CGFloat width = v81;
    v201.size.CGFloat height = v82;
    double v84 = a7 + a7 + a8 - CGRectGetMaxY(v201);
    v202.origin.CGFloat x = v79;
    v202.origin.CGFloat y = v80;
    v202.size.CGFloat width = v81;
    v202.size.CGFloat height = v82;
    CGFloat Width = CGRectGetWidth(v202);
    v203.origin.CGFloat x = v79;
    v203.origin.CGFloat y = v80;
    v203.size.CGFloat width = v81;
    v203.size.CGFloat height = v82;
    CGFloat Height = CGRectGetHeight(v203);
    *uint64_t v78 = MinX;
    v78[1] = v84;
    v78[2] = Width;
    v78[3] = Height;
    v76(&v196, 0);
    CRRegister.value.getter();
    double v87 = v196.a;
    CRRegister.value.getter();
    if (fabs(v87 + v196.a) > 0.01)
    {
      v196.double a = -v87;
      CRRegister.value.setter();
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    *(void *)&v195.double a = *(void *)&v196.a | v171;
    CRRegister.wrappedValue.setter();
    _s8PaperKit13CRAssetOrDataOWOcTm_0((uint64_t)v52, v187, (uint64_t (*)(void))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v188 + 16))(v190, v191, v189);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    uint64_t v88 = v194;
    SharedTagged_9.init<A>(_:_:id:)();

    uint64_t v89 = type metadata accessor for Shape;
    uint64_t v90 = (uint64_t)v52;
    goto LABEL_45;
  }
  self;
  uint64_t v71 = swift_dynamicCastObjCClass();
  if (v71)
  {
    uint64_t v72 = (void *)v71;
    id v73 = a1;
    static AnnotationImporter.translateStrokedAnnotation(_:)(v72, (uint64_t)v39);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v39, 1, v193) == 1)
    {

      uint64_t v69 = &demangling cache variable for type metadata for Shape?;
      uint64_t v70 = (uint64_t)v39;
      goto LABEL_53;
    }
    outlined init with take of Image((uint64_t)v39, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for Shape);
    specialized CanvasElement.coordinateSpace.getter(&v197);
    CGAffineTransform t1 = v197;
    v196.double a = a;
    v196.double b = b;
    v196.CGFloat c = c;
    v196.CGFloat d = d;
    v196.tCGFloat x = tx;
    v196.tCGFloat y = ty;
    CGAffineTransformConcat(&v195, &t1, &v196);
    CGAffineTransform t1 = v195;
    specialized CanvasElement.coordinateSpace.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    uint64_t v97 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    *uint64_t v98 = sqrt(a * a + b * b) * *v98;
    v97(&v196, 0);
    CRAttributedString<>.apply(_:)(&v198.a);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    uint64_t v99 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    int v101 = v100;
    CGFloat v102 = *v100;
    CGFloat v103 = v100[1];
    CGFloat v104 = v100[2];
    CGFloat v105 = v100[3];
    v204.origin.CGFloat x = *v100;
    v204.origin.CGFloat y = v103;
    v204.size.CGFloat width = v104;
    v204.size.CGFloat height = v105;
    CGFloat v106 = CGRectGetMinX(v204);
    v205.origin.CGFloat x = v102;
    v205.origin.CGFloat y = v103;
    v205.size.CGFloat width = v104;
    v205.size.CGFloat height = v105;
    double v107 = a7 + a7 + a8 - CGRectGetMaxY(v205);
    v206.origin.CGFloat x = v102;
    v206.origin.CGFloat y = v103;
    v206.size.CGFloat width = v104;
    v206.size.CGFloat height = v105;
    CGFloat v108 = CGRectGetWidth(v206);
    v207.origin.CGFloat x = v102;
    v207.origin.CGFloat y = v103;
    v207.size.CGFloat width = v104;
    v207.size.CGFloat height = v105;
    CGFloat v109 = CGRectGetHeight(v207);
    *int v101 = v106;
    v101[1] = v107;
    v101[2] = v108;
    v101[3] = v109;
    v99(&v196, 0);
    CRRegister.value.getter();
    double v110 = v196.a;
    CRRegister.value.getter();
    if (fabs(v110 + v196.a) > 0.01)
    {
      v196.double a = -v110;
      CRRegister.value.setter();
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    *(void *)&v195.double a = *(void *)&v196.a | v171;
    CRRegister.wrappedValue.setter();
    _s8PaperKit13CRAssetOrDataOWOcTm_0((uint64_t)v47, v187, (uint64_t (*)(void))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v188 + 16))(v190, v191, v189);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    uint64_t v88 = v194;
    SharedTagged_9.init<A>(_:_:id:)();

    uint64_t v89 = type metadata accessor for Shape;
    uint64_t v90 = (uint64_t)v47;
LABEL_45:
    _s8PaperKit0A8DocumentVWOhTm_0(v90, (uint64_t (*)(void))v89);
    uint64_t v111 = type metadata accessor for AnnotationImporter.ImportedElement();
    swift_storeEnumTagMultiPayload();
    uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56);
    uint64_t v65 = v88;
    goto LABEL_46;
  }
  self;
  uint64_t v91 = swift_dynamicCastObjCClass();
  if (!v91)
  {
    self;
    uint64_t v113 = swift_dynamicCastObjCClass();
    if (!v113)
    {
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v121 = v180;
      TaggedValue_9.init(_:)();
      t1.double a = 0.0;
      v197.double a = 0.0;
      uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
      uint64_t v123 = (uint64_t)v181;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v122 - 8) + 56))(v181, 1, 1, v122);
      v196.double a = 0.0;
      uint64_t v124 = v187;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v121, (uint64_t *)&t1, (uint64_t *)&v197, v123, (uint64_t *)&v196, v187, 0.0, 0.0, 0.0, 0.0, 5.0);
      objc_msgSend(a1, sel_drawingBounds);
      t1.double a = v125;
      t1.double b = v126;
      t1.CGFloat c = v127;
      t1.CGFloat d = v128;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      CRRegister.wrappedValue.setter();
      id v129 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
      CGRect v208 = *v130;
      t1.double a = a;
      t1.double b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.tCGFloat x = tx;
      t1.tCGFloat y = ty;
      *uint64_t v130 = CGRectApplyAffineTransform(v208, &t1);
      v129(&v197, 0);
      unint64_t v131 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
      uint64_t v133 = v132;
      CGFloat v134 = *v132;
      CGFloat v135 = v132[1];
      CGFloat v136 = v132[2];
      CGFloat v137 = v132[3];
      v209.origin.CGFloat x = *v132;
      v209.origin.CGFloat y = v135;
      v209.size.CGFloat width = v136;
      v209.size.CGFloat height = v137;
      CGFloat v138 = CGRectGetMinX(v209);
      v210.origin.CGFloat x = v134;
      v210.origin.CGFloat y = v135;
      v210.size.CGFloat width = v136;
      v210.size.CGFloat height = v137;
      double v139 = a7 + a7 + a8 - CGRectGetMaxY(v210);
      v211.origin.CGFloat x = v134;
      v211.origin.CGFloat y = v135;
      v211.size.CGFloat width = v136;
      v211.size.CGFloat height = v137;
      CGFloat v140 = CGRectGetWidth(v211);
      v212.origin.CGFloat x = v134;
      v212.origin.CGFloat y = v135;
      v212.size.CGFloat width = v136;
      v212.size.CGFloat height = v137;
      CGFloat v141 = CGRectGetHeight(v212);
      *uint64_t v133 = v138;
      v133[1] = v139;
      v133[2] = v140;
      v133[3] = v141;
      v131(&t1, 0);
      type metadata accessor for ShapeSecondaryProperties();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
      CRRegister.wrappedValue.getter();
      *(void *)&v197.double a = *(void *)&t1.a | v171;
      CRRegister.wrappedValue.setter();
      _s8PaperKit13CRAssetOrDataOWOcTm_0(v124, v179, (uint64_t (*)(void))type metadata accessor for Shape);
      (*(void (**)(char *, uint64_t, uint64_t))(v188 + 16))(v190, v191, v189);
      lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
      swift_retain();
      uint64_t v142 = v194;
      SharedTagged_9.init<A>(_:_:id:)();
      _s8PaperKit0A8DocumentVWOhTm_0(v124, (uint64_t (*)(void))type metadata accessor for Shape);
      uint64_t v111 = type metadata accessor for AnnotationImporter.ImportedElement();
      swift_storeEnumTagMultiPayload();
      uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56);
      uint64_t v65 = v142;
      goto LABEL_46;
    }
    uint64_t v114 = (void *)v113;
    id v115 = a1;
    uint64_t v42 = v183;
    static AnnotationImporter.translateSignatureAnnotation(_:)(v114, (uint64_t)v183);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v182 + 48))(v42, 1, v184) == 1)
    {

      uint64_t v69 = (uint64_t *)&demangling cache variable for type metadata for Signature?;
      goto LABEL_32;
    }
    uint64_t v143 = v173;
    outlined init with take of Image((uint64_t)v42, v173, (uint64_t (*)(void))type metadata accessor for Signature);
    Signature.apply(_:)(&v198);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    v144 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    id v146 = v145;
    CGFloat v147 = *v145;
    CGFloat v148 = v145[1];
    CGFloat v149 = v145[2];
    CGFloat v150 = v145[3];
    v213.origin.CGFloat x = *v145;
    v213.origin.CGFloat y = v148;
    v213.size.CGFloat width = v149;
    v213.size.CGFloat height = v150;
    CGFloat v151 = CGRectGetMinX(v213);
    v214.origin.CGFloat x = v147;
    v214.origin.CGFloat y = v148;
    v214.size.CGFloat width = v149;
    v214.size.CGFloat height = v150;
    double v152 = a7 + a7 + a8 - CGRectGetMaxY(v214);
    v215.origin.CGFloat x = v147;
    v215.origin.CGFloat y = v148;
    v215.size.CGFloat width = v149;
    v215.size.CGFloat height = v150;
    CGFloat v153 = CGRectGetWidth(v215);
    v216.origin.CGFloat x = v147;
    v216.origin.CGFloat y = v148;
    v216.size.CGFloat width = v149;
    v216.size.CGFloat height = v150;
    CGFloat v154 = CGRectGetHeight(v216);
    *id v146 = v151;
    v146[1] = v152;
    v146[2] = v153;
    v146[3] = v154;
    v144(&t1, 0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    uint64_t v155 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    double *v156 = -*v156;
    v155(&t1, 0);
    _s8PaperKit13CRAssetOrDataOWOcTm_0(v143, v172, (uint64_t (*)(void))type metadata accessor for Signature);
    (*(void (**)(char *, uint64_t, uint64_t))(v188 + 16))(v190, v191, v189);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    uint64_t v88 = v194;
    SharedTagged_9.init<A>(_:_:id:)();

    uint64_t v89 = type metadata accessor for Signature;
    uint64_t v90 = v143;
    goto LABEL_45;
  }
  uint64_t v92 = (void *)v91;
  id v93 = a1;
  id v94 = objc_msgSend(v92, sel_drawing);
  if (v94)
  {
    uint64_t v95 = v94;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v96 = 0;
  }
  else
  {
    uint64_t v96 = 1;
  }
  uint64_t v117 = v185;
  uint64_t v116 = v186;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v186 + 56))(v31, v96, 1, v185);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v31, (uint64_t)v34, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v34, 1, v117) == 1)
  {

    uint64_t v69 = &demangling cache variable for type metadata for PKDrawing?;
    uint64_t v70 = (uint64_t)v34;
    goto LABEL_53;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
  swift_dynamicCast();
  id v120 = *(id *)&t1.a;
  v157 = (void *)specialized PKDrawingCoherence.__allocating_init(concreteDrawing:)(v120);

  id v158 = v157;
  objc_msgSend(v92, sel_rectangle);
  double v159 = CGRectGetWidth(v217);
  objc_msgSend(v158, sel_bounds);
  CGFloat v160 = v159 / CGRectGetWidth(v218);
  objc_msgSend(v92, sel_rectangle);
  double v161 = CGRectGetHeight(v219);
  objc_msgSend(v158, sel_bounds);
  CGFloat v162 = CGRectGetHeight(v220);
  CGAffineTransformMakeScale(&t1, v160, v161 / v162);
  long long v163 = *(_OWORD *)&t1.a;
  long long v164 = *(_OWORD *)&t1.c;
  long long v165 = *(_OWORD *)&t1.tx;
  t1.double a = a;
  t1.double b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tCGFloat x = tx;
  t1.tCGFloat y = ty;
  *(_OWORD *)&v197.double a = v163;
  *(_OWORD *)&v197.CGFloat c = v164;
  *(_OWORD *)&v197.tCGFloat x = v165;
  CGAffineTransformConcat(&v196, &t1, &v197);
  CGAffineTransform t1 = v196;
  id v166 = objc_msgSend(v158, sel_drawingByApplyingTransform_, &t1);

  uint64_t v167 = v174;
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v186 + 32))(v175, v167, v117);
  type metadata accessor for PKDrawingCoherence(0);
  swift_dynamicCast();
  CGFloat v168 = t1.a;
  uint64_t v169 = *(void *)&t1.a + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v176 + 16))(v178, v169, v177);
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  swift_retain();
  uint64_t v170 = v194;
  Ref.init<A>(_:_:)();

  uint64_t v111 = type metadata accessor for AnnotationImporter.ImportedElement();
  swift_storeEnumTagMultiPayload();
  uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56);
  uint64_t v65 = v170;
LABEL_46:
  uint64_t v112 = 0;
  uint64_t v63 = v111;
  return v64(v65, v112, 1, v63);
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  double b;
  double a;
  CGFloat d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  void (*v73)(CGAffineTransform *, void);
  double *v74;
  void (*v75)(CGAffineTransform *, void);
  CGFloat *v76;
  CGFloat *v77;
  CGFloat v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat v81;
  CGFloat MinX;
  double v83;
  CGFloat Width;
  CGFloat Height;
  double v86;
  uint64_t v87;
  uint64_t (*v88)();
  uint64_t v89;
  uint64_t v90;
  void *v91;
  id v92;
  id v93;
  void *v94;
  uint64_t v95;
  void (*v96)(CGAffineTransform *, void);
  double *v97;
  void (*v98)(CGAffineTransform *, void);
  CGFloat *v99;
  CGFloat *v100;
  CGFloat v101;
  CGFloat v102;
  CGFloat v103;
  CGFloat v104;
  CGFloat v105;
  double v106;
  CGFloat v107;
  CGFloat v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  CGFloat v124;
  CGFloat v125;
  CGFloat v126;
  CGFloat v127;
  void (*v128)(CGAffineTransform *, void);
  CGRect *v129;
  void (*v130)(CGAffineTransform *, void);
  CGFloat *v131;
  CGFloat *v132;
  CGFloat v133;
  CGFloat v134;
  CGFloat v135;
  CGFloat v136;
  CGFloat v137;
  double v138;
  CGFloat v139;
  CGFloat v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(CGAffineTransform *, void);
  CGFloat *v144;
  CGFloat *v145;
  CGFloat v146;
  CGFloat v147;
  CGFloat v148;
  CGFloat v149;
  CGFloat v150;
  double v151;
  CGFloat v152;
  CGFloat v153;
  void (*v154)(CGAffineTransform *, void);
  double *v155;
  void *v156;
  id v157;
  double v158;
  CGFloat v159;
  double v160;
  CGFloat v161;
  long long v162;
  long long v163;
  long long v164;
  id v165;
  char *v166;
  CGFloat v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  CGAffineTransform v194;
  CGAffineTransform v195;
  CGAffineTransform v196;
  CGAffineTransform v197;
  CGAffineTransform t1;
  CGRect v199;
  CGRect v200;
  CGRect v201;
  CGRect v202;
  CGRect v203;
  CGRect v204;
  CGRect v205;
  CGRect v206;
  CGRect v207;
  CGRect v208;
  CGRect v209;
  CGRect v210;
  CGRect v211;
  CGRect v212;
  CGRect v213;
  CGRect v214;
  CGRect v215;
  CGRect v216;
  CGRect v217;
  CGRect v218;
  CGRect v219;

  uint64_t v190 = a4;
  uint64_t v191 = a3;
  uint64_t v193 = a5;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x270FA5388](v13 - 8);
  id v180 = (char *)&v170 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v179 = (char *)&v170 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Signature?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v182 = (char *)&v170 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v183 = type metadata accessor for Signature();
  uint64_t v181 = *(void *)(v183 - 8);
  MEMORY[0x270FA5388](v183);
  unint64_t v171 = (uint64_t)&v170 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v172 = (uint64_t)&v170 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v175 = *(void *)(v22 - 8);
  uint64_t v176 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v177 = (char *)&v170 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for PKDrawing();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v184 = v24;
  uint64_t v185 = v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v173 = (char *)&v170 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v174 = (char *)&v170 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v31 = (char *)&v170 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  id v34 = (char *)&v170 - v33;
  uint64_t v35 = type metadata accessor for CRKeyPath();
  uint64_t v187 = *(void *)(v35 - 8);
  uint64_t v188 = v35;
  MEMORY[0x270FA5388](v35);
  uint64_t v189 = (char *)&v170 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v37 - 8);
  long long v39 = (char *)&v170 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)&v170 - v41;
  uint64_t v192 = type metadata accessor for Shape();
  uint64_t v43 = *(void *)(v192 - 8);
  MEMORY[0x270FA5388](v192);
  Swift::Bool v178 = (uint64_t)&v170 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v45);
  long long v47 = (char *)&v170 - v46;
  MEMORY[0x270FA5388](v48);
  uint64_t v186 = (uint64_t)&v170 - v49;
  MEMORY[0x270FA5388](v50);
  uint64_t v52 = (char *)&v170 - v51;
  CGAffineTransformMakeScale(&t1, a6, a6);
  double a = t1.a;
  double b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransform v197 = t1;
  if (!a2)
  {
    memset(&t1, 0, 32);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&t1, &demangling cache variable for type metadata for Any?);
    goto LABEL_19;
  }
  if (objc_msgSend(a2, sel_valueForAnnotationKey_, *MEMORY[0x263F14790]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(&v196, 0, 32);
  }
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v196, (uint64_t)&t1, &demangling cache variable for type metadata for Any?);
  if (!*(void *)&t1.d)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&t1, &demangling cache variable for type metadata for Any?);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    uint64_t v59 = 0;
    goto LABEL_14;
  }
  if ((LOBYTE(v196.a) & 2) != 0)
  {
    if ((LOBYTE(v196.a) & 0x40) != 0)
    {
      uint64_t v59 = 3;
      if ((LOBYTE(v196.a) & 0x80) != 0) {
LABEL_40:
      }
        v59 |= 4uLL;
    }
    else
    {
      uint64_t v59 = 1;
      if ((LOBYTE(v196.a) & 0x80) != 0) {
        goto LABEL_40;
      }
    }
  }
  else if ((LOBYTE(v196.a) & 0x40) != 0)
  {
    uint64_t v59 = 2;
    if ((LOBYTE(v196.a) & 0x80) != 0) {
      goto LABEL_40;
    }
  }
  else
  {
    uint64_t v59 = 0;
    if ((LOBYTE(v196.a) & 0x80) != 0) {
      goto LABEL_40;
    }
  }
LABEL_14:
  uint64_t v60 = unk_26C14D6E0;
  if ((unk_26C14D6E0 & ~qword_26C14D6D8) == 0) {
    uint64_t v60 = 0;
  }
  uint64_t v61 = qword_26C14D6E8;
  if ((qword_26C14D6E8 & ~(v60 | qword_26C14D6D8)) == 0) {
    uint64_t v61 = 0;
  }
  a2 = (void *)(v59 | v60 | qword_26C14D6D8 | v61);
LABEL_19:
  self;
  if (swift_dynamicCastObjCClass())
  {
    uint64_t v62 = type metadata accessor for AnnotationImporter.ImportedElement();
    uint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56);
    uint64_t v64 = v193;
LABEL_53:
    uint64_t v111 = 1;
    return v63(v64, v111, 1, v62);
  }
  uint64_t v170 = (unint64_t)a2;
  self;
  uint64_t v65 = swift_dynamicCastObjCClass();
  if (v65)
  {
    uint64_t v66 = (void *)v65;
    uint64_t v67 = a1;
    static AnnotationImporter.translateDoodleAnnotation(_:)(v66, (uint64_t)v42);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v42, 1, v192) == 1)
    {

      id v68 = &demangling cache variable for type metadata for Shape?;
LABEL_24:
      uint64_t v69 = (uint64_t)v42;
LABEL_52:
      outlined destroy of StocksKitCurrencyCache.Provider?(v69, v68);
      uint64_t v117 = v193;
      uint64_t v62 = type metadata accessor for AnnotationImporter.ImportedElement();
      uint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56);
      uint64_t v64 = v117;
      goto LABEL_53;
    }
    outlined init with take of Image((uint64_t)v42, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for Shape);
    specialized CanvasElement.coordinateSpace.getter(&v196);
    CGAffineTransform t1 = v196;
    v195.double a = a;
    v195.double b = b;
    v195.CGFloat c = c;
    v195.CGFloat d = d;
    v195.tCGFloat x = tx;
    v195.tCGFloat y = ty;
    CGAffineTransformConcat(&v194, &t1, &v195);
    CGAffineTransform t1 = v194;
    specialized CanvasElement.coordinateSpace.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    id v73 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    *uint64_t v74 = sqrt(a * a + b * b) * *v74;
    v73(&v195, 0);
    CRAttributedString<>.apply(_:)(&v197.a);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    uint64_t v75 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    int v77 = v76;
    uint64_t v78 = *v76;
    CGFloat v79 = v76[1];
    CGFloat v80 = v76[2];
    CGFloat v81 = v76[3];
    v199.origin.CGFloat x = *v76;
    v199.origin.CGFloat y = v79;
    v199.size.CGFloat width = v80;
    v199.size.CGFloat height = v81;
    CGFloat MinX = CGRectGetMinX(v199);
    v200.origin.CGFloat x = v78;
    v200.origin.CGFloat y = v79;
    v200.size.CGFloat width = v80;
    v200.size.CGFloat height = v81;
    char v83 = a7 + a7 + a8 - CGRectGetMaxY(v200);
    v201.origin.CGFloat x = v78;
    v201.origin.CGFloat y = v79;
    v201.size.CGFloat width = v80;
    v201.size.CGFloat height = v81;
    CGFloat Width = CGRectGetWidth(v201);
    v202.origin.CGFloat x = v78;
    v202.origin.CGFloat y = v79;
    v202.size.CGFloat width = v80;
    v202.size.CGFloat height = v81;
    CGFloat Height = CGRectGetHeight(v202);
    *int v77 = MinX;
    v77[1] = v83;
    v77[2] = Width;
    v77[3] = Height;
    v75(&v195, 0);
    CRRegister.value.getter();
    uint64_t v86 = v195.a;
    CRRegister.value.getter();
    if (fabs(v86 + v195.a) > 0.01)
    {
      v195.double a = -v86;
      CRRegister.value.setter();
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    *(void *)&v194.double a = *(void *)&v195.a | v170;
    CRRegister.wrappedValue.setter();
    _s8PaperKit13CRAssetOrDataOWOcTm_0((uint64_t)v52, v186, (uint64_t (*)(void))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v187 + 16))(v189, v190, v188);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    double v87 = v193;
    SharedTagged_9.init<A>(_:_:id:)();

    uint64_t v88 = type metadata accessor for Shape;
    uint64_t v89 = (uint64_t)v52;
    goto LABEL_44;
  }
  self;
  uint64_t v70 = swift_dynamicCastObjCClass();
  if (v70)
  {
    uint64_t v71 = (void *)v70;
    uint64_t v72 = a1;
    static AnnotationImporter.translateStrokedAnnotation(_:)(v71, (uint64_t)v39);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v39, 1, v192) == 1)
    {

      id v68 = &demangling cache variable for type metadata for Shape?;
      uint64_t v69 = (uint64_t)v39;
      goto LABEL_52;
    }
    outlined init with take of Image((uint64_t)v39, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for Shape);
    specialized CanvasElement.coordinateSpace.getter(&v196);
    CGAffineTransform t1 = v196;
    v195.double a = a;
    v195.double b = b;
    v195.CGFloat c = c;
    v195.CGFloat d = d;
    v195.tCGFloat x = tx;
    v195.tCGFloat y = ty;
    CGAffineTransformConcat(&v194, &t1, &v195);
    CGAffineTransform t1 = v194;
    specialized CanvasElement.coordinateSpace.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    uint64_t v96 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    char *v97 = sqrt(a * a + b * b) * *v97;
    v96(&v195, 0);
    CRAttributedString<>.apply(_:)(&v197.a);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    uint64_t v98 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    id v100 = v99;
    int v101 = *v99;
    CGFloat v102 = v99[1];
    CGFloat v103 = v99[2];
    CGFloat v104 = v99[3];
    v203.origin.CGFloat x = *v99;
    v203.origin.CGFloat y = v102;
    v203.size.CGFloat width = v103;
    v203.size.CGFloat height = v104;
    CGFloat v105 = CGRectGetMinX(v203);
    v204.origin.CGFloat x = v101;
    v204.origin.CGFloat y = v102;
    v204.size.CGFloat width = v103;
    v204.size.CGFloat height = v104;
    CGFloat v106 = a7 + a7 + a8 - CGRectGetMaxY(v204);
    v205.origin.CGFloat x = v101;
    v205.origin.CGFloat y = v102;
    v205.size.CGFloat width = v103;
    v205.size.CGFloat height = v104;
    double v107 = CGRectGetWidth(v205);
    v206.origin.CGFloat x = v101;
    v206.origin.CGFloat y = v102;
    v206.size.CGFloat width = v103;
    v206.size.CGFloat height = v104;
    CGFloat v108 = CGRectGetHeight(v206);
    *id v100 = v105;
    v100[1] = v106;
    v100[2] = v107;
    v100[3] = v108;
    v98(&v195, 0);
    CRRegister.value.getter();
    CGFloat v109 = v195.a;
    CRRegister.value.getter();
    if (fabs(v109 + v195.a) > 0.01)
    {
      v195.double a = -v109;
      CRRegister.value.setter();
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    *(void *)&v194.double a = *(void *)&v195.a | v170;
    CRRegister.wrappedValue.setter();
    _s8PaperKit13CRAssetOrDataOWOcTm_0((uint64_t)v47, v186, (uint64_t (*)(void))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v187 + 16))(v189, v190, v188);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    double v87 = v193;
    SharedTagged_9.init<A>(_:_:id:)();

    uint64_t v88 = type metadata accessor for Shape;
    uint64_t v89 = (uint64_t)v47;
LABEL_44:
    _s8PaperKit0A8DocumentVWOhTm_0(v89, (uint64_t (*)(void))v88);
    double v110 = type metadata accessor for AnnotationImporter.ImportedElement();
    swift_storeEnumTagMultiPayload();
    uint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56);
    uint64_t v64 = v87;
    goto LABEL_45;
  }
  self;
  uint64_t v90 = swift_dynamicCastObjCClass();
  if (!v90)
  {
    self;
    uint64_t v112 = swift_dynamicCastObjCClass();
    if (!v112)
    {
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      id v120 = v179;
      TaggedValue_9.init(_:)();
      t1.double a = 0.0;
      v196.double a = 0.0;
      uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
      uint64_t v122 = (uint64_t)v180;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 56))(v180, 1, 1, v121);
      v195.double a = 0.0;
      uint64_t v123 = v186;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v120, (uint64_t *)&t1, (uint64_t *)&v196, v122, (uint64_t *)&v195, v186, 0.0, 0.0, 0.0, 0.0, 5.0);
      objc_msgSend(a1, sel_drawingBounds);
      t1.double a = v124;
      t1.double b = v125;
      t1.CGFloat c = v126;
      t1.CGFloat d = v127;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      CRRegister.wrappedValue.setter();
      CGFloat v128 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
      CGRect v207 = *v129;
      t1.double a = a;
      t1.double b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.tCGFloat x = tx;
      t1.tCGFloat y = ty;
      *id v129 = CGRectApplyAffineTransform(v207, &t1);
      v128(&v196, 0);
      uint64_t v130 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
      unint64_t v132 = v131;
      uint64_t v133 = *v131;
      CGFloat v134 = v131[1];
      CGFloat v135 = v131[2];
      CGFloat v136 = v131[3];
      v208.origin.CGFloat x = *v131;
      v208.origin.CGFloat y = v134;
      v208.size.CGFloat width = v135;
      v208.size.CGFloat height = v136;
      CGFloat v137 = CGRectGetMinX(v208);
      v209.origin.CGFloat x = v133;
      v209.origin.CGFloat y = v134;
      v209.size.CGFloat width = v135;
      v209.size.CGFloat height = v136;
      CGFloat v138 = a7 + a7 + a8 - CGRectGetMaxY(v209);
      v210.origin.CGFloat x = v133;
      v210.origin.CGFloat y = v134;
      v210.size.CGFloat width = v135;
      v210.size.CGFloat height = v136;
      double v139 = CGRectGetWidth(v210);
      v211.origin.CGFloat x = v133;
      v211.origin.CGFloat y = v134;
      v211.size.CGFloat width = v135;
      v211.size.CGFloat height = v136;
      CGFloat v140 = CGRectGetHeight(v211);
      CGFloat *v132 = v137;
      v132[1] = v138;
      v132[2] = v139;
      v132[3] = v140;
      v130(&t1, 0);
      type metadata accessor for ShapeSecondaryProperties();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
      CRRegister.wrappedValue.getter();
      *(void *)&v196.double a = *(void *)&t1.a | v170;
      CRRegister.wrappedValue.setter();
      _s8PaperKit13CRAssetOrDataOWOcTm_0(v123, v178, (uint64_t (*)(void))type metadata accessor for Shape);
      (*(void (**)(char *, uint64_t, uint64_t))(v187 + 16))(v189, v190, v188);
      lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
      swift_retain();
      CGFloat v141 = v193;
      SharedTagged_9.init<A>(_:_:id:)();
      _s8PaperKit0A8DocumentVWOhTm_0(v123, (uint64_t (*)(void))type metadata accessor for Shape);
      double v110 = type metadata accessor for AnnotationImporter.ImportedElement();
      swift_storeEnumTagMultiPayload();
      uint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56);
      uint64_t v64 = v141;
      goto LABEL_45;
    }
    uint64_t v113 = (void *)v112;
    uint64_t v114 = a1;
    uint64_t v42 = v182;
    static AnnotationImporter.translateSignatureAnnotation(_:)(v113, (uint64_t)v182);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v181 + 48))(v42, 1, v183) == 1)
    {

      id v68 = (uint64_t *)&demangling cache variable for type metadata for Signature?;
      goto LABEL_24;
    }
    uint64_t v142 = v172;
    outlined init with take of Image((uint64_t)v42, v172, (uint64_t (*)(void))type metadata accessor for Signature);
    Signature.apply(_:)(&v197);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    uint64_t v143 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    id v145 = v144;
    id v146 = *v144;
    CGFloat v147 = v144[1];
    CGFloat v148 = v144[2];
    CGFloat v149 = v144[3];
    v212.origin.CGFloat x = *v144;
    v212.origin.CGFloat y = v147;
    v212.size.CGFloat width = v148;
    v212.size.CGFloat height = v149;
    CGFloat v150 = CGRectGetMinX(v212);
    v213.origin.CGFloat x = v146;
    v213.origin.CGFloat y = v147;
    v213.size.CGFloat width = v148;
    v213.size.CGFloat height = v149;
    CGFloat v151 = a7 + a7 + a8 - CGRectGetMaxY(v213);
    v214.origin.CGFloat x = v146;
    v214.origin.CGFloat y = v147;
    v214.size.CGFloat width = v148;
    v214.size.CGFloat height = v149;
    double v152 = CGRectGetWidth(v214);
    v215.origin.CGFloat x = v146;
    v215.origin.CGFloat y = v147;
    v215.size.CGFloat width = v148;
    v215.size.CGFloat height = v149;
    CGFloat v153 = CGRectGetHeight(v215);
    *id v145 = v150;
    v145[1] = v151;
    v145[2] = v152;
    v145[3] = v153;
    v143(&t1, 0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CGFloat v154 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    *uint64_t v155 = -*v155;
    v154(&t1, 0);
    _s8PaperKit13CRAssetOrDataOWOcTm_0(v142, v171, (uint64_t (*)(void))type metadata accessor for Signature);
    (*(void (**)(char *, uint64_t, uint64_t))(v187 + 16))(v189, v190, v188);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    double v87 = v193;
    SharedTagged_9.init<A>(_:_:id:)();

    uint64_t v88 = type metadata accessor for Signature;
    uint64_t v89 = v142;
    goto LABEL_44;
  }
  uint64_t v91 = (void *)v90;
  uint64_t v92 = a1;
  id v93 = objc_msgSend(v91, sel_drawing);
  if (v93)
  {
    id v94 = v93;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v95 = 0;
  }
  else
  {
    uint64_t v95 = 1;
  }
  uint64_t v116 = v184;
  id v115 = v185;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v185 + 56))(v31, v95, 1, v184);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v31, (uint64_t)v34, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v34, 1, v116) == 1)
  {

    id v68 = &demangling cache variable for type metadata for PKDrawing?;
    uint64_t v69 = (uint64_t)v34;
    goto LABEL_52;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
  swift_dynamicCast();
  uint64_t v119 = *(id *)&t1.a;
  v156 = (void *)specialized PKDrawingCoherence.__allocating_init(concreteDrawing:)(v119);

  v157 = v156;
  objc_msgSend(v91, sel_rectangle);
  id v158 = CGRectGetWidth(v216);
  objc_msgSend(v157, sel_bounds);
  double v159 = v158 / CGRectGetWidth(v217);
  objc_msgSend(v91, sel_rectangle);
  CGFloat v160 = CGRectGetHeight(v218);
  objc_msgSend(v157, sel_bounds);
  double v161 = CGRectGetHeight(v219);
  CGAffineTransformMakeScale(&t1, v159, v160 / v161);
  CGFloat v162 = *(_OWORD *)&t1.a;
  long long v163 = *(_OWORD *)&t1.c;
  long long v164 = *(_OWORD *)&t1.tx;
  t1.double a = a;
  t1.double b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tCGFloat x = tx;
  t1.tCGFloat y = ty;
  *(_OWORD *)&v196.double a = v162;
  *(_OWORD *)&v196.CGFloat c = v163;
  *(_OWORD *)&v196.tCGFloat x = v164;
  CGAffineTransformConcat(&v195, &t1, &v196);
  CGAffineTransform t1 = v195;
  long long v165 = objc_msgSend(v157, sel_drawingByApplyingTransform_, &t1);

  id v166 = v173;
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v174, v166, v116);
  type metadata accessor for PKDrawingCoherence(0);
  swift_dynamicCast();
  uint64_t v167 = t1.a;
  CGFloat v168 = *(void *)&t1.a + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v177, v168, v176);
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  swift_retain();
  uint64_t v169 = v193;
  Ref.init<A>(_:_:)();

  double v110 = type metadata accessor for AnnotationImporter.ImportedElement();
  swift_storeEnumTagMultiPayload();
  uint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56);
  uint64_t v64 = v169;
LABEL_45:
  uint64_t v111 = 0;
  uint64_t v62 = v110;
  return v63(v64, v111, 1, v62);
}

unint64_t specialized static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(void *a1, uint64_t a2, uint64_t a3, CGFloat a4, double a5, double a6, double a7, double a8)
{
  uint64_t v140 = a3;
  uint64_t v145 = a2;
  uint64_t v154 = *MEMORY[0x263EF8340];
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v12 = *(void *)(v119 - 8);
  MEMORY[0x270FA5388](v119);
  uint64_t v118 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PDFAnnotationElement();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v125 = (uint64_t)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v112 - v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v128 = (uint64_t)&v112 - v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v112 - v25;
  MEMORY[0x270FA5388](v27);
  CGFloat v138 = (char *)&v112 - v28;
  uint64_t v143 = type metadata accessor for AnnotationImporter.ImportedElement();
  uint64_t v131 = *(void *)(v143 - 8);
  MEMORY[0x270FA5388](v143);
  uint64_t v122 = (uint64_t)&v112 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v121 = (uint64_t)&v112 - v31;
  MEMORY[0x270FA5388](v32);
  uint64_t v137 = (uint64_t)&v112 - v33;
  MEMORY[0x270FA5388](v34);
  uint64_t v136 = (uint64_t)&v112 - v35;
  uint64_t v36 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v36 - 8);
  unint64_t v132 = (char *)&v112 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v38 - 8);
  CGFloat v135 = (char *)&v112 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  CGFloat v147 = (char *)&v112 - v41;
  uint64_t v42 = type metadata accessor for CRKeyPath();
  uint64_t v43 = *(void *)(v42 - 8);
  double v44 = MEMORY[0x270FA5388](v42);
  uint64_t v46 = (char *)&v112 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v150 = MEMORY[0x263F8EE78];
  uint64_t v139 = (uint64_t)a1;
  id v47 = objc_msgSend(a1, sel_annotations, v44);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  unint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v142 = v48;
  if (v48 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v50 = (uint64_t)v147;
    if (v49) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v49 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v50 = (uint64_t)v147;
    if (v49)
    {
LABEL_3:
      uint64_t v141 = v49;
      if (v49 < 1) {
        __break(1u);
      }
      id v120 = v26;
      uint64_t v123 = v21;
      uint64_t v117 = v18;
      uint64_t v51 = 0;
      unint64_t v52 = v142;
      unint64_t v146 = v142 & 0xC000000000000001;
      CGFloat v148 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
      uint64_t v130 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
      CGFloat v126 = (void (**)(char *, uint64_t, uint64_t))(v43 + 32);
      CGFloat v134 = (void (**)(char *, char *, uint64_t))(v43 + 16);
      v144 = (unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48);
      uint64_t v133 = (void (**)(char *, uint64_t))(v43 + 8);
      id v115 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
      uint64_t v114 = (void (**)(char *, uint64_t))(v12 + 8);
      uint64_t v53 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
      long long v129 = xmmword_20C83EC00;
      long long v116 = xmmword_20C8352B0;
      uint64_t v54 = v141;
      while (1)
      {
        uint64_t v55 = v53;
        if (v146) {
          id v56 = (id)MEMORY[0x21054E050](v51, v52);
        }
        else {
          id v56 = *(id *)(v52 + 8 * v51 + 32);
        }
        uint64_t v57 = v56;
        type metadata accessor for CanvasElementPDFAnnotation();
        uint64_t v58 = swift_dynamicCastClass();
        if (!v58)
        {

          goto LABEL_6;
        }
        uint64_t v59 = (PDFAnnotation *)v58;
        id v60 = v57;
        uint64_t v61 = [(PDFAnnotation *)v59 sourceDictionary];
        if (!v61)
        {
          uint64_t v67 = *v148;
          (*v148)(v50, 1, 1, v42);
          uint64_t v53 = v55;
LABEL_26:
          outlined destroy of StocksKitCurrencyCache.Provider?(v50, v53);
          id v70 = [(PDFAnnotation *)v59 pdfAnnotationUUID];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v53 = v55;
          CRKeyPath.init(_:)();
          goto LABEL_28;
        }
        CGPDFDictionaryRef value = 0;
        *(_OWORD *)keCGFloat y = v129;
        CGPDFDictionaryGetDictionary(v61, key, &value);
        uint64_t v62 = value;
        if (!value) {
          break;
        }
        *(void *)keCGFloat y = 0;
        if (CGPDFDictionaryGetString(value, "PPKID", (CGPDFStringRef *)key)
          && *(void *)key
          && (CFStringRef v63 = CGPDFStringCopyTextString(*(CGPDFStringRef *)key)) != 0)
        {
          uint64_t v64 = (__CFString *)v63;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          Data.init(base64Encoded:options:)();
          unint64_t v66 = v65;
          swift_bridgeObjectRelease();
          if (v66 >> 60 == 15) {
            break;
          }
        }
        else
        {
          CGPDFStreamRef v151 = 0;
          if (!CGPDFDictionaryGetStream(v62, "PPKID", &v151)) {
            break;
          }
          if (!v151) {
            break;
          }
          CGPDFDataFormat format = CGPDFDataFormatRaw;
          CFDataRef v68 = CGPDFStreamCopyData(v151, &format);
          if (!v68) {
            break;
          }
          CFDataRef v69 = v68;
          *(_OWORD *)keCGFloat y = v116;
          static Data._conditionallyBridgeFromObjectiveC(_:result:)();

          if (*(void *)&key[8] >> 60 == 15) {
            break;
          }
        }
        uint64_t v50 = (uint64_t)v147;
        CRKeyPath.init(rawValue:)();
        uint64_t v67 = *v148;
        (*v148)(v50, 0, 1, v42);
LABEL_25:
        uint64_t v53 = v55;
        if ((*v130)(v50, 1, v42) == 1) {
          goto LABEL_26;
        }
        (*v126)(v46, v50, v42);
LABEL_28:
        uint64_t v71 = (uint64_t)v135;
        (*v134)(v135, v46, v42);
        v67(v71, 0, 1, v42);
        uint64_t v72 = (uint64_t)v59 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
        swift_beginAccess();
        outlined assign with take of Date?(v71, v72, v53);
        swift_endAccess();
        id v73 = v138;
        specialized CanvasElementPDFAnnotation.decodeImportedElement<A>(in:assetManager:from:)(v145, v140, v139, v138);
        uint64_t v74 = *v144;
        if ((*v144)(v73, 1, v143) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v73, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
          if (PDFAnnotation.shouldMirrorAsPDFAnnotationElement()())
          {
            id v75 = v60;
            uint64_t v76 = v125;
            PDFAnnotationElement.init(_:)(v59, v125);
            specialized addPDFAnnotationElement #1 <A>(_:) in static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(v76, v145, (uint64_t)v46, &v150);

            _s8PaperKit0A8DocumentVWOhTm_0(v76, (uint64_t (*)(void))type metadata accessor for PDFAnnotationElement);
            (*v133)(v46, v42);
LABEL_41:
            uint64_t v50 = (uint64_t)v147;
            unint64_t v52 = v142;
            uint64_t v54 = v141;
            goto LABEL_7;
          }
          CGFloat v81 = *(Class *)((char *)&v59->super.isa + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation);
          if (!v81)
          {
            (*v133)(v46, v42);

            goto LABEL_41;
          }
          id v127 = v60;
          id v82 = v81;
          uint64_t v83 = v128;
          specialized static AnnotationImporter.importElement<A>(_:from:in:id:scale:mediaBox:)(v82, v59, v145, (uint64_t)v46, v128, a4, a6, a8);
          uint64_t v84 = (uint64_t)v123;
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v83, (uint64_t)v123, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
          uint64_t v85 = v143;
          unsigned int v86 = v74((char *)v84, 1, v143);
          uint64_t v54 = v141;
          if (v86 != 1)
          {
            uint64_t v87 = v84;
            uint64_t v88 = (uint64_t)v117;
            outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v87, (uint64_t)v117, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              _s8PaperKit0A8DocumentVWOhTm_0(v88, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
            }
            else
            {
              (*v115)(v118, v88, v119);
              self;
              if (swift_dynamicCastObjCClass()
                || (self, swift_dynamicCastObjCClass())
                || (self, swift_dynamicCastObjCClass())
                || (self, swift_dynamicCastObjCClass()))
              {
                BOOL v89 = 1;
              }
              else
              {
                self;
                BOOL v89 = swift_dynamicCastObjCClass() != 0;
              }
              self;
              if (swift_dynamicCastObjCClass()
                || ((self, !swift_dynamicCastObjCClass()) ? (BOOL v90 = v89) : (BOOL v90 = 0), !v90))
              {
                uint64_t v92 = qword_26C14D640;
                uint64_t v91 = unk_26C14D648;
                if ((unk_26C14D648 & ~qword_26C14D640) == 0) {
                  uint64_t v91 = 0;
                }
                uint64_t v112 = v91;
                uint64_t v113 = (void (*)(char *, void))SharedTagged_9.subscript.modify();
                id v93 = v82;
                uint64_t v95 = *(void *)(v94 + 24);
                uint64_t v96 = *(void *)(v94 + 32);
                __swift_mutable_project_boxed_opaque_existential_1(v94, v95);
                uint64_t v97 = *(uint64_t (**)(CGPDFDictionaryRef *, uint64_t, uint64_t))(v96 + 80);
                uint64_t v98 = v95;
                uint64_t v85 = v143;
                uint64_t v99 = v96;
                id v82 = v93;
                id v100 = (void (*)(CGPDFDictionaryRef *, void))v97(&value, v98, v99);
                uint64_t v102 = v112 | v92;
                uint64_t v54 = v141;
                *v101 |= v102;
                v100(&value, 0);
                v113(key, 0);
              }
              (*v114)(v118, v119);
            }
            uint64_t v84 = (uint64_t)v123;
          }
          id v124 = v82;
          uint64_t v103 = v85;
          uint64_t v104 = (uint64_t)v120;
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v128, (uint64_t)v120, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
          outlined destroy of StocksKitCurrencyCache.Provider?(v84, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
          id v105 = v127;

          if (v74((char *)v104, 1, v103) == 1)
          {
            (*v133)(v46, v42);

            outlined destroy of StocksKitCurrencyCache.Provider?(v104, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
            uint64_t v50 = (uint64_t)v147;
            unint64_t v52 = v142;
          }
          else
          {
            uint64_t v106 = v121;
            outlined init with take of Image(v104, v121, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
            _s8PaperKit13CRAssetOrDataOWOcTm_0(v106, v122, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
            swift_beginAccess();
            unint64_t v107 = v150;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v107 + 16) + 1, 1, v107, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationImporter.ImportedElement>, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
            }
            unint64_t v52 = v142;
            unint64_t v109 = *(void *)(v107 + 16);
            unint64_t v108 = *(void *)(v107 + 24);
            if (v109 >= v108 >> 1) {
              unint64_t v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v108 > 1, v109 + 1, 1, v107, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationImporter.ImportedElement>, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
            }
            *(void *)(v107 + 16) = v109 + 1;
            outlined init with take of Image(v122, v107+ ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80))+ *(void *)(v131 + 72) * v109, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
            unint64_t v150 = v107;
            swift_endAccess();
            id v110 = v127;

            _s8PaperKit0A8DocumentVWOhTm_0(v121, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
            (*v133)(v46, v42);
            uint64_t v50 = (uint64_t)v147;
          }
        }
        else
        {
          uint64_t v77 = v136;
          outlined init with take of Image((uint64_t)v73, v136, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
          _s8PaperKit13CRAssetOrDataOWOcTm_0(v77, v137, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
          swift_beginAccess();
          unint64_t v78 = v150;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v78 + 16) + 1, 1, v78, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationImporter.ImportedElement>, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
          }
          unint64_t v52 = v142;
          unint64_t v80 = *(void *)(v78 + 16);
          unint64_t v79 = *(void *)(v78 + 24);
          if (v80 >= v79 >> 1) {
            unint64_t v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1, v78, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationImporter.ImportedElement>, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
          }
          *(void *)(v78 + 16) = v80 + 1;
          outlined init with take of Image(v137, v78+ ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80))+ *(void *)(v131 + 72) * v80, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
          unint64_t v150 = v78;
          swift_endAccess();

          _s8PaperKit0A8DocumentVWOhTm_0(v136, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
          (*v133)(v46, v42);
          uint64_t v50 = (uint64_t)v147;
          uint64_t v54 = v141;
        }
LABEL_6:
        uint64_t v53 = v55;
LABEL_7:
        if (v54 == ++v51) {
          goto LABEL_68;
        }
      }
      uint64_t v50 = (uint64_t)v147;
      uint64_t v67 = *v148;
      (*v148)((uint64_t)v147, 1, 1, v42);
      goto LABEL_25;
    }
  }
LABEL_68:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  return v150;
}

uint64_t specialized CanvasElementPDFAnnotation.decodeImportedElement<A>(in:assetManager:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v55 = a3;
  uint64_t v69 = a2;
  uint64_t v73 = a1;
  uint64_t v71 = a4;
  uint64_t v63 = type metadata accessor for CRKeyPath();
  uint64_t v62 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  unint64_t v66 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v59 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  id v60 = (char *)&v48 - v9;
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>);
  uint64_t v64 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  uint64_t v61 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v54);
  uint64_t v53 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v52 = (char *)&v48 - v13;
  uint64_t v57 = type metadata accessor for UnknownCanvasElement();
  MEMORY[0x270FA5388](v57);
  id v56 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v58 = (char *)&v48 - v16;
  uint64_t v70 = type metadata accessor for CRCodingError();
  uint64_t v68 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v51 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v49 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  unint64_t v48 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v67 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>?);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)&v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v48 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = v4;
  Swift::String_optional v33 = CanvasElementPDFAnnotation.decodePaperKitType()();
  if (v33.value._object)
  {
    if (v33.value._countAndFlagsBits == 2002874980 && v33.value._object == (void *)0xE400000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      specialized CanvasElementPDFAnnotation.decodePaperKit<A, B>(type:checkHash:in:)(0, v73, &demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>, &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>, &lazy protocol witness table cache variable for type CRRegister<Ref<PKDrawingStruct>?> and conformance CRRegister<A>, (uint64_t)v28);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
      {
        uint64_t v35 = &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>?;
        uint64_t v36 = (uint64_t)v28;
LABEL_13:
        outlined destroy of StocksKitCurrencyCache.Provider?(v36, v35);
        uint64_t v43 = type metadata accessor for AnnotationImporter.ImportedElement();
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v71, 1, 1, v43);
      }
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v32, v28, v29);
      uint64_t v40 = v51;
      CRRegister.value.getter();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
      uint64_t v41 = v49;
      uint64_t v42 = v50;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v40, 1, v50) == 1)
      {
        uint64_t v35 = &demangling cache variable for type metadata for Ref<PKDrawingStruct>?;
        uint64_t v36 = (uint64_t)v40;
        goto LABEL_13;
      }
      uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
      id v47 = v48;
      v46(v48, v40, v42);
      uint64_t v39 = v71;
      v46(v71, v47, v42);
      uint64_t v45 = type metadata accessor for AnnotationImporter.ImportedElement();
      goto LABEL_14;
    }
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v34) {
      goto LABEL_6;
    }
  }
  specialized CanvasElementPDFAnnotation.decodeCanvasElement<A>(in:assetManager:)(v73, v69, (uint64_t)v22);
  uint64_t v37 = v67;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v22, 1, v23) == 1)
  {
    uint64_t v35 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?;
    uint64_t v36 = (uint64_t)v22;
    goto LABEL_13;
  }
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
  v38(v25, v22, v23);
  uint64_t v39 = v71;
  v38(v71, v25, v23);
  uint64_t v45 = type metadata accessor for AnnotationImporter.ImportedElement();
LABEL_14:
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v39, 0, 1, v45);
}

uint64_t specialized PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v54 = a3;
  uint64_t v53 = a2;
  uint64_t v52 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v51 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v66 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocumentPage?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v61 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v18 = *(void *)(v62 - 8);
  double v19 = MEMORY[0x270FA5388](v62);
  uint64_t v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v69 = v4;
  uint64_t result = (uint64_t)objc_msgSend(v4, sel_pageCount, v19);
  if (result < 0) {
    goto LABEL_25;
  }
  uint64_t v23 = result;
  uint64_t v68 = v14;
  uint64_t v65 = v21;
  uint64_t v64 = a1;
  uint64_t v24 = v62;
  if (result)
  {
    uint64_t v25 = 0;
    uint64_t v67 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v63 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    id v60 = (void (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t v58 = (void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v50 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v26 = (uint64_t *)&demangling cache variable for type metadata for PageId?;
    uint64_t v59 = v17;
    do
    {
      if (v23 == v25)
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        return result;
      }
      uint64_t v27 = v26;
      uint64_t result = (uint64_t)objc_msgSend(v69, sel_pageAtIndex_, v25);
      if (!result) {
        goto LABEL_26;
      }
      uint64_t v28 = (void *)result;
      type metadata accessor for PaperKitPDFPage(0);
      uint64_t v29 = swift_dynamicCastClassUnconditional();
      uint64_t v30 = v29 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      uint64_t v31 = (uint64_t)v68;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v30, (uint64_t)v68, v26);
      uint64_t v32 = type metadata accessor for PageId(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32))
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v31, v26);
        (*v67)(v17, 1, 1, v24);
      }
      else
      {
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v31 + *(int *)(v32 + 20), (uint64_t)v17, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v31, v26);
        if ((*v63)(v17, 1, v24) != 1)
        {
          (*v60)(v65, v17, v24);
          Swift::String_optional v33 = v66;
          WeakTagged_3.tagged3.getter();
          uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>);
          uint64_t v35 = *(void *)(v34 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) == 1)
          {
            uint64_t v36 = (uint64_t)v66;
            uint64_t v37 = &demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?;
            goto LABEL_15;
          }
          type metadata accessor for PaperDocument(0);
          lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
          uint64_t v38 = v61;
          uint64_t v39 = v66;
          WeakRef.subscript.getter();
          (*(void (**)(char *, uint64_t))(v35 + 8))(v39, v34);
          uint64_t v40 = type metadata accessor for PaperDocumentPage();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v38, 1, v40) == 1)
          {
            uint64_t v36 = (uint64_t)v61;
            uint64_t v37 = &demangling cache variable for type metadata for PaperDocumentPage?;
LABEL_15:
            outlined destroy of StocksKitCurrencyCache.Provider?(v36, v37);
            uint64_t v24 = v62;
LABEL_16:
            uint64_t v41 = type metadata accessor for PaperDocument(0);
            uint64_t v42 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
            uint64_t v43 = v65;
            WeakTagged_3.subscript.getter();
            uint64_t v44 = v24;
            uint64_t v45 = v73;
            if (v73)
            {
              uint64_t v57 = v42;
              uint64_t v46 = v74;
              id v56 = __swift_project_boxed_opaque_existential_1(&v72, v73);
              uint64_t v55 = v41;
              id v47 = v51;
              MEMORY[0x21054B930](v44);
              uint64_t v71 = v53;
              outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v54, (uint64_t)v70, (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
              (*(void (**)(uint64_t, char *, uint64_t *, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 128))(v29, v47, &v71, v64, v70, v55, v57, v45, v46);

              (*v50)(v47, v52);
              uint64_t v24 = v62;
              (*v58)(v43, v62);
              uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
              goto LABEL_18;
            }
            (*v58)(v43, v44);

            uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v72, &demangling cache variable for type metadata for PaperPage?);
            uint64_t v17 = v59;
            uint64_t v24 = v44;
          }
          else
          {
            uint64_t v48 = (uint64_t)v61;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
            CRRegister.wrappedValue.getter();
            char v49 = v70[0];
            _s8PaperKit0A8DocumentVWOhTm_0(v48, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
            uint64_t v24 = v62;
            if ((v49 & 0x20) == 0) {
              goto LABEL_16;
            }

            uint64_t result = ((uint64_t (*)(char *, uint64_t))*v58)(v65, v24);
LABEL_18:
            uint64_t v17 = v59;
          }
          uint64_t v26 = v27;
          goto LABEL_6;
        }
      }

      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
LABEL_6:
      ++v25;
    }
    while (v23 != v25);
  }
  return result;
}

uint64_t specialized PaperDocument.init<A>(pdfDocument:asset:in:assetManager:useProxyPages:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v27 = a5;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v30 = a6;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v28);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v24 - v9;
  uint64_t v11 = type metadata accessor for PaperDocument(0);
  uint64_t v29 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  CROrderedSet.init()();
  uint64_t v14 = &v13[*(int *)(v11 + 20)];
  uint64_t v15 = type metadata accessor for CRAsset();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v17(v10, 1, 1, v15);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)v7, &demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, &demangling cache variable for type metadata for CRAsset?);
  v24[1] = v14;
  uint64_t v18 = v26;
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CRAsset?);
  uint64_t v28 = v11;
  *(void *)&v13[*(int *)(v11 + 24)] = MEMORY[0x263F8EE80];
  double v19 = v25;
  if (specialized PaperDocument.appendDocument<A>(_:asset:in:assetManager:useProxyPages:)(v25, v18, v31, v32, v27))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v10, v18, v15);
    v17(v10, 0, 1, v15);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)v7, &demangling cache variable for type metadata for CRAsset?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CRAsset?);

    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v15);
    uint64_t v20 = v30;
    outlined init with take of Image((uint64_t)v13, v30, type metadata accessor for PaperDocument);
    uint64_t v21 = 0;
    uint64_t v22 = v20;
  }
  else
  {

    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v15);
    _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v13, type metadata accessor for PaperDocument);
    uint64_t v21 = 1;
    uint64_t v22 = v30;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v22, v21, 1, v28);
}

uint64_t PaperDocumentView.__allocating_init(context:document:editingMode:toolPicker:)(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v5[2] = a1;
  v5[3] = a4;
  objc_allocWithZone(v4);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, unsigned char *, uint64_t))((char *)&async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)
                                                                   + async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:));
  uint64_t v10 = (void *)swift_task_alloc();
  v5[4] = v10;
  *uint64_t v10 = v5;
  v10[1] = PaperDocumentView.__allocating_init(context:document:editingMode:toolPicker:);
  return v12(a1, a2, a3, a4);
}

uint64_t PaperDocumentView.__allocating_init(context:document:editingMode:toolPicker:)(uint64_t a1)
{
  uint64_t v3 = *(void **)(*v1 + 24);
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  return v5(a1);
}

uint64_t specialized static PaperDocumentPage.create<A>(pdfPage:pageID:in:assetManager:importedElements:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v75 = a3;
  uint64_t v76 = a4;
  uint64_t v71 = a2;
  uint64_t v85 = a1;
  uint64_t v81 = a5;
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v77 = v5;
  uint64_t v78 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v72 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v79 = (uint64_t)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v74 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PaperDocumentPage>);
  uint64_t v80 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v73 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v68);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v65 - v16;
  unint64_t v66 = (uint64_t (*)(void))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v66);
  uint64_t v65 = (uint64_t)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v65 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  int v27 = (char *)&v65 - v26;
  uint64_t v28 = (int *)type metadata accessor for PaperDocumentPage();
  MEMORY[0x270FA5388](v28);
  uint64_t v69 = (uint64_t)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v65 - v31;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v86 = 0u;
  long long v87 = 0u;
  CRRegister.init(wrappedValue:)();
  long long v86 = 0u;
  long long v87 = 0u;
  CRRegister.init(wrappedValue:)();
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v27, 1, 1, v33);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v27, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  *(void *)&long long v86 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  uint64_t v67 = &v32[v28[8]];
  uint64_t v84 = type metadata accessor for PDFPageID();
  uint64_t v34 = *(void *)(v84 - 8);
  uint64_t v35 = *(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56);
  uint64_t v82 = v34 + 56;
  uint64_t v83 = v35;
  v35(v21, 1, 1, v84);
  uint64_t v36 = v65;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v21, v65, &demangling cache variable for type metadata for PDFPageID?);
  lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for PDFPageID?);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v17, 1, 1, v37);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v17, (uint64_t)v14, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(void *)&long long v86 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  CROrderedSet.init()();
  uint64_t v38 = &v32[v28[12]];
  *(void *)&long long v86 = MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A], &demangling cache variable for type metadata for [CRKeyPath]);
  uint64_t v68 = (uint64_t)v38;
  CRRegister.init(wrappedValue:)();
  *(void *)&v32[v28[13]] = MEMORY[0x263F8EE80];
  id v39 = v85;
  objc_msgSend(v85, sel_boundsForBox_, 1);
  CGFloat v41 = v40;
  CGFloat v43 = v42;
  CGFloat v45 = v44;
  CGFloat v47 = v46;
  objc_msgSend(v39, sel_boundsForBox_, 0);
  v89.origin.CGFloat x = v48;
  v89.origin.CGFloat y = v49;
  v89.size.CGFloat width = v50;
  v89.size.CGFloat height = v51;
  v88.origin.CGFloat x = v41;
  v88.origin.CGFloat y = v43;
  v88.size.CGFloat width = v45;
  v88.size.CGFloat height = v47;
  PaperDocumentPage.setContentsBounds(_:fullBounds:)(v88, v89);
  specialized PaperPage.axisAlignedRotationInDegrees.setter((uint64_t)objc_msgSend(v39, sel_rotation));
  unint64_t v66 = (uint64_t (*)(void))type metadata accessor for PDFPageID;
  uint64_t v52 = v71;
  _s8PaperKit13CRAssetOrDataOWOcTm_0(v71, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  v83(v21, 0, 1, v84);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v21, v36, &demangling cache variable for type metadata for PDFPageID?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for PDFPageID?);
  specialized ContainerCanvasElement.importElements<A>(_:in:)(v76, v75);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v53 = v77;
  uint64_t v54 = v70;
  *(void *)&long long v86 = CROrderedSet.map<A>(_:)();
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  CRRegister.wrappedValue.setter();
  _s8PaperKit13CRAssetOrDataOWOcTm_0((uint64_t)v32, v69, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v74, 1, 1, v53);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  swift_retain();
  uint64_t v55 = v73;
  Ref.init<A>(_:_:identity:)();
  uint64_t v56 = v52;
  uint64_t v57 = v79;
  uint64_t v58 = v55;
  _s8PaperKit13CRAssetOrDataOWOcTm_0(v56, v79, v66);
  v83((char *)v57, 0, 1, v84);
  uint64_t v59 = type metadata accessor for PageId(0);
  uint64_t v60 = v57 + *(int *)(v59 + 20);
  LOBYTE(v86) = 2;
  Ref.id.getter();
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  WeakTagged_3.init(_:id:)();
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v60, 0, 1, v61);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v57, 0, 1, v59);
  uint64_t v62 = v85;
  uint64_t v63 = &v85[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  swift_beginAccess();
  outlined assign with take of Date?(v57, (uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  swift_endAccess();
  CRRegister.wrappedValue.getter();
  if (*(void *)&v62[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState])
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)&v62[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState] = v86;
    outlined consume of PaperKitPDFPage.AnnotationIDState(0);
  }
  LOBYTE(v86) = 2;
  Ref.id.getter();
  SharedTagged_3.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v58, v54);
  return _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
}

void specialized ContainerCanvasElement.importElements<A>(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v61 = a2;
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v5 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v59 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v58);
  uint64_t v57 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v56 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v55 = (char *)&v47 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v47 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v54 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v47 - v19;
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v21 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v69 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for AnnotationImporter.ImportedElement();
  MEMORY[0x270FA5388](v23);
  uint64_t v72 = (uint64_t)&v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v73 = (char *)&v47 - v27;
  uint64_t v28 = *(void *)(a1 + 16);
  if (v28)
  {
    uint64_t v29 = v21;
    uint64_t v30 = a1 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
    uint64_t v71 = *(void *)(v26 + 72);
    uint64_t v67 = (void (**)(char *, uint64_t))(v29 + 8);
    uint64_t v68 = (void (**)(char *, uint64_t, uint64_t))(v29 + 32);
    uint64_t v65 = (unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    unint64_t v66 = (void (**)(char *, uint64_t, uint64_t))(v16 + 32);
    CGFloat v51 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    CGFloat v50 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v62 = (void (**)(char *, uint64_t))(v16 + 8);
    CGFloat v49 = (void (**)(char *, char *, uint64_t))(v16 + 16);
    CGFloat v48 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56);
    uint64_t v47 = a1;
    swift_bridgeObjectRetain();
    uint64_t v63 = v23;
    uint64_t v64 = v3;
    uint64_t v31 = (uint64_t)v73;
    uint64_t v53 = v14;
    uint64_t v52 = v20;
    do
    {
      _s8PaperKit13CRAssetOrDataOWOcTm_0(v30, v31, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
      uint64_t v35 = v72;
      _s8PaperKit13CRAssetOrDataOWOcTm_0(v31, v72, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v36 = *v66;
        (*v66)(v20, v35, v15);
        type metadata accessor for PaperDocumentPage();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
        CRRegister.wrappedValue.getter();
        if ((*v65)(v14, 1, v15) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
          uint64_t v37 = (uint64_t)v55;
          (*v49)(v55, v20, v15);
          (*v48)(v37, 0, 1, v15);
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v37, v56, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
          CRRegister.wrappedValue.setter();
          outlined destroy of StocksKitCurrencyCache.Provider?(v37, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
          (*v62)(v20, v15);
        }
        else
        {
          uint64_t v38 = v54;
          v36(v54, (uint64_t)v14, v15);
          uint64_t v39 = (uint64_t)v57;
          Ref.subscript.getter();
          uint64_t v40 = v15;
          double v42 = v59;
          uint64_t v41 = v60;
          (*v51)(v59, v39 + *(int *)(v58 + 20), v60);
          _s8PaperKit0A8DocumentVWOhTm_0(v39, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
          CGFloat v43 = (void (*)(char *, void))Ref.subscript.modify();
          lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
          CROrderedSet.append<A>(contentsOf:)();
          double v44 = v42;
          uint64_t v15 = v40;
          uint64_t v20 = v52;
          uint64_t v45 = v41;
          uint64_t v14 = v53;
          (*v50)(v44, v45);
          v43(v74, 0);
          double v46 = *v62;
          (*v62)(v38, v15);
          v46(v20, v15);
        }
        uint64_t v31 = (uint64_t)v73;
      }
      else
      {
        uint64_t v32 = v69;
        uint64_t v33 = v70;
        (*v68)(v69, v35, v70);
        type metadata accessor for PaperDocumentPage();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
        CROrderedSet.append(_:)();
        uint64_t v34 = v32;
        uint64_t v31 = (uint64_t)v73;
        (*v67)(v34, v33);
      }
      _s8PaperKit0A8DocumentVWOhTm_0(v31, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
      v30 += v71;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized PaperPage<>.updateAnnotations<A>(in:use:capsule:options:)(char *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v264 = a4;
  uint64_t v269 = a3;
  unint64_t v283 = a2;
  v288 = a1;
  uint64_t v297 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x270FA5388](v297);
  v305 = (void (**)(char *, uint64_t))((char *)&v236 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v6 - 8);
  v302 = (uint64_t *)((char *)&v236 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  uint64_t v281 = (uint64_t)&v236 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v294 = (uint64_t)&v236 - v11;
  MEMORY[0x270FA5388](v12);
  v301 = (void (**)(uint64_t, void, uint64_t, uint64_t))((char *)&v236 - v13);
  MEMORY[0x270FA5388](v14);
  uint64_t v252 = (char *)&v236 - v15;
  uint64_t v250 = type metadata accessor for PDFAnnotationElement();
  MEMORY[0x270FA5388](v250);
  uint64_t v249 = (char *)&v236 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v263 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (SharedTagged_9<TaggedCanvasElement>, PDFAnnotation));
  MEMORY[0x270FA5388](v263);
  v262 = (char *)&v236 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v240 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  v241 = (char *)&v236 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, [PDFAnnotation]>);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v238 = (char *)&v236 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v239 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, [PDFAnnotation]>.Iterator);
  MEMORY[0x270FA5388](v239);
  uint64_t v266 = (char *)&v236 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v277 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
  MEMORY[0x270FA5388](v277);
  v280 = (unint64_t *)((char *)&v236 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v24);
  uint64_t v276 = (uint64_t)&v236 - v25;
  uint64_t v257 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
  MEMORY[0x270FA5388](v257);
  v256 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v236 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v27);
  uint64_t v279 = (uint64_t)&v236 - v28;
  uint64_t v255 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<CRKeyPath>);
  uint64_t v247 = *(void *)(v255 - 8);
  MEMORY[0x270FA5388](v255);
  PaperKit::Font v275 = (char *)&v236 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  v244 = (char *)&v236 - v31;
  uint64_t v32 = type metadata accessor for CRKeyPath();
  uint64_t v300 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  id v306 = (char *)&v236 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  v260 = (char *)&v236 - v35;
  MEMORY[0x270FA5388](v36);
  v292 = (char *)&v236 - v37;
  MEMORY[0x270FA5388](v38);
  v303 = (uint64_t *)((char *)&v236 - v39);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PDFAnnotationElement>?);
  MEMORY[0x270FA5388](v40 - 8);
  v258 = (char *)&v236 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v42);
  int v259 = (char *)&v236 - v43;
  uint64_t v282 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>);
  uint64_t v267 = *(void *)(v282 - 8);
  MEMORY[0x270FA5388](v282);
  v248 = (char *)&v236 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v45);
  v299 = (char *)&v236 - v46;
  MEMORY[0x270FA5388](v47);
  v298 = (char *)&v236 - v48;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v50 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  v286 = (char *)&v236 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v52);
  v284 = (char *)&v236 - v53;
  MEMORY[0x270FA5388](v54);
  uint64_t v56 = (char *)&v236 - v55;
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v57 - 8);
  int64_t v268 = (char *)&v236 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v59);
  v265 = (char *)&v236 - v60;
  MEMORY[0x270FA5388](v61);
  uint64_t v63 = (char *)&v236 - v62;
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v261 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  unint64_t v66 = (char *)&v236 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v287 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v67 = v4 + *(int *)(type metadata accessor for PaperDocumentPage() + 44);
  uint64_t v307 = v32;
  uint64_t v254 = CROrderedSet.map<A>(_:)();
  uint64_t v242 = v18;
  uint64_t v237 = v67;
  CROrderedSet.makeIterator()();
  uint64_t v291 = v64;
  uint64_t v68 = v63;
  CROrderedSet.Iterator.next()();
  uint64_t v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
  uint64_t v290 = v50 + 48;
  v289 = v69;
  unsigned int v70 = v69(v63, 1, v49);
  uint64_t v304 = v49;
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v305;
  uint64_t v243 = v50;
  if (v70 != 1)
  {
    uint64_t v89 = v50 + 32;
    BOOL v90 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
    v296 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v267 + 48);
    v293 = (void (**)(char *))(v267 + 32);
    v285 = (uint64_t *)(v267 + 16);
    v271 = (void (**)(char *, uint64_t))(v300 + 16);
    uint64_t v270 = v267 + 40;
    uint64_t v273 = (void (**)(uint64_t *, uint64_t))(v300 + 8);
    v272 = (void (**)(char *, uint64_t))(v267 + 8);
    v295 = (void (**)(char *, uint64_t))(v89 - 24);
    uint64_t v91 = v282;
    uint64_t v92 = (uint64_t)v259;
    v278 = v66;
    uint64_t v274 = v89;
    v90(v56, v68, v49);
    while (1)
    {
      SharedTagged_9.tagged9.getter();
      if ((*v296)(v92, 1, v91) == 1)
      {
        (*v295)(v56, v49);
        outlined destroy of StocksKitCurrencyCache.Provider?(v92, &demangling cache variable for type metadata for Ref<PDFAnnotationElement>?);
      }
      else
      {
        uint64_t v93 = v92;
        uint64_t v94 = v90;
        uint64_t v95 = v68;
        uint64_t v96 = (void (*)(uint64_t, uint64_t))*v293;
        uint64_t v97 = v298;
        unint64_t v98 = v93;
        (*v293)(v298);
        unint64_t v73 = (unint64_t)v303;
        MEMORY[0x21054BDF0](v49);
        ((void (*)(char *, char *, uint64_t))*v285)(v299, v97, v91);
        unint64_t v99 = v287;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v310 = v99;
        unint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(v73);
        uint64_t v102 = *(void *)(v99 + 16);
        BOOL v103 = (v100 & 1) == 0;
        uint64_t v104 = v102 + v103;
        if (__OFADD__(v102, v103)) {
          goto LABEL_123;
        }
        char v105 = v100;
        if (*(void *)(v99 + 24) >= v104)
        {
          unint64_t v73 = v98;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v104, isUniquelyReferenced_nonNull_native);
          unint64_t v106 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v303);
          if ((v105 & 1) != (v107 & 1)) {
            goto LABEL_129;
          }
          unint64_t v101 = v106;
          unint64_t v73 = v98;
        }
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v305;
        uint64_t v68 = v95;
        unint64_t v108 = v310;
        BOOL v90 = v94;
        if (v105)
        {
          unint64_t v287 = v310;
          unint64_t v109 = *(void *)(v310 + 56) + *(void *)(v267 + 72) * v101;
          uint64_t v91 = v282;
          (*(void (**)(unint64_t, char *, uint64_t))(v267 + 40))(v109, v299, v282);
          uint64_t v92 = v73;
        }
        else
        {
          unint64_t v110 = v310;
          *(void *)(v310 + 8 * (v101 >> 6) + 64) |= 1 << v101;
          (*(void (**)(unint64_t, uint64_t *, uint64_t))(v300 + 16))(*(void *)(v108 + 48) + *(void *)(v300 + 72) * v101, v303, v307);
          unint64_t v111 = *(void *)(v110 + 56) + *(void *)(v267 + 72) * v101;
          uint64_t v91 = v282;
          ((void (*)(unint64_t, char *, uint64_t))v96)(v111, v299, v282);
          uint64_t v112 = *(void *)(v110 + 16);
          BOOL v113 = __OFADD__(v112, 1);
          uint64_t v114 = v112 + 1;
          if (v113) {
            goto LABEL_126;
          }
          uint64_t v92 = v73;
          *(void *)(v110 + 16) = v114;
          unint64_t v287 = v310;
        }
        swift_bridgeObjectRelease();
        (*v273)(v303, v307);
        (*v272)(v298, v91);
        uint64_t v49 = v304;
        (*v295)(v56, v304);
        unint64_t v66 = v278;
      }
      CROrderedSet.Iterator.next()();
      if (v289(v68, 1, v49) == 1) {
        break;
      }
      v90(v56, v68, v49);
    }
  }
  (*(void (**)(char *, uint64_t))(v261 + 8))(v66, v291);
  id v72 = objc_msgSend(v288, sel_annotations);
  uint64_t v261 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  unint64_t v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v73 >> 62) {
    goto LABEL_127;
  }
  uint64_t v74 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
  uint64_t v75 = v255;
  uint64_t v76 = v280;
  if (v74)
  {
    unint64_t v310 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74 & ~(v74 >> 63), 0);
    if (v74 < 0)
    {
      __break(1u);
LABEL_129:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    uint64_t v77 = 0;
    uint64_t v78 = (unsigned int (**)(void, uint64_t, uint64_t))(v300 + 48);
    uint64_t v79 = (void (**)(id, void, uint64_t))(v300 + 32);
    v303 = (uint64_t *)(v300 + 56);
    while (1)
    {
      id v80 = (v73 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x21054E050](v77, v73)
          : *(id *)(v73 + 8 * v77 + 32);
      uint64_t v81 = v80;
      type metadata accessor for CanvasElementPDFAnnotation();
      uint64_t v82 = swift_dynamicCastClass();
      if (!v82) {
        break;
      }
      uint64_t v83 = v82 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
      swift_beginAccess();
      uint64_t v84 = (void (**)(void, void, void))v302;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v83, (uint64_t)v302, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      if ((*v78)(v84, 1, v307) == 1) {
        goto LABEL_14;
      }
      (*v79)(v306, v84, v307);
LABEL_15:

      unint64_t v85 = v310;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v85 + 16) + 1, 1);
        unint64_t v85 = v310;
      }
      uint64_t v86 = v300;
      unint64_t v88 = *(void *)(v85 + 16);
      unint64_t v87 = *(void *)(v85 + 24);
      if (v88 >= v87 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, v88 + 1, 1);
        uint64_t v86 = v300;
        unint64_t v85 = v310;
      }
      ++v77;
      *(void *)(v85 + 16) = v88 + 1;
      (*(void (**)(unint64_t, id, uint64_t))(v86 + 32))(v85+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(void *)(v86 + 72) * v88, v306, v307);
      unint64_t v310 = v85;
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v305;
      if (v74 == v77)
      {
        swift_bridgeObjectRelease();
        uint64_t v75 = v255;
        uint64_t v76 = v280;
        goto LABEL_38;
      }
    }
    uint64_t v84 = (void (**)(void, void, void))v302;
    ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))*v303)(v302, 1, 1, v307);
LABEL_14:
    static CRKeyPath.unique.getter();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v84, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  unint64_t v85 = MEMORY[0x263F8EE78];
LABEL_38:
  unint64_t v310 = v254;
  unint64_t v315 = v85;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A], &demangling cache variable for type metadata for [CRKeyPath]);
  uint64_t v115 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
  long long v116 = v244;
  int v259 = (char *)v115;
  BidirectionalCollection<>.difference<A>(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v117 = (uint64_t)v256;
  uint64_t v273 = *(void (***)(uint64_t *, uint64_t))(v247 + 16);
  uint64_t v274 = v247 + 16;
  ((void (*)(unsigned int (**)(uint64_t, uint64_t, uint64_t), char *, uint64_t))v273)(v256, v116, v75);
  uint64_t v118 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CollectionDifference<CRKeyPath> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v119 = v257;
  *(void *)(v117 + *(int *)(v257 + 36)) = v310;
  uint64_t v120 = v279;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v117, v279, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
  uint64_t v121 = (uint64_t *)(v120 + *(int *)(v119 + 36));
  uint64_t v253 = OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_appearanceStreamAnnotations;
  uint64_t v122 = (void (*)(void, void, void))*v121;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v123 = v294;
  if (v122 != (void (*)(void, void, void))v310)
  {
    v271 = (void (**)(char *, uint64_t))(v247 + 8);
    v278 = (char *)(v300 + 32);
    uint64_t v257 = v267 + 56;
    v251 = (void (**)(char *, uint64_t, uint64_t))(v267 + 16);
    v256 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v267 + 48);
    v303 = (uint64_t *)(v300 + 56);
    v302 = (uint64_t *)(v300 + 16);
    v295 = (void (**)(char *, uint64_t))(v300 + 48);
    v293 = (void (**)(char *))(v300 + 8);
    uint64_t v246 = (void (**)(char *, uint64_t))(v267 + 8);
    v245 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v243 + 56);
    uint64_t v270 = v118;
    v285 = v121;
    while (1)
    {
      uint64_t v162 = v120;
      long long v163 = (void (*)(unint64_t *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v164 = v276;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v165, v276, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
      v163(&v310, 0);
      id v166 = v275;
      ((void (*)(char *, uint64_t, uint64_t))v273)(v275, v162, v75);
      dispatch thunk of Collection.formIndex(after:)();
      (*v271)(v166, v75);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v164, (uint64_t)v76, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
      EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
      unint64_t v73 = *v76;
      if (EnumCaseMultiPayload == 1)
      {
        id v168 = objc_msgSend(v288, sel_annotations);
        uint64_t v169 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v169 & 0xC000000000000001) != 0)
        {
          id v171 = (id)MEMORY[0x21054E050](v73, v169);
          uint64_t v120 = v279;
          uint64_t v170 = v285;
        }
        else
        {
          uint64_t v120 = v279;
          uint64_t v170 = v285;
          if ((v73 & 0x8000000000000000) != 0) {
            goto LABEL_124;
          }
          if (v73 >= *(void *)((v169 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_125;
          }
          id v171 = *(id *)(v169 + 8 * v73 + 32);
        }
        swift_bridgeObjectRelease();
        id v172 = objc_msgSend(v171, sel_type);
        if (!v172) {
          goto LABEL_58;
        }
        uint64_t v173 = v172;
        uint64_t v174 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v176 = v175;

        if (v174 == 0x746567646957 && v176 == 0xE600000000000000)
        {
          swift_bridgeObjectRelease();
          goto LABEL_101;
        }
        char v178 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v178)
        {
LABEL_101:
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v222 = type metadata accessor for Logger();
          __swift_project_value_buffer(v222, (uint64_t)logger);
          uint64_t v223 = Logger.logObject.getter();
          os_log_type_t v224 = static os_log_type_t.error.getter();
          BOOL v225 = os_log_type_enabled(v223, v224);
          uint64_t v76 = v280;
          if (v225)
          {
            id v226 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v226 = 0;
            _os_log_impl(&dword_20C2D7000, v223, v224, "Attempted to remove a Widget annotation.", v226, 2u);
            MEMORY[0x210550270](v226, -1, -1);
          }
        }
        else
        {
LABEL_58:
          objc_msgSend(v288, sel_removeAnnotation_atIndex_, v171, v73);
          uint64_t v76 = v280;
        }

        CGFloat v160 = (char *)v76
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CRKeyPath, associatedWith: Int?))
                      + 48);
        uint64_t v123 = v294;
        goto LABEL_60;
      }
      uint64_t v179 = (char *)v76
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CRKeyPath, associatedWith: Int?))
                    + 48);
      uint64_t v180 = (uint64_t)v292;
      v272 = *(void (***)(char *, uint64_t))v278;
      ((void (*)(char *, char *, uint64_t))v272)(v292, v179, v307);
      unint64_t v181 = v287;
      if (*(void *)(v287 + 16))
      {
        unint64_t v182 = specialized __RawDictionaryStorage.find<A>(_:)(v180);
        uint64_t v170 = v285;
        if (v183)
        {
          uint64_t v184 = (uint64_t)v258;
          (*(void (**)(char *, unint64_t, uint64_t))(v267 + 16))(v258, *(void *)(v181 + 56) + *(void *)(v267 + 72) * v182, v282);
          uint64_t v185 = 0;
        }
        else
        {
          uint64_t v185 = 1;
          uint64_t v184 = (uint64_t)v258;
        }
      }
      else
      {
        uint64_t v185 = 1;
        uint64_t v184 = (uint64_t)v258;
        uint64_t v170 = v285;
      }
      uint64_t v186 = v282;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v257)(v184, v185, 1, v282);
      if (!(*v256)(v184, 1, v186))
      {
        CGRect v210 = v248;
        (*v251)(v248, v184, v186);
        outlined destroy of StocksKitCurrencyCache.Provider?(v184, &demangling cache variable for type metadata for Ref<PDFAnnotationElement>?);
        type metadata accessor for PaperDocument(0);
        lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
        uint64_t v211 = isUniquelyReferenced_nonNull_native;
        CGRect v212 = v249;
        Ref.subscript.getter();
        (*v246)(v210, v186);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
        CRRegister.wrappedValue.getter();
        double v213 = v311;
        double v214 = v312;
        double v215 = v313;
        double v216 = v314;
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
        CRRegister.wrappedValue.getter();
        CGRect v217 = (void *)MEMORY[0x21054D080](v315, v316);
        swift_bridgeObjectRelease();
        id v218 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasElementPDFAnnotation()), sel_initWithBounds_forType_withProperties_, v217, 0, v213, v214, v215, v216);

        uint64_t v219 = (uint64_t)v268;
        (*v245)(v268, 1, 1, v304);
        uint64_t v123 = v294;
        specialized PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:capsule:options:)(0x8000000000000000, v219, v218);
        uint64_t v220 = v219;
        uint64_t v180 = (uint64_t)v292;
        outlined destroy of StocksKitCurrencyCache.Provider?(v220, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
        uint64_t v221 = (uint64_t)v212;
        uint64_t isUniquelyReferenced_nonNull_native = v211;
        uint64_t v170 = v285;
        _s8PaperKit0A8DocumentVWOhTm_0(v221, (uint64_t (*)(void))type metadata accessor for PDFAnnotationElement);
        goto LABEL_108;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v184, &demangling cache variable for type metadata for Ref<PDFAnnotationElement>?);
      unint64_t v187 = *(void *)&v288[v253];
      if (!v187) {
        goto LABEL_107;
      }
      uint64_t v254 = v73;
      uint64_t v300 = v187;
      if (v187 >> 62)
      {
        swift_bridgeObjectRetain_n();
        unint64_t v187 = v300;
        uint64_t v188 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v188 = *(void *)((v187 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
      }
      uint64_t v189 = v301;
      if (!v188)
      {
LABEL_106:
        swift_bridgeObjectRelease_n();
        uint64_t v75 = v255;
        uint64_t v170 = v285;
        unint64_t v73 = v254;
LABEL_107:
        id v218 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasElementPDFAnnotation()), sel_init);
        goto LABEL_108;
      }
      v299 = (char *)(v187 & 0xC000000000000001);
      uint64_t v190 = 4;
      v298 = (char *)v188;
      while (1)
      {
        if (v299) {
          id v191 = (id)MEMORY[0x21054E050](v190 - 4, v187);
        }
        else {
          id v191 = *(id *)(v187 + 8 * v190);
        }
        uint64_t v192 = v191;
        uint64_t v193 = (char *)(v190 - 3);
        if (__OFADD__(v190 - 4, 1))
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          swift_bridgeObjectRetain();
          uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v296 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))type metadata accessor for CanvasElementPDFAnnotation();
        uint64_t v194 = swift_dynamicCastClass();
        id v306 = v192;
        if (v194)
        {
          uint64_t v195 = v194 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
          swift_beginAccess();
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v195, (uint64_t)v189, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
          CGAffineTransform v196 = v303;
        }
        else
        {
          CGAffineTransform v196 = v303;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v303)((uint64_t)v189, 1, 1, v307);
        }
        uint64_t v197 = v180;
        uint64_t v198 = v180;
        uint64_t v199 = v307;
        ((void (*)(uint64_t, uint64_t, uint64_t))*v302)(v123, v198, v307);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))*v196)(v123, 0, 1, v199);
        uint64_t v200 = isUniquelyReferenced_nonNull_native + *(int *)(v297 + 48);
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v189, isUniquelyReferenced_nonNull_native, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v123, v200, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        uint64_t v201 = isUniquelyReferenced_nonNull_native;
        unint64_t v73 = (unint64_t)v295;
        CGRect v202 = *v295;
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v295)(v201, 1, v199) == 1) {
          break;
        }
        uint64_t v203 = v281;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v201, v281, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v202)(v200, 1, v307) == 1)
        {
          ((void (*)(uint64_t, uint64_t))*v293)(v203, v307);
          uint64_t v123 = v294;
          goto LABEL_85;
        }
        unint64_t v73 = v307;
        CGRect v204 = v260;
        ((void (*)(char *, uint64_t, uint64_t))v272)(v260, v200, v307);
        char v205 = dispatch thunk of static Equatable.== infix(_:_:)();
        CGRect v206 = (void (*)(uint64_t, uint64_t))*v293;
        ((void (*)(uint64_t, unint64_t))*v293)(v203, v73);
        CGRect v207 = v204;
        uint64_t v180 = (uint64_t)v292;
        v206((uint64_t)v207, v73);
        outlined destroy of StocksKitCurrencyCache.Provider?(v201, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        uint64_t v123 = v294;
        outlined destroy of StocksKitCurrencyCache.Provider?(v294, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        CGRect v208 = v301;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v301, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        uint64_t v209 = v201;
        uint64_t v189 = v208;
        uint64_t isUniquelyReferenced_nonNull_native = v209;
        if (v205) {
          goto LABEL_112;
        }
LABEL_86:

        ++v190;
        unint64_t v187 = v300;
        if (v193 == v298) {
          goto LABEL_106;
        }
      }
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v202)(v200, 1, v307) != 1) {
        break;
      }
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v305;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v305, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v123, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v301, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      uint64_t v180 = v197;
LABEL_112:
      swift_bridgeObjectRelease_n();
      uint64_t v75 = v255;
      uint64_t v170 = v285;
      unint64_t v73 = v254;
      id v218 = v306;
LABEL_108:
      type metadata accessor for CanvasElementPDFAnnotation();
      uint64_t v227 = swift_dynamicCastClass();
      if (v227)
      {
        uint64_t v228 = v227;
        v229 = v252;
        uint64_t v230 = v307;
        ((void (*)(char *, char *, uint64_t))*v302)(v252, v292, v307);
        ((void (*)(char *, void, uint64_t, uint64_t))*v303)(v229, 0, 1, v230);
        uint64_t v231 = v228 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
        swift_beginAccess();
        id v232 = v218;
        uint64_t v233 = (uint64_t)v229;
        uint64_t v180 = (uint64_t)v292;
        outlined assign with take of Date?(v233, v231, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        swift_endAccess();

        uint64_t v123 = v294;
      }
      objc_msgSend(v288, sel_insertAnnotation_atIndex_, v218, v73);

      CGFloat v160 = (char *)v180;
      uint64_t v76 = v280;
      uint64_t v120 = v279;
LABEL_60:
      ((void (*)(char *, uint64_t))*v293)(v160, v307);
      uint64_t v161 = *v170;
      dispatch thunk of Collection.endIndex.getter();
      if (v161 == v310) {
        goto LABEL_40;
      }
    }
LABEL_85:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v305;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v305, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
    outlined destroy of StocksKitCurrencyCache.Provider?(v123, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    uint64_t v189 = v301;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v301, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    uint64_t v180 = v197;
    goto LABEL_86;
  }
LABEL_40:
  outlined destroy of StocksKitCurrencyCache.Provider?(v120, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
  id v124 = v288;
  objc_msgSend(v288, sel_boundsForBox_, 0);
  uint64_t v126 = v125;
  uint64_t v128 = v127;
  uint64_t v130 = v129;
  uint64_t v132 = v131;
  id v133 = objc_msgSend(v124, sel_annotations);
  uint64_t v134 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v135 = v240;
  uint64_t v136 = v238;
  uint64_t v137 = v242;
  (*(void (**)(char *, uint64_t, uint64_t))(v240 + 16))(v238, v237, v242);
  (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v241, v136, v137);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v138 = (uint64_t)v266;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v139 = v239;
  uint64_t v140 = (uint64_t *)(v138 + *(int *)(v239 + 52));
  *uint64_t v140 = v134;
  v140[1] = 0;
  id v306 = (id)*(int *)(v139 + 56);
  *((unsigned char *)v306 + v138) = 0;
  uint64_t v307 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v141 = (uint64_t *)(v243 + 32);
  v302 = (uint64_t *)(v243 + 16);
  v301 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v243 + 56);
  v305 = (void (**)(char *, uint64_t))(v243 + 8);
  uint64_t v142 = v304;
  v303 = v140;
  uint64_t v143 = v286;
  while (1)
  {
    uint64_t v151 = (uint64_t)v265;
    dispatch thunk of IteratorProtocol.next()();
    if (v289((char *)v151, 1, v142) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v151, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      goto LABEL_117;
    }
    uint64_t isUniquelyReferenced_nonNull_native = *v141;
    ((void (*)(char *, uint64_t, uint64_t))*v141)(v284, v151, v142);
    uint64_t v153 = *v140;
    unint64_t v152 = v140[1];
    if ((unint64_t)*v140 >> 62) {
      break;
    }
    unint64_t v73 = *(void *)((v153 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v152 == v73) {
      goto LABEL_116;
    }
LABEL_46:
    if ((v153 & 0xC000000000000001) != 0)
    {
      id v154 = (id)MEMORY[0x21054E050](v152, v153);
    }
    else
    {
      if ((v152 & 0x8000000000000000) != 0) {
        goto LABEL_120;
      }
      if (v152 >= *(void *)((v153 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_122;
      }
      id v154 = *(id *)(v153 + 8 * v152 + 32);
    }
    uint64_t v155 = v154;
    if (__OFADD__(v152, 1)) {
      goto LABEL_121;
    }
    v140[1] = v152 + 1;
    uint64_t v156 = *(int *)(v263 + 48);
    v157 = v262;
    ((void (*)(char *, char *, uint64_t))isUniquelyReferenced_nonNull_native)(v262, v284, v142);
    *(void *)&v157[v156] = v155;
    ((void (*)(char *, char *, uint64_t))isUniquelyReferenced_nonNull_native)(v286, v157, v142);
    unint64_t v158 = v283;
    if (v283 == 0x8000000000000000)
    {
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
      if (!PDFAnnotation.shouldMirrorAsPDFAnnotationElement()())
      {
        SharedTagged_9.tag.getter();
        unint64_t v315 = v310;
        LOBYTE(v316) = LOBYTE(v311);
        unint64_t v308 = 8;
        char v309 = 0;
        lazy protocol witness table accessor for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum();
        int v159 = static CRExtensible.== infix(_:_:)();
        if ((v159 ^ objc_msgSend(v155, sel_shouldDisplay))) {
          objc_msgSend(v155, sel_setShouldDisplay_, v159 & 1);
        }
      }
    }
    else
    {
      outlined copy of PaperDocument.PDFDocumentUse(v283);
      outlined consume of PaperDocument.PDFDocumentUse(v158);
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    }
    uint64_t v144 = type metadata accessor for PaperDocument(0);
    uint64_t v145 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    uint64_t v146 = v269;
    SharedTagged_9.subscript.getter();
    uint64_t v147 = v317;
    uint64_t v148 = v318;
    __swift_project_boxed_opaque_existential_1(&v315, v317);
    unint64_t v308 = v283;
    uint64_t v149 = (uint64_t)v268;
    ((void (*)(char *, char *, uint64_t))*v302)(v268, v143, v304);
    (*v301)(v149, 0, 1, v304);
    v319[0] = v126;
    v319[1] = v128;
    v319[2] = v130;
    v319[3] = v132;
    char v320 = 0;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v264, (uint64_t)&v310, (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
    unint64_t v150 = *(void (**)(unint64_t *, uint64_t, void *, void *, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v148 + 96);
    uint64_t v235 = v148;
    uint64_t v142 = v304;
    v150(&v308, v149, v155, v319, v146, &v310, v144, v145, v147, v235);

    outlined destroy of StocksKitCurrencyCache.Provider?(v149, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    (*v305)(v143, v142);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v315);
    uint64_t v138 = (uint64_t)v266;
    uint64_t v140 = v303;
    if (*((unsigned char *)v306 + (void)v266)) {
      goto LABEL_118;
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v152 != v73) {
    goto LABEL_46;
  }
LABEL_116:
  (*v305)(v284, v142);
  uint64_t v138 = (uint64_t)v266;
LABEL_117:
  *((unsigned char *)v306 + v138) = 1;
LABEL_118:
  outlined destroy of StocksKitCurrencyCache.Provider?(v138, &demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, [PDFAnnotation]>.Iterator);
  (*(void (**)(char *, uint64_t))(v247 + 8))(v244, v255);
  return swift_bridgeObjectRelease();
}

uint64_t specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[107] = v3;
  v4[106] = a3;
  v4[105] = a2;
  v4[104] = a1;
  uint64_t v5 = type metadata accessor for PKDrawing();
  v4[108] = v5;
  v4[109] = *(void *)(v5 - 8);
  v4[110] = swift_task_alloc();
  v4[111] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  v4[112] = swift_task_alloc();
  v4[113] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v4[114] = v6;
  v4[115] = *(void *)(v6 - 8);
  v4[116] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CRKeyPath();
  v4[117] = v7;
  v4[118] = *(void *)(v7 - 8);
  v4[119] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  v4[120] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v4[121] = v8;
  v4[122] = *(void *)(v8 - 8);
  v4[123] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v4[124] = v9;
  v4[125] = *(void *)(v9 - 8);
  v4[126] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v4[127] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v4[128] = v10;
  v4[129] = *(void *)(v10 - 8);
  v4[130] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4[103] = v3;
  v4[102] = a3;
  v4[101] = a2;
  v4[100] = a1;
  uint64_t v5 = type metadata accessor for PKDrawing();
  v4[104] = v5;
  v4[105] = *(void *)(v5 - 8);
  v4[106] = swift_task_alloc();
  v4[107] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  v4[108] = swift_task_alloc();
  v4[109] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v4[110] = v6;
  v4[111] = *(void *)(v6 - 8);
  v4[112] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CRKeyPath();
  v4[113] = v7;
  v4[114] = *(void *)(v7 - 8);
  v4[115] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  v4[116] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v4[117] = v8;
  v4[118] = *(void *)(v8 - 8);
  v4[119] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v4[120] = v9;
  v4[121] = *(void *)(v9 - 8);
  v4[122] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v4[123] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v4[124] = v10;
  v4[125] = *(void *)(v10 - 8);
  v4[126] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4[103] = v3;
  v4[102] = a3;
  v4[101] = a2;
  v4[100] = a1;
  uint64_t v5 = type metadata accessor for PKDrawing();
  v4[104] = v5;
  v4[105] = *(void *)(v5 - 8);
  v4[106] = swift_task_alloc();
  v4[107] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  v4[108] = swift_task_alloc();
  v4[109] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v4[110] = v6;
  v4[111] = *(void *)(v6 - 8);
  v4[112] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CRKeyPath();
  v4[113] = v7;
  v4[114] = *(void *)(v7 - 8);
  v4[115] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  v4[116] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v4[117] = v8;
  v4[118] = *(void *)(v8 - 8);
  v4[119] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v4[120] = v9;
  v4[121] = *(void *)(v9 - 8);
  v4[122] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v4[123] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v4[124] = v10;
  v4[125] = *(void *)(v10 - 8);
  v4[126] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

uint64_t specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)()
{
  uint64_t v109 = v0;
  uint64_t v1 = *(void *)(v0 + 848);
  CGContextSaveGState(*(CGContextRef *)(v0 + 832));
  LOBYTE(v1) = *(unsigned char *)(v1 + 16);
  uint64_t v103 = type metadata accessor for Paper();
  if (v1)
  {
    uint64_t v15 = *(CGContext **)(v0 + 832);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    CGFloat v16 = *(double *)(v0 + 824);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    double v17 = *(double *)(v0 + 680);
    double v18 = *(double *)(v0 + 688);
    t2 = *(CGAffineTransform **)(v0 + 704);
    CGFloat v100 = *(double *)(v0 + 696);
    CGAffineTransformMakeRotation(&v108, v16);
    CGFloat a = v108.a;
    CGFloat b = v108.b;
    CGFloat c = v108.c;
    CGFloat d = v108.d;
    *(CGFloat *)(v0 + 192) = v108.a;
    tCGFloat x = v108.tx;
    tCGFloat y = v108.ty;
    *(CGFloat *)(v0 + 200) = b;
    *(CGFloat *)(v0 + 208) = c;
    *(CGFloat *)(v0 + 216) = d;
    *(CGFloat *)(v0 + 224) = tx;
    *(CGFloat *)(v0 + 232) = ty;
    v111.origin.CGFloat x = v17;
    v111.origin.CGFloat y = v18;
    *(void *)&v111.size.CGFloat height = t2;
    v111.size.CGFloat width = v100;
    CGRect v112 = CGRectApplyAffineTransform(v111, (CGAffineTransform *)(v0 + 192));
    CGAffineTransformMakeTranslation(&v108, v17 - v112.origin.x, v18 - v112.origin.y);
    long long v25 = *(_OWORD *)&v108.c;
    long long v26 = *(_OWORD *)&v108.tx;
    *(_OWORD *)(v0 + 96) = *(_OWORD *)&v108.a;
    *(CGFloat *)(v0 + 144) = a;
    *(CGFloat *)(v0 + 152) = b;
    *(CGFloat *)(v0 + 160) = c;
    *(CGFloat *)(v0 + 168) = d;
    *(CGFloat *)(v0 + 176) = tx;
    *(CGFloat *)(v0 + 184) = ty;
    *(_OWORD *)(v0 + 112) = v25;
    *(_OWORD *)(v0 + 128) = v26;
    CGAffineTransformConcat(&v108, (CGAffineTransform *)(v0 + 144), (CGAffineTransform *)(v0 + 96));
    long long v27 = *(_OWORD *)&v108.c;
    long long v28 = *(_OWORD *)&v108.tx;
    *(_OWORD *)(v0 + 240) = *(_OWORD *)&v108.a;
    *(_OWORD *)(v0 + 256) = v27;
    *(_OWORD *)(v0 + 272) = v28;
    uint64_t v13 = v15;
    uint64_t v14 = (CGAffineTransform *)(v0 + 240);
  }
  else
  {
    unint64_t v99 = *(CGContext **)(v0 + 832);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    double Width = CGRectGetWidth(*(CGRect *)(v0 + 648));
    CRRegister.wrappedValue.getter();
    CGFloat v3 = CGRectGetWidth(*(CGRect *)(v0 + 744));
    CGAffineTransformMakeScale(&v108, Width / v3, Width / v3);
    long long v93 = *(_OWORD *)&v108.c;
    long long v95 = *(_OWORD *)&v108.a;
    CGFloat v4 = v108.tx;
    CGFloat v5 = v108.ty;
    CRRegister.wrappedValue.getter();
    CGFloat MinX = CGRectGetMinX(*(CGRect *)(v0 + 712));
    CRRegister.wrappedValue.getter();
    CGFloat MinY = CGRectGetMinY(*(CGRect *)(v0 + 616));
    CGAffineTransformMakeTranslation(&v108, MinX, MinY);
    long long v8 = *(_OWORD *)&v108.a;
    long long v9 = *(_OWORD *)&v108.c;
    long long v10 = *(_OWORD *)&v108.tx;
    *(_OWORD *)(v0 + 288) = v95;
    *(_OWORD *)(v0 + 304) = v93;
    *(CGFloat *)(v0 + 320) = v4;
    *(CGFloat *)(v0 + 328) = v5;
    *(_OWORD *)(v0 + 336) = v8;
    *(_OWORD *)(v0 + 352) = v9;
    *(_OWORD *)(v0 + 368) = v10;
    CGAffineTransformConcat(&v108, (CGAffineTransform *)(v0 + 288), (CGAffineTransform *)(v0 + 336));
    long long v11 = *(_OWORD *)&v108.c;
    long long v12 = *(_OWORD *)&v108.tx;
    *(_OWORD *)(v0 + 384) = *(_OWORD *)&v108.a;
    *(_OWORD *)(v0 + 400) = v11;
    *(_OWORD *)(v0 + 416) = v12;
    uint64_t v13 = v99;
    uint64_t v14 = (CGAffineTransform *)(v0 + 384);
  }
  CGContextConcatCTM(v13, v14);
  uint64_t v29 = *(void *)(v0 + 1016);
  uint64_t v30 = *(void *)(v0 + 1000);
  uint64_t v101 = *(void *)(v0 + 992);
  uint64_t v31 = *(void *)(v0 + 848);
  ClipBoundingBoCGFloat x = CGContextGetClipBoundingBox((CGContextRef)*(void *)(v0 + 832));
  CGFloat x = ClipBoundingBox.origin.x;
  CGFloat y = ClipBoundingBox.origin.y;
  CGFloat v34 = ClipBoundingBox.size.width;
  CGFloat height = ClipBoundingBox.size.height;
  *(CGRect *)(v0 + 1048) = ClipBoundingBox;
  *(unsigned char *)(v0 + 91) = *(unsigned char *)v31;
  *(unsigned char *)(v0 + 92) = *(unsigned char *)(v31 + 1);
  *(unsigned char *)(v0 + 93) = *(unsigned char *)(v31 + 2);
  uint64_t v36 = *(void **)(v31 + 8);
  *(void *)(v0 + 1080) = v36;
  uint64_t v37 = *(void **)(v31 + 64);
  *(void *)(v0 + 1088) = v37;
  *(unsigned char *)(v0 + 94) = *(unsigned char *)(v31 + 72);
  *(unsigned char *)(v0 + 95) = *(unsigned char *)(v31 + 73);
  *(unsigned char *)(v0 + 545) = *(unsigned char *)(v31 + 74);
  outlined retain of PaperRenderableOptions(v31);
  id v38 = v37;
  id v39 = v36;
  *(void *)(v0 + 1096) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  *(_OWORD *)(v0 + 1104) = *(_OWORD *)(v0 + 584);
  *(_OWORD *)(v0 + 1120) = *(_OWORD *)(v0 + 600);
  *(void *)(v0 + 1136) = v103;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
  *(void *)(v0 + 1144) = v40;
  *(void *)(v0 + 1152) = (v30 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v40(v29, 1, v101) == 1)
  {
LABEL_8:
    uint64_t v59 = *(void **)(v0 + 1088);
    uint64_t v60 = *(void **)(v0 + 1080);
    uint64_t v61 = *(void *)(v0 + 976);
    uint64_t v62 = *(void *)(v0 + 968);
    uint64_t v63 = *(void *)(v0 + 960);
    (*(void (**)(void, void))(*(void *)(v0 + 1032) + 8))(*(void *)(v0 + 1040), *(void *)(v0 + 1024));

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v63, 1, v62) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 960), &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      uint64_t v64 = *(void **)(v0 + 1088);
      uint64_t v65 = *(void **)(v0 + 1080);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 832));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v66 = *(uint64_t (**)(void))(v0 + 8);
      return v66();
    }
    else
    {
      uint64_t v68 = *(void *)(v0 + 928);
      uint64_t v69 = *(void *)(v0 + 920);
      uint64_t v70 = *(void *)(v0 + 912);
      (*(void (**)(void, void, void))(*(void *)(v0 + 976) + 32))(*(void *)(v0 + 984), *(void *)(v0 + 960), *(void *)(v0 + 968));
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      Capsule.encapsulateTransient<A>(_:)();
      uint64_t v71 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      id v72 = objc_allocWithZone(v71);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))((uint64_t)v72 + OBJC_IVAR___PKDrawingCoherence_model, v68, v70);
      *(void *)(v0 + 808) = v72;
      *(void *)(v0 + 816) = v71;
      id v73 = objc_msgSendSuper2((objc_super *)(v0 + 808), sel_init);
      *(void *)(v0 + 1176) = v73;
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
      uint64_t v74 = swift_task_alloc();
      *(void *)(v0 + 1184) = v74;
      *(void *)uint64_t v74 = v0;
      *(void *)(v74 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      uint64_t v75 = *(void *)(v0 + 832);
      long long v76 = *(_OWORD *)(v0 + 1048);
      long long v77 = *(_OWORD *)(v0 + 1064);
      *(int8x16_t *)(v74 + 104) = vextq_s8(*(int8x16_t *)(v0 + 848), *(int8x16_t *)(v0 + 848), 8uLL);
      *(void *)(v74 + 96) = v75;
      *(_OWORD *)(v74 + 64) = v76;
      *(_OWORD *)(v74 + 80) = v77;
      *(void *)(v74 + 56) = v73;
      return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
    }
  }
  else
  {
    *(void *)(v0 + 1160) = *(void *)(*(void *)(v0 + 1000) + 32);
    *(CGFloat *)(v0 + 776) = x;
    *(CGFloat *)(v0 + 784) = y;
    *(CGFloat *)(v0 + 792) = v34;
    *(CGFloat *)(v0 + 800) = height;
    while (1)
    {
      CGFloat v41 = *(double *)(v0 + 776);
      CGFloat v42 = *(double *)(v0 + 784);
      CGFloat v43 = *(double *)(v0 + 792);
      CGFloat v44 = *(double *)(v0 + 800);
      (*(void (**)(void, void, void))(v0 + 1160))(*(void *)(v0 + 1008), *(void *)(v0 + 1016), *(void *)(v0 + 992));
      uint64_t v45 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
      SharedTagged_9.subscript.getter();
      uint64_t v46 = *(void *)(v0 + 456);
      uint64_t v47 = *(void *)(v0 + 464);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 432), v46);
      CRRegister.wrappedValue.getter();
      long long v48 = *(_OWORD *)(v0 + 568);
      *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 552);
      *(_OWORD *)(v0 + 528) = v48;
      *(unsigned char *)(v0 + 544) = 0;
      CGFloat v49 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v47 + 112))(v0 + 512, v46, v47);
      CGFloat v51 = v50;
      CGFloat v53 = v52;
      CGFloat v55 = v54;
      __swift_destroy_boxed_opaque_existential_1(v0 + 432);
      v114.origin.CGFloat x = v49;
      v114.origin.CGFloat y = v51;
      v114.size.CGFloat width = v53;
      v114.size.CGFloat height = v55;
      v115.origin.CGFloat x = v41;
      v115.origin.CGFloat y = v42;
      v115.size.CGFloat width = v43;
      v115.size.CGFloat height = v44;
      if (CGRectIntersectsRect(v114, v115)) {
        break;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 1000) + 8))(*(void *)(v0 + 1008), *(void *)(v0 + 992));
      uint64_t v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
      uint64_t v57 = *(void *)(v0 + 1016);
      uint64_t v58 = *(void *)(v0 + 992);
      CROrderedSet.Iterator.next()();
      if (v56(v57, 1, v58) == 1) {
        goto LABEL_8;
      }
    }
    uint64_t v104 = *(void *)(v0 + 1128);
    t2CGFloat a = *(CGAffineTransform **)(v0 + 1120);
    long long v94 = *(_OWORD *)(v0 + 1104);
    char v106 = *(unsigned char *)(v0 + 545);
    char v102 = *(unsigned char *)(v0 + 95);
    char v96 = *(unsigned char *)(v0 + 94);
    uint64_t v91 = *(void **)(v0 + 1080);
    uint64_t v92 = *(void **)(v0 + 1088);
    char v78 = *(unsigned char *)(v0 + 93);
    char v79 = *(unsigned char *)(v0 + 92);
    char v80 = *(unsigned char *)(v0 + 91);
    uint64_t v81 = *(void *)(v0 + 992);
    SharedTagged_9.subscript.getter();
    uint64_t v82 = *(void *)(v0 + 504);
    uint64_t v107 = *(void *)(v0 + 496);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 472), v107);
    MEMORY[0x21054BDF0](v81);
    *(unsigned char *)(v0 + 16) = v80;
    *(unsigned char *)(v0 + 17) = v79;
    *(unsigned char *)(v0 + 18) = v78;
    *(void *)(v0 + 24) = v91;
    *(unsigned char *)(v0 + 32) = 0;
    *(_OWORD *)(v0 + 40) = v94;
    *(void *)(v0 + 56) = t2a;
    *(void *)(v0 + 64) = v104;
    *(unsigned char *)(v0 + 72) = 0;
    *(void *)(v0 + 80) = v92;
    *(unsigned char *)(v0 + 88) = v96;
    *(unsigned char *)(v0 + 89) = v102;
    *(unsigned char *)(v0 + 90) = v106;
    uint64_t v83 = *(void *)(v82 + 8);
    char v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v83 + 16) + **(int **)(v83 + 16));
    id v84 = v91;
    id v85 = v92;
    uint64_t v86 = (void *)swift_task_alloc();
    *(void *)(v0 + 1168) = v86;
    *uint64_t v86 = v0;
    v86[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    uint64_t v87 = *(void *)(v0 + 1136);
    uint64_t v88 = *(void *)(v0 + 952);
    uint64_t v89 = *(void *)(v0 + 840);
    uint64_t v90 = *(void *)(v0 + 832);
    return v105(v90, v88, v89, v0 + 16, v87, v45, v107, v83);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void **)(*(void *)v0 + 1088);
  uint64_t v2 = *(void **)(*(void *)v0 + 1080);
  CGFloat v3 = *(void *)(*(void *)v0 + 952);
  CGFloat v4 = *(void *)(*(void *)v0 + 944);
  CGFloat v5 = *(void *)(*(void *)v0 + 936);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  long long v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t (*v29)(void);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  objc_class *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  long long v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  long long v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char v63;
  uint64_t v64;
  CGRect v65;
  CGRect v66;

  (*(void (**)(void, void))(*(void *)(v0 + 1000) + 8))(*(void *)(v0 + 1008), *(void *)(v0 + 992));
  __swift_destroy_boxed_opaque_existential_1(v0 + 472);
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
  uint64_t v2 = *(void *)(v0 + 1016);
  CGFloat v3 = *(void *)(v0 + 992);
  CROrderedSet.Iterator.next()();
  if (v1(v2, 1, v3) == 1)
  {
LABEL_4:
    uint64_t v22 = *(void **)(v0 + 1088);
    uint64_t v23 = *(void **)(v0 + 1080);
    uint64_t v24 = *(void *)(v0 + 976);
    long long v25 = *(void *)(v0 + 968);
    long long v26 = *(void *)(v0 + 960);
    (*(void (**)(void, void))(*(void *)(v0 + 1032) + 8))(*(void *)(v0 + 1040), *(void *)(v0 + 1024));

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v26, 1, v25) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 960), &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      long long v27 = *(void **)(v0 + 1088);
      long long v28 = *(void **)(v0 + 1080);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 832));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
      return v29();
    }
    else
    {
      uint64_t v31 = *(void *)(v0 + 928);
      uint64_t v32 = *(void *)(v0 + 920);
      uint64_t v33 = *(void *)(v0 + 912);
      (*(void (**)(void, void, void))(*(void *)(v0 + 976) + 32))(*(void *)(v0 + 984), *(void *)(v0 + 960), *(void *)(v0 + 968));
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      Capsule.encapsulateTransient<A>(_:)();
      CGFloat v34 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      uint64_t v35 = objc_allocWithZone(v34);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))((uint64_t)v35 + OBJC_IVAR___PKDrawingCoherence_model, v31, v33);
      *(void *)(v0 + 808) = v35;
      *(void *)(v0 + 816) = v34;
      uint64_t v36 = objc_msgSendSuper2((objc_super *)(v0 + 808), sel_init);
      *(void *)(v0 + 1176) = v36;
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
      uint64_t v37 = swift_task_alloc();
      *(void *)(v0 + 1184) = v37;
      *(void *)uint64_t v37 = v0;
      *(void *)(v37 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      id v38 = *(void *)(v0 + 832);
      id v39 = *(_OWORD *)(v0 + 1048);
      uint64_t v40 = *(_OWORD *)(v0 + 1064);
      *(int8x16_t *)(v37 + 104) = vextq_s8(*(int8x16_t *)(v0 + 848), *(int8x16_t *)(v0 + 848), 8uLL);
      *(void *)(v37 + 96) = v38;
      *(_OWORD *)(v37 + 64) = v39;
      *(_OWORD *)(v37 + 80) = v40;
      *(void *)(v37 + 56) = v36;
      return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
    }
  }
  else
  {
    while (1)
    {
      CGFloat v4 = *(double *)(v0 + 776);
      CGFloat v5 = *(double *)(v0 + 784);
      uint64_t v6 = *(double *)(v0 + 792);
      uint64_t v7 = *(double *)(v0 + 800);
      (*(void (**)(void, void, void))(v0 + 1160))(*(void *)(v0 + 1008), *(void *)(v0 + 1016), *(void *)(v0 + 992));
      long long v8 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
      SharedTagged_9.subscript.getter();
      long long v9 = *(void *)(v0 + 456);
      long long v10 = *(void *)(v0 + 464);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 432), v9);
      CRRegister.wrappedValue.getter();
      long long v11 = *(_OWORD *)(v0 + 568);
      *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 552);
      *(_OWORD *)(v0 + 528) = v11;
      *(unsigned char *)(v0 + 544) = 0;
      long long v12 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v10 + 112))(v0 + 512, v9, v10);
      uint64_t v14 = v13;
      CGFloat v16 = v15;
      double v18 = v17;
      __swift_destroy_boxed_opaque_existential_1(v0 + 432);
      v65.origin.CGFloat x = v12;
      v65.origin.CGFloat y = v14;
      v65.size.CGFloat width = v16;
      v65.size.CGFloat height = v18;
      v66.origin.CGFloat x = v4;
      v66.origin.CGFloat y = v5;
      v66.size.CGFloat width = v6;
      v66.size.CGFloat height = v7;
      if (CGRectIntersectsRect(v65, v66)) {
        break;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 1000) + 8))(*(void *)(v0 + 1008), *(void *)(v0 + 992));
      uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
      uint64_t v20 = *(void *)(v0 + 1016);
      uint64_t v21 = *(void *)(v0 + 992);
      CROrderedSet.Iterator.next()();
      if (v19(v20, 1, v21) == 1) {
        goto LABEL_4;
      }
    }
    uint64_t v61 = *(void *)(v0 + 1128);
    uint64_t v59 = *(void *)(v0 + 1120);
    uint64_t v57 = *(_OWORD *)(v0 + 1104);
    uint64_t v63 = *(unsigned char *)(v0 + 545);
    uint64_t v60 = *(unsigned char *)(v0 + 95);
    uint64_t v58 = *(unsigned char *)(v0 + 94);
    CGFloat v55 = *(void **)(v0 + 1080);
    uint64_t v56 = *(void **)(v0 + 1088);
    CGFloat v41 = *(unsigned char *)(v0 + 93);
    CGFloat v42 = *(unsigned char *)(v0 + 92);
    CGFloat v43 = *(unsigned char *)(v0 + 91);
    CGFloat v44 = *(void *)(v0 + 992);
    SharedTagged_9.subscript.getter();
    uint64_t v45 = *(void *)(v0 + 504);
    uint64_t v46 = *(void *)(v0 + 496);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 472), v46);
    MEMORY[0x21054BDF0](v44);
    *(unsigned char *)(v0 + 16) = v43;
    *(unsigned char *)(v0 + 17) = v42;
    *(unsigned char *)(v0 + 18) = v41;
    *(void *)(v0 + 24) = v55;
    *(unsigned char *)(v0 + 32) = 0;
    *(_OWORD *)(v0 + 40) = v57;
    *(void *)(v0 + 56) = v59;
    *(void *)(v0 + 64) = v61;
    *(unsigned char *)(v0 + 72) = 0;
    *(void *)(v0 + 80) = v56;
    *(unsigned char *)(v0 + 88) = v58;
    *(unsigned char *)(v0 + 89) = v60;
    *(unsigned char *)(v0 + 90) = v63;
    uint64_t v47 = *(void *)(v45 + 8);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 + 16) + **(int **)(v47 + 16));
    long long v48 = v55;
    CGFloat v49 = v56;
    double v50 = (void *)swift_task_alloc();
    *(void *)(v0 + 1168) = v50;
    *double v50 = v0;
    v50[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    CGFloat v51 = *(void *)(v0 + 1136);
    double v52 = *(void *)(v0 + 952);
    CGFloat v53 = *(void *)(v0 + 840);
    double v54 = *(void *)(v0 + 832);
    return v62(v54, v52, v53, v0 + 16, v51, v8, v46, v47);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = v0[147];
  uint64_t v2 = v0[106];
  CGFloat v3 = objc_msgSend(self, sel_sharedCache);
  v0[149] = v3;
  CGFloat v4 = (void *)swift_task_alloc();
  v0[150] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  CGFloat v5 = (void *)swift_task_alloc();
  v0[151] = v5;
  *CGFloat v5 = v0;
  v5[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  uint64_t v6 = v0[113];
  uint64_t v7 = v0[111];
  return MEMORY[0x270FA2318](v6, 0, 0, 0xD000000000000026, 0x800000020C85CE50, closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)partial apply, v4, v7);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void);
  PKDrawing *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  uint64_t v21;

  uint64_t v1 = *(void *)(v0 + 896);
  uint64_t v2 = *(void *)(v0 + 872);
  CGFloat v3 = *(void *)(v0 + 864);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*(void *)(v0 + 904), v1, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    CGFloat v4 = *(void **)(v0 + 1176);
    CGFloat v5 = *(void *)(v0 + 984);
    uint64_t v6 = *(void *)(v0 + 976);
    uint64_t v7 = *(void *)(v0 + 968);
    long long v8 = *(void *)(v0 + 904);
    long long v9 = *(void *)(v0 + 896);

    outlined destroy of StocksKitCurrencyCache.Provider?(v8, &demangling cache variable for type metadata for PKDrawing?);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    outlined destroy of StocksKitCurrencyCache.Provider?(v9, &demangling cache variable for type metadata for PKDrawing?);
    long long v10 = *(void **)(v0 + 1088);
    long long v11 = *(void **)(v0 + 1080);
    CGContextRestoreGState(*(CGContextRef *)(v0 + 832));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 872) + 32))(*(void *)(v0 + 880), *(void *)(v0 + 896), *(void *)(v0 + 864));
    PKDrawing._bridgeToObjectiveC()(v14);
    CGFloat v16 = v15;
    *(void *)(v0 + 1216) = v15;
    double v17 = swift_task_alloc();
    *(void *)(v0 + 1224) = v17;
    *(void *)double v17 = v0;
    *(void *)(v17 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    double v18 = *(void *)(v0 + 832);
    uint64_t v19 = *(_OWORD *)(v0 + 1048);
    uint64_t v20 = *(_OWORD *)(v0 + 1064);
    *(int8x16_t *)(v17 + 104) = vextq_s8(*(int8x16_t *)(v0 + 848), *(int8x16_t *)(v0 + 848), 8uLL);
    *(void *)(v17 + 96) = v18;
    *(_OWORD *)(v17 + 64) = v19;
    *(_OWORD *)(v17 + 80) = v20;
    *(void *)(v17 + 56) = v16;
    return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = *(void **)(*(void *)v0 + 1216);
  swift_task_dealloc();

  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  uint64_t v1 = *(void **)(v0 + 1176);
  uint64_t v2 = *(void *)(v0 + 984);
  CGFloat v3 = *(void *)(v0 + 976);
  CGFloat v4 = *(void *)(v0 + 968);
  CGFloat v5 = *(void *)(v0 + 904);
  uint64_t v6 = *(void *)(v0 + 880);
  uint64_t v7 = *(void *)(v0 + 872);
  long long v8 = *(void *)(v0 + 864);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for PKDrawing?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  long long v9 = *(void **)(v0 + 1088);
  long long v10 = *(void **)(v0 + 1080);
  CGContextRestoreGState(*(CGContextRef *)(v0 + 832));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

{
  uint64_t v0;
  uint64_t v1;
  double Width;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat MinX;
  CGFloat MinY;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  CGContext *v13;
  CGAffineTransform *v14;
  CGContext *v15;
  CGFloat v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGAffineTransform *v22;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CGFloat x;
  CGFloat y;
  CGFloat v38;
  CGFloat height;
  void *v40;
  void *v41;
  id v42;
  id v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  long long v52;
  CGFloat v53;
  double v54;
  CGFloat v55;
  double v56;
  CGFloat v57;
  double v58;
  CGFloat v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t (*v70)(void);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  objc_class *v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  long long v80;
  long long v81;
  char v82;
  char v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  long long v97;
  long long v98;
  long long v99;
  char v100;
  CGAffineTransform *t2;
  CGAffineTransform *t2a;
  CGContext *v103;
  CGFloat v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char v110;
  uint64_t v111;
  CGAffineTransform v112;
  uint64_t v113;
  uint64_t v114;
  CGRect v115;
  CGRect v116;
  CGRect ClipBoundingBox;
  CGRect v118;
  CGRect v119;

  BOOL v113 = v0;
  uint64_t v1 = *(void *)(v0 + 816);
  CGContextSaveGState(*(CGContextRef *)(v0 + 800));
  LOBYTE(v1) = *(unsigned char *)(v1 + 16);
  uint64_t v107 = type metadata accessor for Image();
  if (v1)
  {
    uint64_t v15 = *(CGContext **)(v0 + 800);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    CGFloat v16 = *(double *)(v0 + 792);
    Image.pdfContentsBounds.getter();
    double v18 = v17;
    uint64_t v20 = v19;
    t2 = v22;
    uint64_t v104 = v21;
    CGAffineTransformMakeRotation(&v112, v16);
    CGFloat a = v112.a;
    CGFloat b = v112.b;
    CGFloat c = v112.c;
    CGFloat d = v112.d;
    *(CGFloat *)(v0 + 192) = v112.a;
    tCGFloat x = v112.tx;
    tCGFloat y = v112.ty;
    *(CGFloat *)(v0 + 200) = b;
    *(CGFloat *)(v0 + 208) = c;
    *(CGFloat *)(v0 + 216) = d;
    *(CGFloat *)(v0 + 224) = tx;
    *(CGFloat *)(v0 + 232) = ty;
    v115.origin.CGFloat x = v18;
    v115.origin.CGFloat y = v20;
    *(void *)&v115.size.CGFloat height = t2;
    v115.size.CGFloat width = v104;
    long long v116 = CGRectApplyAffineTransform(v115, (CGAffineTransform *)(v0 + 192));
    CGAffineTransformMakeTranslation(&v112, v18 - v116.origin.x, v20 - v116.origin.y);
    uint64_t v29 = *(_OWORD *)&v112.c;
    uint64_t v30 = *(_OWORD *)&v112.tx;
    *(_OWORD *)(v0 + 96) = *(_OWORD *)&v112.a;
    *(CGFloat *)(v0 + 144) = a;
    *(CGFloat *)(v0 + 152) = b;
    *(CGFloat *)(v0 + 160) = c;
    *(CGFloat *)(v0 + 168) = d;
    *(CGFloat *)(v0 + 176) = tx;
    *(CGFloat *)(v0 + 184) = ty;
    *(_OWORD *)(v0 + 112) = v29;
    *(_OWORD *)(v0 + 128) = v30;
    CGAffineTransformConcat(&v112, (CGAffineTransform *)(v0 + 144), (CGAffineTransform *)(v0 + 96));
    uint64_t v31 = *(_OWORD *)&v112.c;
    uint64_t v32 = *(_OWORD *)&v112.tx;
    *(_OWORD *)(v0 + 240) = *(_OWORD *)&v112.a;
    *(_OWORD *)(v0 + 256) = v31;
    *(_OWORD *)(v0 + 272) = v32;
    uint64_t v13 = v15;
    uint64_t v14 = (CGAffineTransform *)(v0 + 240);
  }
  else
  {
    uint64_t v103 = *(CGContext **)(v0 + 800);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    double Width = CGRectGetWidth(*(CGRect *)(v0 + 648));
    CRRegister.wrappedValue.getter();
    CGFloat v3 = CGRectGetWidth(*(CGRect *)(v0 + 712));
    CGAffineTransformMakeScale(&v112, Width / v3, Width / v3);
    uint64_t v97 = *(_OWORD *)&v112.c;
    unint64_t v99 = *(_OWORD *)&v112.a;
    CGFloat v4 = v112.tx;
    CGFloat v5 = v112.ty;
    CRRegister.wrappedValue.getter();
    CGFloat MinX = CGRectGetMinX(*(CGRect *)(v0 + 680));
    CRRegister.wrappedValue.getter();
    CGFloat MinY = CGRectGetMinY(*(CGRect *)(v0 + 616));
    CGAffineTransformMakeTranslation(&v112, MinX, MinY);
    long long v8 = *(_OWORD *)&v112.a;
    long long v9 = *(_OWORD *)&v112.c;
    long long v10 = *(_OWORD *)&v112.tx;
    *(_OWORD *)(v0 + 288) = v99;
    *(_OWORD *)(v0 + 304) = v97;
    *(CGFloat *)(v0 + 320) = v4;
    *(CGFloat *)(v0 + 328) = v5;
    *(_OWORD *)(v0 + 336) = v8;
    *(_OWORD *)(v0 + 352) = v9;
    *(_OWORD *)(v0 + 368) = v10;
    CGAffineTransformConcat(&v112, (CGAffineTransform *)(v0 + 288), (CGAffineTransform *)(v0 + 336));
    long long v11 = *(_OWORD *)&v112.c;
    long long v12 = *(_OWORD *)&v112.tx;
    *(_OWORD *)(v0 + 384) = *(_OWORD *)&v112.a;
    *(_OWORD *)(v0 + 400) = v11;
    *(_OWORD *)(v0 + 416) = v12;
    uint64_t v13 = v103;
    uint64_t v14 = (CGAffineTransform *)(v0 + 384);
  }
  CGContextConcatCTM(v13, v14);
  uint64_t v33 = *(void *)(v0 + 984);
  CGFloat v34 = *(void *)(v0 + 968);
  char v105 = *(void *)(v0 + 960);
  uint64_t v35 = *(void *)(v0 + 816);
  ClipBoundingBoCGFloat x = CGContextGetClipBoundingBox((CGContextRef)*(void *)(v0 + 800));
  CGFloat x = ClipBoundingBox.origin.x;
  CGFloat y = ClipBoundingBox.origin.y;
  id v38 = ClipBoundingBox.size.width;
  CGFloat height = ClipBoundingBox.size.height;
  *(CGRect *)(v0 + 1016) = ClipBoundingBox;
  *(unsigned char *)(v0 + 91) = *(unsigned char *)v35;
  *(unsigned char *)(v0 + 92) = *(unsigned char *)(v35 + 1);
  *(unsigned char *)(v0 + 93) = *(unsigned char *)(v35 + 2);
  uint64_t v40 = *(void **)(v35 + 8);
  *(void *)(v0 + 1048) = v40;
  CGFloat v41 = *(void **)(v35 + 64);
  *(void *)(v0 + 1056) = v41;
  *(unsigned char *)(v0 + 94) = *(unsigned char *)(v35 + 72);
  *(unsigned char *)(v0 + 95) = *(unsigned char *)(v35 + 73);
  *(unsigned char *)(v0 + 545) = *(unsigned char *)(v35 + 74);
  outlined retain of PaperRenderableOptions(v35);
  CGFloat v42 = v41;
  CGFloat v43 = v40;
  *(void *)(v0 + 1064) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  *(_OWORD *)(v0 + 1072) = *(_OWORD *)(v0 + 584);
  *(_OWORD *)(v0 + 1088) = *(_OWORD *)(v0 + 600);
  *(void *)(v0 + 1104) = v107;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  CGFloat v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  *(void *)(v0 + 1112) = v44;
  *(void *)(v0 + 1120) = (v34 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v44(v33, 1, v105) == 1)
  {
LABEL_8:
    uint64_t v63 = *(void **)(v0 + 1056);
    uint64_t v64 = *(void **)(v0 + 1048);
    uint64_t v65 = *(void *)(v0 + 944);
    unint64_t v66 = *(void *)(v0 + 936);
    uint64_t v67 = *(void *)(v0 + 928);
    (*(void (**)(void, void))(*(void *)(v0 + 1000) + 8))(*(void *)(v0 + 1008), *(void *)(v0 + 992));

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v67, 1, v66) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 928), &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      uint64_t v68 = *(void **)(v0 + 1056);
      uint64_t v69 = *(void **)(v0 + 1048);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 800));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v70 = *(uint64_t (**)(void))(v0 + 8);
      return v70();
    }
    else
    {
      id v72 = *(void *)(v0 + 896);
      id v73 = *(void *)(v0 + 888);
      uint64_t v74 = *(void *)(v0 + 880);
      (*(void (**)(void, void, void))(*(void *)(v0 + 944) + 32))(*(void *)(v0 + 952), *(void *)(v0 + 928), *(void *)(v0 + 936));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      Capsule.encapsulateTransient<A>(_:)();
      uint64_t v75 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      long long v76 = objc_allocWithZone(v75);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))((uint64_t)v76 + OBJC_IVAR___PKDrawingCoherence_model, v72, v74);
      *(void *)(v0 + 776) = v76;
      *(void *)(v0 + 784) = v75;
      long long v77 = objc_msgSendSuper2((objc_super *)(v0 + 776), sel_init);
      *(void *)(v0 + 1144) = v77;
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
      char v78 = swift_task_alloc();
      *(void *)(v0 + 1152) = v78;
      *(void *)char v78 = v0;
      *(void *)(v78 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      char v79 = *(void *)(v0 + 800);
      char v80 = *(_OWORD *)(v0 + 1016);
      uint64_t v81 = *(_OWORD *)(v0 + 1032);
      *(int8x16_t *)(v78 + 104) = vextq_s8(*(int8x16_t *)(v0 + 816), *(int8x16_t *)(v0 + 816), 8uLL);
      *(void *)(v78 + 96) = v79;
      *(_OWORD *)(v78 + 64) = v80;
      *(_OWORD *)(v78 + 80) = v81;
      *(void *)(v78 + 56) = v77;
      return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
    }
  }
  else
  {
    *(void *)(v0 + 1128) = *(void *)(*(void *)(v0 + 968) + 32);
    *(CGFloat *)(v0 + 744) = x;
    *(CGFloat *)(v0 + 752) = y;
    *(CGFloat *)(v0 + 760) = v38;
    *(CGFloat *)(v0 + 768) = height;
    while (1)
    {
      uint64_t v45 = *(double *)(v0 + 744);
      uint64_t v46 = *(double *)(v0 + 752);
      uint64_t v47 = *(double *)(v0 + 760);
      long long v48 = *(double *)(v0 + 768);
      (*(void (**)(void, void, void))(v0 + 1128))(*(void *)(v0 + 976), *(void *)(v0 + 984), *(void *)(v0 + 960));
      CGFloat v49 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
      SharedTagged_9.subscript.getter();
      double v50 = *(void *)(v0 + 496);
      CGFloat v51 = *(void *)(v0 + 504);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 472), v50);
      CRRegister.wrappedValue.getter();
      double v52 = *(_OWORD *)(v0 + 568);
      *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 552);
      *(_OWORD *)(v0 + 528) = v52;
      *(unsigned char *)(v0 + 544) = 0;
      CGFloat v53 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v51 + 112))(v0 + 512, v50, v51);
      CGFloat v55 = v54;
      uint64_t v57 = v56;
      uint64_t v59 = v58;
      __swift_destroy_boxed_opaque_existential_1(v0 + 472);
      v118.origin.CGFloat x = v53;
      v118.origin.CGFloat y = v55;
      v118.size.CGFloat width = v57;
      v118.size.CGFloat height = v59;
      v119.origin.CGFloat x = v45;
      v119.origin.CGFloat y = v46;
      v119.size.CGFloat width = v47;
      v119.size.CGFloat height = v48;
      if (CGRectIntersectsRect(v118, v119)) {
        break;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 968) + 8))(*(void *)(v0 + 976), *(void *)(v0 + 960));
      uint64_t v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1112);
      uint64_t v61 = *(void *)(v0 + 984);
      uint64_t v62 = *(void *)(v0 + 960);
      CROrderedSet.Iterator.next()();
      if (v60(v61, 1, v62) == 1) {
        goto LABEL_8;
      }
    }
    CGAffineTransform v108 = *(void *)(v0 + 1096);
    t2CGFloat a = *(CGAffineTransform **)(v0 + 1088);
    unint64_t v98 = *(_OWORD *)(v0 + 1072);
    uint64_t v110 = *(unsigned char *)(v0 + 545);
    char v106 = *(unsigned char *)(v0 + 95);
    CGFloat v100 = *(unsigned char *)(v0 + 94);
    long long v95 = *(void **)(v0 + 1048);
    char v96 = *(void **)(v0 + 1056);
    uint64_t v82 = *(unsigned char *)(v0 + 93);
    uint64_t v83 = *(unsigned char *)(v0 + 92);
    id v84 = *(unsigned char *)(v0 + 91);
    id v85 = *(void *)(v0 + 960);
    SharedTagged_9.subscript.getter();
    uint64_t v86 = *(void *)(v0 + 464);
    CGRect v111 = *(void *)(v0 + 456);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 432), v111);
    MEMORY[0x21054BDF0](v85);
    *(unsigned char *)(v0 + 16) = v84;
    *(unsigned char *)(v0 + 17) = v83;
    *(unsigned char *)(v0 + 18) = v82;
    *(void *)(v0 + 24) = v95;
    *(unsigned char *)(v0 + 32) = 0;
    *(_OWORD *)(v0 + 40) = v98;
    *(void *)(v0 + 56) = t2a;
    *(void *)(v0 + 64) = v108;
    *(unsigned char *)(v0 + 72) = 0;
    *(void *)(v0 + 80) = v96;
    *(unsigned char *)(v0 + 88) = v100;
    *(unsigned char *)(v0 + 89) = v106;
    *(unsigned char *)(v0 + 90) = v110;
    uint64_t v87 = *(void *)(v86 + 8);
    uint64_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v87 + 16) + **(int **)(v87 + 16));
    uint64_t v88 = v95;
    uint64_t v89 = v96;
    uint64_t v90 = (void *)swift_task_alloc();
    *(void *)(v0 + 1136) = v90;
    *uint64_t v90 = v0;
    v90[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    uint64_t v91 = *(void *)(v0 + 1104);
    uint64_t v92 = *(void *)(v0 + 920);
    long long v93 = *(void *)(v0 + 808);
    long long v94 = *(void *)(v0 + 800);
    return v109(v94, v92, v93, v0 + 16, v91, v49, v111, v87);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void **)(*(void *)v0 + 1056);
  uint64_t v2 = *(void **)(*(void *)v0 + 1048);
  CGFloat v3 = *(void *)(*(void *)v0 + 920);
  CGFloat v4 = *(void *)(*(void *)v0 + 912);
  CGFloat v5 = *(void *)(*(void *)v0 + 904);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  long long v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t (*v29)(void);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  objc_class *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  long long v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  long long v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char v63;
  uint64_t v64;
  CGRect v65;
  CGRect v66;

  (*(void (**)(void, void))(*(void *)(v0 + 968) + 8))(*(void *)(v0 + 976), *(void *)(v0 + 960));
  __swift_destroy_boxed_opaque_existential_1(v0 + 432);
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1112);
  uint64_t v2 = *(void *)(v0 + 984);
  CGFloat v3 = *(void *)(v0 + 960);
  CROrderedSet.Iterator.next()();
  if (v1(v2, 1, v3) == 1)
  {
LABEL_4:
    uint64_t v22 = *(void **)(v0 + 1056);
    uint64_t v23 = *(void **)(v0 + 1048);
    uint64_t v24 = *(void *)(v0 + 944);
    long long v25 = *(void *)(v0 + 936);
    long long v26 = *(void *)(v0 + 928);
    (*(void (**)(void, void))(*(void *)(v0 + 1000) + 8))(*(void *)(v0 + 1008), *(void *)(v0 + 992));

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v26, 1, v25) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 928), &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      long long v27 = *(void **)(v0 + 1056);
      long long v28 = *(void **)(v0 + 1048);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 800));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
      return v29();
    }
    else
    {
      uint64_t v31 = *(void *)(v0 + 896);
      uint64_t v32 = *(void *)(v0 + 888);
      uint64_t v33 = *(void *)(v0 + 880);
      (*(void (**)(void, void, void))(*(void *)(v0 + 944) + 32))(*(void *)(v0 + 952), *(void *)(v0 + 928), *(void *)(v0 + 936));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      Capsule.encapsulateTransient<A>(_:)();
      CGFloat v34 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      uint64_t v35 = objc_allocWithZone(v34);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))((uint64_t)v35 + OBJC_IVAR___PKDrawingCoherence_model, v31, v33);
      *(void *)(v0 + 776) = v35;
      *(void *)(v0 + 784) = v34;
      uint64_t v36 = objc_msgSendSuper2((objc_super *)(v0 + 776), sel_init);
      *(void *)(v0 + 1144) = v36;
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
      uint64_t v37 = swift_task_alloc();
      *(void *)(v0 + 1152) = v37;
      *(void *)uint64_t v37 = v0;
      *(void *)(v37 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      id v38 = *(void *)(v0 + 800);
      id v39 = *(_OWORD *)(v0 + 1016);
      uint64_t v40 = *(_OWORD *)(v0 + 1032);
      *(int8x16_t *)(v37 + 104) = vextq_s8(*(int8x16_t *)(v0 + 816), *(int8x16_t *)(v0 + 816), 8uLL);
      *(void *)(v37 + 96) = v38;
      *(_OWORD *)(v37 + 64) = v39;
      *(_OWORD *)(v37 + 80) = v40;
      *(void *)(v37 + 56) = v36;
      return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
    }
  }
  else
  {
    while (1)
    {
      CGFloat v4 = *(double *)(v0 + 744);
      CGFloat v5 = *(double *)(v0 + 752);
      uint64_t v6 = *(double *)(v0 + 760);
      uint64_t v7 = *(double *)(v0 + 768);
      (*(void (**)(void, void, void))(v0 + 1128))(*(void *)(v0 + 976), *(void *)(v0 + 984), *(void *)(v0 + 960));
      long long v8 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
      SharedTagged_9.subscript.getter();
      long long v9 = *(void *)(v0 + 496);
      long long v10 = *(void *)(v0 + 504);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 472), v9);
      CRRegister.wrappedValue.getter();
      long long v11 = *(_OWORD *)(v0 + 568);
      *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 552);
      *(_OWORD *)(v0 + 528) = v11;
      *(unsigned char *)(v0 + 544) = 0;
      long long v12 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v10 + 112))(v0 + 512, v9, v10);
      uint64_t v14 = v13;
      CGFloat v16 = v15;
      double v18 = v17;
      __swift_destroy_boxed_opaque_existential_1(v0 + 472);
      v65.origin.CGFloat x = v12;
      v65.origin.CGFloat y = v14;
      v65.size.CGFloat width = v16;
      v65.size.CGFloat height = v18;
      v66.origin.CGFloat x = v4;
      v66.origin.CGFloat y = v5;
      v66.size.CGFloat width = v6;
      v66.size.CGFloat height = v7;
      if (CGRectIntersectsRect(v65, v66)) {
        break;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 968) + 8))(*(void *)(v0 + 976), *(void *)(v0 + 960));
      uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1112);
      uint64_t v20 = *(void *)(v0 + 984);
      uint64_t v21 = *(void *)(v0 + 960);
      CROrderedSet.Iterator.next()();
      if (v19(v20, 1, v21) == 1) {
        goto LABEL_4;
      }
    }
    uint64_t v61 = *(void *)(v0 + 1096);
    uint64_t v59 = *(void *)(v0 + 1088);
    uint64_t v57 = *(_OWORD *)(v0 + 1072);
    uint64_t v63 = *(unsigned char *)(v0 + 545);
    uint64_t v60 = *(unsigned char *)(v0 + 95);
    uint64_t v58 = *(unsigned char *)(v0 + 94);
    CGFloat v55 = *(void **)(v0 + 1048);
    uint64_t v56 = *(void **)(v0 + 1056);
    CGFloat v41 = *(unsigned char *)(v0 + 93);
    CGFloat v42 = *(unsigned char *)(v0 + 92);
    CGFloat v43 = *(unsigned char *)(v0 + 91);
    CGFloat v44 = *(void *)(v0 + 960);
    SharedTagged_9.subscript.getter();
    uint64_t v45 = *(void *)(v0 + 464);
    uint64_t v46 = *(void *)(v0 + 456);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 432), v46);
    MEMORY[0x21054BDF0](v44);
    *(unsigned char *)(v0 + 16) = v43;
    *(unsigned char *)(v0 + 17) = v42;
    *(unsigned char *)(v0 + 18) = v41;
    *(void *)(v0 + 24) = v55;
    *(unsigned char *)(v0 + 32) = 0;
    *(_OWORD *)(v0 + 40) = v57;
    *(void *)(v0 + 56) = v59;
    *(void *)(v0 + 64) = v61;
    *(unsigned char *)(v0 + 72) = 0;
    *(void *)(v0 + 80) = v56;
    *(unsigned char *)(v0 + 88) = v58;
    *(unsigned char *)(v0 + 89) = v60;
    *(unsigned char *)(v0 + 90) = v63;
    uint64_t v47 = *(void *)(v45 + 8);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 + 16) + **(int **)(v47 + 16));
    long long v48 = v55;
    CGFloat v49 = v56;
    double v50 = (void *)swift_task_alloc();
    *(void *)(v0 + 1136) = v50;
    *double v50 = v0;
    v50[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    CGFloat v51 = *(void *)(v0 + 1104);
    double v52 = *(void *)(v0 + 920);
    CGFloat v53 = *(void *)(v0 + 808);
    double v54 = *(void *)(v0 + 800);
    return v62(v54, v52, v53, v0 + 16, v51, v8, v46, v47);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = v0[143];
  uint64_t v2 = v0[102];
  CGFloat v3 = objc_msgSend(self, sel_sharedCache);
  v0[145] = v3;
  CGFloat v4 = (void *)swift_task_alloc();
  v0[146] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  CGFloat v5 = (void *)swift_task_alloc();
  v0[147] = v5;
  *CGFloat v5 = v0;
  v5[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  uint64_t v6 = v0[109];
  uint64_t v7 = v0[107];
  return MEMORY[0x270FA2318](v6, 0, 0, 0xD000000000000026, 0x800000020C85CE50, closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)partial apply, v4, v7);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void);
  PKDrawing *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  uint64_t v21;

  uint64_t v1 = *(void *)(v0 + 864);
  uint64_t v2 = *(void *)(v0 + 840);
  CGFloat v3 = *(void *)(v0 + 832);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*(void *)(v0 + 872), v1, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    CGFloat v4 = *(void **)(v0 + 1144);
    CGFloat v5 = *(void *)(v0 + 952);
    uint64_t v6 = *(void *)(v0 + 944);
    uint64_t v7 = *(void *)(v0 + 936);
    long long v8 = *(void *)(v0 + 872);
    long long v9 = *(void *)(v0 + 864);

    outlined destroy of StocksKitCurrencyCache.Provider?(v8, &demangling cache variable for type metadata for PKDrawing?);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    outlined destroy of StocksKitCurrencyCache.Provider?(v9, &demangling cache variable for type metadata for PKDrawing?);
    long long v10 = *(void **)(v0 + 1056);
    long long v11 = *(void **)(v0 + 1048);
    CGContextRestoreGState(*(CGContextRef *)(v0 + 800));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 840) + 32))(*(void *)(v0 + 848), *(void *)(v0 + 864), *(void *)(v0 + 832));
    PKDrawing._bridgeToObjectiveC()(v14);
    CGFloat v16 = v15;
    *(void *)(v0 + 1184) = v15;
    double v17 = swift_task_alloc();
    *(void *)(v0 + 1192) = v17;
    *(void *)double v17 = v0;
    *(void *)(v17 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    double v18 = *(void *)(v0 + 800);
    uint64_t v19 = *(_OWORD *)(v0 + 1016);
    uint64_t v20 = *(_OWORD *)(v0 + 1032);
    *(int8x16_t *)(v17 + 104) = vextq_s8(*(int8x16_t *)(v0 + 816), *(int8x16_t *)(v0 + 816), 8uLL);
    *(void *)(v17 + 96) = v18;
    *(_OWORD *)(v17 + 64) = v19;
    *(_OWORD *)(v17 + 80) = v20;
    *(void *)(v17 + 56) = v16;
    return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = *(void **)(*(void *)v0 + 1184);
  swift_task_dealloc();

  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  double Width;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat MinX;
  CGFloat MinY;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  CGContext *v13;
  CGAffineTransform *v14;
  CGContext *v15;
  CGFloat v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGAffineTransform *v22;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CGFloat x;
  CGFloat y;
  CGFloat v38;
  CGFloat height;
  void *v40;
  void *v41;
  id v42;
  id v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  long long v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  double v59;
  CGFloat v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t (*v71)(void);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  objc_class *v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  long long v81;
  long long v82;
  char v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  void *v95;
  void *v96;
  long long v97;
  long long v98;
  long long v99;
  char v100;
  CGAffineTransform *t2;
  CGAffineTransform *t2a;
  CGContext *v103;
  CGFloat v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char v110;
  uint64_t v111;
  CGAffineTransform v112;
  uint64_t v113;
  uint64_t v114;
  CGRect v115;
  CGRect v116;
  CGRect ClipBoundingBox;
  CGRect v118;
  CGRect v119;

  BOOL v113 = v0;
  uint64_t v1 = *(void *)(v0 + 816);
  CGContextSaveGState(*(CGContextRef *)(v0 + 800));
  LOBYTE(v1) = *(unsigned char *)(v1 + 16);
  uint64_t v107 = type metadata accessor for Image();
  if (v1)
  {
    uint64_t v15 = *(CGContext **)(v0 + 800);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    CGFloat v16 = *(double *)(v0 + 792);
    Image.pdfContentsBounds.getter();
    double v18 = v17;
    uint64_t v20 = v19;
    t2 = v22;
    uint64_t v104 = v21;
    CGAffineTransformMakeRotation(&v112, v16);
    CGFloat a = v112.a;
    CGFloat b = v112.b;
    CGFloat c = v112.c;
    CGFloat d = v112.d;
    *(CGFloat *)(v0 + 192) = v112.a;
    tCGFloat x = v112.tx;
    tCGFloat y = v112.ty;
    *(CGFloat *)(v0 + 200) = b;
    *(CGFloat *)(v0 + 208) = c;
    *(CGFloat *)(v0 + 216) = d;
    *(CGFloat *)(v0 + 224) = tx;
    *(CGFloat *)(v0 + 232) = ty;
    v115.origin.CGFloat x = v18;
    v115.origin.CGFloat y = v20;
    *(void *)&v115.size.CGFloat height = t2;
    v115.size.CGFloat width = v104;
    long long v116 = CGRectApplyAffineTransform(v115, (CGAffineTransform *)(v0 + 192));
    CGAffineTransformMakeTranslation(&v112, v18 - v116.origin.x, v20 - v116.origin.y);
    uint64_t v29 = *(_OWORD *)&v112.c;
    uint64_t v30 = *(_OWORD *)&v112.tx;
    *(_OWORD *)(v0 + 96) = *(_OWORD *)&v112.a;
    *(CGFloat *)(v0 + 144) = a;
    *(CGFloat *)(v0 + 152) = b;
    *(CGFloat *)(v0 + 160) = c;
    *(CGFloat *)(v0 + 168) = d;
    *(CGFloat *)(v0 + 176) = tx;
    *(CGFloat *)(v0 + 184) = ty;
    *(_OWORD *)(v0 + 112) = v29;
    *(_OWORD *)(v0 + 128) = v30;
    CGAffineTransformConcat(&v112, (CGAffineTransform *)(v0 + 144), (CGAffineTransform *)(v0 + 96));
    uint64_t v31 = *(_OWORD *)&v112.c;
    uint64_t v32 = *(_OWORD *)&v112.tx;
    *(_OWORD *)(v0 + 240) = *(_OWORD *)&v112.a;
    *(_OWORD *)(v0 + 256) = v31;
    *(_OWORD *)(v0 + 272) = v32;
    uint64_t v13 = v15;
    uint64_t v14 = (CGAffineTransform *)(v0 + 240);
  }
  else
  {
    uint64_t v103 = *(CGContext **)(v0 + 800);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    double Width = CGRectGetWidth(*(CGRect *)(v0 + 648));
    CRRegister.wrappedValue.getter();
    CGFloat v3 = CGRectGetWidth(*(CGRect *)(v0 + 712));
    CGAffineTransformMakeScale(&v112, Width / v3, Width / v3);
    uint64_t v97 = *(_OWORD *)&v112.c;
    unint64_t v99 = *(_OWORD *)&v112.a;
    CGFloat v4 = v112.tx;
    CGFloat v5 = v112.ty;
    CRRegister.wrappedValue.getter();
    CGFloat MinX = CGRectGetMinX(*(CGRect *)(v0 + 680));
    CRRegister.wrappedValue.getter();
    CGFloat MinY = CGRectGetMinY(*(CGRect *)(v0 + 616));
    CGAffineTransformMakeTranslation(&v112, MinX, MinY);
    long long v8 = *(_OWORD *)&v112.a;
    long long v9 = *(_OWORD *)&v112.c;
    long long v10 = *(_OWORD *)&v112.tx;
    *(_OWORD *)(v0 + 288) = v99;
    *(_OWORD *)(v0 + 304) = v97;
    *(CGFloat *)(v0 + 320) = v4;
    *(CGFloat *)(v0 + 328) = v5;
    *(_OWORD *)(v0 + 336) = v8;
    *(_OWORD *)(v0 + 352) = v9;
    *(_OWORD *)(v0 + 368) = v10;
    CGAffineTransformConcat(&v112, (CGAffineTransform *)(v0 + 288), (CGAffineTransform *)(v0 + 336));
    long long v11 = *(_OWORD *)&v112.c;
    long long v12 = *(_OWORD *)&v112.tx;
    *(_OWORD *)(v0 + 384) = *(_OWORD *)&v112.a;
    *(_OWORD *)(v0 + 400) = v11;
    *(_OWORD *)(v0 + 416) = v12;
    uint64_t v13 = v103;
    uint64_t v14 = (CGAffineTransform *)(v0 + 384);
  }
  CGContextConcatCTM(v13, v14);
  uint64_t v33 = *(void *)(v0 + 984);
  CGFloat v34 = *(void *)(v0 + 968);
  char v105 = *(void *)(v0 + 960);
  uint64_t v35 = *(void *)(v0 + 816);
  ClipBoundingBoCGFloat x = CGContextGetClipBoundingBox((CGContextRef)*(void *)(v0 + 800));
  CGFloat x = ClipBoundingBox.origin.x;
  CGFloat y = ClipBoundingBox.origin.y;
  id v38 = ClipBoundingBox.size.width;
  CGFloat height = ClipBoundingBox.size.height;
  *(CGRect *)(v0 + 1016) = ClipBoundingBox;
  *(unsigned char *)(v0 + 91) = *(unsigned char *)v35;
  *(unsigned char *)(v0 + 92) = *(unsigned char *)(v35 + 1);
  *(unsigned char *)(v0 + 93) = *(unsigned char *)(v35 + 2);
  uint64_t v40 = *(void **)(v35 + 8);
  *(void *)(v0 + 1048) = v40;
  CGFloat v41 = *(void **)(v35 + 64);
  *(void *)(v0 + 1056) = v41;
  *(unsigned char *)(v0 + 94) = *(unsigned char *)(v35 + 72);
  *(unsigned char *)(v0 + 95) = *(unsigned char *)(v35 + 73);
  *(unsigned char *)(v0 + 545) = *(unsigned char *)(v35 + 74);
  outlined retain of PaperRenderableOptions(v35);
  CGFloat v42 = v41;
  CGFloat v43 = v40;
  *(void *)(v0 + 1064) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  *(_OWORD *)(v0 + 1072) = *(_OWORD *)(v0 + 584);
  *(_OWORD *)(v0 + 1088) = *(_OWORD *)(v0 + 600);
  *(void *)(v0 + 1104) = v107;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  CGFloat v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  *(void *)(v0 + 1112) = v44;
  *(void *)(v0 + 1120) = (v34 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v44(v33, 1, v105) == 1)
  {
LABEL_8:
    uint64_t v64 = *(void **)(v0 + 1056);
    uint64_t v65 = *(void **)(v0 + 1048);
    unint64_t v66 = *(void *)(v0 + 944);
    uint64_t v67 = *(void *)(v0 + 936);
    uint64_t v68 = *(void *)(v0 + 928);
    (*(void (**)(void, void))(*(void *)(v0 + 1000) + 8))(*(void *)(v0 + 1008), *(void *)(v0 + 992));

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v68, 1, v67) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 928), &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      uint64_t v69 = *(void **)(v0 + 1056);
      uint64_t v70 = *(void **)(v0 + 1048);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 800));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v71 = *(uint64_t (**)(void))(v0 + 8);
      return v71();
    }
    else
    {
      id v73 = *(void *)(v0 + 896);
      uint64_t v74 = *(void *)(v0 + 888);
      uint64_t v75 = *(void *)(v0 + 880);
      (*(void (**)(void, void, void))(*(void *)(v0 + 944) + 32))(*(void *)(v0 + 952), *(void *)(v0 + 928), *(void *)(v0 + 936));
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      Capsule.encapsulateTransient<A>(_:)();
      long long v76 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      long long v77 = objc_allocWithZone(v76);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))((uint64_t)v77 + OBJC_IVAR___PKDrawingCoherence_model, v73, v75);
      *(void *)(v0 + 776) = v77;
      *(void *)(v0 + 784) = v76;
      char v78 = objc_msgSendSuper2((objc_super *)(v0 + 776), sel_init);
      *(void *)(v0 + 1144) = v78;
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
      char v79 = swift_task_alloc();
      *(void *)(v0 + 1152) = v79;
      *(void *)char v79 = v0;
      *(void *)(v79 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      char v80 = *(void *)(v0 + 800);
      uint64_t v81 = *(_OWORD *)(v0 + 1016);
      uint64_t v82 = *(_OWORD *)(v0 + 1032);
      *(int8x16_t *)(v79 + 104) = vextq_s8(*(int8x16_t *)(v0 + 816), *(int8x16_t *)(v0 + 816), 8uLL);
      *(void *)(v79 + 96) = v80;
      *(_OWORD *)(v79 + 64) = v81;
      *(_OWORD *)(v79 + 80) = v82;
      *(void *)(v79 + 56) = v78;
      return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
    }
  }
  else
  {
    *(void *)(v0 + 1128) = *(void *)(*(void *)(v0 + 968) + 32);
    *(CGFloat *)(v0 + 744) = x;
    *(CGFloat *)(v0 + 752) = y;
    *(CGFloat *)(v0 + 760) = v38;
    *(CGFloat *)(v0 + 768) = height;
    while (1)
    {
      uint64_t v45 = *(double *)(v0 + 744);
      uint64_t v46 = *(double *)(v0 + 752);
      uint64_t v47 = *(double *)(v0 + 760);
      long long v48 = *(double *)(v0 + 768);
      (*(void (**)(void, void, void))(v0 + 1128))(*(void *)(v0 + 976), *(void *)(v0 + 984), *(void *)(v0 + 960));
      CGFloat v49 = type metadata accessor for PaperDocument(0);
      double v50 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      SharedTagged_9.subscript.getter();
      CGFloat v51 = *(void *)(v0 + 496);
      double v52 = *(void *)(v0 + 504);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 472), v51);
      CRRegister.wrappedValue.getter();
      CGFloat v53 = *(_OWORD *)(v0 + 568);
      *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 552);
      *(_OWORD *)(v0 + 528) = v53;
      *(unsigned char *)(v0 + 544) = 0;
      double v54 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v52 + 112))(v0 + 512, v51, v52);
      uint64_t v56 = v55;
      uint64_t v58 = v57;
      uint64_t v60 = v59;
      __swift_destroy_boxed_opaque_existential_1(v0 + 472);
      v118.origin.CGFloat x = v54;
      v118.origin.CGFloat y = v56;
      v118.size.CGFloat width = v58;
      v118.size.CGFloat height = v60;
      v119.origin.CGFloat x = v45;
      v119.origin.CGFloat y = v46;
      v119.size.CGFloat width = v47;
      v119.size.CGFloat height = v48;
      if (CGRectIntersectsRect(v118, v119)) {
        break;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 968) + 8))(*(void *)(v0 + 976), *(void *)(v0 + 960));
      uint64_t v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1112);
      uint64_t v62 = *(void *)(v0 + 984);
      uint64_t v63 = *(void *)(v0 + 960);
      CROrderedSet.Iterator.next()();
      if (v61(v62, 1, v63) == 1) {
        goto LABEL_8;
      }
    }
    CGAffineTransform v108 = *(void *)(v0 + 1096);
    t2CGFloat a = *(CGAffineTransform **)(v0 + 1088);
    unint64_t v98 = *(_OWORD *)(v0 + 1072);
    uint64_t v110 = *(unsigned char *)(v0 + 545);
    char v106 = *(unsigned char *)(v0 + 95);
    CGFloat v100 = *(unsigned char *)(v0 + 94);
    long long v95 = *(void **)(v0 + 1048);
    char v96 = *(void **)(v0 + 1056);
    long long v94 = *(unsigned char *)(v0 + 93);
    uint64_t v83 = *(unsigned char *)(v0 + 92);
    id v84 = *(unsigned char *)(v0 + 91);
    id v85 = *(void *)(v0 + 960);
    SharedTagged_9.subscript.getter();
    uint64_t v86 = *(void *)(v0 + 464);
    CGRect v111 = *(void *)(v0 + 456);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 432), v111);
    MEMORY[0x21054BDF0](v85);
    *(unsigned char *)(v0 + 16) = v84;
    *(unsigned char *)(v0 + 17) = v83;
    *(unsigned char *)(v0 + 18) = v94;
    *(void *)(v0 + 24) = v95;
    *(unsigned char *)(v0 + 32) = 0;
    *(_OWORD *)(v0 + 40) = v98;
    *(void *)(v0 + 56) = t2a;
    *(void *)(v0 + 64) = v108;
    *(unsigned char *)(v0 + 72) = 0;
    *(void *)(v0 + 80) = v96;
    *(unsigned char *)(v0 + 88) = v100;
    *(unsigned char *)(v0 + 89) = v106;
    *(unsigned char *)(v0 + 90) = v110;
    uint64_t v87 = *(void *)(v86 + 8);
    uint64_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v87 + 16) + **(int **)(v87 + 16));
    uint64_t v88 = v95;
    uint64_t v89 = v96;
    uint64_t v90 = (void *)swift_task_alloc();
    *(void *)(v0 + 1136) = v90;
    *uint64_t v90 = v0;
    v90[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    uint64_t v91 = *(void *)(v0 + 920);
    uint64_t v92 = *(void *)(v0 + 808);
    long long v93 = *(void *)(v0 + 800);
    return v109(v93, v91, v92, v0 + 16, v49, v50, v111, v87);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void **)(*(void *)v0 + 1056);
  uint64_t v2 = *(void **)(*(void *)v0 + 1048);
  CGFloat v3 = *(void *)(*(void *)v0 + 920);
  CGFloat v4 = *(void *)(*(void *)v0 + 912);
  CGFloat v5 = *(void *)(*(void *)v0 + 904);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t (*v30)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  objc_class *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  long long v40;
  long long v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void *v55;
  void *v56;
  long long v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char v63;
  uint64_t v64;
  CGRect v65;
  CGRect v66;

  (*(void (**)(void, void))(*(void *)(v0 + 968) + 8))(*(void *)(v0 + 976), *(void *)(v0 + 960));
  __swift_destroy_boxed_opaque_existential_1(v0 + 432);
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1112);
  uint64_t v2 = *(void *)(v0 + 984);
  CGFloat v3 = *(void *)(v0 + 960);
  CROrderedSet.Iterator.next()();
  if (v1(v2, 1, v3) == 1)
  {
LABEL_4:
    uint64_t v23 = *(void **)(v0 + 1056);
    uint64_t v24 = *(void **)(v0 + 1048);
    long long v25 = *(void *)(v0 + 944);
    long long v26 = *(void *)(v0 + 936);
    long long v27 = *(void *)(v0 + 928);
    (*(void (**)(void, void))(*(void *)(v0 + 1000) + 8))(*(void *)(v0 + 1008), *(void *)(v0 + 992));

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v27, 1, v26) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 928), &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      long long v28 = *(void **)(v0 + 1056);
      uint64_t v29 = *(void **)(v0 + 1048);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 800));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
      return v30();
    }
    else
    {
      uint64_t v32 = *(void *)(v0 + 896);
      uint64_t v33 = *(void *)(v0 + 888);
      CGFloat v34 = *(void *)(v0 + 880);
      (*(void (**)(void, void, void))(*(void *)(v0 + 944) + 32))(*(void *)(v0 + 952), *(void *)(v0 + 928), *(void *)(v0 + 936));
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      Capsule.encapsulateTransient<A>(_:)();
      uint64_t v35 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      uint64_t v36 = objc_allocWithZone(v35);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))((uint64_t)v36 + OBJC_IVAR___PKDrawingCoherence_model, v32, v34);
      *(void *)(v0 + 776) = v36;
      *(void *)(v0 + 784) = v35;
      uint64_t v37 = objc_msgSendSuper2((objc_super *)(v0 + 776), sel_init);
      *(void *)(v0 + 1144) = v37;
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
      id v38 = swift_task_alloc();
      *(void *)(v0 + 1152) = v38;
      *(void *)id v38 = v0;
      *(void *)(v38 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      id v39 = *(void *)(v0 + 800);
      uint64_t v40 = *(_OWORD *)(v0 + 1016);
      CGFloat v41 = *(_OWORD *)(v0 + 1032);
      *(int8x16_t *)(v38 + 104) = vextq_s8(*(int8x16_t *)(v0 + 816), *(int8x16_t *)(v0 + 816), 8uLL);
      *(void *)(v38 + 96) = v39;
      *(_OWORD *)(v38 + 64) = v40;
      *(_OWORD *)(v38 + 80) = v41;
      *(void *)(v38 + 56) = v37;
      return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
    }
  }
  else
  {
    while (1)
    {
      CGFloat v4 = *(double *)(v0 + 744);
      CGFloat v5 = *(double *)(v0 + 752);
      uint64_t v6 = *(double *)(v0 + 760);
      uint64_t v7 = *(double *)(v0 + 768);
      (*(void (**)(void, void, void))(v0 + 1128))(*(void *)(v0 + 976), *(void *)(v0 + 984), *(void *)(v0 + 960));
      long long v8 = type metadata accessor for PaperDocument(0);
      long long v9 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      SharedTagged_9.subscript.getter();
      long long v10 = *(void *)(v0 + 496);
      long long v11 = *(void *)(v0 + 504);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 472), v10);
      CRRegister.wrappedValue.getter();
      long long v12 = *(_OWORD *)(v0 + 568);
      *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 552);
      *(_OWORD *)(v0 + 528) = v12;
      *(unsigned char *)(v0 + 544) = 0;
      uint64_t v13 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v11 + 112))(v0 + 512, v10, v11);
      uint64_t v15 = v14;
      double v17 = v16;
      uint64_t v19 = v18;
      __swift_destroy_boxed_opaque_existential_1(v0 + 472);
      v65.origin.CGFloat x = v13;
      v65.origin.CGFloat y = v15;
      v65.size.CGFloat width = v17;
      v65.size.CGFloat height = v19;
      v66.origin.CGFloat x = v4;
      v66.origin.CGFloat y = v5;
      v66.size.CGFloat width = v6;
      v66.size.CGFloat height = v7;
      if (CGRectIntersectsRect(v65, v66)) {
        break;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 968) + 8))(*(void *)(v0 + 976), *(void *)(v0 + 960));
      uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1112);
      uint64_t v21 = *(void *)(v0 + 984);
      uint64_t v22 = *(void *)(v0 + 960);
      CROrderedSet.Iterator.next()();
      if (v20(v21, 1, v22) == 1) {
        goto LABEL_4;
      }
    }
    uint64_t v61 = *(void *)(v0 + 1096);
    uint64_t v59 = *(void *)(v0 + 1088);
    uint64_t v57 = *(_OWORD *)(v0 + 1072);
    uint64_t v63 = *(unsigned char *)(v0 + 545);
    uint64_t v60 = *(unsigned char *)(v0 + 95);
    uint64_t v58 = *(unsigned char *)(v0 + 94);
    CGFloat v55 = *(void **)(v0 + 1048);
    uint64_t v56 = *(void **)(v0 + 1056);
    double v54 = *(unsigned char *)(v0 + 93);
    CGFloat v42 = *(unsigned char *)(v0 + 92);
    CGFloat v43 = *(unsigned char *)(v0 + 91);
    CGFloat v44 = *(void *)(v0 + 960);
    SharedTagged_9.subscript.getter();
    uint64_t v45 = *(void *)(v0 + 464);
    uint64_t v46 = *(void *)(v0 + 456);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 432), v46);
    MEMORY[0x21054BDF0](v44);
    *(unsigned char *)(v0 + 16) = v43;
    *(unsigned char *)(v0 + 17) = v42;
    *(unsigned char *)(v0 + 18) = v54;
    *(void *)(v0 + 24) = v55;
    *(unsigned char *)(v0 + 32) = 0;
    *(_OWORD *)(v0 + 40) = v57;
    *(void *)(v0 + 56) = v59;
    *(void *)(v0 + 64) = v61;
    *(unsigned char *)(v0 + 72) = 0;
    *(void *)(v0 + 80) = v56;
    *(unsigned char *)(v0 + 88) = v58;
    *(unsigned char *)(v0 + 89) = v60;
    *(unsigned char *)(v0 + 90) = v63;
    uint64_t v47 = *(void *)(v45 + 8);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 + 16) + **(int **)(v47 + 16));
    long long v48 = v55;
    CGFloat v49 = v56;
    double v50 = (void *)swift_task_alloc();
    *(void *)(v0 + 1136) = v50;
    *double v50 = v0;
    v50[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    CGFloat v51 = *(void *)(v0 + 920);
    double v52 = *(void *)(v0 + 808);
    CGFloat v53 = *(void *)(v0 + 800);
    return v62(v53, v51, v52, v0 + 16, v8, v9, v46, v47);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = v0[143];
  uint64_t v2 = v0[102];
  CGFloat v3 = objc_msgSend(self, sel_sharedCache);
  v0[145] = v3;
  CGFloat v4 = (void *)swift_task_alloc();
  v0[146] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  CGFloat v5 = (void *)swift_task_alloc();
  v0[147] = v5;
  *CGFloat v5 = v0;
  v5[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  uint64_t v6 = v0[109];
  uint64_t v7 = v0[107];
  return MEMORY[0x270FA2318](v6, 0, 0, 0xD000000000000026, 0x800000020C85CE50, partial apply for closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), v4, v7);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void);
  PKDrawing *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  uint64_t v21;

  uint64_t v1 = *(void *)(v0 + 864);
  uint64_t v2 = *(void *)(v0 + 840);
  CGFloat v3 = *(void *)(v0 + 832);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*(void *)(v0 + 872), v1, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    CGFloat v4 = *(void **)(v0 + 1144);
    CGFloat v5 = *(void *)(v0 + 952);
    uint64_t v6 = *(void *)(v0 + 944);
    uint64_t v7 = *(void *)(v0 + 936);
    long long v8 = *(void *)(v0 + 872);
    long long v9 = *(void *)(v0 + 864);

    outlined destroy of StocksKitCurrencyCache.Provider?(v8, &demangling cache variable for type metadata for PKDrawing?);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    outlined destroy of StocksKitCurrencyCache.Provider?(v9, &demangling cache variable for type metadata for PKDrawing?);
    long long v10 = *(void **)(v0 + 1056);
    long long v11 = *(void **)(v0 + 1048);
    CGContextRestoreGState(*(CGContextRef *)(v0 + 800));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 840) + 32))(*(void *)(v0 + 848), *(void *)(v0 + 864), *(void *)(v0 + 832));
    PKDrawing._bridgeToObjectiveC()(v14);
    CGFloat v16 = v15;
    *(void *)(v0 + 1184) = v15;
    double v17 = swift_task_alloc();
    *(void *)(v0 + 1192) = v17;
    *(void *)double v17 = v0;
    *(void *)(v17 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    double v18 = *(void *)(v0 + 800);
    uint64_t v19 = *(_OWORD *)(v0 + 1016);
    uint64_t v20 = *(_OWORD *)(v0 + 1032);
    *(int8x16_t *)(v17 + 104) = vextq_s8(*(int8x16_t *)(v0 + 816), *(int8x16_t *)(v0 + 816), 8uLL);
    *(void *)(v17 + 96) = v18;
    *(_OWORD *)(v17 + 64) = v19;
    *(_OWORD *)(v17 + 80) = v20;
    *(void *)(v17 + 56) = v16;
    return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = *(void **)(*(void *)v0 + 1184);
  swift_task_dealloc();

  return MEMORY[0x270FA2498](specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  uint64_t v1 = *(void **)(v0 + 1144);
  uint64_t v2 = *(void *)(v0 + 952);
  CGFloat v3 = *(void *)(v0 + 944);
  CGFloat v4 = *(void *)(v0 + 936);
  CGFloat v5 = *(void *)(v0 + 872);
  uint64_t v6 = *(void *)(v0 + 848);
  uint64_t v7 = *(void *)(v0 + 840);
  long long v8 = *(void *)(v0 + 832);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for PKDrawing?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  long long v9 = *(void **)(v0 + 1056);
  long long v10 = *(void **)(v0 + 1048);
  CGContextRestoreGState(*(CGContextRef *)(v0 + 800));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t specialized Data.append<A>(contentsOf:)(uint64_t a1, unint64_t a2)
{
  v10[5] = *MEMORY[0x263EF8340];
  v10[3] = MEMORY[0x263F06F78];
  v10[4] = MEMORY[0x263F06F68];
  v10[0] = a1;
  v10[1] = a2;
  CGFloat v4 = __swift_project_boxed_opaque_existential_1(v10, MEMORY[0x263F06F78]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(v5, v6);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v5, v5 >> 32);
      outlined consume of Data._Representation(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      outlined copy of Data._Representation(a1, a2);
      Data._Representation.append(contentsOf:)();
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for AnyCanvas, &lazy protocol witness table cache variable for type [AnyCanvas] and conformance [A], &demangling cache variable for type metadata for [AnyCanvas], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for AnyCanvasElementView, (unint64_t *)&lazy protocol witness table cache variable for type [AnyCanvasElementView] and conformance [A], &demangling cache variable for type metadata for [AnyCanvasElementView], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    CGFloat v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    CGFloat v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  CGFloat v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  CGFloat v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  long long v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      long long v9 = v6;
    }
    swift_bridgeObjectRetain();
    CGFloat v4 = MEMORY[0x21054E060](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, MEMORY[0x263F2FC68], (unint64_t *)&lazy protocol witness table cache variable for type [CalculateExpression] and conformance [A], &demangling cache variable for type metadata for [CalculateExpression], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    long long v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    long long v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    CGFloat v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    CGFloat v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  CGFloat v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  CGFloat v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  long long v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      long long v9 = v6;
    }
    swift_bridgeObjectRetain();
    CGFloat v4 = MEMORY[0x21054E060](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (void (*)(void))type metadata accessor for CanvasElementResizeHandle, &lazy protocol witness table cache variable for type [CanvasElementResizeHandle] and conformance [A], &demangling cache variable for type metadata for [CanvasElementResizeHandle], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    long long v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    long long v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    CGFloat v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    CGFloat v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  CGFloat v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  CGFloat v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  long long v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      long long v9 = v6;
    }
    swift_bridgeObjectRetain();
    CGFloat v4 = MEMORY[0x21054E060](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (void (*)(void))type metadata accessor for ReflowElement, &lazy protocol witness table cache variable for type [ReflowElement] and conformance [A], &demangling cache variable for type metadata for [ReflowElement], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    long long v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    long long v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for CanvasElementPDFAnnotation, &lazy protocol witness table cache variable for type [CanvasElementPDFAnnotation] and conformance [A], &demangling cache variable for type metadata for [CanvasElementPDFAnnotation], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    CGFloat v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    CGFloat v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  CGFloat v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  CGFloat v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  long long v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      long long v9 = v6;
    }
    swift_bridgeObjectRetain();
    CGFloat v4 = MEMORY[0x21054E060](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    long long v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    long long v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for SynapseLinkItem, &lazy protocol witness table cache variable for type [SynapseLinkItem] and conformance [A], &demangling cache variable for type metadata for [SynapseLinkItem], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v14 = v13 + v11;
    if (!__OFADD__(v13, v11)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v14 = v13 + v11;
  if (__OFADD__(v13, v11)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v12 = *v5;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v5 = v12;
  uint64_t v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v13 = 1;
  }
  uint64_t v23 = v11;
  uint64_t v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62) {
    goto LABEL_27;
  }
  uint64_t v17 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14) {
      uint64_t v17 = v14;
    }
    swift_bridgeObjectRetain();
    unint64_t v12 = MEMORY[0x21054E060](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *uint64_t v5 = v12;
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    uint64_t v11 = v23;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v16 + 8 * *(void *)(v16 + 16) + 32, (*(void *)(v16 + 24) >> 1) - *(void *)(v16 + 16), a1, (void (*)(void))a2, a3, a4, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v19 >= 1)
  {
    uint64_t v20 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v21 = __OFADD__(v20, v19);
    uint64_t v22 = v20 + v19;
    if (v21)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v7 = v20 + v5;
    if (!__OFADD__(v20, v5)) {
      goto LABEL_3;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v6 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v7 = v6 + v5;
  if (__OFADD__(v6, v5)) {
    goto LABEL_23;
  }
LABEL_3:
  unint64_t v8 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v8;
  uint64_t v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
  {
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFFF8;
    if (v7 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_13;
    }
    uint64_t v10 = 1;
  }
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2 <= v7) {
    uint64_t v2 = v7;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = MEMORY[0x21054E060](v10, v2, 1, v8);
  swift_bridgeObjectRelease();
  *uint64_t v1 = v12;
  uint64_t v11 = v12 & 0xFFFFFFFFFFFFFF8;
LABEL_13:
  uint64_t v13 = *(void *)(v11 + 16);
  uint64_t v14 = (*(void *)(v11 + 24) >> 1) - v13;
  uint64_t result = (uint64_t)specialized Sequence._copySequenceContents(initializing:)(&v38, (void *)(v11 + 8 * v13 + 32), v14, v4);
  if (result < v5)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result >= 1)
  {
    uint64_t v17 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v18 = __OFADD__(v17, result);
    uint64_t v19 = v17 + result;
    if (v18)
    {
      __break(1u);
      goto LABEL_56;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
  }
  if (result != v14)
  {
LABEL_18:
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return specialized Array._endMutation()();
  }
LABEL_25:
  uint64_t v3 = *v1;
  uint64_t v7 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v38;
  uint64_t v15 = v39;
  uint64_t v16 = v40;
  uint64_t v2 = v41;
  uint64_t v37 = v39;
  if (!v42)
  {
LABEL_56:
    int64_t v33 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      goto LABEL_75;
    }
    int64_t v23 = (unint64_t)(v16 + 64) >> 6;
    if (v33 >= v23) {
      goto LABEL_18;
    }
    unint64_t v34 = *(void *)(v15 + 8 * v33);
    uint64_t v35 = v2 + 1;
    if (!v34)
    {
      uint64_t v35 = v2 + 2;
      if (v2 + 2 >= v23) {
        goto LABEL_18;
      }
      unint64_t v34 = *(void *)(v37 + 8 * v35);
      if (!v34)
      {
        uint64_t v35 = v2 + 3;
        if (v2 + 3 >= v23) {
          goto LABEL_18;
        }
        unint64_t v34 = *(void *)(v37 + 8 * v35);
        if (!v34)
        {
          uint64_t v35 = v2 + 4;
          if (v2 + 4 >= v23) {
            goto LABEL_18;
          }
          unint64_t v34 = *(void *)(v37 + 8 * v35);
          if (!v34)
          {
            uint64_t v35 = v2 + 5;
            if (v2 + 5 >= v23) {
              goto LABEL_18;
            }
            unint64_t v34 = *(void *)(v37 + 8 * v35);
            if (!v34)
            {
              uint64_t v36 = v2 + 6;
              do
              {
                if (v23 == v36) {
                  goto LABEL_18;
                }
                unint64_t v34 = *(void *)(v37 + 8 * v36++);
              }
              while (!v34);
              uint64_t v35 = v36 - 1;
            }
          }
        }
      }
    }
    unint64_t v21 = (v34 - 1) & v34;
    unint64_t v22 = __clz(__rbit64(v34)) + (v35 << 6);
    uint64_t v2 = v35;
    goto LABEL_27;
  }
  unint64_t v21 = (v42 - 1) & v42;
  unint64_t v22 = __clz(__rbit64(v42)) | (v41 << 6);
  int64_t v23 = (unint64_t)(v40 + 64) >> 6;
LABEL_27:
  uint64_t v24 = *(void **)(*(void *)(v10 + 56) + 8 * v22);
  uint64_t result = v24;
  while (1)
  {
    if (v7 + 1 > *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      uint64_t result = specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    uint64_t v3 = *v1;
    uint64_t v25 = *v1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v26 = *(void *)(v25 + 0x18) >> 1;
    if (v7 < v26) {
      break;
    }
LABEL_29:
    *(void *)(v25 + 16) = v7;
  }
  while (1)
  {
    *(void *)(v25 + 32 + 8 * v7++) = v24;
    if (v21)
    {
      unint64_t v27 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v28 = v27 | (v2 << 6);
      goto LABEL_51;
    }
    int64_t v29 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      break;
    }
    if (v29 >= v23) {
      goto LABEL_53;
    }
    unint64_t v30 = *(void *)(v37 + 8 * v29);
    uint64_t v31 = v2 + 1;
    if (!v30)
    {
      uint64_t v31 = v2 + 2;
      if (v2 + 2 >= v23) {
        goto LABEL_53;
      }
      unint64_t v30 = *(void *)(v37 + 8 * v31);
      if (!v30)
      {
        uint64_t v31 = v2 + 3;
        if (v2 + 3 >= v23) {
          goto LABEL_53;
        }
        unint64_t v30 = *(void *)(v37 + 8 * v31);
        if (!v30)
        {
          uint64_t v31 = v2 + 4;
          if (v2 + 4 >= v23) {
            goto LABEL_53;
          }
          unint64_t v30 = *(void *)(v37 + 8 * v31);
          if (!v30)
          {
            uint64_t v31 = v2 + 5;
            if (v2 + 5 >= v23) {
              goto LABEL_53;
            }
            unint64_t v30 = *(void *)(v37 + 8 * v31);
            if (!v30)
            {
              uint64_t v32 = v2 + 6;
              while (v23 != v32)
              {
                unint64_t v30 = *(void *)(v37 + 8 * v32++);
                if (v30)
                {
                  uint64_t v31 = v32 - 1;
                  goto LABEL_50;
                }
              }
LABEL_53:
              *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
              goto LABEL_18;
            }
          }
        }
      }
    }
LABEL_50:
    unint64_t v21 = (v30 - 1) & v30;
    unint64_t v28 = __clz(__rbit64(v30)) + (v31 << 6);
    uint64_t v2 = v31;
LABEL_51:
    uint64_t v24 = *(void **)(*(void *)(v10 + 56) + 8 * v28);
    if (v7 >= v26)
    {
      uint64_t v3 = *v1;
      uint64_t v25 = *v1 & 0xFFFFFFFFFFFFFF8;
      uint64_t result = v24;
      goto LABEL_29;
    }
    uint64_t result = v24;
    uint64_t v24 = (void *)result;
  }
  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  void *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  void v38[2];
  uint64_t v39;
  int64_t v40;
  unint64_t v41;

  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *(void **)v1;
  uint64_t v5 = *(void *)(*(void *)v1 + 16);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = result;
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (long long v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      uint64_t v10 = v5 + v3;
    }
    else {
      uint64_t v10 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    long long v9 = v4[3] >> 1;
  }
  uint64_t v11 = v4[2];
  uint64_t v12 = v9 - v11;
  uint64_t result = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v38, &v4[2 * v11 + 4], v9 - v11, v7);
  if (result < v3) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v14 = v4[2];
    uint64_t v15 = __OFADD__(v14, result);
    uint64_t v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_48;
    }
    v4[2] = v16;
  }
  if (result != v12)
  {
LABEL_13:
    uint64_t result = outlined consume of [AnyHashable : Any].Iterator._Variant();
    *(void *)uint64_t v1 = v4;
    return result;
  }
LABEL_16:
  uint64_t v2 = v4[2];
  uint64_t v3 = v38[0];
  uint64_t v37 = v38[1];
  uint64_t v13 = v39;
  uint64_t v6 = v40;
  if (v41)
  {
    uint64_t v17 = (v41 - 1) & v41;
    BOOL v18 = __clz(__rbit64(v41)) | (v40 << 6);
    uint64_t v36 = (unint64_t)(v39 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_48:
  uint64_t v32 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_66;
  }
  uint64_t v36 = (unint64_t)(v13 + 64) >> 6;
  if (v32 >= v36) {
    goto LABEL_13;
  }
  int64_t v33 = *(void *)(v37 + 8 * v32);
  unint64_t v34 = v6 + 1;
  if (!v33)
  {
    unint64_t v34 = v6 + 2;
    if (v6 + 2 >= v36) {
      goto LABEL_13;
    }
    int64_t v33 = *(void *)(v37 + 8 * v34);
    if (!v33)
    {
      unint64_t v34 = v6 + 3;
      if (v6 + 3 >= v36) {
        goto LABEL_13;
      }
      int64_t v33 = *(void *)(v37 + 8 * v34);
      if (!v33)
      {
        unint64_t v34 = v6 + 4;
        if (v6 + 4 >= v36) {
          goto LABEL_13;
        }
        int64_t v33 = *(void *)(v37 + 8 * v34);
        if (!v33)
        {
          unint64_t v34 = v6 + 5;
          if (v6 + 5 >= v36) {
            goto LABEL_13;
          }
          int64_t v33 = *(void *)(v37 + 8 * v34);
          if (!v33)
          {
            uint64_t v35 = v6 + 6;
            do
            {
              if (v36 == v35) {
                goto LABEL_13;
              }
              int64_t v33 = *(void *)(v37 + 8 * v35++);
            }
            while (!v33);
            unint64_t v34 = v35 - 1;
          }
        }
      }
    }
  }
  uint64_t v17 = (v33 - 1) & v33;
  BOOL v18 = __clz(__rbit64(v33)) + (v34 << 6);
  uint64_t v6 = v34;
LABEL_18:
  uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v18);
  unint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v22 = v4[3];
    int64_t v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v2 + 1) {
      break;
    }
    if (v2 < v23) {
      goto LABEL_23;
    }
LABEL_20:
    v4[2] = v2;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v2 + 1, 1, v4);
  uint64_t v4 = (void *)result;
  int64_t v23 = *(void *)(result + 24) >> 1;
  if (v2 >= v23) {
    goto LABEL_20;
  }
  while (1)
  {
LABEL_23:
    uint64_t v24 = &v4[2 * v2 + 4];
    *uint64_t v24 = v21;
    v24[1] = v20;
    ++v2;
    if (v17)
    {
      uint64_t v25 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      uint64_t v26 = v25 | (v6 << 6);
      goto LABEL_41;
    }
    unint64_t v27 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v27 >= v36) {
      goto LABEL_45;
    }
    unint64_t v28 = *(void *)(v37 + 8 * v27);
    int64_t v29 = v6 + 1;
    if (!v28)
    {
      int64_t v29 = v6 + 2;
      if (v6 + 2 >= v36) {
        goto LABEL_45;
      }
      unint64_t v28 = *(void *)(v37 + 8 * v29);
      if (!v28)
      {
        int64_t v29 = v6 + 3;
        if (v6 + 3 >= v36) {
          goto LABEL_45;
        }
        unint64_t v28 = *(void *)(v37 + 8 * v29);
        if (!v28)
        {
          int64_t v29 = v6 + 4;
          if (v6 + 4 >= v36) {
            goto LABEL_45;
          }
          unint64_t v28 = *(void *)(v37 + 8 * v29);
          if (!v28)
          {
            int64_t v29 = v6 + 5;
            if (v6 + 5 >= v36) {
              goto LABEL_45;
            }
            unint64_t v28 = *(void *)(v37 + 8 * v29);
            if (!v28)
            {
              unint64_t v30 = v6 + 6;
              while (v36 != v30)
              {
                unint64_t v28 = *(void *)(v37 + 8 * v30++);
                if (v28)
                {
                  int64_t v29 = v30 - 1;
                  goto LABEL_40;
                }
              }
LABEL_45:
              v4[2] = v2;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_40:
    uint64_t v17 = (v28 - 1) & v28;
    uint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    uint64_t v6 = v29;
LABEL_41:
    uint64_t v31 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v26);
    unint64_t v21 = *v31;
    uint64_t v20 = v31[1];
    if (v2 >= v23)
    {
      uint64_t result = swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    uint64_t result = swift_bridgeObjectRetain();
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  void *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  int64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  BOOL v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  void v38[2];
  uint64_t v39;
  int64_t v40;
  unint64_t v41;

  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *(void **)v1;
  uint64_t v5 = *(void *)(*(void *)v1 + 16);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = result;
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (long long v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      uint64_t v10 = v5 + v3;
    }
    else {
      uint64_t v10 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    long long v9 = v4[3] >> 1;
  }
  uint64_t v11 = v4[2];
  uint64_t v12 = v9 - v11;
  uint64_t result = (uint64_t)specialized Sequence._copySequenceContents(initializing:)(v38, &v4[v11 + 4], v9 - v11, v7);
  if (result < v3) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v13 = v4[2];
    uint64_t v14 = __OFADD__(v13, result);
    uint64_t v15 = v13 + result;
    if (v14)
    {
      __break(1u);
      goto LABEL_51;
    }
    v4[2] = v15;
  }
  if (result != v12) {
    goto LABEL_13;
  }
LABEL_16:
  uint64_t v2 = v4[2];
  uint64_t v7 = v38[0];
  uint64_t v3 = v39;
  uint64_t v6 = v40;
  uint64_t v36 = v39;
  uint64_t v37 = v38[1];
  if (!v41)
  {
LABEL_51:
    int64_t v29 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v20 = (unint64_t)(v3 + 64) >> 6;
    if (v29 >= v20) {
      goto LABEL_13;
    }
    int64_t v33 = *(void *)(v37 + 8 * v29);
    if (!v33)
    {
      unint64_t v34 = v6 + 2;
      if (v6 + 2 >= v20) {
        goto LABEL_13;
      }
      int64_t v33 = *(void *)(v37 + 8 * v34);
      if (v33)
      {
LABEL_59:
        int64_t v29 = v34;
      }
      else
      {
        if (v6 + 3 >= v20) {
          goto LABEL_13;
        }
        int64_t v33 = *(void *)(v37 + 8 * (v6 + 3));
        if (!v33) {
          goto LABEL_65;
        }
        int64_t v29 = v6 + 3;
      }
    }
LABEL_54:
    uint64_t v16 = (v33 - 1) & v33;
    uint64_t v17 = __clz(__rbit64(v33)) + (v29 << 6);
    uint64_t v6 = v29;
    uint64_t v3 = v36;
    goto LABEL_18;
  }
  uint64_t v16 = (v41 - 1) & v41;
  uint64_t v17 = __clz(__rbit64(v41)) | (v40 << 6);
LABEL_18:
  BOOL v18 = *(void **)(*(void *)(v7 + 48) + 8 * v17);
  uint64_t v19 = v18;
  if (!v18) {
    goto LABEL_13;
  }
  unint64_t v21 = v19;
  unint64_t v22 = (unint64_t)(v3 + 64) >> 6;
  while (1)
  {
    int64_t v23 = v4[3];
    uint64_t v24 = v23 >> 1;
    if ((uint64_t)(v23 >> 1) < v2 + 1)
    {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v2 + 1, 1, v4);
      uint64_t v24 = v4[3] >> 1;
    }
    if (v2 < v24) {
      break;
    }
LABEL_20:
    v4[2] = v2;
    if (!v21) {
      goto LABEL_13;
    }
  }
  while (1)
  {
    v4[v2++ + 4] = v21;
    if (!v16) {
      break;
    }
    uint64_t v25 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    uint64_t v26 = v25 | (v6 << 6);
LABEL_26:
    unint64_t v21 = *(void **)(*(void *)(v7 + 48) + 8 * v26);
    unint64_t v27 = v21;
    if (v21) {
      unint64_t v28 = v2 < v24;
    }
    else {
      unint64_t v28 = 0;
    }
    if (!v28) {
      goto LABEL_20;
    }
  }
  int64_t v29 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v29 >= v22) {
      goto LABEL_55;
    }
    unint64_t v30 = *(void *)(v37 + 8 * v29);
    if (v30) {
      goto LABEL_41;
    }
    uint64_t v31 = v6 + 2;
    if (v6 + 2 >= v22) {
      goto LABEL_55;
    }
    unint64_t v30 = *(void *)(v37 + 8 * v31);
    if (!v30)
    {
      if (v6 + 3 >= v22) {
        goto LABEL_55;
      }
      unint64_t v30 = *(void *)(v37 + 8 * (v6 + 3));
      if (v30)
      {
        int64_t v29 = v6 + 3;
        goto LABEL_41;
      }
      uint64_t v31 = v6 + 4;
      if (v6 + 4 >= v22) {
        goto LABEL_55;
      }
      unint64_t v30 = *(void *)(v37 + 8 * v31);
      if (!v30)
      {
        int64_t v29 = v6 + 5;
        if (v6 + 5 >= v22) {
          goto LABEL_55;
        }
        unint64_t v30 = *(void *)(v37 + 8 * v29);
        if (!v30)
        {
          uint64_t v32 = v6 + 6;
          while (v22 != v32)
          {
            unint64_t v30 = *(void *)(v37 + 8 * v32++);
            if (v30)
            {
              int64_t v29 = v32 - 1;
              goto LABEL_41;
            }
          }
LABEL_55:
          v4[2] = v2;
          goto LABEL_13;
        }
        goto LABEL_41;
      }
    }
    int64_t v29 = v31;
LABEL_41:
    uint64_t v16 = (v30 - 1) & v30;
    uint64_t v26 = __clz(__rbit64(v30)) + (v29 << 6);
    uint64_t v6 = v29;
    goto LABEL_26;
  }
  __break(1u);
LABEL_65:
  unint64_t v34 = v29 + 3;
  if (v29 + 3 < v20)
  {
    int64_t v33 = *(void *)(v37 + 8 * v34);
    if (v33) {
      goto LABEL_59;
    }
    v29 += 4;
    if (v29 >= v20) {
      goto LABEL_13;
    }
    int64_t v33 = *(void *)(v37 + 8 * v29);
    if (!v33)
    {
      uint64_t v35 = v6 + 6;
      while (v20 != v35)
      {
        int64_t v33 = *(void *)(v37 + 8 * v35++);
        if (v33)
        {
          int64_t v29 = v35 - 1;
          goto LABEL_54;
        }
      }
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_13:
  uint64_t result = outlined consume of [AnyHashable : Any].Iterator._Variant();
  *(void *)uint64_t v1 = v4;
  return result;
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  void *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  void v38[2];
  uint64_t v39;
  int64_t v40;
  unint64_t v41;

  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *(void **)v1;
  uint64_t v5 = *(void *)(*(void *)v1 + 16);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = result;
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (long long v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      uint64_t v10 = v5 + v3;
    }
    else {
      uint64_t v10 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    long long v9 = v4[3] >> 1;
  }
  uint64_t v11 = v4[2];
  uint64_t v12 = v9 - v11;
  uint64_t result = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v38, &v4[2 * v11 + 4], v9 - v11, v7);
  if (result < v3) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v14 = v4[2];
    uint64_t v15 = __OFADD__(v14, result);
    uint64_t v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_48;
    }
    v4[2] = v16;
  }
  if (result != v12)
  {
LABEL_13:
    uint64_t result = outlined consume of [AnyHashable : Any].Iterator._Variant();
    *(void *)uint64_t v1 = v4;
    return result;
  }
LABEL_16:
  uint64_t v2 = v4[2];
  uint64_t v3 = v38[0];
  uint64_t v37 = v38[1];
  uint64_t v13 = v39;
  uint64_t v6 = v40;
  if (v41)
  {
    uint64_t v17 = (v41 - 1) & v41;
    BOOL v18 = __clz(__rbit64(v41)) | (v40 << 6);
    uint64_t v36 = (unint64_t)(v39 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_48:
  uint64_t v32 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_66;
  }
  uint64_t v36 = (unint64_t)(v13 + 64) >> 6;
  if (v32 >= v36) {
    goto LABEL_13;
  }
  int64_t v33 = *(void *)(v37 + 8 * v32);
  unint64_t v34 = v6 + 1;
  if (!v33)
  {
    unint64_t v34 = v6 + 2;
    if (v6 + 2 >= v36) {
      goto LABEL_13;
    }
    int64_t v33 = *(void *)(v37 + 8 * v34);
    if (!v33)
    {
      unint64_t v34 = v6 + 3;
      if (v6 + 3 >= v36) {
        goto LABEL_13;
      }
      int64_t v33 = *(void *)(v37 + 8 * v34);
      if (!v33)
      {
        unint64_t v34 = v6 + 4;
        if (v6 + 4 >= v36) {
          goto LABEL_13;
        }
        int64_t v33 = *(void *)(v37 + 8 * v34);
        if (!v33)
        {
          unint64_t v34 = v6 + 5;
          if (v6 + 5 >= v36) {
            goto LABEL_13;
          }
          int64_t v33 = *(void *)(v37 + 8 * v34);
          if (!v33)
          {
            uint64_t v35 = v6 + 6;
            do
            {
              if (v36 == v35) {
                goto LABEL_13;
              }
              int64_t v33 = *(void *)(v37 + 8 * v35++);
            }
            while (!v33);
            unint64_t v34 = v35 - 1;
          }
        }
      }
    }
  }
  uint64_t v17 = (v33 - 1) & v33;
  BOOL v18 = __clz(__rbit64(v33)) + (v34 << 6);
  uint64_t v6 = v34;
LABEL_18:
  uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v18);
  unint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v22 = v4[3];
    int64_t v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v2 + 1) {
      break;
    }
    if (v2 < v23) {
      goto LABEL_23;
    }
LABEL_20:
    v4[2] = v2;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v2 + 1, 1, v4);
  uint64_t v4 = (void *)result;
  int64_t v23 = *(void *)(result + 24) >> 1;
  if (v2 >= v23) {
    goto LABEL_20;
  }
  while (1)
  {
LABEL_23:
    uint64_t v24 = &v4[2 * v2 + 4];
    *uint64_t v24 = v21;
    v24[1] = v20;
    ++v2;
    if (v17)
    {
      uint64_t v25 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      uint64_t v26 = v25 | (v6 << 6);
      goto LABEL_41;
    }
    unint64_t v27 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v27 >= v36) {
      goto LABEL_45;
    }
    unint64_t v28 = *(void *)(v37 + 8 * v27);
    int64_t v29 = v6 + 1;
    if (!v28)
    {
      int64_t v29 = v6 + 2;
      if (v6 + 2 >= v36) {
        goto LABEL_45;
      }
      unint64_t v28 = *(void *)(v37 + 8 * v29);
      if (!v28)
      {
        int64_t v29 = v6 + 3;
        if (v6 + 3 >= v36) {
          goto LABEL_45;
        }
        unint64_t v28 = *(void *)(v37 + 8 * v29);
        if (!v28)
        {
          int64_t v29 = v6 + 4;
          if (v6 + 4 >= v36) {
            goto LABEL_45;
          }
          unint64_t v28 = *(void *)(v37 + 8 * v29);
          if (!v28)
          {
            int64_t v29 = v6 + 5;
            if (v6 + 5 >= v36) {
              goto LABEL_45;
            }
            unint64_t v28 = *(void *)(v37 + 8 * v29);
            if (!v28)
            {
              unint64_t v30 = v6 + 6;
              while (v36 != v30)
              {
                unint64_t v28 = *(void *)(v37 + 8 * v30++);
                if (v28)
                {
                  int64_t v29 = v30 - 1;
                  goto LABEL_40;
                }
              }
LABEL_45:
              v4[2] = v2;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_40:
    uint64_t v17 = (v28 - 1) & v28;
    uint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    uint64_t v6 = v29;
LABEL_41:
    uint64_t v31 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v26);
    unint64_t v21 = *v31;
    uint64_t v20 = v31[1];
    if (v2 >= v23)
    {
      uint64_t result = swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    uint64_t result = swift_bridgeObjectRetain();
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v61 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  double v54 = (char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v58 = (uint64_t)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v55 = (uint64_t)v50 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v59 = (uint64_t)v50 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v60 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v64 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v16 = dispatch thunk of Sequence.underestimatedCount.getter();
  unint64_t v17 = *v1;
  int64_t v18 = *(void *)(*v2 + 16);
  uint64_t v19 = (char *)(v18 + v16);
  if (__OFADD__(v18, v16))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v20 = v16;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v62 = v2;
  *uint64_t v2 = v17;
  if (isUniquelyReferenced_nonNull_native && (uint64_t v22 = *(void *)(v17 + 24) >> 1, v22 >= (uint64_t)v19))
  {
    uint64_t v2 = v62;
  }
  else
  {
    if (v18 <= (uint64_t)v19) {
      int64_t v23 = (int64_t)v19;
    }
    else {
      int64_t v23 = v18;
    }
    unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v17, &demangling cache variable for type metadata for _ContiguousArrayStorage<SharedTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    uint64_t v2 = v62;
    *uint64_t v62 = v17;
    uint64_t v22 = *(void *)(v17 + 24) >> 1;
  }
  uint64_t v24 = *(void *)(v61 + 72);
  uint64_t v25 = v22 - *(void *)(v17 + 16);
  unint64_t v53 = (*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
  uint64_t v57 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  uint64_t v19 = v64;
  uint64_t v26 = dispatch thunk of Sequence._copyContents(initializing:)();
  unint64_t v28 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  uint64_t v27 = v12 + 8;
  v28(a1, v11);
  if (v26 < v20) {
    goto LABEL_16;
  }
  if (v26 >= 1)
  {
    uint64_t v29 = *(void *)(*v2 + 16);
    BOOL v30 = __OFADD__(v29, v26);
    uint64_t v31 = v29 + v26;
    if (v30)
    {
      __break(1u);
LABEL_20:
      uint64_t v36 = (void (**)(char *, uint64_t, uint64_t))(v26 + 32);
      uint64_t v61 = v26 + 8;
      uint64_t v37 = v54;
      uint64_t v38 = v59;
      do
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v27, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
        uint64_t v40 = *v2;
        unint64_t v41 = *(void *)(*v2 + 24);
        uint64_t v42 = v41 >> 1;
        if ((uint64_t)(v41 >> 1) < v11 + 1)
        {
          uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v11 + 1, 1, *v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<SharedTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
          *uint64_t v2 = v40;
          uint64_t v42 = *(void *)(v40 + 24) >> 1;
        }
        uint64_t v43 = v58;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v59, v58, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
        uint64_t v44 = v56;
        if (v51(v43, 1, v56) == 1)
        {
          uint64_t v45 = v58;
LABEL_32:
          outlined destroy of StocksKitCurrencyCache.Provider?(v45, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
          uint64_t v42 = v11;
        }
        else
        {
          uint64_t v46 = *v36;
          if (v11 > v42) {
            uint64_t v42 = v11;
          }
          unint64_t v47 = v40 + v53;
          uint64_t v45 = v58;
          unint64_t v48 = v47 + v57 * v11;
          while (1)
          {
            v46(v37, v45, v44);
            if (v42 == v11) {
              break;
            }
            outlined destroy of StocksKitCurrencyCache.Provider?(v38, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
            v46((char *)v48, (uint64_t)v37, v44);
            ++v11;
            dispatch thunk of IteratorProtocol.next()();
            uint64_t v45 = v58;
            outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v38, v58, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
            int v49 = v51(v45, 1, v44);
            v48 += v57;
            if (v49 == 1) {
              goto LABEL_32;
            }
          }
          (*(void (**)(char *, uint64_t))v61)(v37, v44);
          uint64_t v11 = v42;
        }
        uint64_t v2 = v62;
        *(void *)(*v62 + 16) = v42;
        uint64_t v27 = v55;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v59, v55, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
        int v39 = v51(v27, 1, v56);
        uint64_t v19 = v64;
      }
      while (v39 != 1);
      goto LABEL_18;
    }
    *(void *)(*v2 + 16) = v31;
  }
  if (v26 != v25) {
    return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v19, v63);
  }
LABEL_17:
  uint64_t v11 = *(void *)(*v2 + 16);
  uint64_t v33 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v34 = v59;
  v50[1] = v33;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v35 = v34;
  uint64_t v27 = v55;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v35, v55, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  uint64_t v26 = v61;
  CGFloat v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
  uint64_t v52 = v61 + 48;
  if (v51(v27, 1, v56) != 1) {
    goto LABEL_20;
  }
LABEL_18:
  outlined destroy of StocksKitCurrencyCache.Provider?(v59, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v19, v63);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v27, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
}

{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  int v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  void v43[2];
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *((void *)*v1 + 2);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = a1;
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v8 = *((void *)v3 + 3) >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      uint64_t v9 = v4 + v2;
    }
    else {
      uint64_t v9 = v4;
    }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    uint64_t v8 = *((void *)v3 + 3) >> 1;
  }
  uint64_t v10 = *((void *)v3 + 2);
  uint64_t v11 = v8 - v10;
  uint64_t result = (uint64_t)specialized Sequence._copySequenceContents(initializing:)(v43, &v3[4 * v10 + 32], v8 - v10, v6);
  if (result < v2) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v16 = *((void *)v3 + 2);
    unint64_t v17 = __OFADD__(v16, result);
    int64_t v18 = v16 + result;
    if (v17)
    {
      __break(1u);
      goto LABEL_47;
    }
    *((void *)v3 + 2) = v18;
  }
  if (result != v11)
  {
LABEL_13:
    uint64_t result = outlined consume of [AnyHashable : Any].Iterator._Variant();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_16:
  uint64_t v6 = *((void *)v3 + 2);
  uint64_t result = v43[0];
  uint64_t v13 = v43[1];
  uint64_t v14 = v44;
  uint64_t v15 = v45;
  if (v46)
  {
    uint64_t v19 = (v46 - 1) & v46;
    uint64_t v20 = __clz(__rbit64(v46)) | (v45 << 6);
    unint64_t v21 = (unint64_t)(v44 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_47:
  uint64_t v36 = v15 + 1;
  if (__OFADD__(v15, 1)) {
    goto LABEL_65;
  }
  unint64_t v21 = (unint64_t)(v14 + 64) >> 6;
  if (v36 >= v21) {
    goto LABEL_13;
  }
  uint64_t v37 = *(void *)(v13 + 8 * v36);
  uint64_t v38 = v15 + 1;
  if (!v37)
  {
    uint64_t v38 = v15 + 2;
    if (v15 + 2 >= v21) {
      goto LABEL_13;
    }
    uint64_t v37 = *(void *)(v13 + 8 * v38);
    if (!v37)
    {
      uint64_t v38 = v15 + 3;
      if (v15 + 3 >= v21) {
        goto LABEL_13;
      }
      uint64_t v37 = *(void *)(v13 + 8 * v38);
      if (!v37)
      {
        uint64_t v38 = v15 + 4;
        if (v15 + 4 >= v21) {
          goto LABEL_13;
        }
        uint64_t v37 = *(void *)(v13 + 8 * v38);
        if (!v37)
        {
          uint64_t v38 = v15 + 5;
          if (v15 + 5 >= v21) {
            goto LABEL_13;
          }
          uint64_t v37 = *(void *)(v13 + 8 * v38);
          if (!v37)
          {
            int v39 = v15 + 6;
            do
            {
              if (v21 == v39) {
                goto LABEL_13;
              }
              uint64_t v37 = *(void *)(v13 + 8 * v39++);
            }
            while (!v37);
            uint64_t v38 = v39 - 1;
          }
        }
      }
    }
  }
  uint64_t v19 = (v37 - 1) & v37;
  uint64_t v20 = __clz(__rbit64(v37)) + (v38 << 6);
  uint64_t v15 = v38;
LABEL_18:
  uint64_t v22 = *(_DWORD *)(*(void *)(result + 48) + 4 * v20);
  while (1)
  {
    int64_t v23 = *((void *)v3 + 3);
    uint64_t v24 = v23 >> 1;
    if ((uint64_t)(v23 >> 1) < v6 + 1) {
      break;
    }
    if (v6 < v24) {
      goto LABEL_25;
    }
LABEL_19:
    *((void *)v3 + 2) = v6;
  }
  unint64_t v41 = v13;
  uint64_t v42 = result;
  uint64_t v31 = v14;
  uint64_t v32 = v15;
  uint64_t v33 = v3;
  uint64_t v34 = v19;
  uint64_t v40 = v22;
  uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v6 + 1, 1, v33);
  uint64_t v22 = v40;
  uint64_t v19 = v34;
  uint64_t v15 = v32;
  uint64_t v14 = v31;
  uint64_t v3 = v35;
  uint64_t v13 = v41;
  uint64_t result = v42;
  uint64_t v24 = *((void *)v3 + 3) >> 1;
  if (v6 >= v24) {
    goto LABEL_19;
  }
  while (1)
  {
LABEL_25:
    *(_DWORD *)&v3[4 * v6++ + 32] = v22;
    if (v19)
    {
      uint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      uint64_t v26 = v25 | (v15 << 6);
      goto LABEL_24;
    }
    uint64_t v27 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v27 >= v21) {
      goto LABEL_44;
    }
    unint64_t v28 = *(void *)(v13 + 8 * v27);
    uint64_t v29 = v15 + 1;
    if (!v28)
    {
      uint64_t v29 = v15 + 2;
      if (v15 + 2 >= v21) {
        goto LABEL_44;
      }
      unint64_t v28 = *(void *)(v13 + 8 * v29);
      if (!v28)
      {
        uint64_t v29 = v15 + 3;
        if (v15 + 3 >= v21) {
          goto LABEL_44;
        }
        unint64_t v28 = *(void *)(v13 + 8 * v29);
        if (!v28)
        {
          uint64_t v29 = v15 + 4;
          if (v15 + 4 >= v21) {
            goto LABEL_44;
          }
          unint64_t v28 = *(void *)(v13 + 8 * v29);
          if (!v28)
          {
            uint64_t v29 = v15 + 5;
            if (v15 + 5 >= v21) {
              goto LABEL_44;
            }
            unint64_t v28 = *(void *)(v13 + 8 * v29);
            if (!v28)
            {
              BOOL v30 = v15 + 6;
              while (v21 != v30)
              {
                unint64_t v28 = *(void *)(v13 + 8 * v30++);
                if (v28)
                {
                  uint64_t v29 = v30 - 1;
                  goto LABEL_41;
                }
              }
LABEL_44:
              *((void *)v3 + 2) = v6;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_41:
    uint64_t v19 = (v28 - 1) & v28;
    uint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    uint64_t v15 = v29;
LABEL_24:
    uint64_t v22 = *(_DWORD *)(*(void *)(result + 48) + 4 * v26);
    if (v6 >= v24) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  void *v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void v42[2];
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = a1;
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      uint64_t v9 = v4 + v2;
    }
    else {
      uint64_t v9 = v4;
    }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    uint64_t v8 = v3[3] >> 1;
  }
  uint64_t v10 = v3[2];
  uint64_t v11 = v8 - v10;
  uint64_t result = (uint64_t)specialized Sequence._copySequenceContents(initializing:)(v42, &v3[v10 + 4], v8 - v10, v6);
  if (result < v2) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v16 = v3[2];
    unint64_t v17 = __OFADD__(v16, result);
    int64_t v18 = v16 + result;
    if (v17)
    {
      __break(1u);
      goto LABEL_47;
    }
    v3[2] = v18;
  }
  if (result != v11)
  {
LABEL_13:
    uint64_t result = outlined consume of [AnyHashable : Any].Iterator._Variant();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_16:
  uint64_t v6 = v3[2];
  uint64_t result = v42[0];
  uint64_t v13 = v42[1];
  uint64_t v14 = v43;
  uint64_t v15 = v44;
  if (v45)
  {
    uint64_t v19 = (v45 - 1) & v45;
    uint64_t v20 = __clz(__rbit64(v45)) | (v44 << 6);
    unint64_t v21 = (unint64_t)(v43 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_47:
  uint64_t v35 = v15 + 1;
  if (__OFADD__(v15, 1)) {
    goto LABEL_65;
  }
  unint64_t v21 = (unint64_t)(v14 + 64) >> 6;
  if (v35 >= v21) {
    goto LABEL_13;
  }
  uint64_t v36 = *(void *)(v13 + 8 * v35);
  uint64_t v37 = v15 + 1;
  if (!v36)
  {
    uint64_t v37 = v15 + 2;
    if (v15 + 2 >= v21) {
      goto LABEL_13;
    }
    uint64_t v36 = *(void *)(v13 + 8 * v37);
    if (!v36)
    {
      uint64_t v37 = v15 + 3;
      if (v15 + 3 >= v21) {
        goto LABEL_13;
      }
      uint64_t v36 = *(void *)(v13 + 8 * v37);
      if (!v36)
      {
        uint64_t v37 = v15 + 4;
        if (v15 + 4 >= v21) {
          goto LABEL_13;
        }
        uint64_t v36 = *(void *)(v13 + 8 * v37);
        if (!v36)
        {
          uint64_t v37 = v15 + 5;
          if (v15 + 5 >= v21) {
            goto LABEL_13;
          }
          uint64_t v36 = *(void *)(v13 + 8 * v37);
          if (!v36)
          {
            uint64_t v38 = v15 + 6;
            do
            {
              if (v21 == v38) {
                goto LABEL_13;
              }
              uint64_t v36 = *(void *)(v13 + 8 * v38++);
            }
            while (!v36);
            uint64_t v37 = v38 - 1;
          }
        }
      }
    }
  }
  uint64_t v19 = (v36 - 1) & v36;
  uint64_t v20 = __clz(__rbit64(v36)) + (v37 << 6);
  uint64_t v15 = v37;
LABEL_18:
  uint64_t v22 = *(void *)(*(void *)(result + 48) + 8 * v20);
  while (1)
  {
    int64_t v23 = v3[3];
    uint64_t v24 = v23 >> 1;
    if ((uint64_t)(v23 >> 1) < v6 + 1) {
      break;
    }
    if (v6 < v24) {
      goto LABEL_25;
    }
LABEL_19:
    v3[2] = v6;
  }
  uint64_t v40 = v13;
  unint64_t v41 = result;
  int v39 = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v3;
  uint64_t v33 = v19;
  uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v6 + 1, 1, v32);
  uint64_t v19 = v33;
  uint64_t v15 = v31;
  uint64_t v14 = v39;
  uint64_t v13 = v40;
  uint64_t v3 = v34;
  uint64_t result = v41;
  uint64_t v24 = v3[3] >> 1;
  if (v6 >= v24) {
    goto LABEL_19;
  }
  while (1)
  {
LABEL_25:
    v3[v6++ + 4] = v22;
    if (v19)
    {
      uint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      uint64_t v26 = v25 | (v15 << 6);
      goto LABEL_24;
    }
    uint64_t v27 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v27 >= v21) {
      goto LABEL_44;
    }
    unint64_t v28 = *(void *)(v13 + 8 * v27);
    uint64_t v29 = v15 + 1;
    if (!v28)
    {
      uint64_t v29 = v15 + 2;
      if (v15 + 2 >= v21) {
        goto LABEL_44;
      }
      unint64_t v28 = *(void *)(v13 + 8 * v29);
      if (!v28)
      {
        uint64_t v29 = v15 + 3;
        if (v15 + 3 >= v21) {
          goto LABEL_44;
        }
        unint64_t v28 = *(void *)(v13 + 8 * v29);
        if (!v28)
        {
          uint64_t v29 = v15 + 4;
          if (v15 + 4 >= v21) {
            goto LABEL_44;
          }
          unint64_t v28 = *(void *)(v13 + 8 * v29);
          if (!v28)
          {
            uint64_t v29 = v15 + 5;
            if (v15 + 5 >= v21) {
              goto LABEL_44;
            }
            unint64_t v28 = *(void *)(v13 + 8 * v29);
            if (!v28)
            {
              BOOL v30 = v15 + 6;
              while (v21 != v30)
              {
                unint64_t v28 = *(void *)(v13 + 8 * v30++);
                if (v28)
                {
                  uint64_t v29 = v30 - 1;
                  goto LABEL_41;
                }
              }
LABEL_44:
              v3[2] = v6;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_41:
    uint64_t v19 = (v28 - 1) & v28;
    uint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    uint64_t v15 = v29;
LABEL_24:
    uint64_t v22 = *(void *)(*(void *)(result + 48) + 8 * v26);
    if (v6 >= v24) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnalyticsEvent);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v1;
  unint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *((void *)*v1 + 2);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = &v3[2 * v9 + 32];
  if (a1 + 32 < (unint64_t)&v10[2 * v8] && (unint64_t)v10 < a1 + 32 + 2 * v8) {
    goto LABEL_24;
  }
  memcpy(v10, (const void *)(a1 + 32), 2 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = *((void *)v3 + 2);
  uint64_t v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    *((void *)v3 + 2) = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[5 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[5 * v2] && (unint64_t)v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 40 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[6 * v8 + 4];
  if (a1 + 32 < v9 + 48 * v2 && v9 < a1 + 32 + 48 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<PKStroke>, MEMORY[0x263F14AA8], MEMORY[0x263F14AA8], MEMORY[0x263F14AA8]);
}

{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t result;
  uint64_t vars8;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v8 = *(void *)(v3 + 24) >> 1;
    if (v8 >= v5)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      if (v9) {
        goto LABEL_5;
      }
LABEL_17:
      if (!v2) {
        goto LABEL_18;
      }
      goto LABEL_22;
    }
  }
  if (v4 <= v5) {
    v4 += v2;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = MEMORY[0x21054E060](isUniquelyReferenced_nonNull_native, v4, 1, v3);
  swift_bridgeObjectRelease();
  *uint64_t v1 = v3;
  uint64_t v8 = *(void *)(v3 + 24) >> 1;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_17;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v3 + 16);
  if (v8 - v10 < (uint64_t)v9)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = v3 + 8 * v10 + 32;
  if (a1 + 32 < v11 + 8 * v9 && v11 < a1 + 32 + 8 * v9) {
    goto LABEL_25;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIMenuElement?);
  swift_arrayInitWithCopy();
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v13 = *(void *)(*v1 + 16);
  uint64_t v14 = __OFADD__(v13, v9);
  uint64_t v15 = v13 + v9;
  if (v14)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  *(void *)(*v1 + 16) = v15;
LABEL_18:
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x263F07508], MEMORY[0x263F07508], MEMORY[0x263F07508]);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[4 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 32 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v6 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v6;
  uint64_t v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v7 = 1;
  }
  if (v6 >> 62) {
    goto LABEL_27;
  }
  uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8) {
      uint64_t v11 = v8;
    }
    swift_bridgeObjectRetain();
    unint64_t v6 = MEMORY[0x21054E060](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *uint64_t v2 = v6;
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *v5;
  int64_t v8 = *(void *)(*v5 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v9 <= *(void *)(v7 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v8 <= v9) {
    int64_t v30 = v8 + v6;
  }
  else {
    int64_t v30 = v8;
  }
  unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v30, 1, v7, a2, a3, a4);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v6) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v16 = *(void *)(v7 + 16);
  uint64_t v17 = (*(void *)(v7 + 24) >> 1) - v16;
  uint64_t v18 = *(void *)(a5(0) - 8);
  uint64_t v19 = *(void *)(v18 + 72);
  if (v17 < v6)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  unint64_t v21 = v7 + v20 + v19 * v16;
  unint64_t v22 = a1 + v20;
  uint64_t v23 = v19 * v6;
  unint64_t v24 = v21 + v23;
  unint64_t v25 = v22 + v23;
  if (v22 < v24 && v21 < v25) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v6)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v5 = v7;
    return result;
  }
  uint64_t v27 = *(void *)(v7 + 16);
  BOOL v28 = __OFADD__(v27, v6);
  uint64_t v29 = v27 + v6;
  if (!v28)
  {
    *(void *)(v7 + 16) = v29;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t thunk for @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ()(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

uint64_t specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:)(uint64_t a1, double a2)
{
  *(void *)(v3 + 408) = a1;
  *(void *)(v3 + 416) = v2;
  *(double *)(v3 + 400) = a2;
  uint64_t v4 = type metadata accessor for UTType();
  *(void *)(v3 + 424) = v4;
  *(void *)(v3 + 432) = *(void *)(v4 - 8);
  *(void *)(v3 + 440) = swift_task_alloc();
  *(void *)(v3 + 448) = type metadata accessor for RendererOutput();
  *(void *)(v3 + 456) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  *(void *)(v3 + 464) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:), 0, 0);
}

uint64_t specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:)()
{
  uint64_t v47 = v0;
  uint64_t v1 = *(void *)(v0 + 464);
  Image.pdfContentsBounds.getter();
  uint64_t v43 = v3;
  uint64_t v44 = v2;
  uint64_t v41 = v5;
  uint64_t v42 = v4;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  CGFloat v6 = *(double *)(v0 + 392);
  Image.pdfContentsBounds.getter();
  double v8 = v7;
  double v10 = v9;
  CGFloat v39 = v12;
  CGFloat v40 = v11;
  CGAffineTransformMakeRotation(&v46, v6);
  CGFloat a = v46.a;
  CGFloat b = v46.b;
  CGFloat c = v46.c;
  CGFloat d = v46.d;
  *(CGFloat *)(v0 + 88) = v46.a;
  tCGFloat x = v46.tx;
  tCGFloat y = v46.ty;
  *(CGFloat *)(v0 + 96) = b;
  *(CGFloat *)(v0 + 104) = c;
  *(CGFloat *)(v0 + 112) = d;
  *(CGFloat *)(v0 + 120) = tx;
  *(CGFloat *)(v0 + 128) = ty;
  v49.origin.CGFloat x = v8;
  v49.origin.CGFloat y = v10;
  v49.size.CGFloat height = v39;
  v49.size.CGFloat width = v40;
  CGRect v50 = CGRectApplyAffineTransform(v49, (CGAffineTransform *)(v0 + 88));
  CGAffineTransformMakeTranslation(&v46, v8 - v50.origin.x, v10 - v50.origin.y);
  long long v19 = *(_OWORD *)&v46.c;
  long long v20 = *(_OWORD *)&v46.tx;
  *(_OWORD *)(v0 + 184) = *(_OWORD *)&v46.a;
  *(CGFloat *)(v0 + 136) = a;
  *(CGFloat *)(v0 + 144) = b;
  *(CGFloat *)(v0 + 152) = c;
  *(CGFloat *)(v0 + 160) = d;
  *(CGFloat *)(v0 + 168) = tx;
  *(CGFloat *)(v0 + 176) = ty;
  *(_OWORD *)(v0 + 200) = v19;
  *(_OWORD *)(v0 + 216) = v20;
  CGAffineTransformConcat(&v46, (CGAffineTransform *)(v0 + 136), (CGAffineTransform *)(v0 + 184));
  long long v21 = *(_OWORD *)&v46.c;
  long long v22 = *(_OWORD *)&v46.tx;
  *(_OWORD *)(v0 + 232) = *(_OWORD *)&v46.a;
  *(_OWORD *)(v0 + 248) = v21;
  *(_OWORD *)(v0 + 264) = v22;
  *(void *)&long long v21 = v43;
  uint64_t v23 = v44;
  uint64_t v24 = v41;
  *(void *)&long long v22 = v42;
  *(CGRect *)(v0 + 472) = CGRectApplyAffineTransform(*(CGRect *)((char *)&v21 - 8), (CGAffineTransform *)(v0 + 232));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  uint64_t v25 = type metadata accessor for CRAssetOrData();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v1, 1, v25) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 464), &demangling cache variable for type metadata for CRAssetOrData?);
    uint64_t v27 = *(void *)(v0 + 488);
    uint64_t v26 = *(void *)(v0 + 496);
    type metadata accessor for ImageRenderer();
    BOOL v28 = (void *)swift_allocObject();
    v28[2] = v27;
    v28[3] = v26;
    v28[4] = 0x3FF0000000000000;
    *(void *)(v0 + 520) = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v28);
    swift_storeEnumTagMultiPayload();
    uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
    uint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 528) = v29;
    *uint64_t v29 = v0;
    v29[1] = specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:);
    double v30 = *(double *)(v0 + 488);
    double v31 = *(double *)(v0 + 496);
    double v32 = *(double *)(v0 + 472);
    double v33 = *(double *)(v0 + 480);
    uint64_t v34 = *(void *)(v0 + 456);
    uint64_t v36 = *(void *)(v0 + 408);
    uint64_t v35 = *(void *)(v0 + 416);
    return v45(v0 + 320, v35, v36, 0, 0, v34, v32, v33, v30, v31);
  }
  else
  {
    uint64_t v38 = (void *)swift_task_alloc();
    *(void *)(v0 + 504) = v38;
    *uint64_t v38 = v0;
    v38[1] = specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:);
    return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(0x7FFFFFFFFFFFFFFFLL, 0, 0);
  }
}

{
  uint64_t v0;
  void *v1;
  double Width;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double);
  uint64_t v18;

  uint64_t v1 = *(void **)(v0 + 512);
  if (v1)
  {
    double Width = (double)(uint64_t)CGImageGetWidth(*(CGImageRef *)(v0 + 512));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    uint64_t v3 = CGRectGetWidth(*(CGRect *)(v0 + 360));

    uint64_t v4 = Width / v3;
  }
  else
  {
    uint64_t v4 = 1.0;
  }
  CGFloat v6 = *(void *)(v0 + 488);
  uint64_t v5 = *(void *)(v0 + 496);
  type metadata accessor for ImageRenderer();
  double v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  *(double *)(v7 + 32) = v4;
  *(void *)(v0 + 520) = specialized CanvasElementImageRenderer.__allocating_init(renderer:)(v7);
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
  double v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 528) = v8;
  *double v8 = v0;
  v8[1] = specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:);
  double v9 = *(double *)(v0 + 488);
  double v10 = *(double *)(v0 + 496);
  double v11 = *(double *)(v0 + 472);
  double v12 = *(double *)(v0 + 480);
  uint64_t v13 = *(void *)(v0 + 456);
  BOOL v15 = *(void *)(v0 + 408);
  uint64_t v14 = *(void *)(v0 + 416);
  return v17(v0 + 320, v14, v15, 0, 0, v13, v11, v12, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 456);
  swift_task_dealloc();
  _s8PaperKit0A8DocumentVWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for RendererOutput);
  return MEMORY[0x270FA2498](specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  CGImage *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  void *v10;
  id v11;
  __CFData *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFString *v16;
  CGImageDestination *v17;
  CFDictionaryRef isa;
  __CFData *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(uint64_t, unint64_t);
  uint64_t v25;

  if (*(void *)(v0 + 344))
  {
    outlined init with take of FindResult((long long *)(v0 + 320), v0 + 280);
    uint64_t v1 = *(void *)(v0 + 304);
    uint64_t v2 = *(void *)(v0 + 312);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 280), v1);
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
    if (v3)
    {
      uint64_t v4 = (CGImage *)v3;
      CGFloat v6 = *(void *)(v0 + 432);
      uint64_t v5 = *(void *)(v0 + 440);
      double v7 = *(void *)(v0 + 424);
      double v8 = *(void *)(v0 + 400);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
      initeCGFloat d = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_20C832C20;
      double v10 = (void *)*MEMORY[0x263F0EFE8];
      *(void *)(inited + 32) = *MEMORY[0x263F0EFE8];
      *(void *)(inited + 64) = MEMORY[0x263F8EF38];
      *(void *)(inited + 40) = v8;
      double v11 = v10;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      double v12 = (__CFData *)objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF990]), sel_init);
      static UTType.jpeg.getter();
      uint64_t v13 = UTType.identifier.getter();
      BOOL v15 = v14;
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      uint64_t v16 = (__CFString *)MEMORY[0x21054D080](v13, v15);
      swift_bridgeObjectRelease();
      uint64_t v17 = CGImageDestinationCreateWithData(v12, v16, 1uLL, 0);

      if (v17)
      {
        type metadata accessor for CFStringRef(0);
        lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
        isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        CGImageDestinationAddImage(v17, v4, isa);

        if (CGImageDestinationFinalize(v17))
        {
          long long v19 = v12;
          long long v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          long long v22 = v21;

          swift_release();
        }
        else
        {

          swift_release();
          long long v20 = 0;
          long long v22 = 0xF000000000000000;
        }
        __swift_destroy_boxed_opaque_existential_1(v0 + 280);
        goto LABEL_13;
      }
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
    __swift_destroy_boxed_opaque_existential_1(v0 + 280);
  }
  else
  {
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 320, &demangling cache variable for type metadata for RendererContext?);
  }
  long long v20 = 0;
  long long v22 = 0xF000000000000000;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
  return v23(v20, v22);
}

uint64_t specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 464);
  *(void *)(*(void *)v1 + 512) = a1;
  swift_task_dealloc();
  _s8PaperKit0A8DocumentVWOhTm_0(v2, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  return MEMORY[0x270FA2498](specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:), 0, 0);
}

uint64_t specialized PaperDocument.appendDocument<A>(_:asset:in:assetManager:useProxyPages:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  CGFloat v6 = v5;
  id v12 = objc_msgSend(a1, sel_isLocked);
  if (!v12) {
    goto LABEL_5;
  }
  if (one-time initialization token for shared != -1) {
    goto LABEL_9;
  }
  while (1)
  {
    MEMORY[0x270FA5388](v12);
    uint64_t v29 = v13;
    uint64_t v30 = a2;
    MEMORY[0x270FA5388](v14);
    uint64_t v25 = partial apply for closure #1 in PasswordManager.password(for:);
    uint64_t v26 = v15;
    uint64_t v17 = v16 + 4;
    os_unfair_lock_lock(v16 + 4);
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(&v31);
    os_unfair_lock_unlock(v17);
    if (!*((void *)&v31 + 1)) {
      break;
    }
    uint64_t v18 = (void *)MEMORY[0x21054D080](v31, *((void *)&v31 + 1));
    swift_bridgeObjectRelease();
    unsigned int v19 = objc_msgSend(a1, sel_unlockWithPassword_, v18);

    if (!v19) {
      break;
    }
LABEL_5:
    unint64_t v20 = (unint64_t)objc_msgSend(a1, sel_pageCount);
    if ((v20 & 0x8000000000000000) == 0)
    {
      MEMORY[0x270FA5388](v20);
      uint64_t v25 = v6;
      uint64_t v26 = a1;
      uint64_t v27 = a2;
      uint64_t v28 = a3;
      uint64_t v29 = a4;
      LOBYTE(v30) = a5 & 1;
      specialized Sequence.compactMap<A>(_:)((void (*)(void, __n128))partial apply for specialized closure #1 in PaperDocument.appendPages<A>(_:_:_:assetManager:useProxyPages:), (uint64_t)&v24, 0, v21);
      *(void *)&long long v31 = v22;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SharedTagged_3<TaggedPaperPage>]);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [SharedTagged_3<TaggedPaperPage>] and conformance [A], &demangling cache variable for type metadata for [SharedTagged_3<TaggedPaperPage>]);
      CROrderedSet.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      return 1;
    }
    __break(1u);
LABEL_9:
    id v12 = (id)swift_once();
  }
  return 0;
}

void specialized PaperDocument.insert<A>(scan:at:in:assetManager:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = type metadata accessor for CRKeyPath();
  uint64_t v55 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v52 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v10 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  CGFloat v51 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v44 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  uint64_t v14 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v56 = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for Image();
  uint64_t v19 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v49 = (uint64_t)v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v48 = (uint64_t)v38 - v22;
  uint64_t v54 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v53 = *(void *)(v54 - 8);
  double v23 = MEMORY[0x270FA5388](v54);
  uint64_t v25 = (char *)v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v58 = a1;
  id v26 = objc_msgSend(a1, sel_docInfos, v23);
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v47 = a2;
    uint64_t v41 = a3;
    uint64_t v42 = v4;
    specialized PaperDocument.pageGeometryForInserting<A>(at:in:)(a2, a3, &v62.a);
    CGFloat a = v62.a;
    CGFloat b = v62.b;
    CGFloat c = v62.c;
    CGFloat d = v62.d;
    CGAffineTransformMakeRotation(&v62, v62.tx);
    v63.origin.CGFloat x = a;
    v63.origin.CGFloat y = b;
    v63.size.CGFloat width = c;
    v63.size.CGFloat height = d;
    CGRect v64 = CGRectApplyAffineTransform(v63, &v62);
    CGFloat width = v64.size.width;
    uint64_t v33 = *(void *)&v64.size.height;
    id v43 = v27;
    NSArray.makeIterator()();
    uint64_t v57 = *(void *)&width;
    v55 += 7;
    CGFloat v40 = (void (**)(char *, uint64_t))(v10 + 8);
    CGFloat v39 = (void (**)(char *, uint64_t))(v14 + 8);
    while (1)
    {
      NSFastEnumerationIterator.next()();
      if (!*(void *)&v62.d) {
        break;
      }
      outlined init with take of Any(&v62, &v61);
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for ICDocCamDocumentInfo);
      if (swift_dynamicCast())
      {
        id v34 = v60;
        id v35 = v58;
        swift_retain();
        Image.init(docCamInfo:inScan:targetPageSize:assetManager:)(v34, v35, v57, v33, 0, a4, (uint64_t)v18);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v59) == 1)
        {

          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for Image?);
        }
        else
        {
          uint64_t v36 = v48;
          outlined init with take of Image((uint64_t)v18, v48, (uint64_t (*)(void))type metadata accessor for Image);
          _s8PaperKit13CRAssetOrDataOWOcTm_0(v36, v49, (uint64_t (*)(void))type metadata accessor for Image);
          (*v55)(v44, 1, 1, v46);
          v38[1] = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
          swift_retain();
          Ref.init<A>(_:_:identity:)();
          LOBYTE(v61) = 1;
          Ref.id.getter();
          lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
          SharedTagged_3.init(_:id:)();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
          CROrderedSet.insert(_:at:)();

          (*v40)(v51, v45);
          (*v39)(v56, v50);
          _s8PaperKit0A8DocumentVWOhTm_0(v48, (uint64_t (*)(void))type metadata accessor for Image);
          if (__OFADD__(v47++, 1))
          {
            __break(1u);
            break;
          }
        }
      }
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v25, v54);
  }
}

uint64_t specialized PaperDocument.pageGeometryForInserting<A>(at:in:)@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
LABEL_4:
    CROrderedSet.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Capsule<PaperDocument> and conformance Capsule<A>, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    SharedTagged_3.subscript.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v9 = v23;
    uint64_t v10 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    double v11 = (*(double (**)(uint64_t, uint64_t))(v10 + 56))(v9, v10);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v18 = v23;
    uint64_t v19 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    double v20 = (*(double (**)(uint64_t, uint64_t))(v19 + 64))(v18, v19);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t result = CROrderedSet.count.getter();
  if (a1 + 1 < result) {
    goto LABEL_4;
  }
  if (one-time initialization token for defaultPageBounds != -1) {
    uint64_t result = swift_once();
  }
  double v11 = *(double *)&static UIConstants.defaultPageBounds;
  uint64_t v13 = *(void *)algn_2676E9718;
  uint64_t v17 = *((void *)&xmmword_2676E9720 + 1);
  uint64_t v15 = xmmword_2676E9720;
  double v20 = 0.0;
LABEL_5:
  *a2 = v11;
  *((void *)a2 + 1) = v13;
  *((void *)a2 + 2) = v15;
  *((void *)a2 + 3) = v17;
  a2[4] = v20;
  return result;
}

uint64_t specialized PaperDocument.pageGeometryForInserting<A>(at:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a2;
  if (a1 >= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
LABEL_4:
    CROrderedSet.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PaperDocument>.Ref);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Capsule<PaperDocument>.Ref and conformance Capsule<A>.Ref, &demangling cache variable for type metadata for Capsule<PaperDocument>.Ref);
    SharedTagged_3.subscript.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v11 = v24;
    uint64_t v12 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    double v13 = (*(double (**)(uint64_t, uint64_t))(v12 + 56))(v11, v12);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    uint64_t v20 = v24;
    uint64_t v21 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    double v22 = (*(double (**)(uint64_t, uint64_t))(v21 + 64))(v20, v21);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t result = CROrderedSet.count.getter();
  if (a1 + 1 < result) {
    goto LABEL_4;
  }
  if (one-time initialization token for defaultPageBounds != -1) {
    uint64_t result = swift_once();
  }
  double v13 = *(double *)&static UIConstants.defaultPageBounds;
  uint64_t v15 = *(void *)algn_2676E9718;
  uint64_t v19 = *((void *)&xmmword_2676E9720 + 1);
  uint64_t v17 = xmmword_2676E9720;
  double v22 = 0.0;
LABEL_5:
  *a3 = v13;
  *((void *)a3 + 1) = v15;
  *((void *)a3 + 2) = v17;
  *((void *)a3 + 3) = v19;
  a3[4] = v22;
  return result;
}

id specialized PaperDocument.create<A>(page:fromDocument:asset:in:assetManager:useProxyPages:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, id a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  LODWORD(v88) = a6;
  uint64_t v66 = a5;
  uint64_t v83 = a4;
  uint64_t v86 = a7;
  id v87 = a3;
  uint64_t v80 = type metadata accessor for CRKeyPath();
  uint64_t v78 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  uint64_t v81 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v10 - 8);
  long long v76 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PaperDocumentPage>);
  uint64_t v77 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  uint64_t v75 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v73);
  uint64_t v71 = (uint64_t)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v69 = (char *)&v65 - v15;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v68);
  uint64_t v72 = (uint64_t)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v65 - v18;
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v67);
  uint64_t v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v65 - v23;
  uint64_t v25 = type metadata accessor for PaperDocumentPage();
  MEMORY[0x270FA5388](v25);
  uint64_t v74 = (uint64_t)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v65 - v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v84 = *(void *)(v30 - 8);
  uint64_t v85 = v30;
  MEMORY[0x270FA5388](v30);
  uint64_t v82 = (uint64_t)&v65 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for PDFPageID();
  uint64_t v70 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  id v34 = (uint64_t *)((char *)&v65 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = v35;
  uint64_t v37 = (char *)v34 + *(int *)(v35 + 20);
  uint64_t v38 = type metadata accessor for CRAsset();
  (*(void (**)(char *, id, uint64_t))(*(void *)(v38 - 8) + 16))(v37, v87, v38);
  *id v34 = a1;
  if ((v88 & 1) == 0)
  {
    id v59 = objc_msgSend(a2, sel_pageAtIndex_, a1);
    if (v59)
    {
      id v60 = v59;
      type metadata accessor for PaperKitPDFPage(0);
      if (swift_dynamicCastClass())
      {
        uint64_t v57 = v82;
        specialized PaperKitPDFPage.decodePaperPage<A>(pageID:in:assetManager:)((uint64_t)v34, v83, v66, v82);

        uint64_t v58 = (uint64_t)v34;
        goto LABEL_8;
      }
    }
    _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    uint64_t v64 = 1;
    uint64_t v61 = v85;
    uint64_t v63 = v86;
    uint64_t v62 = v84;
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v63, v64, 1, v61);
  }
  id result = objc_msgSend(a2, sel_pageAtIndex_, 0);
  if (result)
  {
    CGFloat v40 = result;
    uint64_t v88 = (uint64_t)v34;
    id v87 = objc_msgSend(result, sel_rotation);

    id result = objc_msgSend(a2, sel_pageAtIndex_, 0);
    if (result)
    {
      uint64_t v41 = result;
      objc_msgSend(result, sel_boundsForBox_, 0);
      CGFloat v43 = v42;
      CGFloat v45 = v44;
      CGFloat v47 = v46;
      CGFloat v49 = v48;

      type metadata accessor for CGRect(0);
      lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
      long long v89 = 0u;
      long long v90 = 0u;
      CRRegister.init(wrappedValue:)();
      long long v89 = 0u;
      long long v90 = 0u;
      CRRegister.init(wrappedValue:)();
      uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v24, 1, 1, v50);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v24, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      *(void *)&long long v89 = 0;
      lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      CRRegister.init(wrappedValue:)();
      uint64_t v67 = (uint64_t)&v29[*(int *)(v25 + 32)];
      uint64_t v70 = *(void *)(v70 + 56);
      uint64_t v65 = v36;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v70)(v19, 1, 1, v36);
      uint64_t v51 = v72;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v19, v72, &demangling cache variable for type metadata for PDFPageID?);
      lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PDFPageID?);
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      uint64_t v53 = (uint64_t)v69;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v69, 1, 1, v52);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v53, v71, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?(v53, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      *(void *)&long long v89 = 0;
      lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
      CRRegister.init(wrappedValue:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      CROrderedSet.init()();
      *(void *)&long long v89 = MEMORY[0x263F8EE78];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
      lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A], &demangling cache variable for type metadata for [CRKeyPath]);
      CRRegister.init(wrappedValue:)();
      *(void *)&v29[*(int *)(v25 + 52)] = MEMORY[0x263F8EE80];
      v91.origin.CGFloat x = v43;
      v91.origin.CGFloat y = v45;
      v91.size.CGFloat width = v47;
      v91.size.CGFloat height = v49;
      v92.origin.CGFloat x = v43;
      v92.origin.CGFloat y = v45;
      v92.size.CGFloat width = v47;
      v92.size.CGFloat height = v49;
      PaperDocumentPage.setContentsBounds(_:fullBounds:)(v91, v92);
      uint64_t v54 = v88;
      _s8PaperKit13CRAssetOrDataOWOcTm_0(v88, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      ((void (*)(char *, void, uint64_t, uint64_t))v70)(v19, 0, 1, v65);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v19, v51, &demangling cache variable for type metadata for PDFPageID?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
      CRRegister.wrappedValue.setter();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PDFPageID?);
      specialized PaperPage.axisAlignedRotationInDegrees.setter((uint64_t)v87);
      *(void *)&long long v89 = qword_26C14EA28;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
      CRRegister.wrappedValue.setter();
      LOBYTE(v89) = 2;
      _s8PaperKit13CRAssetOrDataOWOcTm_0((uint64_t)v29, v74, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v76, 1, 1, v80);
      lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
      swift_retain();
      uint64_t v55 = v75;
      Ref.init<A>(_:_:identity:)();
      uint64_t v56 = v79;
      Ref.id.getter();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v55, v56);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      uint64_t v57 = v82;
      SharedTagged_3.init(_:id:)();
      _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
      uint64_t v58 = v54;
LABEL_8:
      _s8PaperKit0A8DocumentVWOhTm_0(v58, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      uint64_t v62 = v84;
      uint64_t v61 = v85;
      uint64_t v63 = v86;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 32))(v86, v57, v85);
      uint64_t v64 = 0;
      return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v63, v64, 1, v61);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized PaperKitPDFPage.decodePaperPage<A>(pageID:in:assetManager:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v129 = a1;
  uint64_t v124 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v114 = (uint64_t)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v118 = *(void *)(v122 - 8);
  MEMORY[0x270FA5388](v122);
  uint64_t v117 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v116 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  BOOL v113 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v119 = (char *)&v112 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_3<TaggedPaperPage>>>);
  uint64_t v115 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v123 = (char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v132 = (char *)&v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v17 - 8);
  id v133 = (char *)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  unint64_t v139 = (unint64_t)&v112 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v131 = (char *)&v112 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v138 = (char *)&v112 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v130 = (char *)&v112 - v27;
  uint64_t v140 = (void (*)(char *, unint64_t, uint64_t))type metadata accessor for AnnotationImporter.ImportedElement();
  uint64_t v28 = *((void *)v140 - 1);
  MEMORY[0x270FA5388](v140);
  uint64_t v30 = (char *)&v112 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v32 = MEMORY[0x270FA5388](v31);
  id v34 = (char *)&v112 - v33;
  objc_msgSend(v4, sel_boundsForBox_, 0, v32);
  uint64_t v125 = (char *)v4;
  uint64_t v128 = a2;
  uint64_t v126 = a3;
  unint64_t v39 = specialized static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(v4, a2, a3, 1.0, v35, v36, v37, v38);
  uint64_t v40 = *(void *)(v39 + 16);
  uint64_t v121 = v13;
  uint64_t v134 = v22;
  unint64_t v127 = v39;
  if (v40)
  {
    uint64_t v41 = v39 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
    uint64_t v42 = *(void *)(v28 + 72);
    CGFloat v43 = (void (**)(uint64_t, char *, uint64_t))(v22 + 32);
    uint64_t v135 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
    uint64_t v136 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
    uint64_t v137 = v42;
    unint64_t v141 = MEMORY[0x263F8EE78];
    double v44 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?;
    uint64_t v45 = (uint64_t)v133;
    do
    {
      double v46 = v44;
      _s8PaperKit13CRAssetOrDataOWOcTm_0(v41, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
      _s8PaperKit13CRAssetOrDataOWOcTm_0((uint64_t)v34, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*v135)(v45, 1, 1, v21);
        _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
      }
      else
      {
        (*v43)(v45, v30, v21);
        (*v135)(v45, 0, 1, v21);
      }
      uint64_t v47 = v139;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v45, v139, v44);
      _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
      if ((*v136)(v47, 1, v21) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v47, v44);
      }
      else
      {
        double v48 = *v43;
        CGFloat v49 = v130;
        (*v43)((uint64_t)v130, (char *)v47, v21);
        v48((uint64_t)v138, v49, v21);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v50 = v141;
        }
        else {
          unint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v141 + 16) + 1, 1, v141, &demangling cache variable for type metadata for _ContiguousArrayStorage<SharedTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
        }
        unint64_t v52 = *(void *)(v50 + 16);
        unint64_t v51 = *(void *)(v50 + 24);
        if (v52 >= v51 >> 1) {
          unint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1, v50, &demangling cache variable for type metadata for _ContiguousArrayStorage<SharedTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
        }
        *(void *)(v50 + 16) = v52 + 1;
        unint64_t v53 = (*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80);
        unint64_t v141 = v50;
        v48(v50 + v53 + *(void *)(v134 + 72) * v52, v138, v21);
        uint64_t v45 = (uint64_t)v133;
        double v44 = v46;
      }
      v41 += v137;
      --v40;
    }
    while (v40);
  }
  else
  {
    unint64_t v141 = MEMORY[0x263F8EE78];
  }
  uint64_t v54 = *(void *)(v141 + 16);
  if (v54)
  {
    uint64_t v140 = *(void (**)(char *, unint64_t, uint64_t))(v134 + 16);
    unint64_t v55 = v141 + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
    uint64_t v56 = (void (**)(char *, uint64_t))(v134 + 8);
    uint64_t v57 = *(void *)(v134 + 72);
    swift_bridgeObjectRetain();
    id v59 = v131;
    uint64_t v58 = (uint64_t)v132;
    while (1)
    {
      v140(v59, v55, v21);
      SharedTagged_9.unknown.getter();
      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>);
      int v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 48))(v58, 1, v60);
      outlined destroy of StocksKitCurrencyCache.Provider?(v58, &demangling cache variable for type metadata for Ref<UnknownCanvasElement>?);
      (*v56)(v59, v21);
      if (v61 != 1) {
        break;
      }
      v55 += v57;
      if (!--v54)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v84 = v124;
    uint64_t v63 = v125;
    goto LABEL_28;
  }
LABEL_21:
  uint64_t v62 = (void *)MEMORY[0x21054D080](4935760, 0xE300000000000000);
  uint64_t v63 = v125;
  id v64 = objc_msgSend(v125, sel_applicationDataWithName_, v62);

  if (!v64)
  {
    swift_bridgeObjectRelease();
    uint64_t v84 = v124;
LABEL_28:
    uint64_t v70 = v128;
    uint64_t v71 = v129;
LABEL_38:
    specialized static PaperDocumentPage.create<A>(pdfPage:pageID:in:assetManager:importedElements:)(v63, v71, v70, v127, v84);
    return swift_bridgeObjectRelease();
  }
  uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v67 = v66;

  uint64_t v68 = (void *)MEMORY[0x21054D080](0x687361484B5050, 0xE700000000000000);
  id v69 = objc_msgSend(v63, sel_applicationDataWithName_, v68);

  uint64_t v70 = v128;
  uint64_t v71 = v129;
  if (!v69)
  {
    swift_bridgeObjectRelease();
LABEL_32:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for Logger();
    __swift_project_value_buffer(v85, (uint64_t)logger);
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v88 = 0;
      _os_log_impl(&dword_20C2D7000, v86, v87, "Importing PaperKit page skipped due to hash difference.", v88, 2u);
      MEMORY[0x210550270](v88, -1, -1);

      outlined consume of Data._Representation(v65, v67);
    }
    else
    {
      outlined consume of Data._Representation(v65, v67);
    }
    goto LABEL_37;
  }
  uint64_t v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v74 = v73;

  int v75 = Data.paperKitHashVersion.getter(v72, v74);
  if ((v75 & 0x100) != 0)
  {
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v72, v74);
    goto LABEL_32;
  }
  unint64_t v76 = v67;
  uint64_t v77 = v65;
  uint64_t v78 = specialized PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(v75, v141, v70);
  unint64_t v80 = v79;
  swift_bridgeObjectRelease();
  uint64_t v81 = (void (*)(char *, unint64_t, uint64_t))v72;
  char v82 = specialized static Data.== infix(_:_:)(v72, v74, v78, v80);
  outlined consume of Data._Representation(v78, v80);
  if ((v82 & 1) == 0)
  {
    outlined consume of Data._Representation((uint64_t)v81, v74);
    uint64_t v65 = v77;
    unint64_t v67 = v76;
    uint64_t v71 = v129;
    goto LABEL_32;
  }
  uint64_t v140 = v81;
  unint64_t v141 = v74;
  outlined copy of Data._Representation(v77, v76);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_3<TaggedPaperPage>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v83 = v122;
  Capsule<>.init(serializedData:allowedAppFormats:)();
  uint64_t v138 = (char *)v77;
  unint64_t v139 = v76;
  Capsule.Ref.import<A>(_:)();
  long long v90 = v117;
  Capsule<>.root.getter();
  __C::CGRect v91 = v119;
  CRRegister.value.getter();
  (*(void (**)(char *, uint64_t))(v118 + 8))(v90, v83);
  uint64_t v92 = v120;
  long long v93 = (void (*)(void *, void))SharedTagged_3.subscript.modify();
  uint64_t v95 = *(void *)(v94 + 24);
  uint64_t v96 = *(void *)(v94 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v94, v95);
  uint64_t v97 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 104);
  uint64_t v98 = type metadata accessor for PaperDocument(0);
  uint64_t v99 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  v97(v127, v128, v98, v99, v95, v96);
  uint64_t v70 = v128;
  v93(v142, 0);
  CGFloat v100 = (void (*)(void *, void))SharedTagged_3.subscript.modify();
  uint64_t v102 = *(void *)(v101 + 24);
  uint64_t v103 = *(void *)(v101 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v101, v102);
  uint64_t v71 = v129;
  char v104 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 168))(v63, v129, v126, v102, v103);
  v100(v142, 0);
  if ((v104 & 1) == 0)
  {
    outlined consume of Data._Representation((uint64_t)v140, v141);
    outlined consume of Data._Representation((uint64_t)v138, v139);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v91, v92);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v123, v121);
LABEL_37:
    uint64_t v84 = v124;
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();
  uint64_t v105 = v114;
  _s8PaperKit13CRAssetOrDataOWOcTm_0(v71, v114, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  uint64_t v106 = type metadata accessor for PDFPageID();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56))(v105, 0, 1, v106);
  uint64_t v107 = type metadata accessor for PageId(0);
  uint64_t v108 = v105 + *(int *)(v107 + 20);
  uint64_t v109 = v116;
  (*(void (**)(char *, char *, uint64_t))(v116 + 16))(v113, v91, v92);
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  WeakTagged_3.init(_:)();
  uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56))(v108, 0, 1, v110);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56))(v105, 0, 1, v107);
  uint64_t v111 = (uint64_t)&v63[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  swift_beginAccess();
  outlined assign with take of Date?(v105, v111, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  swift_endAccess();
  outlined consume of Data._Representation((uint64_t)v140, v141);
  outlined consume of Data._Representation((uint64_t)v138, v139);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v123, v121);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v109 + 32))(v124, v91, v92);
}

id specialized PaperDocument.update<A>(_:in:otherDocuments:use:)(char *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  unint64_t v306 = a4;
  uint64_t v354 = a3;
  uint64_t v327 = a2;
  v353 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v6 - 8);
  v340 = (void (***)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v274 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v355 = type metadata accessor for PageId(0);
  uint64_t v291 = *(void *)(v355 - 8);
  MEMORY[0x270FA5388](v355);
  v339 = (char *)&v274 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v326 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
  MEMORY[0x270FA5388](v326);
  v325 = (uint64_t *)((char *)&v274 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v324 = (uint64_t)&v274 - v11;
  uint64_t v285 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
  MEMORY[0x270FA5388](v285);
  v284 = (char *)&v274 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  v351 = (char *)&v274 - v14;
  uint64_t v15 = type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  uint64_t v345 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  v338 = (uint64_t *)((char *)&v274 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v17);
  v337 = (void (*)(uint64_t, uint64_t))((char *)&v274 - v18);
  MEMORY[0x270FA5388](v19);
  uint64_t v336 = (uint64_t)&v274 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v274 - v22;
  MEMORY[0x270FA5388](v24);
  uint64_t v310 = (uint64_t)&v274 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v290 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  v335 = (char *)&v274 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v304 = (char *)&v274 - v29;
  uint64_t v309 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?));
  MEMORY[0x270FA5388](v309);
  uint64_t v321 = (uint64_t)&v274 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for PDFPageID();
  uint64_t v289 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  unint64_t v308 = (Swift::UInt *)((char *)&v274 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v33);
  v292 = (uint64_t *)((char *)&v274 - v34);
  MEMORY[0x270FA5388](v35);
  uint64_t v318 = (Swift::UInt *)((char *)&v274 - v36);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
  MEMORY[0x270FA5388](v37 - 8);
  uint64_t v281 = (char *)&v274 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v280 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>);
  MEMORY[0x270FA5388](v280);
  uint64_t v282 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v274 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v40 - 8);
  unint64_t v283 = (char *)&v274 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v299 = type metadata accessor for CRAsset();
  uint64_t v286 = *(void *)(v299 - 8);
  MEMORY[0x270FA5388](v299);
  PaperKit::Font v275 = (char *)&v274 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v43);
  uint64_t v297 = (char *)&v274 - v44;
  MEMORY[0x270FA5388](v45);
  uint64_t v296 = (uint64_t)&v274 - v46;
  MEMORY[0x270FA5388](v47);
  uint64_t v276 = (char *)&v274 - v48;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>);
  uint64_t v293 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  v323 = (char *)&v274 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v51);
  uint64_t v294 = (char *)&v274 - v52;
  uint64_t v332 = type metadata accessor for CRKeyPath();
  unint64_t v287 = *(void (***)(uint64_t, uint64_t))(v332 - 8);
  MEMORY[0x270FA5388](v332);
  v319 = (char *)&v274 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v54);
  v295 = (char *)&v274 - v55;
  MEMORY[0x270FA5388](v56);
  v341 = (void (**)(uint64_t, uint64_t))((char *)&v274 - v57);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v58 - 8);
  uint64_t v60 = (char *)&v274 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v61);
  v346 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)&v274 - v62);
  MEMORY[0x270FA5388](v63);
  v305 = (char *)&v274 - v64;
  MEMORY[0x270FA5388](v65);
  v302 = (char *)&v274 - v66;
  MEMORY[0x270FA5388](v67);
  v301 = (char *)&v274 - v68;
  MEMORY[0x270FA5388](v69);
  v342 = (void (**)(char *, char *, uint64_t))((char *)&v274 - v70);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v71 - 8);
  uint64_t v307 = (char *)&v274 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v73);
  uint64_t v303 = (uint64_t)&v274 - v74;
  MEMORY[0x270FA5388](v75);
  v298 = (uint64_t *)((char *)&v274 - v76);
  MEMORY[0x270FA5388](v77);
  uint64_t v317 = (uint64_t)&v274 - v78;
  MEMORY[0x270FA5388](v79);
  uint64_t v320 = (uint64_t)&v274 - v80;
  MEMORY[0x270FA5388](v81);
  v347 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v274 - v82);
  MEMORY[0x270FA5388](v83);
  v348 = (void (*)(char *, char *, uint64_t))((char *)&v274 - v84);
  v343 = (void (**)(void, void, void, void))__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v328 = (uint64_t)*(v343 - 1);
  MEMORY[0x270FA5388](v343);
  uint64_t v316 = (char *)&v274 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v86);
  v349 = (char *)&v274 - v87;
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v88 - 8);
  v344 = (char *)&v274 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v330 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  uint64_t v279 = *(void *)(v330 - 8);
  MEMORY[0x270FA5388](v330);
  v329 = (char *)&v274 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v92 = *(void *)(v91 - 8);
  double v93 = MEMORY[0x270FA5388](v91);
  unint64_t v95 = (unint64_t)&v274 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = *(void (**)(unint64_t, void (**)(uint64_t, uint64_t), uint64_t, double))(v92 + 16);
  uint64_t v300 = v5;
  v96(v95, v5, v91, v93);
  uint64_t v356 = v327;
  uint64_t v352 = v15;
  uint64_t v97 = 0;
  uint64_t v98 = CROrderedSet.map<A>(_:)();
  uint64_t v99 = *(void (**)(unint64_t, uint64_t))(v92 + 8);
  v288 = (void (**)(char *, char *, uint64_t))v91;
  v99(v95, v91);
  uint64_t v362 = v354;
  swift_bridgeObjectRetain();
  uint64_t v100 = (uint64_t)objc_msgSend(v353, sel_pageCount);
  if (v100 < 0)
  {
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  unint64_t v95 = v100;
  v322 = v23;
  uint64_t v350 = v26;
  uint64_t v354 = v31;
  uint64_t v331 = v49;
  uint64_t v278 = v98;
  if (!v100)
  {
    unint64_t v103 = MEMORY[0x263F8EE78];
    uint64_t v23 = v353;
    uint64_t v122 = v349;
LABEL_26:
    unint64_t v311 = v103;
    unint64_t v315 = v97;
    uint64_t v361 = MEMORY[0x263F8EE88];
    CROrderedSet.makeIterator()();
    v339 = &v23[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
    swift_beginAccess();
    uint64_t v131 = v344;
    CROrderedSet.Iterator.next()();
    uint64_t v132 = v328;
    id v133 = *(char **)(v328 + 48);
    uint64_t v134 = v343;
    uint64_t v336 = v328 + 48;
    v335 = v133;
    if (((unsigned int (*)(char *, uint64_t, void (**)(void, void, void, void)))v133)(v131, 1, v343) == 1)
    {
      uint64_t v135 = (uint64_t)v351;
LABEL_28:
      (*(void (**)(char *, uint64_t))(v279 + 8))(v329, v330);
      uint64_t v357 = v278;
      unint64_t v360 = v311;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PaperDocument.PDFPageAndPaperPage]);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [PaperDocument.PDFPageAndPaperPage] and conformance [A], &demangling cache variable for type metadata for [PaperDocument.PDFPageAndPaperPage]);
      lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument.PDFPageAndPaperPage and conformance PaperDocument.PDFPageAndPaperPage, (void (*)(uint64_t))type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      uint64_t v136 = v294;
      BidirectionalCollection<>.difference<A>(from:)();
      swift_bridgeObjectRelease();
      uint64_t v137 = (char *)(v293 + 16);
      uint64_t v138 = *(void (**)(char *, char *, uint64_t))(v293 + 16);
      uint64_t v139 = (uint64_t)v281;
      uint64_t v140 = v331;
      v138(v281, v136, v331);
      unint64_t v141 = v282;
      v349 = v137;
      v348 = v138;
      v138((char *)v282, (char *)v139, v140);
      uint64_t v142 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v141
                                                                      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>)
                                                                               + 44));
      *uint64_t v142 = closure #3 in PaperDocument.update<A>(_:in:otherDocuments:use:);
      v142[1] = 0;
      uint64_t v143 = (BOOL (**)(uint64_t))((char *)v141
                                           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>)
                                                    + 36));
      *uint64_t v143 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
      v143[1] = 0;
      uint64_t v144 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v141 + *(int *)(v280 + 44));
      char *v144 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
      v144[1] = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?(v139, &demangling cache variable for type metadata for LazySequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
      uint64_t v145 = v23;
      uint64_t v146 = v283;
      v353 = v145;
      specialized Sequence.first(where:)(v141, &v362, v145, v283);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v141, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>);
      swift_bridgeObjectRelease();
      uint64_t v147 = v286;
      uint64_t v148 = v299;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v286 + 48))(v146, 1, v299) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v146, &demangling cache variable for type metadata for CRAsset?);
        uint64_t v149 = (uint64_t)v307;
LABEL_86:
        uint64_t v230 = (uint64_t)v284;
        uint64_t v231 = v331;
        v348(v284, v294, v331);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CollectionDifference<PaperDocument.PDFPageAndPaperPage> and conformance CollectionDifference<A>, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>);
        dispatch thunk of Collection.startIndex.getter();
        uint64_t v232 = v285;
        *(void *)(v230 + *(int *)(v285 + 36)) = v357;
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v230, v135, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
        uint64_t v233 = (uint64_t *)(v135 + *(int *)(v232 + 36));
        uint64_t v234 = *v233;
        dispatch thunk of Collection.endIndex.getter();
        BOOL v235 = v234 == v357;
        uint64_t v236 = v308;
        if (v235)
        {
LABEL_88:
          outlined destroy of StocksKitCurrencyCache.Provider?(v135, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
          (*(void (**)(char *, uint64_t))(v293 + 8))(v294, v231);
          uint64_t v237 = v361;
          swift_bridgeObjectRelease();
          return (id)v237;
        }
        uint64_t v238 = (void (**)(char *, uint64_t))(v293 + 8);
        v347 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v289 + 48);
        v346 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v289 + 56);
        uint64_t v345 = v290 + 16;
        v344 = (char *)(v290 + 56);
        v343 = (void (**)(void, void, void, void))(v291 + 56);
        v342 = (void (**)(char *, char *, uint64_t))(v147 + 16);
        v341 = (void (**)(uint64_t, uint64_t))(v147 + 8);
        while (1)
        {
          uint64_t v240 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
          uint64_t v241 = v324;
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v242, v324, &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
          v240(&v357, 0);
          uint64_t v243 = v323;
          v348(v323, (char *)v135, v231);
          dispatch thunk of Collection.formIndex(after:)();
          (*v238)(v243, v231);
          v244 = v325;
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v241, (uint64_t)v325, &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
          EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
          uint64_t v246 = *v244;
          uint64_t v247 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: PaperDocument.PDFPageAndPaperPage, associatedWith: Int?));
          uint64_t v248 = (uint64_t)v244 + *(int *)(v247 + 48);
          if (EnumCaseMultiPayload != 1) {
            break;
          }
          objc_msgSend(v353, sel_removePageAtIndex_, v246);
LABEL_90:
          _s8PaperKit0A8DocumentVWOhTm_0(v248, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
          uint64_t v239 = *v233;
          uint64_t v135 = (uint64_t)v351;
          uint64_t v231 = v331;
          dispatch thunk of Collection.endIndex.getter();
          if (v239 == v357) {
            goto LABEL_88;
          }
        }
        uint64_t v249 = (uint64_t)v244 + *(int *)(v247 + 48);
        uint64_t v250 = (uint64_t)v322;
        outlined init with take of Image(v249, (uint64_t)v322, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v250, v149, &demangling cache variable for type metadata for PDFPageID?);
        if ((*v347)(v149, 1, v354) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v149, &demangling cache variable for type metadata for PDFPageID?);
          unint64_t v251 = v306;
          if (v306 == 0x8000000000000000)
          {
            outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
            outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
            type metadata accessor for PaperKitPDFPage(0);
            if (one-time initialization token for blankPageImage != -1) {
              swift_once();
            }
            id result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithImage_, static PaperKitPDFPage.blankPageImage);
            if (!result) {
              goto LABEL_122;
            }
          }
          else
          {
            outlined copy of PaperDocument.PDFDocumentUse(v306);
            outlined consume of PaperDocument.PDFDocumentUse(v251);
            outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
            id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFPage(0)), sel_init);
          }
          uint64_t v255 = one-time initialization token for defaultPageBounds;
          uint64_t v254 = (char *)result;
          if (v255 != -1) {
            swift_once();
          }
          objc_msgSend(v254, sel_setBounds_forBox_, 0, *(double *)&static UIConstants.defaultPageBounds, *(double *)algn_2676E9718, xmmword_2676E9720);
          uint64_t v256 = (uint64_t)v305;
          (*v346)(v305, 1, 1, v354);
          uint64_t v257 = v355;
          uint64_t v258 = v256 + *(int *)(v355 + 20);
          uint64_t v248 = (uint64_t)v322;
          uint64_t v259 = v350;
          (*(void (**)(uint64_t, char *, uint64_t))v345)(v258, &v322[*(int *)(v352 + 20)], v350);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))v344)(v258, 0, 1, v259);
          (*v343)(v256, 0, 1, v257);
          uint64_t v260 = (uint64_t)&v254[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
          swift_beginAccess();
          outlined assign with take of Date?(v256, v260, (uint64_t *)&demangling cache variable for type metadata for PageId?);
          swift_endAccess();

          uint64_t v236 = v308;
        }
        else
        {
          outlined init with take of Image(v149, (uint64_t)v236, (uint64_t (*)(void))type metadata accessor for PDFPageID);
          uint64_t v252 = v250 + *(int *)(v352 + 20);
          uint64_t v253 = specialized closure #2 in PaperDocument.update<A>(_:in:otherDocuments:use:)(v236, v252, v353, &v362);
          if (v253)
          {
            uint64_t v254 = v253;
            _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v236, (uint64_t (*)(void))type metadata accessor for PDFPageID);
            uint64_t v248 = (uint64_t)v322;
LABEL_114:
            objc_msgSend(v353, sel_insertPage_atIndex_, v254, v246);

            goto LABEL_90;
          }
          unint64_t v261 = v306;
          if (v306 == 0x8000000000000000)
          {
            outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
            outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
            type metadata accessor for PaperKitPDFPage(0);
            if (one-time initialization token for blankPageImage != -1) {
              swift_once();
            }
            id result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithImage_, static PaperKitPDFPage.blankPageImage);
            if (!result) {
              goto LABEL_123;
            }
          }
          else
          {
            outlined copy of PaperDocument.PDFDocumentUse(v306);
            outlined consume of PaperDocument.PDFDocumentUse(v261);
            outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
            id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFPage(0)), sel_init);
          }
          uint64_t v262 = one-time initialization token for defaultPageBounds;
          uint64_t v254 = (char *)result;
          if (v262 != -1) {
            swift_once();
          }
          objc_msgSend(v254, sel_setBounds_forBox_, 0, *(double *)&static UIConstants.defaultPageBounds, *(double *)algn_2676E9718, xmmword_2676E9720);
          uint64_t v263 = (uint64_t)v305;
          uint64_t v264 = v354;
          (*v346)(v305, 1, 1, v354);
          uint64_t v265 = v355;
          uint64_t v266 = v263 + *(int *)(v355 + 20);
          uint64_t v267 = v252;
          uint64_t v268 = v350;
          (*(void (**)(uint64_t, uint64_t, uint64_t))v345)(v266, v267, v350);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))v344)(v266, 0, 1, v268);
          (*v343)(v263, 0, 1, v265);
          uint64_t v269 = (uint64_t)&v254[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
          swift_beginAccess();
          outlined assign with take of Date?(v263, v269, (uint64_t *)&demangling cache variable for type metadata for PageId?);
          swift_endAccess();

          uint64_t v270 = *(int *)(v264 + 20);
          uint64_t v236 = v308;
          v271 = v297;
          uint64_t v272 = v299;
          (*v342)(v297, (char *)v308 + v270, v299);
          uint64_t v273 = v296;
          specialized Set._Variant.insert(_:)(v296, v271);
          (*v341)(v273, v272);
          _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v236, (uint64_t (*)(void))type metadata accessor for PDFPageID);
          uint64_t v248 = (uint64_t)v322;
        }
        uint64_t v149 = (uint64_t)v307;
        goto LABEL_114;
      }
      uint64_t v220 = (uint64_t)v276;
      (*(void (**)(char *, char *, uint64_t))(v147 + 32))(v276, v146, v148);
      uint64_t v221 = (uint64_t)v275;
      (*(void (**)(char *, uint64_t, uint64_t))(v147 + 16))(v275, v220, v148);
      swift_beginAccess();
      uint64_t v222 = v362;
      uint64_t v149 = (uint64_t)v307;
      if (*(void *)(v362 + 16) && (unint64_t v223 = specialized __RawDictionaryStorage.find<A>(_:)(v220), (v224 & 1) != 0))
      {
        BOOL v225 = *(void **)(*(void *)(v222 + 56) + 8 * v223);
        swift_endAccess();
        objc_msgSend(v225, sel_copy);
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        type metadata accessor for PaperKitPDFDocument();
        if (swift_dynamicCast())
        {
          uint64_t v226 = v360;
          swift_beginAccess();
          if (v226)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v360 = v362;
            uint64_t v362 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v226, v221, isUniquelyReferenced_nonNull_native);
            uint64_t v362 = v360;
            swift_bridgeObjectRelease();
            uint64_t v228 = *(void (**)(uint64_t, uint64_t))(v147 + 8);
            v228(v221, v148);
LABEL_85:
            swift_endAccess();
            v228(v220, v148);
            goto LABEL_86;
          }
LABEL_84:
          v229 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v221);
          uint64_t v228 = *(void (**)(uint64_t, uint64_t))(v147 + 8);
          v228(v221, v148);

          goto LABEL_85;
        }
      }
      else
      {
        swift_endAccess();
      }
      swift_beginAccess();
      goto LABEL_84;
    }
    uint64_t v151 = *(char **)(v132 + 32);
    uint64_t v150 = v132 + 32;
    v334 = v151;
    v346 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v291 + 48);
    v340 = (void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v289 + 56);
    uint64_t v277 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v290 + 56);
    v333 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v291 + 56);
    v338 = (uint64_t *)(v287 + 1);
    unint64_t v152 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v289 + 48);
    double v313 = (void (**)(char *, uint64_t))(v150 - 16);
    uint64_t v300 = (void (**)(uint64_t, uint64_t))(v290 + 8);
    v288 = (void (**)(char *, char *, uint64_t))(v286 + 16);
    unint64_t v287 = (void (**)(uint64_t, uint64_t))(v286 + 8);
    v319 = (char *)(v150 - 24);
    uint64_t v153 = (uint64_t)v341;
    uint64_t v97 = (char *)v342;
    uint64_t v60 = (char *)v348;
    double v314 = (void (**)(uint64_t, char *, uint64_t))(v289 + 48);
    uint64_t v328 = v150;
    ((void (*)(char *, char *, void (**)(void, void, void, void)))v151)(v122, v131, v134);
    while (1)
    {
      MEMORY[0x21054BD50](v134);
      uint64_t v156 = *(void *)v339;
      if (!*(void *)(*(void *)v339 + 16)) {
        goto LABEL_43;
      }
      swift_bridgeObjectRetain();
      unint64_t v157 = specialized __RawDictionaryStorage.find<A>(_:)(v153);
      if ((v158 & 1) == 0) {
        break;
      }
      uint64_t v159 = *(void *)(*(void *)(v156 + 56) + 8 * v157);
      uint64_t v160 = swift_bridgeObjectRelease();
      if (one-time initialization token for lock != -1) {
        uint64_t v160 = swift_once();
      }
      MEMORY[0x270FA5388](v160);
      *(&v274 - 2) = (uint64_t)v23;
      *(&v274 - 1) = v159;
      MEMORY[0x270FA5388](v161);
      *(&v274 - 2) = (uint64_t)closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
      *(&v274 - 1) = v162;
      uint64_t v164 = v163 + 4;
      os_unfair_lock_lock(v163 + 4);
      uint64_t v165 = (uint64_t)v301;
      id v166 = v315;
      closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply();
      unint64_t v315 = v166;
      os_unfair_lock_unlock(v164);
      uint64_t v167 = *v346;
      uint64_t v168 = v355;
      int v169 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))*v346)(v165, 1, v355);
      uint64_t v170 = (uint64_t)v302;
      if (v169 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v165, (uint64_t *)&demangling cache variable for type metadata for PageId?);
        id result = objc_msgSend(v23, sel_pageAtIndex_, v159);
        uint64_t v60 = (char *)v348;
        if (!result) {
          goto LABEL_121;
        }
        id v171 = result;
        type metadata accessor for PaperKitPDFPage(0);
        uint64_t v172 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
        swift_beginAccess();
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v172, v170, (uint64_t *)&demangling cache variable for type metadata for PageId?);

        uint64_t v168 = v355;
        int v173 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v167)(v170, 1, v355);
        unint64_t v152 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v314;
        if (v173 == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v170, (uint64_t *)&demangling cache variable for type metadata for PageId?);
          uint64_t v97 = (char *)v342;
          ((void (*)(void (**)(char *, char *, uint64_t), uint64_t, uint64_t, uint64_t))*v340)(v342, 1, 1, v354);
          (*v277)(&v97[*(int *)(v168 + 20)], 1, 1, v350);
        }
        else
        {
          uint64_t v193 = v170;
          uint64_t v97 = (char *)v342;
          outlined init with take of Image(v193, (uint64_t)v342, type metadata accessor for PageId);
        }
        uint64_t v174 = 0;
        uint64_t v153 = (uint64_t)v341;
        uint64_t v134 = v343;
      }
      else
      {
        uint64_t v97 = (char *)v342;
        outlined init with take of Image(v165, (uint64_t)v342, type metadata accessor for PageId);
        uint64_t v174 = 0;
        uint64_t v153 = (uint64_t)v341;
        uint64_t v60 = (char *)v348;
        uint64_t v134 = v343;
        unint64_t v152 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v314;
      }
LABEL_44:
      (*v333)(v97, v174, 1, v168);
      v337 = (void (*)(uint64_t, uint64_t))*v338;
      v337(v153, v332);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))*v346)(v97, 1, v168) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v97, (uint64_t *)&demangling cache variable for type metadata for PageId?);
        uint64_t v175 = v354;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v340)(v60, 1, 1, v354);
      }
      else
      {
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v97, (uint64_t)v60, &demangling cache variable for type metadata for PDFPageID?);
        _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v97, type metadata accessor for PageId);
        uint64_t v175 = v354;
      }
      type metadata accessor for PaperDocument(0);
      lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      SharedTagged_3.subscript.getter();
      uint64_t v176 = v122;
      uint64_t v177 = v134;
      uint64_t v178 = v358;
      uint64_t v179 = v359;
      __swift_project_boxed_opaque_existential_1(&v357, v358);
      uint64_t v180 = v347;
      (*(void (**)(uint64_t, uint64_t))(v179 + 88))(v178, v179);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v357);
      uint64_t v181 = v320;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v180, v320, &demangling cache variable for type metadata for PDFPageID?);
      unint64_t v182 = *v152;
      if ((*v152)(v181, 1, v175) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v180, &demangling cache variable for type metadata for PDFPageID?);
        uint64_t v60 = (char *)v348;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v348, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(char *, void (**)(void, void, void, void)))v319)(v176, v177);
        outlined destroy of StocksKitCurrencyCache.Provider?(v181, &demangling cache variable for type metadata for PDFPageID?);
        uint64_t v135 = (uint64_t)v351;
        uint64_t v97 = (char *)v342;
        uint64_t v134 = v177;
        uint64_t v122 = v176;
        id v154 = v344;
        uint64_t v23 = v353;
        goto LABEL_32;
      }
      char v183 = v318;
      outlined init with take of Image(v181, (uint64_t)v318, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      uint64_t v184 = v317;
      _s8PaperKit13CRAssetOrDataOWOcTm_0((uint64_t)v183, v317, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      double v312 = *v340;
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v312)(v184, 0, 1, v175);
      uint64_t v185 = v321;
      uint64_t v186 = v321 + *(int *)(v309 + 48);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v184, v321, &demangling cache variable for type metadata for PDFPageID?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v348, v186, &demangling cache variable for type metadata for PDFPageID?);
      if (v182(v185, 1, v175) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v184, &demangling cache variable for type metadata for PDFPageID?);
        int v187 = v182(v186, 1, v175);
        uint64_t v188 = &demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
        uint64_t v122 = v349;
        id v154 = v344;
        uint64_t v23 = v353;
        if (v187 == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v321, &demangling cache variable for type metadata for PDFPageID?);
LABEL_51:
          _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v183, (uint64_t (*)(void))type metadata accessor for PDFPageID);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v347, &demangling cache variable for type metadata for PDFPageID?);
          uint64_t v60 = (char *)v348;
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v348, &demangling cache variable for type metadata for PDFPageID?);
          uint64_t v134 = v343;
          (*(void (**)(char *, void (**)(void, void, void, void)))v319)(v122, v343);
          uint64_t v135 = (uint64_t)v351;
          uint64_t v97 = (char *)v342;
          goto LABEL_32;
        }
        goto LABEL_61;
      }
      uint64_t v189 = v298;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v185, (uint64_t)v298, &demangling cache variable for type metadata for PDFPageID?);
      int v190 = v182(v186, 1, v175);
      uint64_t v188 = &demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
      uint64_t v122 = v349;
      id v154 = v344;
      uint64_t v23 = v353;
      if (v190 == 1) {
        goto LABEL_60;
      }
      id v191 = v292;
      outlined init with take of Image(v186, (uint64_t)v292, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      if (*v189 != *v191)
      {
        _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v191, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        uint64_t v188 = &demangling cache variable for type metadata for PDFPageID?;
LABEL_60:
        outlined destroy of StocksKitCurrencyCache.Provider?(v317, &demangling cache variable for type metadata for PDFPageID?);
        _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v189, (uint64_t (*)(void))type metadata accessor for PDFPageID);
LABEL_61:
        outlined destroy of StocksKitCurrencyCache.Provider?(v321, v188);
        goto LABEL_62;
      }
      char v192 = static CRAsset.== infix(_:_:)();
      _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v191, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?(v317, &demangling cache variable for type metadata for PDFPageID?);
      _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v189, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?(v321, &demangling cache variable for type metadata for PDFPageID?);
      unint64_t v152 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v314;
      if (v192) {
        goto LABEL_51;
      }
LABEL_62:
      uint64_t v194 = *v313;
      uint64_t v195 = v122;
      CGAffineTransform v196 = v122;
      uint64_t v197 = v343;
      ((void (*)(char *, char *, void (**)(void, void, void, void)))*v313)(v316, v195, v343);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      uint64_t v198 = (uint64_t)v304;
      WeakTagged_3.init(_:)();
      uint64_t v199 = specialized closure #2 in PaperDocument.update<A>(_:in:otherDocuments:use:)(v183, v198, v23, &v362);
      (*v300)(v198, v350);
      if (!v199)
      {
        char v205 = (char *)v183 + *(int *)(v354 + 20);
        CGRect v206 = v194;
        CGRect v207 = v297;
        uint64_t v208 = v299;
        (*v288)(v297, v205, v299);
        uint64_t v209 = v296;
        CGRect v210 = v207;
        uint64_t v194 = v206;
        specialized Set._Variant.insert(_:)(v296, v210);
        uint64_t v211 = v209;
        uint64_t v23 = v353;
        (*v287)(v211, v208);
        goto LABEL_70;
      }
      uint64_t v200 = (uint64_t)v295;
      MEMORY[0x21054BD50](v197);
      uint64_t v201 = *(void *)v339;
      if (!*(void *)(*(void *)v339 + 16)) {
        goto LABEL_68;
      }
      swift_bridgeObjectRetain();
      unint64_t v202 = specialized __RawDictionaryStorage.find<A>(_:)(v200);
      if ((v203 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_68:
        v337(v200, v332);
        goto LABEL_69;
      }
      uint64_t v204 = *(void *)(*(void *)(v201 + 56) + 8 * v202);
      swift_bridgeObjectRelease();
      v337(v200, v332);
      objc_msgSend(v23, sel_removePageAtIndex_, v204);
      objc_msgSend(v23, sel_insertPage_atIndex_, v199, v204);
LABEL_69:

LABEL_70:
      uint64_t v60 = (char *)v348;
      uint64_t v212 = v310;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v348, v310, &demangling cache variable for type metadata for PDFPageID?);
      double v213 = v196;
      double v214 = v343;
      ((void (*)(char *, char *, void (**)(void, void, void, void)))v194)(v316, v196, v343);
      WeakTagged_3.init(_:)();
      uint64_t v215 = v311;
      swift_bridgeObjectRetain();
      unint64_t v95 = specialized Collection<>.firstIndex(of:)(v212, v215);
      char v217 = v216;
      swift_bridgeObjectRelease();
      uint64_t v135 = (uint64_t)v351;
      if (v217)
      {
        _s8PaperKit0A8DocumentVWOhTm_0(v212, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
        _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v318, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v347, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v60, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(char *, void (**)(void, void, void, void)))v319)(v213, v214);
        uint64_t v97 = (char *)v342;
        uint64_t v134 = v214;
        uint64_t v122 = v213;
        id v154 = v344;
        unint64_t v152 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v314;
      }
      else
      {
        uint64_t v218 = (uint64_t)v318;
        uint64_t v219 = v303;
        _s8PaperKit13CRAssetOrDataOWOcTm_0((uint64_t)v318, v303, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v312)(v219, 0, 1, v354);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v311 = specialized _ArrayBuffer._consumeAndCreateNew()(v311);
        }
        uint64_t v134 = v343;
        uint64_t v122 = v349;
        id v154 = v344;
        unint64_t v152 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v314;
        uint64_t v97 = (char *)v342;
        if ((v95 & 0x8000000000000000) != 0) {
          goto LABEL_116;
        }
        if (v95 >= *(void *)(v311 + 16)) {
          goto LABEL_117;
        }
        outlined assign with take of Date?(v303, v311+ ((*(unsigned __int8 *)(v345 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v345 + 80))+ *(void *)(v345 + 72) * v95, &demangling cache variable for type metadata for PDFPageID?);
        _s8PaperKit0A8DocumentVWOhTm_0(v310, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
        _s8PaperKit0A8DocumentVWOhTm_0(v218, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v347, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v60, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(char *, void (**)(void, void, void, void)))v319)(v122, v134);
      }
LABEL_32:
      CROrderedSet.Iterator.next()();
      int v155 = ((uint64_t (*)(char *, uint64_t, void (**)(void, void, void, void)))v335)(v154, 1, v134);
      uint64_t v153 = (uint64_t)v341;
      if (v155 == 1) {
        goto LABEL_28;
      }
      ((void (*)(char *, char *, void (**)(void, void, void, void)))v334)(v122, v154, v134);
    }
    swift_bridgeObjectRelease();
LABEL_43:
    uint64_t v174 = 1;
    uint64_t v168 = v355;
    goto LABEL_44;
  }
  uint64_t v23 = v353;
  if (one-time initialization token for lock != -1) {
LABEL_119:
  }
    uint64_t v100 = swift_once();
  uint64_t v101 = 0;
  uint64_t v102 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v291 + 48);
  double v312 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v289 + 56);
  unint64_t v311 = v290 + 56;
  v333 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v290 + 48);
  unint64_t v315 = (char *)(v290 + 32);
  double v314 = (void (**)(uint64_t, char *, uint64_t))(v290 + 16);
  unint64_t v103 = MEMORY[0x263F8EE78];
  double v313 = (void (**)(char *, uint64_t))(v290 + 8);
  uint64_t v104 = (uint64_t)v346;
  v334 = (char *)v95;
  while (1)
  {
    if ((char *)v95 == v101)
    {
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    MEMORY[0x270FA5388](v100);
    *(&v274 - 2) = (uint64_t)v23;
    *(&v274 - 1) = (uint64_t)v101;
    MEMORY[0x270FA5388](v105);
    *(&v274 - 2) = (uint64_t)partial apply for closure #1 in PaperKitPDFDocument.subscript.getter;
    *(&v274 - 1) = v106;
    uint64_t v107 = v23;
    uint64_t v109 = v108 + 4;
    os_unfair_lock_lock(v108 + 4);
    _s2os21OSAllocatedUnfairLockVAAytRszlE04withD0yqd__qd__yYbKXEKs8SendableRd__lFqd__ytz_tYbKXEfU_8PaperKit6PageIdVSg_Tg5TA_0();
    os_unfair_lock_unlock(v109);
    uint64_t v110 = *v102;
    uint64_t v111 = v355;
    if ((*v102)(v104, 1, v355) != 1)
    {
      uint64_t v118 = v104;
      uint64_t v116 = (uint64_t)v339;
LABEL_14:
      outlined init with take of Image(v118, v116, type metadata accessor for PageId);
      uint64_t v117 = v350;
      goto LABEL_15;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v104, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    id result = objc_msgSend(v107, sel_pageAtIndex_, v101);
    if (!result) {
      break;
    }
    BOOL v113 = result;
    type metadata accessor for PaperKitPDFPage(0);
    uint64_t v114 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
    swift_beginAccess();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v114, (uint64_t)v60, (uint64_t *)&demangling cache variable for type metadata for PageId?);

    uint64_t v111 = v355;
    unsigned int v115 = v110((uint64_t)v60, 1, v355);
    uint64_t v116 = (uint64_t)v339;
    if (v115 != 1)
    {
      uint64_t v118 = (uint64_t)v60;
      goto LABEL_14;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v60, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    (*v312)(v116, 1, 1, v354);
    uint64_t v117 = v350;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v311)(v116 + *(int *)(v111 + 20), 1, 1, v350);
LABEL_15:
    uint64_t v119 = v60;
    uint64_t v120 = v116 + *(int *)(v111 + 20);
    uint64_t v121 = v340;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v120, (uint64_t)v340, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    if (((unsigned int (*)(void (***)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t))*v333)(v121, 1, v117) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v121, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v116, (uint64_t)v338, &demangling cache variable for type metadata for PDFPageID?);
      LOBYTE(v357) = 2;
      static CRKeyPath.unique.getter();
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      WeakTagged_3.init(_:id:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v103 + 16) + 1, 1, v103, &demangling cache variable for type metadata for _ContiguousArrayStorage<PaperDocument.PDFPageAndPaperPage>, type metadata accessor for PaperDocument.PDFPageAndPaperPage, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      }
      uint64_t v122 = v349;
      unint64_t v124 = *(void *)(v103 + 16);
      unint64_t v123 = *(void *)(v103 + 24);
      uint64_t v125 = v103;
      if (v124 >= v123 >> 1) {
        uint64_t v125 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v123 > 1, v124 + 1, 1, v103, &demangling cache variable for type metadata for _ContiguousArrayStorage<PaperDocument.PDFPageAndPaperPage>, type metadata accessor for PaperDocument.PDFPageAndPaperPage, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      }
      uint64_t v104 = (uint64_t)v346;
      unint64_t v103 = v125;
      *(void *)(v125 + 16) = v124 + 1;
      outlined init with take of Image((uint64_t)v338, v125+ ((*(unsigned __int8 *)(v345 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v345 + 80))+ *(void *)(v345 + 72) * v124, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
    }
    else
    {
      uint64_t v126 = v335;
      (*(void (**)(char *, void (***)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))v315)(v335, v121, v117);
      uint64_t v127 = v336;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v116, v336, &demangling cache variable for type metadata for PDFPageID?);
      (*v314)(v127 + *(int *)(v352 + 20), v126, v117);
      _s8PaperKit13CRAssetOrDataOWOcTm_0(v127, (uint64_t)v337, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v103 + 16) + 1, 1, v103, &demangling cache variable for type metadata for _ContiguousArrayStorage<PaperDocument.PDFPageAndPaperPage>, type metadata accessor for PaperDocument.PDFPageAndPaperPage, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      }
      unint64_t v129 = *(void *)(v103 + 16);
      unint64_t v128 = *(void *)(v103 + 24);
      uint64_t v130 = v103;
      uint64_t v60 = v119;
      if (v129 >= v128 >> 1) {
        uint64_t v130 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v128 > 1, v129 + 1, 1, v103, &demangling cache variable for type metadata for _ContiguousArrayStorage<PaperDocument.PDFPageAndPaperPage>, type metadata accessor for PaperDocument.PDFPageAndPaperPage, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      }
      uint64_t v104 = (uint64_t)v346;
      unint64_t v103 = v130;
      *(void *)(v130 + 16) = v129 + 1;
      outlined init with take of Image((uint64_t)v337, v130+ ((*(unsigned __int8 *)(v345 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v345 + 80))+ *(void *)(v345 + 72) * v129, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      _s8PaperKit0A8DocumentVWOhTm_0(v336, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      (*v313)(v335, v117);
      uint64_t v122 = v349;
    }
    ++v101;
    uint64_t v100 = _s8PaperKit0A8DocumentVWOhTm_0(v116, type metadata accessor for PageId);
    unint64_t v95 = (unint64_t)v334;
    uint64_t v23 = v353;
    if (v334 == v101) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in PaperDocument.update<A>(_:in:otherDocuments:use:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperDocument(0);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  SharedTagged_3.subscript.getter();
  uint64_t v6 = v11;
  uint64_t v7 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 88))(v6, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  WeakTagged_3.init(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

id specialized CanvasElementPDFAnnotation.decodePaperKit<A, B>(type:checkHash:in:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v77 = a5;
  uint64_t v72 = a2;
  v83[1] = *(CGPDFStreamRef *)MEMORY[0x263EF8340];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v73 = *(void *)(v10 - 8);
  uint64_t v74 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SHA256Digest();
  uint64_t v75 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for SHA256();
  uint64_t v76 = *(void *)(v16 - 8);
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (CGPDFDictionary *)objc_msgSend(v6, sel_sourceDictionary, v17);
  if (!v20)
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(a4);
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(a6, 1, 1, v27);
  }
  uint64_t v78 = a6;
  uint64_t v79 = a4;
  value[0] = 0;
  if (!CGPDFDictionaryGetDictionary(v20, "AAPL:AKExtras", value)) {
    goto LABEL_15;
  }
  uint64_t v21 = value[0];
  if (!value[0]) {
    goto LABEL_15;
  }
  if ((a1 & 1) == 0) {
    goto LABEL_21;
  }
  value[0] = 0;
  if (CGPDFDictionaryGetString(v21, "PPKHash", value))
  {
    if (value[0])
    {
      CFStringRef v22 = CGPDFStringCopyTextString(value[0]);
      if (v22)
      {
        uint64_t v23 = (__CFString *)v22;
        uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        CGPDFDictionaryRef v24 = (CGPDFDictionaryRef)Data.init(base64Encoded:options:)();
        unint64_t v26 = v25;
        swift_bridgeObjectRelease();
        if (v26 >> 60 != 15) {
          goto LABEL_17;
        }
LABEL_15:
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(v79);
        return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v78, 1, 1, v31);
      }
    }
  }
  v83[0] = 0;
  if (!CGPDFDictionaryGetStream(v21, "PPKHash", v83)) {
    goto LABEL_15;
  }
  if (!v83[0]) {
    goto LABEL_15;
  }
  CGPDFDataFormat format = CGPDFDataFormatRaw;
  CFDataRef v29 = CGPDFStreamCopyData(v83[0], &format);
  if (!v29) {
    goto LABEL_15;
  }
  CFDataRef v30 = v29;
  *(_OWORD *)CGPDFDictionaryRef value = xmmword_20C8352B0;
  static Data._conditionallyBridgeFromObjectiveC(_:result:)();

  unint64_t v26 = (unint64_t)value[1];
  if ((unint64_t)value[1] >> 60 == 15) {
    goto LABEL_15;
  }
  CGPDFDictionaryRef v24 = value[0];
LABEL_17:
  int v32 = Data.paperKitHashVersion.getter((uint64_t)v24, v26);
  if ((v32 & 0x100) != 0)
  {
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(v79);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v78, 1, 1, v57);
    return (id)outlined consume of Data?((uint64_t)v24, v26);
  }
  LODWORD(v71) = v32;
  CGPDFDictionaryRef v70 = v24;
  id result = objc_msgSend(v6, sel_dictionaryRef);
  if (!result)
  {
    __break(1u);
    return result;
  }
  id v69 = result;
  SHA256.init()();
  value[0] = (CGPDFDictionaryRef)MEMORY[0x263F8EE88];
  NSDictionary.paperKitHashInto(_:version:includeAPPL:visited:)((uint64_t)v19, v71, 0, (uint64_t)value);
  swift_bridgeObjectRelease();
  SHA256.finalize()();
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x263F045C0]);
  uint64_t v33 = Digest.makeIterator()();
  uint64_t v35 = v34;
  (*(void (**)(char *, uint64_t))(v75 + 8))(v15, v13);
  uint64_t v36 = specialized _copySequenceToContiguousArray<A>(_:)(v33, v35);
  swift_bridgeObjectRelease();
  uint64_t v37 = specialized Data.init<A>(_:)(v36);
  unint64_t v39 = v38;
  swift_release();
  uint64_t v40 = specialized Data.init(paperKitHash:version:)(v37, v39, v71);
  unint64_t v42 = v41;
  (*(void (**)(char *, uint64_t))(v76 + 8))(v19, v16);

  uint64_t v43 = (uint64_t)v70;
  if ((specialized static Data.== infix(_:_:)((uint64_t)v70, v26, v40, v42) & 1) == 0)
  {
    unint64_t v61 = v26;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)logger);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    BOOL v65 = os_log_type_enabled(v63, v64);
    uint64_t v66 = v78;
    if (v65)
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl(&dword_20C2D7000, v63, v64, "Importing PaperKit element from annotation skipped due to hash difference.", v67, 2u);
      MEMORY[0x210550270](v67, -1, -1);
    }
    outlined consume of Data?(v43, v61);
    outlined consume of Data._Representation(v40, v42);

    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(v79);
    uint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56);
    uint64_t v56 = v66;
    return (id)v55(v56, 1, 1, v54);
  }
  outlined consume of Data._Representation(v40, v42);
  outlined consume of Data?(v43, v26);
LABEL_21:
  value[0] = 0;
  if (CGPDFDictionaryGetString(v21, "PPK", value))
  {
    if (value[0])
    {
      CFStringRef v44 = CGPDFStringCopyTextString(value[0]);
      if (v44)
      {
        uint64_t v45 = (__CFString *)v44;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        CGPDFDictionaryRef v46 = (CGPDFDictionaryRef)Data.init(base64Encoded:options:)();
        unint64_t v48 = v47;
        swift_bridgeObjectRelease();
        uint64_t v49 = v79;
        uint64_t v50 = v80;
        if (v48 >> 60 != 15) {
          goto LABEL_34;
        }
        goto LABEL_30;
      }
    }
  }
  v83[0] = 0;
  BOOL Stream = CGPDFDictionaryGetStream(v21, "PPK", v83);
  uint64_t v49 = v79;
  uint64_t v50 = v80;
  if (!Stream
    || !v83[0]
    || (format = CGPDFDataFormatRaw, (CFDataRef v52 = CGPDFStreamCopyData(v83[0], &format)) == 0)
    || (CFDataRef v53 = v52,
        *(_OWORD *)CGPDFDictionaryRef value = xmmword_20C8352B0,
        static Data._conditionallyBridgeFromObjectiveC(_:result:)(),
        v53,
        unint64_t v48 = (unint64_t)value[1],
        (unint64_t)value[1] >> 60 == 15))
  {
LABEL_30:
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(v49);
    uint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56);
    uint64_t v56 = v78;
    return (id)v55(v56, 1, 1, v54);
  }
  CGPDFDictionaryRef v46 = value[0];
LABEL_34:
  outlined copy of Data?((uint64_t)v46, v48);
  if (one-time initialization token for allReadableFileFormatVersions != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(v49);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(v77, v49);
  Capsule<>.init(serializedData:allowedAppFormats:)();
  if (v50) {
    return (id)outlined consume of Data?((uint64_t)v46, v48);
  }
  Capsule.Ref.import<A>(_:)();
  uint64_t v59 = v78;
  uint64_t v60 = v74;
  Capsule<>.root.getter();
  outlined consume of Data?((uint64_t)v46, v48);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v12, v60);
  return (id)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v59, 0, 1, v58);
}

id specialized CanvasElementPDFAnnotation.decodeCanvasElement<A>(in:assetManager:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v31 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v30 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v33;
  id result = specialized CanvasElementPDFAnnotation.decodePaperKit<A, B>(type:checkHash:in:)(1, a1, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>, (unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_9<TaggedCanvasElement>> and conformance CRRegister<A>, (uint64_t)v10);
  if (!v15)
  {
    uint64_t v28 = (void (*)(char *, void))a1;
    uint64_t v33 = v3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>?);
      uint64_t v17 = 1;
      uint64_t v18 = v5;
      uint64_t v20 = v30;
      uint64_t v19 = v31;
    }
    else
    {
      uint64_t v21 = v12;
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
      CFStringRef v22 = v7;
      CRRegister.value.getter();
      uint64_t v23 = v5;
      uint64_t v28 = (void (*)(char *, void))SharedTagged_9.subscript.modify();
      uint64_t v26 = *(void *)(v24 + 24);
      uint64_t v25 = *(void *)(v24 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v24, v26);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 136))(v33, v29, v26, v25);
      v28(v32, 0);
      uint64_t v20 = v30;
      uint64_t v27 = v22;
      uint64_t v18 = v23;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v23);
      uint64_t v19 = v31;
      CRRegister.value.getter();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v14, v11);
      uint64_t v17 = 0;
    }
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v17, 1, v18);
  }
  return result;
}

void key path setter for PaperDocumentView.editingMode : PaperDocumentView(unsigned __int8 *a1, void *a2)
{
  unsigned __int8 v2 = *a1;
  uint64_t v3 = (unsigned __int8 *)(*a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_beginAccess();
  unsigned __int8 v4 = *v3;
  *uint64_t v3 = v2;
  unsigned __int8 v5 = v4;
  PaperDocumentView.editingMode.didset(&v5);
}

void PaperDocumentView.editingMode.didset(unsigned __int8 *a1)
{
  int v2 = *a1;
  PaperDocumentView.updateToolPicker()();
  PaperDocumentView.tiledViewUpdateEditingState()();
  swift_beginAccess();
  uint64_t v3 = v1;
  uint64_t v4 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v4, (uint64_t)v3);
  swift_bridgeObjectRelease();

  unsigned __int8 v5 = &v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
  swift_beginAccess();
  int v6 = *v5;
  if (v2 != 1 && v6 == 1)
  {
    objc_msgSend(v3, sel_axInsertFormFieldsIntoHierarchy);
    uint64_t v7 = PaperDocumentView.currentPageCanvas.getter();
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x2F8))();
      uint64_t v11 = v10;

      uint64_t ObjectType = swift_getObjectType();
      uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 144))(ObjectType, v11);

      if (v13)
      {
        uint64_t v19 = 0;
        memset(v18, 0, sizeof(v18));
        FormFillingView.focusNextField(from:direction:)((uint64_t)v18, 0);

        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for AnyHashable?);
      }
    }
    int v6 = *v5;
  }
  uint64_t v14 = (id *)&v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  if (!*v14)
  {
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(*v14, sel_setInMarkupMode_, v6 == 3);
  if (!*v14)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  int v15 = *v5;
  objc_msgSend(*v14, sel_setAnnotationEditingEnabled_, *v5 != 0);
  if (!*v14)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (objc_msgSend(*v14, sel_respondsToSelector_, sel_setFormDetectionEnabled_))
  {
    if (*v14)
    {
      objc_msgSend(*v14, sel_setFormDetectionEnabled_, v15 != 0);
      goto LABEL_13;
    }
LABEL_22:
    __break(1u);
    return;
  }
LABEL_13:
  if (*v5 == 1) {
    *(unsigned char *)(*(void *)&v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics] + 19) = 51;
  }
  if (v6 != 3)
  {
    id v16 = PaperDocumentView.currentPageCanvas.getter();
    if (v16)
    {
      uint64_t v17 = v16;
      AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
    }
  }
}

uint64_t PaperDocumentView.editingMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void PaperDocumentView.editingMode.setter(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_beginAccess();
  unsigned __int8 v4 = *v3;
  *uint64_t v3 = v2;
  unsigned __int8 v5 = v4;
  PaperDocumentView.editingMode.didset(&v5);
}

void (*PaperDocumentView.editingMode.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode;
  v3[3] = v1;
  v3[4] = v4;
  unsigned __int8 v5 = (unsigned char *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 40) = *v5;
  return PaperDocumentView.editingMode.modify;
}

void PaperDocumentView.editingMode.modify(uint64_t a1, char a2)
{
  unsigned __int8 v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  char v5 = *(unsigned char *)(v4 + v3);
  *(unsigned char *)(v4 + v3) = *(unsigned char *)(*(void *)a1 + 40);
  if (a2)
  {
    char v7 = v5;
    int v6 = (unsigned __int8 *)&v7;
  }
  else
  {
    char v8 = v5;
    int v6 = (unsigned __int8 *)&v8;
  }
  PaperDocumentView.editingMode.didset(v6);
  free(v2);
}

void key path setter for PaperDocumentView.pdfView : PaperDocumentView(void **a1, void *a2)
{
  unsigned __int8 v2 = *a1;
  uint64_t v3 = (void **)(*a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = v2;
  id v5 = v2;
}

void *PaperDocumentView.pdfView.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  unsigned __int8 v2 = *v1;
  id v3 = v2;
  return v2;
}

void PaperDocumentView.pdfView.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*PaperDocumentView.pdfView.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

void key path setter for PaperDocumentView.viewControllerForPresenting : PaperDocumentView(void **a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  id v2 = v1;
  PaperDocumentView.viewControllerForPresentingUI.didset();
}

uint64_t PaperDocumentView.viewControllerForPresenting.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

void PaperDocumentView.viewControllerForPresenting.setter(void *a1)
{
}

void (*PaperDocumentView.viewControllerForPresenting.modify(void *a1))(void **a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x210550400](v5);
  return PaperDocumentView.viewControllerForPresenting.modify;
}

void PaperDocumentView.viewControllerForPresenting.modify(void **a1, char a2)
{
  id v3 = *a1;
  uint64_t v5 = (void **)((char *)*a1 + 24);
  uint64_t v4 = *v5;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    id v6 = v4;
    PaperDocumentView.viewControllerForPresentingUI.didset();

    uint64_t v4 = *v5;
  }
  else
  {
    PaperDocumentView.viewControllerForPresentingUI.didset();
  }

  free(v3);
}

void PaperDocumentView.viewControllerForPresentingUI.didset()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v20 = v2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v2 + 64);
  uint64_t v6 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  int64_t v7 = 0;
  int64_t v21 = (unint64_t)(v3 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v21) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v21) {
        goto LABEL_23;
      }
      unint64_t v18 = *(void *)(v20 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v21) {
          goto LABEL_23;
        }
        unint64_t v18 = *(void *)(v20 + 8 * v7);
        if (!v18)
        {
          int64_t v7 = v17 + 3;
          if (v17 + 3 >= v21) {
            goto LABEL_23;
          }
          unint64_t v18 = *(void *)(v20 + 8 * v7);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v18 - 1) & v18;
    unint64_t v9 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_5:
    uint64_t v10 = *(void *)(v2 + 56) + 16 * v9;
    uint64_t v11 = *(void **)v10;
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v14 = MEMORY[0x210550400](v6);
    int v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 224);
    id v16 = v11;
    v15(v14, ObjectType, v12);
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v21)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v18 = *(void *)(v20 + 8 * v19);
  if (v18)
  {
    int64_t v7 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v7 >= v21) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t PaperDocumentView.viewControllerForPresentingUI.getter()
{
  return PaperDocumentView.viewControllerForPresentingUI.getter(&OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI);
}

void (*PaperDocumentView.viewControllerForPresentingUI.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x210550400](v5);
  return PaperDocumentView.viewControllerForPresentingUI.modify;
}

void PaperDocumentView.viewControllerForPresentingUI.modify(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

    PaperDocumentView.viewControllerForPresentingUI.didset();
  }
  free(v3);
}

uint64_t PaperDocumentView.pageOverlayViewProvider.didset()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v51 = (uint64_t)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v50 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v5 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  CGPDFDictionaryRef v46 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)(*v7 + 64);
  uint64_t v48 = *v7 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  uint64_t v41 = v0;
  uint64_t v44 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider;
  uint64_t v52 = v8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_beginAccess();
  int64_t v14 = 0;
  int64_t v49 = (unint64_t)(v10 + 63) >> 6;
  unint64_t v47 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v45 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  unint64_t v42 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
  if (v12) {
    goto LABEL_7;
  }
LABEL_8:
  while (2)
  {
    int64_t v18 = v14 + 1;
    if (!__OFADD__(v14, 1))
    {
      if (v18 < v49)
      {
        unint64_t v19 = *(void *)(v48 + 8 * v18);
        int64_t v20 = v14 + 1;
        if (v19) {
          goto LABEL_21;
        }
        int64_t v20 = v14 + 2;
        if (v14 + 2 >= v49) {
          return swift_release();
        }
        unint64_t v19 = *(void *)(v48 + 8 * v20);
        if (v19) {
          goto LABEL_21;
        }
        int64_t v20 = v14 + 3;
        if (v14 + 3 >= v49) {
          return swift_release();
        }
        unint64_t v19 = *(void *)(v48 + 8 * v20);
        if (v19)
        {
LABEL_21:
          unint64_t v12 = (v19 - 1) & v19;
          int64_t v54 = v20;
          for (unint64_t i = __clz(__rbit64(v19)) + (v20 << 6); ; unint64_t i = v16 | (v14 << 6))
          {
            CFStringRef v22 = *(void **)(*(void *)(v52 + 48) + 8 * i);
            uint64_t v23 = *(void *)(v52 + 56) + 16 * i;
            uint64_t v24 = *(void **)v23;
            uint64_t v25 = *(void *)(v23 + 8);
            uint64_t ObjectType = swift_getObjectType();
            uint64_t v27 = *(void (**)(void *, uint64_t, uint64_t))(v25 + 16);
            id v28 = v22;
            id v29 = v24;
            v27(0, ObjectType, v25);
            uint64_t v30 = (uint64_t)v28 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
            swift_beginAccess();
            uint64_t v31 = v51;
            outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v30, v51, (uint64_t *)&demangling cache variable for type metadata for PageId?);
            uint64_t v32 = type metadata accessor for PageId(0);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32))
            {
              break;
            }
            uint64_t v33 = v31 + *(int *)(v32 + 20);
            uint64_t v15 = v50;
            outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v33, v50, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
            outlined destroy of StocksKitCurrencyCache.Provider?(v31, (uint64_t *)&demangling cache variable for type metadata for PageId?);
            if ((*v45)(v15, 1, v53) == 1) {
              goto LABEL_6;
            }
            (*v43)(v46, v15, v53);
            uint64_t v34 = v44;
            if (MEMORY[0x210550400](v44))
            {
              uint64_t v35 = *(void *)(v34 + 8);
              uint64_t v36 = swift_getObjectType();
              uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v35 + 8))(v41, v46, v36, v35);
              swift_unknownObjectRelease();
              if (v37)
              {
                if (MEMORY[0x210550400](v34))
                {
                  uint64_t v38 = *(void *)(v34 + 8);
                  uint64_t v39 = swift_getObjectType();
                  (*(void (**)(uint64_t, void *, char *, uint64_t, uint64_t))(v38 + 16))(v41, v37, v46, v39, v38);
                  swift_unknownObjectRelease();
                }
                id v40 = v37;
                v27(v37, ObjectType, v25);
              }
            }

            uint64_t result = (*v42)(v46, v53);
            int64_t v14 = v54;
            if (!v12) {
              goto LABEL_8;
            }
LABEL_7:
            unint64_t v16 = __clz(__rbit64(v12));
            v12 &= v12 - 1;
            int64_t v54 = v14;
          }
          outlined destroy of StocksKitCurrencyCache.Provider?(v31, (uint64_t *)&demangling cache variable for type metadata for PageId?);
          uint64_t v15 = v50;
          (*v47)(v50, 1, 1, v53);
LABEL_6:

          uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v15, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
          int64_t v14 = v54;
          if (!v12) {
            continue;
          }
          goto LABEL_7;
        }
        uint64_t v21 = v14 + 4;
        if (v14 + 4 < v49)
        {
          unint64_t v19 = *(void *)(v48 + 8 * v21);
          if (v19)
          {
            int64_t v20 = v14 + 4;
            goto LABEL_21;
          }
          while (1)
          {
            int64_t v20 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_33;
            }
            if (v20 >= v49) {
              return swift_release();
            }
            unint64_t v19 = *(void *)(v48 + 8 * v20);
            ++v21;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
      }
      return swift_release();
    }
    break;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t PaperDocumentView.pageOverlayViewProvider.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider);
}

uint64_t PaperDocumentView.pageOverlayViewProvider.setter(uint64_t a1, uint64_t a2)
{
  return PaperDocumentView.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider, (void (*)(uint64_t))PaperDocumentView.pageOverlayViewProvider.didset);
}

void (*PaperDocumentView.pageOverlayViewProvider.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentView.pageOverlayViewProvider.modify;
}

void PaperDocumentView.pageOverlayViewProvider.modify(uint64_t a1, char a2)
{
}

id key path getter for PaperDocumentView.contentSnapshottingView : PaperDocumentView@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = *(id *)(*a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (result)
  {
    id result = objc_msgSend(result, sel_contentSnapshottingView);
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id PaperDocumentView.contentSnapshottingView.getter()
{
  id result = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (result)
  {
    id v2 = objc_msgSend(result, sel_contentSnapshottingView);
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void PaperDocumentView.contentSnapshottingView.setter(void *a1)
{
  id v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v2)
  {
    id v3 = v2;
    objc_msgSend(v3, sel_setContentSnapshottingView_, a1);
  }
  else
  {
    __break(1u);
  }
}

void (*PaperDocumentView.contentSnapshottingView.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView;
  a1[1] = v1;
  a1[2] = v3;
  id result = *(void (**)(uint64_t, char))(v1 + v3);
  if (result)
  {
    *a1 = objc_msgSend(result, sel_contentSnapshottingView);
    return PaperDocumentView.contentSnapshottingView.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void PaperDocumentView.contentSnapshottingView.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 8) + *(void *)(a1 + 16));
  if ((a2 & 1) == 0)
  {
    if (v3)
    {
      id v4 = *(id *)a1;
      id v5 = v3;
      objc_msgSend(v5, sel_setContentSnapshottingView_, v4);

      goto LABEL_6;
    }
LABEL_10:
    __break(1u);
    return;
  }
  if (!v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  id v5 = *(id *)a1;
  objc_msgSend(v3, sel_setContentSnapshottingView_);
LABEL_6:
}

void key path setter for PaperDocumentView.allowsDocumentStructureEditing : PaperDocumentView(unsigned char *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) = *a1;
  uint64_t v3 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_thumbnailView);
  if (v3)
  {
    id v4 = (id)v3;
    PaperDocumentThumbnailView.allowsDocumentStructureEditingChanged()();
  }
}

id PaperDocumentView.allowsDocumentStructureEditing.getter()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1) {
    return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly);
  }
  else {
    return 0;
  }
}

void PaperDocumentView.allowsDocumentStructureEditing.setter(char a1)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) = a1;
  uint64_t v2 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_thumbnailView);
  if (v2)
  {
    id v3 = (id)v2;
    PaperDocumentThumbnailView.allowsDocumentStructureEditingChanged()();
  }
}

void (*PaperDocumentView.allowsDocumentStructureEditing.modify(uint64_t a1))(uint64_t *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  if (*(unsigned char *)(v1 + v3) == 1) {
    unsigned __int8 v4 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly);
  }
  else {
    unsigned __int8 v4 = 0;
  }
  *(unsigned char *)(a1 + 16) = v4;
  return PaperDocumentView.allowsDocumentStructureEditing.modify;
}

void PaperDocumentView.allowsDocumentStructureEditing.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *(unsigned char *)(v1 + a1[1]) = *((unsigned char *)a1 + 16);
  uint64_t v2 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_thumbnailView);
  if (v2)
  {
    id v3 = (id)v2;
    PaperDocumentThumbnailView.allowsDocumentStructureEditingChanged()();
  }
}

uint64_t PaperDocumentView.allowsDocumentStructureCopying.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_allowsDocumentStructureCopying);
  swift_beginAccess();
  return *v1;
}

uint64_t PaperDocumentView.allowsDocumentStructureCopying.setter(char a1)
{
  id v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_allowsDocumentStructureCopying);
  uint64_t result = swift_beginAccess();
  *id v3 = a1;
  return result;
}

uint64_t (*PaperDocumentView.allowsDocumentStructureCopying.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t PaperDocumentView.delegate.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate);
}

uint64_t PaperDocumentView.delegate.setter(uint64_t a1, uint64_t a2)
{
  return AnyCanvas.delegate.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate);
}

uint64_t (*PaperDocumentView.delegate.modify(void *a1))()
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

uint64_t (*PaperDocumentView.dataModel.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

double PaperDocumentView.vellumOpacity.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_vellumOpacity;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t PaperDocumentView.vellumOpacity.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = (double *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_vellumOpacity);
  uint64_t result = swift_beginAccess();
  double v10 = *v8;
  *uint64_t v8 = a1;
  if (v10 != a1)
  {
    uint64_t v11 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    uint64_t v12 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v11, v4);
    MEMORY[0x270FA5388](v12);
    *(double *)&v13[-16] = a1;
    Capsule.callAsFunction<A>(_:)();
    specialized PaperDocumentView.merge<A>(_:from:page:)((uint64_t)v7, 3u, 0);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

void (*PaperDocumentView.vellumOpacity.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x78uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v3[11] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[12] = v5;
  uint64_t v6 = malloc(*(void *)(v5 + 64));
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_vellumOpacity;
  v3[13] = v6;
  v3[14] = v7;
  uint64_t v8 = (void *)(v1 + v7);
  swift_beginAccess();
  v3[9] = *v8;
  return PaperDocumentView.vellumOpacity.modify;
}

void PaperDocumentView.vellumOpacity.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  double v3 = *(double *)(*(void *)a1 + 72);
  uint64_t v4 = *(void *)(*(void *)a1 + 112);
  uint64_t v5 = *(void *)(*(void *)a1 + 80);
  double v6 = *(double *)(v5 + v4);
  *(double *)(v5 + v4) = v3;
  if (a2)
  {
    if (v6 != v3) {
      goto LABEL_5;
    }
  }
  else if (v6 != v3)
  {
LABEL_5:
    uint64_t v8 = v2[12];
    uint64_t v7 = v2[13];
    uint64_t v9 = v2[11];
    uint64_t v10 = v2[10] + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
    MEMORY[0x270FA5388](v11);
    Capsule.callAsFunction<A>(_:)();
    specialized PaperDocumentView.merge<A>(_:from:page:)(v7, 3u, 0);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  free((void *)v2[13]);
  free(v2);
}

void PaperDocumentView.canEditVellumOpacity.didset()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v1)
  {
    uint64_t v2 = *(unsigned char **)(v1 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController);
    double v3 = (char *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity);
    swift_beginAccess();
    char v4 = *v3;
    v2[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditVellumOpacity] = *v3;
    uint64_t v5 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
    if (v5)
    {
      double v6 = v2;
      id v7 = v5;
      uint64_t v8 = ToolPickerController.textToolListViewController.getter();
      v8[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible] = v4;
      TextToolListViewController.updateUI()();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t PaperDocumentView.canEditVellumOpacity.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity);
  swift_beginAccess();
  return *v1;
}

uint64_t PaperDocumentView.canEditVellumOpacity.setter(char a1)
{
  return PaperDocumentView.canEditVellumOpacity.setter(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity, (uint64_t (*)(uint64_t))PaperDocumentView.canEditVellumOpacity.didset);
}

uint64_t (*PaperDocumentView.canEditVellumOpacity.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperDocumentView.canEditVellumOpacity.modify;
}

uint64_t PaperDocumentView.canEditVellumOpacity.modify(uint64_t a1, char a2)
{
  return PaperDocumentView.canEditVellumOpacity.modify(a1, a2, (uint64_t (*)(uint64_t))PaperDocumentView.canEditVellumOpacity.didset);
}

uint64_t PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v1) {
    return *(unsigned __int8 *)(*(void *)(v1 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController)
  }
                              + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden);
  __break(1u);
  return result;
}

uint64_t PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.setter(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v2) {
    *(unsigned char *)(*(void *)(v2 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController)
  }
             + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden) = result & 1;
  else {
    __break(1u);
  }
  return result;
}

uint64_t (*PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.modify(uint64_t (*result)(uint64_t result, char a2)))(uint64_t result, char a2)
{
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView;
  *(void *)uint64_t result = v1;
  *((void *)result + 1) = v2;
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    *((unsigned char *)result + 16) = *(unsigned char *)(*(void *)(v3
                                                   + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController)
                                       + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden);
    return PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.modify(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(*(void *)result + *(void *)(result + 8));
  if (a2)
  {
    if (v2)
    {
LABEL_5:
      *(unsigned char *)(*(void *)(v2 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController)
               + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden) = *(unsigned char *)(result + 16);
      return result;
    }
    __break(1u);
  }
  if (v2) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

double PaperDocumentView.PaperDocumentViewProxy.textualContext(for:)@<D0>(_OWORD *a1@<X8>)
{
  Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v3 = &Strong[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider];
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x210550400](v3);
  uint64_t v5 = *((void *)v3 + 1);

  if (v4)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = swift_unknownObjectUnownedLoadStrong();
    v9[3] = type metadata accessor for PaperDocumentView();
    v9[4] = &protocol witness table for PaperDocumentView;
    v9[0] = v7;
    (*(void (**)(void *, uint64_t, uint64_t))(v5 + 8))(v9, ObjectType, v5);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
    double result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

id PaperDocumentView.paperDocumentViewProxy.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView____lazy_storage___paperDocumentViewProxy;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView____lazy_storage___paperDocumentViewProxy);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView____lazy_storage___paperDocumentViewProxy);
  }
  else
  {
    uint64_t v4 = (objc_class *)type metadata accessor for PaperDocumentView.PaperDocumentViewProxy();
    id v5 = objc_allocWithZone(v4);
    swift_unknownObjectUnownedInit();
    v10.receiver = v5;
    v10.super_class = v4;
    id v6 = objc_msgSendSuper2(&v10, sel_init);
    uint64_t v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

void key path setter for PaperDocumentView.toolPicker : PaperDocumentView(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v3 = (void **)(*a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = v2;
  id v5 = v2;
  PaperDocumentView.toolPicker.didset(v4);
}

void PaperDocumentView.toolPicker.didset(void *a1)
{
  if (a1)
  {
    objc_msgSend(a1, sel_removeObserver_, v1);
    id v3 = PaperDocumentView.paperDocumentViewProxy.getter();
    objc_msgSend(a1, sel_removeObserver_, v3);
  }
  swift_beginAccess();
  uint64_t v4 = v1;
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v5, (uint64_t)v4);
  swift_bridgeObjectRelease();

  id v6 = (id *)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
  swift_beginAccess();
  if (*v6)
  {
    id v7 = *v6;
    objc_msgSend(v7, sel_addObserver_, v4);
    id v8 = PaperDocumentView.paperDocumentViewProxy.getter();
    objc_msgSend(v7, sel_addObserver_, v8);

    PaperDocumentView.updateTiledViewInk(for:)(v7);
    PaperDocumentView.updateToolPicker()();
  }
}

void *PaperDocumentView.toolPicker.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void PaperDocumentView.toolPicker.setter(void *a1)
{
  id v3 = (id *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
  swift_beginAccess();
  id v4 = *v3;
  *id v3 = a1;
  id v5 = a1;
  if (v4)
  {
    objc_msgSend(v4, sel_removeObserver_, v1);
    id v6 = PaperDocumentView.paperDocumentViewProxy.getter();
    objc_msgSend(v4, sel_removeObserver_, v6);
  }
  swift_beginAccess();
  id v7 = v1;
  uint64_t v8 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v8, (uint64_t)v7);

  swift_bridgeObjectRelease();
  if (*v3)
  {
    id v9 = *v3;
    objc_msgSend(v9, sel_addObserver_, v7);
    id v10 = PaperDocumentView.paperDocumentViewProxy.getter();
    objc_msgSend(v9, sel_addObserver_, v10);

    PaperDocumentView.updateTiledViewInk(for:)(v9);
    PaperDocumentView.updateToolPicker()();
  }
}

void (*PaperDocumentView.toolPicker.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x60uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker;
  v3[10] = v1;
  v3[11] = v4;
  id v5 = (void **)(v1 + v4);
  swift_beginAccess();
  id v6 = *v5;
  v3[9] = *v5;
  id v7 = v6;
  return PaperDocumentView.toolPicker.modify;
}

void PaperDocumentView.toolPicker.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = (void **)(*(void *)a1 + 72);
  id v3 = *v4;
  uint64_t v6 = *(void *)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(*(void *)a1 + 88);
  id v7 = *(void **)(v6 + v5);
  *(void *)(v6 + v5) = *v4;
  if (a2)
  {
    id v8 = v3;
    if (v7)
    {
      objc_msgSend(v7, sel_removeObserver_, v2[10]);
      id v9 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v7, sel_removeObserver_, v9);
    }
    uint64_t v11 = (char *)v2[10];
    uint64_t v10 = v2[11];
    swift_beginAccess();
    uint64_t v12 = v11;
    uint64_t v13 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v13, (uint64_t)v12);
    swift_bridgeObjectRelease();

    int64_t v14 = *(void **)&v11[v10];
    if (v14)
    {
      uint64_t v15 = v2[10];
      id v16 = v14;
      objc_msgSend(v16, sel_addObserver_, v15);
      id v17 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v16, sel_addObserver_, v17);

      PaperDocumentView.updateTiledViewInk(for:)(v16);
      PaperDocumentView.updateToolPicker()();
    }
    id v7 = *v4;
  }
  else
  {
    id v18 = v3;
    if (v7)
    {
      objc_msgSend(v7, sel_removeObserver_, v2[10]);
      id v19 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v7, sel_removeObserver_, v19);
    }
    uint64_t v21 = (char *)v2[10];
    uint64_t v20 = v2[11];
    swift_beginAccess();
    CFStringRef v22 = v21;
    uint64_t v23 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v23, (uint64_t)v22);
    swift_bridgeObjectRelease();

    uint64_t v24 = *(void **)&v21[v20];
    if (v24)
    {
      uint64_t v25 = v2[10];
      id v26 = v24;
      objc_msgSend(v26, sel_addObserver_, v25);
      id v27 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v26, sel_addObserver_, v27);

      PaperDocumentView.updateTiledViewInk(for:)(v26);
      PaperDocumentView.updateToolPicker()();
    }
  }

  free(v2);
}

uint64_t key path getter for PaperDocumentView.paperDocument : PaperDocumentView@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t key path setter for PaperDocumentView.paperDocument : PaperDocumentView(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v12((char *)&v16 - v10, a1, v4, v9);
  uint64_t v13 = *a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(v13, v11, v4);
  swift_endAccess();
  ((void (*)(char *, uint64_t, uint64_t))v12)(v7, v13, v4);
  specialized PaperDocumentView.merge<A>(_:from:page:)((uint64_t)v7, 3u, 0);
  int64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  return ((uint64_t (*)(char *, uint64_t))v14)(v11, v4);
}

uint64_t PaperDocumentView.paperDocument.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

void (*PaperDocumentView.paperDocument.modify(void *a1))(void *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[7] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v3[8] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[9] = v5;
  v3[10] = malloc(*(void *)(v5 + 64));
  v3[11] = PaperDocumentView.dataModel.modify();
  return PaperDocumentView.paperDocument.modify;
}

void PaperDocumentView.paperDocument.modify(void *a1, char a2)
{
  uint64_t v3 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 88))(*a1, 0);
  if (a2)
  {
    uint64_t v4 = (void *)v3[10];
  }
  else
  {
    uint64_t v5 = v3[9];
    uint64_t v4 = (void *)v3[10];
    uint64_t v6 = v3[8];
    uint64_t v7 = v3[7] + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    (*(void (**)(void *, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    specialized PaperDocumentView.merge<A>(_:from:page:)((uint64_t)v4, 3u, 0);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v6);
  }
  free(v4);
  free(v3);
}

uint64_t PaperDocumentView.paperDocument.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v7, a1, v3);
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  specialized PaperDocumentView.merge<A>(_:from:page:)((uint64_t)v6, 3u, 0);
  uint64_t v8 = *(void (**)(char *, uint64_t))(v4 + 8);
  v8(v6, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v8)(a1, v3);
}

void PaperDocumentView.merge<A>(_:forward:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a2) {
    unsigned __int8 v4 = 3;
  }
  else {
    unsigned __int8 v4 = 0;
  }
  unsigned __int8 v5 = v4;
  PaperDocumentView.merge<A>(_:from:page:)(a1, &v5, 0, a3, a4);
}

uint64_t PaperDocumentView.init(context:document:editingMode:toolPicker:)(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, unsigned char *, uint64_t))((char *)&async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)
                                                                   + async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:));
  double v9 = (void *)swift_task_alloc();
  v4[4] = v9;
  *double v9 = v4;
  v9[1] = PaperDocumentView.init(context:document:editingMode:toolPicker:);
  return v11(a1, a2, a3, a4);
}

id PaperDocumentView.__deallocating_deinit()
{
  id result = *(id *)&v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView];
  if (result)
  {
    objc_msgSend(result, sel_removeFromSuperview);
    PassthroughSubject.send(completion:)();
    char v3 = 1;
    PassthroughSubject.send(completion:)();
    v2.receiver = v0;
    v2.super_class = (Class)type metadata accessor for PaperDocumentView();
    return objc_msgSendSuper2(&v2, sel_dealloc);
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall PaperDocumentView.deselectAll()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v1 - 8);
  char v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  PaperDocumentView.currentPage.getter((uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    uint64_t v8 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
    uint64_t v9 = swift_beginAccess();
    uint64_t v10 = *v8;
    MEMORY[0x270FA5388](v9);
    *(&v15 - 2) = (uint64_t)v7;
    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.canvas(for:), (uint64_t)(&v15 - 4), v10);
    uint64_t v12 = v11;
    int64_t v14 = v13;
    swift_bridgeObjectRelease();
    if (v12)
    {

      type metadata accessor for AnyCanvas();
      if (swift_dynamicCastClass()) {
        AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
      }
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

Swift::Void __swiftcall PaperDocumentView.layoutSubviews()()
{
  v34.receiver = v0;
  v34.super_class = (Class)type metadata accessor for PaperDocumentView();
  objc_msgSendSuper2(&v34, sel_layoutSubviews);
  uint64_t v1 = (id *)&v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  if (!*v1)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  id v2 = *v1;
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v2, sel_setFrame_);

  if (!*v1)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  id v3 = *v1;
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v3, sel_setBounds_, 0.0, 0.0);

  uint64_t v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyApplySafeAreaInsetsToAxes;
  if (!*(void *)(*(void *)&v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyApplySafeAreaInsetsToAxes]
                  + 16))
    goto LABEL_35;
  if (!*v1)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  id v5 = objc_msgSend(*v1, sel_documentScrollView);
  if (!v5)
  {
LABEL_35:
    PaperDocumentView.adjustScaleFactorIfNecessary()();
    return;
  }
  uint64_t v6 = v5;
  objc_msgSend(v0, sel_safeAreaInsets);
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  objc_msgSend(v6, sel_contentInset);
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;
  double v22 = v21;
  uint64_t v23 = *(void *)&v0[v4];
  char v24 = specialized Sequence<>.contains(_:)(0, v23);
  if (v24) {
    double v25 = v14;
  }
  else {
    double v25 = v22;
  }
  if (v24) {
    double v26 = v10;
  }
  else {
    double v26 = v18;
  }
  uint64_t v27 = *(void *)(v23 + 16);
  if (!v27) {
    goto LABEL_19;
  }
  if ((*(unsigned char *)(v23 + 32) & 1) == 0)
  {
    if (v27 != 1)
    {
      uint64_t v28 = 33;
      while (1)
      {
        uint64_t v29 = v28 - 31;
        if (__OFADD__(v28 - 32, 1)) {
          break;
        }
        if (*(unsigned char *)(v23 + v28)) {
          goto LABEL_20;
        }
        ++v28;
        if (v29 == v27) {
          goto LABEL_19;
        }
      }
      __break(1u);
      goto LABEL_37;
    }
LABEL_19:
    double v12 = v20;
    double v8 = v16;
  }
LABEL_20:
  if (v8 == v16 && v26 == v18 && v12 == v20 && v25 == v22) {
    goto LABEL_34;
  }
  objc_msgSend(v6, sel_setContentInset_, v8, v26, v12, v25);
  if (!*v1)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (!objc_msgSend(*v1, sel_autoScales)) {
    goto LABEL_34;
  }
  if (*v1)
  {
    id v33 = *v1;
    objc_msgSend(v33, sel_setAutoScales_, 1);

LABEL_34:
    goto LABEL_35;
  }
LABEL_41:
  __break(1u);
}

uint64_t PaperDocumentView.automaticallyAdjustScaleFactor.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor);
  swift_beginAccess();
  return *v1;
}

uint64_t PaperDocumentView.automaticallyAdjustScaleFactor.setter(char a1)
{
  id v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor);
  uint64_t result = swift_beginAccess();
  *id v3 = a1;
  return result;
}

uint64_t (*PaperDocumentView.automaticallyAdjustScaleFactor.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

void PaperDocumentView.adjustScaleFactorIfNecessary()()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor);
  swift_beginAccess();
  if (*v1 != 1) {
    return;
  }
  id v2 = (id *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (!*v2)
  {
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(*v2, sel_setMinScaleFactor_, 0.1);
  if (!*v2)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  objc_msgSend(*v2, sel_setMaxScaleFactor_, 5.0);
  if (!*v2)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  id v3 = objc_msgSend(*v2, sel_documentScrollView);
  if (!v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = v3;
  objc_msgSend(v3, sel_contentOffset);
  if (!*v2)
  {
LABEL_15:
    __break(1u);
    return;
  }
  double v7 = v5;
  double v8 = v6;
  objc_msgSend(*v2, sel_setAutoScales_, 1);
  if (v8 < 10.0)
  {
    objc_msgSend(v4, sel_adjustedContentInset);
    objc_msgSend(v4, sel_setContentOffset_, v7, -v9);
  }
}

Swift::Void __swiftcall PaperDocumentView.toolPickerIsRulerActiveDidChange(_:)(PKToolPicker a1)
{
  id v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v2)
  {
    id v4 = v2;
    objc_msgSend(v4, sel_setRulerEnabled_, -[objc_class isRulerActive](a1.super.isa, sel_isRulerActive));
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall PaperDocumentView.toolPickerVisibilityDidChange(_:)(PKToolPicker a1)
{
  if (([(objc_class *)a1.super.isa isVisible] & 1) == 0)
  {
    id v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
    if (v2)
    {
      objc_msgSend(v2, sel_setRulerEnabled_, 0);
    }
    else
    {
      __break(1u);
    }
  }
}

id PaperDocumentView.axCurrentPageView()()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  id result = *v1;
  if (*v1)
  {
    id v3 = objc_msgSend(result, sel_currentPage);
    if (v3)
    {
      id v4 = v3;
      id v5 = objc_msgSend(v3, sel_document);
      if (v5)
      {
        double v6 = v5;
        id v7 = objc_msgSend(v4, sel_view);
        if (v7)
        {
          double v8 = v7;
          id v9 = objc_msgSend(v7, sel_pageViewForPageAtIndex_, objc_msgSend(v6, sel_indexForPage_, v4));

          return v9;
        }
      }
      else
      {
      }
    }
    return 0;
  }
  __break(1u);
  return result;
}

void PaperDocumentView.axTapOnShapeView(_:)(void *a1)
{
  id v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_beginAccess();
  if (*v3 == 1)
  {
    id v4 = PaperDocumentView.currentPageCanvas.getter();
    if (v4)
    {
      id v5 = v4;
      double v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x2F8))();
      uint64_t v8 = v7;

      uint64_t ObjectType = swift_getObjectType();
      double v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 144))(ObjectType, v8);

      if (v10)
      {
        id v11 = v10;
        double v12 = FormFillingView.activeWidget.getter();

        if (v12)
        {
          id v13 = objc_msgSend(v12, sel_page);
          if (v13)
          {
            double v14 = v13;
            id v15 = objc_msgSend(v13, sel_view);

            if (!v15)
            {
              __break(1u);
              return;
            }
            objc_msgSend(v15, sel_removeControlForAnnotation_, v12);

            double v12 = v15;
          }
        }
      }
    }
    else
    {
      double v10 = 0;
    }
    objc_msgSend(a1, sel_becomeFirstResponder);
  }
}

id PaperDocumentView.currentPageCanvas.getter()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  id result = *v1;
  if (!*v1)
  {
    __break(1u);
    return result;
  }
  id result = objc_msgSend(result, sel_currentPage);
  if (result)
  {
    id v3 = result;
    type metadata accessor for PaperKitPDFPage(0);
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = v4;
      double v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
      swift_beginAccess();
      uint64_t v7 = *v6;
      if (*(void *)(v7 + 16))
      {
        id v3 = v3;
        swift_bridgeObjectRetain();
        unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
        if (v9)
        {
          id v10 = *(id *)(*(void *)(v7 + 56) + 16 * v8);
          swift_bridgeObjectRelease();

          type metadata accessor for AnyCanvas();
          id result = (id)swift_dynamicCastClass();
          if (result) {
            return result;
          }

          return 0;
        }
        swift_bridgeObjectRelease();
      }
    }

    return 0;
  }
  return result;
}

uint64_t closure #1 in PaperDocumentView.updateVellumWithOpacity(_:)(uint64_t a1, double a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v48 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v7 - 8);
  char v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v49 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v10 = *(v49 - 1);
  MEMORY[0x270FA5388](v49);
  double v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v39 = v13;
  uint64_t v40 = v14;
  MEMORY[0x270FA5388](v13);
  double v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule.Ref<>.subscript.getter();
  swift_release();
  double v17 = v49;
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, void *))(v10 + 8))(v12, v17);
  uint64_t v18 = v39;
  double v19 = v16;
  CROrderedSet.Iterator.next()();
  uint64_t v20 = v48;
  uint64_t v21 = v48 + 48;
  double v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  if (v22(v9, 1, v4) != 1)
  {
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    uint64_t v47 = v4;
    uint64_t v48 = v20 + 32;
    uint64_t v41 = (void (**)(char *, uint64_t))(v20 + 8);
    unint64_t v42 = v23;
    uint64_t v45 = v19;
    CGPDFDictionaryRef v46 = v6;
    uint64_t v43 = v22;
    uint64_t v44 = v21;
    do
    {
      v42(v6, v9, v4);
      int64_t v49 = (void *)SharedTagged_3.subscript.modify();
      uint64_t v24 = a1;
      uint64_t v27 = *(void *)(v25 + 24);
      uint64_t v26 = *(void *)(v25 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v25, v27);
      uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v26 + 96);
      uint64_t v29 = v18;
      uint64_t v30 = v9;
      uint64_t v31 = type metadata accessor for PaperDocument(0);
      uint64_t v32 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      uint64_t v33 = v24;
      uint64_t v34 = v31;
      char v9 = v30;
      uint64_t v18 = v29;
      uint64_t v35 = v27;
      uint64_t v36 = v43;
      uint64_t v37 = v26;
      a1 = v24;
      uint64_t v4 = v47;
      v28(v33, v34, v32, v35, v37, a2);
      double v19 = v45;
      double v6 = v46;
      ((void (*)(char *, void))v49)(v50, 0);
      (*v41)(v6, v4);
      CROrderedSet.Iterator.next()();
    }
    while (v36(v9, 1, v4) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v19, v18);
}

void PaperDocumentView.updateTiledViewInk(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PKInk();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView;
  char v9 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (!v9) {
    goto LABEL_29;
  }
  id v10 = v9;
  id v11 = objc_msgSend(a1, sel_selectedToolItem);
  PKToolPickerItem.ink.getter((uint64_t)v7);

  isCGFloat a = PKInk._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  objc_msgSend(v10, sel_setInk_, isa);

  uint64_t v13 = *(void **)(v2 + v8);
  if (v13)
  {
    if (objc_msgSend(v13, sel_allowsFingerDrawing))
    {
      uint64_t v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
      swift_beginAccess();
      uint64_t v15 = *v14;
      uint64_t v16 = v15 + 64;
      uint64_t v17 = 1 << *(unsigned char *)(v15 + 32);
      uint64_t v18 = -1;
      if (v17 < 64) {
        uint64_t v18 = ~(-1 << v17);
      }
      unint64_t v19 = v18 & *(void *)(v15 + 64);
      int64_t v20 = (unint64_t)(v17 + 63) >> 6;
      swift_bridgeObjectRetain();
      int64_t v21 = 0;
      uint64_t v22 = MEMORY[0x263F8EE88];
      while (1)
      {
        if (v19)
        {
          unint64_t v23 = __clz(__rbit64(v19));
          v19 &= v19 - 1;
          unint64_t v24 = v23 | (v21 << 6);
        }
        else
        {
          int64_t v25 = v21 + 1;
          if (__OFADD__(v21, 1))
          {
            __break(1u);
            goto LABEL_28;
          }
          if (v25 >= v20) {
            goto LABEL_25;
          }
          unint64_t v26 = *(void *)(v16 + 8 * v25);
          ++v21;
          if (!v26)
          {
            int64_t v21 = v25 + 1;
            if (v25 + 1 >= v20) {
              goto LABEL_25;
            }
            unint64_t v26 = *(void *)(v16 + 8 * v21);
            if (!v26)
            {
              int64_t v21 = v25 + 2;
              if (v25 + 2 >= v20) {
                goto LABEL_25;
              }
              unint64_t v26 = *(void *)(v16 + 8 * v21);
              if (!v26)
              {
                int64_t v27 = v25 + 3;
                if (v27 >= v20)
                {
LABEL_25:
                  swift_release();
                  return;
                }
                unint64_t v26 = *(void *)(v16 + 8 * v27);
                if (!v26)
                {
                  while (1)
                  {
                    int64_t v21 = v27 + 1;
                    if (__OFADD__(v27, 1)) {
                      break;
                    }
                    if (v21 >= v20) {
                      goto LABEL_25;
                    }
                    unint64_t v26 = *(void *)(v16 + 8 * v21);
                    ++v27;
                    if (v26) {
                      goto LABEL_22;
                    }
                  }
LABEL_28:
                  __break(1u);
LABEL_29:
                  __break(1u);
                  goto LABEL_30;
                }
                int64_t v21 = v27;
              }
            }
          }
LABEL_22:
          unint64_t v19 = (v26 - 1) & v26;
          unint64_t v24 = __clz(__rbit64(v26)) + (v21 << 6);
        }
        uint64_t v28 = *(void **)(*(void *)(v15 + 56) + 16 * v24);
        type metadata accessor for AnyCanvas();
        if (swift_dynamicCastClass())
        {
          id v29 = v28;
          AnyCanvas.selection.setter(v22, v22, 6, 0);
        }
      }
    }
  }
  else
  {
LABEL_30:
    __break(1u);
  }
}

Swift::Void __swiftcall PaperDocumentView.updateToolPicker()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (!v2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_toolPicker];
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_toolPicker] = *v3;
  id v6 = v4;
  uint64_t v7 = v2;

  CanvasElementController.updateToolPickerContextualEditingView()();
  uint64_t v8 = *v3;
  if (*v3)
  {
    char v9 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
    swift_beginAccess();
    int v10 = *v9;
    id v11 = v8;
    objc_msgSend(v11, sel_setVisible_forFirstResponder_, v10 == 3, v1);
    double v12 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    if (!*v12)
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    objc_msgSend(v11, sel_setVisible_forFirstResponder_, v10 == 3);
    if (!*v12)
    {
LABEL_20:
      __break(1u);
      return;
    }
    id v13 = objc_msgSend(*v12, sel_documentScrollView);
    if (!v13)
    {
LABEL_12:

      return;
    }
    uint64_t v14 = v13;
    id v15 = objc_msgSend(v13, sel_subviews);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_8;
      }
    }
    else if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_8:
      if ((v16 & 0xC000000000000001) != 0)
      {
        id v17 = (id)MEMORY[0x21054E050](0, v16);
        goto LABEL_11;
      }
      if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v17 = *(id *)(v16 + 32);
LABEL_11:
        uint64_t v18 = v17;
        swift_bridgeObjectRelease();
        objc_msgSend(v11, sel_setVisible_forFirstResponder_, v10 == 3, v18);

        goto LABEL_12;
      }
      __break(1u);
      goto LABEL_18;
    }

    swift_bridgeObjectRelease();
  }
}

uint64_t PaperDocumentView.publisher.getter()
{
  return PaperDocumentView.publisher.getter();
}

{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type PassthroughSubject<Capsule<PaperDocument>, Never> and conformance PassthroughSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  return Publisher.eraseToAnyPublisher()();
}

uint64_t PaperDocumentView.livePublisher.getter()
{
  return PaperDocumentView.publisher.getter();
}

Swift::Void __swiftcall PaperDocumentView.updatePDFDocument(otherDocuments:)(Swift::OpaquePointer otherDocuments)
{
  uint64_t v2 = v1;
  Swift::Int rawValue = otherDocuments._rawValue;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v71 = (uint64_t)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for CRAsset();
  uint64_t v91 = *(void *)(v89 - 8);
  MEMORY[0x270FA5388](v89);
  uint64_t v75 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = v5;
  MEMORY[0x270FA5388](v6);
  uint64_t v74 = (char *)&v70 - v7;
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRAsset?, CRAsset?))
      - 8;
  MEMORY[0x270FA5388](v77);
  uint64_t v76 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v79 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v73 = (uint64_t)&v70 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v72 = (uint64_t)&v70 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v90 = (uint64_t)&v70 - v16;
  uint64_t v17 = type metadata accessor for PaperDocument(0);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v78 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  int64_t v25 = (char *)&v70 - v24;
  uint64_t v86 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument;
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument] = 1;
  unint64_t v26 = &v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  int64_t v27 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v27(v25, v26, v19);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.root.getter();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v85 = v25;
  v28(v25, v19);
  uint64_t v80 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument;
  id v29 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument];
  uint64_t v84 = v26;
  uint64_t v30 = v26;
  uint64_t v31 = v19;
  uint64_t v32 = (uint64_t)v76;
  uint64_t v82 = v20 + 16;
  uint64_t v81 = v27;
  v27(v22, v30, v31);
  uint64_t v33 = v90;
  uint64_t v34 = v29;
  uint64_t v35 = (uint64_t)v78;
  uint64_t v36 = (char *)specialized PaperDocument.update<A>(_:in:otherDocuments:use:)(v34, (uint64_t)v22, (uint64_t)rawValue, 0x8000000000000000);

  uint64_t v37 = v89;
  uint64_t v87 = v20 + 8;
  uint64_t v83 = (void (*)(uint64_t, uint64_t))v28;
  v28(v22, v31);
  _s8PaperKit0A8DocumentVWOhTm_0(v35, type metadata accessor for PaperDocument);
  uint64_t v78 = v36;
  specialized Collection.first.getter((uint64_t)v36, v33);
  Swift::Int rawValue = v2;
  uint64_t v38 = (uint64_t)&v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_updateDocAsset];
  swift_beginAccess();
  uint64_t v39 = v32 + *(int *)(v77 + 56);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v33, v32, &demangling cache variable for type metadata for CRAsset?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v38, v39, &demangling cache variable for type metadata for CRAsset?);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
  if (v40(v32, 1, v37) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v33, &demangling cache variable for type metadata for CRAsset?);
    if (v40(v39, 1, v37) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v32, &demangling cache variable for type metadata for CRAsset?);
      swift_bridgeObjectRelease();
      uint64_t v41 = rawValue;
      unint64_t v42 = (void *)&unk_26ACC4000;
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  uint64_t v43 = v72;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v32, v72, &demangling cache variable for type metadata for CRAsset?);
  if (v40(v39, 1, v37) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v33, &demangling cache variable for type metadata for CRAsset?);
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v43, v37);
LABEL_6:
    uint64_t v44 = v37;
    outlined destroy of StocksKitCurrencyCache.Provider?(v32, &demangling cache variable for type metadata for (CRAsset?, CRAsset?));
    uint64_t v41 = rawValue;
    unint64_t v42 = &unk_26ACC4000;
LABEL_9:
    uint64_t v49 = v42[216];
    if (*(void *)&v41[v49])
    {
      uint64_t v50 = swift_retain();
      MEMORY[0x21054D560](v50, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
      swift_release();
    }
    uint64_t v51 = v73;
    specialized Collection.first.getter((uint64_t)v78, v73);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    outlined assign with take of Date?(v51, v38, &demangling cache variable for type metadata for CRAsset?);
    swift_endAccess();
    *(void *)&v41[v49] = 0;
    swift_release();
    goto LABEL_12;
  }
  uint64_t v45 = v91;
  CGPDFDictionaryRef v46 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v91 + 32))(v74, v39, v37);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
  LODWORD(v77) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v47 = *(void (**)(char *, uint64_t))(v45 + 8);
  v47(v46, v37);
  outlined destroy of StocksKitCurrencyCache.Provider?(v90, &demangling cache variable for type metadata for CRAsset?);
  uint64_t v48 = v43;
  uint64_t v44 = v37;
  v47((char *)v48, v37);
  outlined destroy of StocksKitCurrencyCache.Provider?(v32, &demangling cache variable for type metadata for CRAsset?);
  uint64_t v41 = rawValue;
  unint64_t v42 = (void *)&unk_26ACC4000;
  if ((v77 & 1) == 0) {
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
LABEL_12:
  uint64_t v37 = v44;
LABEL_13:
  uint64_t v52 = v79;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v38, v79, &demangling cache variable for type metadata for CRAsset?);
  if (v40(v52, 1, v37) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v52, &demangling cache variable for type metadata for CRAsset?);
  }
  else
  {
    uint64_t v53 = v91;
    int64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v91 + 32);
    uint64_t v55 = v75;
    v54(v75, v52, v37);
    uint64_t v56 = v42[216];
    if (*(void *)&v41[v56])
    {
      (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v37);
    }
    else
    {
      uint64_t v57 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v71, 1, 1, v57);
      uint64_t v58 = v37;
      uint64_t v59 = swift_allocObject();
      swift_unknownObjectWeakInit();
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v74, v55, v58);
      type metadata accessor for MainActor();
      swift_retain();
      uint64_t v90 = static MainActor.shared.getter();
      uint64_t v60 = v53;
      unint64_t v61 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      unint64_t v62 = (v70 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v63 = swift_allocObject();
      uint64_t v64 = MEMORY[0x263F8F500];
      *(void *)(v63 + 16) = v90;
      *(void *)(v63 + 24) = v64;
      unint64_t v65 = v63 + v61;
      uint64_t v66 = v89;
      v54((char *)v65, (uint64_t)v74, v89);
      *(void *)(v63 + v62) = v59;
      swift_release();
      *(void *)&v41[v56] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v71, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:), v63);
      swift_release();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v75, v66);
    }
  }
  uint64_t v67 = *(void **)&v41[v80];
  uint64_t v68 = (uint64_t)v85;
  v81(v85, v84, v31);
  v92[0] = xmmword_20C834980;
  memset(&v92[1], 0, 59);
  id v69 = v67;
  specialized PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v68, 0x8000000000000000, (uint64_t)v92);

  v83(v68, v31);
  v41[v86] = 0;
}

uint64_t closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  type metadata accessor for MainActor();
  void v5[7] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[8] = v7;
  v5[9] = v6;
  return MEMORY[0x270FA2498](closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:), v7, v6);
}

uint64_t closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:)()
{
  if (static Task<>.isCancelled.getter())
  {
    swift_release();
    uint64_t v1 = (uint64_t (*)(void))v0[1];
    return v1();
  }
  else
  {
    uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static PaperKitPDFDocument._load(_:)
                                         + async function pointer to specialized static PaperKitPDFDocument._load(_:));
    uint64_t v3 = (void *)swift_task_alloc();
    v0[10] = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:);
    uint64_t v4 = v0[5];
    return v5(v4);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;

  uint64_t v1 = v0[11];
  swift_release();
  if (v1)
  {
    uint64_t v2 = (void *)v0[11];
    uint64_t v3 = v0[6] + 16;
    swift_beginAccess();
    uint64_t v4 = MEMORY[0x210550400](v3);
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      uint64_t v6 = v0[5];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CRAsset, PaperKitPDFDocument)>);
      uint64_t v7 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRAsset, PaperKitPDFDocument))
                 - 8);
      uint64_t v8 = (*(unsigned __int8 *)(*(void *)v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v7 + 80);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_20C832C20;
      uint64_t v10 = v9 + v8;
      uint64_t v11 = v7[14];
      uint64_t v12 = type metadata accessor for CRAsset();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v6, v12);
      *(void *)(v10 + v11) = v2;
      uint64_t v13 = v2;
      uint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(v9);
      PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v14);
      swift_bridgeObjectRelease();

      uint64_t v2 = v5;
    }
  }
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(void *)(v2 + 64);
  return MEMORY[0x270FA2498](closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:), v4, v3);
}

void specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1, int a2, uint64_t a3, char *a4, void *a5, uint64_t a6)
{
  uint64_t v103 = a3;
  int v94 = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v98 = (void (*)(char *, uint64_t, uint64_t))((char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v106 = type metadata accessor for CapsuleUndoAction();
  uint64_t v12 = *(void *)(v106 - 8);
  MEMORY[0x270FA5388](v106);
  uint64_t v91 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v104 = (char *)&v84 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v88 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v90 = (uint64_t)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v84 - v19;
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v96 = *(void *)(v97 - 8);
  MEMORY[0x270FA5388](v97);
  unint64_t v95 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v102 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  int64_t v27 = (char *)&v84 - v26;
  uint64_t v110 = a4;
  uint64_t v28 = &a4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  uint64_t v108 = v23;
  id v29 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  uint64_t v105 = v27;
  uint64_t v30 = v27;
  uint64_t v31 = v28;
  uint64_t v107 = v29;
  uint64_t v109 = v23 + 16;
  v29(v30, v28, v22);
  uint64_t v99 = a6;
  uint64_t v111 = a6;
  id v100 = a5;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  int v93 = a1;
  if (a1)
  {
    uint64_t v32 = v12;
    unint64_t v33 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v34 = v110;
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v33);
    swift_bridgeObjectRelease();
    uint64_t v35 = (id *)&v34[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    if (*v35)
    {
      objc_msgSend(*v35, sel_layoutDocumentView);
      id v36 = objc_msgSend(self, sel_defaultCenter);
      uint64_t v37 = (void *)MEMORY[0x21054D080](0xD000000000000014, 0x800000020C85C7C0);
      if (*v35)
      {
        id v38 = objc_msgSend(*v35, sel_document);
        objc_msgSend(v36, sel_postNotificationName_object_, v37, v38);

        uint64_t v12 = v32;
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_5:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v103, (uint64_t)v20, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v39 = v96;
  uint64_t v40 = v97;
  int v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v96 + 48))(v20, 1, v97);
  uint64_t v101 = v31;
  if (v41 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    uint64_t v42 = v108;
    uint64_t v43 = v105;
    uint64_t v44 = (uint64_t)v98;
    uint64_t v45 = v12;
  }
  else
  {
    uint64_t v87 = v12;
    CGPDFDictionaryRef v46 = v95;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v95, v20, v40);
    uint64_t v47 = v39;
    uint64_t v48 = (uint64_t *)&v110[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
    uint64_t v49 = swift_beginAccess();
    uint64_t v50 = *v48;
    MEMORY[0x270FA5388](v49);
    *(&v84 - 2) = (uint64_t)v46;
    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&v84 - 4), v50);
    uint64_t v52 = v51;
    int64_t v54 = v53;
    uint64_t v56 = v55;
    swift_bridgeObjectRelease();
    if (v52)
    {

      uint64_t ObjectType = swift_getObjectType();
      uint64_t v57 = v102;
      uint64_t v58 = v101;
      v107(v102, v101, v22);
      char v112 = 3;
      uint64_t v85 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 88);
      uint64_t v59 = type metadata accessor for PaperDocument(0);
      uint64_t v60 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      v85(v57, &v112, v59, v60, ObjectType, v56);

      uint64_t v61 = v40;
      uint64_t v42 = v108;
      (*(void (**)(char *, uint64_t))(v108 + 8))(v57, v22);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v61);
      uint64_t v31 = v58;
      uint64_t v45 = v87;
      uint64_t v43 = v105;
      uint64_t v44 = (uint64_t)v98;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v40);
      uint64_t v45 = v87;
      uint64_t v42 = v108;
      uint64_t v43 = v105;
      uint64_t v44 = (uint64_t)v98;
      uint64_t v31 = v101;
    }
  }
  unint64_t v62 = v102;
  v107(v102, v31, v22);
  Capsule.actionUndoingDifference(from:)();
  unint64_t v65 = *(void (**)(char *, uint64_t))(v42 + 8);
  uint64_t v64 = v42 + 8;
  uint64_t v63 = v65;
  v65(v62, v22);
  uint64_t v66 = v106;
  int v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v44, 1, v106);
  uint64_t v68 = v110;
  if (v67 == 1)
  {
    v63(v43, v22);
    outlined destroy of StocksKitCurrencyCache.Provider?(v44, &demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    uint64_t v69 = v45;
    uint64_t v98 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    v98(v104, v44, v66);
    uint64_t v70 = v107;
    v107(v62, v101, v22);
    PassthroughSubject.send(_:)();
    v63(v62, v22);
    uint64_t v71 = v68;
    uint64_t v72 = *(void *)&v68[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection];
    uint64_t v73 = v70;
    uint64_t v74 = v63;
    if (v72)
    {
      v73(v62, v101, v22);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v63(v62, v22);
    }
    uint64_t v108 = v64;
    uint64_t v109 = v22;
    id v75 = objc_msgSend(v71, sel_undoManager);
    uint64_t v76 = v106;
    uint64_t v77 = v104;
    if (v75)
    {
      uint64_t v78 = v75;
      uint64_t v79 = v90;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v103, v90, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      uint64_t v107 = (void (*)(char *, char *, uint64_t))v63;
      uint64_t v80 = v91;
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v91, v77, v76);
      unint64_t v81 = (*(unsigned __int8 *)(v88 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
      unint64_t v82 = (v89 + *(unsigned __int8 *)(v69 + 80) + v81) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
      uint64_t v83 = swift_allocObject();
      *(unsigned char *)(v83 + 16) = v93 & 1;
      *(unsigned char *)(v83 + 17) = v94 & 1;
      uint64_t v77 = v104;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v79, v83 + v81, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v98((char *)(v83 + v82), (uint64_t)v80, v76);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      uint64_t v74 = (void (*)(char *, uint64_t))v107;
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v69 + 8))(v77, v76);
    v74(v105, v109);
  }
  swift_bridgeObjectRelease();
}

void specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1, int a2, uint64_t a3, char *a4, void *a5, void *a6)
{
  id v92 = a6;
  uint64_t v94 = a3;
  int v87 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v90 = (void (*)(char *, uint64_t, uint64_t))((char *)&ObjectType - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v96 = type metadata accessor for CapsuleUndoAction();
  uint64_t v11 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  uint64_t v85 = (char *)&ObjectType - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v91 = (char *)&ObjectType - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v81 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v83 = (uint64_t)&ObjectType - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&ObjectType - v18;
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v88 = *(void *)(v89 - 8);
  MEMORY[0x270FA5388](v89);
  uint64_t v21 = (char *)&ObjectType - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  int v93 = (char *)&ObjectType - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  int64_t v27 = (char *)&ObjectType - v26;
  uint64_t v101 = a4;
  uint64_t v28 = &a4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  uint64_t v99 = v23;
  uint64_t v30 = v23 + 16;
  id v29 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  unint64_t v95 = v27;
  uint64_t v31 = v28;
  uint64_t v98 = v29;
  uint64_t v100 = v30;
  v29(v27, v28, v22);
  id v102 = v92;
  id v92 = a5;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  int v86 = a1;
  if (a1)
  {
    uint64_t v32 = v11;
    unint64_t v33 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v34 = v101;
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v33);
    swift_bridgeObjectRelease();
    uint64_t v35 = (id *)&v34[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    if (*v35)
    {
      objc_msgSend(*v35, sel_layoutDocumentView);
      id v36 = objc_msgSend(self, sel_defaultCenter);
      uint64_t v37 = (void *)MEMORY[0x21054D080](0xD000000000000014, 0x800000020C85C7C0);
      if (*v35)
      {
        id v38 = objc_msgSend(*v35, sel_document);
        objc_msgSend(v36, sel_postNotificationName_object_, v37, v38);

        uint64_t v11 = v32;
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_5:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v94, (uint64_t)v19, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v39 = v88;
  uint64_t v40 = v89;
  int v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 48))(v19, 1, v89);
  uint64_t v97 = v28;
  if (v41 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    uint64_t v42 = v99;
    uint64_t v43 = v95;
    uint64_t v44 = (uint64_t)v90;
    uint64_t v45 = v11;
  }
  else
  {
    uint64_t v80 = v11;
    CGPDFDictionaryRef v46 = v21;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v21, v19, v40);
    uint64_t v47 = v39;
    uint64_t v48 = (uint64_t *)&v101[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
    uint64_t v49 = swift_beginAccess();
    uint64_t v50 = *v48;
    MEMORY[0x270FA5388](v49);
    *(&ObjectType - 2) = (uint64_t)v21;
    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&ObjectType - 4), v50);
    uint64_t v52 = v51;
    int64_t v54 = v53;
    uint64_t v56 = v55;
    swift_bridgeObjectRelease();
    if (v52)
    {

      uint64_t ObjectType = swift_getObjectType();
      uint64_t v57 = v93;
      v98(v93, v97, v22);
      v103[0] = 3;
      uint64_t v58 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 88);
      uint64_t v59 = type metadata accessor for PaperDocument(0);
      uint64_t v60 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      v58(v57, v103, v59, v60, ObjectType, v56);

      uint64_t v61 = v40;
      uint64_t v42 = v99;
      (*(void (**)(char *, uint64_t))(v99 + 8))(v57, v22);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v61);
      uint64_t v31 = v97;
      uint64_t v45 = v80;
      uint64_t v43 = v95;
      uint64_t v44 = (uint64_t)v90;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v21, v40);
      uint64_t v45 = v80;
      uint64_t v42 = v99;
      uint64_t v43 = v95;
      uint64_t v44 = (uint64_t)v90;
      uint64_t v31 = v97;
    }
  }
  unint64_t v62 = v93;
  v98(v93, v31, v22);
  Capsule.actionUndoingDifference(from:)();
  unint64_t v65 = *(void (**)(char *, uint64_t))(v42 + 8);
  uint64_t v63 = v42 + 8;
  uint64_t v64 = v65;
  v65(v62, v22);
  uint64_t v66 = v96;
  int v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v44, 1, v96);
  uint64_t v68 = v101;
  if (v67 == 1)
  {
    v64(v43, v22);
    outlined destroy of StocksKitCurrencyCache.Provider?(v44, &demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    uint64_t v90 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    v90(v91, v44, v66);
    uint64_t v69 = v98;
    v98(v62, v97, v22);
    PassthroughSubject.send(_:)();
    v64(v62, v22);
    if (*(void *)&v68[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection])
    {
      v69(v62, v97, v22);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v64(v62, v22);
    }
    uint64_t v99 = v63;
    uint64_t v100 = v22;
    id v70 = objc_msgSend(v68, sel_undoManager);
    uint64_t v71 = v96;
    uint64_t v72 = v91;
    if (v70)
    {
      uint64_t v73 = v70;
      uint64_t v74 = v83;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v94, v83, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      uint64_t v98 = (void (*)(char *, char *, uint64_t))v64;
      id v75 = v85;
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v85, v72, v71);
      unint64_t v76 = (*(unsigned __int8 *)(v81 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
      unint64_t v77 = (v82 + *(unsigned __int8 *)(v45 + 80) + v76) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
      uint64_t v78 = swift_allocObject();
      *(unsigned char *)(v78 + 16) = v86 & 1;
      *(unsigned char *)(v78 + 17) = v87 & 1;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v74, v78 + v76, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v90((char *)(v78 + v77), (uint64_t)v75, v71);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      uint64_t v64 = (void (*)(char *, uint64_t))v98;
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v45 + 8))(v72, v71);
    v64(v95, v100);
  }
}

void *specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1, int a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5 = v4;
  uint64_t v98 = a3;
  int v91 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v95 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CapsuleUndoAction();
  uint64_t v101 = *(void *)(v10 - 8);
  uint64_t v102 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v88 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v99 = (char *)&v82 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v85 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v87 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v82 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v94 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  id v92 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v22 = *(char **)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v97 = (char *)&v82 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v82 - v25;
  int64_t v27 = &v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  uint64_t v103 = v22;
  uint64_t v104 = v21;
  uint64_t v28 = (void (*)(void, void, void))*((void *)v22 + 2);
  uint64_t v100 = v26;
  uint64_t v96 = v28;
  uint64_t v29 = ((uint64_t (*)(char *, char *, uint64_t))v28)(v26, v27, v21);
  a4(v29);
  int v90 = a1;
  if (a1)
  {
    unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v30);
    swift_bridgeObjectRelease();
    uint64_t v31 = (void **)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    id result = *v31;
    if (*v31)
    {
      objc_msgSend(result, sel_layoutDocumentView);
      id v33 = objc_msgSend(self, sel_defaultCenter);
      uint64_t v34 = (void *)MEMORY[0x21054D080](0xD000000000000014, 0x800000020C85C7C0);
      id result = *v31;
      if (*v31)
      {
        id v35 = objc_msgSend(result, sel_document);
        objc_msgSend(v33, sel_postNotificationName_object_, v34, v35);

        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_5:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v98, (uint64_t)v18, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v36 = v94;
  int v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 48))(v18, 1, v19);
  int v93 = v5;
  if (v37 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  else
  {
    id v38 = v92;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v92, v18, v19);
    uint64_t v39 = (uint64_t *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
    uint64_t v40 = swift_beginAccess();
    uint64_t v41 = *v39;
    MEMORY[0x270FA5388](v40);
    *(&v82 - 2) = (uint64_t)v38;
    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&v82 - 4), v41);
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    swift_bridgeObjectRelease();
    if (v43)
    {
      uint64_t v84 = v19;

      uint64_t ObjectType = swift_getObjectType();
      uint64_t v48 = v97;
      v96(v97, v27, v104);
      v105[0] = 3;
      uint64_t v49 = v36;
      uint64_t v50 = *(void (**)(void, void, void, void, void, void))(v47 + 88);
      uint64_t v51 = type metadata accessor for PaperDocument(0);
      uint64_t v52 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      v50(v48, v105, v51, v52, ObjectType, v47);

      uint64_t v53 = v103;
      (*((void (**)(char *, uint64_t))v103 + 1))(v48, v104);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v84);
      uint64_t v54 = v101;
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v19);
  }
  uint64_t v54 = v101;
  uint64_t v53 = v103;
LABEL_11:
  uint64_t v55 = v100;
  uint64_t v56 = v97;
  uint64_t v103 = v27;
  uint64_t v57 = v27;
  uint64_t v58 = v104;
  uint64_t v60 = (uint64_t)v95;
  uint64_t v59 = v96;
  v96(v97, v57, v104);
  Capsule.actionUndoingDifference(from:)();
  uint64_t v63 = (void (*)(void, void))*((void *)v53 + 1);
  unint64_t v62 = v53 + 8;
  uint64_t v61 = v63;
  v63(v56, v58);
  uint64_t v64 = v102;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v60, 1, v102) == 1)
  {
    v61(v55, v58);
    return (void *)outlined destroy of StocksKitCurrencyCache.Provider?(v60, &demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    unint64_t v65 = v93;
    unint64_t v95 = *(char **)(v54 + 32);
    uint64_t v94 = v54 + 32;
    ((void (*)(char *, uint64_t, uint64_t))v95)(v99, v60, v64);
    uint64_t v66 = v103;
    v59(v56, v103, v58);
    PassthroughSubject.send(_:)();
    v61(v56, v58);
    int v67 = v65;
    uint64_t v68 = *(void *)&v65[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection];
    uint64_t v69 = (uint64_t (*)(void, void))v61;
    if (v68)
    {
      v59(v56, v66, v58);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v61(v56, v58);
    }
    uint64_t v103 = v62;
    id v70 = objc_msgSend(v67, sel_undoManager);
    uint64_t v71 = v101;
    uint64_t v72 = v102;
    uint64_t v73 = v99;
    if (v70)
    {
      uint64_t v74 = v70;
      id v75 = v69;
      uint64_t v76 = v87;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v98, v87, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      unint64_t v77 = v88;
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v88, v73, v72);
      unint64_t v78 = (*(unsigned __int8 *)(v85 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
      unint64_t v79 = (v86 + *(unsigned __int8 *)(v71 + 80) + v78) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
      uint64_t v80 = swift_allocObject();
      *(unsigned char *)(v80 + 16) = v90 & 1;
      *(unsigned char *)(v80 + 17) = v91 & 1;
      uint64_t v81 = v80 + v78;
      uint64_t v73 = v99;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v76, v81, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      uint64_t v69 = v75;
      ((void (*)(unint64_t, char *, uint64_t))v95)(v80 + v79, v77, v72);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v72);
    return (void *)v69(v100, v104);
  }
}

void specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, char *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  id v101 = a7;
  uint64_t v100 = a6;
  uint64_t v104 = a3;
  int v92 = a2;
  uint64_t v99 = a8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v96 = (void (*)(char *, uint64_t, uint64_t))((char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for CapsuleUndoAction();
  uint64_t v107 = *(void *)(v13 - 8);
  uint64_t v108 = v13;
  MEMORY[0x270FA5388](v13);
  int v90 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v105 = (char *)&v84 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v86 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v88 = (uint64_t)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v84 - v20;
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v94 = *(void *)(v95 - 8);
  MEMORY[0x270FA5388](v95);
  int v93 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v98 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v102 = (char *)&v84 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v84 - v30;
  char v112 = a4;
  uint64_t v32 = (uint64_t)&a4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  uint64_t v109 = v27;
  id v33 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v106 = v31;
  uint64_t v111 = v32;
  uint64_t v103 = v27 + 16;
  uint64_t v110 = v33;
  v33(v31, v32, v26);
  uint64_t v113 = v100;
  id v114 = v101;
  id v101 = a5;
  swift_beginAccess();
  uint64_t v97 = v25;
  uint64_t v100 = v23;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  int v91 = a1;
  if ((a1 & 1) == 0) {
    goto LABEL_5;
  }
  unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  id v35 = v112;
  PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v34);
  swift_bridgeObjectRelease();
  uint64_t v36 = (id *)&v35[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  if (!*v36)
  {
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(*v36, sel_layoutDocumentView);
  id v37 = objc_msgSend(self, sel_defaultCenter);
  id v38 = (void *)MEMORY[0x21054D080](0xD000000000000014, 0x800000020C85C7C0);
  if (!*v36)
  {
LABEL_19:
    __break(1u);
    return;
  }
  id v39 = objc_msgSend(*v36, sel_document);
  objc_msgSend(v37, sel_postNotificationName_object_, v38, v39);

LABEL_5:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v104, (uint64_t)v21, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v40 = v94;
  uint64_t v41 = v95;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v21, 1, v95) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    uint64_t v42 = v107;
    uint64_t v43 = v109;
  }
  else
  {
    uint64_t v44 = v93;
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v93, v21, v41);
    uint64_t v45 = (uint64_t *)&v112[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
    uint64_t v46 = swift_beginAccess();
    uint64_t v47 = *v45;
    MEMORY[0x270FA5388](v46);
    *(&v84 - 2) = (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))v44;
    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&v84 - 4), v47);
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    uint64_t v53 = v52;
    swift_bridgeObjectRelease();
    uint64_t v43 = v109;
    if (v49)
    {

      uint64_t ObjectType = swift_getObjectType();
      uint64_t v54 = v102;
      v110(v102, v111, v26);
      char v115 = 3;
      uint64_t v84 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 88);
      uint64_t v55 = type metadata accessor for PaperDocument(0);
      uint64_t v56 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      v84(v54, &v115, v55, v56, ObjectType, v53);

      (*(void (**)(char *, uint64_t))(v43 + 8))(v54, v26);
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v41);
    uint64_t v42 = v107;
  }
  uint64_t v57 = v106;
  uint64_t v58 = (uint64_t)v96;
  uint64_t v59 = v102;
  v110(v102, v111, v26);
  Capsule.actionUndoingDifference(from:)();
  unint64_t v62 = *(void (**)(char *, uint64_t))(v43 + 8);
  uint64_t v61 = v43 + 8;
  uint64_t v60 = v62;
  v62(v59, v26);
  uint64_t v63 = v108;
  int v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v58, 1, v108);
  unint64_t v65 = v112;
  if (v64 == 1)
  {
    v60(v57, v26);
    outlined destroy of StocksKitCurrencyCache.Provider?(v58, &demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    uint64_t v96 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 32);
    v96(v105, v58, v63);
    int v67 = v110;
    uint64_t v66 = v111;
    v110(v59, v111, v26);
    PassthroughSubject.send(_:)();
    v60(v59, v26);
    uint64_t v68 = v66;
    uint64_t v69 = v67;
    id v70 = v60;
    if (*(void *)&v65[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection])
    {
      v69(v59, v68, v26);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v60(v59, v26);
    }
    uint64_t v111 = v26;
    id v71 = objc_msgSend(v65, sel_undoManager);
    uint64_t v72 = v107;
    uint64_t v73 = v108;
    uint64_t v74 = v105;
    if (v71)
    {
      id v75 = v71;
      uint64_t v76 = v88;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v104, v88, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      unint64_t v77 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
      uint64_t v109 = v61;
      unint64_t v78 = v90;
      v77(v90, v74, v73);
      unint64_t v79 = v70;
      unint64_t v80 = (*(unsigned __int8 *)(v86 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
      unint64_t v81 = (v87 + *(unsigned __int8 *)(v72 + 80) + v80) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
      uint64_t v82 = swift_allocObject();
      *(unsigned char *)(v82 + 16) = v91 & 1;
      *(unsigned char *)(v82 + 17) = v92 & 1;
      uint64_t v83 = v82 + v80;
      id v70 = v79;
      uint64_t v74 = v105;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v76, v83, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v96((char *)(v82 + v81), (uint64_t)v78, v73);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v73);
    v70(v106, v111);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v99, v97, v100);
}

void specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, char *a4@<X3>, void *a5@<X4>, long long *a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  id v102 = a7;
  uint64_t v105 = a3;
  int v92 = a2;
  int v107 = a1;
  uint64_t v99 = a8;
  long long v101 = *a6;
  long long v100 = a6[1];
  uint64_t v10 = *((void *)a6 + 4);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v97 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for CapsuleUndoAction();
  uint64_t v13 = *(void *)(v109 - 8);
  MEMORY[0x270FA5388](v109);
  int v91 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v106 = (char *)&v84 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v87 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v89 = (uint64_t)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v84 - v20;
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v95 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  int v93 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v98 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v103 = (char *)&v84 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v84 - v30;
  uint64_t v113 = a4;
  uint64_t v32 = &a4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  uint64_t v110 = v27;
  id v33 = *(void (**)(void, void, void))(v27 + 16);
  uint64_t v108 = v31;
  char v112 = v32;
  uint64_t v104 = v27 + 16;
  uint64_t v111 = v33;
  v33(v31, v32, v26);
  long long v114 = v101;
  long long v115 = v100;
  uint64_t v116 = v10;
  id v117 = v102;
  id v102 = a5;
  swift_beginAccess();
  *(void *)&long long v100 = v25;
  uint64_t v34 = v26;
  *(void *)&long long v101 = v23;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  if ((v107 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v35 = v13;
  unint64_t v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  id v37 = v113;
  PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v36);
  swift_bridgeObjectRelease();
  id v38 = (id *)&v37[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  if (!*v38)
  {
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(*v38, sel_layoutDocumentView);
  id v39 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v40 = (void *)MEMORY[0x21054D080](0xD000000000000014, 0x800000020C85C7C0);
  if (!*v38)
  {
LABEL_19:
    __break(1u);
    return;
  }
  id v41 = objc_msgSend(*v38, sel_document);
  objc_msgSend(v39, sel_postNotificationName_object_, v40, v41);

  uint64_t v13 = v35;
LABEL_5:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v105, (uint64_t)v21, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v42 = v95;
  uint64_t v43 = v96;
  int v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v95 + 48))(v21, 1, v96);
  uint64_t v94 = v13;
  if (v44 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    uint64_t v45 = v110;
  }
  else
  {
    uint64_t v46 = v93;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v93, v21, v43);
    uint64_t v47 = (uint64_t *)&v113[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
    uint64_t v48 = swift_beginAccess();
    uint64_t v49 = *v47;
    MEMORY[0x270FA5388](v48);
    *(&v84 - 2) = (uint64_t)v46;
    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&v84 - 4), v49);
    uint64_t v51 = v50;
    uint64_t v53 = v52;
    uint64_t v55 = v54;
    swift_bridgeObjectRelease();
    uint64_t v45 = v110;
    if (v51)
    {

      uint64_t ObjectType = swift_getObjectType();
      uint64_t v56 = v103;
      v111(v103, v112, v34);
      char v118 = 3;
      uint64_t v85 = *(void (**)(void, void, void, void, void, void))(v55 + 88);
      uint64_t v57 = type metadata accessor for PaperDocument(0);
      uint64_t v58 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      v85(v56, &v118, v57, v58, ObjectType, v55);

      (*(void (**)(char *, uint64_t))(v45 + 8))(v56, v34);
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v46, v43);
    uint64_t v13 = v94;
  }
  uint64_t v59 = v108;
  uint64_t v60 = (uint64_t)v97;
  uint64_t v61 = v103;
  v111(v103, v112, v34);
  Capsule.actionUndoingDifference(from:)();
  int v64 = *(char **)(v45 + 8);
  uint64_t v63 = v45 + 8;
  unint64_t v62 = v64;
  ((void (*)(char *, uint64_t))v64)(v61, v34);
  uint64_t v65 = v109;
  int v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v60, 1, v109);
  int v67 = v113;
  if (v66 == 1)
  {
    ((void (*)(char *, uint64_t))v62)(v59, v34);
    outlined destroy of StocksKitCurrencyCache.Provider?(v60, &demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    uint64_t v97 = *(char **)(v13 + 32);
    uint64_t v96 = v13 + 32;
    ((void (*)(char *, uint64_t, uint64_t))v97)(v106, v60, v65);
    uint64_t v68 = v112;
    uint64_t v69 = v111;
    v111(v61, v112, v34);
    PassthroughSubject.send(_:)();
    ((void (*)(char *, uint64_t))v62)(v61, v34);
    id v70 = v68;
    id v71 = v62;
    if (*(void *)&v67[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection])
    {
      v69(v61, v70, v34);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      ((void (*)(char *, uint64_t))v62)(v61, v34);
    }
    uint64_t v72 = v34;
    id v73 = objc_msgSend(v67, sel_undoManager);
    uint64_t v74 = v109;
    uint64_t v75 = v94;
    uint64_t v76 = v106;
    if (v73)
    {
      unint64_t v77 = v73;
      uint64_t v78 = v89;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v105, v89, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      char v112 = v71;
      unint64_t v79 = *(void (**)(void, void, void))(v75 + 16);
      uint64_t v110 = v63;
      unint64_t v80 = v91;
      v79(v91, v76, v74);
      unint64_t v81 = (*(unsigned __int8 *)(v87 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
      unint64_t v82 = (v88 + *(unsigned __int8 *)(v75 + 80) + v81) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
      uint64_t v83 = swift_allocObject();
      *(unsigned char *)(v83 + 16) = v107 & 1;
      *(unsigned char *)(v83 + 17) = v92 & 1;
      uint64_t v76 = v106;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v78, v83 + v81, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      ((void (*)(unint64_t, char *, uint64_t))v97)(v83 + v82, v80, v74);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      id v71 = v112;
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v74);
    ((void (*)(char *, uint64_t))v71)(v108, v72);
  }
  (*(void (**)(uint64_t, void, void))(v98 + 32))(v99, v100, v101);
}

void specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, char *a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  id v97 = a7;
  id v106 = a6;
  long long v100 = (void (*)(char *, uint64_t))a3;
  int v87 = a2;
  int v101 = a1;
  uint64_t v96 = a8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v10 - 8);
  int v91 = (void (*)(char *, uint64_t, uint64_t))((char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v104 = type metadata accessor for CapsuleUndoAction();
  uint64_t v103 = *(void *)(v104 - 8);
  MEMORY[0x270FA5388](v104);
  uint64_t v86 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v95 = (char *)&v79 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v82 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v84 = (uint64_t)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v79 - v18;
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v89 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90);
  uint64_t v88 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v93 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v79 - v29;
  int v107 = a4;
  uint64_t v31 = (uint64_t)&a4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  uint64_t v108 = v25;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  id v102 = v30;
  uint64_t v105 = v31;
  uint64_t v99 = v25 + 16;
  uint64_t v98 = v32;
  v32(v30, v31, v24);
  id v109 = v106;
  id v110 = v97;
  uint64_t v111 = a5;
  id v97 = a5;
  swift_beginAccess();
  int v92 = v23;
  uint64_t v94 = v21;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  if ((v101 & 1) == 0) {
    goto LABEL_5;
  }
  unint64_t v33 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v34 = v107;
  PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v33);
  swift_bridgeObjectRelease();
  uint64_t v35 = (id *)&v34[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  if (!*v35)
  {
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(*v35, sel_layoutDocumentView);
  id v36 = objc_msgSend(self, sel_defaultCenter);
  id v37 = (void *)MEMORY[0x21054D080](0xD000000000000014, 0x800000020C85C7C0);
  if (!*v35)
  {
LABEL_19:
    __break(1u);
    return;
  }
  id v38 = objc_msgSend(*v35, sel_document);
  objc_msgSend(v36, sel_postNotificationName_object_, v37, v38);

LABEL_5:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v100, (uint64_t)v19, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v39 = v89;
  uint64_t v40 = v90;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v19, 1, v90) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    uint64_t v41 = v108;
  }
  else
  {
    uint64_t v42 = v88;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v88, v19, v40);
    uint64_t v43 = (uint64_t *)&v107[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
    uint64_t v44 = swift_beginAccess();
    uint64_t v45 = *v43;
    MEMORY[0x270FA5388](v44);
    *(&v79 - 2) = (uint64_t)v42;
    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&v79 - 4), v45);
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    swift_bridgeObjectRelease();
    uint64_t v41 = v108;
    if (v47)
    {

      uint64_t ObjectType = swift_getObjectType();
      v98(v27, v105, v24);
      v112[0] = 3;
      unint64_t v80 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 88);
      uint64_t v52 = v41;
      uint64_t v53 = type metadata accessor for PaperDocument(0);
      uint64_t v54 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      uint64_t v55 = v53;
      uint64_t v41 = v52;
      v80(v27, v112, v55, v54, ObjectType, v51);

      (*(void (**)(char *, uint64_t))(v52 + 8))(v27, v24);
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v40);
  }
  uint64_t v56 = v102;
  uint64_t v57 = (uint64_t)v91;
  uint64_t v58 = v98;
  v98(v27, v105, v24);
  Capsule.actionUndoingDifference(from:)();
  uint64_t v59 = *(void (**)(char *, uint64_t))(v41 + 8);
  uint64_t v108 = v41 + 8;
  v59(v27, v24);
  uint64_t v60 = v103;
  uint64_t v61 = v104;
  int v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v57, 1, v104);
  uint64_t v63 = v107;
  if (v62 == 1)
  {
    v59(v56, v24);
    outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    int v91 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 32);
    v91(v95, v57, v61);
    uint64_t v64 = v105;
    v58(v27, v105, v24);
    PassthroughSubject.send(_:)();
    v59(v27, v24);
    uint64_t v65 = v64;
    int v66 = v59;
    if (*(void *)&v63[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection])
    {
      v58(v27, v65, v24);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v59(v27, v24);
    }
    uint64_t v105 = v24;
    id v67 = objc_msgSend(v63, sel_undoManager);
    uint64_t v68 = v104;
    uint64_t v69 = v103;
    id v70 = v95;
    if (v67)
    {
      id v71 = v67;
      uint64_t v72 = v84;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v100, v84, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      id v73 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
      long long v100 = v59;
      uint64_t v74 = v86;
      v73(v86, v70, v68);
      unint64_t v75 = (*(unsigned __int8 *)(v82 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
      unint64_t v76 = (v83 + *(unsigned __int8 *)(v69 + 80) + v75) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
      uint64_t v77 = swift_allocObject();
      *(unsigned char *)(v77 + 16) = v101 & 1;
      *(unsigned char *)(v77 + 17) = v87 & 1;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v72, v77 + v75, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      uint64_t v78 = v74;
      int v66 = v100;
      v91((char *)(v77 + v76), (uint64_t)v78, v68);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v68);
    v66(v102, v105);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v96, v92, v94);
}

void *specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1, int a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v5 = v4;
  uint64_t v97 = a3;
  int v90 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v94 = (char *)&ObjectType - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CapsuleUndoAction();
  uint64_t v100 = *(void *)(v10 - 8);
  uint64_t v101 = v10;
  MEMORY[0x270FA5388](v10);
  int v87 = (char *)&ObjectType - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v98 = (char *)&ObjectType - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v84 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v86 = (uint64_t)&ObjectType - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&ObjectType - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v93 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  int v91 = (char *)&ObjectType - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v22 = *(char **)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v96 = (char *)&ObjectType - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&ObjectType - v25;
  uint64_t v27 = &v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  id v102 = v22;
  uint64_t v103 = v21;
  uint64_t v28 = (void (*)(void, void, void))*((void *)v22 + 2);
  uint64_t v99 = v26;
  uint64_t v95 = v28;
  uint64_t v29 = ((uint64_t (*)(char *, char *, uint64_t))v28)(v26, v27, v21);
  a4(&v105, v29);
  int v89 = a1;
  if (a1)
  {
    unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v30);
    swift_bridgeObjectRelease();
    uint64_t v31 = (void **)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    id result = *v31;
    if (*v31)
    {
      objc_msgSend(result, sel_layoutDocumentView);
      id v33 = objc_msgSend(self, sel_defaultCenter);
      uint64_t v34 = (void *)MEMORY[0x21054D080](0xD000000000000014, 0x800000020C85C7C0);
      id result = *v31;
      if (*v31)
      {
        id v35 = objc_msgSend(result, sel_document);
        objc_msgSend(v33, sel_postNotificationName_object_, v34, v35);

        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_5:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v97, (uint64_t)v18, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v36 = v93;
  int v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v93 + 48))(v18, 1, v19);
  int v92 = v5;
  if (v37 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
LABEL_10:
    uint64_t v54 = v100;
    uint64_t v53 = v102;
    goto LABEL_11;
  }
  id v38 = v91;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v91, v18, v19);
  uint64_t v39 = (uint64_t *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
  uint64_t v40 = swift_beginAccess();
  uint64_t v41 = *v39;
  MEMORY[0x270FA5388](v40);
  *(&ObjectType - 2) = (uint64_t)v38;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&ObjectType - 4), v41);
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  swift_bridgeObjectRelease();
  if (!v43)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v19);
    goto LABEL_10;
  }
  uint64_t v83 = v19;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v48 = v96;
  v95(v96, v27, v103);
  v104[0] = 3;
  uint64_t v49 = v36;
  uint64_t v50 = *(void (**)(void, void, void, void, void, void))(v47 + 88);
  uint64_t v51 = type metadata accessor for PaperDocument(0);
  uint64_t v52 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  v50(v48, v104, v51, v52, ObjectType, v47);

  uint64_t v53 = v102;
  (*((void (**)(char *, uint64_t))v102 + 1))(v48, v103);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v83);
  uint64_t v54 = v100;
LABEL_11:
  uint64_t v55 = v99;
  uint64_t v56 = (uint64_t)v94;
  uint64_t v57 = v96;
  id v102 = v27;
  uint64_t v58 = v27;
  uint64_t v59 = v103;
  uint64_t v60 = v95;
  v95(v96, v58, v103);
  Capsule.actionUndoingDifference(from:)();
  uint64_t v63 = (void (*)(void, void))*((void *)v53 + 1);
  int v62 = v53 + 8;
  uint64_t v61 = v63;
  v63(v57, v59);
  uint64_t v64 = v101;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v56, 1, v101) == 1)
  {
    v61(v55, v59);
    outlined destroy of StocksKitCurrencyCache.Provider?(v56, &demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    uint64_t v65 = v92;
    uint64_t v94 = *(char **)(v54 + 32);
    uint64_t v93 = v54 + 32;
    ((void (*)(char *, uint64_t, uint64_t))v94)(v98, v56, v64);
    int v66 = v102;
    v60(v57, v102, v59);
    PassthroughSubject.send(_:)();
    v61(v57, v59);
    id v67 = v65;
    uint64_t v68 = *(void *)&v65[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection];
    uint64_t v69 = v61;
    if (v68)
    {
      v60(v57, v66, v59);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v61(v57, v59);
    }
    id v102 = v62;
    id v70 = objc_msgSend(v67, sel_undoManager);
    uint64_t v71 = v100;
    uint64_t v72 = v101;
    id v73 = v98;
    if (v70)
    {
      uint64_t v74 = v70;
      unint64_t v75 = v69;
      uint64_t v76 = v86;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v97, v86, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      uint64_t v77 = v87;
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v87, v73, v72);
      unint64_t v78 = (*(unsigned __int8 *)(v84 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      unint64_t v79 = (v85 + *(unsigned __int8 *)(v71 + 80) + v78) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
      uint64_t v80 = swift_allocObject();
      *(unsigned char *)(v80 + 16) = v89 & 1;
      *(unsigned char *)(v80 + 17) = v90 & 1;
      uint64_t v81 = v80 + v78;
      id v73 = v98;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v76, v81, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      uint64_t v69 = v75;
      ((void (*)(unint64_t, char *, uint64_t))v94)(v80 + v79, v77, v72);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v72);
    v69(v99, v103);
  }
  return (void *)v105;
}

{
  char *v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void (*v28)(void, void, void);
  uint64_t v29;
  unint64_t v30;
  void **v31;
  void *result;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  int v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  void (*v61)(char *, uint64_t);
  char *v62;
  void (*v63)(void, void);
  uint64_t v64;
  char *v65;
  char *v66;
  void *v67;
  uint64_t v68;
  void (*v69)(void, void);
  id v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  void *v74;
  void (*v75)(void, void);
  uint64_t v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t ObjectType;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  int v90;
  char *v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  void (*v95)(char *, char *, uint64_t);
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char v104[9];
  uint64_t v105;

  uint64_t v5 = v4;
  uint64_t v97 = a3;
  int v90 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v94 = (char *)&ObjectType - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CapsuleUndoAction();
  uint64_t v100 = *(void *)(v10 - 8);
  uint64_t v101 = v10;
  MEMORY[0x270FA5388](v10);
  int v87 = (char *)&ObjectType - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v98 = (char *)&ObjectType - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v84 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v86 = (uint64_t)&ObjectType - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&ObjectType - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v93 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  int v91 = (char *)&ObjectType - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v22 = *(char **)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v96 = (char *)&ObjectType - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&ObjectType - v25;
  uint64_t v27 = &v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  id v102 = v22;
  uint64_t v103 = v21;
  uint64_t v28 = (void (*)(void, void, void))*((void *)v22 + 2);
  uint64_t v99 = v26;
  uint64_t v95 = v28;
  uint64_t v29 = ((uint64_t (*)(char *, char *, uint64_t))v28)(v26, v27, v21);
  a4(&v105, v29);
  int v89 = a1;
  if (a1)
  {
    unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v30);
    swift_bridgeObjectRelease();
    uint64_t v31 = (void **)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    id result = *v31;
    if (*v31)
    {
      objc_msgSend(result, sel_layoutDocumentView);
      id v33 = objc_msgSend(self, sel_defaultCenter);
      uint64_t v34 = (void *)MEMORY[0x21054D080](0xD000000000000014, 0x800000020C85C7C0);
      id result = *v31;
      if (*v31)
      {
        id v35 = objc_msgSend(result, sel_document);
        objc_msgSend(v33, sel_postNotificationName_object_, v34, v35);

        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_5:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v97, (uint64_t)v18, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v36 = v93;
  int v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v93 + 48))(v18, 1, v19);
  int v92 = v5;
  if (v37 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
LABEL_10:
    uint64_t v54 = v100;
    uint64_t v53 = v102;
    goto LABEL_11;
  }
  id v38 = v91;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v91, v18, v19);
  uint64_t v39 = (uint64_t *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
  uint64_t v40 = swift_beginAccess();
  uint64_t v41 = *v39;
  MEMORY[0x270FA5388](v40);
  *(&ObjectType - 2) = (uint64_t)v38;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&ObjectType - 4), v41);
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  swift_bridgeObjectRelease();
  if (!v43)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v19);
    goto LABEL_10;
  }
  uint64_t v83 = v19;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v48 = v96;
  v95(v96, v27, v103);
  v104[0] = 3;
  uint64_t v49 = v36;
  uint64_t v50 = *(void (**)(void, void, void, void, void, void))(v47 + 88);
  uint64_t v51 = type metadata accessor for PaperDocument(0);
  uint64_t v52 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  v50(v48, v104, v51, v52, ObjectType, v47);

  uint64_t v53 = v102;
  (*((void (**)(char *, uint64_t))v102 + 1))(v48, v103);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v83);
  uint64_t v54 = v100;
LABEL_11:
  uint64_t v55 = v99;
  uint64_t v56 = (uint64_t)v94;
  uint64_t v57 = v96;
  id v102 = v27;
  uint64_t v58 = v27;
  uint64_t v59 = v103;
  uint64_t v60 = v95;
  v95(v96, v58, v103);
  Capsule.actionUndoingDifference(from:)();
  uint64_t v63 = (void (*)(void, void))*((void *)v53 + 1);
  int v62 = v53 + 8;
  uint64_t v61 = v63;
  v63(v57, v59);
  uint64_t v64 = v101;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v56, 1, v101) == 1)
  {
    v61(v55, v59);
    outlined destroy of StocksKitCurrencyCache.Provider?(v56, &demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    uint64_t v65 = v92;
    uint64_t v94 = *(char **)(v54 + 32);
    uint64_t v93 = v54 + 32;
    ((void (*)(char *, uint64_t, uint64_t))v94)(v98, v56, v64);
    int v66 = v102;
    v60(v57, v102, v59);
    PassthroughSubject.send(_:)();
    v61(v57, v59);
    id v67 = v65;
    uint64_t v68 = *(void *)&v65[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection];
    uint64_t v69 = v61;
    if (v68)
    {
      v60(v57, v66, v59);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v61(v57, v59);
    }
    id v102 = v62;
    id v70 = objc_msgSend(v67, sel_undoManager);
    uint64_t v71 = v100;
    uint64_t v72 = v101;
    id v73 = v98;
    if (v70)
    {
      uint64_t v74 = v70;
      unint64_t v75 = v69;
      uint64_t v76 = v86;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v97, v86, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      uint64_t v77 = v87;
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v87, v73, v72);
      unint64_t v78 = (*(unsigned __int8 *)(v84 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      unint64_t v79 = (v85 + *(unsigned __int8 *)(v71 + 80) + v78) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
      uint64_t v80 = swift_allocObject();
      *(unsigned char *)(v80 + 16) = v89 & 1;
      *(unsigned char *)(v80 + 17) = v90 & 1;
      uint64_t v81 = v80 + v78;
      id v73 = v98;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v76, v81, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      uint64_t v69 = v75;
      ((void (*)(unint64_t, char *, uint64_t))v94)(v80 + v79, v77, v72);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v72);
    v69(v99, v103);
  }
  return (void *)v105;
}

void *specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1, int a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(id *), uint64_t a7, uint64_t a8)
{
  uint64_t v93 = a8;
  uint64_t v91 = a7;
  uint64_t ObjectType = a6;
  uint64_t v98 = a4;
  uint64_t v100 = a3;
  int v92 = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v97 = (void (*)(char *, uint64_t, uint64_t))((char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for CapsuleUndoAction();
  uint64_t v103 = *(void *)(v12 - 8);
  uint64_t v104 = v12;
  MEMORY[0x270FA5388](v12);
  int v89 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v101 = (char *)&v85 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v86 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v88 = (uint64_t)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v85 - v19;
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v21 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  uint64_t v94 = (char *)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v85 - v28;
  uint64_t v108 = v8;
  uint64_t v30 = (uint64_t)&v8[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  uint64_t v106 = v30;
  uint64_t v107 = v24;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  id v102 = v29;
  uint64_t v99 = v24 + 16;
  uint64_t v105 = v31;
  uint64_t v32 = ((uint64_t (*)(char *, uint64_t, uint64_t))v31)(v29, v30, v23);
  v98(v32);
  LODWORD(v98) = a1;
  if (a1)
  {
    unint64_t v33 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v34 = v108;
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v33);
    swift_bridgeObjectRelease();
    id v35 = (void **)&v34[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    id result = *v35;
    if (*v35)
    {
      objc_msgSend(result, sel_layoutDocumentView);
      id v37 = objc_msgSend(self, sel_defaultCenter);
      id v38 = (void *)MEMORY[0x21054D080](0xD000000000000014, 0x800000020C85C7C0);
      id result = *v35;
      if (*v35)
      {
        id v39 = objc_msgSend(result, sel_document);
        objc_msgSend(v37, sel_postNotificationName_object_, v38, v39);

        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_5:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v100, (uint64_t)v20, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v40 = v21;
  uint64_t v41 = v96;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v96) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  else
  {
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    uint64_t v43 = v94;
    v42(v94, v20, v41);
    uint64_t v44 = (uint64_t *)&v108[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
    uint64_t v45 = swift_beginAccess();
    uint64_t v46 = *v44;
    MEMORY[0x270FA5388](v45);
    *(&v85 - 2) = (uint64_t)v43;
    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)(ObjectType, (uint64_t)(&v85 - 4), v46);
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    swift_bridgeObjectRelease();
    if (v48)
    {

      uint64_t ObjectType = (uint64_t (*)(id *))swift_getObjectType();
      v105(v26, v106, v23);
      v109[0] = 3;
      uint64_t v53 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t (*)(id *), uint64_t))(v52 + 88);
      uint64_t v54 = type metadata accessor for PaperDocument(0);
      uint64_t v55 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      v53(v26, v109, v54, v55, ObjectType, v52);

      uint64_t v56 = v40;
      uint64_t v57 = v107;
      (*(void (**)(char *, uint64_t))(v107 + 8))(v26, v23);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v43, v41);
      uint64_t v58 = v103;
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v41);
  }
  uint64_t v58 = v103;
  uint64_t v57 = v107;
LABEL_11:
  uint64_t v59 = v102;
  uint64_t v60 = (uint64_t)v97;
  v105(v26, v106, v23);
  Capsule.actionUndoingDifference(from:)();
  uint64_t v63 = *(void (**)(char *, uint64_t))(v57 + 8);
  uint64_t v62 = v57 + 8;
  uint64_t v61 = v63;
  v63(v26, v23);
  uint64_t v64 = v104;
  int v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v60, 1, v104);
  int v66 = v108;
  if (v65 == 1)
  {
    v61(v59, v23);
    return (void *)outlined destroy of StocksKitCurrencyCache.Provider?(v60, &demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    uint64_t v97 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 32);
    v97(v101, v60, v64);
    uint64_t v68 = v105;
    uint64_t v67 = v106;
    v105(v26, v106, v23);
    PassthroughSubject.send(_:)();
    v61(v26, v23);
    uint64_t v69 = v67;
    id v70 = v68;
    uint64_t v71 = v61;
    if (*(void *)&v66[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection])
    {
      v70(v26, v69, v23);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v61(v26, v23);
    }
    uint64_t v106 = v23;
    uint64_t v107 = v62;
    id v72 = objc_msgSend(v66, sel_undoManager);
    uint64_t v73 = v103;
    uint64_t v74 = v104;
    unint64_t v75 = v101;
    if (v72)
    {
      uint64_t v76 = v72;
      uint64_t v77 = v88;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v100, v88, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      unint64_t v78 = v89;
      (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v89, v75, v74);
      uint64_t v79 = v74;
      uint64_t v80 = v71;
      unint64_t v81 = (*(unsigned __int8 *)(v86 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
      unint64_t v82 = (v87 + *(unsigned __int8 *)(v73 + 80) + v81) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
      uint64_t v83 = swift_allocObject();
      *(unsigned char *)(v83 + 16) = v98 & 1;
      *(unsigned char *)(v83 + 17) = v92 & 1;
      uint64_t v84 = v83 + v81;
      uint64_t v71 = v80;
      uint64_t v74 = v79;
      unint64_t v75 = v101;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v77, v84, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v97((char *)(v83 + v82), (uint64_t)v78, v74);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v74);
    return (void *)((uint64_t (*)(char *, uint64_t))v71)(v102, v106);
  }
}

uint64_t closure #1 in closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CapsuleUndoAction();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  Capsule.apply(_:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for CapsuleUndoAction?);
  return swift_endAccess();
}

void PaperDocumentView.merge<A>(_:from:page:)(uint64_t a1, unsigned __int8 *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v62 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v66 = *a2;
  if (!v66 && *(void *)(v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection))
  {
    swift_retain();
    CRMulticastSyncManager.merge<A>(_:sendDelta:)();
    swift_release();
  }
  uint64_t v15 = v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  Capsule.merge<A>(_:)();
  swift_endAccess();
  uint64_t v61 = v15;
  if (a3)
  {
    uint64_t v16 = *(void **)(v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument);
    uint64_t v17 = (uint64_t)v62;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v62, v15, v12);
    v69[0] = xmmword_20C834980;
    memset(&v69[1], 0, 59);
    id v18 = a3;
    id v19 = v16;
    specialized PaperKitPDFDocument.updatePDFPage<A>(in:use:options:page:)(v17, 0x8000000000000000, (uint64_t)v69, (uint64_t)v18);

    uint64_t v20 = (char *)v17;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v12);
    if (v66 == 4)
    {
    }
    else
    {
      uint64_t v41 = a5;
      uint64_t v42 = (uint64_t *)(v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
      swift_beginAccess();
      uint64_t v43 = *v42;
      if (*(void *)(*v42 + 16))
      {
        id v44 = v18;
        swift_bridgeObjectRetain();
        unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v44);
        if (v46)
        {
          uint64_t v47 = *(void *)(v43 + 56) + 16 * v45;
          uint64_t v48 = *(void *)(v47 + 8);
          id v49 = *(id *)v47;
          swift_bridgeObjectRelease();

          uint64_t ObjectType = swift_getObjectType();
          char v67 = v66;
          (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 88))(a1, &v67, a4, v41, ObjectType, v48);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else
      {
      }
LABEL_35:
      uint64_t v20 = v62;
      if ((v66 - 3) > 1) {
        return;
      }
    }
LABEL_36:
    if (*(void *)(v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v20, v61, v12);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
    }
    if (v66 == 4)
    {
      if (PaperDocumentView.isLiveEditing()())
      {
        uint64_t v51 = v13;
        uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
        uint64_t v53 = v61;
      }
      else
      {
        uint64_t v54 = v6;
        uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
        v52(v20, v61, v12);
        PassthroughSubject.send(_:)();
        uint64_t v60 = v13;
        uint64_t v55 = *(void (**)(char *, uint64_t))(v13 + 8);
        v55(v20, v12);
        if (*(void *)(v54 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection))
        {
          uint64_t v56 = v61;
          v52(v20, v61, v12);
          swift_retain();
          CRMulticastSyncManager.sync(_:sendDelta:)();
          swift_release();
          v55(v20, v12);
          uint64_t v51 = v60;
          uint64_t v53 = v56;
        }
        else
        {
          uint64_t v51 = v60;
          uint64_t v53 = v61;
        }
      }
      uint64_t v57 = v62;
      v52(v62, v53, v12);
      PassthroughSubject.send(_:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v12);
    }
    return;
  }
  uint64_t v20 = v62;
  if (v66 == 4) {
    goto LABEL_36;
  }
  uint64_t v65 = a1;
  uint64_t v21 = a4;
  uint64_t v60 = v13;
  uint64_t v59 = v12;
  unint64_t v22 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v22);
  swift_bridgeObjectRelease();
  uint64_t v58 = v6;
  uint64_t v23 = (uint64_t *)(v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v24 = *v23;
  uint64_t v25 = *(void *)(*v23 + 64);
  uint64_t v63 = *v23 + 64;
  uint64_t v26 = 1 << *(unsigned char *)(v24 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & v25;
  int64_t v64 = (unint64_t)(v26 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v29 = 0;
  while (1)
  {
    if (v28)
    {
      unint64_t v30 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      unint64_t v31 = v30 | (v29 << 6);
      goto LABEL_12;
    }
    int64_t v38 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    if (v38 >= v64) {
      goto LABEL_31;
    }
    unint64_t v39 = *(void *)(v63 + 8 * v38);
    ++v29;
    if (!v39)
    {
      int64_t v29 = v38 + 1;
      if (v38 + 1 >= v64) {
        goto LABEL_31;
      }
      unint64_t v39 = *(void *)(v63 + 8 * v29);
      if (!v39)
      {
        int64_t v29 = v38 + 2;
        if (v38 + 2 >= v64) {
          goto LABEL_31;
        }
        unint64_t v39 = *(void *)(v63 + 8 * v29);
        if (!v39) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v28 = (v39 - 1) & v39;
    unint64_t v31 = __clz(__rbit64(v39)) + (v29 << 6);
LABEL_12:
    uint64_t v32 = *(void *)(v24 + 56) + 16 * v31;
    unint64_t v33 = *(void **)v32;
    uint64_t v34 = *(void *)(v32 + 8);
    uint64_t v35 = swift_getObjectType();
    v68[0] = v66;
    uint64_t v36 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 88);
    id v37 = v33;
    v36(v65, v68, v21, a5, v35, v34);
  }
  int64_t v40 = v38 + 3;
  if (v40 >= v64)
  {
LABEL_31:
    swift_release();
    uint64_t v12 = v59;
    uint64_t v13 = v60;
    uint64_t v6 = v58;
    goto LABEL_35;
  }
  unint64_t v39 = *(void *)(v63 + 8 * v40);
  if (v39)
  {
    int64_t v29 = v40;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v29 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v29 >= v64) {
      goto LABEL_31;
    }
    unint64_t v39 = *(void *)(v63 + 8 * v29);
    ++v40;
    if (v39) {
      goto LABEL_27;
    }
  }
LABEL_47:
  __break(1u);
}

uint64_t PaperDocumentView.didChange(page:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v23 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, v8, v13);
  swift_beginAccess();
  specialized Set._Variant.insert(_:)((uint64_t)v15, v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
  uint64_t result = swift_endAccess();
  uint64_t v17 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPagesTask;
  if (!*(void *)&v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPagesTask])
  {
    uint64_t v18 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v7, 1, 1, v18);
    type metadata accessor for MainActor();
    id v19 = v2;
    uint64_t v20 = static MainActor.shared.getter();
    uint64_t v21 = (void *)swift_allocObject();
    uint64_t v22 = MEMORY[0x263F8F500];
    v21[2] = v20;
    v21[3] = v22;
    v21[4] = v19;
    v21[5] = ObjectType;
    *(void *)&v2[v17] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentView.didChange(page:), (uint64_t)v21);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in PaperDocumentView.didChange(page:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[25] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v4[26] = v5;
  v4[27] = *(void *)(v5 - 8);
  v4[28] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v4[29] = v6;
  v4[30] = *(void *)(v6 - 8);
  v4[31] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v4[32] = v7;
  v4[33] = *(void *)(v7 - 8);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ContinuousClock();
  v4[37] = v8;
  v4[38] = *(void *)(v8 - 8);
  v4[39] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ContinuousClock.Instant();
  v4[40] = v9;
  v4[41] = *(void *)(v9 - 8);
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[45] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[46] = v11;
  v4[47] = v10;
  return MEMORY[0x270FA2498](closure #1 in PaperDocumentView.didChange(page:), v11, v10);
}

uint64_t closure #1 in PaperDocumentView.didChange(page:)()
{
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedDeadline;
  *(void *)(v0 + 384) = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedDeadline;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v2);
  *(void *)(v0 + 152) = 0;
  *(void *)(v0 + 144) = 0;
  *(unsigned char *)(v0 + 160) = 1;
  ContinuousClock.init()();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v7;
  uint64_t v8 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, MEMORY[0x263F8F710]);
  *uint64_t v7 = v0;
  v7[1] = closure #1 in PaperDocumentView.didChange(page:);
  uint64_t v9 = *(void *)(v0 + 352);
  uint64_t v10 = *(void *)(v0 + 312);
  uint64_t v11 = *(void *)(v0 + 296);
  return MEMORY[0x270FA1FF8](v9, v0 + 144, v10, v11, v8);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v18;

  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[44];
    uint64_t v4 = v2[40];
    uint64_t v5 = v2[41];
    uint64_t v7 = v2[38];
    uint64_t v6 = v2[39];
    uint64_t v8 = v2[37];

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v2[51] = v9;
    v9(v3, v4);
    uint64_t v10 = v2[46];
    uint64_t v11 = v2[47];
    uint64_t v12 = closure #1 in PaperDocumentView.didChange(page:);
  }
  else
  {
    uint64_t v13 = v2[44];
    uint64_t v14 = v2[40];
    uint64_t v15 = v2[41];
    (*(void (**)(void, void))(v2[38] + 8))(v2[39], v2[37]);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v2[50] = v16;
    v16(v13, v14);
    uint64_t v10 = v2[46];
    uint64_t v11 = v2[47];
    uint64_t v12 = closure #1 in PaperDocumentView.didChange(page:);
  }
  return MEMORY[0x270FA2498](v12, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, unint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, void);
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  void *v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  void *v44;
  uint64_t v45;
  int64_t v46;
  void (**v47)(void, void);
  void (**v48)(uint64_t, uint64_t);
  void (**v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t (**i)(uint64_t, uint64_t);
  uint64_t v56;

  id v44 = (void *)(v0 + 184);
  uint64_t v1 = (uint64_t *)(v0 + 192);
  swift_release();
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v6 = (void *)(v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPages);
  swift_beginAccess();
  uint64_t v41 = v6;
  uint64_t v7 = *v6;
  unint64_t v45 = *v6 + 56;
  uint64_t v8 = -1 << *(unsigned char *)(*v6 + 32);
  if (-v8 < 64) {
    uint64_t v9 = ~(-1 << -(char)v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(*v6 + 56);
  uint64_t v11 = v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  uint64_t v43 = v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_thumbnailView;
  uint64_t v52 = v7;
  swift_bridgeObjectRetain();
  uint64_t v50 = v11;
  uint64_t result = swift_beginAccess();
  uint64_t v13 = 0;
  char v46 = (unint64_t)(63 - v8) >> 6;
  id v49 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v47 = (void (**)(void, void))(v4 + 8);
  uint64_t v48 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v51 = v2;
  for (unint64_t i = (uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
        ;
        uint64_t result = (*i)(*(void *)(v0 + 280), *(void *)(v0 + 256)))
  {
    if (v10)
    {
      uint64_t v53 = (v10 - 1) & v10;
      uint64_t v54 = v13;
      uint64_t v14 = __clz(__rbit64(v10)) | (v13 << 6);
      goto LABEL_23;
    }
    uint64_t v15 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
LABEL_37:
      __break(1u);
      return result;
    }
    if (v15 >= v46) {
      goto LABEL_33;
    }
    uint64_t v16 = *(void *)(v45 + 8 * v15);
    uint64_t v17 = v13 + 1;
    if (!v16)
    {
      uint64_t v17 = v13 + 2;
      if (v13 + 2 >= v46) {
        goto LABEL_33;
      }
      uint64_t v16 = *(void *)(v45 + 8 * v17);
      if (!v16)
      {
        uint64_t v17 = v13 + 3;
        if (v13 + 3 >= v46) {
          goto LABEL_33;
        }
        uint64_t v16 = *(void *)(v45 + 8 * v17);
        if (!v16) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v53 = (v16 - 1) & v16;
    uint64_t v54 = v17;
    uint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_23:
    uint64_t v20 = *(void *)(v0 + 280);
    id v19 = *(void *)(v0 + 288);
    uint64_t v22 = *(void *)(v0 + 248);
    uint64_t v21 = *(void *)(v0 + 256);
    uint64_t v23 = *(void *)(v0 + 232);
    uint64_t v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v51 + 16);
    v24(v19, *(void *)(v52 + 48) + *(void *)(v51 + 72) * v14, v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v20, v19, v21);
    (*v49)(v22, v50, v23);
    swift_getKeyPath();
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    Capsule<>.subscript.getter();
    swift_release();
    (*v48)(v22, v23);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
    dispatch thunk of Collection._customIndexOfEquatableElement(_:)();
    if (*(unsigned char *)(v0 + 177) == 1)
    {
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      if (*v1 == *v44)
      {
LABEL_5:
        (*v47)(*(void *)(v0 + 224), *(void *)(v0 + 208));
        uint64_t v10 = v53;
        uint64_t v13 = v54;
        continue;
      }
      while (1)
      {
        uint64_t v25 = *(void *)(v0 + 272);
        uint64_t v26 = *(void *)(v0 + 256);
        uint64_t v27 = (void (*)(uint64_t, void))dispatch thunk of Collection.subscript.read();
        ((void (*)(uint64_t))v24)(v25);
        v27(v0 + 16, 0);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
        unint64_t v28 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*i)(v25, v26);
        if (v28) {
          break;
        }
        dispatch thunk of Collection.formIndex(after:)();
        dispatch thunk of Collection.endIndex.getter();
        if (*v1 == *v44) {
          goto LABEL_5;
        }
      }
      unint64_t v30 = *v1;
      (*v47)(*(void *)(v0 + 224), *(void *)(v0 + 208));
      uint64_t v10 = v53;
      uint64_t v13 = v54;
    }
    else
    {
      int64_t v29 = *(unsigned char *)(v0 + 176);
      unint64_t v30 = *(void *)(v0 + 168);
      (*v47)(*(void *)(v0 + 224), *(void *)(v0 + 208));
      uint64_t v10 = v53;
      uint64_t v13 = v54;
      if (v29) {
        continue;
      }
    }
    unint64_t v31 = MEMORY[0x210550400](v43);
    if (v31)
    {
      uint64_t v32 = (void *)v31;
      unint64_t v33 = *(id *)(v31 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView);

      objc_msgSend(v33, sel_reloadPageAt_, v30);
    }
  }
  uint64_t v18 = v13 + 4;
  if (v13 + 4 < v46)
  {
    uint64_t v16 = *(void *)(v45 + 8 * v18);
    if (!v16)
    {
      while (1)
      {
        uint64_t v17 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          goto LABEL_37;
        }
        if (v17 >= v46) {
          goto LABEL_33;
        }
        uint64_t v16 = *(void *)(v45 + 8 * v17);
        ++v18;
        if (v16) {
          goto LABEL_22;
        }
      }
    }
    uint64_t v17 = v13 + 4;
    goto LABEL_22;
  }
LABEL_33:
  swift_release();
  uint64_t v34 = *(void *)(v0 + 344);
  uint64_t v36 = *(void *)(v0 + 328);
  uint64_t v35 = *(void *)(v0 + 336);
  id v37 = *(void *)(v0 + 320);
  int64_t v38 = *(void *)(v0 + 200);
  unint64_t v39 = v38 + *(void *)(v0 + 384);
  *uint64_t v41 = MEMORY[0x263F8EE88];
  swift_bridgeObjectRelease();
  static ContinuousClock.Instant.now.getter();
  MEMORY[0x21054E140](2000000000000000000, 0);
  v42(v35, v37);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 40))(v39, v34, v37);
  swift_endAccess();
  *(void *)(v38 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPagesTask) = 0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int64_t v40 = *(uint64_t (**)(void))(v0 + 8);
  return v40();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, unint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, void);
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  void *v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  void *v44;
  uint64_t v45;
  int64_t v46;
  void (**v47)(void, void);
  void (**v48)(uint64_t, uint64_t);
  void (**v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t (**i)(uint64_t, uint64_t);
  uint64_t v56;

  id v44 = (void *)(v0 + 184);
  uint64_t v1 = (uint64_t *)(v0 + 192);
  swift_release();
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v6 = (void *)(v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPages);
  swift_beginAccess();
  uint64_t v41 = v6;
  uint64_t v7 = *v6;
  unint64_t v45 = *v6 + 56;
  uint64_t v8 = -1 << *(unsigned char *)(*v6 + 32);
  if (-v8 < 64) {
    uint64_t v9 = ~(-1 << -(char)v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(*v6 + 56);
  uint64_t v11 = v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  uint64_t v43 = v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_thumbnailView;
  uint64_t v52 = v7;
  swift_bridgeObjectRetain();
  uint64_t v50 = v11;
  uint64_t result = swift_beginAccess();
  uint64_t v13 = 0;
  char v46 = (unint64_t)(63 - v8) >> 6;
  id v49 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v47 = (void (**)(void, void))(v4 + 8);
  uint64_t v48 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v51 = v2;
  for (unint64_t i = (uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
        ;
        uint64_t result = (*i)(*(void *)(v0 + 280), *(void *)(v0 + 256)))
  {
    if (v10)
    {
      uint64_t v53 = (v10 - 1) & v10;
      uint64_t v54 = v13;
      uint64_t v14 = __clz(__rbit64(v10)) | (v13 << 6);
      goto LABEL_23;
    }
    uint64_t v15 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
LABEL_37:
      __break(1u);
      return result;
    }
    if (v15 >= v46) {
      goto LABEL_33;
    }
    uint64_t v16 = *(void *)(v45 + 8 * v15);
    uint64_t v17 = v13 + 1;
    if (!v16)
    {
      uint64_t v17 = v13 + 2;
      if (v13 + 2 >= v46) {
        goto LABEL_33;
      }
      uint64_t v16 = *(void *)(v45 + 8 * v17);
      if (!v16)
      {
        uint64_t v17 = v13 + 3;
        if (v13 + 3 >= v46) {
          goto LABEL_33;
        }
        uint64_t v16 = *(void *)(v45 + 8 * v17);
        if (!v16) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v53 = (v16 - 1) & v16;
    uint64_t v54 = v17;
    uint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_23:
    uint64_t v20 = *(void *)(v0 + 280);
    id v19 = *(void *)(v0 + 288);
    uint64_t v22 = *(void *)(v0 + 248);
    uint64_t v21 = *(void *)(v0 + 256);
    uint64_t v23 = *(void *)(v0 + 232);
    uint64_t v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v51 + 16);
    v24(v19, *(void *)(v52 + 48) + *(void *)(v51 + 72) * v14, v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v20, v19, v21);
    (*v49)(v22, v50, v23);
    swift_getKeyPath();
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    Capsule<>.subscript.getter();
    swift_release();
    (*v48)(v22, v23);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
    dispatch thunk of Collection._customIndexOfEquatableElement(_:)();
    if (*(unsigned char *)(v0 + 177) == 1)
    {
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      if (*v1 == *v44)
      {
LABEL_5:
        (*v47)(*(void *)(v0 + 224), *(void *)(v0 + 208));
        uint64_t v10 = v53;
        uint64_t v13 = v54;
        continue;
      }
      while (1)
      {
        uint64_t v25 = *(void *)(v0 + 272);
        uint64_t v26 = *(void *)(v0 + 256);
        uint64_t v27 = (void (*)(uint64_t, void))dispatch thunk of Collection.subscript.read();
        ((void (*)(uint64_t))v24)(v25);
        v27(v0 + 16, 0);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
        unint64_t v28 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*i)(v25, v26);
        if (v28) {
          break;
        }
        dispatch thunk of Collection.formIndex(after:)();
        dispatch thunk of Collection.endIndex.getter();
        if (*v1 == *v44) {
          goto LABEL_5;
        }
      }
      unint64_t v30 = *v1;
      (*v47)(*(void *)(v0 + 224), *(void *)(v0 + 208));
      uint64_t v10 = v53;
      uint64_t v13 = v54;
    }
    else
    {
      int64_t v29 = *(unsigned char *)(v0 + 176);
      unint64_t v30 = *(void *)(v0 + 168);
      (*v47)(*(void *)(v0 + 224), *(void *)(v0 + 208));
      uint64_t v10 = v53;
      uint64_t v13 = v54;
      if (v29) {
        continue;
      }
    }
    unint64_t v31 = MEMORY[0x210550400](v43);
    if (v31)
    {
      uint64_t v32 = (void *)v31;
      unint64_t v33 = *(id *)(v31 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView);

      objc_msgSend(v33, sel_reloadPageAt_, v30);
    }
  }
  uint64_t v18 = v13 + 4;
  if (v13 + 4 < v46)
  {
    uint64_t v16 = *(void *)(v45 + 8 * v18);
    if (!v16)
    {
      while (1)
      {
        uint64_t v17 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          goto LABEL_37;
        }
        if (v17 >= v46) {
          goto LABEL_33;
        }
        uint64_t v16 = *(void *)(v45 + 8 * v17);
        ++v18;
        if (v16) {
          goto LABEL_22;
        }
      }
    }
    uint64_t v17 = v13 + 4;
    goto LABEL_22;
  }
LABEL_33:
  swift_release();
  uint64_t v34 = *(void *)(v0 + 344);
  uint64_t v36 = *(void *)(v0 + 328);
  uint64_t v35 = *(void *)(v0 + 336);
  id v37 = *(void *)(v0 + 320);
  int64_t v38 = *(void *)(v0 + 200);
  unint64_t v39 = v38 + *(void *)(v0 + 384);
  *uint64_t v41 = MEMORY[0x263F8EE88];
  swift_bridgeObjectRelease();
  static ContinuousClock.Instant.now.getter();
  MEMORY[0x21054E140](2000000000000000000, 0);
  v42(v35, v37);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 40))(v39, v34, v37);
  swift_endAccess();
  *(void *)(v38 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPagesTask) = 0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int64_t v40 = *(uint64_t (**)(void))(v0 + 8);
  return v40();
}

Swift::Void __swiftcall PaperDocumentView.revertAllChanges()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v1 - 8);
  int64_t v29 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v25 - v4;
  uint64_t v6 = type metadata accessor for CapsuleUndoAction();
  uint64_t v31 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v30 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v18 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModelInitialState;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v18, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
    uint64_t v28 = v0;
    uint64_t v19 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v27(v14, v19, v11);
    Capsule.actionUndoingDifference(from:)();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
    v20(v14, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v5, 1, v6) == 1)
    {
      v20(v17, v11);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for CapsuleUndoAction?);
    }
    else
    {
      uint64_t v26 = v20;
      uint64_t v22 = v30;
      uint64_t v21 = v31;
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v30, v5, v6);
      uint64_t v23 = (uint64_t)v29;
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v29, v22, v6);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v23, 0, 1, v6);
      swift_beginAccess();
      Capsule.apply(_:)();
      outlined destroy of StocksKitCurrencyCache.Provider?(v23, &demangling cache variable for type metadata for CapsuleUndoAction?);
      swift_endAccess();
      v27(v14, v19, v11);
      specialized PaperDocumentView.merge<A>(_:from:page:)((uint64_t)v14, 3u, 0);
      uint64_t v24 = v26;
      v26(v14, v11);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v30, v6);
      v24(v17, v11);
    }
  }
}

id PaperDocumentView.scrollViewForAvoidingKeyboard.getter()
{
  type metadata accessor for PaperDocumentInlineView();
  uint64_t v1 = v0;
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    id v3 = (id)v2;
    id v4 = v1;
LABEL_7:

    id v7 = v4;
    self;
    uint64_t v8 = swift_dynamicCastObjCClass();
    if (v8)
    {
LABEL_10:
      id v9 = (id)v8;
    }
    else
    {
      while (1)
      {
        id v9 = objc_msgSend(v3, sel_superview);

        if (!v9) {
          break;
        }
        id v3 = v9;
        self;
        uint64_t v8 = swift_dynamicCastObjCClass();
        if (v8) {
          goto LABEL_10;
        }
      }
    }
    return v9;
  }
  id v4 = v1;
  while (1)
  {
    id v5 = objc_msgSend(v4, sel_superview);

    if (!v5) {
      break;
    }
    id v4 = v5;
    uint64_t v6 = swift_dynamicCastClass();
    if (v6)
    {
      id v3 = (id)v6;
      goto LABEL_7;
    }
  }
  uint64_t v10 = (id *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  id result = *v10;
  if (*v10) {
    return objc_msgSend(result, sel_documentScrollView);
  }
  __break(1u);
  return result;
}

void PaperDocumentView.currentPage.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v3 - 8);
  id v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (!*v6)
  {
    __break(1u);
    return;
  }
  id v7 = objc_msgSend(*v6, sel_currentPage);
  if (!v7)
  {
LABEL_7:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
    return;
  }
  uint64_t v8 = v7;
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {

    goto LABEL_7;
  }
  uint64_t v10 = v9 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v10, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v11 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v5, 1, v11))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v5[*(int *)(v11 + 20)], a1, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  }
}

id PaperDocumentView.canGoToNextPage.getter()
{
  return PaperDocumentView.canGoToNextPage.getter((SEL *)&selRef_canGoToNextPage);
}

Swift::Void __swiftcall PaperDocumentView.goToNextPage()()
{
}

void PaperDocumentView.goToPage(_:hint:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v78 = a1;
  id v79 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v6 = *(char **)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v67 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?));
  MEMORY[0x270FA5388](v77);
  uint64_t v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v74 = (uint64_t *)((char *)&v64 - v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (uint64_t *)((char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v64 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v71 = (uint64_t)&v64 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v64 - v24);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v64 - v27;
  int64_t v29 = (id *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  uint64_t v65 = v29;
  if (!*v29) {
    goto LABEL_46;
  }
  id v30 = objc_msgSend(*v29, sel_document);
  if (!v30) {
    return;
  }
  uint64_t v31 = v30;
  uint64_t v73 = v6;
  uint64_t v32 = &selRef_isImageAnalysisEnabled;
  uint64_t v75 = v5;
  id v76 = v30;
  id v70 = v20;
  uint64_t v33 = (uint64_t)v9;
  if (a3) {
    goto LABEL_17;
  }
  id v79 = objc_msgSend(v30, sel_pageAtIndex_, v79);
  if (!v79) {
    goto LABEL_17;
  }
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v34 = swift_dynamicCastClass();
  id v72 = v25;
  if (v34)
  {
    uint64_t v35 = v34 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
    swift_beginAccess();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v35, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    uint64_t v36 = type metadata accessor for PageId(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v17, 1, v36))
    {
      id v37 = v79;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      int64_t v38 = v73;
      (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v73 + 7))(v28, 1, 1, v5);
    }
    else
    {
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v17[*(int *)(v36 + 20)], (uint64_t)v28, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      int64_t v38 = v73;
    }
  }
  else
  {
    int64_t v38 = v73;
    (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v73 + 7))(v28, 1, 1, v5);
  }
  unint64_t v39 = v74;
  uint64_t v40 = (uint64_t)v74 + *(int *)(v77 + 48);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v28, (uint64_t)v74, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v78, v40, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v41 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v38 + 6);
  if (v41((uint64_t)v39, 1, v5) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    if (v41(v40, 1, v5) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v74, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      goto LABEL_40;
    }
  }
  else
  {
    uint64_t v42 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v72;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v39, (uint64_t)v72, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    if (v41(v40, 1, v5) != 1) {
      goto LABEL_39;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    (*((void (**)(unsigned int (**)(uint64_t, uint64_t, uint64_t), uint64_t))v73 + 1))(v42, v5);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v74, &demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?));
  do
  {

    uint64_t v31 = v76;
LABEL_17:
    unint64_t v43 = (unint64_t)objc_msgSend(v31, sel_pageCount);
    if ((v43 & 0x8000000000000000) != 0)
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    id v44 = (char *)v43;
    uint64_t v45 = v71;
    if (!v43) {
      goto LABEL_42;
    }
    uint64_t v28 = 0;
    id v72 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56);
    uint64_t v42 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
    int v66 = (void (**)(char *, uint64_t, uint64_t))(v73 + 32);
    uint64_t v69 = (void (**)(uint64_t, uint64_t))(v73 + 8);
    uint64_t v73 = (char *)v43;
    uint64_t v74 = v14;
    while (1)
    {
      if (v44 == v28)
      {
        __break(1u);
        goto LABEL_45;
      }
      id v79 = objc_msgSend(v31, v32[63], v28);
      if (v79) {
        break;
      }
LABEL_23:
      if (v44 == ++v28) {
        goto LABEL_42;
      }
    }
    type metadata accessor for PaperKitPDFPage(0);
    uint64_t v47 = swift_dynamicCastClass();
    if (v47)
    {
      uint64_t v48 = v47 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v48, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      uint64_t v49 = type metadata accessor for PageId(0);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v14, 1, v49))
      {
        id v50 = v79;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for PageId?);
        (*v72)(v45, 1, 1, v5);
      }
      else
      {
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v14 + *(int *)(v49 + 20), v45, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      }
    }
    else
    {
      (*v72)(v45, 1, 1, v5);
    }
    uint64_t v40 = v33 + *(int *)(v77 + 48);
    unint64_t v39 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v45, v33, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v78, v40, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    uint64_t v51 = *v42;
    if ((*v42)(v33, 1, v5) != 1)
    {
      uint64_t v52 = v33;
      uint64_t v53 = v33;
      uint64_t v54 = (uint64_t)v70;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v52, (uint64_t)v70, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      if (v51(v40, 1, v5) == 1)
      {
        uint64_t v45 = v71;
        outlined destroy of StocksKitCurrencyCache.Provider?(v71, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        (*v69)(v54, v5);
        uint64_t v14 = v74;
        uint64_t v33 = v53;
        uint64_t v32 = &selRef_isImageAnalysisEnabled;
LABEL_21:
        outlined destroy of StocksKitCurrencyCache.Provider?(v33, &demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?));
      }
      else
      {
        uint64_t v55 = v67;
        (*v66)(v67, v40, v75);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakTagged_3<TaggedPaperPage> and conformance WeakTagged_3<A>, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        int v68 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v40 = (uint64_t)v42;
        uint64_t v56 = *v69;
        uint64_t v57 = v55;
        uint64_t v5 = v75;
        (*v69)((uint64_t)v57, v75);
        uint64_t v45 = v71;
        outlined destroy of StocksKitCurrencyCache.Provider?(v71, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        v56(v54, v5);
        outlined destroy of StocksKitCurrencyCache.Provider?(v53, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        uint64_t v14 = v74;
        uint64_t v33 = v53;
        uint64_t v32 = &selRef_isImageAnalysisEnabled;
        if (v68) {
          goto LABEL_37;
        }
      }

      uint64_t v31 = v76;
      id v44 = v73;
      goto LABEL_23;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v45, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    unsigned int v46 = v51(v40, 1, v5);
    uint64_t v14 = v74;
    if (v46 != 1) {
      goto LABEL_21;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v33, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
LABEL_37:
    uint64_t v58 = *v65;
    if (*v65) {
      goto LABEL_41;
    }
    __break(1u);
LABEL_39:
    uint64_t v59 = v73;
    uint64_t v60 = v67;
    (*((void (**)(char *, uint64_t, uint64_t))v73 + 4))(v67, v40, v5);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakTagged_3<TaggedPaperPage> and conformance WeakTagged_3<A>, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v62 = (void (*)(char *, uint64_t))*((void *)v59 + 1);
    v62(v60, v75);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v62((char *)v42, v75);
    uint64_t v5 = v75;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v39, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  while ((v61 & 1) == 0);
LABEL_40:
  uint64_t v58 = *v65;
  if (!*v65)
  {
LABEL_47:
    __break(1u);
    return;
  }
LABEL_41:
  id v63 = v58;
  objc_msgSend(v63, sel_goToPage_, v79);
  uint64_t v31 = v76;

LABEL_42:
}

id PaperDocumentView.canZoomIn.getter()
{
  return PaperDocumentView.canGoToNextPage.getter((SEL *)&selRef_canZoomIn);
}

Swift::Void __swiftcall PaperDocumentView.zoomIn()()
{
}

id PaperDocumentView.canZoomOut.getter()
{
  return PaperDocumentView.canGoToNextPage.getter((SEL *)&selRef_canZoomOut);
}

id PaperDocumentView.canGoToNextPage.getter(SEL *a1)
{
  uint64_t v3 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  id result = *v3;
  if (*v3) {
    return [result *a1];
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall PaperDocumentView.zoomOut()()
{
}

id PaperDocumentView.goToNextPage()(SEL *a1)
{
  uint64_t v3 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  id result = *v3;
  if (*v3) {
    return objc_msgSend(result, *a1, 0);
  }
  __break(1u);
  return result;
}

void PaperDocumentView.page(for:nearest:)(char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = (id *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (!*v12)
  {
    __break(1u);
    return;
  }
  id v13 = objc_msgSend(*v12, sel_pageForPoint_nearest_, a1 & 1, a3, a4);
  if (!v13)
  {
LABEL_7:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a2, 1, 1, v19);
    return;
  }
  uint64_t v14 = v13;
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v15 = swift_dynamicCastClass();
  if (!v15)
  {

    goto LABEL_7;
  }
  uint64_t v16 = v15 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v16, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v17 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v11, 1, v17))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
  else
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v11[*(int *)(v17 + 20)], a2, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  }
}

void PaperDocumentView.convert(_:to:)(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v13 = *v12;
  uint64_t v41 = a1;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.canvas(for:), (uint64_t)v40, v13);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v16 = v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v16, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    type metadata accessor for PaperDocument(0);
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    WeakTagged_3.subscript.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v17 = v43;
    if (!v43)
    {

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v42, &demangling cache variable for type metadata for PaperPage?);
      return;
    }
    uint64_t v18 = v44;
    __swift_project_boxed_opaque_existential_1(v42, v43);
    double v19 = (*(double (**)(uint64_t, uint64_t))(v18 + 56))(v17, v18);
    CGFloat v21 = v20;
    CGFloat v23 = v22;
    CGFloat v25 = v24;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    uint64_t v26 = (id *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    if (!*v26)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return;
    }
    id v27 = objc_msgSend(*v26, sel_viewForPage_, v15);
    if (v27)
    {
      uint64_t v28 = v27;
      CGFloat v39 = v19;
      if (*v26)
      {
        objc_msgSend(*v26, sel_convertPoint_toPage_, v15, a2, a3);
        double v30 = v29;
        void v38[2] = v31;
        objc_msgSend(v28, sel_bounds);
        CGFloat x = v45.origin.x;
        CGFloat y = v45.origin.y;
        CGFloat width = v45.size.width;
        CGFloat height = v45.size.height;
        double v36 = v30 - CGRectGetMinX(v45);
        v46.origin.CGFloat x = x;
        v46.origin.CGFloat y = y;
        v46.size.CGFloat width = width;
        v46.size.CGFloat height = height;
        v38[1] = v36 / CGRectGetWidth(v46);
        v47.origin.CGFloat x = x;
        v47.origin.CGFloat y = y;
        v47.size.CGFloat width = width;
        v47.size.CGFloat height = height;
        CGRectGetMinY(v47);
        v48.origin.CGFloat x = x;
        v48.origin.CGFloat y = y;
        v48.size.CGFloat width = width;
        v48.size.CGFloat height = height;
        CGRectGetHeight(v48);
        CGFloat v37 = v39;
        v49.origin.CGFloat x = v39;
        v49.origin.CGFloat y = v21;
        v49.size.CGFloat width = v23;
        v49.size.CGFloat height = v25;
        CGRectGetMinX(v49);
        v50.origin.CGFloat x = v37;
        v50.origin.CGFloat y = v21;
        v50.size.CGFloat width = v23;
        v50.size.CGFloat height = v25;
        CGRectGetWidth(v50);
        v51.origin.CGFloat x = v37;
        v51.origin.CGFloat y = v21;
        v51.size.CGFloat width = v23;
        v51.size.CGFloat height = v25;
        CGRectGetMinY(v51);
        v52.origin.CGFloat x = v37;
        v52.origin.CGFloat y = v21;
        v52.size.CGFloat width = v23;
        v52.size.CGFloat height = v25;
        CGRectGetHeight(v52);

        return;
      }
      goto LABEL_11;
    }
  }
}

void PaperDocumentView.convert(_:from:)(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v13 = *v12;
  uint64_t v49 = a1;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)v48, v13);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v16 = v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v16, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    type metadata accessor for PaperDocument(0);
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    WeakTagged_3.subscript.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v17 = v51;
    if (!v51)
    {

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v50, &demangling cache variable for type metadata for PaperPage?);
      return;
    }
    uint64_t v18 = v52;
    __swift_project_boxed_opaque_existential_1(v50, v51);
    CGFloat v19 = (*(double (**)(uint64_t, uint64_t))(v18 + 56))(v17, v18);
    CGFloat v21 = v20;
    CGFloat v23 = v22;
    CGFloat v25 = v24;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    uint64_t v26 = (id *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    if (!*v26)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return;
    }
    id v27 = objc_msgSend(*v26, sel_viewForPage_, v15);
    if (v27)
    {
      uint64_t v28 = v27;
      double v46 = a3;
      double v47 = a2;
      objc_msgSend(v27, sel_bounds);
      CGFloat v30 = v29;
      CGFloat v32 = v31;
      CGFloat v34 = v33;
      CGFloat v36 = v35;
      v53.origin.CGFloat x = v19;
      v53.origin.CGFloat y = v21;
      v53.size.CGFloat width = v23;
      v53.size.CGFloat height = v25;
      CGFloat MinX = CGRectGetMinX(v53);
      v54.origin.CGFloat x = v19;
      v54.origin.CGFloat y = v21;
      v54.size.CGFloat width = v23;
      v54.size.CGFloat height = v25;
      CGFloat Width = CGRectGetWidth(v54);
      v55.origin.CGFloat x = v19;
      v55.origin.CGFloat y = v21;
      v55.size.CGFloat width = v23;
      v55.size.CGFloat height = v25;
      CGFloat MinY = CGRectGetMinY(v55);
      v56.origin.CGFloat x = v19;
      v56.origin.CGFloat y = v21;
      v56.size.CGFloat width = v23;
      v56.size.CGFloat height = v25;
      double Height = CGRectGetHeight(v56);
      v57.origin.CGFloat x = v30;
      v57.origin.CGFloat y = v32;
      v57.size.CGFloat width = v34;
      v57.size.CGFloat height = v36;
      double v38 = CGRectGetMinX(v57);
      v58.origin.CGFloat x = v30;
      v58.origin.CGFloat y = v32;
      v58.size.CGFloat width = v34;
      v58.size.CGFloat height = v36;
      double v39 = CGRectGetWidth(v58);
      v59.origin.CGFloat x = v30;
      v59.origin.CGFloat y = v32;
      v59.size.CGFloat width = v34;
      v59.size.CGFloat height = v36;
      double v40 = CGRectGetMinY(v59);
      v60.origin.CGFloat x = v30;
      v60.origin.CGFloat y = v32;
      v60.size.CGFloat width = v34;
      v60.size.CGFloat height = v36;
      double v41 = CGRectGetHeight(v60);
      if (*v26)
      {
        objc_msgSend(*v26, sel_convertPoint_fromPage_, v15, v38 + (v47 - MinX) / Width * v39, v40 + (1.0 - (v46 - MinY) / Height) * v41);

        return;
      }
      goto LABEL_11;
    }
  }
}

uint64_t closure #1 in PaperDocumentView.convert(_:to:)(void *a1, uint64_t a2)
{
  uint64_t v33 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  double v31 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?));
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v32 = (uint64_t)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v31 - v15;
  MEMORY[0x270FA5388](v17);
  CGFloat v19 = (char *)&v31 - v18;
  uint64_t v20 = *a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v20, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v21 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v11, 1, v21))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v19, 1, 1, v3);
  }
  else
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v11[*(int *)(v21 + 20)], (uint64_t)v19, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v16, v33, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v16, 0, 1, v3);
  uint64_t v22 = (uint64_t)&v8[*(int *)(v6 + 48)];
  CGFloat v23 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v19, (uint64_t)v8, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v16, v22, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  double v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v24((uint64_t)v8, 1, v3) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    if (v24(v22, 1, v3) == 1)
    {
      char v25 = -1;
    }
    else
    {
      CGFloat v23 = &demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?);
      char v25 = 0;
    }
  }
  else
  {
    uint64_t v26 = v32;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v8, v32, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    if (v24(v22, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v26, v3);
      char v25 = 0;
      CGFloat v23 = &demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?);
    }
    else
    {
      uint64_t v27 = v26;
      uint64_t v28 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v31, v22, v3);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakTagged_3<TaggedPaperPage> and conformance WeakTagged_3<A>, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      double v29 = *(void (**)(char *, uint64_t))(v4 + 8);
      v29(v28, v3);
      CGFloat v23 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v29((char *)v27, v3);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, v23);
  return v25 & 1;
}

uint64_t PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v58 = a6;
  LODWORD(v59) = a3;
  uint64_t v57 = a1;
  uint64_t v10 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v10 - 8);
  CGRect v55 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v52 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v51 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  CGRect v54 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  CGRect v56 = (char *)&v50 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v21 - 8);
  CGFloat v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v50 - v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v20, 1, 1, v27);
  uint64_t v61 = a4;
  uint64_t v62 = a5;
  uint64_t v28 = a2;
  id v63 = v58;
  uint64_t v64 = v6;
  uint64_t v65 = a2;
  uint64_t v66 = v57;
  specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(0, 0, (uint64_t)v20, (void (*)(uint64_t))partial apply for closure #1 in PaperDocumentView.addCanvasElement<A>(_:in:setSelected:), (uint64_t)v60, (uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)&unk_26C15E850, (uint64_t)partial apply for closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:));
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  if ((v59 & 1) == 0) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v26, (uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v23, 1, v13) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    uint64_t v26 = v23;
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v56, v23, v13);
  double v29 = (uint64_t *)(v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  uint64_t v30 = swift_beginAccess();
  uint64_t v31 = *v29;
  MEMORY[0x270FA5388](v30);
  *(&v50 - 2) = v28;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&v50 - 4), v31);
  uint64_t v33 = v32;
  double v35 = v34;
  swift_bridgeObjectRelease();
  if (!v33)
  {
LABEL_9:
    (*(void (**)(char *, uint64_t))(v14 + 8))(v56, v13);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  }

  type metadata accessor for AnyCanvas();
  uint64_t v36 = swift_dynamicCastClass();
  if (!v36)
  {

    goto LABEL_9;
  }
  CGFloat v37 = (void *)v36;
  id v58 = v35;
  CGRect v59 = v26;
  uint64_t v38 = v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  uint64_t v39 = v52;
  double v40 = v51;
  uint64_t v41 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v38, v53);
  LOBYTE(v69) = 3;
  uint64_t v42 = *(void (**)(char *, uint64_t *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v37) + 0x550);
  uint64_t v43 = type metadata accessor for PaperDocument(0);
  uint64_t v44 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  v42(v40, &v69, v43, v44);
  LOBYTE(v69) = 3;
  (*(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *v37) + 0x530))(&v69);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakTagged_9<TaggedCanvasElement>>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_20C832C20;
  double v46 = v54;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v54, v56, v13);
  SharedTagged_9.tag.getter();
  uint64_t v67 = v69;
  char v68 = v70;
  MEMORY[0x21054BDF0](v13);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  double v47 = *(void (**)(char *, uint64_t))(v14 + 8);
  v47(v46, v13);
  if (*(void *)(v45 + 16)) {
    uint64_t v48 = specialized Set.init(_nonEmptyArrayLiteral:)(v45);
  }
  else {
    uint64_t v48 = MEMORY[0x263F8EE88];
  }
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  AnyCanvas.selection.setter(v48, MEMORY[0x263F8EE88], 6, 0);

  v47(v56, v13);
  uint64_t v26 = v59;
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
}

uint64_t closure #1 in PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)()
{
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v22 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v11 = (uint64_t (*)(unsigned char *, void))WeakTagged_3.subscript.modify();
  uint64_t v12 = *(void *)(v10 + 24);
  if (v12)
  {
    uint64_t v19 = a5;
    uint64_t v13 = *(void *)(v10 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v10, v12);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 152);
    uint64_t v14 = type metadata accessor for PaperDocument(0);
    uint64_t v15 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    v18(a2, a1, v22, v14, a4, v19, v15, v12, v13);
    return v11(v21, 0);
  }
  else
  {
    v11(v21, 0);
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a6, 1, 1, v17);
  }
}

uint64_t PaperDocumentView.canvas(for:)(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v4 = *v3;
  v10[2] = a1;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)v10, v4);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  if (v6)
  {

    type metadata accessor for AnyCanvas();
    uint64_t result = swift_dynamicCastClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

Swift::Bool __swiftcall PaperDocumentView.isLiveEditing()()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  Swift::Bool result = swift_bridgeObjectRetain_n();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v14 >= v7) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v9;
    if (!v15)
    {
      int64_t v9 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_26;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v9);
      if (!v15)
      {
        int64_t v9 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_26;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v9);
        if (!v15)
        {
          int64_t v9 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_26;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v9);
          if (!v15)
          {
            int64_t v9 = v14 + 4;
            if (v14 + 4 >= v7) {
              goto LABEL_26;
            }
            unint64_t v15 = *(void *)(v3 + 8 * v9);
            if (!v15)
            {
              int64_t v16 = v14 + 5;
              if (v16 >= v7)
              {
LABEL_26:
                Swift::Bool v17 = 0;
                goto LABEL_27;
              }
              unint64_t v15 = *(void *)(v3 + 8 * v16);
              if (!v15)
              {
                while (1)
                {
                  int64_t v9 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_29;
                  }
                  if (v9 >= v7) {
                    goto LABEL_26;
                  }
                  unint64_t v15 = *(void *)(v3 + 8 * v9);
                  ++v16;
                  if (v15) {
                    goto LABEL_24;
                  }
                }
              }
              int64_t v9 = v16;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = *(void *)(*(void *)(v2 + 56) + 16 * v11 + 8);
    uint64_t ObjectType = swift_getObjectType();
    Swift::Bool result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 80))(ObjectType, v12);
    if (result)
    {
      Swift::Bool v17 = 1;
LABEL_27:
      swift_release();
      swift_bridgeObjectRelease();
      return v17;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void PaperDocumentView.liveStreamMessenger.didset()
{
  uint64_t v1 = type metadata accessor for CRMulticastSyncManagerCatchupBehavior();
  uint64_t v61 = *(void *)(v1 - 8);
  uint64_t v62 = v1;
  MEMORY[0x270FA5388](v1);
  id v58 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for CRKeyPath();
  uint64_t v59 = *(void *)(v3 - 8);
  uint64_t v60 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v57 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  CGRect v55 = *(uint64_t **)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  CGRect v54 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v53 = (char *)&v50 - v7;
  uint64_t v8 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v9 = *v8;
  unint64_t v11 = (void *)(*v8 + 64);
  uint64_t v10 = *v11;
  uint64_t v63 = v0;
  uint64_t v64 = v11;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v10;
  uint64_t v15 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger;
  uint64_t v66 = v9;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  int64_t v16 = 0;
  int64_t v65 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v18 = v17 | (v16 << 6);
      goto LABEL_5;
    }
    int64_t v27 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      return;
    }
    if (v27 >= v65) {
      goto LABEL_21;
    }
    unint64_t v28 = v64[v27];
    ++v16;
    if (!v28)
    {
      int64_t v16 = v27 + 1;
      if (v27 + 1 >= v65) {
        goto LABEL_21;
      }
      unint64_t v28 = v64[v16];
      if (!v28)
      {
        int64_t v16 = v27 + 2;
        if (v27 + 2 >= v65) {
          goto LABEL_21;
        }
        unint64_t v28 = v64[v16];
        if (!v28) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v28 - 1) & v28;
    unint64_t v18 = __clz(__rbit64(v28)) + (v16 << 6);
LABEL_5:
    uint64_t v19 = *(void *)(v66 + 56) + 16 * v18;
    uint64_t v20 = *(void **)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v23 = MEMORY[0x210550400](v15);
    uint64_t v24 = *(void *)(v15 + 8);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 128);
    id v26 = v20;
    v25(v23, v24, ObjectType, v21);
  }
  int64_t v29 = v27 + 3;
  if (v29 < v65)
  {
    unint64_t v28 = v64[v29];
    if (!v28)
    {
      while (1)
      {
        int64_t v16 = v29 + 1;
        if (__OFADD__(v29, 1)) {
          goto LABEL_26;
        }
        if (v16 >= v65) {
          goto LABEL_21;
        }
        unint64_t v28 = v64[v16];
        ++v29;
        if (v28) {
          goto LABEL_20;
        }
      }
    }
    int64_t v16 = v29;
    goto LABEL_20;
  }
LABEL_21:
  swift_release();
  swift_beginAccess();
  uint64_t v30 = MEMORY[0x210550400](v15);
  if (v30)
  {
    uint64_t v31 = *(void *)(v15 + 8);
    int64_t v65 = v30;
    uint64_t v66 = v31;
    uint64_t v64 = (void *)swift_getObjectType();
    uint64_t v32 = v63;
    uint64_t v52 = *(void **)(v63 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_context);
    uint64_t v33 = v63 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    CGFloat v34 = v55;
    double v35 = (void (*)(char *, uint64_t, uint64_t))v55[2];
    uint64_t v36 = v53;
    uint64_t v37 = v56;
    v35(v53, v33, v56);
    uint64_t v38 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    uint64_t v39 = (uint64_t)v57;
    Capsule<>.rootID.getter();
    uint64_t v51 = (void (*)(char *, uint64_t))v34[1];
    v51(v36, v37);
    uint64_t v40 = (uint64_t)v54;
    v35(v54, v33, v37);
    uint64_t v42 = v61;
    uint64_t v41 = v62;
    uint64_t v43 = (uint64_t)v58;
    (*(void (**)(char *, void, uint64_t))(v61 + 104))(v58, *MEMORY[0x263F32FA8], v62);
    uint64_t v44 = type metadata accessor for PaperDocument(0);
    uint64_t v49 = v38;
    uint64_t v45 = (uint64_t)v64;
    CGRect v55 = (uint64_t *)PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(v52, v39, v40, v43, 0x636F447265706150, 0xED0000746E656D75, (uint64_t)v64, v44, v66, v49);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v41);
    v51((char *)v40, v37);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v39, v60);
    uint64_t v46 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v47 = type metadata accessor for PaperDocumentView();
    uint64_t v48 = v55;
    PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(v55, v32, 6516548, 0xE300000000000000, (uint64_t)partial apply for closure #1 in PaperDocumentView.liveStreamMessenger.didset, v46, v45, v47, v66, (uint64_t)&protocol witness table for PaperDocumentView);
    swift_release();
    *(void *)(v32 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection) = v48;
    swift_unknownObjectRelease();
  }
  else
  {
    *(void *)(v63 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection) = 0;
  }
  swift_release();
}

void closure #1 in PaperDocumentView.liveStreamMessenger.didset(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x210550400](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    specialized PaperDocumentView.merge<A>(_:from:page:)(a1, 1u, 0);
  }
}

uint64_t PaperDocumentView.liveStreamMessenger.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger);
}

uint64_t PaperDocumentView.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  return PaperDocumentView.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, (void (*)(uint64_t))PaperDocumentView.liveStreamMessenger.didset);
}

void (*PaperDocumentView.liveStreamMessenger.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentView.liveStreamMessenger.modify;
}

void PaperDocumentView.liveStreamMessenger.modify(uint64_t a1, char a2)
{
}

uint64_t key path setter for PaperDocumentView.pageOverlayViewProvider : PaperDocumentView(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t))
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *a2 + *a5;
  swift_beginAccess();
  *(void *)(v8 + 8) = v7;
  swift_unknownObjectWeakAssign();
  uint64_t v9 = swift_unknownObjectRetain();
  a6(v9);
  return swift_unknownObjectRelease();
}

void PaperDocumentView.participantDetailsDataSource.didset()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v20 = *v1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(*v1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(*v1 + 64);
  uint64_t v5 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource;
  uint64_t v22 = *v1;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  int64_t v6 = 0;
  int64_t v21 = (unint64_t)(v2 + 63) >> 6;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v17 >= v21) {
      goto LABEL_21;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v17);
    ++v6;
    if (!v18)
    {
      int64_t v6 = v17 + 1;
      if (v17 + 1 >= v21) {
        goto LABEL_21;
      }
      unint64_t v18 = *(void *)(v20 + 8 * v6);
      if (!v18)
      {
        int64_t v6 = v17 + 2;
        if (v17 + 2 >= v21) {
          goto LABEL_21;
        }
        unint64_t v18 = *(void *)(v20 + 8 * v6);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v4 = (v18 - 1) & v18;
    unint64_t v8 = __clz(__rbit64(v18)) + (v6 << 6);
LABEL_5:
    uint64_t v9 = *(void *)(v22 + 56) + 16 * v8;
    uint64_t v10 = *(void **)v9;
    uint64_t v11 = *(void *)(v9 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v13 = MEMORY[0x210550400](v5);
    uint64_t v14 = *(void *)(v5 + 8);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 152);
    id v16 = v10;
    v15(v13, v14, ObjectType, v11);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v21)
  {
LABEL_21:
    swift_release();
    return;
  }
  unint64_t v18 = *(void *)(v20 + 8 * v19);
  if (v18)
  {
    int64_t v6 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v6 >= v21) {
      goto LABEL_21;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v6);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
}

uint64_t PaperDocumentView.participantDetailsDataSource.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource);
}

uint64_t PaperDocumentView.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2)
{
  return PaperDocumentView.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, (void (*)(uint64_t))PaperDocumentView.participantDetailsDataSource.didset);
}

uint64_t PaperDocumentView.pageOverlayViewProvider.setter(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t))
{
  uint64_t v7 = v4 + *a3;
  swift_beginAccess();
  *(void *)(v7 + 8) = a2;
  uint64_t v8 = swift_unknownObjectWeakAssign();
  a4(v8);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentView.participantDetailsDataSource.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentView.participantDetailsDataSource.modify;
}

void PaperDocumentView.participantDetailsDataSource.modify(uint64_t a1, char a2)
{
}

void PaperDocumentView.pageOverlayViewProvider.modify(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    uint64_t v6 = swift_unknownObjectRelease();
    a3(v6);
  }
  free(v5);
}

Swift::Void __swiftcall PaperDocumentView.participantDetailsDidChange()()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v17 >= v7) {
      goto LABEL_21;
    }
    unint64_t v18 = *(void *)(v3 + 8 * v17);
    ++v8;
    if (!v18)
    {
      int64_t v8 = v17 + 1;
      if (v17 + 1 >= v7) {
        goto LABEL_21;
      }
      unint64_t v18 = *(void *)(v3 + 8 * v8);
      if (!v18)
      {
        int64_t v8 = v17 + 2;
        if (v17 + 2 >= v7) {
          goto LABEL_21;
        }
        unint64_t v18 = *(void *)(v3 + 8 * v8);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v18 - 1) & v18;
    unint64_t v10 = __clz(__rbit64(v18)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = *(void *)(v2 + 56) + 16 * v10;
    uint64_t v12 = *(void **)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v13 + 112);
    id v16 = v12;
    v15(ObjectType, v13);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v7)
  {
LABEL_21:
    swift_release();
    return;
  }
  unint64_t v18 = *(void *)(v3 + 8 * v19);
  if (v18)
  {
    int64_t v8 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_21;
    }
    unint64_t v18 = *(void *)(v3 + 8 * v8);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
}

void PaperDocumentView.showParticipantCursors.didset()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v20 = v2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v2 + 64);
  unint64_t v6 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  int64_t v7 = 0;
  int64_t v21 = (unint64_t)(v3 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v17 >= v21) {
      goto LABEL_21;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v21) {
        goto LABEL_21;
      }
      unint64_t v18 = *(void *)(v20 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v21) {
          goto LABEL_21;
        }
        unint64_t v18 = *(void *)(v20 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v5 = (v18 - 1) & v18;
    unint64_t v9 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_5:
    uint64_t v10 = *(void *)(v2 + 56) + 16 * v9;
    uint64_t v11 = *(void **)v10;
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v14 = *v6;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 176);
    id v16 = v11;
    v15(v14, ObjectType, v12);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v21)
  {
LABEL_21:
    swift_release();
    return;
  }
  unint64_t v18 = *(void *)(v20 + 8 * v19);
  if (v18)
  {
    int64_t v7 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v7 >= v21) {
      goto LABEL_21;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
}

uint64_t PaperDocumentView.showParticipantCursors.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

uint64_t PaperDocumentView.showParticipantCursors.setter(char a1)
{
  return PaperDocumentView.canEditVellumOpacity.setter(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors, (uint64_t (*)(uint64_t))PaperDocumentView.showParticipantCursors.didset);
}

uint64_t PaperDocumentView.canEditVellumOpacity.setter(char a1, void *a2, uint64_t (*a3)(uint64_t))
{
  unint64_t v6 = (unsigned char *)(v3 + *a2);
  uint64_t v7 = swift_beginAccess();
  *unint64_t v6 = a1;
  return a3(v7);
}

uint64_t (*PaperDocumentView.showParticipantCursors.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperDocumentView.showParticipantCursors.modify;
}

uint64_t PaperDocumentView.showParticipantCursors.modify(uint64_t a1, char a2)
{
  return PaperDocumentView.canEditVellumOpacity.modify(a1, a2, (uint64_t (*)(uint64_t))PaperDocumentView.showParticipantCursors.didset);
}

uint64_t PaperDocumentView.canEditVellumOpacity.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t PaperDocumentView.textualContextProvider.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider);
}

uint64_t PaperDocumentView.textualContextProvider.setter(uint64_t a1, uint64_t a2)
{
  return AnyCanvas.delegate.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider);
}

uint64_t (*PaperDocumentView.textualContextProvider.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

void PaperDocumentView.canvasSelectionDidChange(_:)(char *a1)
{
  uint64_t v2 = *(void *)&a1[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v2) {
    goto LABEL_30;
  }
  uint64_t v4 = (void *)(v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (*(void *)(*v4 + 16) || *(void *)(v4[1] + 16))
  {
    uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
    swift_beginAccess();
    uint64_t v6 = *v5;
    uint64_t v7 = *v5 + 64;
    uint64_t v8 = 1 << *(unsigned char *)(*v5 + 32);
    uint64_t v9 = -1;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    unint64_t v10 = v9 & *(void *)(*v5 + 64);
    int64_t v11 = (unint64_t)(v8 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v12 = 0;
    uint64_t v13 = MEMORY[0x263F8EE88];
    while (1)
    {
      if (v10)
      {
        unint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
          goto LABEL_29;
        }
        if (v16 >= v11) {
          goto LABEL_26;
        }
        unint64_t v17 = *(void *)(v7 + 8 * v16);
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v11) {
            goto LABEL_26;
          }
          unint64_t v17 = *(void *)(v7 + 8 * v12);
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v11) {
              goto LABEL_26;
            }
            unint64_t v17 = *(void *)(v7 + 8 * v12);
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v11)
              {
LABEL_26:
                swift_release();
                return;
              }
              unint64_t v17 = *(void *)(v7 + 8 * v18);
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    break;
                  }
                  if (v12 >= v11) {
                    goto LABEL_26;
                  }
                  unint64_t v17 = *(void *)(v7 + 8 * v12);
                  ++v18;
                  if (v17) {
                    goto LABEL_22;
                  }
                }
LABEL_29:
                __break(1u);
LABEL_30:
                __break(1u);
                return;
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_22:
        unint64_t v10 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      int64_t v19 = *(char **)(*(void *)(v6 + 56) + 16 * v15);
      if (v19 != a1)
      {
        type metadata accessor for AnyCanvas();
        if (swift_dynamicCastClass())
        {
          uint64_t v20 = v19;
          AnyCanvas.selection.setter(v13, v13, 6, 0);
        }
      }
    }
  }
}

uint64_t PaperDocumentView.canvasDrawingWillChange(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v3);
  if (result)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 64))(v1, a1, ObjectType, v5);
    return swift_unknownObjectRelease();
  }
  return result;
}

void PaperDocumentView.pdfSelectionChanged(_:)()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = MEMORY[0x263F8EE88];
  while (v6)
  {
    unint64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v11 = v10 | (v8 << 6);
LABEL_22:
    unint64_t v15 = *(void **)(*(void *)(v2 + 56) + 16 * v11);
    type metadata accessor for AnyCanvas();
    if (swift_dynamicCastClass())
    {
      id v16 = v15;
      AnyCanvas.selection.setter(v9, v9, 6, 0);
    }
  }
  int64_t v12 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v7) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v12);
  ++v8;
  if (v13) {
    goto LABEL_21;
  }
  int64_t v8 = v12 + 1;
  if (v12 + 1 >= v7) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v8);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v8 = v12 + 2;
  if (v12 + 2 >= v7) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v8);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v8 = v12 + 3;
  if (v12 + 3 >= v7) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v8);
  if (v13)
  {
LABEL_21:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_22;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v7)
  {
LABEL_24:
    swift_release();
    return;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
}

void PaperDocumentView.annotationPropertiesChanged(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Notification();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v10 - 8);
  int64_t v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend(self, sel_isMainThread))
  {
    uint64_t v17 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v9, 1, 1, v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    type metadata accessor for MainActor();
    int64_t v18 = v1;
    uint64_t v19 = static MainActor.shared.getter();
    unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    int64_t v21 = (char *)swift_allocObject();
    uint64_t v22 = MEMORY[0x263F8F500];
    *((void *)v21 + 2) = v19;
    *((void *)v21 + 3) = v22;
    *((void *)v21 + 4) = v18;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v21[v20], (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentView.annotationPropertiesChanged(_:), (uint64_t)v21);
    swift_release();
    return;
  }
  if (v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument]) {
    return;
  }
  uint64_t v13 = Notification.userInfo.getter();
  if (!v13)
  {
    long long v63 = 0u;
    long long v64 = 0u;
LABEL_24:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v63, &demangling cache variable for type metadata for Any?);
    return;
  }
  uint64_t v14 = v13;
  uint64_t v60 = 0x697461746F6E6E61;
  unint64_t v61 = 0xEA00000000006E6FLL;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v14 + 16) && (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62), (v16 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v14 + 56) + 32 * v15, (uint64_t)&v63);
  }
  else
  {
    long long v63 = 0u;
    long long v64 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v62);
  if (!*((void *)&v64 + 1)) {
    goto LABEL_24;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  uint64_t v23 = (void *)v62[0];
  uint64_t v24 = Notification.userInfo.getter();
  if (!v24)
  {
    long long v63 = 0u;
    long long v64 = 0u;
LABEL_23:

    goto LABEL_24;
  }
  uint64_t v25 = v24;
  uint64_t v60 = 7955819;
  unint64_t v61 = 0xE300000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v25 + 16) && (unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62), (v27 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v25 + 56) + 32 * v26, (uint64_t)&v63);
  }
  else
  {
    long long v63 = 0u;
    long long v64 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v62);
  if (!*((void *)&v64 + 1)) {
    goto LABEL_23;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    return;
  }
  unint64_t v28 = (void *)MEMORY[0x21054D080](v62[0], v62[1]);
  swift_bridgeObjectRelease();
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;
  if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v31 == v32) {
    goto LABEL_21;
  }
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v33) {
    goto LABEL_28;
  }
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v44;
  if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v45 == v46) {
    goto LABEL_21;
  }
  char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v47) {
    goto LABEL_28;
  }
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v50 = v49;
  if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v50 == v51) {
    goto LABEL_21;
  }
  char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v52) {
    goto LABEL_28;
  }
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;
  if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v55 == v56)
  {
LABEL_21:
    swift_bridgeObjectRelease_n();
LABEL_28:
    id v34 = *(id *)&v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument];
    id v35 = objc_msgSend(v23, sel_fieldName);
    id v36 = objc_msgSend(v34, sel_annotationsForFieldName_, v35);

    if (v36)
    {
      uint64_t v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v38 = specialized _arrayConditionalCast<A, B>(_:)(v37);
      swift_bridgeObjectRelease();
      if (v38)
      {
        if (v38 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v58) {
            goto LABEL_34;
          }
        }
        else if (*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_34:
          uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v12, 1, 1, v41);
          uint64_t v42 = v2;
          swift_bridgeObjectRetain();
          specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(0, 1, (uint64_t)v12, v42, v42, v38);

          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
          swift_bridgeObjectRelease();
          return;
        }
        swift_bridgeObjectRelease();
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_20C835790;
    *(void *)(v39 + 32) = v23;
    v62[0] = v39;
    specialized Array._endMutation()();
    unint64_t v38 = v62[0];
    id v40 = v23;
    goto LABEL_34;
  }
  char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v57) {
    goto LABEL_28;
  }
}

uint64_t closure #1 in PaperDocumentView.annotationPropertiesChanged(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in PaperDocumentView.annotationPropertiesChanged(_:), v7, v6);
}

uint64_t closure #1 in PaperDocumentView.annotationPropertiesChanged(_:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  PaperDocumentView.annotationPropertiesChanged(_:)(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in closure #2 in PaperDocumentView.annotationPropertiesChanged(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v37 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v42 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CRKeyPath();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  id v36 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  id v40 = (char *)v29 - v14;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v15 = result;
    if (result) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v15 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v15 >= 1)
  {
    v29[1] = v2;
    uint64_t v17 = 0;
    unint64_t v18 = a2 & 0xC000000000000001;
    uint64_t v32 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    char v33 = (void (**)(char *, char *, uint64_t))(v11 + 32);
    uint64_t v30 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v31 = (void (**)(char *, uint64_t))(v5 + 8);
    unint64_t v38 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    uint64_t v39 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    unint64_t v34 = a2 & 0xC000000000000001;
    uint64_t v35 = v15;
    while (1)
    {
      if (v18) {
        uint64_t v19 = (PDFAnnotation *)MEMORY[0x21054E050](v17, a2);
      }
      else {
        uint64_t v19 = (PDFAnnotation *)*(id *)(a2 + 8 * v17 + 32);
      }
      unint64_t v20 = v19;
      type metadata accessor for CanvasElementPDFAnnotation();
      uint64_t v21 = swift_dynamicCastClass();
      if (v21)
      {
        uint64_t v22 = v21 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
        swift_beginAccess();
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v22, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        if ((*v39)(v9, 1, v10) != 1)
        {
          unint64_t v23 = a2;
          uint64_t v24 = v40;
          (*v33)(v40, v9, v10);
          (*v32)(v36, v24, v10);
          uint64_t v25 = type metadata accessor for PDFAnnotationElement();
          lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
          WeakRef.init(id:)();
          uint64_t v26 = v4;
          char v27 = (void (*)(char *, void))WeakRef.subscript.modify();
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v28, 1, v25)) {
            PDFAnnotationElement.updateFrom(_:)(v20);
          }
          v27(v41, 0);
          a2 = v23;

          uint64_t v4 = v26;
          (*v31)(v42, v26);
          (*v30)(v40, v10);
          unint64_t v18 = v34;
          uint64_t v15 = v35;
          goto LABEL_7;
        }
      }
      else
      {
        (*v38)(v9, 1, 1, v10);
      }

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
LABEL_7:
      if (v15 == ++v17) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
  return result;
}

void PaperDocumentView.annotationsChanged(_:)()
{
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument) & 1) == 0)
  {
    uint64_t v1 = Notification.userInfo.getter();
    if (!v1) {
      goto LABEL_13;
    }
    uint64_t v2 = v1;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v2 + 16) && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10), (v4 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v3, (uint64_t)&v11);
    }
    else
    {
      long long v11 = 0u;
      long long v12 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v10);
    if (!*((void *)&v12 + 1)) {
      goto LABEL_14;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
    if ((swift_dynamicCast() & 1) == 0) {
      return;
    }

    uint64_t v5 = Notification.userInfo.getter();
    if (v5)
    {
      uint64_t v6 = v5;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v6 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10), (v8 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v7, (uint64_t)&v11);
      }
      else
      {
        long long v11 = 0u;
        long long v12 = 0u;
      }
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)v10);
      if (*((void *)&v12 + 1))
      {
        type metadata accessor for PaperKitPDFPage(0);
        if (swift_dynamicCast())
        {
          id v9 = v10[0];
          PaperDocumentView.pdfPageDidChange(page:)((uint64_t)v10[0]);
        }
        return;
      }
    }
    else
    {
LABEL_13:
      long long v11 = 0u;
      long long v12 = 0u;
    }
LABEL_14:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v11, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t @objc PaperDocumentView.annotationPropertiesChanged(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6 = type metadata accessor for Notification();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = a1;
  a4(v9);

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t PaperDocumentView.pdfPageDidChange(page:)(uint64_t a1)
{
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v37 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  unint64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v7 - 8);
  id v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v34 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  char v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1;
  uint64_t v18 = a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v18, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v19 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v6, 1, v19))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  uint64_t v20 = (uint64_t)v9;
  uint64_t v35 = v3;
  id v36 = v16;
  uint64_t v21 = v17;
  uint64_t v22 = v39;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v6[*(int *)(v19 + 20)], (uint64_t)v12, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  uint64_t v24 = v13;
  uint64_t v25 = v36;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v36, v12, v13);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v20, 1, 1, v13);
  MEMORY[0x270FA5388](v26);
  uint64_t v27 = v38;
  *(&v34 - 4) = v38;
  *(&v34 - 3) = (uint64_t)v25;
  *(&v34 - 2) = v21;
  LOBYTE(v25) = specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(0, 0, v20, (void (*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in PaperDocumentView.pdfPageDidChange(page:));
  outlined destroy of StocksKitCurrencyCache.Provider?(v20, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v28 = v37;
  if (v25)
  {
    uint64_t v29 = v27 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
    uint64_t v31 = v35;
    v30(v35, v29, v22);
    PassthroughSubject.send(_:)();
    uint64_t v32 = *(void (**)(char *, uint64_t))(v28 + 8);
    v32(v31, v22);
    if (*(void *)(v38 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection))
    {
      char v33 = v35;
      v30(v35, v29, v22);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v32(v33, v22);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v36, v24);
}

uint64_t closure #1 in PaperDocumentView.pdfPageDidChange(page:)()
{
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.pdfPageDidChange(page:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v8 = (uint64_t (*)(unsigned char *, void))WeakTagged_3.subscript.modify();
  uint64_t v9 = *(void *)(v7 + 24);
  if (v9)
  {
    uint64_t v20 = v3;
    uint64_t v10 = *(void *)(v7 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v7, v9);
    uint64_t v18 = a3;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 136);
    uint64_t v12 = type metadata accessor for PaperDocument(0);
    uint64_t v13 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    char v14 = v11(a2, a1, v12, v13, v9, v10);
    a3 = v18;
    char v15 = v14;
    uint64_t result = v8(v19, 0);
    char v17 = v15 & 1;
  }
  else
  {
    uint64_t result = v8(v19, 0);
    char v17 = 2;
  }
  *a3 = v17;
  return result;
}

uint64_t PaperDocumentView.loadPaperKitPageIfNeeded(for:)(void *a1)
{
  uint64_t v115 = type metadata accessor for CRKeyPath();
  uint64_t v94 = *(void *)(v115 - 8);
  MEMORY[0x270FA5388](v115);
  uint64_t v97 = (char *)v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v107 = *(void *)(v103 - 8);
  MEMORY[0x270FA5388](v103);
  uint64_t v95 = (uint64_t)v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v96 = (char *)v88 - v5;
  MEMORY[0x270FA5388](v6);
  uint64_t v101 = (char *)v88 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocumentPage?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v99 = (char *)v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  id v102 = (char *)v88 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v100 = (char *)v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v105 = (void (*)(char *, uint64_t, uint64_t))((char *)v88 - v15);
  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>);
  uint64_t v108 = *(void *)(v109 - 8);
  MEMORY[0x270FA5388](v109);
  uint64_t v98 = (char *)v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v106 = (char *)v88 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v114 = (uint64_t)v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for PDFPageID();
  uint64_t v112 = *(void *)(v113 - 8);
  MEMORY[0x270FA5388](v113);
  uint64_t v110 = (uint64_t)v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v111 = (char *)v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)v88 - v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v29 = (char *)v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  char v33 = (char *)v88 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a1;
  uint64_t v35 = (uint64_t)a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v35, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v36 = type metadata accessor for PageId(0);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48);
  if (v37(v26, 1, v36))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v29, 1, 1, v30);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v29, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  uint64_t v93 = v33;
  int v92 = v34;
  uint64_t v38 = v115;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v26[*(int *)(v36 + 20)], (uint64_t)v29, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v29, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  uint64_t v40 = v30;
  uint64_t v41 = v93;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v93, v29, v40);
  uint64_t v42 = v35;
  uint64_t v43 = v111;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v42, (uint64_t)v111, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  if (!v37(v43, 1, v36))
  {
    uint64_t v44 = v114;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v43, v114, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v44, 1, v113) == 1) {
      goto LABEL_8;
    }
    uint64_t v113 = v31;
    uint64_t v45 = v110;
    outlined init with take of Image(v44, v110, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    uint64_t v46 = (uint64_t)v105;
    WeakTagged_3.tagged3.getter();
    uint64_t v47 = v108;
    uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48);
    uint64_t v49 = v109;
    if (v48(v46, 1, v109) == 1)
    {
      _s8PaperKit0A8DocumentVWOhTm_0(v45, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?);
      uint64_t v31 = v113;
LABEL_30:
      uint64_t v41 = v93;
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v41, v40);
    }
    uint64_t v114 = v40;
    uint64_t v105 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 32);
    v105(v106, v46, v49);
    uint64_t v50 = v104 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    uint64_t v51 = v107;
    char v52 = *(char **)(v107 + 16);
    uint64_t v53 = v101;
    uint64_t v112 = v50;
    uint64_t v54 = v50;
    uint64_t v55 = v103;
    uint64_t v111 = v52;
    uint64_t v90 = v107 + 16;
    ((void (*)(char *, uint64_t, uint64_t))v52)(v101, v54, v103);
    uint64_t v56 = type metadata accessor for PaperDocument(0);
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    uint64_t v91 = v56;
    uint64_t v57 = (uint64_t)v102;
    WeakRef.subscript.getter();
    uint64_t v58 = *(void (**)(char *, uint64_t))(v51 + 8);
    uint64_t v107 = v51 + 8;
    v58(v53, v55);
    uint64_t v59 = type metadata accessor for PaperDocumentPage();
    uint64_t v60 = *(void *)(v59 - 8);
    unint64_t v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
    uint64_t v62 = v60 + 48;
    if (v61(v57, 1, v59) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for PaperDocumentPage?);
      uint64_t v41 = v93;
LABEL_15:
      (*(void (**)(char *, uint64_t))(v108 + 8))(v106, v109);
      _s8PaperKit0A8DocumentVWOhTm_0(v110, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      uint64_t v40 = v114;
      uint64_t v31 = v113;
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v41, v40);
    }
    v88[2] = v62;
    int v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v61;
    uint64_t v101 = (char *)v58;
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    char v64 = v117[0];
    uint64_t v65 = _s8PaperKit0A8DocumentVWOhTm_0(v57, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
    uint64_t v41 = v93;
    if ((v64 & 0x20) == 0) {
      goto LABEL_15;
    }
    v88[0] = v63;
    v88[1] = v88;
    id v102 = (char *)OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument;
    *(unsigned char *)(v104 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument) = 1;
    MEMORY[0x270FA5388](v65);
    uint64_t v66 = v92;
    v88[-4] = v41;
    v88[-3] = v66;
    v88[-2] = v110;
    v88[-1] = v67;
    swift_beginAccess();
    uint64_t v68 = v103;
    Capsule.callAsFunction<A>(_:)();
    swift_endAccess();
    uint64_t v69 = v100;
    WeakTagged_3.tagged3.getter();
    uint64_t v70 = v109;
    if (v48((uint64_t)v69, 1, v109) == 1)
    {
      (*(void (**)(char *, uint64_t))(v108 + 8))(v106, v70);
      uint64_t v71 = &demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?;
      uint64_t v72 = (uint64_t)v69;
    }
    else
    {
      uint64_t v73 = v98;
      v105(v98, (uint64_t)v69, v70);
      uint64_t v74 = v96;
      ((void (*)(char *, uint64_t, uint64_t))v111)(v96, v112, v68);
      uint64_t v75 = (uint64_t)v99;
      WeakRef.subscript.getter();
      ((void (*)(char *, uint64_t))v101)(v74, v68);
      int v76 = v89(v75, 1, v59);
      uint64_t v77 = v106;
      if (v76 != 1)
      {
        WeakRef.id.getter();
        uint64_t v79 = v95;
        ((void (*)(uint64_t, uint64_t, uint64_t))v111)(v95, v112, v68);
        v117[0] = xmmword_20C834980;
        type metadata accessor for PaperKitPDFPage(0);
        memset(&v117[1], 0, 59);
        uint64_t v80 = v92;
        uint64_t v81 = swift_dynamicCastClass();
        uint64_t v82 = v38;
        uint64_t v83 = v94;
        uint64_t v40 = v114;
        if (v81)
        {
          uint64_t v84 = (char *)v81;
          id v85 = v80;
          CRRegister.wrappedValue.getter();
          if ((v116 & 0x20) == 0)
          {
            specialized PaperPage.updateCropAndRotation(pdfPage:updateMediaBox:)(v84, 0);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
            CRRegister.wrappedValue.getter();
            if (*(void *)&v84[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState])
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              *(void *)&v84[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState] = v116;
              outlined consume of PaperKitPDFPage.AnnotationIDState(0);
            }
            specialized PaperPage<>.updateAnnotations<A>(in:use:capsule:options:)(v84, 0x8000000000000000, v95, (uint64_t)v117);
          }

          uint64_t v75 = (uint64_t)v99;
          uint64_t v79 = v95;
        }
        ((void (*)(uint64_t, uint64_t))v101)(v79, v103);
        (*(void (**)(char *, uint64_t))(v83 + 8))(v97, v82);
        uint64_t v86 = *(void (**)(char *, uint64_t))(v108 + 8);
        uint64_t v87 = v109;
        v86(v98, v109);
        v86(v106, v87);
        _s8PaperKit0A8DocumentVWOhTm_0(v75, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
        goto LABEL_29;
      }
      uint64_t v78 = *(void (**)(char *, uint64_t))(v108 + 8);
      v78(v73, v70);
      v78(v77, v70);
      uint64_t v71 = &demangling cache variable for type metadata for PaperDocumentPage?;
      uint64_t v72 = v75;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v72, v71);
    uint64_t v40 = v114;
LABEL_29:
    uint64_t v31 = v113;
    v102[v104] = 0;
    _s8PaperKit0A8DocumentVWOhTm_0(v110, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    goto LABEL_30;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v44 = v114;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v112 + 56))(v114, 1, 1, v113);
LABEL_8:
  outlined destroy of StocksKitCurrencyCache.Provider?(v44, &demangling cache variable for type metadata for PDFPageID?);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v41, v40);
}

uint64_t closure #1 in PaperDocumentView.loadPaperKitPageIfNeeded(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = a5;
  uint64_t v51 = a4;
  uint64_t v55 = a3;
  uint64_t v58 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v44 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v60 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v57 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v56 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v46 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  uint64_t v53 = a1;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  uint64_t v21 = v60 + 16;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
  uint64_t v54 = v8;
  uint64_t v43 = v20;
  v20(v10, v58, v8);
  unint64_t v22 = lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  char v52 = v10;
  unint64_t v47 = v22;
  SharedTagged_3.init(_:)();
  uint64_t v45 = specialized Collection<>.firstIndex(of:)();
  LOBYTE(a1) = v23;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v57 + 8);
  uint64_t v48 = v57 + 8;
  v24(v15, v11);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
  uint64_t v49 = v16;
  uint64_t result = v25(v19, v16);
  if ((a1 & 1) == 0)
  {
    uint64_t v41 = v21;
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t))v24;
    uint64_t v27 = CRContext.assetManager.getter();
    uint64_t v28 = v56;
    specialized PaperKitPDFPage.decodePaperPage<A>(pageID:in:assetManager:)(v51, v53, v27, v56);
    swift_release();
    swift_getKeyPath();
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
    uint64_t v30 = v11;
    v29(v15, v28, v11);
    uint64_t v31 = (void (*)(unsigned char *, void))Capsule.Ref<>.subscript.modify();
    CROrderedSet.subscript.setter();
    v31(v59, 0);
    swift_release();
    v29(v15, v28, v11);
    uint64_t v32 = v52;
    WeakTagged_3.init(_:)();
    uint64_t v33 = v58;
    (*(void (**)(uint64_t, char *, uint64_t))(v60 + 40))(v58, v32, v54);
    uint64_t v34 = PaperKitPDFPage.pageId.modify();
    uint64_t v36 = v35;
    uint64_t v37 = type metadata accessor for PageId(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v36, 1, v37))
    {
      uint64_t v38 = (uint64_t)v44;
      uint64_t v39 = v33;
      uint64_t v40 = v54;
      v43(v44, v39, v54);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56))(v38, 0, 1, v40);
      outlined assign with take of Date?(v38, v36 + *(int *)(v37 + 20), &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    }
    ((void (*)(unsigned char *, void))v34)(v59, 0);
    return v42(v56, v30);
  }
  return result;
}

void __swiftcall PaperDocumentView.pdfView(_:overlayViewFor:)(UIView_optional *__return_ptr retstr, PDFView *_, PDFPage *overlayViewFor)
{
  uint64_t v4 = v3;
  uint64_t v101 = _;
  uint64_t v103 = type metadata accessor for CRKeyPath();
  uint64_t v102 = *(void *)(v103 - 8);
  MEMORY[0x270FA5388](v103);
  uint64_t v100 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v107 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v99 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v92 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v22 = swift_dynamicCastClass();
  if (!v22) {
    return;
  }
  char v23 = (void *)v22;
  uint64_t v97 = v21;
  uint64_t v106 = v19;
  uint64_t v104 = v18;
  uint64_t v105 = v4;
  uint64_t v24 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v25 = *v24;
  uint64_t v26 = *(void *)(*v24 + 16);
  uint64_t v27 = overlayViewFor;
  uint64_t v28 = v27;
  if (v26)
  {
    uint64_t v29 = v27;
    swift_bridgeObjectRetain();
    unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v23);
    if (v31)
    {
      *(id *)(*(void *)(v25 + 56) + 16 * v30);
      swift_bridgeObjectRelease();

      return;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v98 = v28;
  uint64_t v32 = v105;
  PaperDocumentView.loadPaperKitPageIfNeeded(for:)(v23);
  uint64_t v33 = (uint64_t)v23 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v33, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v34 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v14, 1, v34))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56))(v17, 1, 1, v104);
LABEL_9:

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    return;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v14[*(int *)(v34 + 20)], (uint64_t)v17, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v35 = v106;
  uint64_t v36 = v104;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v17, 1, v104) == 1) {
    goto LABEL_9;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v97, v17, v36);
  uint64_t v37 = v32 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  uint64_t v38 = v107;
  uint64_t v95 = *(void (**)(char *, uint64_t, uint64_t))(v107 + 16);
  v95(v11, v37, v7);
  uint64_t v39 = type metadata accessor for PaperDocument(0);
  uint64_t v40 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  uint64_t v96 = v39;
  uint64_t v94 = v40;
  WeakTagged_3.subscript.getter();
  uint64_t v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  uint64_t v42 = v38 + 8;
  uint64_t v41 = v43;
  v43(v11, v7);
  uint64_t v44 = v111;
  if (!v111)
  {

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v110, &demangling cache variable for type metadata for PaperPage?);
LABEL_33:
    (*(void (**)(char *, uint64_t))(v106 + 8))(v97, v36);
    return;
  }
  uint64_t v93 = v41;
  uint64_t v45 = v36;
  uint64_t v46 = v112;
  int v92 = __swift_project_boxed_opaque_existential_1(&v110, v111);
  uint64_t v107 = v42;
  unint64_t v47 = v100;
  MEMORY[0x21054B930](v45);
  uint64_t v48 = v99;
  v95(v99, v37, v7);
  uint64_t v49 = *(uint64_t (**)(char *, char *, PDFView *, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 120);
  uint64_t v91 = v46;
  uint64_t v50 = v105;
  uint64_t v51 = v23;
  char v52 = (void *)v49(v47, v48, v101, v105, v23, v96, v94, v44, v91);
  v93(v48, v7);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v47, v103);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v110);
  if (!v52)
  {

LABEL_32:
    uint64_t v36 = v104;
    goto LABEL_33;
  }
  swift_getObjectType();
  uint64_t v53 = swift_conformsToProtocol2();
  if (v53) {
    uint64_t v54 = v53;
  }
  else {
    uint64_t v54 = 0;
  }
  if (v53) {
    uint64_t v55 = (uint64_t)v52;
  }
  else {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v98;
  if (!v55)
  {

    goto LABEL_32;
  }
  swift_beginAccess();
  uint64_t v57 = v51;
  uint64_t v58 = v56;
  id v59 = v52;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v109 = *v24;
  *uint64_t v24 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v55, v54, v57, isUniquelyReferenced_nonNull_native);
  *uint64_t v24 = v109;
  swift_bridgeObjectRelease();

  swift_endAccess();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v62 = v50 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  swift_beginAccess();
  uint64_t v63 = MEMORY[0x210550400](v62);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 224))(v63, ObjectType, v54);
  (*(void (**)(void, uint64_t, uint64_t))(v54 + 64))(*(unsigned __int8 *)(v50 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_nonDrawingToolMode), ObjectType, v54);
  uint64_t v64 = v50 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger;
  swift_beginAccess();
  uint64_t v65 = MEMORY[0x210550400](v64);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 128))(v65, *(void *)(v64 + 8), ObjectType, v54);
  uint64_t v66 = v50 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource;
  swift_beginAccess();
  uint64_t v67 = MEMORY[0x210550400](v66);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 152))(v67, *(void *)(v66 + 8), ObjectType, v54);
  uint64_t v68 = (unsigned __int8 *)(v50 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors);
  swift_beginAccess();
  (*(void (**)(void, uint64_t, uint64_t))(v54 + 176))(*v68, ObjectType, v54);
  id v69 = PaperDocumentView.paperDocumentViewProxy.getter();
  (*(void (**)(id, _UNKNOWN **, uint64_t, uint64_t))(v54 + 200))(v69, &protocol witness table for PaperDocumentView.PaperDocumentViewProxy, ObjectType, v54);
  id v70 = objc_msgSend(v57, sel_annotations);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  uint64_t v71 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v72 = objc_msgSend(v57, sel_detectedAnnotations);
  unint64_t v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v108 = v71;
  uint64_t v74 = v105;
  specialized Array.append<A>(contentsOf:)(v73, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
  PaperDocumentView.addFormFields(_:for:)(v108, v57);
  swift_bridgeObjectRelease();
  uint64_t v75 = v74 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider;
  swift_beginAccess();
  if (MEMORY[0x210550400](v75))
  {
    uint64_t v76 = *(void *)(v75 + 8);
    uint64_t v77 = swift_getObjectType();
    uint64_t v78 = (void *)(*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v76 + 8))(v74, v97, v77, v76);
    swift_unknownObjectRelease();
    if (v78)
    {
      uint64_t v79 = *(void (**)(void *, uint64_t, uint64_t))(v54 + 16);
      id v80 = v78;
      v79(v78, ObjectType, v54);
      uint64_t v74 = v105;
    }
  }
  uint64_t v81 = *(char **)(v74 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v81)
  {
    uint64_t v82 = &v81[OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments];
    swift_beginAccess();
    uint64_t v83 = *(void **)v82;
    id v84 = v59;
    id v85 = v81;
    char v86 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v82 = v83;
    uint64_t v87 = v106;
    if ((v86 & 1) == 0)
    {
      uint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83[2] + 1, 1, v83, &demangling cache variable for type metadata for _ContiguousArrayStorage<PageOverlayView>, &demangling cache variable for type metadata for PageOverlayView);
      *(void *)uint64_t v82 = v83;
    }
    unint64_t v89 = v83[2];
    unint64_t v88 = v83[3];
    if (v89 >= v88 >> 1)
    {
      uint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v88 > 1), v89 + 1, 1, v83, &demangling cache variable for type metadata for _ContiguousArrayStorage<PageOverlayView>, &demangling cache variable for type metadata for PageOverlayView);
      *(void *)uint64_t v82 = v83;
    }
    CGPDFStreamRef v83[2] = v89 + 1;
    uint64_t v90 = &v83[2 * v89];
    v90[4] = v55;
    v90[5] = v54;
    swift_endAccess();

    (*(void (**)(char *, uint64_t))(v87 + 8))(v97, v104);
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall PaperDocumentView.pdfView(_:willDisplayOverlayView:for:)(PDFView *_, UIView *willDisplayOverlayView, PDFPage *a3)
{
}

Swift::Void __swiftcall PaperDocumentView.pdfView(_:willEndDisplayingOverlayView:for:)(PDFView *_, UIView *willEndDisplayingOverlayView, PDFPage *a3)
{
}

Swift::Void __swiftcall PaperDocumentView.didMoveToSuperview()()
{
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for PaperDocumentView();
  objc_msgSendSuper2(&v4, sel_didMoveToSuperview);
  id v1 = objc_msgSend(v0, sel_superview);

  if (!v1)
  {
    swift_beginAccess();
    id v2 = v0;
    uint64_t v3 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v3);

    swift_bridgeObjectRelease();
    swift_retain();
    FormAnalytics.recordSessionEvent()();
    swift_release();
  }
}

void PaperDocumentView.addFormFields(_:for:)(unint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18) {
      return;
    }
  }
  else if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v12 = static OS_dispatch_queue.main.getter();
  uint64_t v20 = v8;
  uint64_t v13 = (void *)v12;
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v14;
  v15[3] = a2;
  v15[4] = a1;
  aBlock[4] = partial apply for closure #1 in PaperDocumentView.addFormFields(_:for:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_456;
  uint64_t v16 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v17 = a2;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x21054DA10](0, v11, v7, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v20);
}

void closure #1 in PaperDocumentView.addFormFields(_:for:)(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v227 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v220 = *(void *)(v227 - 8);
  MEMORY[0x270FA5388](v227);
  uint64_t v226 = (char *)&v214 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CRKeyPath();
  uint64_t v221 = *(void *)(v7 - 8);
  uint64_t v222 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v223 = (char *)&v214 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v10 = *(char **)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v231 = (char *)&v214 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v230 = a1 + 16;
  uint64_t v12 = MEMORY[0x210550400](a1 + 16);
  if (!v12) {
    return;
  }
  uint64_t v13 = (void *)v12;
  uint64_t v14 = (uint64_t *)(v12 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v15 = *v14;
  id v16 = a2;
  swift_bridgeObjectRetain();

  if (!*(void *)(v15 + 16)
    || (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16), v18 = v16, (v19 & 1) == 0))
  {

    goto LABEL_93;
  }
  id v20 = *(id *)(*(void *)(v15 + 56) + 16 * v17);

  swift_bridgeObjectRelease();
  type metadata accessor for AnyCanvas();
  char v216 = (void *)swift_dynamicCastClass();
  if (!v216)
  {

    return;
  }
  id v215 = v20;
  unint64_t v21 = a3 >> 62;
  if (a3 >> 62) {
    goto LABEL_191;
  }
  if (*(uint64_t *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1)
  {
LABEL_192:

    return;
  }
  while (2)
  {
    uint64_t v228 = (void (**)(unint64_t, uint64_t))v10;
    uint64_t v22 = MEMORY[0x263F8EE78];
    unint64_t v246 = MEMORY[0x263F8EE78];
    unint64_t v247 = MEMORY[0x263F8EE78];
    LODWORD(v238) = PaperKitPDFPage.hasFormWidgets.getter();
    uint64_t v240 = AnyCanvas.formFieldElements.getter();
    unint64_t v23 = specialized Dictionary.init(dictionaryLiteral:)(v22);
    uint64_t v24 = v23;
    if (v21)
    {
      unint64_t v120 = v23;
      swift_bridgeObjectRetain();
      uint64_t v24 = v120;
      uint64_t v10 = (char *)_CocoaArrayWrapper.endIndex.getter();
      if (!v10)
      {
LABEL_153:
        uint64_t v239 = v24;
        swift_bridgeObjectRelease();
        uint64_t v121 = swift_bridgeObjectRelease();
        uint64_t v236 = (uint64_t (*)(void))MEMORY[0x263F8EE78];
        goto LABEL_155;
      }
    }
    else
    {
      uint64_t v10 = *(char **)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v10) {
        goto LABEL_153;
      }
    }
    id v219 = v18;
    unint64_t v235 = a3 & 0xC000000000000001;
    swift_beginAccess();
    unint64_t v21 = 0;
    unint64_t v224 = a3 + 32;
    uint64_t v225 = a3 & 0xFFFFFFFFFFFFFF8;
    unint64_t v25 = v240 & 0xFFFFFFFFFFFFFF8;
    id v229 = (id)(v240 & 0xFFFFFFFFFFFFFF8);
    if (v240 < 0) {
      unint64_t v25 = v240;
    }
    unint64_t v214 = v25;
    uint64_t v237 = (void (**)(char *, uint64_t))(v240 & 0xC000000000000001);
    char v217 = (void (**)(unint64_t, uint64_t))*MEMORY[0x263F29540];
    unint64_t v218 = a3;
    uint64_t v26 = &selRef_strokeUUID;
    uint64_t v232 = v9;
    uint64_t v234 = (uint64_t)v10;
    while (1)
    {
      if (v235)
      {
        id v28 = (id)MEMORY[0x21054E050](v21, a3);
      }
      else
      {
        if (v21 >= *(void *)(v225 + 16)) {
          goto LABEL_188;
        }
        id v28 = *(id *)(v224 + 8 * v21);
      }
      uint64_t v27 = (uint64_t)v28;
      BOOL v29 = __OFADD__(v21++, 1);
      if (v29)
      {
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
        goto LABEL_190;
      }
      uint64_t v239 = v24;
      id v18 = objc_msgSend(v28, sel_isSynthesizedFormField, v214, v215);
      type metadata accessor for CanvasElementPDFAnnotation();
      uint64_t v30 = swift_dynamicCastClass();
      if (v30) {
        break;
      }
      if (!v18) {
        goto LABEL_47;
      }
      if ((v238 & 1) == 0) {
        goto LABEL_36;
      }
LABEL_14:
      uint64_t v24 = v239;
      uint64_t v10 = (char *)v234;
LABEL_15:

      if ((char *)v21 == v10)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v217 = v228 + 1;
        uint64_t v240 = v24 & 0xC000000000000001;
        uint64_t v90 = v24 & 0xFFFFFFFFFFFFFF8;
        if (v24 < 0) {
          uint64_t v90 = v24;
        }
        uint64_t v238 = v90;
        swift_bridgeObjectRetain();
        unint64_t v91 = 0;
        uint64_t v237 = (void (**)(char *, uint64_t))(MEMORY[0x263F8EE50] + 8);
        uint64_t v27 = MEMORY[0x263F8EE58] + 8;
        uint64_t v236 = (uint64_t (*)(void))MEMORY[0x263F8EE78];
        unint64_t v21 = (unint64_t)v231;
        id v18 = v219;
        while (1)
        {
          if (v235)
          {
            id v92 = (id)MEMORY[0x21054E050](v91, a3);
          }
          else
          {
            if (v91 >= *(void *)(v225 + 16)) {
              goto LABEL_189;
            }
            id v92 = *(id *)(v224 + 8 * v91);
          }
          BOOL v29 = __OFADD__(v91, 1);
          uint64_t v93 = (char *)(v91 + 1);
          if (v29) {
            goto LABEL_187;
          }
          uint64_t v233 = v93;
          uint64_t v239 = v24;
          uint64_t v94 = v92;
          id v95 = objc_msgSend(v18, sel_formFieldGroupForAnnotation_, v92);
          if ((uint64_t)objc_msgSend(v95, sel_count) > 0) {
            break;
          }

          uint64_t v24 = v239;
LABEL_100:
          unint64_t v91 = (unint64_t)v233;
          if (v233 == v10)
          {
            uint64_t v121 = swift_bridgeObjectRelease();
LABEL_155:
            uint64_t v122 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v216) + 0x2F8);
            uint64_t v27 = (*MEMORY[0x263F8EED0] & *v216) + 760;
            unint64_t v123 = (void *)v122(v121);
            uint64_t v125 = v124;
            uint64_t ObjectType = swift_getObjectType();
            uint64_t v127 = *(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 168);
            uint64_t v128 = swift_bridgeObjectRetain();
            v127(v128, ObjectType, v125);

            uint64_t v129 = swift_bridgeObjectRelease();
            uint64_t v130 = (void *)v122(v129);
            uint64_t v132 = v131;
            uint64_t v133 = swift_getObjectType();
            uint64_t v134 = *(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 192);
            uint64_t v135 = swift_bridgeObjectRetain();
            v134(v135, v133, v132);

            uint64_t v136 = swift_bridgeObjectRelease();
            uint64_t v137 = (void *)v122(v136);
            uint64_t v139 = v138;
            uint64_t v140 = swift_getObjectType();
            unint64_t v141 = *(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 184);
            uint64_t v142 = swift_bridgeObjectRetain();
            v141(v142, v140, v139);

            uint64_t v143 = swift_bridgeObjectRelease();
            uint64_t v144 = (void *)v122(v143);
            uint64_t v77 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v144) + 0x88))();

            if (v77)
            {
              if (one-time initialization token for manager != -1) {
                goto LABEL_194;
              }
              goto LABEL_157;
            }
            goto LABEL_158;
          }
        }
        id v229 = v94;
        unint64_t v245 = MEMORY[0x263F8EE78];
        uint64_t v96 = (void (**)(unint64_t, uint64_t))v95;
        NSOrderedSet.makeIterator()();
        uint64_t v228 = v96;

        lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, MEMORY[0x263F06DC0]);
        while (1)
        {
          dispatch thunk of IteratorProtocol.next()();
          if (!v244) {
            break;
          }
          outlined init with take of Any(&v243, v242);
          outlined init with copy of Any((uint64_t)v242, (uint64_t)v241);
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
          if (swift_dynamicCast())
          {
            MEMORY[0x21054D330]();
            if (*(void *)((v245 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v245 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v242);
        }
        (*v217)(v21, v9);
        unint64_t v97 = v245;
        *(void *)&long long v243 = MEMORY[0x263F8EE78];
        if (!(v245 >> 62))
        {
          uint64_t v98 = *(uint64_t **)((v245 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (v98) {
            goto LABEL_116;
          }
LABEL_136:
          swift_bridgeObjectRelease();
          uint64_t v109 = MEMORY[0x263F8EE78];
LABEL_137:
          swift_bridgeObjectRelease();
          uint64_t v110 = v236;
          unint64_t v21 = *((void *)v236 + 2);
          a3 = v218;
          uint64_t v9 = v232;
          if (v21)
          {
            id v18 = (id)*((void *)v236 + 4);
            swift_bridgeObjectRetain();
            unint64_t v111 = swift_bridgeObjectRetain();
            unsigned __int8 v112 = specialized static Array<A>.== infix(_:_:)(v111, v109);
            swift_bridgeObjectRelease();
            if (v112)
            {
LABEL_139:

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v113 = v228;
              id v18 = v219;
              uint64_t v10 = (char *)v234;
LABEL_151:

              swift_bridgeObjectRelease();
              uint64_t v24 = v239;
              unint64_t v21 = (unint64_t)v231;
              goto LABEL_100;
            }
            if (v21 != 1)
            {
              uint64_t v114 = 5;
              while (1)
              {
                uint64_t v10 = (char *)(v114 - 3);
                if (__OFADD__(v114 - 4, 1)) {
                  break;
                }
                id v18 = (id)*((void *)v236 + v114);
                unint64_t v115 = swift_bridgeObjectRetain();
                unsigned __int8 v116 = specialized static Array<A>.== infix(_:_:)(v115, v109);
                swift_bridgeObjectRelease();
                if (v116) {
                  goto LABEL_139;
                }
                ++v114;
                if (v10 == (char *)v21) {
                  goto LABEL_145;
                }
              }
              __break(1u);
              goto LABEL_186;
            }
LABEL_145:
            uint64_t v110 = v236;
            swift_bridgeObjectRelease();
            uint64_t v10 = (char *)v234;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v110 = (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v110 + 2) + 1, 1, v110, &demangling cache variable for type metadata for _ContiguousArrayStorage<[AnyCanvasElementView]>, &demangling cache variable for type metadata for [AnyCanvasElementView]);
          }
          unint64_t v118 = *((void *)v110 + 2);
          unint64_t v117 = *((void *)v110 + 3);
          uint64_t v236 = v110;
          if (v118 >= v117 >> 1) {
            uint64_t v236 = (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v117 > 1), v118 + 1, 1, v236, &demangling cache variable for type metadata for _ContiguousArrayStorage<[AnyCanvasElementView]>, &demangling cache variable for type metadata for [AnyCanvasElementView]);
          }
          uint64_t v119 = v236;
          *((void *)v236 + 2) = v118 + 1;
          *((void *)v119 + v118 + 4) = v109;

          id v18 = v219;
          uint64_t v113 = (void (**)(unint64_t, uint64_t))v229;
          goto LABEL_151;
        }
        swift_bridgeObjectRetain_n();
        uint64_t v98 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter();
        if (!v98) {
          goto LABEL_136;
        }
LABEL_116:
        uint64_t v99 = 4;
        while (1)
        {
          if ((v97 & 0xC000000000000001) != 0) {
            id v100 = (id)MEMORY[0x21054E050](v99 - 4, v97);
          }
          else {
            id v100 = *(id *)(v97 + 8 * v99);
          }
          uint64_t v101 = v100;
          uint64_t v102 = v99 - 3;
          if (__OFADD__(v99 - 4, 1))
          {
            __break(1u);
            goto LABEL_167;
          }
          if (v240)
          {
            id v103 = v100;
            uint64_t v104 = __CocoaDictionary.lookup(_:)();
            if (v104)
            {
              v241[0] = v104;
              type metadata accessor for AnyCanvasElementView();
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v105 = *(id *)&v242[0];
              swift_unknownObjectRelease();
              goto LABEL_129;
            }
          }
          else
          {
            uint64_t v106 = v239;
            if (!*(void *)(v239 + 16))
            {

              goto LABEL_118;
            }
            id v103 = v100;
            unint64_t v107 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v103);
            if (v108)
            {
              id v105 = *(id *)(*(void *)(v106 + 56) + 8 * v107);
LABEL_129:

              if (v105)
              {
                MEMORY[0x21054D330]();
                if (*(void *)((v243 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v243 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
              goto LABEL_118;
            }
          }

LABEL_118:
          ++v99;
          if ((uint64_t *)v102 == v98)
          {
            swift_bridgeObjectRelease();
            uint64_t v109 = v243;
            uint64_t v10 = (char *)v234;
            goto LABEL_137;
          }
        }
      }
    }
    char v31 = (void *)v30;
    unint64_t v32 = v21;
    uint64_t v33 = (void *)v27;
    unint64_t v34 = a3;
    uint64_t v35 = v26[348];
    uint64_t v36 = (uint64_t)v33;
    id v37 = v33;
    if (objc_msgSend(v31, sel_respondsToSelector_, v35)) {
      unsigned __int8 v38 = [v31 v26[348]];
    }
    else {
      unsigned __int8 v38 = 0;
    }
    if (!objc_msgSend(v31, sel_respondsToSelector_, sel_isAppearanceStreamEmpty))
    {

LABEL_34:
      uint64_t v26 = &selRef_strokeUUID;
      a3 = v34;
      uint64_t v27 = v36;
      unint64_t v21 = v32;
      uint64_t v9 = v232;
      if (!v18) {
        goto LABEL_47;
      }
      if ((v238 & 1) == 0)
      {
LABEL_36:
        unsigned int v39 = 0;
        goto LABEL_37;
      }
      goto LABEL_13;
    }
    unsigned int v39 = objc_msgSend(v31, sel_isAppearanceStreamEmpty);

    if ((v38 & 1) == 0) {
      goto LABEL_34;
    }
    a3 = v34;
    if (v18)
    {
      uint64_t v26 = &selRef_strokeUUID;
      uint64_t v27 = v36;
      unint64_t v21 = v32;
      uint64_t v9 = v232;
      if ((v238 & 1) == 0) {
        goto LABEL_37;
      }
LABEL_13:
      uint64_t v27 = (uint64_t)v37;
      goto LABEL_14;
    }
    uint64_t v26 = &selRef_strokeUUID;
    uint64_t v27 = v36;
    unint64_t v21 = v32;
    uint64_t v9 = v232;
    if (!v39)
    {
LABEL_47:
      if (objc_msgSend((id)v27, sel_isTextWidget))
      {
        unsigned int v58 = objc_msgSend((id)v27, sel_isActivatableTextField);
        uint64_t v10 = (char *)v234;
        if (v58)
        {
          uint64_t v59 = swift_dynamicCastClass();
          if (v59)
          {
            id v18 = (id)v59;
            uint64_t v27 = (uint64_t)(id)v27;
            MEMORY[0x21054D330]();
            if (*(void *)((v246 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v246 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        uint64_t v24 = v239;
        goto LABEL_15;
      }
      goto LABEL_14;
    }
    unsigned int v39 = 1;
LABEL_37:
    uint64_t v40 = MEMORY[0x210550400](v230);
    if (!v40) {
      goto LABEL_14;
    }
    uint64_t v41 = (void *)v40;
    uint64_t v42 = (id *)(v40 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    id v18 = *v42;
    uint64_t v10 = (char *)v18;

    if (!v18) {
      goto LABEL_14;
    }
    uint64_t v43 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v216) + 0x2F8);
    uint64_t v44 = (*MEMORY[0x263F8EED0] & *v216) + 760;
    uint64_t v45 = (void *)v43();
    objc_msgSend((id)v27, sel_bounds);
    objc_msgSend(v10, sel_convertRect_fromPage_, v219);
    objc_msgSend(v45, sel_convertRect_fromCoordinateSpace_, v10);
    CGFloat v47 = v46;
    CGFloat v49 = v48;
    CGFloat v51 = v50;
    CGFloat v53 = v52;

    uint64_t v54 = v240;
    uint64_t v236 = v43;
    uint64_t v233 = (char *)v44;
    if ((unint64_t)v240 >> 62)
    {
      swift_bridgeObjectRetain();
      id v18 = (id)_CocoaArrayWrapper.endIndex.getter();
      if (!v18) {
        goto LABEL_62;
      }
LABEL_41:
      if (v237) {
        uint64_t v55 = (void *)MEMORY[0x21054E050](0, v54);
      }
      else {
        uint64_t v55 = *(id *)(v54 + 32);
      }
      uint64_t v56 = v55;
      v248.origin.CGFloat x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v55) + 0x178))();
      v250.origin.CGFloat x = v47;
      v250.origin.CGFloat y = v49;
      v250.size.CGFloat width = v51;
      v250.size.CGFloat height = v53;
      BOOL v57 = CGRectIntersectsRect(v248, v250);

      if (v57)
      {
LABEL_44:

        swift_bridgeObjectRelease();
        uint64_t v24 = v239;
        a3 = v218;
        uint64_t v9 = v232;
        goto LABEL_88;
      }
      uint64_t v60 = v240;
      if (v18 == (id)1) {
        goto LABEL_62;
      }
      a3 = 5;
      while (1)
      {
        unint64_t v61 = v237 ? (void *)MEMORY[0x21054E050](a3 - 4, v60) : *(id *)(v60 + 8 * a3);
        uint64_t v62 = v61;
        uint64_t v9 = a3 - 3;
        if (__OFADD__(a3 - 4, 1)) {
          break;
        }
        v249.origin.CGFloat x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v61) + 0x178))();
        v251.origin.CGFloat x = v47;
        v251.origin.CGFloat y = v49;
        v251.size.CGFloat width = v51;
        v251.size.CGFloat height = v53;
        BOOL v63 = CGRectIntersectsRect(v249, v251);

        if (v63) {
          goto LABEL_44;
        }
        ++a3;
        uint64_t v60 = v240;
        if ((id)v9 == v18) {
          goto LABEL_62;
        }
      }
LABEL_190:
      __break(1u);
LABEL_191:
      swift_bridgeObjectRetain();
      uint64_t v178 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v178 < 1) {
        goto LABEL_192;
      }
      continue;
    }
    break;
  }
  id v18 = (id)*((void *)v229 + 2);
  swift_bridgeObjectRetain();
  if (v18) {
    goto LABEL_41;
  }
LABEL_62:
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)v27, sel_respondsToSelector_, sel_isAutofillNewContextStart)) {
    unsigned __int8 v64 = objc_msgSend((id)v27, sel_isAutofillNewContextStart);
  }
  else {
    unsigned __int8 v64 = 0;
  }
  if ((objc_msgSend((id)v27, sel_isDetectedSignature) | v39))
  {
    char v65 = 50;
  }
  else
  {
    uint64_t v66 = (void (**)(unint64_t, uint64_t))objc_msgSend((id)v27, sel_autoFillTextContentType);
    if (!v66) {
      uint64_t v66 = v217;
    }
    FormContentType.init(_:)((__C::AFTextContentType)v66);
    char v65 = v243;
  }
  id v67 = objc_msgSend((id)v27, sel_contents);
  if (v67)
  {
    uint64_t v68 = v67;
    id v69 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v71 = v70;
  }
  else
  {
    id v69 = 0;
    uint64_t v71 = 0;
  }
  id v72 = objc_msgSend((id)v27, sel_font);
  id v73 = objc_msgSend((id)v27, sel_alignment);
  LOBYTE(v243) = v65;
  id v74 = objc_msgSend((id)v27, sel_maximumLength);
  specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(v216, v69, v71, v72, (uint64_t)v73, 0, (unsigned __int8 *)&v243, (uint64_t)v74, v47, v49, v51, v53, 1u, v64, 9u, 2u);
  uint64_t v76 = v75;

  swift_bridgeObjectRelease();
  uint64_t v77 = (void *)v239;
  if ((v239 & 0xC000000000000001) == 0)
  {
    id v81 = (id)v27;
    id v82 = v76;
    a3 = v218;
    uint64_t v9 = v232;
LABEL_79:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v243 = v77;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v76, (void *)v27, isUniquelyReferenced_nonNull_native);
    uint64_t v84 = v243;

    swift_bridgeObjectRelease();
    id v85 = v76;
    MEMORY[0x21054D330]();
    if (*(void *)((v247 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v247 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    id v18 = v85;
    id v86 = objc_msgSend((id)v27, sel_labelText);
    if (!v86)
    {
      uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v86 = (id)MEMORY[0x21054D080](v87);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v18, sel_setAccessibilityLabel_, v86);

    if (objc_msgSend((id)v27, sel_respondsToSelector_, sel_setShouldReportAnalytics_)) {
      objc_msgSend((id)v27, sel_setShouldReportAnalytics_, 0);
    }
    if (one-time initialization token for manager != -1) {
      swift_once();
    }
    unint64_t v88 = (void *)v236();
    unint64_t v89 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v88) + 0x88))();

    specialized FormAnalytics.addFielde2eEvent(canvas:)(v89);
    uint64_t v27 = (uint64_t)v89;
    uint64_t v24 = v84;
LABEL_88:
    uint64_t v10 = (char *)v234;
    uint64_t v26 = &selRef_strokeUUID;
    goto LABEL_15;
  }
  if (v239 >= 0) {
    uint64_t v77 = (void *)(v239 & 0xFFFFFFFFFFFFFF8);
  }
  id v78 = (id)v27;
  id v79 = v76;
  uint64_t v80 = __CocoaSet.count.getter();
  a3 = v218;
  uint64_t v9 = v232;
  if (!__OFADD__(v80, 1))
  {
    uint64_t v77 = (void *)specialized _NativeDictionary.init(_:capacity:)((uint64_t)v77, v80 + 1);
    goto LABEL_79;
  }
  __break(1u);
LABEL_194:
  swift_once();
LABEL_157:
  swift_beginAccess();
  uint64_t v145 = swift_bridgeObjectRetain();
  specialized FormAnalytics.recordLatencyEvent(timestamps:endToEnd:)(v145, 1);

  swift_bridgeObjectRelease();
LABEL_158:
  uint64_t v146 = v230;
  swift_beginAccess();
  uint64_t v147 = MEMORY[0x210550400](v146);
  if (!v147) {
    goto LABEL_165;
  }
  uint64_t v148 = (void *)v147;
  uint64_t v149 = PaperDocumentView.currentPageCanvas.getter();

  if (!v149
    || (uint64_t v150 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v149) + 0x2F8))(),
        uint64_t v152 = v151,
        v149,
        uint64_t v153 = swift_getObjectType(),
        uint64_t v99 = (*(uint64_t (**)(uint64_t, uint64_t))(v152 + 144))(v153, v152),
        v150,
        !v99))
  {
LABEL_165:
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_93;
  }
  uint64_t v154 = v230;
  swift_beginAccess();
  uint64_t v155 = MEMORY[0x210550400](v154);
  uint64_t v98 = &OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics;
  if (v155)
  {
    uint64_t v156 = (void *)v155;
    uint64_t v157 = *(void *)(v155 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics);
    swift_retain();

    uint64_t v102 = (uint64_t)v223;
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v216) + 0x300))();
    swift_beginAccess();
    uint64_t v158 = *(void *)(v157 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v158 + 16) && (unint64_t v159 = specialized __RawDictionaryStorage.find<A>(_:)(v102), (v160 & 1) != 0))
    {
      uint64_t v161 = *(void *)(*(void *)(v158 + 56) + 8 * v159);
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v102, v222);
      *(void *)(v99 + OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics) = v161;
      swift_release();
    }
    else
    {
LABEL_167:
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v102, v222);
    }
  }
  uint64_t v233 = (char *)*v98;
  uint64_t v162 = *(void *)&v233[v99];
  swift_retain();
  unint64_t v163 = AnyCanvas.formFieldElements.getter();
  if (v163 >> 62) {
    uint64_t v164 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v164 = *(void *)((v163 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  *(void *)(v162 + 24) = v164;
  swift_release();
  unint64_t v165 = AnyCanvas.formFieldElements.getter();
  unint64_t v166 = v165;
  if (v165 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v167 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v234 = v99;
    if (!v167) {
      goto LABEL_197;
    }
LABEL_172:
    if (v167 < 1)
    {
      __break(1u);
      goto LABEL_243;
    }
    uint64_t v27 = 0;
    uint64_t v240 = v166 & 0xC000000000000001;
    uint64_t v237 = (void (**)(char *, uint64_t))(v220 + 8);
    uint64_t v238 = v220 + 16;
    uint64_t v168 = (char *)MEMORY[0x263F8EE78];
    int v169 = v226;
    uint64_t v170 = v227;
    while (1)
    {
      if (v240) {
        id v171 = (id)MEMORY[0x21054E050](v27, v166);
      }
      else {
        id v171 = *(id *)(v166 + 8 * v27 + 32);
      }
      uint64_t v172 = v171;
      type metadata accessor for ShapeView();
      int v173 = (void *)swift_dynamicCastClass();
      if (v173)
      {
        uint64_t v174 = (char *)v173 + *(void *)((*MEMORY[0x263F8EED0] & *v173) + 0x380);
        swift_beginAccess();
        (*(void (**)(char *, char *, uint64_t))v238)(v169, v174, v170);
        swift_getKeyPath();
        lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
        Capsule<>.subscript.getter();
        swift_release();
        (*v237)(v169, v170);
        LODWORD(v174) = v245;

        BOOL v175 = v174 != 1;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_184;
        }
      }
      else
      {

        BOOL v175 = 1;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_184:
        }
          uint64_t v168 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v168 + 2) + 1, 1, v168);
      }
      unint64_t v177 = *((void *)v168 + 2);
      unint64_t v176 = *((void *)v168 + 3);
      if (v177 >= v176 >> 1) {
        uint64_t v168 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v176 > 1), v177 + 1, 1, v168);
      }
      ++v27;
      *((void *)v168 + 2) = v177 + 1;
      v168[v177 + 32] = v175;
      if (v167 == v27) {
        goto LABEL_198;
      }
    }
  }
  uint64_t v167 = *(void *)((v165 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v234 = v99;
  if (v167) {
    goto LABEL_172;
  }
LABEL_197:
  uint64_t v168 = (char *)MEMORY[0x263F8EE78];
LABEL_198:
  swift_bridgeObjectRelease_n();
  uint64_t v238 = v246;
  if (v246 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v179 = _CocoaArrayWrapper.endIndex.getter();
    if (!v179) {
      goto LABEL_220;
    }
LABEL_200:
    if (v179 >= 1)
    {
      uint64_t v180 = 0;
      uint64_t v237 = (void (**)(char *, uint64_t))(v238 & 0xC000000000000001);
      uint64_t v240 = *MEMORY[0x263F29540];
      uint64_t v181 = (char *)MEMORY[0x263F8EE78];
      unint64_t v235 = v179;
      while (1)
      {
        id v182 = v237 ? (id)MEMORY[0x21054E050](v180, v238) : *(id *)(v238 + 8 * v180 + 32);
        char v183 = v182;
        id v184 = objc_msgSend(v182, sel_autoFillTextContentType, v214);
        if (v184) {
          break;
        }

        char v192 = 1;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_212;
        }
LABEL_215:
        unint64_t v196 = *((void *)v181 + 2);
        unint64_t v195 = *((void *)v181 + 3);
        if (v196 >= v195 >> 1) {
          uint64_t v181 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v195 > 1), v196 + 1, 1, v181);
        }
        ++v180;
        *((void *)v181 + 2) = v196 + 1;
        v181[v196 + 32] = v192 & 1;
        if (v179 == v180) {
          goto LABEL_221;
        }
      }
      uint64_t v185 = v184;
      uint64_t v186 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v188 = v187;
      if (v186 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v188 == v189) {
        char v191 = 1;
      }
      else {
        char v191 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      id v193 = (id)v240;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v192 = v191 ^ 1;
      char v194 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v179 = v235;
      if (v194) {
        goto LABEL_215;
      }
LABEL_212:
      uint64_t v181 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v181 + 2) + 1, 1, v181);
      goto LABEL_215;
    }
LABEL_243:
    __break(1u);
LABEL_244:
    swift_bridgeObjectRetain();
    uint64_t v205 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_230;
  }
  uint64_t v179 = *(void *)((v238 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (v179) {
    goto LABEL_200;
  }
LABEL_220:
  uint64_t v181 = (char *)MEMORY[0x263F8EE78];
LABEL_221:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v27 = v234;
  uint64_t v197 = *(void *)&v233[v234];
  uint64_t v198 = *((void *)v168 + 2);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v199 = *((void *)v181 + 2);
  swift_bridgeObjectRelease();
  if (__OFADD__(v198, v199))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v197 + 32) = v198 + v199;
    swift_release();
    if (!(v247 >> 62))
    {
      uint64_t v200 = *(void *)((v247 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_224;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v200 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_224:
  swift_bridgeObjectRelease();
  if (v200)
  {
    swift_bridgeObjectRelease();
    uint64_t v201 = v230;
    swift_beginAccess();
    unint64_t v202 = (char *)MEMORY[0x210550400](v201);

    if (v202)
    {
      uint64_t v203 = *(void *)&v202[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics];
      swift_retain();

      char v204 = 41;
      goto LABEL_227;
    }
    goto LABEL_93;
  }
  if (v246 >> 62) {
    goto LABEL_244;
  }
  uint64_t v205 = *(void *)((v246 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_230:
  swift_bridgeObjectRelease();
  if (!v205) {
    goto LABEL_238;
  }
  uint64_t v206 = v230;
  swift_beginAccess();
  uint64_t v207 = MEMORY[0x210550400](v206);
  if (!v207) {
    goto LABEL_238;
  }
  uint64_t v208 = (void *)v207;
  uint64_t v209 = *(void *)(v207 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics);
  swift_retain();

  LOBYTE(v208) = *(unsigned char *)(v209 + 17);
  swift_release();
  if (FormAnalyticsKeys.rawValue.getter((char)v208) == 0x657079546D726F66 && v210 == 0xEC000000656E6F4ELL)
  {
    swift_bridgeObjectRelease();
    goto LABEL_236;
  }
  char v211 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v211 & 1) == 0)
  {
LABEL_238:

    goto LABEL_93;
  }
LABEL_236:
  uint64_t v212 = v230;
  swift_beginAccess();
  double v213 = (char *)MEMORY[0x210550400](v212);

  if (v213)
  {
    uint64_t v203 = *(void *)&v213[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics];
    swift_retain();

    char v204 = 40;
LABEL_227:
    *(unsigned char *)(v203 + 17) = v204;
    swift_release();
  }
LABEL_93:
  swift_bridgeObjectRelease();
}

uint64_t PaperDocumentView.handlePageOrderedCollectionDifference(_:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v42 = (char *)&v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v2 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v40 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v39 = (uint64_t)&v36 - v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<PDFPage>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PDFPage>>);
  uint64_t v11 = v10 - 8;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  id v16 = (char *)&v36 - v15;
  lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type PDFPage and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for PDFPage);
  CollectionDifference<A>.inferringMoves()();
  double v52 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v53 = v7 + 16;
  v52(v13, v9, v6);
  uint64_t v17 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CollectionDifference<PDFPage> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<PDFPage>);
  dispatch thunk of Collection.startIndex.getter();
  id v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  double v50 = v9;
  CGFloat v51 = v18;
  uint64_t v54 = v7 + 8;
  v18(v9, v6);
  *(void *)&v13[*(int *)(v11 + 44)] = v55[0];
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v13, (uint64_t)v16, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PDFPage>>);
  char v19 = &v16[*(int *)(v11 + 44)];
  uint64_t v20 = *(void *)v19;
  dispatch thunk of Collection.endIndex.getter();
  if (v20 != v55[0])
  {
    unsigned __int8 v38 = (void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    id v37 = (void (**)(uint64_t, uint64_t))(v2 + 8);
    uint64_t v48 = v17;
    CGFloat v49 = v16;
    double v46 = v19;
    uint64_t v47 = v6;
    do
    {
      unint64_t v23 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v25 = *v24;
      uint64_t v26 = (void *)v24[2];
      uint64_t v27 = *((unsigned __int8 *)v24 + 24);
      uint64_t v28 = *((unsigned __int8 *)v24 + 25);
      outlined copy of CollectionDifference<PDFPage>.Change(*v24, v24[1], v26, v27, v28);
      v23(v55, 0);
      BOOL v29 = v50;
      v52(v50, v16, v6);
      dispatch thunk of Collection.formIndex(after:)();
      v51(v29, v6);
      if (v28 & 1) == 0 || (v27)
      {
        outlined consume of CollectionDifference<PDFPage>.Change();
      }
      else
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        uint64_t v31 = *(void *)(v30 - 8);
        uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
        uint64_t v45 = v31 + 56;
        uint64_t v32 = (uint64_t)v42;
        v44(v42, 1, 1, v30);
        uint64_t v33 = (char *)v43;
        uint64_t v34 = v39;
        specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, v32, v33, v33, v25, v26, v39);
        outlined destroy of StocksKitCurrencyCache.Provider?(v32, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        uint64_t v35 = v41;
        (*v38)(v40, v34, v41);
        lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
        WeakTagged_3.init(_:)();
        v44((char *)v32, 0, 1, v30);
        PaperDocumentView.goToPage(_:hint:)(v32, v26, 0);
        outlined consume of CollectionDifference<PDFPage>.Change();
        outlined destroy of StocksKitCurrencyCache.Provider?(v32, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        (*v37)(v34, v35);
      }
      id v16 = v49;
      uint64_t v6 = v47;
      uint64_t v22 = *(void *)v46;
      dispatch thunk of Collection.endIndex.getter();
    }
    while (v22 != v55[0]);
  }
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PDFPage>>);
}

uint64_t closure #1 in closure #1 in PaperDocumentView.handlePageOrderedCollectionDifference(_:)@<X0>(Swift::Int a1@<X1>, Swift::Int a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_getKeyPath();
  Swift::Int v11 = a2;
  if (a1 < a2 && (Swift::Int v11 = a2 + 1, __OFADD__(a2, 1)))
  {
    __break(1u);
  }
  else
  {
    Swift::Int v15 = v11;
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    uint64_t v17 = a3;
    uint64_t v12 = Capsule.Ref<>.subscript.modify();
    Swift::Int v16 = a2;
    uint64_t v13 = (void (*)(char *, void))v12;
    CROrderedSet.move(from:to:)(a1, v15);
    v13(v18, 0);
    swift_release();
    swift_getKeyPath();
    Capsule.Ref<>.subscript.getter();
    swift_release();
    CROrderedSet.subscript.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return result;
}

uint64_t PaperDocumentView.insertFile(at:at:)(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t v4 = type metadata accessor for URL();
  v3[11] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[12] = v5;
  v3[13] = *(void *)(v5 + 64);
  v3[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URLResourceValues();
  v3[16] = v6;
  v3[17] = *(void *)(v6 - 8);
  v3[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  v3[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UTType();
  v3[20] = v7;
  v3[21] = *(void *)(v7 - 8);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[24] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[25] = v9;
  v3[26] = v8;
  return MEMORY[0x270FA2498](PaperDocumentView.insertFile(at:at:), v9, v8);
}

uint64_t PaperDocumentView.insertFile(at:at:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  uint64_t v2 = (void *)*MEMORY[0x263EFF608];
  *(void *)(inited + 32) = *MEMORY[0x263EFF608];
  id v3 = v2;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[21];
  uint64_t v6 = v0[19];
  uint64_t v8 = v0[17];
  uint64_t v7 = v0[18];
  uint64_t v9 = v0[16];
  swift_bridgeObjectRelease();
  URLResourceValues.contentType.getter();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
  {
    uint64_t v10 = v0[19];
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?(v10, &demangling cache variable for type metadata for UTType?);
    goto LABEL_3;
  }
  uint64_t v14 = v0[22];
  uint64_t v15 = v0[20];
  uint64_t v16 = v0[21];
  (*(void (**)(void, void, uint64_t))(v16 + 32))(v0[23], v0[19], v15);
  static UTType.pdf.getter();
  char v17 = UTType.conforms(to:)();
  id v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v0[27] = v18;
  v0[28] = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v18(v14, v15);
  if ((v17 & 1) == 0)
  {
    uint64_t v34 = v0[22];
    uint64_t v35 = v0[20];
    swift_release();
    static UTType.image.getter();
    char v36 = UTType.conforms(to:)();
    v18(v34, v35);
    uint64_t v37 = v0[23];
    uint64_t v38 = v0[20];
    if (v36)
    {
      uint64_t v11 = PaperDocumentView.loadAndInsertImage(url:at:)(v0[8], v0[9]);
      v18(v37, v38);
      goto LABEL_4;
    }
    v18(v0[23], v0[20]);
LABEL_3:
    uint64_t v11 = 0;
LABEL_4:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(uint64_t))v0[1];
    return v12(v11);
  }
  uint64_t v20 = v0[14];
  uint64_t v19 = v0[15];
  uint64_t v21 = v0[12];
  uint64_t v22 = v0[13];
  uint64_t v24 = (void *)v0[10];
  uint64_t v23 = v0[11];
  uint64_t v25 = v0[8];
  uint64_t v26 = v0[9];
  static TaskPriority.userInitiated.getter();
  uint64_t v27 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v19, 0, 1, v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v25, v23);
  unint64_t v28 = (*(unsigned __int8 *)(v21 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  BOOL v29 = (char *)swift_allocObject();
  *((void *)v29 + 2) = 0;
  *((void *)v29 + 3) = 0;
  *((void *)v29 + 4) = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(&v29[v28], v20, v23);
  *(void *)&v29[(v22 + v28 + 7) & 0xFFFFFFFFFFFFFFF8] = v26;
  id v30 = v24;
  uint64_t v31 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZSi_Tgm5(v19, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentView.insertFile(at:at:), (uint64_t)v29);
  v0[29] = v31;
  outlined destroy of StocksKitCurrencyCache.Provider?(v19, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v32 = (void *)swift_task_alloc();
  v0[30] = v32;
  *uint64_t v32 = v0;
  v32[1] = PaperDocumentView.insertFile(at:at:);
  uint64_t v33 = MEMORY[0x263F8D6C8];
  return MEMORY[0x270FA1FD0](v0 + 7, v31, v33);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 208);
  id v3 = *(void *)(v1 + 200);
  return MEMORY[0x270FA2498](PaperDocumentView.insertFile(at:at:), v3, v2);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[27];
  uint64_t v2 = v0[23];
  id v3 = v0[20];
  swift_release();
  v1(v2, v3);
  uint64_t v4 = v0[7];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

uint64_t closure #1 in PaperDocumentView.insertFile(at:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a1;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v9;
  *uint64_t v9 = v6;
  v9[1] = closure #1 in PaperDocumentView.insertFile(at:at:);
  return PaperDocumentView.loadAndInsertPDF(url:at:)(a5, a6);
}

uint64_t closure #1 in PaperDocumentView.insertFile(at:at:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in PaperDocumentView.insertFile(at:at:), 0, 0);
}

uint64_t closure #1 in PaperDocumentView.insertFile(at:at:)()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall PaperDocumentView.insertBlankPage(at:)(Swift::Int at)
{
  uint64_t v2 = v1;
  Swift::Int v40 = at;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v39 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v38 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = type metadata accessor for PaperDocument(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  char v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v33 - v20;
  if (v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] == 1)
  {
    if (objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly, v19))
    {
      id v36 = v2;
      uint64_t v22 = &v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
      swift_beginAccess();
      uint64_t v37 = v6;
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
      v23(v21, v22, v14);
      lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      Capsule<>.root.getter();
      uint64_t v35 = v10;
      uint64_t v24 = *(void (**)(char *, uint64_t))(v15 + 8);
      v24(v21, v14);
      v23(v17, v22, v14);
      uint64_t v25 = (void *)v40;
      specialized PaperDocument.pageGeometryForInserting<A>(at:in:)(v40, (double *)v43);
      long long v34 = v43[0];
      long long v33 = v43[1];
      uint64_t v26 = v44;
      v24(v17, v14);
      _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v13, type metadata accessor for PaperDocument);
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      unint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
      v28(v5, 1, 1, v27);
      v41[0] = v34;
      v41[1] = v33;
      uint64_t v42 = v26;
      BOOL v29 = (char *)v36;
      uint64_t v30 = (uint64_t)v35;
      specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v5, v29, v29, v41, v25, (uint64_t)v35);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      uint64_t v31 = v39;
      uint64_t v32 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v38, v30, v37);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      WeakTagged_3.init(_:)();
      v28(v5, 0, 1, v27);
      PaperDocumentView.goToPage(_:hint:)((uint64_t)v5, v25, 0);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }
  }
}

uint64_t closure #1 in closure #1 in PaperDocumentView.insertBlankPage(at:)@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v43 = a3;
  uint64_t v41 = a1;
  uint64_t v42 = a4;
  double v4 = *a2;
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v7 = *((void *)a2 + 3);
  double v8 = a2[4];
  uint64_t v9 = type metadata accessor for CRKeyPath();
  uint64_t v35 = *(void *)(v9 - 8);
  uint64_t v36 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v37 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Paper>);
  uint64_t v39 = *(void *)(v14 - 8);
  uint64_t v40 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v38 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v33 - v20;
  uint64_t v22 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v22);
  uint64_t v34 = (uint64_t)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v33 - v25;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v44 = 0u;
  long long v45 = 0u;
  CRRegister.init(wrappedValue:)();
  long long v44 = 0u;
  long long v45 = 0u;
  CRRegister.init(wrappedValue:)();
  uint64_t v27 = &v26[*(int *)(v22 + 24)];
  *(void *)&long long v44 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  long long v33 = v27;
  CRRegister.init(wrappedValue:)();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v21, 1, 1, v28);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v21, (uint64_t)v18, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(void *)&long long v44 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v44 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  CROrderedSet.init()();
  *(void *)&v26[*(int *)(v22 + 48)] = MEMORY[0x263F8EE80];
  *(double *)&long long v44 = v4;
  *((void *)&v44 + 1) = v5;
  *(void *)&long long v45 = v6;
  *((void *)&v45 + 1) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  long long v44 = 0uLL;
  *(void *)&long long v45 = v6;
  *((void *)&v45 + 1) = v7;
  CRRegister.wrappedValue.setter();
  if (v8 != 0.0)
  {
    *(double *)&long long v44 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.setter();
  }
  _s8PaperKit13CRAssetOrDataOWOcTm_0((uint64_t)v26, v34, (uint64_t (*)(void))type metadata accessor for Paper);
  swift_retain();
  static CRKeyPath.unique.getter();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v13, 0, 1, v36);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  BOOL v29 = v38;
  Ref.init<A>(_:_:identity:)();
  LOBYTE(v44) = 0;
  uint64_t v30 = v40;
  Ref.id.getter();
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  SharedTagged_3.init(_:id:)();
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  uint64_t v31 = (void (*)(long long *, void))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  CROrderedSet.insert(_:at:)();
  v31(&v44, 0);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v30);
  return _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for Paper);
}

uint64_t closure #1 in closure #1 in PaperDocumentView.deletePage(at:)(uint64_t a1, Swift::Int a2)
{
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  uint64_t v3 = (uint64_t (*)(uint64_t *, void))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  CROrderedSet.remove(at:)(a2);
  return v3(&v5, 0);
}

uint64_t PaperDocumentView.export()()
{
  v1[15] = v0;
  type metadata accessor for PaperDocument(0);
  v1[16] = swift_task_alloc();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v1[17] = v2;
  v1[18] = *(void *)(v2 - 8);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[21] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[22] = v4;
  v1[23] = v3;
  return MEMORY[0x270FA2498](PaperDocumentView.export(), v4, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v2, v6, v3);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.root.getter();
  double v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(void *)(v0 + 192) = v8;
  *(void *)(v0 + 200) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v2, v3);
  *(void *)(v0 + 208) = *(void *)(v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_context);
  v7(v1, v6, v3);
  *(_OWORD *)(v0 + 16) = xmmword_20C834980;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  return MEMORY[0x270FA2498](PaperDocumentView.export(), 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  char *v6;
  uint64_t v7;

  uint64_t v1 = (void *)v0[26];
  uint64_t v6 = (char *)&async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:)
     + async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:);
  uint64_t v2 = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[27] = v3;
  *uint64_t v3 = v0;
  v3[1] = PaperDocumentView.export();
  uint64_t v4 = v0[19];
  return ((uint64_t (*)(void *, uint64_t, void *))v6)(v1, v4, v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 224);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t PaperDocumentView.export()(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 208);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*v1 + 192);
  uint64_t v5 = *(void *)(*v1 + 152);
  uint64_t v6 = *(void *)(*v1 + 136);
  uint64_t v7 = *(void *)(*v1 + 128);
  *(void *)(*v1 + 224) = a1;
  swift_task_dealloc();

  v4(v5, v6);
  _s8PaperKit0A8DocumentVWOhTm_0(v7, type metadata accessor for PaperDocument);
  uint64_t v8 = *(void *)(v2 + 184);
  uint64_t v9 = *(void *)(v2 + 176);
  return MEMORY[0x270FA2498](PaperDocumentView.export(), v9, v8);
}

Swift::Void __swiftcall PaperDocumentView.registerFileRepresentations(forPage:to:)(Swift::Int forPage, NSItemProvider to)
{
  isCGFloat a = to.super.isa;
  uint64_t v76 = (void (*)(char *, uint64_t, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v75 = *((void *)v76 - 1);
  MEMORY[0x270FA5388](v76);
  id v74 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v5 - 8);
  id v73 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>?);
  MEMORY[0x270FA5388](v7 - 8);
  id v78 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  uint64_t v87 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  id v67 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v68 = (char *)&v61 - v11;
  uint64_t v86 = type metadata accessor for UTType();
  uint64_t v88 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  id v85 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(char **)(v15 + 64);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v61 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v61 - v19;
  static CRKeyPath.unique.getter();
  uint64_t v89 = v2;
  Swift::Int v90 = forPage;
  type metadata accessor for PaperDocument(0);
  uint64_t v72 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  id v69 = v20;
  Capsule<>.init(id:initClosure:)();
  uint64_t v21 = (void *)MEMORY[0x21054D080](0xD000000000000018, 0x800000020C85CDD0);
  uint64_t v22 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_context);
  uint64_t v23 = v15 + 16;
  id v81 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v80 = v14;
  v81(v17, v20, v14);
  uint64_t v24 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v82 = v24 | 7;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v22;
  uint64_t v77 = v15;
  uint64_t v26 = v15 + 32;
  uint64_t v84 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v84(v25 + ((v24 + 24) & ~v24), v17, v14);
  id v95 = partial apply for closure #2 in PaperDocumentView.registerFileRepresentations(forPage:to:);
  uint64_t v96 = v25;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v92 = 1107296256;
  id v70 = &v93;
  uint64_t v93 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @unowned Bool, @guaranteed Error?) -> ()) -> (@owned NSProgress?);
  uint64_t v94 = &block_descriptor_369;
  uint64_t v27 = _Block_copy(&aBlock);
  id v28 = v22;
  swift_release();
  Class v29 = isa;
  [(objc_class *)isa registerFileRepresentationForTypeIdentifier:v21 fileOptions:0 visibility:0 loadHandler:v27];

  _Block_release(v27);
  uint64_t v30 = v85;
  static UTType.pdf.getter();
  uint64_t v31 = UTType.identifier.getter();
  uint64_t v33 = v32;
  uint64_t v34 = *(void (**)(char *, uint64_t))(v88 + 8);
  uint64_t v35 = v30;
  uint64_t v36 = v69;
  v88 += 8;
  BOOL v63 = v34;
  v34(v35, v86);
  uint64_t v37 = (void *)MEMORY[0x21054D080](v31, v33);
  swift_bridgeObjectRelease();
  uint64_t v38 = v80;
  uint64_t v64 = v23;
  v81((char *)&v61 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v80);
  uint64_t v39 = (v24 + 16) & ~v24;
  uint64_t v62 = &v71[v39];
  unint64_t v40 = (unint64_t)&v71[v39 + 7] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = swift_allocObject();
  uint64_t v61 = v39;
  uint64_t v71 = (char *)&v61 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v26;
  v84(v41 + v39, v71, v38);
  *(void *)(v41 + v40) = v28;
  id v95 = partial apply for closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:);
  uint64_t v96 = v41;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v92 = 1107296256;
  uint64_t v93 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @unowned Bool, @guaranteed Error?) -> ()) -> (@owned NSProgress?);
  uint64_t v94 = &block_descriptor_375;
  uint64_t v42 = _Block_copy(&aBlock);
  id v43 = v28;
  uint64_t v44 = (uint64_t)v73;
  swift_release();
  [(objc_class *)v29 registerFileRepresentationForTypeIdentifier:v37 fileOptions:0 visibility:0 loadHandler:v42];

  _Block_release(v42);
  swift_getKeyPath();
  long long v45 = v74;
  double v46 = v36;
  Capsule<>.subscript.getter();
  swift_release();
  specialized Collection.first.getter(v44);
  (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v75 + 8))(v45, v76);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v44, 1, v47) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v44, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
    uint64_t v49 = (uint64_t)v78;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v87 + 56))(v78, 1, 1, v79);
LABEL_4:
    (*(void (**)(char *, uint64_t))(v77 + 8))(v36, v38);
    outlined destroy of StocksKitCurrencyCache.Provider?(v49, &demangling cache variable for type metadata for Ref<Image>?);
    return;
  }
  uint64_t v49 = (uint64_t)v78;
  SharedTagged_3.tagged2.getter();
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v44, v47);
  uint64_t v50 = v79;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v49, 1, v79) == 1) {
    goto LABEL_4;
  }
  uint64_t v51 = v87;
  uint64_t v76 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 32);
  double v52 = v68;
  v76(v68, v49, v50);
  uint64_t v53 = v85;
  static UTType.jpeg.getter();
  uint64_t v54 = v38;
  uint64_t v55 = v71;
  v81(v71, v36, v54);
  uint64_t v56 = v67;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v67, v52, v50);
  unint64_t v57 = (unint64_t)&v62[*(unsigned __int8 *)(v51 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
  uint64_t v58 = swift_allocObject();
  uint64_t v59 = v55;
  uint64_t v60 = v80;
  v84(v58 + v61, v59, v80);
  v76((char *)(v58 + v57), (uint64_t)v56, v50);
  NSItemProvider.registerDataRepresentation(for:visibility:loadHandler:)();
  swift_release();
  v63(v53, v86);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v50);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v46, v60);
}

uint64_t closure #1 in PaperDocumentView.registerFileRepresentations(forPage:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v32 = a2;
  uint64_t v33 = a1;
  uint64_t v30 = a4;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v38 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v36 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  uint64_t v35 = v6;
  MEMORY[0x270FA5388](v5);
  Class v29 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v28 - v16;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v18 = v30;
  CROrderedSet.init()();
  uint64_t v19 = type metadata accessor for PaperDocument(0);
  uint64_t v20 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v17, 1, 1, v20);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v17, (uint64_t)v14, &demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, &demangling cache variable for type metadata for CRAsset?);
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for CRAsset?);
  *(void *)(v18 + *(int *)(v19 + 24)) = MEMORY[0x263F8EE80];
  uint64_t v21 = v32 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v22(v11, v21, v8);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule.Ref.import<A>(_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v11, v8);
  v22(v11, v21, v8);
  swift_getKeyPath();
  uint64_t v24 = v29;
  Capsule<>.subscript.getter();
  swift_release();
  v23(v11, v8);
  uint64_t v25 = v36;
  uint64_t v26 = v34;
  CROrderedSet.subscript.getter();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v26);
  CROrderedSet.append(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v25, v31);
}

uint64_t closure #2 in PaperDocumentView.registerFileRepresentations(forPage:to:)(void (*a1)(uint64_t, void, void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  v26[1] = a3;
  v26[2] = a4;
  uint64_t v28 = a2;
  Class v29 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v27 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v26 - v15;
  uint64_t v17 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v26[0] = *(void *)(v11 + 8);
  ((void (*)(char *, uint64_t))v26[0])(v13, v10);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<PaperDocument>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v18 = type metadata accessor for CRCodableVersion();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 72);
  unint64_t v21 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_20C835740;
  uint64_t v23 = *(void (**)(unint64_t, void, uint64_t))(v19 + 104);
  v23(v22 + v21, *MEMORY[0x263F32EB0], v18);
  v23(v22 + v21 + v20, *MEMORY[0x263F32EB8], v18);
  if (one-time initialization token for allFileFormatVersions != -1) {
    swift_once();
  }
  static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)();
  swift_bridgeObjectRelease();
  uint64_t v24 = (uint64_t)v27;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v27, v16, v10);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
  v29(v24, 0, 0);
  outlined destroy of StocksKitCurrencyCache.Provider?(v24, &demangling cache variable for type metadata for URL?);
  ((void (*)(char *, uint64_t))v26[0])(v16, v10);
  return 0;
}

id thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @unowned Bool, @guaranteed Error?) -> ()) -> (@owned NSProgress?)(uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(uint64_t (**)(void (*)(uint64_t, char, uint64_t), uint64_t))(a1 + 32);
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  uint64_t v5 = (void *)v2(partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSURL?, @unowned Bool, @unowned NSError?) -> (), v4);
  swift_release();
  swift_release();
  return v5;
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSURL?, @unowned Bool, @unowned NSError?) -> ()(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v10, &demangling cache variable for type metadata for URL?);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
  {
    URL._bridgeToObjectiveC()(v13);
    uint64_t v14 = v15;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  if (a3) {
    uint64_t v16 = (void *)_convertErrorToNSError(_:)();
  }
  else {
    uint64_t v16 = 0;
  }
  (*(void (**)(uint64_t, void *, void, void *))(a4 + 16))(a4, v14, a2 & 1, v16);
}

uint64_t closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v22 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
  unint64_t v15 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v16 = (v9 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v17 + v15, v10, v7);
  *(void *)(v17 + v16) = a4;
  uint64_t v18 = (void *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8));
  void *v18 = v22;
  v18[1] = a2;
  id v19 = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:), v17);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for TaskPriority?);
  return 0;
}

uint64_t closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[14] = a6;
  v7[15] = a7;
  v7[12] = a4;
  v7[13] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v7[16] = swift_task_alloc();
  type metadata accessor for PaperDocument(0);
  v7[17] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v7[18] = v8;
  v7[19] = *(void *)(v8 - 8);
  v7[20] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  v7[21] = v9;
  v7[22] = *(void *)(v9 - 8);
  v7[23] = swift_task_alloc();
  v7[24] = swift_task_alloc();
  v7[25] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:), 0, 0);
}

uint64_t closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v13 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 152);
  unint64_t v15 = *(void **)(v0 + 104);
  uint64_t v7 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 208) = v8;
  *(void *)(v0 + 216) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v3, v13);
  URL.appendingPathExtension(_:)();
  v8(v1, v13);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.root.getter();
  *(_OWORD *)(v0 + 16) = xmmword_20C834980;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:)
                                                          + async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:));
  id v9 = v15;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v10;
  *uint64_t v10 = v0;
  v10[1] = closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:);
  uint64_t v11 = *(void *)(v0 + 96);
  return v14((uint64_t)v15, v11, v0 + 16);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Class isa;
  uint64_t (*v9)(void);
  NSURL *v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v1 = (void *)v0[29];
  uint64_t v2 = v0[25];
  uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[26];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[21];
  uint64_t v5 = v0[16];
  uint64_t v11 = (NSURL *)v0[14];
  URL._bridgeToObjectiveC()(v11);
  uint64_t v7 = v6;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for PDFDocumentWriteOption(0);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, type metadata accessor for PDFDocumentWriteOption);
  isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_writeToURL_withOptions_, v7, isa);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v2, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v5, 0, 1, v4);
  ((void (*)(uint64_t, void, void))v11)(v5, 0, 0);
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for URL?);
  v12(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  uint64_t v3 = *(void **)(*(void *)v1 + 104);
  *(void *)(*(void *)v1 + 232) = a1;
  swift_task_dealloc();

  _s8PaperKit0A8DocumentVWOhTm_0(v2, type metadata accessor for PaperDocument);
  return MEMORY[0x270FA2498](closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:), 0, 0);
}

uint64_t closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a4;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  uint64_t v23 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  uint64_t v16 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v24, v5);
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v18 = (v10 + *(unsigned __int8 *)(v6 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  *(void *)(v19 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v19 + v17, v11, v8);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v19 + v18, v23, v16);
  uint64_t v20 = (void *)(v19 + ((v7 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v21 = v26;
  *uint64_t v20 = v25;
  v20[1] = v21;
  swift_retain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:), v19);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for TaskPriority?);
  return 0;
}

uint64_t closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v7[6] = type metadata accessor for Image();
  v7[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:), 0, 0);
}

uint64_t closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  Capsule.subscript.getter();
  uint64_t v4 = (uint64_t (*)(uint64_t, double))((char *)&async function pointer to specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:)
                                               + async function pointer to specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:);
  uint64_t v2 = *(void *)(v0 + 16);
  return v4(v2, 0.9);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  (*(void (**)(uint64_t, unint64_t, void))(v0 + 32))(v2, v1, 0);
  outlined consume of Data?(v2, v1);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 56);
  *(void *)(v3 + 72) = a1;
  *(void *)(v3 + 80) = a2;
  swift_task_dealloc();
  _s8PaperKit0A8DocumentVWOhTm_0(v4, (uint64_t (*)(void))type metadata accessor for Image);
  return MEMORY[0x270FA2498](closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:), 0, 0);
}

void PaperDocumentView.paste(document:at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v25 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1
    && objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly, v14))
  {
    uint64_t v24 = a2;
    uint64_t v17 = v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v17, v12);
    swift_getKeyPath();
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    Capsule<>.subscript.getter();
    swift_release();
    unint64_t v18 = *(void (**)(char *, uint64_t))(v13 + 8);
    v18(v16, v12);
    uint64_t v19 = CROrderedSet.count.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (v19 >= v24)
    {
      uint64_t v20 = v24;
      Capsule.copy()();
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v7, 1, 1, v21);
      MEMORY[0x270FA5388](v22);
      *(&v23 - 4) = v3;
      *(&v23 - 3) = (uint64_t)v16;
      *(&v23 - 2) = v20;
      specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v7, (void (*)(uint64_t))partial apply for closure #1 in PaperDocumentView.paste(document:at:));
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v18(v16, v12);
    }
  }
}

uint64_t closure #1 in PaperDocumentView.paste(document:at:)()
{
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.paste(document:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v35 = *(void (***)(char *, uint64_t))(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReversedCollection<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator)
      - 8;
  MEMORY[0x270FA5388](v43);
  uint64_t v38 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v34 = (uint64_t)&v33 - v15;
  type metadata accessor for PaperDocument(0);
  uint64_t v16 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule.Ref.import<A>(_:)();
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v40 = v16;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = v38;
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v38, v12, v17);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  dispatch thunk of Collection.endIndex.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v12, v17);
  uint64_t v20 = v43;
  *(void *)&v19[*(int *)(v43 + 44)] = v42[0];
  uint64_t v21 = (uint64_t)v19;
  uint64_t v22 = v34;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v21, v34, (uint64_t *)&demangling cache variable for type metadata for ReversedCollection<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  uint64_t v43 = v22 + *(int *)(v20 + 44);
  uint64_t v23 = *(void *)v43;
  dispatch thunk of Collection.startIndex.getter();
  BOOL v24 = v23 == v42[0];
  uint64_t v25 = v22;
  if (!v24)
  {
    uint64_t v26 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
    uint64_t v37 = (void (**)(char *))(v35 + 2);
    uint64_t v38 = (char *)v26;
    uint64_t v27 = (void (**)(char *, char *, uint64_t))(v35 + 4);
    ++v35;
    uint64_t v36 = v27;
    uint64_t v39 = v4;
    do
    {
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      uint64_t v28 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      (*v37)(v9);
      v28(v42, 0);
      (*v36)(v6, v9, v4);
      swift_getKeyPath();
      uint64_t v29 = a1;
      uint64_t v30 = (void (*)(void *, void))Capsule.Ref<>.subscript.modify();
      CROrderedSet.insert(_:at:)();
      v30(v42, 0);
      a1 = v29;
      uint64_t v4 = v39;
      swift_release();
      (*v35)(v6, v4);
      uint64_t v31 = *(void *)v43;
      dispatch thunk of Collection.startIndex.getter();
    }
    while (v31 != v42[0]);
  }
  return outlined destroy of StocksKitCurrencyCache.Provider?(v25, (uint64_t *)&demangling cache variable for type metadata for ReversedCollection<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
}

void PaperDocumentView.insert(newDocument:at:)(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t), void *a2)
{
  uint64_t v3 = v2;
  double v46 = a2;
  uint64_t v43 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v45 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v41 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v42 = (char *)&v38 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v40 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v44 = (char *)&v38 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v23 = *(void *)(v22 - 8);
  double v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] == 1)
  {
    if (objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly, v24))
    {
      uint64_t v39 = v4;
      uint64_t v27 = &v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v27, v22);
      swift_getKeyPath();
      lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      Capsule<>.subscript.getter();
      uint64_t v28 = v39;
      swift_release();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
      uint64_t v29 = CROrderedSet.count.getter();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      if (v29 >= (uint64_t)v46)
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56);
        uint64_t v31 = v38(v12, 1, 1, v30);
        MEMORY[0x270FA5388](v31);
        uint64_t v32 = v43;
        uint64_t v33 = (uint64_t)v44;
        *(&v38 - 4) = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v3;
        *(&v38 - 3) = v32;
        uint64_t v34 = v46;
        *(&v38 - 2) = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v46;
        specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v12, (void (*)(uint64_t))partial apply for closure #1 in PaperDocumentView.insert(newDocument:at:), (uint64_t)(&v38 - 6), (uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)&unk_26C15E530, (uint64_t)partial apply for closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:));
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v33, (uint64_t)v15, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
        uint64_t v35 = v45;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v15, 1, v28) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v33, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
        }
        else
        {
          uint64_t v36 = v42;
          (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v42, v15, v28);
          (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v41, v36, v28);
          lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
          uint64_t v37 = (uint64_t)v40;
          WeakTagged_3.init(_:)();
          v38((char *)v37, 0, 1, v30);
          PaperDocumentView.goToPage(_:hint:)(v37, v34, 0);
          outlined destroy of StocksKitCurrencyCache.Provider?(v37, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
          (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v28);
          uint64_t v15 = (char *)v33;
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      }
    }
  }
}

uint64_t closure #1 in closure #1 in PaperDocumentView.insert(newDocument:at:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v11 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperDocument(0);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  uint64_t v10 = a1;
  Capsule.Ref.import<A>(_:)();
  swift_getKeyPath();
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v7 = (void (*)(unsigned char *, void))Capsule.Ref<>.subscript.modify();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  CROrderedSet.insert<A>(contentsOf:at:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v11 + 8);
  v8(v6, v4);
  v7(v14, 0);
  swift_release();
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  specialized Collection.first.getter(v13);
  return ((uint64_t (*)(char *, uint64_t))v8)(v6, v4);
}

uint64_t PaperDocumentView.loadAndInsertPDF(url:at:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  type metadata accessor for CRKeyPath();
  v3[8] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](PaperDocumentView.loadAndInsertPDF(url:at:), 0, 0);
}

uint64_t PaperDocumentView.loadAndInsertPDF(url:at:)()
{
  *(unsigned char *)(v0 + 136) = 0;
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  static CRKeyPath.unique.getter();
  uint64_t v3 = (void *)swift_task_alloc();
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0 + 136;
  type metadata accessor for PaperDocument(0);
  *(void *)(v0 + 104) = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.init(id:initClosure:)();
  swift_task_dealloc();
  if (*(unsigned char *)(v0 + 136) == 1)
  {
    Capsule.copy()();
    type metadata accessor for MainActor();
    *(void *)(v0 + 112) = static MainActor.shared.getter();
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    return MEMORY[0x270FA2498](PaperDocumentView.loadAndInsertPDF(url:at:), v5, v4);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 72));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6(0);
  }
}

{
  void *v0;
  uint64_t (*v1)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (*v5)(uint64_t (*)(char *, uint64_t, uint64_t, uint64_t), uint64_t);
  uint64_t v7;

  uint64_t v2 = v0[10];
  uint64_t v1 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = (void *)v0[3];
  swift_release();
  PaperDocumentView.insert(newDocument:at:)(v1, v4);
  uint64_t v5 = *(void (**)(uint64_t (*)(char *, uint64_t, uint64_t, uint64_t), uint64_t))(v2 + 8);
  v0[15] = v5;
  v0[16] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v3);
  return MEMORY[0x270FA2498](PaperDocumentView.loadAndInsertPDF(url:at:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v4 = CROrderedSet.count.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(void, void))(v0 + 120))(*(void *)(v0 + 96), *(void *)(v0 + 72));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

uint64_t closure #1 in PaperDocumentView.loadAndInsertPDF(url:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X3>, uint64_t a4@<X8>)
{
  double v24 = a3;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v25);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocument?);
  double v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a2, v12, v17);
  swift_retain();
  uint64_t v20 = CRContext.assetManager.getter();
  specialized PaperDocument.init<A>(url:in:assetManager:)((uint64_t)v15, a1, v20, (uint64_t)v19);
  uint64_t v21 = type metadata accessor for PaperDocument(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v19, 1, v21) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PaperDocument?);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
    CROrderedSet.init()();
    uint64_t v22 = type metadata accessor for CRAsset();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v11, 1, 1, v22);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v11, (uint64_t)v8, &demangling cache variable for type metadata for CRAsset?);
    lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, &demangling cache variable for type metadata for CRAsset?);
    CRRegister.init(wrappedValue:)();
    uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for CRAsset?);
    *(void *)(a4 + *(int *)(v21 + 24)) = MEMORY[0x263F8EE80];
  }
  else
  {
    uint64_t result = outlined init with take of Image((uint64_t)v19, a4, type metadata accessor for PaperDocument);
    *double v24 = 1;
  }
  return result;
}

uint64_t PaperDocumentView.loadAndInsertImage(url:at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = (void *)a2;
  uint64_t v67 = a1;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v64 = *(void *)(v3 - 8);
  uint64_t v65 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v66 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v62 = (char *)&v56 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v63 = (uint64_t)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v68 = (uint64_t)&v56 - v10;
  uint64_t v61 = type metadata accessor for Image();
  uint64_t v59 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v57 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v58 = (uint64_t)&v56 - v13;
  uint64_t v14 = type metadata accessor for PaperDocument(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v56 - v22;
  uint64_t v24 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v25(v23, v24, v17);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.root.getter();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v18 + 8);
  v26(v23, v17);
  v25(v20, v24, v17);
  uint64_t v27 = v59;
  uint64_t v28 = v60;
  specialized PaperDocument.pageGeometryForInserting<A>(at:in:)((uint64_t)v60, &v69.a);
  CGFloat a = v69.a;
  CGFloat b = v69.b;
  CGFloat c = v69.c;
  CGFloat d = v69.d;
  CGAffineTransformMakeRotation(&v69, v69.tx);
  v70.origin.CGFloat x = a;
  v70.origin.CGFloat y = b;
  v70.size.CGFloat width = c;
  v70.size.CGFloat height = d;
  CGRect v71 = CGRectApplyAffineTransform(v70, &v69);
  CGFloat x = v71.origin.x;
  CGFloat y = v71.origin.y;
  CGFloat width = v71.size.width;
  CGFloat height = v71.size.height;
  v26(v20, v17);
  _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v16, type metadata accessor for PaperDocument);
  uint64_t v38 = v64;
  uint64_t v37 = v65;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
  uint64_t v40 = v62;
  v39(v62, v67, v65);
  v72.origin.CGFloat x = x;
  v72.origin.CGFloat y = y;
  v72.size.CGFloat width = width;
  v72.size.CGFloat height = height;
  double v41 = CGRectGetWidth(v72);
  uint64_t v42 = CRContext.assetManager.getter();
  uint64_t v43 = (uint64_t)v66;
  v39(v66, (uint64_t)v40, v37);
  uint64_t v44 = v61;
  uint64_t v45 = v63;
  Image.init(url:targetPageSize:assetManager:)(v43, v41, v41, 0, v42, v63);
  uint64_t v46 = v37;
  uint64_t v47 = v45;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v46);
  uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v48(v47, 1, v44))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for Image?);
    uint64_t v49 = 1;
    uint64_t v50 = v68;
  }
  else
  {
    uint64_t v51 = v47;
    uint64_t v52 = v57;
    outlined init with take of Image(v51, v57, (uint64_t (*)(void))type metadata accessor for Image);
    uint64_t v53 = v52;
    uint64_t v50 = v68;
    outlined init with take of Image(v53, v68, (uint64_t (*)(void))type metadata accessor for Image);
    uint64_t v49 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v50, v49, 1, v44);
  if (v48(v50, 1, v44) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for Image?);
    return 0;
  }
  else
  {
    uint64_t v55 = v58;
    outlined init with take of Image(v50, v58, (uint64_t (*)(void))type metadata accessor for Image);
    PaperDocumentView.insert(_:at:)(v55, v28);
    _s8PaperKit0A8DocumentVWOhTm_0(v55, (uint64_t (*)(void))type metadata accessor for Image);
    return 1;
  }
}

void PaperDocumentView.insert(_:at:)(uint64_t a1, void *a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v18 - v14;
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1)
  {
    if (objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly, v13))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      uint64_t v16 = *(void *)(v19 - 8);
      uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
      uint64_t v21 = v16 + 56;
      uint64_t v17 = v20(v7, 1, 1, v19);
      MEMORY[0x270FA5388](v17);
      *(&v18 - 4) = v2;
      *(&v18 - 3) = a1;
      *(&v18 - 2) = (uint64_t)a2;
      specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v7, (void (*)(uint64_t))partial apply for closure #1 in PaperDocumentView.insert(_:at:), (uint64_t)(&v18 - 6), (uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)&unk_26C15E490, (uint64_t)partial apply for closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:));
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v15, v8);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      WeakTagged_3.init(_:)();
      v20(v7, 0, 1, v19);
      PaperDocumentView.goToPage(_:hint:)((uint64_t)v7, a2, 0);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    }
  }
}

uint64_t closure #1 in PaperDocumentView.insert(newDocument:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.insert(_:at:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v19 = a3;
  uint64_t v20 = a2;
  uint64_t v18 = a1;
  uint64_t v3 = type metadata accessor for CRKeyPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  uint64_t v11 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  double v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s8PaperKit13CRAssetOrDataOWOcTm_0(v18, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Image);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v7, 1, 1, v3);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  v21[0] = 1;
  uint64_t v14 = v17;
  Ref.id.getter();
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  SharedTagged_3.init(_:id:)();
  swift_getKeyPath();
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  uint64_t v15 = (void (*)(char *, void))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  CROrderedSet.insert(_:at:)();
  v15(v21, 0);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v14);
}

Swift::Void __swiftcall PaperDocumentView.insert(_:at:)(VNDocumentCameraScan _, Swift::Int at)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v18 - v14;
  if (v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] == 1)
  {
    if (objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly, v13))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
      v19(v7, 1, 1, v16);
      uint64_t v17 = v2;
      specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v7, v17, v17, _.super.isa, (void *)at, (uint64_t)v15);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v15, v8);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      WeakTagged_3.init(_:)();
      v19(v7, 0, 1, v16);
      PaperDocumentView.goToPage(_:hint:)((uint64_t)v7, (void *)at, 0);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    }
  }
}

uint64_t closure #1 in closure #1 in PaperDocumentView.insert(_:at:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v13[1] = a4;
  uint64_t v7 = type metadata accessor for PaperDocument(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = CRContext.assetManager.getter();
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  uint64_t v11 = (void (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  specialized PaperDocument.insert<A>(scan:at:in:assetManager:)(a2, a3, a1, v10);
  swift_release();
  v11(v14, 0);
  Capsule.Ref<>.root.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  CROrderedSet.subscript.getter();
  return _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v9, type metadata accessor for PaperDocument);
}

Swift::Bool __swiftcall PaperDocumentView.insert(_:at:)(NSItemProvider _, Swift::Int at)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] != 1) {
    goto LABEL_10;
  }
  unsigned int v11 = objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly, v8);
  if (v11)
  {
    uint64_t v12 = (void *)MEMORY[0x21054D080](0xD000000000000018, 0x800000020C85CDD0);
    unsigned int v13 = [(objc_class *)_.super.isa hasItemConformingToTypeIdentifier:v12];

    if (v13)
    {
      uint64_t v14 = (void *)MEMORY[0x21054D080](0xD000000000000018, 0x800000020C85CDD0);
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v3;
      *(void *)(v15 + 24) = at;
      uint64_t v42 = partial apply for closure #1 in PaperDocumentView.insert(_:at:);
      uint64_t v43 = v15;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v39 = 1107296256;
      uint64_t v16 = &block_descriptor_324_0;
LABEL_9:
      uint64_t v40 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @guaranteed Error?) -> ();
      double v41 = v16;
      uint64_t v34 = _Block_copy(&aBlock);
      uint64_t v35 = v3;
      swift_release();
      id v36 = -[objc_class loadFileRepresentationForTypeIdentifier:completionHandler:](_.super.isa, sel_loadFileRepresentationForTypeIdentifier_completionHandler_, v14, v34, aBlock, v39);
      _Block_release(v34);

      LOBYTE(v11) = 1;
      return v11;
    }
    static UTType.pdf.getter();
    uint64_t v17 = UTType.identifier.getter();
    uint64_t v19 = v18;
    uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
    v20(v10, v6);
    uint64_t v21 = (void *)MEMORY[0x21054D080](v17, v19);
    swift_bridgeObjectRelease();
    LODWORD(v19) = [(objc_class *)_.super.isa hasItemConformingToTypeIdentifier:v21];

    if (v19)
    {
      static UTType.pdf.getter();
      uint64_t v22 = UTType.identifier.getter();
      uint64_t v24 = v23;
      v20(v10, v6);
      uint64_t v14 = (void *)MEMORY[0x21054D080](v22, v24);
      swift_bridgeObjectRelease();
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = v3;
      *(void *)(v25 + 24) = at;
      uint64_t v42 = partial apply for closure #2 in PaperDocumentView.insert(_:at:);
      uint64_t v43 = v25;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v39 = 1107296256;
      uint64_t v16 = &block_descriptor_318;
      goto LABEL_9;
    }
    static UTType.image.getter();
    uint64_t v26 = UTType.identifier.getter();
    uint64_t v28 = v27;
    v20(v10, v6);
    uint64_t v29 = (void *)MEMORY[0x21054D080](v26, v28);
    swift_bridgeObjectRelease();
    LODWORD(v28) = [(objc_class *)_.super.isa hasItemConformingToTypeIdentifier:v29];

    if (v28)
    {
      static UTType.image.getter();
      uint64_t v30 = UTType.identifier.getter();
      uint64_t v32 = v31;
      v20(v10, v6);
      uint64_t v14 = (void *)MEMORY[0x21054D080](v30, v32);
      swift_bridgeObjectRelease();
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = v3;
      *(void *)(v33 + 24) = at;
      uint64_t v42 = partial apply for closure #3 in PaperDocumentView.insert(_:at:);
      uint64_t v43 = v33;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v39 = 1107296256;
      uint64_t v16 = &block_descriptor_312;
      goto LABEL_9;
    }
LABEL_10:
    LOBYTE(v11) = 0;
  }
  return v11;
}

uint64_t closure #1 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v60 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  double v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  FileVersionPolicCGFloat y = (void *)type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  uint64_t v9 = *(FileVersionPolicy - 1);
  MEMORY[0x270FA5388](FileVersionPolicy);
  unsigned int v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v62 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v63 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v63 + 64);
  MEMORY[0x270FA5388](v14);
  uint64_t v58 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v59 = (char *)&v51 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for URL();
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = a1;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v24, (uint64_t)v20, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v20, 1, v26) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for URL?);
  }
  uint64_t v56 = v26;
  uint64_t v57 = v14;
  uint64_t v52 = v8;
  uint64_t v55 = v28;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v23, v20, v26);
  id v51 = a3;
  uint64_t v54 = *(void *)&a3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_context];
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<PaperDocument>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v30 = type metadata accessor for CRCodableVersion();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(void *)(v31 + 72);
  unint64_t v33 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_20C835740;
  unint64_t v35 = v34 + v33;
  id v36 = *(void (**)(unint64_t, void, uint64_t))(v31 + 104);
  v36(v35, *MEMORY[0x263F32EB0], v30);
  v36(v35 + v32, *MEMORY[0x263F32EB8], v30);
  if (one-time initialization token for allReadableFileFormatVersions != -1) {
    swift_once();
  }
  uint64_t v37 = FileVersionPolicy;
  (*(void (**)(char *, void, void *))(v9 + 104))(v11, *MEMORY[0x263F32FB0], FileVersionPolicy);
  uint64_t v38 = v62;
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
  uint64_t v39 = v57;
  (*(void (**)(char *, void *))(v9 + 8))(v11, v37);
  swift_bridgeObjectRelease();
  uint64_t v40 = v63;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v38, 0, 1, v39);
  FileVersionPolicCGFloat y = *(void **)(v40 + 32);
  double v41 = v59;
  ((void (*)(char *, char *, uint64_t))FileVersionPolicy)(v59, v38, v39);
  uint64_t v42 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v52, 1, 1, v42);
  uint64_t v43 = v58;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v58, v41, v39);
  type metadata accessor for MainActor();
  id v44 = v51;
  uint64_t v62 = v23;
  id v45 = v44;
  uint64_t v46 = static MainActor.shared.getter();
  uint64_t v47 = v39;
  unint64_t v48 = (*(unsigned __int8 *)(v40 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  uint64_t v49 = (void *)swift_allocObject();
  uint64_t v50 = MEMORY[0x263F8F500];
  v49[2] = v46;
  v49[3] = v50;
  v49[4] = v45;
  ((void (*)(char *, char *, uint64_t))FileVersionPolicy)((char *)v49 + v48, v43, v47);
  *(void *)((char *)v49 + ((v15 + v48 + 7) & 0xFFFFFFFFFFFFFFF8)) = v60;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v52, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PaperDocumentView.insert(_:at:), (uint64_t)v49);
  swift_release();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v62, v56);
}

uint64_t closure #1 in closure #1 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  type metadata accessor for MainActor();
  v6[5] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in PaperDocumentView.insert(_:at:), v8, v7);
}

uint64_t closure #1 in closure #1 in PaperDocumentView.insert(_:at:)()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[3];
  swift_release();
  PaperDocumentView.paste(document:at:)(v2, v1);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 0, 1, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
  }
  swift_retain();
  id v12 = a3;
  v9(v8, a3);
  swift_release();

  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
}

uint64_t closure #1 in closure #1 in closure #2 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  uint64_t v7 = type metadata accessor for URL();
  v6[5] = v7;
  v6[6] = *(void *)(v7 - 8);
  v6[7] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[8] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[9] = v9;
  v6[10] = v8;
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #2 in PaperDocumentView.insert(_:at:), v9, v8);
}

uint64_t closure #1 in closure #1 in closure #2 in PaperDocumentView.insert(_:at:)()
{
  CRStableAsset.url.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[11] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in closure #1 in closure #2 in PaperDocumentView.insert(_:at:);
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[4];
  return PaperDocumentView.loadAndInsertPDF(url:at:)(v2, v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 56);
  uint64_t v3 = *(void *)(*v0 + 48);
  uint64_t v4 = *(void *)(*v0 + 40);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v6 = *(void *)(v1 + 72);
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #2 in PaperDocumentView.insert(_:at:), v6, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #2 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = a4;
  uint64_t v40 = a6;
  id v36 = a3;
  uint64_t v37 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v41 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for CRStableAsset();
  uint64_t v9 = *(void *)(v38 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v38);
  unint64_t v35 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v34 - v22;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v16, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for URL?);
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, v23, v17);
  uint64_t v34 = v13;
  CRStableAsset.init(url:extension:)();
  uint64_t v25 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v41, 1, 1, v25);
  uint64_t v26 = v35;
  uint64_t v27 = v13;
  uint64_t v28 = v38;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v35, v27, v38);
  type metadata accessor for MainActor();
  id v36 = v36;
  uint64_t v29 = static MainActor.shared.getter();
  unint64_t v30 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v31 = (char *)swift_allocObject();
  uint64_t v32 = MEMORY[0x263F8F500];
  *((void *)v31 + 2) = v29;
  *((void *)v31 + 3) = v32;
  *((void *)v31 + 4) = v36;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v31[v30], v26, v28);
  uint64_t v33 = v40;
  *(void *)&v31[(v10 + v30 + 7) & 0xFFFFFFFFFFFFFFF8] = v39;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v41, v33, (uint64_t)v31);
  swift_release();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v34, v28);
}

uint64_t closure #1 in closure #1 in closure #3 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  uint64_t v7 = type metadata accessor for URL();
  v6[5] = v7;
  v6[6] = *(void *)(v7 - 8);
  v6[7] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[8] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #3 in PaperDocumentView.insert(_:at:), v9, v8);
}

uint64_t closure #1 in closure #1 in closure #3 in PaperDocumentView.insert(_:at:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[4];
  swift_release();
  CRStableAsset.url.getter();
  PaperDocumentView.loadAndInsertImage(url:at:)(v1, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

Swift::Void __swiftcall PaperDocumentView.paste(at:)(Swift::Int at)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) != 1
    || !objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly))
  {
    return;
  }
  id v3 = objc_msgSend(self, sel_generalPasteboard);
  id v4 = objc_msgSend(v3, sel_itemProviders);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6)
    {
LABEL_5:
      if ((v5 & 0xC000000000000001) != 0)
      {
        id v7 = (id)MEMORY[0x21054E050](0, v5);
      }
      else
      {
        if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v7 = *(id *)(v5 + 32);
      }
      uint64_t v8 = v7;
      Swift::Bool v9 = PaperDocumentView.insert(_:at:)((NSItemProvider)v7, at);

      if (!v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = v6 - 1;
        while (v11 != v10)
        {
          unint64_t v12 = v10 + 1;
          if ((v5 & 0xC000000000000001) != 0)
          {
            id v13 = (id)MEMORY[0x21054E050](v10 + 1, v5);
          }
          else
          {
            if (v12 >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_22;
            }
            id v13 = *(id *)(v5 + 8 * v10 + 40);
          }
          uint64_t v14 = v13;
          if (__OFADD__(v12, 1))
          {
            __break(1u);
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
          Swift::Bool v15 = PaperDocumentView.insert(_:at:)((NSItemProvider)v13, at);

          ++v10;
          if (v15) {
            break;
          }
        }
      }
    }
  }
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall PaperDocumentView.rotatePage(at:left:)(Swift::Int at, Swift::Bool left)
{
  uint64_t v3 = v2;
  BOOL v4 = left;
  Swift::Int v34 = at;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v30 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v31 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  Swift::Bool v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for PaperDocument(0);
  MEMORY[0x270FA5388](v10 - 8);
  unint64_t v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = &v27[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v32 = *(void *)(v17 - 8);
  uint64_t v33 = v17;
  double v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = &v27[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing;
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1)
  {
    uint64_t v29 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument;
    if (objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly, v18))
    {
      BOOL v28 = v4;
      uint64_t v22 = v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
      swift_beginAccess();
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v14 + 16))(v16, v22, v13);
      lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      Capsule<>.root.getter();
      (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v16, v13);
      uint64_t v23 = v31;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v31 + 16))(v9, v12, v7);
      _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v12, type metadata accessor for PaperDocument);
      CROrderedSet.subscript.getter();
      (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v9, v7);
      if (*(unsigned char *)(v3 + v21) == 1)
      {
        if (objc_msgSend(*(id *)(v3 + v29), sel_allowsDocumentAssembly))
        {
          uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          uint64_t v25 = (uint64_t)v30;
          uint64_t v26 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v30, 1, 1, v24);
          MEMORY[0x270FA5388](v26);
          *(void *)&v27[-32] = v3;
          *(void *)&v27[-24] = v20;
          v27[-16] = v28;
          specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, v25, (void (*)(uint64_t))partial apply for closure #1 in PaperDocumentView.rotatePage(_:left:));
          outlined destroy of StocksKitCurrencyCache.Provider?(v25, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        }
      }
      (*(void (**)(unsigned char *, uint64_t))(v32 + 8))(v20, v33);
    }
  }
}

uint64_t closure #1 in PaperDocumentView.rotatePage(_:left:)()
{
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.rotatePage(_:left:)(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    uint64_t v3 = -90;
  }
  else {
    uint64_t v3 = 90;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  BOOL v4 = (uint64_t (*)(uint64_t *, void))SharedTagged_3.subscript.modify();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = *(void *)(v5 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v5, v6);
  PaperPage.axisAlignedRotationInDegrees.getter(v6, v7);
  BOOL v9 = __OFADD__(v8, v3);
  uint64_t result = v8 + v3;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    PaperPage.axisAlignedRotationInDegrees.setter(result, v6, v7);
    return v4(&v11, 0);
  }
  return result;
}

Swift::Void __swiftcall PaperDocumentView.insertFromFile(at:)(Swift::Int at)
{
  if (v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] == 1)
  {
    if (objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly))
    {
      uint64_t v3 = &v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI];
      swift_beginAccess();
      id v4 = (id)MEMORY[0x210550400](v3);
      if (v4
        || (id v12 = objc_msgSend(v1, sel_window)) != 0
        && (uint64_t v13 = v12,
            id v4 = objc_msgSend(v12, sel_rootViewController),
            v13,
            v4))
      {
        *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__insertingFromFileIndex] = at;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UTType>);
        type metadata accessor for UTType();
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_20C835740;
        static UTType.image.getter();
        static UTType.pdf.getter();
        id v5 = objc_allocWithZone(MEMORY[0x263F82698]);
        isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v7 = objc_msgSend(v5, sel_initForOpeningContentTypes_asCopy_, isa, 1);

        objc_msgSend(v7, sel_setAllowsMultipleSelection_, 1);
        objc_msgSend(v7, sel_setDelegate_, v1);
        objc_msgSend(v7, sel_setModalPresentationStyle_, 2);
        BOOL v8 = !UIAccessibilityIsReduceMotionEnabled();
        BOOL v9 = &v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate];
        swift_beginAccess();
        if (MEMORY[0x210550400](v9))
        {
          uint64_t v10 = *((void *)v9 + 1);
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(char *, id, BOOL, uint64_t, uint64_t))(v10 + 32))(v1, v7, v8, ObjectType, v10);
          swift_unknownObjectRelease();
        }
        objc_msgSend(v4, sel_presentViewController_animated_completion_, v7, v8, 0);
      }
    }
  }
}

Swift::Void __swiftcall PaperDocumentView.documentPicker(_:didPickDocumentsAt:)(UIDocumentPickerViewController *_, Swift::OpaquePointer didPickDocumentsAt)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  BOOL v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v9 = &v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate];
  swift_beginAccess();
  if (MEMORY[0x210550400](v9))
  {
    uint64_t v10 = *((void *)v9 + 1);
    uint64_t ObjectType = swift_getObjectType();
    IsReduceMotionEnableCGFloat d = UIAccessibilityIsReduceMotionEnabled();
    (*(void (**)(char *, UIDocumentPickerViewController *, BOOL, uint64_t, uint64_t))(v10 + 40))(v3, _, !IsReduceMotionEnabled, ObjectType, v10);
    swift_unknownObjectRelease();
  }
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 1, 1, v13);
  type metadata accessor for MainActor();
  swift_bridgeObjectRetain();
  uint64_t v14 = v3;
  uint64_t v15 = static MainActor.shared.getter();
  uint64_t v16 = (Swift::OpaquePointer *)swift_allocObject();
  uint64_t v17 = (void *)MEMORY[0x263F8F500];
  v16[2]._Swift::Int rawValue = (void *)v15;
  v16[3]._Swift::Int rawValue = v17;
  v16[4]._Swift::Int rawValue = didPickDocumentsAt._rawValue;
  v16[5]._Swift::Int rawValue = v14;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:), (uint64_t)v16);
  swift_release();
}

uint64_t closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for URL();
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  v5[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  void v5[7] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[8] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[9] = v8;
  v5[10] = v7;
  return MEMORY[0x270FA2498](closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:), v8, v7);
}

uint64_t closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 88) = v2;
  uint64_t v3 = *(void *)(v0 + 40);
  if (v2)
  {
    *(void *)(v0 + 96) = OBJC_IVAR____TtC8PaperKit17PaperDocumentView__insertingFromFileIndex;
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 144) = v4;
    *(void *)(v0 + 104) = *(void *)(v3 + 72);
    id v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    *(void *)(v0 + 112) = v5;
    *(void *)(v0 + 120) = 0;
    uint64_t v6 = *(void *)(v0 + 56);
    uint64_t v7 = *(void *)(v0 + 32);
    uint64_t v8 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    swift_bridgeObjectRetain();
    v5(v6, v8, v7);
    BOOL v9 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56);
    *(void *)(v0 + 128) = v9;
    v9(v6, 0, 1, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v7) != 1)
    {
      uint64_t v10 = *(void *)(v0 + 96);
      uint64_t v11 = *(void *)(v0 + 24);
      (*(void (**)(void, void, void))(*(void *)(v0 + 40) + 32))(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 32));
      uint64_t v12 = *(void *)(v11 + v10);
      uint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 136) = v13;
      *uint64_t v13 = v0;
      v13[1] = closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:);
      uint64_t v14 = *(void *)(v0 + 48);
      return PaperDocumentView.insertFile(at:at:)(v14, v12);
    }
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    uint64_t v17 = *(void *)(v0 + 56);
    uint64_t v18 = *(void *)(v0 + 32);
    swift_bridgeObjectRetain();
    v16(v17, 1, 1, v18);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  return MEMORY[0x270FA2498](closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, unint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, void, uint64_t, uint64_t);
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 120) + 1;
  (*(void (**)(void, void))(*(void *)(v0 + 40) + 8))(*(void *)(v0 + 48), *(void *)(v0 + 32));
  if (v2 == v1)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 128))(*(void *)(v0 + 56), 1, 1, *(void *)(v0 + 32));
LABEL_4:
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  uint64_t v3 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 112);
  int v4 = *(void *)(v0 + 120) + 1;
  *(void *)(v0 + 120) = v4;
  id v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 40);
  v3(v5, *(void *)(v0 + 16)+ ((*(unsigned __int8 *)(v0 + 144) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 144))+ *(void *)(v0 + 104) * v4, v6);
  uint64_t v8 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  *(void *)(v0 + 128) = v8;
  v8(v5, 0, 1, v6);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1) {
    goto LABEL_4;
  }
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v12 = *(void *)(v0 + 24);
  (*(void (**)(void, void, void))(*(void *)(v0 + 40) + 32))(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 32));
  uint64_t v13 = *(void *)(v12 + v11);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v14;
  *uint64_t v14 = v0;
  v14[1] = closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:);
  uint64_t v15 = *(void *)(v0 + 48);
  return PaperDocumentView.insertFile(at:at:)(v15, v13);
}

Swift::Void __swiftcall PaperDocumentView.documentPickerWasCancelled(_:)(UIDocumentPickerViewController *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  swift_beginAccess();
  if (MEMORY[0x210550400](v3))
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    IsReduceMotionEnableCGFloat d = UIAccessibilityIsReduceMotionEnabled();
    (*(void (**)(uint64_t, UIDocumentPickerViewController *, BOOL, uint64_t, uint64_t))(v4 + 40))(v1, a1, !IsReduceMotionEnabled, ObjectType, v4);
    swift_unknownObjectRelease();
  }
}

void closure #1 in PaperDocumentView.copyPageAction(for:)(uint64_t a1, uint64_t a2, Swift::Int a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x210550400](v4);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F088E0]), sel_init);
    PaperDocumentView.registerFileRepresentations(forPage:to:)(a3, (NSItemProvider)v7);
    id v8 = objc_msgSend(self, sel_generalPasteboard);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_20C835790;
    *(void *)(v9 + 32) = v7;
    uint64_t v12 = v9;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
    id v10 = v7;
    isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setItemProviders_, isa, v12);
  }
}

UIAction_optional __swiftcall PaperDocumentView.pasteAction(for:)(PDFPage_optional *a1)
{
  if (v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] != 1) {
    goto LABEL_27;
  }
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument;
  if (!objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly))goto LABEL_27; {
  id v5 = objc_msgSend(self, sel_generalPasteboard);
  }
  id v6 = objc_msgSend(v5, sel_itemProviders);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v38 = v3;
  if (v7 >> 62)
  {
LABEL_25:
    uint64_t v33 = v1;
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v9 = v1;
  swift_bridgeObjectRetain();
  if (!v8)
  {
LABEL_26:

    swift_bridgeObjectRelease_n();
LABEL_27:
    uint64_t v32 = 0;
    goto LABEL_28;
  }
LABEL_5:
  uint64_t v10 = 0;
  unint64_t v11 = v7 & 0xC000000000000001;
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_validPasteUTTypeIdentifiers;
  uint64_t v36 = v8;
  unint64_t v37 = v7 + 32;
  unint64_t v39 = v7;
  uint64_t v34 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_validPasteUTTypeIdentifiers;
  unint64_t v35 = v7 & 0xC000000000000001;
  while (1)
  {
    if (v11) {
      id v13 = (id)MEMORY[0x21054E050](v10, v7);
    }
    else {
      id v13 = *(id *)(v37 + 8 * v10);
    }
    uint64_t v14 = v13;
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    uint64_t v16 = *(void *)&v1[v12];
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17) {
      break;
    }
LABEL_6:

    if (v10 == v8) {
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v18 = (uint64_t *)(v16 + 40);
  while (1)
  {
    uint64_t v20 = *(v18 - 1);
    uint64_t v19 = *v18;
    swift_bridgeObjectRetain();
    uint64_t v21 = (void *)MEMORY[0x21054D080](v20, v19);
    unsigned int v22 = objc_msgSend(v14, sel_hasItemConformingToTypeIdentifier_, v21);

    swift_bridgeObjectRelease();
    if (v22) {
      break;
    }
    v18 += 2;
    if (!--v17)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v7 = v39;
      unint64_t v11 = v35;
      uint64_t v8 = v36;
      uint64_t v12 = v34;
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease_n();
  if (a1)
  {
    uint64_t v23 = (char *)objc_msgSend(*(id *)&v1[v38], sel_indexForPage_);
    uint64_t v24 = v23 + 1;
    if (!__OFADD__(v23, 1)) {
      goto LABEL_21;
    }
    __break(1u);
  }
  uint64_t v24 = 0;
LABEL_21:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v41._uint64_t countAndFlagsBits = 0xD000000000000028;
  v41._object = (void *)0x800000020C85CD80;
  v25._uint64_t countAndFlagsBits = 0x6574736150;
  v25._object = (void *)0xE500000000000000;
  v26.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v26.value._object = (void *)0xEB00000000656C62;
  v27._uint64_t countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v25, v26, paperKitBundle, v27, v41);
  BOOL v28 = (void *)MEMORY[0x21054D080](0xD000000000000010, 0x800000020C8514D0);
  id v29 = objc_msgSend(self, sel_systemImageNamed_, v28);

  MEMORY[0x21054D080](0xD000000000000014, 0x800000020C85CDB0);
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v30;
  *(void *)(v31 + 24) = v24;
  uint64_t v32 = (objc_class *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
LABEL_28:
  result.value.super.super.isCGFloat a = v32;
  result.is_nil = v4;
  return result;
}

void closure #1 in PaperDocumentView.rotateLeftAction(for:)(uint64_t a1, uint64_t a2, Swift::Int a3, char a4)
{
  uint64_t v6 = a2 + 16;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x210550400](v6);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    PaperDocumentView.rotatePage(at:left:)(a3, a4 & 1);
  }
}

void closure #2 in PaperDocumentView.pasteAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = a2 + 16;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x210550400](v6);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    a4(a3);
  }
}

UIAction_optional __swiftcall PaperDocumentView.deleteAction(for:)(PDFPage *a1)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1
    && (uint64_t v3 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument,
        objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly)))
  {
    id v5 = objc_msgSend(*(id *)(v1 + v3), sel_indexForPage_, a1);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v15._uint64_t countAndFlagsBits = 0xD000000000000076;
    v6.value._object = (void *)0xEB00000000656C62;
    v15._object = (void *)0x800000020C85CD00;
    v7._uint64_t countAndFlagsBits = 0x50206574656C6544;
    v7._object = (void *)0xEB00000000656761;
    v6.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v8._uint64_t countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v6, paperKitBundle, v8, v15);
    uint64_t v9 = (void *)MEMORY[0x21054D080](0x6873617274, 0xE500000000000000);
    id v10 = objc_msgSend(self, sel_systemImageNamed_, v9);

    MEMORY[0x21054D080](0xD000000000000015, 0x800000020C85B270);
    uint64_t v11 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v11;
    *(void *)(v12 + 24) = v5;
    id v13 = (objc_class *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  }
  else
  {
    id v13 = 0;
  }
  result.value.super.super.isCGFloat a = v13;
  result.is_nil = v4;
  return result;
}

void closure #1 in PaperDocumentView.deleteAction(for:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v5 - 8);
  Swift::String v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x210550400](a2 + 16);
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    if (*(unsigned char *)(v8 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1)
    {
      if (objc_msgSend(*(id *)(v8 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly))
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 1, 1, v10);
        uint64_t v11 = v9;
        specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v7, v11, v11, a3);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      }
    }
  }
}

Swift::OpaquePointer_optional __swiftcall PaperDocumentView.menuElements(for:)(PDFPage *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v5 = *(char **)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  Swift::String v7 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v152 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperKitPDFPage(0);
  id v13 = (PDFPage_optional *)swift_dynamicCastClass();
  id v14 = (id)MEMORY[0x263F8EE78];
  if (!v13) {
    goto LABEL_127;
  }
  uint64_t v161 = v11;
  uint64_t v162 = v9;
  uint64_t v163 = v8;
  uint64_t v164 = v7;
  uint64_t v15 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument;
  uint64_t v16 = *(Class *)((char *)&v2->super.isa + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument);
  uint64_t v17 = a1;
  id v18 = objc_msgSend(v16, sel_indexForPage_, v13);
  if (v18 == (id)NSNotFound.getter())
  {

    goto LABEL_4;
  }
  uint64_t v19 = (char *)v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  swift_beginAccess();
  uint64_t v20 = MEMORY[0x210550400](v19);
  uint64_t v156 = v4;
  if (v20)
  {
    uint64_t v21 = *((void *)v19 + 1);
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v21) = (*(uint64_t (**)(PDFPage *, uint64_t, uint64_t))(v21 + 24))(v2, ObjectType, v21);
    swift_unknownObjectRelease();
    if ((v21 & 1) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v23 = (char *)v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode;
    swift_beginAccess();
    if (!*v23) {
      goto LABEL_11;
    }
  }
  if (*((unsigned char *)&v2->super.isa + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1)
  {
    unint64_t v24 = (unint64_t)objc_msgSend(*(id *)((char *)&v2->super.isa + v15), sel_allowsDocumentAssembly);
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v24 = 0;
LABEL_12:
  uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v25 = swift_allocObject();
  long long v152 = xmmword_20C835790;
  *(_OWORD *)(v25 + 16) = xmmword_20C835790;
  uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIMenuElement?>);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C835740;
  Swift::String v27 = (unsigned __int8 *)v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_allowsDocumentStructureCopying;
  swift_beginAccess();
  uint64_t v28 = 0;
  int v29 = *v27;
  unint64_t v165 = v17;
  unint64_t v166 = v13;
  char v160 = v5;
  uint64_t v158 = v15;
  if (v29 == 1)
  {
    uint64_t v154 = objc_msgSend(*(id *)((char *)&v2->super.isa + v15), sel_indexForPage_, v13);
    uint64_t v155 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v176._uint64_t countAndFlagsBits = 0xD000000000000027;
    v176._object = (void *)0x800000020C85CCD0;
    v30._uint64_t countAndFlagsBits = 2037411651;
    v30._object = (void *)0xE400000000000000;
    v31.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v31.value._object = (void *)0xEB00000000656C62;
    v32._uint64_t countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, paperKitBundle, v32, v176);
    uint64_t v33 = (void *)MEMORY[0x21054D080](0x642E6E6F2E636F64, 0xEA0000000000636FLL);
    id v34 = objc_msgSend(self, sel_systemImageNamed_, v33);

    MEMORY[0x21054D080](0xD000000000000013, 0x800000020C85B1D0);
    uint64_t v35 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v36 = swift_allocObject();
    unint64_t v37 = v154;
    *(void *)(v36 + 16) = v35;
    *(void *)(v36 + 24) = v37;
    uint64_t v28 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    uint64_t v5 = v160;
    id v13 = v166;
    uint64_t v15 = v158;
  }
  *(void *)(inited + 32) = v28;
  if (!v24
    || (uint64_t v38 = v165,
        unint64_t v39 = (unint64_t)PaperDocumentView.pasteAction(for:)(v13),
        v38,
        !v39))
  {
    unint64_t v39 = 0;
  }
  *(void *)(inited + 40) = v39;
  uint64_t v168 = inited;
  specialized Array._endMutation()();
  uint64_t v40 = v168;
  uint64_t v168 = MEMORY[0x263F8EE78];
  Swift::String v41 = *(void **)(v40 + 32);
  if (v41)
  {
    id v42 = v41;
    MEMORY[0x21054D330]();
    if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    id v13 = v166;
  }
  uint64_t v43 = *(void **)(v40 + 40);
  if (v43)
  {
    id v44 = v43;
    MEMORY[0x21054D330]();
    if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    id v13 = v166;
  }
  uint64_t v45 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  UIMenuElementSize v46 = v168;
  swift_bridgeObjectRelease();
  v47._uint64_t countAndFlagsBits = 0;
  v47._object = (void *)0xE000000000000000;
  v172.value.super.isCGFloat a = 0;
  v172.is_nil = 0;
  *(UIMenu *)(v25 + 32) = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v47, (Swift::String_optional)0, v172, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v46, v149);
  uint64_t v168 = v25;
  specialized Array._endMutation()();
  uint64_t v48 = v168;
  uint64_t v170 = v168;
  if (v24)
  {
    uint64_t v155 = swift_allocObject();
    *(_OWORD *)(v155 + 16) = xmmword_20C8344D0;
    uint64_t v49 = swift_initStackObject();
    *(_OWORD *)(v49 + 16) = xmmword_20C8352C0;
    uint64_t v50 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing;
    int v51 = *((unsigned __int8 *)&v2->super.isa
          + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing);
    uint64_t v153 = v45;
    uint64_t v154 = (unsigned char *)OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing;
    if (v51 == 1 && objc_msgSend(*(id *)((char *)&v2->super.isa + v15), sel_allowsDocumentAssembly))
    {
      id v52 = objc_msgSend(*(id *)((char *)&v2->super.isa + v15), sel_indexForPage_, v13);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v177._uint64_t countAndFlagsBits = 0xD000000000000078;
      v177._object = (void *)0x800000020C85CC30;
      v53._uint64_t countAndFlagsBits = 0x4C20657461746F52;
      v53._object = (void *)0xEB00000000746665;
      v54.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      v54.value._object = (void *)0xEB00000000656C62;
      v55._uint64_t countAndFlagsBits = 0;
      v55._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v53, v54, paperKitBundle, v55, v177);
      uint64_t v56 = (void *)MEMORY[0x21054D080](0x6C2E657461746F72, 0xEB00000000746665);
      id v57 = objc_msgSend(self, sel_systemImageNamed_, v56);

      MEMORY[0x21054D080](0xD00000000000001ALL, 0x800000020C85CCB0);
      uint64_t v58 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = v58;
      *(void *)(v59 + 24) = v52;
      uint64_t v60 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
      uint64_t v5 = v160;
      id v13 = v166;
      uint64_t v50 = (uint64_t)v154;
      uint64_t v15 = v158;
    }
    else
    {
      uint64_t v60 = 0;
    }
    *(void *)(v49 + 32) = v60;
    if (*((unsigned char *)&v2->super.isa + v50) == 1
      && objc_msgSend(*(id *)((char *)&v2->super.isa + v15), sel_allowsDocumentAssembly))
    {
      id v61 = objc_msgSend(*(id *)((char *)&v2->super.isa + v15), sel_indexForPage_, v13);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v178._uint64_t countAndFlagsBits = 0xD000000000000079;
      v178._object = (void *)0x800000020C85C6F0;
      v62._uint64_t countAndFlagsBits = 0x5220657461746F52;
      v62._object = (void *)0xEC00000074686769;
      v63.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      v63.value._object = (void *)0xEB00000000656C62;
      v64._uint64_t countAndFlagsBits = 0;
      v64._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v62, v63, paperKitBundle, v64, v178);
      uint64_t v65 = (void *)MEMORY[0x21054D080](0x722E657461746F72, 0xEC00000074686769);
      id v66 = objc_msgSend(self, sel_systemImageNamed_, v65);

      MEMORY[0x21054D080](0xD00000000000001BLL, 0x800000020C85CC10);
      uint64_t v67 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v68 = swift_allocObject();
      *(void *)(v68 + 16) = v67;
      *(void *)(v68 + 24) = v61;
      uint64_t v69 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
      uint64_t v5 = v160;
      id v13 = v166;
      uint64_t v15 = v158;
    }
    else
    {
      uint64_t v69 = 0;
    }
    *(void *)(v49 + 40) = v69;
    *(void *)(v49 + 48) = PaperDocumentView.applyFilterPageAction(for:)((uint64_t)v13);
    *(void *)(v49 + 56) = PaperDocumentView.cropPageAction(for:)(v13);
    uint64_t v168 = v49;
    specialized Array._endMutation()();
    unint64_t v24 = v168;
    uint64_t v168 = MEMORY[0x263F8EE78];
    CGRect v70 = *(void **)(v24 + 32);
    if (!v70) {
      goto LABEL_43;
    }
    id v71 = v70;
    MEMORY[0x21054D330]();
    if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_42;
    }
    goto LABEL_120;
  }
  while (1)
  {
    if (!((unint64_t)v48 >> 62))
    {
      uint64_t v2 = v165;
      if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) != 1) {
        goto LABEL_106;
      }
      swift_bridgeObjectRetain();
      goto LABEL_99;
    }
    if (v48 < 0) {
      unint64_t v24 = v48;
    }
    else {
      unint64_t v24 = v48 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v146 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    BOOL v147 = v146 == 1;
    uint64_t v2 = v165;
    if (!v147) {
      goto LABEL_116;
    }
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      break;
    }
LABEL_99:
    if ((v48 & 0xC000000000000001) != 0)
    {
      id v141 = (id)MEMORY[0x21054E050](0, v48);
      goto LABEL_102;
    }
    if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v141 = *(id *)(v48 + 32);
LABEL_102:
      uint64_t v142 = v141;
      swift_bridgeObjectRelease();
      id v143 = objc_msgSend(v142, sel_children);

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
      unint64_t v144 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v144 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v145 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v145 = *(void *)((v144 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v145)
      {
        if ((unint64_t)v48 >> 62) {
          goto LABEL_116;
        }
LABEL_106:
        swift_bridgeObjectRetain();
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();

        swift_bridgeObjectRelease();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
        id v14 = (id)v48;
        goto LABEL_127;
      }

      swift_bridgeObjectRelease();
LABEL_4:
      id v14 = (id)MEMORY[0x263F8EE78];
      goto LABEL_127;
    }
    __break(1u);
LABEL_120:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_42:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
LABEL_43:
    CGRect v72 = *(void **)(v24 + 40);
    if (v72)
    {
      id v73 = v72;
      MEMORY[0x21054D330]();
      if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    id v74 = *(void **)(v24 + 48);
    if (v74)
    {
      id v75 = v74;
      MEMORY[0x21054D330]();
      if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    uint64_t v76 = *(void **)(v24 + 56);
    if (v76)
    {
      id v77 = v76;
      MEMORY[0x21054D330]();
      if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    UIMenuElementSize v78 = v168;
    swift_bridgeObjectRelease();
    v79._uint64_t countAndFlagsBits = 0;
    v79._object = (void *)0xE000000000000000;
    v173.value.super.isCGFloat a = 0;
    v173.is_nil = 0;
    v80.super.super.isCGFloat a = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v79, (Swift::String_optional)0, v173, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v78, (Swift::OpaquePointer)v150.super.super.isa).super.super.isa;
    *(UIMenu *)(v155 + 32) = v80;
    uint64_t v81 = swift_initStackObject();
    uint64_t v82 = 0;
    *(_OWORD *)(v81 + 16) = xmmword_20C837A90;
    uint64_t v83 = v154;
    if (v154[(void)v2] == 1)
    {
      if (objc_msgSend(*(id *)((char *)&v2->super.isa + v15), sel_allowsDocumentAssembly))
      {
        uint64_t v84 = (char *)objc_msgSend(*(id *)((char *)&v2->super.isa + v15), sel_indexForPage_, v13);
        uint64_t v5 = v84 + 1;
        if (!__OFADD__(v84, 1))
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
          if (one-time initialization token for paperKitBundle != -1) {
            goto LABEL_123;
          }
          goto LABEL_59;
        }
        __break(1u);
        goto LABEL_122;
      }
      uint64_t v82 = 0;
    }
    while (1)
    {
      *(void *)(v81 + 32) = v82;
      if (v83[(void)v2] == 1
        && objc_msgSend(*(id *)((char *)&v2->super.isa + v15), sel_allowsDocumentAssembly))
      {
        id v92 = (id)MGCopyAnswer();
        char v93 = [v92 BOOLValue];

        uint64_t v94 = 0;
        if (v93) {
          goto LABEL_68;
        }
        id v95 = (char *)objc_msgSend(*(id *)((char *)&v2->super.isa + v15), sel_indexForPage_, v13);
        uint64_t v96 = v95 + 1;
        if (__OFADD__(v95, 1))
        {
          __break(1u);
        }
        else
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
          if (one-time initialization token for paperKitBundle == -1)
          {
LABEL_66:
            v97._uint64_t countAndFlagsBits = 0xD000000000000010;
            v180._uint64_t countAndFlagsBits = 0xD000000000000080;
            v180._object = (void *)0x800000020C85CAA0;
            v97._object = (void *)0x800000020C85CA80;
            v98.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
            v98.value._object = (void *)0xEB00000000656C62;
            v99._uint64_t countAndFlagsBits = 0;
            v99._object = (void *)0xE000000000000000;
            NSLocalizedString(_:tableName:bundle:value:comment:)(v97, v98, paperKitBundle, v99, v180);
            id v100 = (void *)MEMORY[0x21054D080](0x7265646C6F66, 0xE600000000000000);
            id v101 = objc_msgSend(self, sel_systemImageNamed_, v100);

            MEMORY[0x21054D080](0xD00000000000001ALL, 0x800000020C85CB30);
            uint64_t v102 = swift_allocObject();
            swift_unknownObjectWeakInit();
            uint64_t v103 = swift_allocObject();
            *(void *)(v103 + 16) = v102;
            *(void *)(v103 + 24) = v96;
            uint64_t v94 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
            uint64_t v5 = v160;
            id v13 = v166;
            uint64_t v83 = v154;
            uint64_t v15 = v158;
            goto LABEL_68;
          }
        }
        swift_once();
        goto LABEL_66;
      }
      uint64_t v94 = 0;
LABEL_68:
      *(void *)(v81 + 40) = v94;
      id v104 = [(PDFPage *)v2 window];

      if (v104)
      {
        id v14 = [(PDFPage *)v2 window];
        if (!v14)
        {
          __break(1u);
          goto LABEL_127;
        }
        id v105 = v14;
        id v104 = objc_msgSend(self, sel_activeToolPickerForWindow_, v14);
      }
      if (v83[(void)v2] != 1
        || (objc_msgSend(*(id *)((char *)&v2->super.isa + v15), sel_allowsDocumentAssembly) & 1) == 0)
      {

        uint64_t v115 = 0;
        goto LABEL_78;
      }
      uint64_t v106 = (char *)objc_msgSend(*(id *)((char *)&v2->super.isa + v15), sel_indexForPage_, v13);
      unint64_t v107 = v106 + 1;
      if (!__OFADD__(v106, 1)) {
        break;
      }
LABEL_122:
      __break(1u);
LABEL_123:
      swift_once();
LABEL_59:
      v85._uint64_t countAndFlagsBits = 0xD000000000000011;
      v179._uint64_t countAndFlagsBits = 0xD00000000000007CLL;
      v179._object = (void *)0x800000020C85CB70;
      v85._object = (void *)0x800000020C85CB50;
      v86.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      v86.value._object = (void *)0xEB00000000656C62;
      v87._uint64_t countAndFlagsBits = 0;
      v87._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v85, v86, paperKitBundle, v87, v179);
      uint64_t v88 = (void *)MEMORY[0x21054D080](0x676461622E636F64, 0xEE0073756C702E65);
      id v89 = objc_msgSend(self, sel_systemImageNamed_, v88);

      MEMORY[0x21054D080](0xD000000000000017, 0x800000020C85CBF0);
      uint64_t v90 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v91 = swift_allocObject();
      *(void *)(v91 + 16) = v90;
      *(void *)(v91 + 24) = v5;
      uint64_t v82 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
      uint64_t v5 = v160;
      id v13 = v166;
      uint64_t v83 = v154;
      uint64_t v15 = v158;
    }
    uint64_t v159 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v181._uint64_t countAndFlagsBits = 0xD000000000000075;
    v108._object = (void *)0xEA00000000007365;
    v181._object = (void *)0x800000020C85C9E0;
    v108._uint64_t countAndFlagsBits = 0x676150206E616353;
    v109.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v109.value._object = (void *)0xEB00000000656C62;
    v110._uint64_t countAndFlagsBits = 0;
    v110._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v108, v109, paperKitBundle, v110, v181);
    unint64_t v111 = (void *)MEMORY[0x21054D080](0x776569762E636F64, 0xEE007265646E6966);
    id v112 = objc_msgSend(self, sel_systemImageNamed_, v111);

    MEMORY[0x21054D080](0xD000000000000019, 0x800000020C85CA60);
    uint64_t v113 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v114 = (void *)swift_allocObject();
    v114[2] = v113;
    v114[3] = v104;
    v114[4] = v107;
    uint64_t v115 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    uint64_t v5 = v160;
LABEL_78:
    *(void *)(v81 + 48) = v115;
    uint64_t v168 = v81;
    specialized Array._endMutation()();
    unsigned __int8 v116 = (void *)v168;
    uint64_t v168 = MEMORY[0x263F8EE78];
    unint64_t v117 = (void *)v116[4];
    if (v117)
    {
      id v118 = v117;
      MEMORY[0x21054D330]();
      if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    uint64_t v119 = (void *)v116[5];
    if (v119)
    {
      id v120 = v119;
      MEMORY[0x21054D330]();
      if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    uint64_t v121 = (void *)v116[6];
    if (v121)
    {
      id v122 = v121;
      MEMORY[0x21054D330]();
      if (*(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    UIMenuElementSize v123 = v168;
    swift_bridgeObjectRelease();
    v124._uint64_t countAndFlagsBits = 0;
    v124._object = (void *)0xE000000000000000;
    v174.value.super.isCGFloat a = 0;
    v174.is_nil = 0;
    v125.super.super.isCGFloat a = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v124, (Swift::String_optional)0, v174, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v123, (Swift::OpaquePointer)v151.super.super.isa).super.super.isa;
    uint64_t v126 = v155;
    *(UIMenu *)(v155 + 40) = v125;
    uint64_t v168 = v126;
    specialized Array._endMutation()();
    unint64_t v24 = v168;
    unint64_t v169 = v168;
    uint64_t v127 = (char *)v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    uint64_t v15 = (uint64_t)v161;
    uint64_t v128 = v162;
    uint64_t v129 = v163;
    (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v161, v127, v163);
    swift_getKeyPath();
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    uint64_t v130 = v164;
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v131 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
    id v13 = (PDFPage_optional *)(v128 + 8);
    v131(v15, v129);
    uint64_t v132 = v156;
    uint64_t v133 = CROrderedSet.count.getter();
    uint64_t v134 = (void (*)(char *, uint64_t))*((void *)v5 + 1);
    v5 += 8;
    v134(v130, v132);
    if (v133 >= 2)
    {
      unint64_t v135 = (unint64_t)PaperDocumentView.deleteAction(for:)(&v166->value);
      if (v135)
      {
        uint64_t v136 = (void *)v135;
        uint64_t v137 = swift_allocObject();
        *(_OWORD *)(v137 + 16) = v152;
        *(void *)(v137 + 32) = v136;
        UIMenuElementSize v167 = v137;
        specialized Array._endMutation()();
        UIMenuElementSize v138 = v167;
        id v139 = v136;
        v140._uint64_t countAndFlagsBits = 0;
        v140._object = (void *)0xE000000000000000;
        v175.value.super.isCGFloat a = 0;
        v175.is_nil = 0;
        UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v140, (Swift::String_optional)0, v175, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v138, (Swift::OpaquePointer)v150.super.super.isa);
        MEMORY[0x21054D330]();
        if (*(void *)((v169 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v169 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        unint64_t v24 = v169;
      }
    }
    specialized Array.append<A>(contentsOf:)(v24, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
    uint64_t v48 = v170;
  }
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_116:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  swift_bridgeObjectRetain();
  uint64_t v148 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease_n();

  id v14 = (id)v148;
LABEL_127:
  result.value._Swift::Int rawValue = v14;
  result.is_nil = v12;
  return result;
}

Swift::Void __swiftcall PaperDocumentView.tiledViewUpdateEditingState()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v1)
  {
    uint64_t v2 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
    swift_beginAccess();
    uint64_t v3 = *v2;
    BOOL v4 = v3 >= 2;
    if (v3 != 2) {
      uint64_t v3 = 0;
    }
    if (v4) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = v4;
    id v7 = v1;
    id v8 = objc_msgSend(v7, sel_canvasView);
    if (v8)
    {
      uint64_t v9 = v8;
      id v10 = objc_msgSend(v8, sel_drawingGestureRecognizer);

      objc_msgSend(v10, sel_setEnabled_, v6);
    }
    objc_msgSend(v7, sel_setDrawingPolicy_, v5);
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in PaperDocumentView.scanPagesAction(for:toolPicker:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = a2 + 16;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x210550400](v6);
  if (v7)
  {
    id v8 = (char *)v7;
    uint64_t v9 = v7 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
    swift_beginAccess();
    id v10 = (id)MEMORY[0x210550400](v9);
    if (v10
      || (id v22 = objc_msgSend(v8, sel_window)) != 0
      && (uint64_t v23 = v22,
          id v10 = objc_msgSend(v22, sel_rootViewController),
          v23,
          v10))
    {
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F3AA60]), sel_init);
      objc_msgSend(v11, sel_setModalPresentationStyle_, 5);
      objc_msgSend(v11, sel_setDelegate_, *(void *)&v8[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_documentDelegate]);
      objc_msgSend(a3, sel__lockHidden);
      BOOL v12 = !UIAccessibilityIsReduceMotionEnabled();
      uint64_t v13 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v14 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v13;
      *(void *)(v15 + 24) = v14;
      *(void *)(v15 + 32) = a4;
      *(unsigned char *)(v15 + 40) = v12;
      *(void *)(v15 + 48) = a3;
      uint64_t v16 = (void (**)(void *))&v8[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_docScanDismissBlock];
      uint64_t v17 = *(void *)&v8[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_docScanDismissBlock];
      *uint64_t v16 = partial apply for closure #1 in closure #1 in PaperDocumentView.scanPagesAction(for:toolPicker:);
      v16[1] = (void (*)(void *))v15;
      id v18 = a3;
      outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v17);
      uint64_t v19 = &v8[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate];
      swift_beginAccess();
      if (MEMORY[0x210550400](v19))
      {
        uint64_t v20 = *((void *)v19 + 1);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(char *, id, BOOL, uint64_t, uint64_t))(v20 + 32))(v8, v11, v12, ObjectType, v20);
        swift_unknownObjectRelease();
      }
      objc_msgSend(v10, sel_presentViewController_animated_completion_, v11, v12, 0);
    }
  }
}

void closure #1 in closure #1 in PaperDocumentView.scanPagesAction(for:toolPicker:)(void *a1, uint64_t a2, uint64_t a3, Swift::Int a4, char a5, void *a6)
{
  uint64_t v11 = a2 + 16;
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x210550400](v11);
  if (v12)
  {
    uint64_t v13 = (char *)v12;
    swift_beginAccess();
    uint64_t v14 = MEMORY[0x210550400](a3 + 16);
    if (v14)
    {
      uint64_t v15 = (void *)v14;
      uint64_t v16 = &v13[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_docScanDismissBlock];
      uint64_t v17 = *(void *)&v13[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_docScanDismissBlock];
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v17);
      if (a1)
      {
        id v18 = a1;
        PaperDocumentView.insert(_:at:)((VNDocumentCameraScan)v18, a4);
      }
      objc_msgSend(v15, sel_dismissViewControllerAnimated_completion_, a5 & 1, 0);
      uint64_t v19 = &v13[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate];
      swift_beginAccess();
      if (MEMORY[0x210550400](v19))
      {
        uint64_t v20 = *((void *)v19 + 1);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(char *, void *, void, uint64_t, uint64_t))(v20 + 40))(v13, v15, a5 & 1, ObjectType, v20);
        swift_unknownObjectRelease();
      }
      objc_msgSend(a6, sel__unlockHidden);
    }
    else
    {
      uint64_t v15 = v13;
    }
  }
}

uint64_t closure #1 in PaperDocumentView.apply(filter:to:)()
{
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.apply(filter:to:)@<X0>(unsigned __int8 a1@<W1>, char *a2@<X8>)
{
  int v4 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  id v10 = (char *)&v22 - v9;
  if (v4 == 4)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
    uint64_t v11 = (uint64_t (*)(unsigned char *, void))WeakRef.subscript.modify();
    uint64_t v13 = v12;
    uint64_t v14 = type metadata accessor for Image();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 1, 1, v15);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)v7, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
      CRRegister.wrappedValue.setter();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      uint64_t result = v11(v24, 0);
LABEL_7:
      char v20 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
    uint64_t v11 = (uint64_t (*)(unsigned char *, void))WeakRef.subscript.modify();
    uint64_t v18 = v17;
    uint64_t v19 = type metadata accessor for Image();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v18, 1, v19))
    {
      uint64_t v22 = a1;
      char v23 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<BasicImageFilter>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>, &demangling cache variable for type metadata for CRExtensible<BasicImageFilter>);
      TaggedValue_1.init(_:)();
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v10, 0, 1, v21);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)v7, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
      CRRegister.wrappedValue.setter();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      uint64_t result = v11(v24, 0);
      goto LABEL_7;
    }
  }
  uint64_t result = v11(v24, 0);
  char v20 = 1;
LABEL_8:
  *a2 = v20;
  return result;
}

Class PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  uint64_t v3 = *(char **)(v2 - 8);
  uint64_t v65 = v2;
  id v66 = v3;
  uint64_t v4 = *((void *)v3 + 8);
  MEMORY[0x270FA5388](v2);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v56 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v8 - 8);
  id v10 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  uint64_t v68 = *(void *)(v17 - 8);
  uint64_t v69 = v17;
  uint64_t v18 = *(void *)(v68 + 64);
  MEMORY[0x270FA5388](v17);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v56 - v20;
  uint64_t v22 = a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v22, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v23 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v10, 1, v23))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v13, 1, 1, v24);
LABEL_4:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v16, 1, 1, v69);
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakRef<Image>?);
    return 0;
  }
  uint64_t v62 = v18;
  Swift::String_optional v63 = (char *)v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v4;
  uint64_t v64 = (uint64_t)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v10[*(int *)(v23 + 20)], (uint64_t)v13, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v13, 1, v25) == 1) {
    goto LABEL_4;
  }
  WeakTagged_3.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v25);
  uint64_t v30 = v68;
  uint64_t v29 = v69;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v16, 1, v69) == 1) {
    goto LABEL_5;
  }
  Swift::String_optional v31 = v21;
  uint64_t v60 = *(uint64_t (**)(char *, char *, uint64_t))(v30 + 32);
  v56[1] = (id)(v30 + 32);
  uint64_t v32 = v60(v21, v16, v29);
  MEMORY[0x270FA5388](v32);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v33 = (uint64_t)v7;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  uint64_t v65 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v72._object = (void *)0x800000020C85C7E0;
  v34._uint64_t countAndFlagsBits = 0x737265746C6946;
  v34._object = (void *)0xE700000000000000;
  v35.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v35.value._object = (void *)0xEB00000000656C62;
  v36._uint64_t countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  v72._uint64_t countAndFlagsBits = 0xD000000000000033;
  Swift::String v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v34, v35, paperKitBundle, v36, v72);
  uint64_t countAndFlagsBits = v37._countAndFlagsBits;
  object = v37._object;
  id v38 = objc_msgSend(self, sel_configurationPreferringMonochrome);
  unint64_t v39 = (void *)MEMORY[0x21054D080](0x662E6172656D6163, 0xEE00737265746C69);
  id v57 = (objc_class *)objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v39, v38);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  UIMenuElementSize v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_20C835790;
  v56[0] = self;
  uint64_t v41 = (uint64_t)v7;
  uint64_t v42 = v64;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v41, v64, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  uint64_t v43 = v63;
  uint64_t v44 = v69;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v63, v31, v69);
  unint64_t v45 = (v66[80] + 16) & ~(unint64_t)v66[80];
  id v66 = v31;
  unint64_t v46 = (v61 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v47 = (*(unsigned __int8 *)(v30 + 80) + v46 + 8) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v48 = swift_allocObject();
  uint64_t v62 = v33;
  UIMenuElementSize v49 = v48;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v42, v48 + v45, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  uint64_t v50 = v67;
  *(void *)(v49 + v46) = v67;
  v60((char *)(v49 + v47), v43, v44);
  aBlock[4] = (UIMenuElementSize)partial apply for closure #2 in PaperDocumentView.applyFilterPageAction(for:);
  aBlock[5] = v49;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (UIMenuElementSize)thunk for @escaping @callee_guaranteed (@guaranteed @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> ()) -> ();
  aBlock[3] = (UIMenuElementSize)&block_descriptor_243;
  int v51 = _Block_copy(aBlock);
  id v52 = v50;
  swift_release();
  id v53 = objc_msgSend(v56[0], sel_elementWithUncachedProvider_, v51);
  _Block_release(v51);
  *(void *)(v40 + 32) = v53;
  aBlock[0] = v40;
  specialized Array._endMutation()();
  v54._uint64_t countAndFlagsBits = countAndFlagsBits;
  v54._object = object;
  v71.value.super.isCGFloat a = v57;
  v71.is_nil = 0;
  isCGFloat a = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v54, (Swift::String_optional)0, v71, 0, 0xFFFFFFFFFFFFFFFFLL, aBlock[0], v55).super.super.isa;
  outlined destroy of StocksKitCurrencyCache.Provider?(v62, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v66, v44);
  return isa;
}

uint64_t closure #1 in PaperDocumentView.applyFilterPageAction(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  WeakRef.subscript.getter();
  uint64_t v5 = type metadata accessor for Image();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for Image?);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 1, 1, v6);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
    CRRegister.wrappedValue.getter();
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for Image?);
  }
}

uint64_t closure #2 in PaperDocumentView.applyFilterPageAction(for:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v124 = a4;
  uint64_t v125 = a5;
  uint64_t v102 = a2;
  uint64_t v103 = a1;
  uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  uint64_t v118 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123);
  uint64_t v117 = v6;
  id v122 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v96 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
  MEMORY[0x270FA5388](v10);
  uint64_t v101 = (uint64_t)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v105 = (uint64_t)&v95 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v95 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v100 = (uint64_t)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  Swift::String v99 = (char *)&v95 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v95 = (uint64_t)&v95 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v95 - v24;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v95 - v27;
  MEMORY[0x270FA5388](v29);
  Swift::String_optional v31 = (char *)&v95 - v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v120 = swift_allocObject();
  *(_OWORD *)(v120 + 16) = xmmword_20C8344C0;
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v128._uint64_t countAndFlagsBits = 0xD000000000000039;
  v128._object = (void *)0x800000020C85C840;
  v32._uint64_t countAndFlagsBits = 0x726F6C6F43;
  v32._object = (void *)0xE500000000000000;
  v33.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v33.value._object = (void *)0xEB00000000656C62;
  v34._uint64_t countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  Swift::String v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, v33, paperKitBundle, v34, v128);
  uint64_t countAndFlagsBits = v35._countAndFlagsBits;
  object = v35._object;
  uint64_t v97 = MEMORY[0x21054D080](0xD00000000000001BLL, 0x800000020C85C880);
  uint64_t v126 = 0;
  char v127 = 0;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<BasicImageFilter>);
  uint64_t v37 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>, &demangling cache variable for type metadata for CRExtensible<BasicImageFilter>);
  uint64_t v104 = v36;
  uint64_t v108 = v37;
  TaggedValue_1.init(_:)();
  id v38 = *(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56);
  uint64_t v107 = v8 + 56;
  uint64_t v106 = v38;
  v38(v31, 0, 1, v7);
  id v112 = (int *)v10;
  uint64_t v39 = (uint64_t)&v16[*(int *)(v10 + 48)];
  uint64_t v114 = v8;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a3, (uint64_t)v16, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  uint64_t v40 = v114;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v31, v39, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  unsigned int v42 = v41(v16, 1, v7);
  uint64_t v121 = a3;
  uint64_t v119 = v40 + 48;
  uint64_t v113 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v41;
  if (v42 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    if (v41((char *)v39, 1, v7) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      uint64_t v43 = v118;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v16, (uint64_t)v28, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  if (v41((char *)v39, 1, v7) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v7);
LABEL_8:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
    uint64_t v43 = v118;
    goto LABEL_10;
  }
  uint64_t v44 = v96;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v96, v39, v7);
  lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>();
  dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v45 = *(void (**)(char *, uint64_t))(v40 + 8);
  v45(v44, v7);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v45(v28, v7);
  uint64_t v43 = v118;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
LABEL_10:
  uint64_t v46 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  uint64_t v47 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v50 = v122;
  uint64_t v49 = v123;
  uint64_t v118 = v43 + 16;
  Swift::String v110 = v48;
  v48(v122, v125, v123);
  uint64_t v51 = *(unsigned __int8 *)(v43 + 80);
  uint64_t v52 = (v51 + 24) & ~v51;
  uint64_t v115 = v51 | 7;
  uint64_t v116 = v52 + v117;
  uint64_t v53 = swift_allocObject();
  *(void *)(v53 + 16) = v47;
  uint64_t v117 = v52;
  Swift::String_optional v109 = *(void (**)(uint64_t, char *, uint64_t))(v43 + 32);
  v109(v53 + v52, v50, v49);
  uint64_t countAndFlagsBits = v46;
  *(void *)(v120 + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  v129._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
  v129._object = (void *)0x800000020C85C8A0;
  v54._uint64_t countAndFlagsBits = 0x6C61637379617247;
  v54._object = (void *)0xE900000000000065;
  v55.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v55.value._object = (void *)0xEB00000000656C62;
  v56._uint64_t countAndFlagsBits = 0;
  v56._object = (void *)0xE000000000000000;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v54, v55, paperKitBundle, v56, v129)._object;
  uint64_t v97 = MEMORY[0x21054D080](0xD00000000000001FLL, 0x800000020C85C8E0);
  uint64_t v126 = 1;
  char v127 = 0;
  TaggedValue_1.init(_:)();
  v106(v25, 0, 1, v7);
  uint64_t v57 = v105;
  uint64_t v58 = v105 + v112[12];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v121, v105, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v25, v58, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  uint64_t v59 = v113;
  if (v113(v57, 1, v7) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    if (v59(v58, 1, v7) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  uint64_t v60 = v95;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v57, v95, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  if (v59(v58, 1, v7) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v60, v7);
LABEL_15:
    outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
    goto LABEL_17;
  }
  uint64_t v61 = v114;
  uint64_t v62 = v60;
  Swift::String_optional v63 = v96;
  (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v96, v58, v7);
  lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>();
  dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v64 = *(void (**)(char *, uint64_t))(v61 + 8);
  v64(v63, v7);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v64((char *)v62, v7);
  outlined destroy of StocksKitCurrencyCache.Provider?(v105, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
LABEL_17:
  uint64_t v65 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v67 = v122;
  uint64_t v66 = v123;
  v110(v122, v125, v123);
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = v65;
  v109(v68 + v117, v67, v66);
  *(void *)(v120 + 40) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  v130._uint64_t countAndFlagsBits = 0xD000000000000041;
  v130._object = (void *)0x800000020C85C900;
  v69._uint64_t countAndFlagsBits = 0x2026206B63616C42;
  v69._object = (void *)0xED00006574696857;
  v70.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v70.value._object = (void *)0xEB00000000656C62;
  v71._uint64_t countAndFlagsBits = 0;
  v71._object = (void *)0xE000000000000000;
  Swift::String v72 = NSLocalizedString(_:tableName:bundle:value:comment:)(v69, v70, paperKitBundle, v71, v130);
  uint64_t v105 = v72._countAndFlagsBits;
  uint64_t v104 = (uint64_t)v72._object;
  object = (void *)MEMORY[0x21054D080](0xD000000000000023, 0x800000020C85C950);
  uint64_t v126 = 2;
  char v127 = 0;
  uint64_t v73 = (uint64_t)v99;
  TaggedValue_1.init(_:)();
  v106((char *)v73, 0, 1, v7);
  uint64_t v74 = v101;
  uint64_t v75 = v101 + v112[12];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v121, v101, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v73, v75, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  if (v59(v74, 1, v7) != 1)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v74, v100, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    if (v59(v75, 1, v7) != 1)
    {
      uint64_t v76 = v114;
      id v77 = v96;
      (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v96, v75, v7);
      lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>();
      uint64_t v78 = v100;
      dispatch thunk of static Equatable.== infix(_:_:)();
      Swift::String v79 = *(void (**)(char *, uint64_t))(v76 + 8);
      v79(v77, v7);
      outlined destroy of StocksKitCurrencyCache.Provider?(v73, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      v79((char *)v78, v7);
      outlined destroy of StocksKitCurrencyCache.Provider?(v74, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      goto LABEL_24;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v73, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v100, v7);
    goto LABEL_22;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v73, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  if (v59(v75, 1, v7) != 1)
  {
LABEL_22:
    outlined destroy of StocksKitCurrencyCache.Provider?(v74, &demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
    goto LABEL_24;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v74, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
LABEL_24:
  uint64_t v80 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v81 = v122;
  uint64_t v82 = v123;
  uint64_t v83 = v110;
  v110(v122, v125, v123);
  uint64_t v84 = swift_allocObject();
  *(void *)(v84 + 16) = v80;
  Swift::String v85 = v109;
  v109(v84 + v117, v81, v82);
  uint64_t v86 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  uint64_t v87 = v120;
  *(void *)(v120 + 48) = v86;
  v131._uint64_t countAndFlagsBits = 0xD000000000000039;
  v131._object = (void *)0x800000020C85C980;
  v88._uint64_t countAndFlagsBits = 0x6F746F6850;
  v88._object = (void *)0xE500000000000000;
  v89.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v89.value._object = (void *)0xEB00000000656C62;
  v90._uint64_t countAndFlagsBits = 0;
  v90._object = (void *)0xE000000000000000;
  Swift::String v91 = NSLocalizedString(_:tableName:bundle:value:comment:)(v88, v89, paperKitBundle, v90, v131);
  uint64_t v114 = v91._countAndFlagsBits;
  id v112 = (int *)v91._object;
  uint64_t v108 = MEMORY[0x21054D080](0xD00000000000001BLL, 0x800000020C85C9C0);
  ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v113)(v121, 1, v7);
  uint64_t v92 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v83(v81, v125, v82);
  uint64_t v93 = swift_allocObject();
  *(void *)(v93 + 16) = v92;
  v85(v93 + v117, v81, v82);
  *(void *)(v87 + 56) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  uint64_t v126 = v87;
  specialized Array._endMutation()();
  v103(v126);
  return swift_bridgeObjectRelease();
}

void closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x210550400](a2 + 16);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    v13[7] = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
    WeakRef.id.getter();
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    WeakTagged_3.init(_:id:)();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    uint64_t v12 = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 0, 1, v11);
    MEMORY[0x270FA5388](v12);
    *(void *)&v13[-32] = v10;
    v13[-24] = 0;
    *(void *)&v13[-16] = a3;
    specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(0, 0, (uint64_t)v8, (void (*)(uint64_t *__return_ptr, uint64_t))closure #1 in PaperDocumentView.apply(filter:to:)partial apply);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
}

void closure #2 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x210550400](a2 + 16);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    v13[7] = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
    WeakRef.id.getter();
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    WeakTagged_3.init(_:id:)();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    uint64_t v12 = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 0, 1, v11);
    MEMORY[0x270FA5388](v12);
    *(void *)&v13[-32] = v10;
    v13[-24] = 1;
    *(void *)&v13[-16] = a3;
    specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(0, 0, (uint64_t)v8, (void (*)(uint64_t *__return_ptr, uint64_t))closure #1 in PaperDocumentView.apply(filter:to:)partial apply);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
}

void closure #3 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x210550400](a2 + 16);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    v13[7] = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
    WeakRef.id.getter();
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    WeakTagged_3.init(_:id:)();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    uint64_t v12 = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 0, 1, v11);
    MEMORY[0x270FA5388](v12);
    *(void *)&v13[-32] = v10;
    v13[-24] = 2;
    *(void *)&v13[-16] = a3;
    specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(0, 0, (uint64_t)v8, (void (*)(uint64_t *__return_ptr, uint64_t))closure #1 in PaperDocumentView.apply(filter:to:)partial apply);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
}

void closure #4 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x210550400](a2 + 16);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    v13[7] = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
    WeakRef.id.getter();
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    WeakTagged_3.init(_:id:)();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    uint64_t v12 = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 0, 1, v11);
    MEMORY[0x270FA5388](v12);
    *(void *)&v13[-32] = v10;
    v13[-24] = 4;
    *(void *)&v13[-16] = a3;
    specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(0, 0, (uint64_t)v8, (void (*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in PaperDocumentView.apply(filter:to:));
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
}

uint64_t closure #1 in PaperDocumentView.apply(contentsBoundsQuad:to:)()
{
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in PaperDocumentView.apply(contentsBoundsQuad:to:)@<X0>(_OWORD *a1@<X2>, BOOL *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v20 - v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  uint64_t v11 = (uint64_t (*)(unsigned char *, void))WeakRef.subscript.modify();
  uint64_t v13 = v12;
  uint64_t v14 = type metadata accessor for Image();
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14);
  if (!v15)
  {
    long long v16 = a1[1];
    v20[0] = *a1;
    v20[1] = v16;
    long long v17 = a1[3];
    v20[2] = a1[2];
    v20[3] = v17;
    type metadata accessor for CGRect(0);
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
    uint64_t v22 = v2;
    lazy protocol witness table accessor for type Quad and conformance Quad();
    TaggedValue_2.init(_:)();
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v10, 0, 1, v18);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  }
  uint64_t result = v11(v21, 0);
  *a2 = v15 != 0;
  return result;
}

uint64_t PaperDocumentView.cropPageAction(for:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t)a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v11, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v12 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v4, 1, v12))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v7, 1, 1, v13);
LABEL_4:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 1, 1, v16);
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for WeakRef<Image>?);
    return 0;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v4[*(int *)(v12 + 20)], (uint64_t)v7, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v7, 1, v14) == 1) {
    goto LABEL_4;
  }
  WeakTagged_3.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v14);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v10, 1, v18) == 1) {
    goto LABEL_5;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for WeakRef<Image>?);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v28._uint64_t countAndFlagsBits = 0xD000000000000079;
  v28._object = (void *)0x800000020C85C6F0;
  v19._uint64_t countAndFlagsBits = 0x67615020706F7243;
  v19._object = (void *)0xE900000000000065;
  v20.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v20.value._object = (void *)0xEB00000000656C62;
  v21._uint64_t countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, paperKitBundle, v21, v28);
  uint64_t v22 = (void *)MEMORY[0x21054D080](1886351971, 0xE400000000000000);
  id v23 = objc_msgSend(self, sel_systemImageNamed_, v22);

  MEMORY[0x21054D080](0xD000000000000013, 0x800000020C85C770);
  uint64_t v24 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v24;
  *(void *)(v25 + 24) = a1;
  id v26 = a1;
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
}

uint64_t closure #1 in PaperDocumentView.cropPageAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v80 = (uint64_t)v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v7 - 8);
  id v77 = (char *)v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v82 = (char *)v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for CRAssetOrData();
  uint64_t v84 = *(void *)(v81 - 8);
  uint64_t v11 = *(void *)(v84 + 64);
  MEMORY[0x270FA5388](v81);
  uint64_t v78 = (uint64_t)v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v83 = (uint64_t)v75 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x270FA5388](v14 - 8);
  *(void *)&long long v88 = (char *)v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  *(void *)&long long v87 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v89 = type metadata accessor for Image();
  *(void *)&long long v86 = *(void *)(v89 - 8);
  MEMORY[0x270FA5388](v89);
  uint64_t v85 = (uint64_t)v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = (char *)v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x270FA5388](v26 - 8);
  Swift::String v28 = (char *)v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  uint64_t v91 = *(void *)(v29 - 8);
  uint64_t v30 = *(void *)(v91 + 64);
  MEMORY[0x270FA5388](v29);
  Swift::String v79 = (char *)v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  Swift::String v90 = (char *)v75 - v32;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](a2 + 16);
  if (result)
  {
    Swift::String v34 = (char *)result;
    uint64_t v35 = a3 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
    swift_beginAccess();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v35, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    uint64_t v36 = type metadata accessor for PageId(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v22, 1, v36))
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v25, 1, 1, v37);
LABEL_5:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56))(v28, 1, 1, v29);
LABEL_6:

      uint64_t v40 = &demangling cache variable for type metadata for WeakRef<Image>?;
      uint64_t v41 = (uint64_t)v28;
      return outlined destroy of StocksKitCurrencyCache.Provider?(v41, v40);
    }
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v22[*(int *)(v36 + 20)], (uint64_t)v25, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v25, 1, v38) == 1) {
      goto LABEL_5;
    }
    WeakTagged_3.tagged2.getter();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v38);
    uint64_t v42 = v91;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v28, 1, v29) == 1) {
      goto LABEL_6;
    }
    uint64_t v43 = *(void (**)(unint64_t, char *, void))(v42 + 32);
    v75[1] = v42 + 32;
    uint64_t v76 = v43;
    v43((unint64_t)v90, v28, v29);
    uint64_t v44 = &v34[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
    swift_beginAccess();
    uint64_t v45 = v87;
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v18, v44, v16);
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    uint64_t v46 = v88;
    uint64_t v47 = v89;
    Capsule.subscript.getter();
    uint64_t v48 = v18;
    uint64_t v49 = v46;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v16);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v46, 1, v47) == 1)
    {
      (*(void (**)(char *, uint64_t))(v91 + 8))(v90, v29);

      uint64_t v40 = &demangling cache variable for type metadata for Image?;
      uint64_t v41 = v46;
      return outlined destroy of StocksKitCurrencyCache.Provider?(v41, v40);
    }
    uint64_t v50 = v90;
    uint64_t v51 = v29;
    uint64_t v52 = v49;
    uint64_t v53 = v85;
    outlined init with take of Image(v52, v85, (uint64_t (*)(void))type metadata accessor for Image);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
    uint64_t v54 = (uint64_t)v82;
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v54, 1, v81) == 1)
    {

      _s8PaperKit0A8DocumentVWOhTm_0(v53, (uint64_t (*)(void))type metadata accessor for Image);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v50, v51);
      uint64_t v40 = &demangling cache variable for type metadata for CRAssetOrData?;
      uint64_t v41 = v54;
      return outlined destroy of StocksKitCurrencyCache.Provider?(v41, v40);
    }
    outlined init with take of Image(v54, v83, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    uint64_t v55 = (uint64_t)v77;
    CRRegister.wrappedValue.getter();
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    uint64_t v57 = *(void *)(v56 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v55, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      long long v58 = 0uLL;
      char v59 = 1;
      long long v60 = 0uLL;
      long long v61 = 0uLL;
      long long v62 = 0uLL;
    }
    else
    {
      TaggedValue_2.tagged2.getter();
      long long v89 = v92;
      long long v88 = v93;
      long long v87 = v94;
      long long v86 = v95;
      char v59 = v96;
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v55, v56);
      long long v62 = v86;
      long long v61 = v87;
      long long v60 = v88;
      long long v58 = v89;
    }
    long long v92 = v58;
    long long v93 = v60;
    long long v94 = v61;
    long long v95 = v62;
    char v96 = v59;
    uint64_t v63 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v80, 1, 1, v63);
    uint64_t v64 = v51;
    v75[0] = v51;
    uint64_t v65 = v78;
    _s8PaperKit13CRAssetOrDataOWOcTm_0(v83, v78, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    uint64_t v66 = v91;
    (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v79, v90, v64);
    type metadata accessor for MainActor();
    uint64_t v67 = v34;
    uint64_t v68 = static MainActor.shared.getter();
    unint64_t v69 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    unint64_t v70 = (v69 + v11 + 79) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v71 = (*(unsigned __int8 *)(v66 + 80) + v70 + 8) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
    uint64_t v72 = swift_allocObject();
    uint64_t v73 = MEMORY[0x263F8F500];
    *(void *)(v72 + 16) = v68;
    *(void *)(v72 + 24) = v73;
    outlined init with take of Image(v65, v72 + v69, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v92, v72 + ((v69 + v11 + 7) & 0xFFFFFFFFFFFFFFF8), &demangling cache variable for type metadata for Quad?);
    *(void *)(v72 + v70) = v67;
    uint64_t v74 = v75[0];
    v76(v72 + v71, v79, v75[0]);
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v80, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:), v72);
    swift_release();

    _s8PaperKit0A8DocumentVWOhTm_0(v83, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    _s8PaperKit0A8DocumentVWOhTm_0(v85, (uint64_t (*)(void))type metadata accessor for Image);
    return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v90, v74);
  }
  return result;
}

uint64_t closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[21] = a6;
  v7[22] = a7;
  v7[20] = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  v7[23] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[24] = v9;
  v7[25] = *(void *)(v9 + 64);
  v7[26] = swift_task_alloc();
  v7[27] = type metadata accessor for MainActor();
  v7[28] = static MainActor.shared.getter();
  uint64_t v10 = (void *)swift_task_alloc();
  v7[29] = v10;
  *uint64_t v10 = v7;
  v10[1] = closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:);
  return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(0x7FFFFFFFFFFFFFFFLL, 1, 0);
}

uint64_t closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:), v3, v2);
}

id closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)()
{
  uint64_t v1 = *(void *)(v0 + 240);
  swift_release();
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 160);
    uint64_t v21 = *(void **)(v0 + 240);
    id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_, v21);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v2, v0 + 16, &demangling cache variable for type metadata for Quad?);
    if (*(unsigned char *)(v0 + 80))
    {
      uint64_t v3 = 0;
    }
    else
    {
      id result = objc_msgSend(objc_allocWithZone(MEMORY[0x263F3AA20]), sel_initWithBottomLeft_bottomRight_topLeft_topRight_, *(double *)(v0 + 48), *(double *)(v0 + 56), *(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40));
      uint64_t v3 = result;
      if (!result) {
        goto LABEL_16;
      }
    }
    uint64_t v5 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(v0 + 192);
    uint64_t v8 = *(void *)(v0 + 176);
    uint64_t v9 = swift_allocObject();
    swift_unknownObjectWeakInit();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v9;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v11 + v10, v5, v7);
    id v12 = objc_allocWithZone(MEMORY[0x263F3AA28]);
    *(void *)(v0 + 120) = partial apply for closure #1 in closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:);
    *(void *)(v0 + 128) = v11;
    *(void *)(v0 + 88) = MEMORY[0x263EF8330];
    *(void *)(v0 + 96) = 1107296256;
    *(void *)(v0 + 104) = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed UIImage?, @guaranteed ICDocCamImageQuad?, @unowned Bool) -> ();
    *(void *)(v0 + 112) = &block_descriptor_52;
    uint64_t v13 = _Block_copy((const void *)(v0 + 88));
    swift_retain();
    swift_release();
    id v14 = objc_msgSend(v12, sel_initWithImage_quad_scanDataDelegate_orientation_completionHandler_, v22, v3, 0, 0, v13);

    _Block_release(v13);
    id result = (id)swift_release();
    if (v14)
    {
      uint64_t v15 = *(void *)(v0 + 168);
      objc_msgSend(v14, sel_setShowImageAsAspectFit_, 1);
      uint64_t v16 = v15 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
      swift_beginAccess();
      id v17 = (id)MEMORY[0x210550400](v16);
      if (v17
        || (id v19 = objc_msgSend(*(id *)(v0 + 168), sel_window)) != 0
        && (uint64_t v20 = v19,
            id v17 = objc_msgSend(v19, sel_rootViewController),
            v20,
            v17))
      {
        objc_msgSend(v17, sel_presentViewController_animated_completion_, v14, 1, 0);
      }
      *(void *)(*(void *)(v0 + 168) + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_quadEditorController) = v14;

      swift_unknownObjectRelease();
      goto LABEL_9;
    }
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
LABEL_9:
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return (id)v18();
}

void closure #1 in closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v10 - 8);
  id v12 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v13 = MEMORY[0x210550400](a5 + 16);
  if (v13)
  {
    id v14 = (char *)v13;
    if (a3)
    {
      id v15 = a3;
      objc_msgSend(v15, sel_topLeft);
      uint64_t v17 = v16;
      uint64_t v19 = v18;
      objc_msgSend(v15, sel_topRight);
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      objc_msgSend(v15, sel_bottomLeft);
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      objc_msgSend(v15, sel_bottomRight);
      v35[0] = v17;
      v35[1] = v19;
      void v35[2] = v21;
      v35[3] = v23;
      v35[4] = v25;
      v35[5] = v27;
      v35[6] = v28;
      v35[7] = v29;
      v34[7] = 1;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
      WeakRef.id.getter();
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      WeakTagged_3.init(_:id:)();
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      uint64_t v31 = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v12, 0, 1, v30);
      MEMORY[0x270FA5388](v31);
      *(void *)&v34[-32] = v14;
      *(void *)&v34[-24] = a6;
      *(void *)&v34[-16] = v35;
      specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v12, (void (*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in PaperDocumentView.apply(contentsBoundsQuad:to:));
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    }
    uint64_t v32 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_quadEditorController;
    if (*(void *)&v14[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_quadEditorController])
    {
      swift_unknownObjectRetain();
      self;
      Swift::String_optional v33 = (void *)swift_dynamicCastObjCClass();
      if (v33) {
        objc_msgSend(v33, sel_dismissViewControllerAnimated_completion_, 1, 0);
      }
      swift_unknownObjectRelease();
    }
    *(void *)&v14[v32] = 0;
    swift_unknownObjectRelease();
  }
}

uint64_t PaperDocumentView.canvas(_:shouldOpenLink:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  swift_beginAccess();
  if (MEMORY[0x210550400](v4))
  {
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48))(v2, a2, ObjectType, v5);
    swift_unknownObjectRelease();
  }
  else
  {
    char v7 = 1;
  }
  return v7 & 1;
}

void key path setter for PaperDocumentView.rulerHostView : PaperDocumentView(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x210550400](v3);
  swift_unknownObjectWeakAssign();
  id v5 = v2;
  PaperDocumentView.rulerHostView.didset(v4);
}

void PaperDocumentView.rulerHostView.didset(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView;
  swift_beginAccess();
  id v5 = (void *)MEMORY[0x210550400](v4);
  uint64_t v6 = v5;
  if (a1)
  {
    if (v5)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      id v7 = a1;
      char v8 = static NSObject.== infix(_:_:)();

      if (v8) {
        return;
      }
    }
  }
  else
  {
    if (!v5) {
      return;
    }
  }
  uint64_t v9 = MEMORY[0x210550400](v4);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    uint64_t v11 = (objc_class *)type metadata accessor for RulerHostingDelegate();
    id v12 = objc_allocWithZone(v11);
    swift_unknownObjectWeakInit();
    v12[OBJC_IVAR____TtC8PaperKit20RulerHostingDelegate_sharedRuler] = 1;
    swift_unknownObjectWeakAssign();
    v16.receiver = v12;
    v16.super_class = v11;
    id v13 = objc_msgSendSuper2(&v16, sel_init);
    id v14 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate);
    *(void *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate) = v13;
  }
  else
  {
    id v14 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate);
    *(void *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate) = 0;
  }

  id v15 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v15) {
    objc_msgSend(v15, sel_setRulerHostingDelegate_, *(void *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate));
  }
  else {
    __break(1u);
  }
}

uint64_t PaperDocumentView.rulerHostView.getter()
{
  return PaperDocumentView.viewControllerForPresentingUI.getter(&OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView);
}

uint64_t PaperDocumentView.viewControllerForPresentingUI.getter(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess();
  return MEMORY[0x210550400](v2);
}

void PaperDocumentView.rulerHostView.setter(void *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x210550400](v3);
  swift_unknownObjectWeakAssign();
  PaperDocumentView.rulerHostView.didset(v4);
}

void (*PaperDocumentView.rulerHostView.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x210550400](v5);
  return PaperDocumentView.rulerHostView.modify;
}

void PaperDocumentView.rulerHostView.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v5 = (void **)(*(void *)a1 + 24);
  uint64_t v4 = *v5;
  uint64_t v6 = (void *)MEMORY[0x210550400](*(void *)(*(void *)a1 + 32) + *(void *)(*(void *)a1 + 40));
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    id v7 = v4;
    PaperDocumentView.rulerHostView.didset(v6);

    uint64_t v6 = *v5;
  }
  else
  {
    PaperDocumentView.rulerHostView.didset(v6);
  }
  free(v3);
}

uint64_t key path setter for PaperDocumentView.calculateDocument : PaperDocumentView(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = swift_unknownObjectRetain();
  specialized PaperDocumentView.calculateDocument.setter(v2, v1);
  return swift_unknownObjectRelease();
}

uint64_t PaperDocumentView.calculateDocument.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t PaperDocumentView.calculateDocument.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentView.calculateDocument.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentView.calculateDocument.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperDocumentView.calculateDocument.modify;
}

void PaperDocumentView.calculateDocument.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = PaperDocumentView.currentPageCanvas.getter();
    uint64_t v4 = (void *)MEMORY[0x263F8EED0];
    if (v3)
    {
      uint64_t v5 = v3;
      uint64_t v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x2F8))();
      uint64_t v8 = v7;

      uint64_t ObjectType = swift_getObjectType();
      uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);

      if (v10)
      {
        CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
      }
    }
    uint64_t v11 = PaperDocumentView.currentPageCanvas.getter();
    if (v11)
    {
      id v12 = v11;
      (*(void (**)(void))((*v4 & *v11) + 0x770))();
    }
  }
}

void key path setter for PaperDocumentView.calculateDocumentExpressionSolvingBehavior : PaperDocumentView(char *a1, void *a2)
{
  char v2 = *a1;
  uint64_t v3 = (unsigned char *)(*a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior);
  swift_beginAccess();
  *uint64_t v3 = v2;
  uint64_t v4 = PaperDocumentView.currentPageCanvas.getter();
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x2F8))();
    uint64_t v8 = v7;

    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);

    if (v10)
    {
      CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
    }
  }
}

uint64_t PaperDocumentView.calculateDocumentExpressionSolvingBehavior.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void PaperDocumentView.calculateDocumentExpressionSolvingBehavior.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior);
  swift_beginAccess();
  *uint64_t v3 = v2;
  uint64_t v4 = PaperDocumentView.currentPageCanvas.getter();
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x2F8))();
    uint64_t v8 = v7;

    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);

    if (v10)
    {
      CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
    }
  }
}

void (*PaperDocumentView.calculateDocumentExpressionSolvingBehavior.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperDocumentView.calculateDocumentExpressionSolvingBehavior.modify;
}

void PaperDocumentView.calculateDocumentExpressionSolvingBehavior.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = PaperDocumentView.currentPageCanvas.getter();
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x2F8))();
      uint64_t v7 = v6;

      uint64_t ObjectType = swift_getObjectType();
      id v9 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);

      if (v9)
      {
        CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
      }
    }
  }
}

id PaperDocumentView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void PaperDocumentView.init(frame:)()
{
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentView(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.setter in conformance PaperDocumentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitAttachment.textualContextProvider.modify in conformance PaperDocumentView(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
  v3[5] = *v1;
  v3[6] = v5;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x210550400](v6);
  uint64_t v8 = *(void *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return SynapseLinkItem.delegate.modify;
}

uint64_t protocol witness for PaperKitAttachment.viewControllerForPresentingUI.getter in conformance PaperDocumentView()
{
  uint64_t v1 = *v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

void protocol witness for PaperKitAttachment.viewControllerForPresentingUI.setter in conformance PaperDocumentView(void *a1)
{
}

void (*protocol witness for PaperKitAttachment.viewControllerForPresentingUI.modify in conformance PaperDocumentView(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  v3[4] = *v1;
  v3[5] = v5;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  v3[3] = MEMORY[0x210550400](v6);
  return PaperDocumentView.viewControllerForPresentingUI.modify;
}

uint64_t protocol witness for LiveEditable.isCurrentlyLiveEditing.getter in conformance PaperDocumentView()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isCurrentlyLiveEditing);
}

uint64_t (*protocol witness for LiveEditable.liveEditingContinuations.modify in conformance PaperDocumentView())()
{
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.getter in conformance PaperDocumentView(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger);
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperDocumentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperDocumentView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, (void (*)(uint64_t))PaperDocumentView.liveStreamMessenger.didset);
}

void (*protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance PaperDocumentView(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger;
  v3[5] = *v1;
  v3[6] = v5;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x210550400](v6);
  uint64_t v8 = *(void *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance PaperDocumentView;
}

void protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance PaperDocumentView(uint64_t a1, char a2)
{
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.getter in conformance PaperDocumentView(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource);
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.setter in conformance PaperDocumentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperDocumentView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, (void (*)(uint64_t))PaperDocumentView.participantDetailsDataSource.didset);
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperDocumentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t))
{
  uint64_t v9 = *v6 + *a5;
  swift_beginAccess();
  *(void *)(v9 + 8) = a2;
  uint64_t v10 = swift_unknownObjectWeakAssign();
  a6(v10);
  return swift_unknownObjectRelease();
}

void (*protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperDocumentView(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource;
  v3[5] = *v1;
  v3[6] = v5;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x210550400](v6);
  uint64_t v8 = *(void *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperDocumentView;
}

void protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperDocumentView(uint64_t a1, char a2)
{
}

void protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance PaperDocumentView(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    uint64_t v6 = swift_unknownObjectRelease();
    a3(v6);
  }
  free(v5);
}

void protocol witness for PaperKitStreamableAttachment.participantDetailsDidChange() in conformance PaperDocumentView()
{
}

uint64_t protocol witness for PaperKitStreamableAttachment.showParticipantCursors.getter in conformance PaperDocumentView()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

void protocol witness for PaperKitStreamableAttachment.showParticipantCursors.setter in conformance PaperDocumentView(char a1)
{
  uint64_t v3 = (unsigned char *)(*v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors);
  swift_beginAccess();
  *uint64_t v3 = a1;
  PaperDocumentView.showParticipantCursors.didset();
}

void (*protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance PaperDocumentView(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = *v1;
  swift_beginAccess();
  return protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance PaperDocumentView;
}

void protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance PaperDocumentView(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    PaperDocumentView.showParticipantCursors.didset();
  }
}

uint64_t sub_20C68DAE4()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t closure #2 in PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(unsigned char *)(v7 + 80) = a7;
  *(void *)(v7 + 56) = a5;
  *(void *)(v7 + 64) = a6;
  *(void *)(v7 + 40) = a1;
  *(void *)(v7 + 48) = a4;
  type metadata accessor for MainActor();
  *(void *)(v7 + 72) = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #2 in PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:), v9, v8);
}

uint64_t closure #2 in PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_release();
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    goto LABEL_15;
  }
  uint64_t v4 = (void *)v2;
  uint64_t v5 = *(unsigned __int8 *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  id v8 = *(id *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument);
  uint64_t v9 = (void *)MEMORY[0x21054D080](v7, v6);
  id v10 = objc_msgSend(v8, sel_findString_withOptions_, v9, v5);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PDFSelection);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_4;
    }
LABEL_14:

    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v12) {
    goto LABEL_14;
  }
LABEL_4:
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
  if (v12 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v21 = v4;
  uint64_t v14 = 0;
  do
  {
    if ((v11 & 0xC000000000000001) != 0) {
      id v15 = (id)MEMORY[0x21054E050](v14, v11);
    }
    else {
      id v15 = *(id *)(v11 + 8 * v14 + 32);
    }
    id v16 = v15;
    unint64_t v18 = *(void *)(v3 + 16);
    unint64_t v17 = *(void *)(v3 + 24);
    if (v18 >= v17 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
    }
    *(void *)(v3 + 16) = v18 + 1;
    uint64_t v19 = v3 + 48 * v18;
    *(void *)(v19 + 32) = v16;
    ++v14;
    *(_OWORD *)(v19 + 40) = 0u;
    *(_OWORD *)(v19 + 56) = 0u;
    *(unsigned char *)(v19 + 72) = 0;
  }
  while (v12 != v14);

  swift_bridgeObjectRelease();
LABEL_15:
  **(void **)(v0 + 40) = v3;
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_20C68DE1C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 57, 7);
}

uint64_t partial apply for closure #2 in PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  char v9 = *(unsigned char *)(v1 + 56);
  id v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *id v10 = v2;
  v10[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #2 in PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t protocol witness for FindResultProvider.performTextSearch(queryString:ignoreCase:wholeWords:) in conformance PaperDocumentView(uint64_t a1, uint64_t a2, char a3, char a4)
{
  char v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *char v9 = v4;
  v9[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  return PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)(a1, a2, a3, a4);
}

uint64_t closure #2 in PaperDocumentDelegate.pdfDocument(_:didReceive:for:)(uint64_t a1)
{
  uint64_t v2 = a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v2);
  if (result)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v6 = 1;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v4 + 72))(a1, &v6, ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t @objc PaperDocumentDelegate.canvasView(_:beganStroke:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = type metadata accessor for PKStroke();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = a3;
  id v12 = a4;
  id v13 = a1;
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

id PaperDocumentDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperDocumentDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.getter in conformance PaperDocumentView()
{
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.setter in conformance PaperDocumentView(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentView.calculateDocument.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperDocumentView(void *a1))(void *a1)
{
  objc_super v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentView.calculateDocument.modify((uint64_t)v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.getter in conformance PaperDocumentView@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (unsigned char *)(*v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void protocol witness for PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.setter in conformance PaperDocumentView(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = (unsigned char *)(*v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior);
  swift_beginAccess();
  *uint64_t v3 = v2;
  uint64_t v4 = PaperDocumentView.currentPageCanvas.getter();
  if (v4)
  {
    uint64_t v5 = v4;
    char v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x2F8))();
    uint64_t v8 = v7;

    uint64_t ObjectType = swift_getObjectType();
    id v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);

    if (v10)
    {
      CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
    }
  }
}

void (*protocol witness for PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.modify in conformance PaperDocumentView(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = *v1;
  swift_beginAccess();
  return PaperDocumentView.calculateDocumentExpressionSolvingBehavior.modify;
}

uint64_t specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, double a7)
{
  *(unsigned char *)(v7 + 339) = a6;
  *(unsigned char *)(v7 + 338) = a5;
  *(unsigned char *)(v7 + 337) = a4;
  *(void *)(v7 + 368) = a3;
  *(double *)(v7 + 360) = a7;
  *(void *)(v7 + 344) = a1;
  *(void *)(v7 + 352) = a2;
  return MEMORY[0x270FA2498](specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:), 0, 0);
}

{
  uint64_t v7;

  *(unsigned char *)(v7 + 339) = a6;
  *(unsigned char *)(v7 + 338) = a5;
  *(unsigned char *)(v7 + 337) = a4;
  *(void *)(v7 + 368) = a3;
  *(double *)(v7 + 360) = a7;
  *(void *)(v7 + 344) = a1;
  *(void *)(v7 + 352) = a2;
  return MEMORY[0x270FA2498](specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:), 0, 0);
}

{
  uint64_t v7;

  *(unsigned char *)(v7 + 339) = a6;
  *(unsigned char *)(v7 + 338) = a5;
  *(unsigned char *)(v7 + 337) = a4;
  *(void *)(v7 + 368) = a3;
  *(double *)(v7 + 360) = a7;
  *(void *)(v7 + 344) = a1;
  *(void *)(v7 + 352) = a2;
  return MEMORY[0x270FA2498](specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:), 0, 0);
}

uint64_t specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:)()
{
  uint64_t v30 = v0;
  uint64_t v1 = *(void *)(v0 + 344);
  CGContextSaveGState(*(CGContextRef *)(v0 + 368));
  if (v1)
  {
    char v2 = *(void **)(v0 + 344);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 352), v0 + 304, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
    if ((*(unsigned char *)(v0 + 336) & 1) == 0)
    {
      double v3 = *(double *)(v0 + 304);
      double v4 = *(double *)(v0 + 312);
      *(double *)(v0 + 376) = v3;
      *(double *)(v0 + 384) = v4;
      double v5 = *(double *)(v0 + 320);
      double v6 = *(double *)(v0 + 328);
      *(double *)(v0 + 392) = v5;
      *(double *)(v0 + 400) = v6;
      if (CGRect.isFinite.getter(v3, v4, v5, v6) && v5 > 1.0 && v6 > 1.0)
      {
        uint64_t v8 = v0 + 256;
        uint64_t v9 = *(CGContext **)(v0 + 368);
        id v10 = v2;
        v32.origin.CGFloat x = v3;
        v32.origin.CGFloat y = v4;
        v32.size.CGFloat width = v5;
        v32.size.CGFloat height = v6;
        double MinY = CGRectGetMinY(v32);
        v33.origin.CGFloat x = v3;
        v33.origin.CGFloat y = v4;
        v33.size.CGFloat width = v5;
        v33.size.CGFloat height = v6;
        CGFloat MaxY = CGRectGetMaxY(v33);
        *(void *)(v0 + 224) = 0;
        *(void *)(v0 + 208) = 0x3FF0000000000000;
        *(void *)(v0 + 216) = 0;
        *(void *)(v0 + 232) = 0x3FF0000000000000;
        *(void *)(v0 + 240) = 0;
        *(void *)(v0 + 248) = 0;
        *(void *)(v0 + 256) = 0x3FF0000000000000;
        *(void *)(v0 + 264) = 0;
        *(void *)(v0 + 272) = 0;
        *(void *)(v0 + 280) = 0xBFF0000000000000;
        *(void *)(v0 + 288) = 0;
        *(double *)(v0 + 296) = MinY + MaxY;
        CGAffineTransformConcat(&v29, (CGAffineTransform *)(v0 + 208), (CGAffineTransform *)(v0 + 256));
        long long v13 = *(_OWORD *)&v29.c;
        long long v14 = *(_OWORD *)&v29.tx;
        *(_OWORD *)(v0 + 208) = *(_OWORD *)&v29.a;
        *(_OWORD *)(v0 + 224) = v13;
        *(_OWORD *)(v0 + 240) = v14;
        CGContextConcatCTM(v9, (CGAffineTransform *)(v0 + 208));
        int Type = CGContextGetType();
        if (Type == 1)
        {
          uint64_t v16 = 0;
          BOOL v17 = 0;
        }
        else
        {
          BOOL v17 = Type != 6;
          uint64_t v16 = (Type != 6) & *(unsigned char *)(v0 + 337);
        }
        uint64_t v20 = *(unsigned __int8 *)(v0 + 338);
        id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14B40]), sel_initWithSize_scale_renderQueue_sixChannelBlending_, 0, v16, v5, v6, *(double *)(v0 + 360));
        *(void *)(v0 + 408) = v21;
        id v22 = v21;
        objc_msgSend(v22, sel_setInvertColors_, v20);
        if (v16)
        {
          uint64_t v23 = v0 + 16;
          *(void *)(v0 + 16) = v0;
          *(void *)(v0 + 56) = v8;
          *(void *)(v0 + 24) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
          uint64_t v24 = swift_continuation_init();
          *(void *)(v0 + 208) = MEMORY[0x263EF8330];
          *(void *)(v0 + 216) = 0x40000000;
          *(void *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned CGImageRef?, @unowned CGImageRef?) -> () with result type (CGImageRef?, CGImageRef?);
          *(void *)(v0 + 232) = &block_descriptor_492;
          *(void *)(v0 + 240) = v24;
          objc_msgSend(v22, sel_sixChannelCGRenderDrawing_clippedToStrokeSpaceRect_scale_completion_, v10, v0 + 208, v3, v4, v5, v6, 1.0);
        }
        else
        {
          if (!v17
            && (*(unsigned char *)(v0 + 337) & 1) != 0
            && (objc_msgSend(v22, sel_respondsToSelector_, sel_sixChannelPDFRenderDrawing_context_clippedToStrokeSpaceRect_scale_completion_) & 1) != 0)
          {
            uint64_t v25 = *(void *)(v0 + 368);
            *(void *)(v0 + 80) = v0;
            *(void *)(v0 + 88) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
            uint64_t v26 = swift_continuation_init();
            *(void *)(v0 + 208) = MEMORY[0x263EF8330];
            *(void *)(v0 + 216) = 0x40000000;
            *(void *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) () -> () with result type ();
            *(void *)(v0 + 232) = &block_descriptor_491;
            *(void *)(v0 + 240) = v26;
            objc_msgSend(v22, sel_sixChannelPDFRenderDrawing_context_clippedToStrokeSpaceRect_scale_completion_, v10, v25, v0 + 208, v3, v4, v5, v6, 1.0);
            uint64_t v27 = v0 + 80;
LABEL_21:
            return MEMORY[0x270FA23F0](v27);
          }
          uint64_t v23 = v0 + 144;
          *(void *)(v0 + 144) = v0;
          *(void *)(v0 + 184) = v8;
          *(void *)(v0 + 152) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
          uint64_t v28 = swift_continuation_init();
          *(void *)(v0 + 208) = MEMORY[0x263EF8330];
          *(void *)(v0 + 216) = 0x40000000;
          *(void *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
          *(void *)(v0 + 232) = &block_descriptor_490;
          *(void *)(v0 + 240) = v28;
          objc_msgSend(v22, sel_renderDrawing_clippedToStrokeSpaceRect_scale_completion_, v10, v0 + 208, v3, v4, v5, v6, 1.0);
        }
        uint64_t v27 = v23;
        goto LABEL_21;
      }
    }
  }
  CGContextRestoreGState(*(CGContextRef *)(v0 + 368));
  unint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

{
  uint64_t v1;

  return MEMORY[0x270FA2498](specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGContext *v7;
  CGImage *v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGContext *v13;
  CGImage *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  CGContext *v19;
  uint64_t (*v20)(void);
  long long v22;
  uint64_t v23;
  __C::CGRect v24;
  __C::CGRect v25;

  char v2 = *(void **)(v0 + 256);
  uint64_t v1 = *(void **)(v0 + 264);
  if (v1)
  {
    double v4 = *(double *)(v0 + 392);
    double v3 = *(double *)(v0 + 400);
    double v6 = *(double *)(v0 + 376);
    double v5 = *(double *)(v0 + 384);
    uint64_t v7 = *(CGContext **)(v0 + 368);
    uint64_t v8 = v1;
    CGContextSetBlendMode(v7, kCGBlendModeMultiply);
    v24.origin.CGFloat x = v6;
    v24.origin.CGFloat y = v5;
    v24.size.CGFloat width = v4;
    v24.size.CGFloat height = v3;
    CGContextRef.draw(_:in:byTiling:)(v8, v24, 0);
  }
  if (v2)
  {
    id v10 = *(double *)(v0 + 392);
    uint64_t v9 = *(double *)(v0 + 400);
    id v12 = *(double *)(v0 + 376);
    id v11 = *(double *)(v0 + 384);
    long long v13 = *(CGContext **)(v0 + 368);
    long long v14 = v2;
    CGContextSetBlendMode(v13, kCGBlendModePlusLighter);
    v25.origin.CGFloat x = v12;
    v25.origin.CGFloat y = v11;
    v25.size.CGFloat width = v10;
    v25.size.CGFloat height = v9;
    CGContextRef.draw(_:in:byTiling:)(v14, v25, 0);
  }
  if (*(unsigned char *)(v0 + 339) == 1)
  {
    uint64_t v16 = *(void *)(v0 + 392);
    uint64_t v15 = *(void *)(v0 + 400);
    id v22 = *(_OWORD *)(v0 + 376);
    CGContextSetRGBFillColor(*(CGContextRef *)(v0 + 368), 1.0, 0.0, 0.0, 0.2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    BOOL v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_20C832C20;
    *(_OWORD *)(v17 + 32) = v22;
    *(void *)(v17 + 48) = v16;
    *(void *)(v17 + 56) = v15;
    CGContextRef.fill(_:)((Swift::OpaquePointer)v17);
    swift_bridgeObjectRelease();
  }
  unint64_t v18 = *(void **)(v0 + 344);

  uint64_t v19 = *(CGContext **)(v0 + 368);
  CGContextRestoreGState(v19);
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

{
  uint64_t v1;

  return MEMORY[0x270FA2498](specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:), 0, 0);
}

{
  uint64_t v0;
  CGImage *v1;
  CGImage *v2;
  CGImage *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  CGContext *v8;
  uint64_t (*v9)(void);
  long long v11;
  uint64_t v12;

  uint64_t v1 = *(CGImage **)(v0 + 256);
  if (v1)
  {
    char v2 = (CGImage *)objc_msgSend(*(id *)(v0 + 256), sel_CGImage);
    if (v2)
    {
      double v3 = v2;
      CGContextRef.draw(_:in:byTiling:)(v2, *(__C::CGRect *)(v0 + 376), 0);

      uint64_t v1 = v3;
    }
  }
  if (*(unsigned char *)(v0 + 339) == 1)
  {
    double v5 = *(void *)(v0 + 392);
    double v4 = *(void *)(v0 + 400);
    id v11 = *(_OWORD *)(v0 + 376);
    CGContextSetRGBFillColor(*(CGContextRef *)(v0 + 368), 1.0, 0.0, 0.0, 0.2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    double v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_20C832C20;
    *(_OWORD *)(v6 + 32) = v11;
    *(void *)(v6 + 48) = v5;
    *(void *)(v6 + 56) = v4;
    CGContextRef.fill(_:)((Swift::OpaquePointer)v6);
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = *(void **)(v0 + 344);

  uint64_t v8 = *(CGContext **)(v0 + 368);
  CGContextRestoreGState(v8);
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

{
  uint64_t v1;

  return MEMORY[0x270FA2498](specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  CGContext *v5;
  uint64_t (*v6)(void);
  long long v8;
  uint64_t v9;

  if (*(unsigned char *)(v0 + 339) == 1)
  {
    char v2 = *(void *)(v0 + 392);
    uint64_t v1 = *(void *)(v0 + 400);
    uint64_t v8 = *(_OWORD *)(v0 + 376);
    CGContextSetRGBFillColor(*(CGContextRef *)(v0 + 368), 1.0, 0.0, 0.0, 0.2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    double v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_20C832C20;
    *(_OWORD *)(v3 + 32) = v8;
    *(void *)(v3 + 48) = v2;
    *(void *)(v3 + 56) = v1;
    CGContextRef.fill(_:)((Swift::OpaquePointer)v3);
    swift_bridgeObjectRelease();
  }
  double v4 = *(void **)(v0 + 344);

  double v5 = *(CGContext **)(v0 + 368);
  CGContextRestoreGState(v5);
  double v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v8;
  CGContext *v9;
  id v10;
  double MinY;
  CGFloat MaxY;
  long long v13;
  long long v14;
  int Type;
  uint64_t v16;
  BOOL v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CGAffineTransform v29;
  uint64_t v30;
  uint64_t v31;
  CGRect v32;
  CGRect v33;

  uint64_t v30 = v0;
  uint64_t v1 = *(void *)(v0 + 344);
  CGContextSaveGState(*(CGContextRef *)(v0 + 368));
  if (v1)
  {
    char v2 = *(void **)(v0 + 344);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 352), v0 + 304, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
    if ((*(unsigned char *)(v0 + 336) & 1) == 0)
    {
      double v3 = *(double *)(v0 + 304);
      double v4 = *(double *)(v0 + 312);
      *(double *)(v0 + 376) = v3;
      *(double *)(v0 + 384) = v4;
      double v5 = *(double *)(v0 + 320);
      double v6 = *(double *)(v0 + 328);
      *(double *)(v0 + 392) = v5;
      *(double *)(v0 + 400) = v6;
      if (CGRect.isFinite.getter(v3, v4, v5, v6) && v5 > 1.0 && v6 > 1.0)
      {
        uint64_t v8 = v0 + 256;
        uint64_t v9 = *(CGContext **)(v0 + 368);
        id v10 = v2;
        v32.origin.CGFloat x = v3;
        v32.origin.CGFloat y = v4;
        v32.size.CGFloat width = v5;
        v32.size.CGFloat height = v6;
        double MinY = CGRectGetMinY(v32);
        v33.origin.CGFloat x = v3;
        v33.origin.CGFloat y = v4;
        v33.size.CGFloat width = v5;
        v33.size.CGFloat height = v6;
        CGFloat MaxY = CGRectGetMaxY(v33);
        *(void *)(v0 + 224) = 0;
        *(void *)(v0 + 208) = 0x3FF0000000000000;
        *(void *)(v0 + 216) = 0;
        *(void *)(v0 + 232) = 0x3FF0000000000000;
        *(void *)(v0 + 240) = 0;
        *(void *)(v0 + 248) = 0;
        *(void *)(v0 + 256) = 0x3FF0000000000000;
        *(void *)(v0 + 264) = 0;
        *(void *)(v0 + 272) = 0;
        *(void *)(v0 + 280) = 0xBFF0000000000000;
        *(void *)(v0 + 288) = 0;
        *(double *)(v0 + 296) = MinY + MaxY;
        CGAffineTransformConcat(&v29, (CGAffineTransform *)(v0 + 208), (CGAffineTransform *)(v0 + 256));
        long long v13 = *(_OWORD *)&v29.c;
        long long v14 = *(_OWORD *)&v29.tx;
        *(_OWORD *)(v0 + 208) = *(_OWORD *)&v29.a;
        *(_OWORD *)(v0 + 224) = v13;
        *(_OWORD *)(v0 + 240) = v14;
        CGContextConcatCTM(v9, (CGAffineTransform *)(v0 + 208));
        int Type = CGContextGetType();
        if (Type == 1)
        {
          uint64_t v16 = 0;
          BOOL v17 = 0;
        }
        else
        {
          BOOL v17 = Type != 6;
          uint64_t v16 = (Type != 6) & *(unsigned char *)(v0 + 337);
        }
        uint64_t v20 = *(unsigned __int8 *)(v0 + 338);
        id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14B40]), sel_initWithSize_scale_renderQueue_sixChannelBlending_, 0, v16, v5, v6, *(double *)(v0 + 360));
        *(void *)(v0 + 408) = v21;
        id v22 = v21;
        objc_msgSend(v22, sel_setInvertColors_, v20);
        if (v16)
        {
          uint64_t v23 = v0 + 16;
          *(void *)(v0 + 16) = v0;
          *(void *)(v0 + 56) = v8;
          *(void *)(v0 + 24) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
          uint64_t v24 = swift_continuation_init();
          *(void *)(v0 + 208) = MEMORY[0x263EF8330];
          *(void *)(v0 + 216) = 0x40000000;
          *(void *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned CGImageRef?, @unowned CGImageRef?) -> () with result type (CGImageRef?, CGImageRef?);
          *(void *)(v0 + 232) = &block_descriptor_395;
          *(void *)(v0 + 240) = v24;
          objc_msgSend(v22, sel_sixChannelCGRenderDrawing_clippedToStrokeSpaceRect_scale_completion_, v10, v0 + 208, v3, v4, v5, v6, 1.0);
        }
        else
        {
          if (!v17
            && (*(unsigned char *)(v0 + 337) & 1) != 0
            && (objc_msgSend(v22, sel_respondsToSelector_, sel_sixChannelPDFRenderDrawing_context_clippedToStrokeSpaceRect_scale_completion_) & 1) != 0)
          {
            uint64_t v25 = *(void *)(v0 + 368);
            *(void *)(v0 + 80) = v0;
            *(void *)(v0 + 88) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
            uint64_t v26 = swift_continuation_init();
            *(void *)(v0 + 208) = MEMORY[0x263EF8330];
            *(void *)(v0 + 216) = 0x40000000;
            *(void *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) () -> () with result type ();
            *(void *)(v0 + 232) = &block_descriptor_394;
            *(void *)(v0 + 240) = v26;
            objc_msgSend(v22, sel_sixChannelPDFRenderDrawing_context_clippedToStrokeSpaceRect_scale_completion_, v10, v25, v0 + 208, v3, v4, v5, v6, 1.0);
            uint64_t v27 = v0 + 80;
LABEL_21:
            return MEMORY[0x270FA23F0](v27);
          }
          uint64_t v23 = v0 + 144;
          *(void *)(v0 + 144) = v0;
          *(void *)(v0 + 184) = v8;
          *(void *)(v0 + 152) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
          uint64_t v28 = swift_continuation_init();
          *(void *)(v0 + 208) = MEMORY[0x263EF8330];
          *(void *)(v0 + 216) = 0x40000000;
          *(void *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
          *(void *)(v0 + 232) = &block_descriptor_393;
          *(void *)(v0 + 240) = v28;
          objc_msgSend(v22, sel_renderDrawing_clippedToStrokeSpaceRect_scale_completion_, v10, v0 + 208, v3, v4, v5, v6, 1.0);
        }
        uint64_t v27 = v23;
        goto LABEL_21;
      }
    }
  }
  CGContextRestoreGState(*(CGContextRef *)(v0 + 368));
  unint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

{
  uint64_t v1;

  return MEMORY[0x270FA2498](specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:), 0, 0);
}

{
  uint64_t v1;

  return MEMORY[0x270FA2498](specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:), 0, 0);
}

{
  uint64_t v1;

  return MEMORY[0x270FA2498](specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v8;
  CGContext *v9;
  id v10;
  double MinY;
  CGFloat MaxY;
  long long v13;
  long long v14;
  int Type;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  uint64_t (*v19)(void);
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CGAffineTransform v30;
  uint64_t v31;
  uint64_t v32;
  CGRect v33;
  CGRect v34;

  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 344);
  CGContextSaveGState(*(CGContextRef *)(v0 + 368));
  if (v1)
  {
    char v2 = *(void **)(v0 + 344);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 352), v0 + 304, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
    if ((*(unsigned char *)(v0 + 336) & 1) == 0)
    {
      double v3 = *(double *)(v0 + 304);
      double v4 = *(double *)(v0 + 312);
      *(double *)(v0 + 376) = v3;
      *(double *)(v0 + 384) = v4;
      double v5 = *(double *)(v0 + 320);
      double v6 = *(double *)(v0 + 328);
      *(double *)(v0 + 392) = v5;
      *(double *)(v0 + 400) = v6;
      if (CGRect.isFinite.getter(v3, v4, v5, v6) && v5 > 1.0 && v6 > 1.0)
      {
        uint64_t v8 = v0 + 256;
        uint64_t v9 = *(CGContext **)(v0 + 368);
        id v10 = v2;
        v33.origin.CGFloat x = v3;
        v33.origin.CGFloat y = v4;
        v33.size.CGFloat width = v5;
        v33.size.CGFloat height = v6;
        double MinY = CGRectGetMinY(v33);
        v34.origin.CGFloat x = v3;
        v34.origin.CGFloat y = v4;
        v34.size.CGFloat width = v5;
        v34.size.CGFloat height = v6;
        CGFloat MaxY = CGRectGetMaxY(v34);
        *(void *)(v0 + 224) = 0;
        *(void *)(v0 + 208) = 0x3FF0000000000000;
        *(void *)(v0 + 216) = 0;
        *(void *)(v0 + 232) = 0x3FF0000000000000;
        *(void *)(v0 + 240) = 0;
        *(void *)(v0 + 248) = 0;
        *(void *)(v0 + 256) = 0x3FF0000000000000;
        *(void *)(v0 + 264) = 0;
        *(void *)(v0 + 272) = 0;
        *(void *)(v0 + 280) = 0xBFF0000000000000;
        *(void *)(v0 + 288) = 0;
        *(double *)(v0 + 296) = MinY + MaxY;
        CGAffineTransformConcat(&v30, (CGAffineTransform *)(v0 + 208), (CGAffineTransform *)(v0 + 256));
        long long v13 = *(_OWORD *)&v30.c;
        long long v14 = *(_OWORD *)&v30.tx;
        *(_OWORD *)(v0 + 208) = *(_OWORD *)&v30.a;
        *(_OWORD *)(v0 + 224) = v13;
        *(_OWORD *)(v0 + 240) = v14;
        CGContextConcatCTM(v9, (CGAffineTransform *)(v0 + 208));
        int Type = CGContextGetType();
        if (Type == 1)
        {
          uint64_t v16 = 0;
          BOOL v17 = 0;
          unint64_t v18 = 0;
          if (*(unsigned char *)(v0 + 337))
          {
LABEL_16:
            id v21 = *(unsigned __int8 *)(v0 + 338);
            id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14B40]), sel_initWithSize_scale_renderQueue_sixChannelBlending_, 0, v17, v5, v6, *(double *)(v0 + 360));
            *(void *)(v0 + 408) = v22;
            uint64_t v23 = v22;
            objc_msgSend(v23, sel_setInvertColors_, v21);
            if (v17)
            {
              uint64_t v24 = v0 + 16;
              *(void *)(v0 + 16) = v0;
              *(void *)(v0 + 56) = v8;
              *(void *)(v0 + 24) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
              uint64_t v25 = swift_continuation_init();
              *(void *)(v0 + 208) = MEMORY[0x263EF8330];
              *(void *)(v0 + 216) = 0x40000000;
              *(void *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned CGImageRef?, @unowned CGImageRef?) -> () with result type (CGImageRef?, CGImageRef?);
              *(void *)(v0 + 232) = &block_descriptor_14;
              *(void *)(v0 + 240) = v25;
              objc_msgSend(v23, sel_sixChannelCGRenderDrawing_clippedToStrokeSpaceRect_scale_completion_, v10, v0 + 208, v3, v4, v5, v6, 1.0);
            }
            else
            {
              if (!v18
                && (*(unsigned char *)(v0 + 337) & 1) != 0
                && objc_msgSend(v23, sel_respondsToSelector_, sel_sixChannelPDFRenderDrawing_context_clippedToStrokeSpaceRect_scale_completion_))
              {
                uint64_t v26 = *(void *)(v0 + 368);
                *(void *)(v0 + 80) = v0;
                *(void *)(v0 + 88) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
                uint64_t v27 = swift_continuation_init();
                *(void *)(v0 + 208) = MEMORY[0x263EF8330];
                *(void *)(v0 + 216) = 0x40000000;
                *(void *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) () -> () with result type ();
                *(void *)(v0 + 232) = &block_descriptor_13;
                *(void *)(v0 + 240) = v27;
                objc_msgSend(v23, sel_sixChannelPDFRenderDrawing_context_clippedToStrokeSpaceRect_scale_completion_, v10, v26, v0 + 208, v3, v4, v5, v6, 1.0);
                uint64_t v28 = v0 + 80;
LABEL_23:
                return MEMORY[0x270FA23F0](v28);
              }
              uint64_t v24 = v0 + 144;
              *(void *)(v0 + 144) = v0;
              *(void *)(v0 + 184) = v8;
              *(void *)(v0 + 152) = specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:);
              CGAffineTransform v29 = swift_continuation_init();
              *(void *)(v0 + 208) = MEMORY[0x263EF8330];
              *(void *)(v0 + 216) = 0x40000000;
              *(void *)(v0 + 224) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
              *(void *)(v0 + 232) = &block_descriptor_12;
              *(void *)(v0 + 240) = v29;
              objc_msgSend(v23, sel_renderDrawing_clippedToStrokeSpaceRect_scale_completion_, v10, v0 + 208, v3, v4, v5, v6, 1.0);
            }
            uint64_t v28 = v24;
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v16 = Type != 6;
          BOOL v17 = Type != 6;
          unint64_t v18 = Type != 6;
          if (*(unsigned char *)(v0 + 337)) {
            goto LABEL_16;
          }
        }
        BOOL v17 = 0;
        unint64_t v18 = v16;
        goto LABEL_16;
      }
    }
  }
  CGContextRestoreGState(*(CGContextRef *)(v0 + 368));
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned CGImageRef?, @unowned CGImageRef?) -> () with result type (CGImageRef?, CGImageRef?)(uint64_t a1, void *a2, void *a3)
{
  double v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 64) + 40);
  *double v4 = a2;
  v4[1] = a3;
  id v5 = a2;
  id v6 = a3;
  return swift_continuation_resume();
}

uint64_t @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) () -> () with result type ()()
{
  return swift_continuation_resume();
}

uint64_t @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v6 = a2;
  uint64_t v3 = *(void *)(*(void *)(v2 + 64) + 40);
  id v4 = a2;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v6, v3, &demangling cache variable for type metadata for UIImage?);
  return swift_continuation_resume();
}

uint64_t specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  *(void *)(v8 + 104) = a3;
  *(void *)(v8 + 112) = a4;
  *(void *)(v8 + 96) = a2;
  *(double *)(v8 + 80) = a7;
  *(double *)(v8 + 88) = a8;
  *(double *)(v8 + 64) = a5;
  *(double *)(v8 + 72) = a6;
  *(void *)(v8 + 56) = a1;
  return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v8;

  *(void *)(v8 + 104) = a3;
  *(void *)(v8 + 112) = a4;
  *(void *)(v8 + 96) = a2;
  *(double *)(v8 + 80) = a7;
  *(double *)(v8 + 88) = a8;
  *(double *)(v8 + 64) = a5;
  *(double *)(v8 + 72) = a6;
  *(void *)(v8 + 56) = a1;
  return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

uint64_t specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)()
{
  CGFloat v2 = *(double *)(v0 + 80);
  CGFloat v1 = *(double *)(v0 + 88);
  CGFloat v4 = *(double *)(v0 + 64);
  CGFloat v3 = *(double *)(v0 + 72);
  objc_msgSend(*(id *)(v0 + 56), sel_bounds);
  CGFloat x = v29.origin.x;
  CGFloat y = v29.origin.y;
  CGFloat width = v29.size.width;
  CGFloat height = v29.size.height;
  v34.origin.CGFloat x = v4;
  v34.origin.CGFloat y = v3;
  v34.size.CGFloat width = v2;
  v34.size.CGFloat height = v1;
  CGRect v30 = CGRectIntersection(v29, v34);
  CGFloat v9 = v30.origin.x;
  CGFloat v10 = v30.origin.y;
  CGFloat v11 = v30.size.width;
  CGFloat v12 = v30.size.height;
  if (CGRectIsEmpty(v30))
  {
    long long v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    uint64_t v15 = *(char **)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 56);
    v31.origin.CGFloat x = x;
    v31.origin.CGFloat y = y;
    v31.size.CGFloat width = width;
    v31.size.CGFloat height = height;
    CGRect v32 = CGContextConvertRectToDeviceSpace((CGContextRef)*(void *)(v0 + 96), v31);
    double v26 = CGRectGetWidth(v32);
    v33.origin.CGFloat x = x;
    v33.origin.CGFloat y = y;
    v33.size.CGFloat width = width;
    v33.size.CGFloat height = height;
    double v17 = CGRectGetWidth(v33);
    int Type = CGContextGetType();
    BOOL v19 = Type == 6 || Type == 1;
    double v20 = 1.0;
    if (v19) {
      double v20 = 2.0;
    }
    double v21 = v26 / v17 * v20;
    *(CGFloat *)(v0 + 16) = v9;
    *(CGFloat *)(v0 + 24) = v10;
    *(CGFloat *)(v0 + 32) = v11;
    *(CGFloat *)(v0 + 40) = v12;
    *(unsigned char *)(v0 + 48) = 0;
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, char, double))((char *)&async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:)
                                                                                      + async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:));
    char v22 = *v15;
    char v23 = v15[1];
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v24;
    *uint64_t v24 = v0;
    v24[1] = specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    uint64_t v25 = *(void *)(v0 + 96);
    return v27(v16, v0 + 16, v25, v22, v23, 0, v21);
  }
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  CGFloat v3 = *v0;
  swift_task_dealloc();
  CGFloat v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  uint64_t (*v13)(void);
  char *v15;
  uint64_t v16;
  double v17;
  int Type;
  BOOL v19;
  double v20;
  double v21;
  char v22;
  char v23;
  void *v24;
  uint64_t v25;
  double v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, char, char, char, double);
  uint64_t v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;

  CGFloat v2 = *(double *)(v0 + 80);
  CGFloat v1 = *(double *)(v0 + 88);
  CGFloat v4 = *(double *)(v0 + 64);
  CGFloat v3 = *(double *)(v0 + 72);
  objc_msgSend(*(id *)(v0 + 56), sel_bounds);
  CGFloat x = v29.origin.x;
  CGFloat y = v29.origin.y;
  CGFloat width = v29.size.width;
  CGFloat height = v29.size.height;
  v34.origin.CGFloat x = v4;
  v34.origin.CGFloat y = v3;
  v34.size.CGFloat width = v2;
  v34.size.CGFloat height = v1;
  CGRect v30 = CGRectIntersection(v29, v34);
  CGFloat v9 = v30.origin.x;
  CGFloat v10 = v30.origin.y;
  CGFloat v11 = v30.size.width;
  CGFloat v12 = v30.size.height;
  if (CGRectIsEmpty(v30))
  {
    long long v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    uint64_t v15 = *(char **)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 56);
    v31.origin.CGFloat x = x;
    v31.origin.CGFloat y = y;
    v31.size.CGFloat width = width;
    v31.size.CGFloat height = height;
    CGRect v32 = CGContextConvertRectToDeviceSpace((CGContextRef)*(void *)(v0 + 96), v31);
    double v26 = CGRectGetWidth(v32);
    v33.origin.CGFloat x = x;
    v33.origin.CGFloat y = y;
    v33.size.CGFloat width = width;
    v33.size.CGFloat height = height;
    double v17 = CGRectGetWidth(v33);
    int Type = CGContextGetType();
    BOOL v19 = Type == 6 || Type == 1;
    double v20 = 1.0;
    if (v19) {
      double v20 = 2.0;
    }
    double v21 = v26 / v17 * v20;
    *(CGFloat *)(v0 + 16) = v9;
    *(CGFloat *)(v0 + 24) = v10;
    *(CGFloat *)(v0 + 32) = v11;
    *(CGFloat *)(v0 + 40) = v12;
    *(unsigned char *)(v0 + 48) = 0;
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, char, double))((char *)&async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:)
                                                                                      + async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:));
    char v22 = *v15;
    char v23 = v15[1];
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v24;
    *uint64_t v24 = v0;
    v24[1] = specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    uint64_t v25 = *(void *)(v0 + 96);
    return v27(v16, v0 + 16, v25, v22, v23, 0, v21);
  }
}

{
  uint64_t v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  uint64_t (*v13)(void);
  char *v15;
  uint64_t v16;
  double v17;
  int Type;
  BOOL v19;
  double v20;
  double v21;
  char v22;
  char v23;
  void *v24;
  uint64_t v25;
  double v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, char, char, char, double);
  uint64_t v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;

  CGFloat v2 = *(double *)(v0 + 80);
  CGFloat v1 = *(double *)(v0 + 88);
  CGFloat v4 = *(double *)(v0 + 64);
  CGFloat v3 = *(double *)(v0 + 72);
  objc_msgSend(*(id *)(v0 + 56), sel_bounds);
  CGFloat x = v29.origin.x;
  CGFloat y = v29.origin.y;
  CGFloat width = v29.size.width;
  CGFloat height = v29.size.height;
  v34.origin.CGFloat x = v4;
  v34.origin.CGFloat y = v3;
  v34.size.CGFloat width = v2;
  v34.size.CGFloat height = v1;
  CGRect v30 = CGRectIntersection(v29, v34);
  CGFloat v9 = v30.origin.x;
  CGFloat v10 = v30.origin.y;
  CGFloat v11 = v30.size.width;
  CGFloat v12 = v30.size.height;
  if (CGRectIsEmpty(v30))
  {
    long long v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    uint64_t v15 = *(char **)(v0 + 104);
    uint64_t v16 = *(void *)(v0 + 56);
    v31.origin.CGFloat x = x;
    v31.origin.CGFloat y = y;
    v31.size.CGFloat width = width;
    v31.size.CGFloat height = height;
    CGRect v32 = CGContextConvertRectToDeviceSpace((CGContextRef)*(void *)(v0 + 96), v31);
    double v26 = CGRectGetWidth(v32);
    v33.origin.CGFloat x = x;
    v33.origin.CGFloat y = y;
    v33.size.CGFloat width = width;
    v33.size.CGFloat height = height;
    double v17 = CGRectGetWidth(v33);
    int Type = CGContextGetType();
    BOOL v19 = Type == 6 || Type == 1;
    double v20 = 1.0;
    if (v19) {
      double v20 = 2.0;
    }
    double v21 = v26 / v17 * v20;
    *(CGFloat *)(v0 + 16) = v9;
    *(CGFloat *)(v0 + 24) = v10;
    *(CGFloat *)(v0 + 32) = v11;
    *(CGFloat *)(v0 + 40) = v12;
    *(unsigned char *)(v0 + 48) = 0;
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, char, double))((char *)&async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:)
                                                                                      + async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:));
    char v22 = *v15;
    char v23 = v15[1];
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v24;
    *uint64_t v24 = v0;
    v24[1] = specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    uint64_t v25 = *(void *)(v0 + 96);
    return v27(v16, v0 + 16, v25, v22, v23, 0, v21);
  }
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  CGFloat v3 = *v0;
  swift_task_dealloc();
  CGFloat v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void specialized Shape.renderSync<A>(in:id:capsule:options:)(CGContext *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v175 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v8 - 8);
  UIImage_optional v174 = (char *)&v169 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  Swift::String v176 = (char *)&v169 - v11;
  uint64_t v181 = type metadata accessor for CGPathFillRule();
  uint64_t v180 = *(void *)(v181 - 8);
  MEMORY[0x270FA5388](v181);
  Swift::String v179 = (char *)&v169 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&long long v13 = COERCE_DOUBLE(type metadata accessor for Shape());
  MEMORY[0x270FA5388](v13);
  uint64_t v177 = (uint64_t)&v169 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  *(void *)&double v178 = (char *)&v169 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v183 = (uint64_t)&v169 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v182 = (uint64_t)&v169 - v20;
  MEMORY[0x270FA5388](v21);
  char v23 = (char *)&v169 - v22;
  MEMORY[0x270FA5388](v24);
  double v26 = (char *)&v169 - v25;
  MEMORY[0x270FA5388](v27);
  CGRect v29 = (char *)&v169 - v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double a = t1.a;
  double b = t1.b;
  double c = t1.c;
  double d = t1.d;
  uint64_t v191 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  CGFloat v35 = t1.a;
  CGFloat v190 = a - c * 0.0;
  CGFloat v189 = b - d * 0.0;
  v200.origin.CGFloat x = a;
  v200.origin.CGFloat y = b;
  v200.size.CGFloat width = c;
  CGFloat v187 = c;
  v200.size.CGFloat height = d;
  double v188 = d;
  double MidX = CGRectGetMidX(v200);
  v201.origin.CGFloat x = a;
  v201.origin.CGFloat y = b;
  v201.size.CGFloat width = c;
  v201.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v201);
  CGAffineTransformMakeRotation(&t1, v35);
  long long v186 = *(_OWORD *)&t1.a;
  long long v185 = *(_OWORD *)&t1.c;
  CGFloat v38 = -MidY;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v38);
  CGFloat v41 = t1.a;
  CGFloat v42 = t1.b;
  CGFloat v43 = t1.c;
  CGFloat v44 = t1.d;
  CGFloat v45 = t1.tx;
  CGFloat v46 = t1.ty;
  *(_OWORD *)&t2.double a = v186;
  *(_OWORD *)&t2.double c = v185;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v197, &t1, &t2);
  long long v186 = *(_OWORD *)&v197.a;
  long long v185 = *(_OWORD *)&v197.c;
  CGFloat v47 = v197.tx;
  CGFloat v48 = v197.ty;
  t1.double a = v41;
  t1.double b = v42;
  t1.double c = v43;
  t1.double d = v44;
  t1.tCGFloat x = v45;
  t1.tCGFloat y = v46;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.double a = v186;
  *(_OWORD *)&t1.double c = v185;
  t1.tCGFloat x = v47;
  t1.tCGFloat y = v48;
  CGAffineTransformConcat(&v197, &t1, &t2);
  t1.double a = v187;
  t1.double c = 0.0;
  t1.double b = 0.0;
  t1.double d = v188;
  t1.tCGFloat x = v190;
  t1.tCGFloat y = v189;
  CGAffineTransform t2 = v197;
  CGAffineTransformConcat(&v197, &t1, &t2);
  CGAffineTransform t2 = v197;
  *(void *)&long long v186 = a1;
  CGContextSaveGState(a1);
  *(void *)&double v49 = v4 + v13[13];
  CGFloat v190 = COERCE_DOUBLE(type metadata accessor for ShapeSecondaryProperties());
  CGFloat v189 = v49;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  uint64_t v184 = a4;
  if ((LOBYTE(t1.a) & 0x20) != 0 && (uint64_t v50 = *(void **)(a4 + 64)) != 0)
  {
    *(void *)&long long v185 = v30;
    CGFloat v187 = *(double *)&v13;
    double v188 = COERCE_DOUBLE(v50);
    id v51 = objc_msgSend(*(id *)&v188, sel_annotations);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
    unint64_t v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    MEMORY[0x270FA5388](v53);
    *(&v169 - 2) = v175;
    CGPathRef v54 = (CGPathRef)specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperKitPDFPage.annotationFor(id:), (uint64_t)(&v169 - 4), v52);
    uint64_t v169 = 0;
    swift_bridgeObjectRelease();
    if (v54)
    {
      if ([(CGPath *)v54 hasAppearanceStream])
      {
        double v55 = v188;
        objc_msgSend(*(id *)&v188, sel_boundsForBox_, 0);
        CGFloat x = v202.origin.x;
        CGFloat y = v202.origin.y;
        CGFloat width = v202.size.width;
        CGFloat height = v202.size.height;
        double MinY = CGRectGetMinY(v202);
        v203.origin.CGFloat x = x;
        v203.origin.CGFloat y = y;
        v203.size.CGFloat width = width;
        v203.size.CGFloat height = height;
        CGFloat MaxY = CGRectGetMaxY(v203);
        t1.double a = 1.0;
        t1.double b = 0.0;
        t1.double c = 0.0;
        t1.double d = 1.0;
        t1.tCGFloat y = 0.0;
        t1.tCGFloat x = 0.0;
        v197.double b = 0.0;
        v197.double c = 0.0;
        v197.double a = 1.0;
        *(_OWORD *)&v197.double d = xmmword_20C8340F0;
        v197.tCGFloat y = MinY + MaxY;
        CGAffineTransformConcat(&v192, &t1, &v197);
        CGAffineTransform t1 = v192;
        long long v62 = (CGContext *)v186;
        CGContextConcatCTM((CGContextRef)v186, &t1);
        objc_msgSend(*(id *)&v55, sel_transformForBox_, 1);
        CGAffineTransformInvert(&v197, &t1);
        CGAffineTransform t1 = v197;
        CGContextConcatCTM(v62, &t1);
        CRRegister.wrappedValue.getter();
        if ((LOBYTE(t1.a) & 0x40) == 0)
        {
          [(CGPath *)v54 bounds];
          CGFloat v64 = v63;
          CGFloat v66 = v65;
          CGFloat v68 = v67;
          CGFloat v70 = v69;
          objc_msgSend(*(id *)&v55, sel_boundsForBox_, 0);
          double v72 = v71;
          double v74 = v73;
          v204.origin.CGFloat x = v64;
          v204.origin.CGFloat y = v66;
          v204.size.CGFloat width = v68;
          v204.size.CGFloat height = v70;
          double MinX = CGRectGetMinX(v204);
          v205.origin.CGFloat x = v64;
          v205.origin.CGFloat y = v66;
          v205.size.CGFloat width = v68;
          v205.size.CGFloat height = v70;
          double v76 = v74 + v72 + v72 - CGRectGetMaxY(v205);
          v206.origin.CGFloat x = v64;
          v206.origin.CGFloat y = v66;
          v206.size.CGFloat width = v68;
          v206.size.CGFloat height = v70;
          CGRectGetWidth(v206);
          v207.origin.CGFloat x = v64;
          v207.origin.CGFloat y = v66;
          v207.size.CGFloat width = v68;
          v207.size.CGFloat height = v70;
          CGRectGetHeight(v207);
          CRRegister.wrappedValue.getter();
          double v77 = t1.a - MinX;
          double v78 = t1.b - v76;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
          CRRegister.wrappedValue.getter();
          if (*(void *)&t1.ty)
          {
            double v79 = t1.d;
            double v80 = t1.c;
            swift_bridgeObjectRelease();
          }
          else
          {
            double v79 = 0.0;
            double v80 = 0.0;
          }
          CGContextTranslateCTM(v62, v77 + v80, -(v78 + v79));
        }
        [(CGPath *)v54 drawWithBox:1 inContext:v62];
        CGContextRestoreGState(v62);

LABEL_99:
        return;
      }
    }
    else
    {
      CGPathRef v54 = *(CGPathRef *)&v188;
    }

    a4 = v184;
    *(double *)&long long v13 = v187;
  }
  else
  {
    uint64_t v169 = 0;
  }
  Shape.pathAndLineEnds(in:scale:)(&t2, (uint64_t)&t1, 1.0);
  CGFloat v81 = t1.a;
  CGFloat v82 = t1.b;
  CGFloat v172 = t1.c;
  CGFloat v83 = t1.d;
  CGFloat v84 = t1.tx;
  double v171 = t1.ty;
  double v170 = v194;
  double v85 = v195;
  uint64_t v86 = v196;
  uint64_t v87 = v4 + v13[11];
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  uint64_t v173 = v87;
  CRRegister.wrappedValue.getter();
  int a_low = LOBYTE(t1.a);
  int b_low = LOBYTE(t1.b);
  _s8PaperKit13CRAssetOrDataOWOcTm_0(v5, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Shape);
  if (a_low) {
    BOOL v91 = a_low == 9;
  }
  else {
    BOOL v91 = 1;
  }
  char v92 = v91;
  if (b_low == 1 || (v92 & 1) == 0)
  {
    _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Shape);
    int v93 = 1;
  }
  else
  {
    CRRegister.wrappedValue.getter();
    _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Shape);
    int v93 = LOBYTE(t1.b) | (LOBYTE(t1.a) != 0);
  }
  uint64_t v175 = v88;
  *(void *)&long long v185 = v5 + v13[8];
  CRRegister.wrappedValue.getter();
  double v94 = t1.a;
  _s8PaperKit13CRAssetOrDataOWOcTm_0(v5, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for Shape);
  if (v94 <= 0.0)
  {
    _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for Shape);
    BOOL v95 = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for Shape);
    BOOL v95 = *(void *)&t1.a != 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.getter();
  CGFloat v96 = t1.a;

  _s8PaperKit13CRAssetOrDataOWOcTm_0(v5, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Shape);
  if (!v95 || v96 == 0.0)
  {
    _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Shape);
    uint64_t v97 = v182;
    _s8PaperKit13CRAssetOrDataOWOcTm_0(v5, v182, (uint64_t (*)(void))type metadata accessor for Shape);
LABEL_31:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
    CRRegister.wrappedValue.getter();
    _s8PaperKit0A8DocumentVWOhTm_0(v97, (uint64_t (*)(void))type metadata accessor for Shape);
    LODWORD(v188) = *(void *)&t1.d != 0;

    int v100 = v95 & v93;
    uint64_t v98 = v183;
    _s8PaperKit13CRAssetOrDataOWOcTm_0(v5, v183, (uint64_t (*)(void))type metadata accessor for Shape);
    Swift::String v99 = (CGContext *)v186;
    if (v100 != 1) {
      goto LABEL_29;
    }
    goto LABEL_32;
  }
  CRRegister.wrappedValue.getter();
  double v94 = t1.a;
  _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Shape);
  uint64_t v97 = v182;
  _s8PaperKit13CRAssetOrDataOWOcTm_0(v5, v182, (uint64_t (*)(void))type metadata accessor for Shape);
  if (v94 >= 1.0) {
    goto LABEL_31;
  }
  _s8PaperKit0A8DocumentVWOhTm_0(v97, (uint64_t (*)(void))type metadata accessor for Shape);
  uint64_t v98 = v183;
  _s8PaperKit13CRAssetOrDataOWOcTm_0(v5, v183, (uint64_t (*)(void))type metadata accessor for Shape);
  LODWORD(v188) = 1;
  Swift::String v99 = (CGContext *)v186;
  if ((v93 & 1) == 0)
  {
LABEL_29:
    LODWORD(v182) = 0;
    goto LABEL_42;
  }
LABEL_32:
  CRRegister.wrappedValue.getter();
  if (!*(void *)&t1.a)
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  id v101 = *(id *)&t1.a;
  uint64_t v102 = CGColorRef.components.getter();

  if (!v102)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  if (*(void *)(v102 + 16) < 4uLL)
  {
    __break(1u);
    goto LABEL_104;
  }
  double v103 = *(double *)(v102 + 56);

  swift_bridgeObjectRelease();
  uint64_t v104 = *(void *)&v178;
  _s8PaperKit13CRAssetOrDataOWOcTm_0(v98, *(uint64_t *)&v178, (uint64_t (*)(void))type metadata accessor for Shape);
  if (v103 >= 1.0)
  {
    uint64_t v105 = v177;
    _s8PaperKit13CRAssetOrDataOWOcTm_0(v104, v177, (uint64_t (*)(void))type metadata accessor for Shape);
    if (LOBYTE(v188))
    {
      LODWORD(v182) = 0;
    }
    else
    {
      CRRegister.wrappedValue.getter();
      uint64_t v105 = v177;
      LODWORD(v182) = t1.a < 1.0;
    }
    _s8PaperKit0A8DocumentVWOhTm_0(v105, (uint64_t (*)(void))type metadata accessor for Shape);
  }
  else
  {
    LODWORD(v182) = 1;
  }
  _s8PaperKit0A8DocumentVWOhTm_0(v104, (uint64_t (*)(void))type metadata accessor for Shape);
LABEL_42:
  _s8PaperKit0A8DocumentVWOhTm_0(v98, (uint64_t (*)(void))type metadata accessor for Shape);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  CRRegister.wrappedValue.getter();
  CGFloat v106 = t1.d;
  CGFloat v187 = v81;
  if (*(void *)&t1.d)
  {
    CGFloat v107 = t1.c;
    CGFloat v108 = t1.b;
    CGFloat v109 = t1.a;
    id v110 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, *(void *)&t1.d);
    unint64_t v111 = (CGColor *)objc_msgSend(v110, sel_CGColor);

    v199.CGFloat width = v109;
    v199.CGFloat height = v108;
    CGContextSetShadowWithColor(v99, v199, v107, v111);
  }
  uint64_t v183 = v5 + v13[10];
  CRRegister.wrappedValue.getter();
  CGContextSetAlpha(v99, t1.a);
  if (LODWORD(v188))
  {
    double v178 = v82;
    PathBoundingBoCGFloat x = CGPathGetPathBoundingBox(*(CGPathRef *)&v187);
    double v94 = PathBoundingBox.origin.x;
    CGFloat v46 = PathBoundingBox.origin.y;
    CGFloat v47 = PathBoundingBox.size.width;
    CGFloat v82 = PathBoundingBox.size.height;
    CRRegister.wrappedValue.getter();
    CGFloat v112 = t1.a;

    if (v112 == 0.0)
    {
      double v114 = 1.0;
      goto LABEL_49;
    }
    uint64_t v177 = v86;
    *(double *)&uint64_t v86 = v85;
    double v85 = v84;
    CGFloat v84 = v83;
    if (one-time initialization token for shapeStrokeMiterLimit == -1)
    {
LABEL_47:
      double v113 = *(double *)&static UIConstants.shapeStrokeMiterLimit;
      CRRegister.wrappedValue.getter();
      double v114 = v113 * t1.a;
      CGFloat v83 = v84;
      CGFloat v84 = v85;
      double v85 = *(double *)&v86;
      uint64_t v86 = v177;
LABEL_49:
      CGFloat v115 = -v114;
      v209.origin.CGFloat x = v94;
      v209.origin.CGFloat y = v46;
      v209.size.CGFloat width = v47;
      v209.size.CGFloat height = v82;
      CGRect v210 = CGRectInset(v209, v115, v115);
      CGContextBeginTransparencyLayerWithRect(v99, v210, 0);
      CGFloat v82 = v178;
      goto LABEL_50;
    }
LABEL_104:
    swift_once();
    goto LABEL_47;
  }
LABEL_50:
  char v116 = *(unsigned char *)(a4 + 1);
  CRRegister.wrappedValue.getter();
  CGFloat v117 = t1.a;
  if (*(void *)&t1.a)
  {
    if (v116)
    {
      id v118 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, *(void *)&t1.a);
      uint64_t v119 = (void *)static PKInkingTool.convertColor(_:from:to:)();

      Color.init(cgColor:)((CGColor *)objc_msgSend(v119, sel_CGColor), (CGColor **)&v197);
      CGFloat v120 = v197.a;
      if (!*(void *)&v197.a)
      {
LABEL_108:
        __break(1u);
        goto LABEL_109;
      }

      CGFloat v117 = v120;
    }
    CGContextSetFillColorWithColor(v99, *(CGColorRef *)&v117);
    CGContextAddPath(v99, *(CGPathRef *)&v187);
    uint64_t v121 = v180;
    id v122 = v179;
    uint64_t v123 = v181;
    (*(void (**)(char *, void, uint64_t))(v180 + 104))(v179, *MEMORY[0x263F00040], v181);
    CGContextRef.fillPath(using:)();

    (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v123);
  }
  CRRegister.wrappedValue.getter();
  CGFloat v124 = t1.a;
  if (!*(void *)&t1.a)
  {
LABEL_69:
    uint64_t v139 = v184;
    CGPathRef v54 = *(CGPathRef *)&v187;
LABEL_93:
    if (LODWORD(v188)) {
      CGContextEndTransparencyLayer(v99);
    }
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v139 + 24, (uint64_t)&t1, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
    CGContextRestoreGState(v99);
    double v159 = specialized static ShapeTextBoxRendering.unrotatedRenderFrame<A>(_:in:)(v5, (uint64_t)&t1);
    CGFloat v161 = v160;
    CGFloat v163 = v162;
    CGFloat v165 = v164;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
    CRRegister.wrappedValue.getter();
    if ((LOBYTE(v197.a) & 2) != 0)
    {
      __C::CGRect v211 = Shape.renderFrame(in:)((__C::CGRect_optional *)&t1);
      double v166 = CGRectGetHeight((CGRect)v211);
      v212.origin.CGFloat x = v159;
      v212.origin.CGFloat y = v161;
      v212.size.CGFloat width = v163;
      v212.size.CGFloat height = v165;
      double v167 = v166 - CGRectGetHeight(v212);
      if (v167 > 0.0)
      {
        CGFloat v168 = v167 * 0.5;
        v213.origin.CGFloat x = v159;
        v213.origin.CGFloat y = v161;
        v213.size.CGFloat width = v163;
        v213.size.CGFloat height = v165;
        CGRect v214 = CGRectOffset(v213, 0.0, v168);
        double v159 = v214.origin.x;
        CGFloat v161 = v214.origin.y;
        CGFloat v163 = v214.size.width;
        CGFloat v165 = v214.size.height;
      }
    }
    specialized static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)(v5, v99, v159, v161, v163, v165);
    goto LABEL_99;
  }
  if (v116)
  {
    id v125 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, *(void *)&t1.a);
    uint64_t v126 = (void *)static PKInkingTool.convertColor(_:from:to:)();

    Color.init(cgColor:)((CGColor *)objc_msgSend(v126, sel_CGColor), (CGColor **)&v197);
    CGFloat v127 = v197.a;
    if (!*(void *)&v197.a)
    {
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }

    CGFloat v124 = v127;
  }
  CRRegister.wrappedValue.getter();
  if (t1.a <= 0.0)
  {

    goto LABEL_69;
  }
  double v128 = COERCE_DOUBLE(*(id *)&v124);
  CGFloat v129 = v128;
  if ((v182 & 1) == 0) {
    goto LABEL_66;
  }
  uint64_t v130 = CGColorRef.components.getter();
  if (v130)
  {
    if (*(void *)(v130 + 16) >= 4uLL)
    {
      double v131 = *(double *)(v130 + 56);

      swift_bridgeObjectRelease();
      double v132 = 1.0;
      if ((LOBYTE(v188) & 1) == 0)
      {
        CRRegister.wrappedValue.getter();
        double v132 = t1.a;
      }
      CGContextSetAlpha(v99, v131 * v132);
      v197.double a = v128;
      Color.withAlphaComponent(_:)((CGColorRef *)&t1, 1.0);
      CGFloat v129 = t1.a;
      CGContextBeginTransparencyLayer(v99, 0);
LABEL_66:
      uint64_t v183 = *(void *)&v128;
      CGContextSetStrokeColorWithColor(v99, *(CGColorRef *)&v129);
      CRRegister.wrappedValue.getter();
      CGContextSetLineWidth(v99, t1.a);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
      uint64_t v133 = v176;
      CRRegister.wrappedValue.getter();
      uint64_t v134 = (uint64_t)v133;
      uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
      uint64_t v136 = *(void *)(v135 - 8);
      uint64_t v137 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48);
      if (v137(v134, 1, v135) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v134, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
        CGLineCap c_low = kCGLineCapButt;
      }
      else
      {
        TaggedValue_2.tagged1.getter();
        if (*(void *)&t1.b)
        {
          CGLineCap c_low = LODWORD(t1.c);
          swift_bridgeObjectRelease();
        }
        else
        {
          CGLineCap c_low = kCGLineCapButt;
        }
        (*(void (**)(char *, uint64_t))(v136 + 8))(v176, v135);
      }
      CGContextSetLineCap((CGContextRef)v186, c_low);
      uint64_t v140 = (uint64_t)v174;
      CRRegister.wrappedValue.getter();
      if (v137(v140, 1, v135) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v140, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
        Swift::String v99 = (CGContext *)v186;
      }
      else
      {
        TaggedValue_2.tagged1.getter();
        uint64_t v141 = *(void *)&t1.b;
        (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v140, v135);
        Swift::String v99 = (CGContext *)v186;
        if (v141)
        {
          if (*(void *)(v141 + 16))
          {
            uint64_t v142 = CRRegister.wrappedValue.getter();
            MEMORY[0x270FA5388](v142);
            *(&v169 - 2) = v5;
            _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12CoreGraphics7CGFloatVG_AHs5NeverOTg5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in Shape.renderSync<A>(in:id:capsule:options:), (uint64_t)(&v169 - 4), v141);
            swift_bridgeObjectRelease();
            CGContextRef.setLineDash(phase:lengths:)();
          }
          swift_bridgeObjectRelease();
        }
      }
      CGPathRef v54 = *(CGPathRef *)&v187;
      CGContextAddPath(v99, *(CGPathRef *)&v187);
      CGContextStrokePath(v99);
      CGContextSetFillColorWithColor(v99, *(CGColorRef *)&v129);
      CRRegister.wrappedValue.getter();
      id v143 = (unsigned int *)MEMORY[0x263F00038];
      if (LOBYTE(t1.b))
      {
        char v144 = 1;
      }
      else
      {
        char v144 = LOBYTE(t1.a);
        if (!LOBYTE(t1.a)) {
          goto LABEL_85;
        }
      }
      LOBYTE(v192.a) = v144;
      CRRegister.wrappedValue.getter();
      uint64_t v145 = (const CGPath *)LineEnd.path(from:to:strokeWidth:)(v82, v172, v171, v170, v197.a);
      if (v145)
      {
        uint64_t v146 = v145;
        CGContextAddPath(v99, v145);
        uint64_t v147 = *v143;
        uint64_t v148 = v180;
        Swift::OpaquePointer v149 = v179;
        uint64_t v150 = v181;
        (*(void (**)(char *, uint64_t, uint64_t))(v180 + 104))(v179, v147, v181);
        CGContextRef.fillPath(using:)();

        uint64_t v151 = v150;
        id v143 = (unsigned int *)MEMORY[0x263F00038];
        (*(void (**)(char *, uint64_t))(v148 + 8))(v149, v151);
      }
LABEL_85:
      CRRegister.wrappedValue.getter();
      if (LOBYTE(t1.b))
      {
        char v152 = 1;
      }
      else
      {
        char v152 = LOBYTE(t1.a);
        if (!LOBYTE(t1.a))
        {
LABEL_90:
          if (v182) {
            CGContextEndTransparencyLayer(v99);
          }

          uint64_t v139 = v184;
          goto LABEL_93;
        }
      }
      LOBYTE(v192.a) = v152;
      CRRegister.wrappedValue.getter();
      uint64_t v153 = (const CGPath *)LineEnd.path(from:to:strokeWidth:)(v83, v84, v85, *(double *)&v86, v197.a);
      if (v153)
      {
        uint64_t v154 = v153;
        CGContextAddPath(v99, v153);
        uint64_t v155 = *v143;
        uint64_t v156 = v180;
        uint64_t v157 = v179;
        uint64_t v158 = v181;
        (*(void (**)(char *, uint64_t, uint64_t))(v180 + 104))(v179, v155, v181);
        CGContextRef.fillPath(using:)();

        (*(void (**)(char *, uint64_t))(v156 + 8))(v157, v158);
      }
      goto LABEL_90;
    }
    __break(1u);
    goto LABEL_106;
  }
LABEL_110:
  __break(1u);
}

uint64_t specialized PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v155 = a2;
  int v6 = a1;
  int v7 = a1;
  uint64_t v198 = *MEMORY[0x263EF8340];
  uint64_t v183 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x270FA5388](v183);
  uint64_t v180 = (uint64_t)&v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v177 = (uint64_t)&v148 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v189 = (uint64_t)&v148 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v178 = (uint64_t)&v148 - v14;
  uint64_t v15 = type metadata accessor for CRKeyPath();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  UIImage_optional v174 = (char *)&v148 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  double v188 = (char *)&v148 - v19;
  uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v172 = *(void *)(v164 - 8);
  MEMORY[0x270FA5388](v164);
  CGFloat v163 = (char *)&v148 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = type metadata accessor for SHA256Digest();
  uint64_t v156 = *(void *)(v160 - 8);
  MEMORY[0x270FA5388](v160);
  double v159 = (char *)&v148 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = type metadata accessor for SHA256();
  uint64_t v22 = *(void *)(v162 - 8);
  MEMORY[0x270FA5388](v162);
  CGFloat v161 = (char *)&v148 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  double v26 = (char *)&v148 - v25;
  v191[1] = a3;
  SHA256.init()();
  uint64_t v27 = &off_2640D6000;
  id v165 = v4;
  objc_msgSend(v4, sel_boundsForBox_, 0);
  double v166 = v26;
  if (v7 == 1)
  {
    uint64_t v32 = CGRect.rawValue.getter(v28, v29, v30, v31);
    uint64_t v34 = v32;
    unint64_t v35 = v33;
    switch(v33 >> 62)
    {
      case 1uLL:
        uint64_t v149 = v22;
        if (v32 >> 32 < (int)v32) {
          goto LABEL_84;
        }
        outlined copy of Data._Representation(v32, v33);
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v34, v34 >> 32);
        outlined consume of Data._Representation(v34, v35);
        outlined consume of Data._Representation(v34, v35);
        uint64_t v22 = v149;
        break;
      case 2uLL:
        int v37 = v6;
        uint64_t v38 = v22;
        uint64_t v39 = v15;
        uint64_t v41 = *(void *)(v32 + 16);
        uint64_t v40 = *(void *)(v32 + 24);
        outlined copy of Data._Representation(v32, v33);
        swift_retain();
        swift_retain();
        uint64_t v42 = v41;
        uint64_t v15 = v39;
        uint64_t v22 = v38;
        int v6 = v37;
        uint64_t v27 = &off_2640D6000;
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v42, v40);
        swift_release();
        swift_release();
        goto LABEL_10;
      case 3uLL:
        lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
        *(void *)&long long aBlock = 0;
        *(void *)((char *)&aBlock + 6) = 0;
        goto LABEL_9;
      default:
        *(void *)&long long aBlock = v32;
        WORD4(aBlock) = v33;
        BYTE10(aBlock) = BYTE2(v33);
        BYTE11(aBlock) = BYTE3(v33);
        BYTE12(aBlock) = BYTE4(v33);
        BYTE13(aBlock) = BYTE5(v33);
        lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
LABEL_9:
        dispatch thunk of HashFunction.update(bufferPointer:)();
LABEL_10:
        outlined consume of Data._Representation(v34, v35);
        outlined consume of Data._Representation(v34, v35);
        break;
    }
    objc_msgSend(v165, (SEL)v27[322], 1);
    uint64_t v47 = CGRect.rawValue.getter(v43, v44, v45, v46);
    uint64_t v49 = v47;
    unint64_t v50 = v48;
    switch(v48 >> 62)
    {
      case 1uLL:
        if (v47 >> 32 < (int)v47) {
          goto LABEL_85;
        }
        outlined copy of Data._Representation(v47, v48);
        uint64_t v36 = v166;
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v49, v49 >> 32);
        break;
      case 2uLL:
        uint64_t v51 = *(void *)(v47 + 16);
        uint64_t v52 = *(void *)(v47 + 24);
        outlined copy of Data._Representation(v47, v48);
        swift_retain();
        swift_retain();
        uint64_t v53 = v52;
        uint64_t v36 = v166;
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v51, v53);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
        *(void *)&long long aBlock = 0;
        *(void *)((char *)&aBlock + 6) = 0;
        goto LABEL_17;
      default:
        *(void *)&long long aBlock = v47;
        WORD4(aBlock) = v48;
        BYTE10(aBlock) = BYTE2(v48);
        BYTE11(aBlock) = BYTE3(v48);
        BYTE12(aBlock) = BYTE4(v48);
        BYTE13(aBlock) = BYTE5(v48);
        lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
LABEL_17:
        uint64_t v36 = v166;
        dispatch thunk of HashFunction.update(bufferPointer:)();
        break;
    }
    outlined consume of Data._Representation(v49, v50);
    outlined consume of Data._Representation(v49, v50);
  }
  else
  {
    CGRect.roundedHash(into:version:)((int)v26, v6);
    uint64_t v36 = v26;
  }
  v191[0] = MEMORY[0x263F8EE78];
  id v54 = objc_msgSend(objc_allocWithZone(NSDictionary), sel_init);
  double v55 = (void *)CGDisplayListCreateWithRect();
  uint64_t v56 = (void *)CGDisplayListContextCreate();
  objc_msgSend(v165, sel_drawWithBox_inContext_withOptions_, 0, v56, 0);

  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = v191;
  uint64_t v58 = swift_allocObject();
  *(void *)(v58 + 16) = partial apply for closure #1 in PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:);
  *(void *)(v58 + 24) = v57;
  uint64_t v153 = v57;
  uint64_t v196 = (uint64_t)_ss13OpaquePointerVSpySbGIgyy_AbCIegyy_TRTA_0;
  uint64_t v197 = v58;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  double v194 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ();
  double v195 = &block_descriptor_356;
  char v59 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v154 = v55;
  CGDisplayListEnumerateEntriesWithOptions();
  _Block_release(v59);
  LOBYTE(v59) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v59)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  uint64_t v60 = v191[0];
  unint64_t v61 = *(void *)(v191[0] + 16);
  if (v61 >> 61)
  {
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
  }
  uint64_t v62 = v191[0] + 32 + 4 * v61;
  swift_bridgeObjectRetain();
  uint64_t v63 = specialized Data.init<A>(_:)(v60 + 32, v62);
  unint64_t v65 = v64;
  swift_bridgeObjectRelease();
  switch(v65 >> 62)
  {
    case 1uLL:
      if (v63 >> 32 < (int)v63) {
        goto LABEL_81;
      }
      outlined copy of Data._Representation(v63, v65);
      uint64_t v36 = v166;
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v63, v63 >> 32);
      break;
    case 2uLL:
      uint64_t v66 = *(void *)(v63 + 16);
      uint64_t v67 = *(void *)(v63 + 24);
      outlined copy of Data._Representation(v63, v65);
      swift_retain();
      swift_retain();
      uint64_t v68 = v67;
      uint64_t v36 = v166;
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v66, v68);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
      *(void *)&long long aBlock = 0;
      *(void *)((char *)&aBlock + 6) = 0;
      goto LABEL_27;
    default:
      *(void *)&long long aBlock = v63;
      WORD4(aBlock) = v65;
      BYTE10(aBlock) = BYTE2(v65);
      BYTE11(aBlock) = BYTE3(v65);
      BYTE12(aBlock) = BYTE4(v65);
      BYTE13(aBlock) = BYTE5(v65);
      lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
LABEL_27:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  outlined consume of Data._Representation(v63, v65);
  outlined consume of Data._Representation(v63, v65);
  if (v6 >= 3u)
  {
    uint64_t v171 = *(void *)(v155 + 16);
    if (v171)
    {
      uint64_t v158 = 0;
      unsigned int v157 = v6;
      double v170 = *(void (**)(char *, uint64_t, uint64_t))(v172 + 16);
      uint64_t v169 = v155 + ((*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80));
      uint64_t v168 = *(void *)(v172 + 72);
      double v69 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
      uint64_t v182 = (void (**)(uint64_t, char *, uint64_t))(v16 + 16);
      uint64_t v181 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
      uint64_t v173 = (void (**)(char *, uint64_t, uint64_t))(v16 + 32);
      Swift::String v179 = (void (**)(char *, uint64_t))(v16 + 8);
      char v152 = (void (**)(char *, uint64_t))(v156 + 8);
      uint64_t v149 = v22;
      uint64_t v151 = (void (**)(char *, uint64_t))(v22 + 8);
      v172 += 16;
      double v167 = (void (**)(char *, uint64_t))(v172 - 8);
      swift_bridgeObjectRetain();
      uint64_t v70 = 0;
      long long v150 = xmmword_20C835740;
      uint64_t v71 = v178;
      uint64_t v72 = v164;
      double v73 = v163;
      CGFloat v187 = v69;
      while (1)
      {
        uint64_t v175 = v70;
        v170(v73, v169 + v168 * v70, v72);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PaperDocument>.Ref);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Capsule<PaperDocument>.Ref and conformance Capsule<A>.Ref, &demangling cache variable for type metadata for Capsule<PaperDocument>.Ref);
        SharedTagged_9.subscript.getter();
        uint64_t v74 = v72;
        uint64_t v75 = v73;
        double v76 = v195;
        uint64_t v77 = v196;
        __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v195);
        (*(void (**)(long long *__return_ptr, void *, uint64_t))(v77 + 64))(&v192, v76, v77);
        char v78 = v192;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
        if ((v78 & 0x80) == 0)
        {
          (*v167)(v75, v74);
          uint64_t v72 = v74;
          double v73 = v75;
          goto LABEL_32;
        }
        MEMORY[0x21054BDF0](v74);
        id v79 = objc_msgSend(v165, sel_annotations);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
        unint64_t v80 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v80 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v136 = (void *)_CocoaArrayWrapper.endIndex.getter();
          uint64_t v82 = v180;
          CGFloat v83 = v187;
          CGFloat v84 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
          id v186 = v136;
          if (!v136)
          {
LABEL_73:
            swift_bridgeObjectRelease_n();
            (*v179)(v188, v15);
            double v73 = v163;
            uint64_t v72 = v164;
            (*v167)(v163, v164);
            uint64_t v36 = v166;
            goto LABEL_32;
          }
        }
        else
        {
          CGFloat v81 = *(void **)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          uint64_t v82 = v180;
          CGFloat v83 = v187;
          CGFloat v84 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
          id v186 = v81;
          if (!v81) {
            goto LABEL_73;
          }
        }
        unint64_t v185 = v80 & 0xC000000000000001;
        uint64_t v85 = 4;
        unint64_t v184 = v80;
        while (1)
        {
          if (v185) {
            id v86 = (id)MEMORY[0x21054E050](v85 - 4, v80);
          }
          else {
            id v86 = *(id *)(v80 + 8 * v85);
          }
          uint64_t v87 = v86;
          id v88 = (id)(v85 - 3);
          if (__OFADD__(v85 - 4, 1))
          {
            __break(1u);
            goto LABEL_77;
          }
          type metadata accessor for CanvasElementPDFAnnotation();
          uint64_t v89 = swift_dynamicCastClass();
          if (v89)
          {
            uint64_t v90 = v89 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
            swift_beginAccess();
            outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v90, v71, v84);
          }
          else
          {
            (*v83)(v71, 1, 1, v15);
          }
          uint64_t v91 = v189;
          (*v182)(v189, v188, v15);
          (*v83)(v91, 0, 1, v15);
          uint64_t v92 = v82 + *(int *)(v183 + 48);
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v71, v82, v84);
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v91, v92, v84);
          uint64_t v93 = v15;
          uint64_t v94 = v82;
          BOOL v95 = v84;
          CGFloat v96 = *v181;
          if ((*v181)(v94, 1, v93) == 1) {
            break;
          }
          uint64_t v97 = v177;
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v94, v177, v84);
          if (v96(v92, 1, v93) == 1)
          {
            (*v179)((char *)v97, v93);
            uint64_t v71 = v178;
            uint64_t v15 = v93;
            goto LABEL_38;
          }
          uint64_t v98 = v174;
          (*v173)(v174, v92, v93);
          lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
          int v176 = dispatch thunk of static Equatable.== infix(_:_:)();
          Swift::String v99 = *v179;
          (*v179)((char *)v97, v93);
          v99(v98, v93);
          outlined destroy of StocksKitCurrencyCache.Provider?(v94, v95);
          outlined destroy of StocksKitCurrencyCache.Provider?(v189, v95);
          uint64_t v71 = v178;
          outlined destroy of StocksKitCurrencyCache.Provider?(v178, v95);
          uint64_t v82 = v94;
          uint64_t v15 = v93;
          CGFloat v84 = v95;
          unint64_t v80 = v184;
          if (v176) {
            goto LABEL_53;
          }
LABEL_39:

          ++v85;
          CGFloat v83 = v187;
          if (v88 == v186) {
            goto LABEL_73;
          }
        }
        uint64_t v15 = v93;
        if (v96(v92, 1, v93) != 1) {
          break;
        }
        outlined destroy of StocksKitCurrencyCache.Provider?(v180, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v189, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v71, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
LABEL_53:
        swift_bridgeObjectRelease_n();
        (*v179)(v188, v15);
        id v100 = v87;
        id v101 = objc_msgSend(v100, sel_dictionaryRef);
        if (!v101) {
          goto LABEL_86;
        }
        unsigned int v102 = v157;
        int v103 = v157;
        id v104 = v101;
        uint64_t v105 = (uint64_t)v161;
        SHA256.init()();
        uint64_t v190 = MEMORY[0x263F8EE88];
        id v186 = v104;
        NSDictionary.paperKitHashInto(_:version:includeAPPL:visited:)(v105, v102, 0, (uint64_t)&v190);
        swift_bridgeObjectRelease();
        CGFloat v106 = v159;
        SHA256.finalize()();
        lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x263F045C0]);
        uint64_t v107 = v160;
        uint64_t v108 = Digest.makeIterator()();
        uint64_t v110 = v109;
        (*v152)(v106, v107);
        uint64_t v111 = specialized _copySequenceToContiguousArray<A>(_:)(v108, v110);
        swift_bridgeObjectRelease();
        CGFloat v112 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
        double v195 = v112;
        uint64_t v196 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
        *(void *)&long long aBlock = v111;
        double v113 = __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v112);
        double v114 = (unsigned char *)(*v113 + 32);
        CGFloat v115 = &v114[*(void *)(*v113 + 16)];
        swift_bridgeObjectRetain();
        char v116 = v115;
        uint64_t v117 = v158;
        closure #1 in Data.init<A>(_:)(v114, v116, &v192);
        uint64_t v158 = v117;
        swift_release();
        unint64_t v118 = *((void *)&v192 + 1);
        uint64_t v119 = v192;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
        uint64_t v36 = v166;
        if (v103 != 1)
        {
          unint64_t v120 = v118;
          uint64_t v121 = v119;
          if (one-time initialization token for magicNumber != -1) {
            swift_once();
          }
          uint64_t v123 = static PaperKitPDFHash.magicNumber;
          unint64_t v122 = *(void *)algn_2676E9248;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          uint64_t v124 = swift_allocObject();
          *(_OWORD *)(v124 + 16) = v150;
          *(unsigned char *)(v124 + 32) = 0;
          *(unsigned char *)(v124 + 33) = v157;
          outlined copy of Data._Representation(v123, v122);
          uint64_t v125 = specialized Data.init<A>(_:)(v124);
          unint64_t v127 = v126;
          swift_bridgeObjectRelease();
          *(void *)&long long v192 = v123;
          *((void *)&v192 + 1) = v122;
          outlined copy of Data._Representation(v123, v122);
          specialized Data.append<A>(contentsOf:)(v125, v127);
          outlined consume of Data._Representation(v125, v127);
          outlined consume of Data._Representation(v123, v122);
          unint64_t v129 = *((void *)&v192 + 1);
          uint64_t v128 = v192;
          long long aBlock = v192;
          outlined copy of Data._Representation(v192, *((unint64_t *)&v192 + 1));
          outlined copy of Data._Representation(v121, v120);
          specialized Data.append<A>(contentsOf:)(v121, v120);
          outlined consume of Data._Representation(v121, v120);
          outlined consume of Data._Representation(v128, v129);
          uint64_t v119 = specialized Data.init<A>(_:)(aBlock, *((unint64_t *)&aBlock + 1));
          unint64_t v118 = v130;
          outlined consume of Data._Representation(v121, v120);
          uint64_t v36 = v166;
        }
        (*v151)(v161, v162);
        uint64_t v72 = v164;
        double v73 = v163;
        switch(v118 >> 62)
        {
          case 1uLL:
            if (v119 >> 32 < (int)v119) {
              goto LABEL_79;
            }
            unint64_t v185 = v118;
            outlined copy of Data._Representation(v119, v118);
            if (__DataStorage._bytes.getter() && __OFSUB__((int)v119, __DataStorage._offset.getter())) {
              goto LABEL_83;
            }
            __DataStorage._length.getter();
            lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
            dispatch thunk of HashFunction.update(bufferPointer:)();
            uint64_t v132 = v119;
            unint64_t v118 = v185;
            unint64_t v133 = v185;
            break;
          case 2uLL:
            uint64_t v134 = *(void *)(v119 + 16);
            uint64_t v135 = *(void *)(v119 + 24);
            outlined copy of Data._Representation(v119, v118);
            unint64_t v185 = v119;
            swift_retain();
            swift_retain();
            if (__DataStorage._bytes.getter() && __OFSUB__(v134, __DataStorage._offset.getter())) {
              goto LABEL_82;
            }
            if (__OFSUB__(v135, v134)) {
              goto LABEL_80;
            }
            __DataStorage._length.getter();
            lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
            uint64_t v36 = v166;
            dispatch thunk of HashFunction.update(bufferPointer:)();
            swift_release();
            uint64_t v119 = v185;
            swift_release();
            uint64_t v132 = v119;
            unint64_t v133 = v118;
            break;
          case 3uLL:
            lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
            *(void *)&long long aBlock = 0;
            *(void *)((char *)&aBlock + 6) = 0;
            unint64_t v131 = v118;
            goto LABEL_70;
          default:
            *(void *)&long long aBlock = v119;
            WORD4(aBlock) = v118;
            BYTE10(aBlock) = BYTE2(v118);
            BYTE11(aBlock) = BYTE3(v118);
            BYTE12(aBlock) = BYTE4(v118);
            BYTE13(aBlock) = BYTE5(v118);
            unint64_t v131 = v118;
            lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
LABEL_70:
            dispatch thunk of HashFunction.update(bufferPointer:)();
            unint64_t v118 = v131;
            outlined consume of Data._Representation(v119, v131);

            goto LABEL_71;
        }
        outlined consume of Data._Representation(v132, v133);

        uint64_t v72 = v164;
        double v73 = v163;
LABEL_71:
        (*v167)(v73, v72);
        outlined consume of Data._Representation(v119, v118);
LABEL_32:
        uint64_t v70 = v175 + 1;
        if (v175 + 1 == v171)
        {
          swift_bridgeObjectRelease();
          LOBYTE(v6) = v157;
          uint64_t v22 = v149;
          goto LABEL_75;
        }
      }
LABEL_38:
      uint64_t v82 = v180;
      outlined destroy of StocksKitCurrencyCache.Provider?(v180, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
      CGFloat v84 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
      outlined destroy of StocksKitCurrencyCache.Provider?(v189, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v71, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      unint64_t v80 = v184;
      goto LABEL_39;
    }
  }
LABEL_75:
  uint64_t v137 = v159;
  SHA256.finalize()();
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x263F045C0]);
  uint64_t v138 = v160;
  uint64_t v139 = Digest.makeIterator()();
  uint64_t v141 = v140;
  (*(void (**)(char *, uint64_t))(v156 + 8))(v137, v138);
  uint64_t v142 = specialized _copySequenceToContiguousArray<A>(_:)(v139, v141);
  swift_bridgeObjectRelease();
  uint64_t v143 = specialized Data.init<A>(_:)(v142);
  unint64_t v145 = v144;
  swift_release();
  uint64_t v146 = specialized Data.init(paperKitHash:version:)(v143, v145, v6);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v36, v162);
  swift_release();
  swift_bridgeObjectRelease();
  return v146;
}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed UIImage?, @guaranteed ICDocCamImageQuad?, @unowned Bool) -> ()(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(uint64_t, void *, void *, uint64_t))(a1 + 32);
  swift_retain();
  id v11 = a3;
  id v10 = a4;
  v9(a2, a3, a4, a5);
  swift_release();
}

uint64_t specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SortableCalculateExpression>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnalyticsEvent>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<NSTextAlignment>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Color>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowEnum>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, SearchQueryResult)>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PaperDocumentFindResult>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexableTextContent>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ValueTypes_BezierPath.ElementType>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGAffineTransform>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(_NSRange, ReflowWord)>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowTextLine>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 168);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[21 * v8 + 4]) {
          memmove(v12, a4 + 4, 168 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_NSRange>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SearchQueryResult>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<MiniDefaultColor>);
      id v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size_0(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, unint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakObserver>);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      unint64_t v13 = (unint64_t)(v10 + 4);
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x263F8EE78];
      unint64_t v13 = MEMORY[0x263F8EE78] + 32;
      if (result)
      {
LABEL_15:
        if ((unint64_t)v10 < a4 || v13 >= a4 + 32 + 16 * v8)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v10 != (void *)a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        *(void *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
LABEL_26:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<GraphableExpression>, (uint64_t (*)(void))type metadata accessor for GraphableExpression, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CapsuleUndoAction>, MEMORY[0x263F32EC8], MEMORY[0x263F32EC8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SharedTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Link>, (uint64_t (*)(void))type metadata accessor for Link, (uint64_t (*)(void))type metadata accessor for Link);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x263F07508], MEMORY[0x263F07508]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PKStroke>, MEMORY[0x263F14AA8], MEMORY[0x263F14AA8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Shape>, (uint64_t (*)(void))type metadata accessor for Shape, (uint64_t (*)(void))type metadata accessor for Shape);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<PageId?>, (uint64_t *)&demangling cache variable for type metadata for PageId?);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PaperDocument.PDFPageAndPaperPage>, type metadata accessor for PaperDocument.PDFPageAndPaperPage, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AsyncStream<Data>.Continuation>, (uint64_t *)&demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<SharedTagged_3<TaggedPaperPage>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationImporter.ImportedElement>, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRKeyPath>, MEMORY[0x263F330F8], MEMORY[0x263F330F8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CheckedContinuation<(), Never>>, &demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<Signature>>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<Signature>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<Shape>>, &demangling cache variable for type metadata for WeakRef<Shape>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<Image>>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size_0(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  _OWORD v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CanvasUIOverlay>, &demangling cache variable for type metadata for CanvasUIOverlay);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[AnyCanvasElementView]>, &demangling cache variable for type metadata for [AnyCanvasElementView]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<(), Never>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PageOverlayView>, &demangling cache variable for type metadata for PageOverlayView);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>, &demangling cache variable for type metadata for [String]);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size_0(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size_0(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size_0(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      void v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4]) {
          memmove(v16, a4 + 4, 16 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int64_t v14;
  uint64_t v15;
  void *v16;

  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size_0(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      void v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      unint64_t v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v24 = v28;
      *unint64_t v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v25;
  unint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v28, v21);
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  uint64_t vars8;

  char v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  uint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  char v14 = (v11 & 1) == 0;
  unint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v16 = v11;
  BOOL v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    char v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v27 & 1))
    {
      uint64_t v12 = v26;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    char v19 = v18[7];
    uint64_t v20 = type metadata accessor for UUID();
    unint64_t v21 = *(void *)(v20 - 8);
    unint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
    unint64_t v23 = v20;
    uint64_t v24 = v19 + *(void *)(v21 + 72) * v12;
    return v22(v24, a1, v23);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v7 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  unint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
  id v19 = a2;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  id v19;
  uint64_t vars8;

  uint64_t v4 = v3;
  unint64_t v7 = *v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = *(void *)(v15 + 56);

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_15:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  unint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v9, a2, a1, v15);
  id v19 = a2;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  id v19;
  uint64_t vars8;

  uint64_t v4 = v3;
  unint64_t v7 = *v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = *(void *)(v15 + 56);

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_15:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  unint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v9, a2, a1, v15);
  id v19 = a2;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  BOOL v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 40 * v14;
      unint64_t v22 = *(void **)v21;
      swift_bridgeObjectRelease();
      swift_release();

      long long v23 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)uint64_t v21 = *(_OWORD *)a1;
      *(_OWORD *)(v21 + 16) = v23;
      *(void *)(v21 + 32) = *(void *)(a1 + 32);
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v24;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, char *, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRKeyPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  BOOL v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRAsset();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  BOOL v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, char *, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  BOOL v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7] + 8 * v14;
  return outlined assign with take of WeakCalculateExpression(a1, v21);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t (*v20)(unint64_t, uint64_t, uint64_t);
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRKeyPath();
  uint64_t v26 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v11 = (void *)*v3;
  char v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  unint64_t v14 = v11[2];
  uint64_t v15 = (v12 & 1) == 0;
  BOOL v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v17 = v12;
  char v18 = v11[3];
  if (v18 < v16 || (a3 & 1) == 0)
  {
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a3 & 1);
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      char v13 = v23;
      uint64_t v19 = *v4;
      if (v17) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v10, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v13, (uint64_t)v10, a1, v19);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v19 = *v4;
  if ((v17 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v26 + 40);
  uint64_t v21 = v19[7] + *(void *)(v26 + 72) * v13;
  return v20(v21, a1, v8);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRKeyPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  BOOL v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRKeyPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  BOOL v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRAsset();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  BOOL v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  BOOL v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  unint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
  unint64_t v23 = *(void *)(v22 - 8);
  char v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;
  return v24(v26, a1, v25);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v7 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for NSAttributedStringKey(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    BOOL v16 = (_OWORD *)(v15[7] + 32 * v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    return outlined init with take of Any(a1, v16);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
  return a2;
}

{
  void *v3;
  void **v4;
  void *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  _OWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  unint64_t v7 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for CFStringRef(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    BOOL v16 = (_OWORD *)(v15[7] + 32 * v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    return outlined init with take of Any(a1, v16);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
  return a2;
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    char v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return outlined init with take of Any(a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for PDFPageID();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = (void *)*v3;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t result = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    char v19 = *v4;
    if (v17)
    {
LABEL_8:
      *(void *)(v19[7] + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v17 & 1) != (v20 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = result;
  char v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  _s8PaperKit13CRAssetOrDataOWOcTm_0((uint64_t)a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  return specialized _NativeDictionary._insert(at:key:value:)(v13, (uint64_t)v10, a1, v19);
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v10 = a1[4];
  char v11 = (void *)*v3;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  id result = (id)(v14 + v15);
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= (uint64_t)result && (a3 & 1) != 0)
  {
LABEL_7:
    char v19 = *v4;
    if (v17)
    {
LABEL_8:
      char v20 = (void *)(v19[7] + 40 * v13);
      *char v20 = v7;
      v20[1] = v6;
      v20[2] = v9;
      v20[3] = v8;
      _OWORD v20[4] = v10;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= (uint64_t)result && (a3 & 1) == 0)
  {
    id result = specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)((uint64_t)result, a3 & 1);
  id result = (id)specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v17 & 1) != (v21 & 1))
  {
LABEL_15:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = (unint64_t)result;
  char v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  v23[0] = v7;
  v23[1] = v6;
  v23[2] = v9;
  void v23[3] = v8;
  v23[4] = v10;
  specialized _NativeDictionary._insert(at:key:value:)(v13, (uint64_t)a2, (uint64_t)v23, v19);
  return a2;
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  id result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= (uint64_t)result && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7] + 40 * v9;
      long long v17 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)uint64_t v16 = *(_OWORD *)a1;
      *(_OWORD *)(v16 + 16) = v17;
      *(void *)(v16 + 32) = *(void *)(a1 + 32);
      return result;
    }
    goto LABEL_11;
  }
  if (v14 >= (uint64_t)result && (a3 & 1) == 0)
  {
    id result = specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)((uint64_t)result, a3 & 1);
  id result = (id)specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_15:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = (unint64_t)result;
  BOOL v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
  return a2;
}

{
  void *v3;
  void **v4;
  void *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id result;
  unint64_t v18;
  char v19;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  char v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_unknownObjectRelease();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  char v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_15:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  BOOL v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
  return a2;
}

{
  void *v3;
  void **v4;
  void *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id result;
  uint64_t v18;
  char v19;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  char v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_unknownObjectRelease();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  char v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_15:
    type metadata accessor for PDFDocumentWriteOption(0);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  BOOL v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
  return a2;
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, void *a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, void *, uint64_t, uint64_t, uint64_t))
{
  BOOL v11 = v7;
  uint64_t v15 = *v7;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v11;
    if (v21)
    {
LABEL_8:
      char v24 = (void *)(*(void *)(v23 + 56) + 16 * v17);
      id result = (id)swift_release();
      *char v24 = a1;
      v24[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    a5();
    goto LABEL_7;
  }
  a6();
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_15:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  uint64_t v23 = *v11;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  a7(v17, a3, a1, a2, v23);
  return a3;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), void (*a6)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v28 = a5;
  double v29 = a6;
  char v8 = v6;
  uint64_t v30 = a1;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v6;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v8;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = *(void *)(v23 + 56);

      *(void *)(v24 + 8 * v17) = v30;
      return;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v28();
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v21 & 1) != (v26 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v17 = v25;
  uint64_t v23 = *v8;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  v29(v17, v14, v30, v23);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  uint64_t v14 = (void *)*v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 < v19 || (a6 & 1) == 0)
  {
    if (v21 >= v19 && (a6 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_9;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a6 & 1);
    uint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
    if ((v20 & 1) == (v23 & 1))
    {
      unint64_t v16 = v22;
      goto LABEL_9;
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_9:
  int v24 = a3 & 1;
  unint64_t v25 = *v7;
  if (v20)
  {
    BOOL v26 = v24 != 0;
    uint64_t v27 = v25[7] + 24 * v16;
    uint64_t result = outlined consume of AsyncCache<Data, CGImageRef>.CacheState(*(void *)v27, *(void *)(v27 + 8), *(unsigned char *)(v27 + 16));
    *(void *)uint64_t v27 = a1;
    *(void *)(v27 + 8) = a2;
    *(unsigned char *)(v27 + 16) = v26;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a4, a5, a1, a2, v24, v25);
    return outlined copy of Data._Representation(a4, a5);
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    char v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (uint64_t *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t *v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
  return outlined copy of Data._Representation(a3, a4);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  char v5 = v4;
  uint64_t v9 = *v4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3);
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v15 = v10;
  uint64_t v16 = *(void *)(v9 + 24);
  if (v16 >= v14 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v17 = *v5;
    if (v15)
    {
LABEL_8:
      uint64_t v18 = *(void *)(v17 + 56) + 16 * v11;

      *(void *)uint64_t v18 = a1;
      *(void *)(v18 + 8) = a2;
      return;
    }
    goto LABEL_11;
  }
  if (v16 >= v14 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a4 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3);
  if ((v15 & 1) != (v20 & 1))
  {
LABEL_15:
    type metadata accessor for PaperKitPDFPage(0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v11 = v19;
  uint64_t v17 = *v5;
  if (v15) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v11, a3, a1, a2, v17);
  id v21 = a3;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v32 = a2;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = (void *)*v6;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= v20 && (a6 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v7;
    if (v21)
    {
LABEL_8:
      char v24 = (uint64_t *)(v23[7] + 32 * v17);
      unint64_t v25 = (void *)v24[1];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v27 = v32;
      *char v24 = a1;
      v24[1] = v27;
      uint64_t v28 = v34;
      void v24[2] = v33;
      v24[3] = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a6 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a6 & 1);
  unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  if ((v21 & 1) != (v30 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v29;
  uint64_t v23 = *v7;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a5, v11);
  return specialized _NativeDictionary._insert(at:key:value:)(v17, (uint64_t)v14, a1, v32, v33, v34, v23);
}

char *specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = (char *)_minimumMergeRunLength(_:)(v3);
  if ((uint64_t)result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_133;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, (char *)v3, (char *)1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_141;
  }
  unint64_t v126 = result;
  uint64_t v138 = v1;
  uint64_t v123 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_99:
      double v113 = v11;
      uint64_t v125 = v8;
      if (v12 >= 2)
      {
        uint64_t v114 = *v123;
        do
        {
          unint64_t v115 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_128;
          }
          if (!v114) {
            goto LABEL_140;
          }
          char v116 = v113;
          uint64_t v117 = *(void *)&v113[16 * v115 + 32];
          uint64_t v118 = *(void *)&v113[16 * v12 + 24];
          uint64_t v119 = v138;
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v114 + 48 * v117), (char *)(v114 + 48 * *(void *)&v113[16 * v12 + 16]), v114 + 48 * v118, __dst);
          uint64_t v138 = v119;
          if (v119) {
            break;
          }
          if (v118 < v117) {
            goto LABEL_129;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v116 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v116);
          }
          if (v115 >= *((void *)v116 + 2)) {
            goto LABEL_130;
          }
          unint64_t v120 = &v116[16 * v115 + 32];
          *(void *)unint64_t v120 = v117;
          *((void *)v120 + 1) = v118;
          unint64_t v121 = *((void *)v116 + 2);
          if (v12 > v121) {
            goto LABEL_131;
          }
          memmove(&v116[16 * v12 + 16], &v116[16 * v12 + 32], 16 * (v121 - v12));
          double v113 = v116;
          *((void *)v116 + 2) = v121 - 1;
          unint64_t v12 = v121 - 1;
        }
        while (v121 > 2);
      }
LABEL_96:
      swift_bridgeObjectRelease();
      *(void *)(v125 + 16) = 0;
      return (char *)swift_bridgeObjectRelease();
    }
    uint64_t v125 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v125 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v124 = *a1 + 80;
  uint64_t v122 = *a1 - 48;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v127 = v3;
  uint64_t v128 = *a1;
  while (1)
  {
    Swift::Int v13 = v9++;
    Swift::Int v14 = v13;
    if (v9 < v3)
    {
      uint64_t v15 = v10 + 48 * v9;
      uint64_t v16 = *(void *)(v15 + 32);
      char v17 = *(unsigned char *)(v15 + 40);
      uint64_t v18 = v10 + 48 * v13;
      uint64_t v19 = *(void *)(v18 + 32);
      char v20 = *(unsigned char *)(v18 + 40);
      long long v21 = *(_OWORD *)(v15 + 16);
      long long v134 = *(_OWORD *)v15;
      long long v135 = v21;
      uint64_t v136 = v16;
      char v137 = v17;
      long long v22 = *(_OWORD *)(v18 + 16);
      long long v130 = *(_OWORD *)v18;
      long long v131 = v22;
      uint64_t v132 = v19;
      char v133 = v20;
      unsigned int v23 = specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)&v134, (uint64_t)&v130);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v24 = v124 + 48 * v13;
        while (1)
        {
          uint64_t v25 = *(void *)(v24 + 48);
          char v26 = *(unsigned char *)(v24 + 56);
          uint64_t v27 = *(void *)v24;
          char v28 = *(unsigned char *)(v24 + 8);
          long long v29 = *(_OWORD *)(v24 + 32);
          long long v134 = *(_OWORD *)(v24 + 16);
          long long v135 = v29;
          uint64_t v136 = v25;
          char v137 = v26;
          long long v30 = *(_OWORD *)(v24 - 16);
          long long v130 = *(_OWORD *)(v24 - 32);
          long long v131 = v30;
          uint64_t v132 = v27;
          char v133 = v28;
          if ((v23 ^ specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)&v134, (uint64_t)&v130)))break; {
          ++v9;
          }
          v24 += 48;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v23)
      {
        if (v9 < v14) {
          goto LABEL_134;
        }
        Swift::Int v31 = v14;
        if (v14 < v9)
        {
          uint64_t v32 = 48 * v9;
          uint64_t v33 = 48 * v14;
          Swift::Int v34 = v9;
          do
          {
            if (v31 != --v34)
            {
              if (!v10) {
                goto LABEL_139;
              }
              unint64_t v35 = (_OWORD *)(v10 + v33);
              uint64_t v36 = *(void *)(v10 + v33 + 32);
              uint64_t v37 = v10 + v32;
              char v38 = *(unsigned char *)(v10 + v33 + 40);
              long long v39 = *(_OWORD *)(v10 + v33);
              long long v40 = *(_OWORD *)(v10 + v33 + 16);
              long long v42 = *(_OWORD *)(v10 + v32 - 32);
              long long v41 = *(_OWORD *)(v10 + v32 - 16);
              *unint64_t v35 = *(_OWORD *)(v10 + v32 - 48);
              v35[1] = v42;
              void v35[2] = v41;
              *(_OWORD *)(v37 - 48) = v39;
              *(_OWORD *)(v37 - 32) = v40;
              *(void *)(v37 - 16) = v36;
              *(unsigned char *)(v37 - 8) = v38;
            }
            ++v31;
            v32 -= 48;
            v33 += 48;
          }
          while (v31 < v34);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_39;
    }
    if (__OFSUB__(v9, v14)) {
      goto LABEL_132;
    }
    if (v9 - v14 >= (uint64_t)v126) {
      goto LABEL_39;
    }
    if (__OFADD__(v14, v126)) {
      goto LABEL_135;
    }
    Swift::Int v43 = (uint64_t)&v126[v14] >= v3 ? v3 : (Swift::Int)&v126[v14];
    if (v43 < v14) {
      break;
    }
    if (v9 != v43)
    {
      uint64_t v97 = v122 + 48 * v9;
      Swift::Int v44 = v14;
      do
      {
        Swift::Int v98 = v44;
        uint64_t v99 = v97;
        do
        {
          uint64_t v100 = *(void *)(v99 + 80);
          char v101 = *(unsigned char *)(v99 + 88);
          uint64_t v102 = *(void *)(v99 + 32);
          int v103 = (_OWORD *)(v99 + 48);
          char v104 = *(unsigned char *)(v99 + 40);
          long long v105 = *(_OWORD *)(v99 + 64);
          long long v134 = *(_OWORD *)(v99 + 48);
          long long v135 = v105;
          uint64_t v136 = v100;
          char v137 = v101;
          long long v106 = *(_OWORD *)(v99 + 16);
          long long v130 = *(_OWORD *)v99;
          long long v131 = v106;
          uint64_t v132 = v102;
          char v133 = v104;
          if ((specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)&v134, (uint64_t)&v130) & 1) == 0)break; {
          if (!v10)
          }
            goto LABEL_137;
          long long v108 = *(_OWORD *)(v99 + 48);
          long long v107 = *(_OWORD *)(v99 + 64);
          long long v109 = *(_OWORD *)(v99 + 16);
          long long v110 = *(_OWORD *)(v99 + 32);
          *int v103 = *(_OWORD *)v99;
          *(_OWORD *)(v99 + 64) = v109;
          uint64_t v111 = *(void *)(v99 + 80);
          char v112 = *(unsigned char *)(v99 + 88);
          *(_OWORD *)uint64_t v99 = v108;
          *(_OWORD *)(v99 + 16) = v107;
          *(void *)(v99 + 32) = v111;
          *(unsigned char *)(v99 + 40) = v112;
          v99 -= 48;
          ++v98;
          v103[2] = v110;
        }
        while (v9 != v98);
        ++v9;
        v97 += 48;
      }
      while (v9 != v43);
      Swift::Int v9 = v43;
      if (v43 < v44) {
        goto LABEL_127;
      }
      goto LABEL_40;
    }
LABEL_39:
    Swift::Int v44 = v14;
    if (v9 < v14) {
      goto LABEL_127;
    }
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v46 = *((void *)v11 + 2);
    unint64_t v45 = *((void *)v11 + 3);
    unint64_t v12 = v46 + 1;
    if (v46 >= v45 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v45 > 1), v46 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v47 = v11 + 32;
    unint64_t v48 = &v11[16 * v46 + 32];
    *(void *)unint64_t v48 = v44;
    *((void *)v48 + 1) = v9;
    if (v46)
    {
      uint64_t v10 = v128;
      while (1)
      {
        unint64_t v49 = v12 - 1;
        if (v12 >= 4)
        {
          id v54 = &v47[16 * v12];
          uint64_t v55 = *((void *)v54 - 8);
          uint64_t v56 = *((void *)v54 - 7);
          BOOL v60 = __OFSUB__(v56, v55);
          uint64_t v57 = v56 - v55;
          if (v60) {
            goto LABEL_116;
          }
          uint64_t v59 = *((void *)v54 - 6);
          uint64_t v58 = *((void *)v54 - 5);
          BOOL v60 = __OFSUB__(v58, v59);
          uint64_t v52 = v58 - v59;
          char v53 = v60;
          if (v60) {
            goto LABEL_117;
          }
          unint64_t v61 = v12 - 2;
          uint64_t v62 = &v47[16 * v12 - 32];
          uint64_t v64 = *(void *)v62;
          uint64_t v63 = *((void *)v62 + 1);
          BOOL v60 = __OFSUB__(v63, v64);
          uint64_t v65 = v63 - v64;
          if (v60) {
            goto LABEL_119;
          }
          BOOL v60 = __OFADD__(v52, v65);
          uint64_t v66 = v52 + v65;
          if (v60) {
            goto LABEL_122;
          }
          if (v66 >= v57)
          {
            CGFloat v84 = &v47[16 * v49];
            uint64_t v86 = *(void *)v84;
            uint64_t v85 = *((void *)v84 + 1);
            BOOL v60 = __OFSUB__(v85, v86);
            uint64_t v87 = v85 - v86;
            if (v60) {
              goto LABEL_126;
            }
            BOOL v77 = v52 < v87;
            goto LABEL_77;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v78 = *((void *)v11 + 4);
            uint64_t v79 = *((void *)v11 + 5);
            BOOL v60 = __OFSUB__(v79, v78);
            uint64_t v71 = v79 - v78;
            char v72 = v60;
            goto LABEL_71;
          }
          uint64_t v51 = *((void *)v11 + 4);
          uint64_t v50 = *((void *)v11 + 5);
          BOOL v60 = __OFSUB__(v50, v51);
          uint64_t v52 = v50 - v51;
          char v53 = v60;
        }
        if (v53) {
          goto LABEL_118;
        }
        unint64_t v61 = v12 - 2;
        uint64_t v67 = &v47[16 * v12 - 32];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        BOOL v70 = __OFSUB__(v68, v69);
        uint64_t v71 = v68 - v69;
        char v72 = v70;
        if (v70) {
          goto LABEL_121;
        }
        double v73 = &v47[16 * v49];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        BOOL v60 = __OFSUB__(v74, v75);
        uint64_t v76 = v74 - v75;
        if (v60) {
          goto LABEL_124;
        }
        if (__OFADD__(v71, v76)) {
          goto LABEL_125;
        }
        if (v71 + v76 >= v52)
        {
          BOOL v77 = v52 < v76;
LABEL_77:
          if (v77) {
            unint64_t v49 = v61;
          }
          goto LABEL_79;
        }
LABEL_71:
        if (v72) {
          goto LABEL_120;
        }
        unint64_t v80 = &v47[16 * v49];
        uint64_t v82 = *(void *)v80;
        uint64_t v81 = *((void *)v80 + 1);
        BOOL v60 = __OFSUB__(v81, v82);
        uint64_t v83 = v81 - v82;
        if (v60) {
          goto LABEL_123;
        }
        if (v83 < v71) {
          goto LABEL_15;
        }
LABEL_79:
        unint64_t v88 = v49 - 1;
        if (v49 - 1 >= v12)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (!v10) {
          goto LABEL_138;
        }
        uint64_t v89 = v11;
        uint64_t v90 = v10;
        uint64_t v91 = &v47[16 * v88];
        uint64_t v92 = *(void *)v91;
        uint64_t v93 = &v47[16 * v49];
        uint64_t v94 = *((void *)v93 + 1);
        uint64_t v95 = v138;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v90 + 48 * *(void *)v91), (char *)(v90 + 48 * *(void *)v93), v90 + 48 * v94, __dst);
        uint64_t v138 = v95;
        if (v95) {
          goto LABEL_96;
        }
        if (v94 < v92) {
          goto LABEL_113;
        }
        if (v49 > *((void *)v89 + 2)) {
          goto LABEL_114;
        }
        *(void *)uint64_t v91 = v92;
        *(void *)&v47[16 * v88 + 8] = v94;
        unint64_t v96 = *((void *)v89 + 2);
        if (v49 >= v96) {
          goto LABEL_115;
        }
        uint64_t v11 = v89;
        unint64_t v12 = v96 - 1;
        memmove(&v47[16 * v49], v93 + 16, 16 * (v96 - 1 - v49));
        *((void *)v89 + 2) = v96 - 1;
        BOOL v77 = v96 > 2;
        uint64_t v10 = v128;
        if (!v77) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
    uint64_t v10 = v128;
LABEL_15:
    Swift::Int v3 = v127;
    if (v9 >= v127)
    {
      uint64_t v8 = v125;
      goto LABEL_99;
    }
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  uint64_t result = (char *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(char *result, char *a2, char *a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 48 * (void)a3 - 48;
LABEL_5:
    Swift::Int v9 = v6;
    uint64_t v10 = v8;
    while (1)
    {
      uint64_t v11 = *(void *)(v10 + 80);
      char v12 = *(unsigned char *)(v10 + 88);
      uint64_t v13 = *(void *)(v10 + 32);
      Swift::Int v14 = (_OWORD *)(v10 + 48);
      char v15 = *(unsigned char *)(v10 + 40);
      long long v16 = *(_OWORD *)(v10 + 64);
      v27[0] = *(_OWORD *)(v10 + 48);
      v27[1] = v16;
      uint64_t v28 = v11;
      char v29 = v12;
      long long v17 = *(_OWORD *)(v10 + 16);
      v24[0] = *(_OWORD *)v10;
      v24[1] = v17;
      uint64_t v25 = v13;
      char v26 = v15;
      uint64_t result = (char *)specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)v27, (uint64_t)v24);
      if ((result & 1) == 0)
      {
LABEL_4:
        ++v4;
        v8 += 48;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      long long v19 = *(_OWORD *)(v10 + 48);
      long long v18 = *(_OWORD *)(v10 + 64);
      long long v20 = *(_OWORD *)(v10 + 16);
      long long v21 = *(_OWORD *)(v10 + 32);
      *Swift::Int v14 = *(_OWORD *)v10;
      *(_OWORD *)(v10 + 64) = v20;
      uint64_t v22 = *(void *)(v10 + 80);
      char v23 = *(unsigned char *)(v10 + 88);
      *(_OWORD *)uint64_t v10 = v19;
      *(_OWORD *)(v10 + 16) = v18;
      *(void *)(v10 + 32) = v22;
      *(unsigned char *)(v10 + 40) = v23;
      v10 -= 48;
      ++v9;
      v14[2] = v21;
      if (v4 == v9) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v6, &demangling cache variable for type metadata for CRAsset?);
  uint64_t v7 = type metadata accessor for CRAsset();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    long long v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  uint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    uint64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    uint64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    uint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    int64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  uint64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  int64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v13;
    goto LABEL_34;
  }
  int64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    uint64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    uint64_t v7 = (v14 - 1) & v14;
    int64_t v12 = v16 + (v13 << 6);
    uint64_t v8 = v13;
    goto LABEL_8;
  }
  unint64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  int64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    uint64_t v13 = v15;
    goto LABEL_19;
  }
  uint64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  int64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  unint64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    uint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  int64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    int64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  uint64_t v5 = result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    long long v20 = *(void **)(*(void *)(a4 + 48) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    long long v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    long long v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_DWORD *)(*(void *)(a4 + 48) + 4 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
}

{
  specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
}

{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void (**v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (**v40)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v41;
  uint64_t v42;
  uint64_t v43;

  int64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v8 - 8);
  int64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = type metadata accessor for UUID();
  long long v42 = *(void *)(v11 - 8);
  v12.n128_f64[0] = MEMORY[0x270FA5388](v11);
  long long v41 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v43 = a4;
  int64_t v15 = a4 + 56;
  unint64_t v14 = *(void *)(a4 + 56);
  uint64_t v33 = -1 << *(unsigned char *)(a4 + 32);
  if (-v33 < 64) {
    unint64_t v16 = ~(-1 << -(char)v33);
  }
  else {
    unint64_t v16 = -1;
  }
  int64_t v17 = v16 & v14;
  if (!a2)
  {
    unint64_t v18 = 0;
LABEL_39:
    char v29 = ~v33;
    *a1 = v43;
    a1[1] = v15;
    a1[2] = v29;
    a1[3] = v18;
    a1[4] = v17;
    return;
  }
  if (!a3)
  {
    unint64_t v18 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v37 = a3;
  unint64_t v18 = 0;
  int64_t v19 = 0;
  long long v20 = v41;
  long long v39 = v42 + 16;
  long long v40 = (void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v42 + 56);
  char v38 = v42 + 48;
  uint64_t v36 = (void (**)(char *, char *, uint64_t))(v42 + 32);
  Swift::Int v34 = v15;
  unint64_t v35 = (unint64_t)(63 - v33) >> 6;
  Swift::Int v31 = v35 - 1;
  uint64_t v32 = a1;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  uint64_t v22 = v21 | (v18 << 6);
  while (1)
  {
    char v26 = v42;
    uint64_t v27 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v42 + 16))(v10, *(void *)(v43 + 48) + v27 * v22, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v10, 1, v11) == 1)
    {
      int64_t v15 = v34;
      goto LABEL_38;
    }
    ++v19;
    uint64_t v28 = *v36;
    (*v36)(v20, v10, v11);
    v28(a2, v20, v11);
    if (v19 == v37)
    {
      a1 = v32;
      int64_t v15 = v34;
      goto LABEL_39;
    }
    a2 += v27;
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    char v23 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    int64_t v15 = v34;
    if (v23 >= v35) {
      goto LABEL_37;
    }
    uint64_t v24 = *(void *)(v34 + 8 * v23);
    if (!v24)
    {
      uint64_t v25 = v18 + 2;
      ++v18;
      if (v23 + 1 >= v35) {
        goto LABEL_37;
      }
      uint64_t v24 = *(void *)(v34 + 8 * v25);
      if (v24) {
        goto LABEL_14;
      }
      unint64_t v18 = v23 + 1;
      if (v23 + 2 >= v35) {
        goto LABEL_37;
      }
      uint64_t v24 = *(void *)(v34 + 8 * (v23 + 2));
      if (v24)
      {
        v23 += 2;
      }
      else
      {
        unint64_t v18 = v23 + 2;
        if (v23 + 3 >= v35) {
          goto LABEL_37;
        }
        uint64_t v24 = *(void *)(v34 + 8 * (v23 + 3));
        if (!v24)
        {
          uint64_t v25 = v23 + 4;
          unint64_t v18 = v23 + 3;
          if (v23 + 4 < v35)
          {
            uint64_t v24 = *(void *)(v34 + 8 * v25);
            if (!v24)
            {
              while (1)
              {
                char v23 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_42;
                }
                if (v23 >= v35)
                {
                  unint64_t v18 = v31;
                  goto LABEL_37;
                }
                uint64_t v24 = *(void *)(v34 + 8 * v23);
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            char v23 = v25;
            goto LABEL_21;
          }
LABEL_37:
          (*v40)(v10, 1, 1, v11, v12);
          int64_t v17 = 0;
LABEL_38:
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
          a1 = v32;
          goto LABEL_39;
        }
        v23 += 3;
      }
    }
LABEL_21:
    int64_t v17 = (v24 - 1) & v24;
    uint64_t v22 = __clz(__rbit64(v24)) + (v23 << 6);
    unint64_t v18 = v23;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = (void *)result;
  if (a4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!a2) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!a2) {
      goto LABEL_26;
    }
  }
  if (!a3)
  {
LABEL_27:
    *unint64_t v7 = a4;
    v7[1] = v8;
    return a3;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (!v8)
  {
LABEL_26:
    a3 = 0;
    goto LABEL_27;
  }
  if ((a4 & 0xC000000000000001) != 0)
  {
    BOOL v9 = __OFSUB__(v8--, 1);
    if (!v9)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t result = MEMORY[0x21054E050](v8, a4);
        *(void *)(a2 + 8 * v10) = result;
        if (a3 - 1 == v10) {
          goto LABEL_27;
        }
        if (!v8)
        {
          a3 = v10 + 1;
          goto LABEL_27;
        }
        ++v10;
        BOOL v9 = __OFSUB__(v8--, 1);
      }
      while (!v9);
    }
    __break(1u);
  }
  if (!__OFSUB__(v8, 1))
  {
    unint64_t v11 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8 - 1 >= v11)
    {
LABEL_20:
      __break(1u);
    }
    else
    {
      uint64_t v12 = 0;
      while (1)
      {
        *(void *)(a2 + 8 * v12) = *(void *)(a4 + 24 + 8 * v8);
        if (a3 - 1 == v12) {
          break;
        }
        if (v8 == 1)
        {
          uint64_t v8 = 0;
          a3 = v12 + 1;
          goto LABEL_22;
        }
        swift_retain();
        unint64_t v13 = v8 - 2;
        ++v12;
        --v8;
        if (v13 >= v11) {
          goto LABEL_20;
        }
      }
    }
    --v8;
LABEL_22:
    swift_retain();
    goto LABEL_27;
  }
LABEL_29:
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  Swift::Int v43 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13.n128_f64[0] = MEMORY[0x270FA5388](v12);
  long long v42 = (char *)&v33 - v14;
  uint64_t v44 = a4;
  uint64_t v17 = *(void *)(a4 + 56);
  uint64_t v16 = a4 + 56;
  uint64_t v15 = v17;
  uint64_t v38 = v16;
  uint64_t v18 = -1 << *(unsigned char *)(v16 - 24);
  if (-v18 < 64) {
    uint64_t v19 = ~(-1 << -(char)v18);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v15;
  if (!a2)
  {
    int64_t v21 = 0;
LABEL_37:
    uint64_t v32 = v38;
    *a1 = v44;
    a1[1] = v32;
    a1[2] = ~v18;
    a1[3] = v21;
    a1[4] = v20;
    return;
  }
  if (!a3)
  {
    int64_t v21 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v35 = -1 << *(unsigned char *)(v16 - 24);
  uint64_t v36 = a1;
  int64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v39 = v10 + 32;
  uint64_t v40 = v10 + 16;
  int64_t v37 = (unint64_t)(63 - v18) >> 6;
  int64_t v34 = v37 - 1;
  uint64_t v41 = a3;
  char v23 = v42;
  if (!v20) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  unint64_t v25 = v24 | (v21 << 6);
  while (1)
  {
    ++v22;
    char v29 = v43;
    uint64_t v30 = *(void *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))(v43, *(void *)(v44 + 48) + v30 * v25, v9, v13);
    Swift::Int v31 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v31(v23, v29, v9);
    v31(a2, v23, v9);
    if (v22 == v41) {
      goto LABEL_36;
    }
    a2 += v30;
    if (v20) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v26 >= v37) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v38 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v21 = v26;
  }
  v21 += 2;
  if (v26 + 1 >= v37)
  {
    unint64_t v20 = 0;
    int64_t v21 = v26;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v38 + 8 * v21);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v37) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v38 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v21 = v26 + 3;
  if (v26 + 3 >= v37)
  {
    unint64_t v20 = 0;
    int64_t v21 = v26 + 2;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v38 + 8 * v21);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v21;
    goto LABEL_18;
  }
  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v37)
  {
LABEL_32:
    unint64_t v20 = 0;
LABEL_36:
    uint64_t v18 = v35;
    a1 = v36;
    goto LABEL_37;
  }
  unint64_t v27 = *(void *)(v38 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v26 >= v37)
    {
      unint64_t v20 = 0;
      int64_t v21 = v34;
      goto LABEL_36;
    }
    unint64_t v27 = *(void *)(v38 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }
LABEL_40:
  __break(1u);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [PKAttachmentView] and conformance [A], &demangling cache variable for type metadata for [PKAttachmentView]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKAttachmentView]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKAttachmentView);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(void))type metadata accessor for AnyCanvasElementView, (unint64_t *)&lazy protocol witness table cache variable for type [AnyCanvasElementView] and conformance [A], &demangling cache variable for type metadata for [AnyCanvasElementView], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [NSObject] and conformance [A], &demangling cache variable for type metadata for [NSObject]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSObject]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(void))type metadata accessor for ReflowElement, &lazy protocol witness table cache variable for type [ReflowElement] and conformance [A], &demangling cache variable for type metadata for [ReflowElement], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [CHStrokeIdentifier] and conformance [A], &demangling cache variable for type metadata for [CHStrokeIdentifier]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CHStrokeIdentifier]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          swift_unknownObjectRetain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CHStrokeIdentifier);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [UIMenu] and conformance [A], &demangling cache variable for type metadata for [UIMenu]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIMenu]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [PDFAnnotation] and conformance [A], &demangling cache variable for type metadata for [PDFAnnotation]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PDFAnnotation]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [PKStroke] and conformance [A], &demangling cache variable for type metadata for [PKStroke]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKStroke]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKStroke);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          uint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          id v24 = *v23;
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(unsigned char *, void);
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  unsigned char v26[32];

  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          uint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          id v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_NSRange, ReflowWord));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnalyticsEvent);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 168 * a1 + 32;
    unint64_t v6 = a3 + 168 * v4;
    if (v5 >= v6 || v5 + 168 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 2 * a1 + 32);
    size_t v6 = 2 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 40 * a1 + 32);
    size_t v6 = 40 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 48 * a1 + 32);
    size_t v6 = 48 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized PaperKitPDFDocument.updatePDFPage<A>(in:use:options:page:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a3;
  uint64_t v42 = a2;
  uint64_t v47 = a1;
  uint64_t v46 = type metadata accessor for CRKeyPath();
  uint64_t v45 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v44 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocumentPage?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v12 - 8);
  unint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = a4;
  uint64_t v23 = a4 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v23, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v24 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
LABEL_4:
    unint64_t v25 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
    int64_t v26 = v17;
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, v25);
  }
  uint64_t v41 = v22;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v14[*(int *)(v24 + 20)], (uint64_t)v17, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1) {
    goto LABEL_4;
  }
  int64_t v28 = v21;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
  WeakTagged_3.tagged3.getter();
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v8, 1, v29) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?);
  }
  else
  {
    type metadata accessor for PaperDocument(0);
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v29);
    uint64_t v31 = type metadata accessor for PaperDocumentPage();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v11, 1, v31) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for PaperDocumentPage?);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
      CRRegister.wrappedValue.getter();
      char v32 = v48[0];
      _s8PaperKit0A8DocumentVWOhTm_0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
      if ((v32 & 0x20) != 0) {
        return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      }
    }
  }
  uint64_t v33 = type metadata accessor for PaperDocument(0);
  uint64_t v34 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  WeakTagged_3.subscript.getter();
  uint64_t v35 = v51;
  if (!v51)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    unint64_t v25 = &demangling cache variable for type metadata for PaperPage?;
    int64_t v26 = (char *)v50;
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, v25);
  }
  uint64_t v36 = v19;
  uint64_t v37 = v52;
  __swift_project_boxed_opaque_existential_1(v50, v51);
  uint64_t v38 = v18;
  uint64_t v39 = v44;
  MEMORY[0x21054B930](v38);
  uint64_t v49 = v42;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v43, (uint64_t)v48, (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
  (*(void (**)(uint64_t, char *, uint64_t *, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 128))(v41, v39, &v49, v47, v48, v33, v34, v35, v37);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v39, v46);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v38);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
}

void specialized PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:capsule:options:)(unint64_t a1, uint64_t a2, void *a3)
{
  id v177 = a3;
  uint64_t v175 = a2;
  uint64_t v157 = type metadata accessor for CRKeyPath();
  uint64_t v156 = *(void *)(v157 - 8);
  MEMORY[0x270FA5388](v157);
  uint64_t v155 = (char *)&v152 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x270FA5388](v5 - 8);
  CGFloat v163 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  uint64_t v164 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  double v159 = (char *)&v152 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = type metadata accessor for Date();
  uint64_t v167 = *(void *)(v166 - 8);
  MEMORY[0x270FA5388](v166);
  uint64_t v158 = (char *)&v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
  MEMORY[0x270FA5388](v162);
  uint64_t v171 = (uint64_t)&v152 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v11 - 8);
  CGFloat v161 = (char *)&v152 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v160 = (char *)&v152 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v165 = (uint64_t)&v152 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v168 = (uint64_t)&v152 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
  unint64_t v170 = *(void *)(v19 - 8);
  uint64_t v20 = *(void *)(v170 + 64);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v173 = (uint64_t)&v152 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v174 = (uint64_t)&v152 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  uint64_t v169 = *(void *)(v23 - 8);
  uint64_t v24 = *(void *)(v169 + 64);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v172 = (uint64_t)&v152 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  unint64_t v27 = (char *)&v152 - v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v152 - v29;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v152 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v175, (uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v34, v30, v31);
    unint64_t v36 = a1 >> 62;
    uint64_t v37 = a1;
    unint64_t v38 = a1;
    id v35 = v177;
    if (v36)
    {
      if (v36 != 1)
      {
LABEL_8:
        (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
        goto LABEL_9;
      }
      uint64_t v37 = v38 & 0x3FFFFFFFFFFFFFFFLL;
    }
    type metadata accessor for CanvasElementPDFAnnotation();
    uint64_t v39 = swift_dynamicCastClass();
    if (v39)
    {
      uint64_t v154 = v39;
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>);
      uint64_t v41 = v174;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v174, 1, 1, v40);
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v27, v34, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v27, 0, 1, v31);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v41, v173, (uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v27, v172, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      uint64_t v42 = *(unsigned __int8 *)(v170 + 80);
      uint64_t v153 = v37;
      uint64_t v43 = (v42 + 16) & ~v42;
      unint64_t v44 = (v20 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v45 = (*(unsigned __int8 *)(v169 + 80) + v44 + 8) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80);
      uint64_t v46 = v45 + v24;
      uint64_t v175 = v7;
      uint64_t v47 = swift_allocObject();
      unint64_t v170 = v38;
      uint64_t v48 = v47;
      unint64_t v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + v47;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v173, v47 + v43, (uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
      *(void *)(v48 + v44) = v153;
      uint64_t v50 = v48 + v45;
      id v35 = v177;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v172, v50, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      *(unsigned char *)(v48 + v46) = 0;
      *(void *)(v49 + 8) = 0;
      *(void *)(v49 + 16) = 0;
      uint64_t v51 = (void (**)(void *))(v154
                                         + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation);
      uint64_t v52 = *(void *)(v154 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation);
      *uint64_t v51 = partial apply for specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:);
      v51[1] = (void (*)(void *))v48;
      outlined copy of PaperDocument.PDFDocumentUse(v170);
      uint64_t v7 = v175;
      outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v52);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v174, (uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
    }
    goto LABEL_8;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  id v35 = v177;
LABEL_9:
  uint64_t v53 = type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  long long v54 = v179;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == (void)v54 && v55 == *((void *)&v54 + 1))
  {
    swift_bridgeObjectRelease_n();
    return;
  }
  uint64_t v175 = v7;
  char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v56)
  {
    swift_bridgeObjectRelease();
    return;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == (void)v54 && v57 == *((void *)&v54 + 1))
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v58 & 1) == 0)
  {
    uint64_t v174 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
    CRRegister.wrappedValue.getter();
    long long v65 = v179;
    id v66 = objc_msgSend(v35, sel_widgetStringValue);
    if (v66)
    {
      uint64_t v67 = v66;
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v70 = v69;

      if (*((void *)&v65 + 1))
      {
        if (v70)
        {
          if (v65 == __PAIR128__(v70, v68))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_46;
          }
          char v144 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v144)
          {
LABEL_46:
            CRRegister.wrappedValue.getter();
            long long v74 = v179;
            id v75 = objc_msgSend(v35, sel_contents);
            if (v75)
            {
              uint64_t v76 = v75;
              uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v79 = v78;

              if (*((void *)&v74 + 1))
              {
                uint64_t v80 = v162;
                if (v79)
                {
                  if (v74 == __PAIR128__(v79, v77))
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    goto LABEL_59;
                  }
                  char v145 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v145)
                  {
LABEL_59:
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
                    CRRegister.wrappedValue.getter();
                    uint64_t v82 = v179;
                    uint64_t v83 = *MEMORY[0x263F14790];
                    if (objc_msgSend(v35, sel_valueForAnnotationKey_, *MEMORY[0x263F14790]))
                    {
                      _bridgeAnyObjectToAny(_:)();
                      swift_unknownObjectRelease();
                    }
                    else
                    {
                      memset(v183, 0, sizeof(v183));
                    }
                    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v183, (uint64_t)&v179, &demangling cache variable for type metadata for Any?);
                    if (v181 == 0.0)
                    {
                      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v179, &demangling cache variable for type metadata for Any?);
                    }
                    else if (swift_dynamicCast())
                    {
                      CGFloat v84 = v35;
                      if (v82 == (void)v178)
                      {
LABEL_69:
                        uint64_t v86 = v176 + *(int *)(v53 + 32);
                        uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
                        CRRegister.wrappedValue.getter();
                        id v88 = objc_msgSend(v84, sel_modificationDate);
                        uint64_t v89 = v166;
                        uint64_t v174 = v86;
                        uint64_t v173 = v87;
                        if (v88)
                        {
                          uint64_t v90 = v88;
                          uint64_t v91 = v165;
                          static Date._unconditionallyBridgeFromObjectiveC(_:)();

                          uint64_t v92 = 0;
                          uint64_t v93 = v171;
                        }
                        else
                        {
                          uint64_t v92 = 1;
                          uint64_t v93 = v171;
                          uint64_t v91 = v165;
                        }
                        uint64_t v94 = v167;
                        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v167 + 56))(v91, v92, 1, v89);
                        uint64_t v95 = v93 + *(int *)(v80 + 48);
                        uint64_t v96 = v168;
                        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v168, v171, &demangling cache variable for type metadata for Date?);
                        uint64_t v97 = v171;
                        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v91, v95, &demangling cache variable for type metadata for Date?);
                        Swift::Int v98 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
                        if (v98(v97, 1, v89) == 1)
                        {
                          outlined destroy of StocksKitCurrencyCache.Provider?(v91, &demangling cache variable for type metadata for Date?);
                          uint64_t v97 = v171;
                          outlined destroy of StocksKitCurrencyCache.Provider?(v96, &demangling cache variable for type metadata for Date?);
                          if (v98(v95, 1, v89) == 1)
                          {
                            outlined destroy of StocksKitCurrencyCache.Provider?(v97, &demangling cache variable for type metadata for Date?);
                            goto LABEL_82;
                          }
                        }
                        else
                        {
                          uint64_t v99 = (uint64_t)v160;
                          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v97, (uint64_t)v160, &demangling cache variable for type metadata for Date?);
                          if (v98(v95, 1, v89) != 1)
                          {
                            uint64_t v109 = v167;
                            long long v110 = v158;
                            (*(void (**)(char *, uint64_t, uint64_t))(v167 + 32))(v158, v95, v89);
                            lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
                            char v111 = dispatch thunk of static Equatable.== infix(_:_:)();
                            char v112 = *(void (**)(char *, uint64_t))(v109 + 8);
                            v112(v110, v166);
                            outlined destroy of StocksKitCurrencyCache.Provider?(v165, &demangling cache variable for type metadata for Date?);
                            outlined destroy of StocksKitCurrencyCache.Provider?(v168, &demangling cache variable for type metadata for Date?);
                            v112(v160, v166);
                            uint64_t v89 = v166;
                            outlined destroy of StocksKitCurrencyCache.Provider?(v171, &demangling cache variable for type metadata for Date?);
                            uint64_t v100 = v161;
                            if (v111) {
                              goto LABEL_82;
                            }
                            goto LABEL_78;
                          }
                          outlined destroy of StocksKitCurrencyCache.Provider?(v165, &demangling cache variable for type metadata for Date?);
                          outlined destroy of StocksKitCurrencyCache.Provider?(v168, &demangling cache variable for type metadata for Date?);
                          (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v99, v89);
                        }
                        outlined destroy of StocksKitCurrencyCache.Provider?(v97, (uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
                        uint64_t v100 = v161;
LABEL_78:
                        CRRegister.wrappedValue.getter();
                        if (v98((uint64_t)v100, 1, v89) == 1)
                        {
                          isdouble a = 0;
                        }
                        else
                        {
                          isdouble a = Date._bridgeToObjectiveC()().super.isa;
                          (*(void (**)(char *, uint64_t))(v167 + 8))(v100, v89);
                        }
                        objc_msgSend(v177, sel_setModificationDate_, isa);

LABEL_82:
                        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
                        CRRegister.wrappedValue.getter();
                        uint64_t v102 = v179;
                        uint64_t v103 = PDFAnnotation.quadPoints.getter();
                        if (v102)
                        {
                          if (v103)
                          {
                            specialized static Array<A>.== infix(_:_:)(v102, v103, v104);
                            char v106 = v105;
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            id v107 = v177;
                            long long v108 = &selRef_allowsFingerDrawing;
                            if (v106)
                            {
LABEL_92:
                              CRRegister.wrappedValue.getter();
                              CGFloat v113 = *((double *)&v179 + 1);
                              CGFloat v114 = v180;
                              CGFloat v115 = v181;
                              CGFloat v116 = v182;
                              swift_bridgeObjectRelease();
                              objc_msgSend(v107, sel_bounds);
                              v185.origin.CGFloat x = v117;
                              v185.origin.CGFloat y = v118;
                              v185.size.CGFloat width = v119;
                              v185.size.CGFloat height = v120;
                              v184.origin.CGFloat x = v113;
                              v184.origin.CGFloat y = v114;
                              v184.size.CGFloat width = v115;
                              v184.size.CGFloat height = v116;
                              if (!CGRectEqualToRect(v184, v185))
                              {
                                CRRegister.wrappedValue.getter();
                                double v121 = *((double *)&v179 + 1);
                                double v122 = v180;
                                double v123 = v181;
                                double v124 = v182;
                                swift_bridgeObjectRelease();
                                objc_msgSend(v107, sel_setBounds_, v121, v122, v123, v124);
                              }
                              CRRegister.wrappedValue.getter();
                              long long v125 = v179;
                              uint64_t v126 = *MEMORY[0x263F147B0];
                              if (!objc_msgSend(v107, v108[134], *MEMORY[0x263F147B0]))
                              {
                                __break(1u);
                                return;
                              }
                              _bridgeAnyObjectToAny(_:)();
                              swift_unknownObjectRelease();
                              outlined init with take of Any(v183, &v179);
                              swift_dynamicCast();
                              if (v125 == v178)
                              {
                                swift_bridgeObjectRelease_n();
                                uint64_t v127 = v175;
                              }
                              else
                              {
                                char v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                uint64_t v127 = v175;
                                if ((v128 & 1) == 0)
                                {
                                  CRRegister.wrappedValue.getter();
                                  unint64_t v129 = (void *)MEMORY[0x21054D080](v179, *((void *)&v179 + 1));
                                  swift_bridgeObjectRelease();
                                  objc_msgSend(v107, sel_setValue_forAnnotationKey_, v129, v126);
                                }
                              }
                              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
                              CRRegister.wrappedValue.getter();
                              long long v130 = (void *)v179;
                              if ((void)v179)
                              {
                                id v131 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, (void)v179);

                                id v132 = objc_msgSend(v107, sel_color);
                                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
                                char v133 = static NSObject.== infix(_:_:)();

                                uint64_t v134 = v164;
                                if ((v133 & 1) == 0) {
                                  objc_msgSend(v107, sel_setColor_, v131);
                                }
                              }
                              else
                              {
                                uint64_t v134 = v164;
                              }
                              uint64_t v135 = (uint64_t)v163;
                              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
                              CRRegister.wrappedValue.getter();
                              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v135, 1, v127) == 1)
                              {
                                outlined destroy of StocksKitCurrencyCache.Provider?(v135, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
                                return;
                              }
                              uint64_t v136 = v159;
                              (*(void (**)(char *, uint64_t, uint64_t))(v134 + 32))(v159, v135, v127);
                              id v137 = objc_msgSend(v107, sel_page);
                              if (v137)
                              {
                                uint64_t v138 = v137;
                                type metadata accessor for PaperKitPDFPage(0);
                                id v139 = (id)swift_dynamicCastClass();
                                if (v139)
                                {
                                  uint64_t v140 = v155;
                                  WeakRef.id.getter();
                                  id v141 = objc_msgSend(v139, sel_annotations);
                                  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
                                  unint64_t v142 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                                  MEMORY[0x270FA5388](v143);
                                  *(&v152 - 2) = (uint64_t)v140;
                                  id v139 = specialized Sequence.first(where:)((uint64_t (*)(id *))closure #1 in PaperKitPDFPage.annotationFor(id:)partial apply, (uint64_t)(&v152 - 4), v142);

                                  swift_bridgeObjectRelease();
                                  uint64_t v127 = v175;
                                  (*(void (**)(char *, uint64_t))(v156 + 8))(v140, v157);
                                }
                                else
                                {
                                }
                              }
                              else
                              {
                                id v139 = 0;
                              }
                              id v146 = objc_msgSend(v107, sel_popup);
                              if (v146)
                              {
                                uint64_t v147 = v146;
                                if (!v139)
                                {

LABEL_123:
                                  objc_msgSend(v107, sel_setPopup_, v139);
LABEL_124:

                                  goto LABEL_125;
                                }
                                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
                                id v139 = v139;
                                id v148 = v147;
                                char v149 = static NSObject.== infix(_:_:)();

                                if (v149) {
                                  goto LABEL_124;
                                }
                              }
                              else if (!v139)
                              {
LABEL_125:
                                (*(void (**)(char *, uint64_t))(v134 + 8))(v136, v127);
                                return;
                              }
                              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
                              id v139 = v139;
                              id v150 = v107;
                              char v151 = static NSObject.== infix(_:_:)();

                              if (v151) {
                                goto LABEL_124;
                              }
                              goto LABEL_123;
                            }
LABEL_91:
                            CRRegister.wrappedValue.getter();
                            PDFAnnotation.quadPoints.setter(v179);
                            goto LABEL_92;
                          }
                        }
                        else if (!v103)
                        {
                          id v107 = v177;
                          long long v108 = &selRef_allowsFingerDrawing;
                          goto LABEL_92;
                        }
                        swift_bridgeObjectRelease();
                        id v107 = v177;
                        long long v108 = &selRef_allowsFingerDrawing;
                        goto LABEL_91;
                      }
LABEL_68:
                      CRRegister.wrappedValue.getter();
                      Class v85 = Int._bridgeToObjectiveC()().super.super.isa;
                      objc_msgSend(v84, sel_setValue_forAnnotationKey_, v85, v83);

                      goto LABEL_69;
                    }
                    CGFloat v84 = v35;
                    goto LABEL_68;
                  }
LABEL_55:
                  CRRegister.wrappedValue.getter();
                  if (*((void *)&v179 + 1))
                  {
                    uint64_t v81 = (void *)MEMORY[0x21054D080](v179, *((void *)&v179 + 1));
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    uint64_t v81 = 0;
                  }
                  objc_msgSend(v35, sel_setContents_, v81);

                  goto LABEL_59;
                }
              }
              else
              {
                uint64_t v80 = v162;
                if (!v79) {
                  goto LABEL_59;
                }
              }
            }
            else
            {
              uint64_t v80 = v162;
              if (!*((void *)&v74 + 1)) {
                goto LABEL_59;
              }
            }
            swift_bridgeObjectRelease();
            goto LABEL_55;
          }
LABEL_42:
          CRRegister.wrappedValue.getter();
          if (*((void *)&v179 + 1))
          {
            double v73 = (void *)MEMORY[0x21054D080](v179, *((void *)&v179 + 1));
            swift_bridgeObjectRelease();
          }
          else
          {
            double v73 = 0;
          }
          objc_msgSend(v35, sel_setWidgetStringValue_, v73);

          goto LABEL_46;
        }
      }
      else if (!v70)
      {
        goto LABEL_46;
      }
    }
    else if (!*((void *)&v65 + 1))
    {
      goto LABEL_46;
    }
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
LABEL_18:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  long long v59 = v179;
  id v60 = objc_msgSend(v35, sel_widgetStringValue);
  if (!v60)
  {
    if (!*((void *)&v59 + 1)) {
      return;
    }
    goto LABEL_31;
  }
  unint64_t v61 = v60;
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v64 = v63;

  if (!*((void *)&v59 + 1))
  {
    if (!v64) {
      return;
    }
    goto LABEL_31;
  }
  if (!v64)
  {
LABEL_31:
    swift_bridgeObjectRelease();
LABEL_32:
    CRRegister.wrappedValue.getter();
    if (*((void *)&v179 + 1))
    {
      uint64_t v71 = (void *)MEMORY[0x21054D080](v179, *((void *)&v179 + 1));
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v71 = 0;
    }
    objc_msgSend(v35, sel_setWidgetStringValue_, v71);

    return;
  }
  if (v59 == __PAIR128__(v64, v62))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v72 & 1) == 0) {
    goto LABEL_32;
  }
}

void specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v21 = a1 + 64;
  uint64_t v1 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v4 = 0;
  while (v3)
  {
    unint64_t v6 = __clz(__rbit64(v3));
    v3 &= v3 - 1;
    unint64_t v7 = v6 | (v4 << 6);
LABEL_23:
    uint64_t v11 = *(void **)(*(void *)(a1 + 56) + 16 * v7);
    type metadata accessor for AnyCanvas();
    uint64_t v12 = (void *)swift_dynamicCastClass();
    if (v12)
    {
      uint64_t v13 = v12;
      int64_t v24 = v4;
      uint64_t v14 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v12) + 0x2F8))();
      uint64_t v16 = v15;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 144);
      id v19 = v11;
      uint64_t v20 = (char *)v18(ObjectType, v16);

      if (v20)
      {
        uint64_t v5 = *(void *)&v20[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
        swift_retain();

        swift_retain();
        FormAnalytics.merge(_:for:)(v5, v13);

        swift_release();
        swift_release();
      }
      else
      {
      }
      int64_t v4 = v24;
    }
  }
  int64_t v8 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v8 >= v22) {
    goto LABEL_27;
  }
  unint64_t v9 = *(void *)(v21 + 8 * v8);
  ++v4;
  if (v9) {
    goto LABEL_22;
  }
  int64_t v4 = v8 + 1;
  if (v8 + 1 >= v22) {
    goto LABEL_27;
  }
  unint64_t v9 = *(void *)(v21 + 8 * v4);
  if (v9) {
    goto LABEL_22;
  }
  int64_t v4 = v8 + 2;
  if (v8 + 2 >= v22) {
    goto LABEL_27;
  }
  unint64_t v9 = *(void *)(v21 + 8 * v4);
  if (v9) {
    goto LABEL_22;
  }
  int64_t v4 = v8 + 3;
  if (v8 + 3 >= v22) {
    goto LABEL_27;
  }
  unint64_t v9 = *(void *)(v21 + 8 * v4);
  if (v9)
  {
LABEL_22:
    unint64_t v3 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v4 << 6);
    goto LABEL_23;
  }
  int64_t v10 = v8 + 4;
  if (v10 >= v22)
  {
LABEL_27:
    swift_release();
    return;
  }
  unint64_t v9 = *(void *)(v21 + 8 * v10);
  if (v9)
  {
    int64_t v4 = v10;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v4 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v4 >= v22) {
      goto LABEL_27;
    }
    unint64_t v9 = *(void *)(v21 + 8 * v4);
    ++v10;
    if (v9) {
      goto LABEL_22;
    }
  }
LABEL_29:
  __break(1u);
}

uint64_t specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  *(void *)(v5 + 264) = a4;
  *(void *)(v5 + 272) = v4;
  *(void *)(v5 + 248) = a1;
  *(void *)(v5 + 256) = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  *(void *)(v5 + 280) = swift_task_alloc();
  type metadata accessor for PaperDocument(0);
  *(void *)(v5 + 288) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UTType();
  *(void *)(v5 + 296) = v7;
  *(void *)(v5 + 304) = *(void *)(v7 - 8);
  *(void *)(v5 + 312) = swift_task_alloc();
  *(void *)(v5 + 320) = swift_task_alloc();
  *(unsigned char *)(v5 + 91) = *a3;
  type metadata accessor for MainActor();
  *(void *)(v5 + 328) = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 336) = v9;
  *(void *)(v5 + 344) = v8;
  return MEMORY[0x270FA2498](specialized PaperDocumentView.init(context:document:editingMode:toolPicker:), v9, v8);
}

uint64_t specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v4 = *(unsigned char **)(v0 + 272);
  uint64_t v39 = *(void **)(v0 + 264);
  uint64_t v37 = *(void *)(v0 + 312);
  unint64_t v38 = *(void **)(v0 + 248);
  v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode] = 3;
  uint64_t v5 = v4;
  UUID.init()();
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] = 1;
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_allowsDocumentStructureCopying] = 1;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v6 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModelInitialState;
  *(void *)(v0 + 352) = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModelInitialState;
  uint64_t v7 = &v5[v6];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  *(void *)(v0 + 360) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v0 + 368) = v9;
  int64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  *(void *)(v0 + 376) = v10;
  *(void *)(v0 + 384) = (v9 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v10(v7, 1, 1, v8);
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_documentDelegate] = 0;
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap;
  uint64_t v12 = MEMORY[0x263F8EE78];
  *(void *)&v5[v11] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView] = 0;
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_nonDrawingToolMode] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_vellumOpacity] = 0;
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView____lazy_storage___paperDocumentViewProxy] = 0;
  unint64_t v36 = (void **)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker] = 0;
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor] = 1;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyApplySafeAreaInsetsToAxes] = &outlined read-only object #0 of PaperDocumentView.init(context:document:editingMode:toolPicker:);
  uint64_t v13 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_passThroughSubject;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  swift_allocObject();
  *(void *)&v5[v13] = PassthroughSubject.init()();
  uint64_t v14 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_livePassThroughSubject;
  swift_allocObject();
  *(void *)&v5[v14] = PassthroughSubject.init()();
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument] = 0;
  uint64_t v15 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_updateDocAsset];
  uint64_t v16 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_updateDocTask] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPages] = MEMORY[0x263F8EE88];
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPagesTask] = 0;
  static ContinuousClock.Instant.now.getter();
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isCurrentlyLiveEditing] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveEditingContinuations] = v12;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v17 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics;
  type metadata accessor for FormAnalytics();
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = 791357252;
  *(_WORD *)(v18 + 20) = 0;
  *(void *)(v18 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v12);
  *(void *)&v5[v17] = v18;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__insertingFromFileIndex] = 0;
  uint64_t v19 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_validPasteUTTypeIdentifiers;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_20C837A90;
  *(void *)(v20 + 32) = 0xD000000000000018;
  *(void *)(v20 + 40) = 0x800000020C85CDD0;
  static UTType.pdf.getter();
  uint64_t v21 = UTType.identifier.getter();
  uint64_t v23 = v22;
  int64_t v24 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v24(v1, v2);
  *(void *)(v20 + 48) = v21;
  *(void *)(v20 + 56) = v23;
  static UTType.image.getter();
  uint64_t v25 = UTType.identifier.getter();
  uint64_t v27 = v26;
  v24(v37, v2);
  *(void *)(v20 + 64) = v25;
  *(void *)(v20 + 72) = v27;
  *(void *)&v5[v19] = v20;
  uint64_t v28 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_docScanDismissBlock];
  *uint64_t v28 = 0;
  v28[1] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_quadEditorController] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v29 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocument];
  *uint64_t v29 = 0;
  v29[1] = 0;
  v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_context] = v38;
  swift_beginAccess();
  uint64_t v30 = *v36;
  void *v36 = v39;
  id v31 = v38;
  id v32 = v39;

  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.root.getter();
  *(_OWORD *)(v0 + 16) = xmmword_20C834980;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:)
                                                          + async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:));
  uint64_t v33 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v33;
  *uint64_t v33 = v0;
  v33[1] = specialized PaperDocumentView.init(context:document:editingMode:toolPicker:);
  uint64_t v34 = *(void *)(v0 + 256);
  return v40(0x8000000000000000, v34, v0 + 16);
}

uint64_t specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 288);
  *(void *)(*v1 + 400) = a1;
  swift_task_dealloc();
  _s8PaperKit0A8DocumentVWOhTm_0(v3, type metadata accessor for PaperDocument);
  uint64_t v4 = *(void *)(v2 + 344);
  uint64_t v5 = *(void *)(v2 + 336);
  return MEMORY[0x270FA2498](specialized PaperDocumentView.init(context:document:editingMode:toolPicker:), v5, v4);
}

void specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)()
{
  uint64_t v91 = v0;
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v2 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v7 = *(char **)(v0 + 272);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v8 = *(void *)(v0 + 256);
  swift_release();
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument] = v1;
  uint64_t v9 = (uint64_t)&v7[v5];
  int64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10(&v7[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel], v8, v3);
  v10((char *)v6, v8, v3);
  v2(v6, 0, 1, v3);
  swift_beginAccess();
  outlined assign with take of Date?(v6, v9, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  swift_endAccess();

  uint64_t v11 = type metadata accessor for PaperDocumentView();
  *(void *)(v0 + 216) = v7;
  *(void *)(v0 + 224) = v11;
  id v12 = objc_msgSendSuper2((objc_super *)(v0 + 216), sel_initWithFrame_, 0.0, 0.0, 100.0, 100.0);
  uint64_t v13 = (objc_class *)type metadata accessor for PaperDocumentDelegate();
  id v14 = objc_allocWithZone(v13);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  uint64_t v89 = v0;
  *(void *)(v0 + 232) = v14;
  *(void *)(v0 + 240) = v13;
  uint64_t v15 = (char *)v12;
  id v16 = objc_msgSendSuper2((objc_super *)(v0 + 232), sel_init);
  uint64_t v17 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument;
  objc_msgSend(*(id *)&v15[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_setDelegate_, v16);
  uint64_t v18 = *(void **)&v15[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_documentDelegate];
  *(void *)&v15[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_documentDelegate] = v16;
  id v19 = v16;

  uint64_t v20 = self;
  uint64_t v21 = v15;
  id v22 = objc_msgSend(v20, sel_whiteColor);
  objc_msgSend(v21, sel_setBackgroundColor_, v22);

  objc_msgSend(v21, sel_bounds);
  id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14778]), sel_initWithFrame_, v23, v24, v25, v26);
  uint64_t v28 = (id *)&v21[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  id v29 = *v28;
  *uint64_t v28 = v27;

  if (!*v28)
  {
    __break(1u);
    goto LABEL_42;
  }
  objc_msgSend(*v28, sel_setDelegate_, v19);
  if (!*v28)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  objc_msgSend(*v28, sel_setAllowsUndo_, 0);
  if (!*v28)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v88 = v17;
  objc_msgSend(*v28, sel_setAllowsMarkupAnnotationEditing_, 1);
  if (!*v28)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v30 = v19;
  objc_msgSend(*v28, sel_setTextSelectionEnabled_, 1);
  id v87 = self;
  id v31 = objc_msgSend(v87, sel_defaultCenter);
  id v32 = *v28;
  if (!*v28)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v33 = v31;
  uint64_t v34 = *MEMORY[0x263F148A0];
  id v35 = v21;
  id v36 = objc_msgSend(v32, sel_documentScrollView);
  objc_msgSend(v33, sel_addObserver_selector_name_object_, v35, sel_pageDidScroll_, v34, v36);

  id v37 = *v28;
  if (objc_opt_respondsToSelector()) {
    [v37 setFormFillingUpdatesAnnotationOnEveryTextChange:1];
  }

  if (!*v28) {
    goto LABEL_46;
  }
  id v38 = objc_msgSend(*v28, sel_documentScrollView);
  if (!v38)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v39 = v38;
  id v40 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TiledDocumentView()), sel_initInScrollView_, v38);

  uint64_t v41 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView;
  uint64_t v42 = *(void **)&v35[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView];
  *(void *)&v35[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView] = v40;

  uint64_t v43 = *(void **)&v35[v41];
  if (!v43)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  objc_msgSend(v43, sel_setRulerHostingDelegate_, *(void *)&v35[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate]);
  uint64_t v44 = *(void *)&v35[v41];
  if (!v44)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  unint64_t v45 = *(unsigned char **)(v44 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController);
  uint64_t v46 = &v35[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity];
  swift_beginAccess();
  char v47 = *v46;
  v45[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditVellumOpacity] = *v46;
  uint64_t v48 = *(void **)&v45[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
  if (v48)
  {
    unint64_t v49 = v45;
    id v50 = v48;
    uint64_t v51 = ToolPickerController.textToolListViewController.getter();
    v51[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible] = v47;
    TextToolListViewController.updateUI()();
  }
  uint64_t v52 = *(void **)&v35[v41];
  if (!v52) {
    goto LABEL_50;
  }
  objc_msgSend(v52, sel_setInsertSpaceEnabled_, 0);
  uint64_t v53 = *(void **)&v35[v41];
  if (!v53)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  objc_msgSend(v53, sel_setSupportsCopyAsText_, 1);
  long long v54 = *(void **)&v35[v41];
  if (!v54)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  objc_msgSend(v54, sel_setDelegate_, v30);
  if (!*v28)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  objc_msgSend(*v28, sel_setPageOverlayViewProvider_, v35);
  if (!*v28)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  objc_msgSend(*v28, sel_setDocument_, *(void *)&v15[v88]);
  if (!*v28)
  {
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  id v55 = objc_msgSend(*v28, sel_documentView);
  if (v55)
  {
    char v56 = v55;
    objc_msgSend(v55, sel_resignFirstResponder);
  }
  id v57 = *v28;
  if (!*v28) {
    goto LABEL_56;
  }
  id v58 = objc_allocWithZone(MEMORY[0x263F825C8]);
  id v59 = v57;
  id v60 = objc_msgSend(v58, sel_initWithWhite_alpha_, 0.9, 1.0);
  objc_msgSend(v59, sel_setBackgroundColor_, v60);

  if (!*v28)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  objc_msgSend(v35, sel_addSubview_);
  unint64_t v61 = *(void **)&v35[v41];
  if (!v61)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  objc_msgSend(v61, sel_setContentSnapshottingView_, v35);
  if (!*v28)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v62 = objc_msgSend(*v28, sel_documentView);
  if (v62)
  {
    unint64_t v63 = v62;
    unint64_t v64 = *(void **)&v35[v41];
    if (!v64)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    id v65 = objc_msgSend(v64, sel_superview);
    if (v65)
    {
      id v66 = *(void **)&v35[v41];
      if (!v66)
      {
LABEL_62:
        __break(1u);
        return;
      }
      uint64_t v67 = v65;
      id v68 = v66;
      objc_msgSend(v67, sel_insertSubview_aboveSubview_, v68, v63);
    }
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    __swift_project_value_buffer(v69, (uint64_t)logger);
    unint64_t v63 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl(&dword_20C2D7000, v63, v70, "Cannot edit pdf without a document view.", v71, 2u);
      MEMORY[0x210550270](v71, -1, -1);
    }
  }

  char v72 = *(void **)&v35[v41];
  if (!v72)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v73 = *(void *)(v89 + 264);
  objc_msgSend(v72, sel_setCanvasViewZOrderPolicy_, 1);
  id v74 = objc_msgSend(v87, sel_defaultCenter);
  objc_msgSend(v74, sel_addObserver_selector_name_object_, v35, sel_pdfSelectionChanged_, *MEMORY[0x263F148E0], *v28);

  id v75 = objc_msgSend(v87, sel_defaultCenter);
  uint64_t v76 = (void *)MEMORY[0x21054D080](0xD00000000000001BLL, 0x800000020C85CED0);
  objc_msgSend(v75, sel_addObserver_selector_name_object_, v35, sel_annotationsChanged_, v76, *v28);

  id v77 = objc_msgSend(v87, sel_defaultCenter);
  objc_msgSend(v77, sel_addObserver_selector_name_object_, v35, sel_annotationPropertiesChanged_, *MEMORY[0x263F147D0], *v28);

  if (v73)
  {
    id v78 = *(id *)(v89 + 264);
    objc_msgSend(v78, sel_addObserver_, v35);
    id v79 = PaperDocumentView.paperDocumentViewProxy.getter();
    objc_msgSend(v78, sel_addObserver_, v79);

    PaperDocumentView.updateTiledViewInk(for:)(v78);
    PaperDocumentView.updateToolPicker()();
  }
  uint64_t v80 = *(void *)(v89 + 360);
  uint64_t v81 = *(void *)(v89 + 368);
  unsigned __int8 v82 = *(unsigned char *)(v89 + 91);
  uint64_t v83 = *(void *)(v89 + 256);

  CGFloat v84 = (unsigned __int8 *)&v35[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
  swift_beginAccess();
  unsigned __int8 v85 = *v84;
  *CGFloat v84 = v82;
  unsigned __int8 v90 = v85;
  PaperDocumentView.editingMode.didset(&v90);

  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v83, v80);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v86 = *(void (**)(char *))(v89 + 8);
  v86(v35);
}

uint64_t partial apply for closure #1 in PaperDocumentView.updateVellumWithOpacity(_:)(uint64_t a1)
{
  return closure #1 in PaperDocumentView.updateVellumWithOpacity(_:)(a1, *(double *)(v1 + 16));
}

uint64_t type metadata accessor for PaperDocumentView()
{
  uint64_t result = type metadata singleton initialization cache for PaperDocumentView;
  if (!type metadata singleton initialization cache for PaperDocumentView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t partial apply for closure #1 in PaperDocumentView.canvas(for:)(void *a1)
{
  return closure #1 in PaperDocumentView.convert(_:to:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t partial apply for closure #1 in PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)()
{
  return closure #1 in PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized PaperDocumentView.PaperDocumentViewProxy._toolPicker(_:didChange:)(void *a1)
{
  Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v3 = *(void **)&Strong[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView];
  uint64_t v4 = v3;

  if (v3)
  {
    id v19 = (char *)*(id *)&v4[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController];

    if (a1)
    {
      uint64_t v5 = &v19[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
      if (MEMORY[0x210550400](&v19[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]))
      {
        uint64_t v6 = *((void *)v5 + 1);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
        id v9 = a1;
        uint64_t v10 = (void *)v8(ObjectType, v6);
        uint64_t v11 = swift_unknownObjectRelease();
        if (v10)
        {
          unint64_t v12 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v10) + 0x320);
          unint64_t v13 = (void *)((uint64_t (*)(uint64_t))v12)(v11);
          if (v13)
          {
            id v14 = v13;
            id v15 = objc_msgSend(v13, sel_selectionInteraction);

            LOBYTE(v14) = objc_msgSend(v15, sel_currentSelectionHasStrokes);
            if (v14)
            {
              id v16 = (void *)v12();
              objc_msgSend(v16, sel_setSelectedStrokesColor_, v9);
            }
          }
        }
      }
      else
      {
        id v18 = a1;
      }
      CanvasElementController.updateToolPickerContextualEditingView()();

      uint64_t v17 = a1;
    }
    else
    {
      uint64_t v17 = v19;
    }
  }
  else
  {
    __break(1u);
  }
}

void specialized PaperDocumentView.init(coder:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UTType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v30 - v6;
  v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode] = 3;
  UUID.init()();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] = 1;
  v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_allowsDocumentStructureCopying] = 1;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v8 = &v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModelInitialState];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_documentDelegate] = 0;
  uint64_t v10 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap;
  uint64_t v11 = MEMORY[0x263F8EE78];
  *(void *)&v1[v10] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView] = 0;
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_nonDrawingToolMode] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_vellumOpacity] = 0;
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView____lazy_storage___paperDocumentViewProxy] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker] = 0;
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor] = 1;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyApplySafeAreaInsetsToAxes] = &outlined read-only object #0 of PaperDocumentView.init(coder:);
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_passThroughSubject;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  swift_allocObject();
  *(void *)&v1[v12] = PassthroughSubject.init()();
  uint64_t v13 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_livePassThroughSubject;
  swift_allocObject();
  *(void *)&v1[v13] = PassthroughSubject.init()();
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument] = 0;
  id v14 = &v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_updateDocAsset];
  uint64_t v15 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_updateDocTask] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPages] = MEMORY[0x263F8EE88];
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPagesTask] = 0;
  static ContinuousClock.Instant.now.getter();
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isCurrentlyLiveEditing] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveEditingContinuations] = v11;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics;
  type metadata accessor for FormAnalytics();
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 791357252;
  *(_WORD *)(v17 + 20) = 0;
  *(void *)(v17 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v11);
  *(void *)&v1[v16] = v17;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__insertingFromFileIndex] = 0;
  uint64_t v18 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_validPasteUTTypeIdentifiers;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_20C837A90;
  *(void *)(v19 + 32) = 0xD000000000000018;
  *(void *)(v19 + 40) = 0x800000020C85CDD0;
  static UTType.pdf.getter();
  uint64_t v20 = UTType.identifier.getter();
  uint64_t v22 = v21;
  double v23 = *(void (**)(char *, uint64_t))(v3 + 8);
  v23(v7, v2);
  *(void *)(v19 + 48) = v20;
  *(void *)(v19 + 56) = v22;
  double v24 = v31;
  static UTType.image.getter();
  uint64_t v25 = UTType.identifier.getter();
  uint64_t v27 = v26;
  v23(v24, v2);
  *(void *)(v19 + 64) = v25;
  *(void *)(v19 + 72) = v27;
  *(void *)&v1[v18] = v19;
  uint64_t v28 = &v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_docScanDismissBlock];
  *uint64_t v28 = 0;
  v28[1] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_quadEditorController] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__rulerHostingDelegate] = 0;
  swift_unknownObjectWeakInit();
  id v29 = &v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocument];
  *id v29 = 0;
  v29[1] = 0;
  v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    uint64_t v12 = v10 + v11 * a1;
    uint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized PaperDocumentView.pdfView(_:willDisplayOverlayView:for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v14);
  if (result)
  {
    uint64_t v16 = *(void *)(v14 + 8);
    type metadata accessor for PaperKitPDFPage(0);
    uint64_t v17 = swift_dynamicCastClass();
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v36 = v16;
      uint64_t v19 = v11;
      uint64_t v20 = v17 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v20, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      uint64_t v21 = type metadata accessor for PageId(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v6, 1, v21))
      {
        id v22 = a1;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for PageId?);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v9, 1, 1, v10);
LABEL_6:

        swift_unknownObjectRelease();
        return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      }
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v6[*(int *)(v21 + 20)], (uint64_t)v9, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      id v23 = a1;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v9, 1, v10) == 1) {
        goto LABEL_6;
      }
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v13, v9, v10);
      double v24 = (uint64_t *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
      swift_beginAccess();
      uint64_t v25 = *v24;
      if (*(void *)(v25 + 16))
      {
        id v26 = v23;
        swift_bridgeObjectRetain();
        unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v18);
        if (v28)
        {
          uint64_t v29 = *(void *)(v25 + 56) + 16 * v27;
          uint64_t v30 = *(void *)(v29 + 8);
          id v31 = *(id *)v29;

          swift_bridgeObjectRelease();
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(ObjectType, v30);
          if (v33)
          {
            uint64_t v34 = (void *)v33;
            uint64_t v35 = swift_getObjectType();
            (*(void (**)(uint64_t, void *, char *, uint64_t))(v36 + 16))(v2, v34, v13, v35);

            swift_unknownObjectRelease();
            return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v13, v10);
          }
          (*(void (**)(char *, uint64_t))(v19 + 8))(v13, v10);

          return swift_unknownObjectRelease();
        }

        swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, uint64_t))(v19 + 8))(v13, v10);
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

void specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 16);
  if (v3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while ((void *)v2[v6 + 4] != a2)
    {
      ++v7;
      v6 += 2;
      if (v3 == v7) {
        return;
      }
    }
    unint64_t v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_10;
    }
    while (v8 != v3)
    {
      if (v8 >= v3)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        return;
      }
      uint64_t v9 = (void *)v2[v6 + 6];
      if (v9 != a2)
      {
        if (v8 != v7)
        {
          if (v7 >= v3) {
            goto LABEL_24;
          }
          uint64_t v10 = v2[v6 + 7];
          long long v17 = *(_OWORD *)&v2[2 * v7 + 4];
          id v11 = (id)v17;
          id v12 = v9;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
          }
          uint64_t v13 = &v2[2 * v7];
          uint64_t v14 = (void *)v13[4];
          v13[4] = v12;
          v13[5] = v10;

          if (v8 >= v2[2]) {
            goto LABEL_25;
          }
          uint64_t v15 = (void *)v2[v6 + 6];
          *(_OWORD *)&v2[v6 + 6] = v17;

          *(void *)a1 = v2;
        }
        if (__OFADD__(v7++, 1)) {
          goto LABEL_23;
        }
        unint64_t v3 = v2[2];
      }
LABEL_10:
      ++v8;
      v6 += 2;
    }
  }
}

void specialized PaperDocumentView.pdfView(_:willEndDisplayingOverlayView:for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v14 = swift_dynamicCastClass();
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
    swift_beginAccess();
    uint64_t v17 = *v16;
    if (*(void *)(*v16 + 16))
    {
      id v18 = a1;
      swift_bridgeObjectRetain();
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if ((v20 & 1) == 0)
      {

        swift_bridgeObjectRelease();
        return;
      }
      uint64_t v21 = *(void *)(v17 + 56) + 16 * v19;
      id v22 = *(void **)v21;
      uint64_t v52 = *(void *)(v21 + 8);
      id v53 = v22;

      swift_bridgeObjectRelease();
      uint64_t v23 = v15 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v23, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      uint64_t v24 = type metadata accessor for PageId(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v6, 1, v24))
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for PageId?);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_8:
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        goto LABEL_9;
      }
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v6[*(int *)(v24 + 20)], (uint64_t)v9, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
        goto LABEL_8;
      }
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v44 = (*(uint64_t (**)(uint64_t))(v52 + 8))(ObjectType);
      if (v44)
      {
        unint64_t v45 = (void *)v44;
        uint64_t v46 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider;
        swift_beginAccess();
        if (!MEMORY[0x210550400](v46))
        {
          (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);

LABEL_9:
          type metadata accessor for AnyCanvas();
          uint64_t v25 = (void *)swift_dynamicCastClass();
          if (v25)
          {
            id v26 = v25;
            id v51 = v18;
            unint64_t v27 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v25) + 0x2F8))();
            uint64_t v29 = v28;
            uint64_t v30 = swift_getObjectType();
            id v31 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 144);
            id v50 = v53;
            id v32 = (char *)v31(v30, v29);

            if (v32)
            {
              uint64_t v33 = *(void *)&v32[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
              swift_retain();

              swift_retain();
              FormAnalytics.merge(_:for:)(v33, v26);

              swift_release();
              swift_release();
            }
            else
            {
            }
            id v18 = v51;
          }
          uint64_t v34 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
          if (v34)
          {
            uint64_t v35 = (uint64_t)v34 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments;
            swift_beginAccess();
            id v36 = v53;
            id v37 = v34;
            specialized MutableCollection._halfStablePartition(isSuffixElement:)(v35, v36);
            uint64_t v39 = v38;

            int64_t v40 = *(void *)(*(void *)v35 + 16);
            if (v40 >= v39)
            {
              specialized Array.replaceSubrange<A>(_:with:)(v39, v40);
              swift_endAccess();

              objc_msgSend(v36, sel_removeFromSuperview);
              swift_beginAccess();
              id v41 = v18;
              uint64_t v42 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v15);
              swift_endAccess();

              return;
            }
            __break(1u);
          }
          __break(1u);
          return;
        }
        uint64_t v47 = *(void *)(v46 + 8);
        uint64_t v48 = swift_getObjectType();
        (*(void (**)(uint64_t, void *, char *, uint64_t, uint64_t))(v47 + 24))(v2, v45, v13, v48, v47);

        swift_unknownObjectRelease();
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      goto LABEL_9;
    }
  }
}

uint64_t sub_20C6A21DC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperDocumentView.documentPicker(_:didPickDocumentsAt:)(a1, v4, v5, v7, v6);
}

void specialized PaperDocumentView.calculateDocument.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (void *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocument);
  swift_beginAccess();
  *uint64_t v6 = a1;
  v6[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v7 = PaperDocumentView.currentPageCanvas.getter();
  uint64_t v8 = (void *)MEMORY[0x263F8EED0];
  if (v7)
  {
    uint64_t v9 = v7;
    uint64_t v10 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x2F8))();
    uint64_t v12 = v11;

    uint64_t ObjectType = swift_getObjectType();
    uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12);

    if (v14)
    {
      CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
    }
  }
  uint64_t v15 = PaperDocumentView.currentPageCanvas.getter();
  if (v15)
  {
    uint64_t v16 = v15;
    (*(void (**)(void))((*v8 & *v15) + 0x770))();
  }
}

uint64_t sub_20C6A2520@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode, a2);
}

id sub_20C6A2530@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView, a2);
}

uint64_t sub_20C6A2540@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v3);
  *a2 = result;
  return result;
}

uint64_t sub_20C6A259C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_35Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI, a2);
}

uint64_t sub_20C6A25AC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider, a2);
}

uint64_t sub_20C6A25B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentView.pageOverlayViewProvider : PaperDocumentView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider, (void (*)(uint64_t))PaperDocumentView.pageOverlayViewProvider.didset);
}

void *sub_20C6A25F0(void *result, void *a2)
{
  uint64_t v2 = *(void **)(*a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v2) {
    return objc_msgSend(v2, sel_setContentSnapshottingView_, *result);
  }
  __break(1u);
  return result;
}

id sub_20C6A261C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(unsigned char *)(*a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1) {
    id result = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly);
  }
  else {
    id result = 0;
  }
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_20C6A267C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_allowsDocumentStructureCopying, a2);
}

uint64_t sub_20C6A2688(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_65Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_allowsDocumentStructureCopying);
}

uint64_t sub_20C6A2694@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate, a2);
}

uint64_t sub_20C6A26A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate);
}

double sub_20C6A26AC@<D0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (double *)(*a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_vellumOpacity);
  swift_beginAccess();
  double result = *v3;
  *a2 = *(void *)v3;
  return result;
}

uint64_t sub_20C6A2700(double *a1)
{
  return PaperDocumentView.vellumOpacity.setter(*a1);
}

uint64_t sub_20C6A2728@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity, a2);
}

uint64_t sub_20C6A2734(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_50Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity, (uint64_t (*)(uint64_t))PaperDocumentView.canEditVellumOpacity.didset);
}

void *sub_20C6A2754@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *(void *)(*result + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v2) {
    *a2 = *(unsigned char *)(*(void *)(v2 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController)
  }
                   + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden);
  else {
    __break(1u);
  }
  return result;
}

unsigned char *sub_20C6A2794(unsigned char *result, void *a2)
{
  uint64_t v2 = *(void *)(*a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v2) {
    *(unsigned char *)(*(void *)(v2 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController)
  }
             + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden) = *result;
  else {
    __break(1u);
  }
  return result;
}

id sub_20C6A27D4@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker, a2);
}

uint64_t sub_20C6A27EC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor, a2);
}

uint64_t sub_20C6A27F8(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_65Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor);
}

uint64_t sub_20C6A2804@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, a2);
}

uint64_t sub_20C6A2810(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentView.pageOverlayViewProvider : PaperDocumentView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, (void (*)(uint64_t))PaperDocumentView.liveStreamMessenger.didset);
}

uint64_t sub_20C6A2844@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, a2);
}

uint64_t sub_20C6A2850(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentView.pageOverlayViewProvider : PaperDocumentView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, (void (*)(uint64_t))PaperDocumentView.participantDetailsDataSource.didset);
}

uint64_t sub_20C6A2884@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors, a2);
}

uint64_t sub_20C6A2890(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_50Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors, (uint64_t (*)(uint64_t))PaperDocumentView.showParticipantCursors.didset);
}

uint64_t keypath_set_50Tm(char *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(uint64_t))
{
  char v7 = *a1;
  uint64_t v8 = (unsigned char *)(*a2 + *a5);
  uint64_t v9 = swift_beginAccess();
  *uint64_t v8 = v7;
  return a6(v9);
}

uint64_t sub_20C6A2910@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider, a2);
}

uint64_t sub_20C6A291C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider);
}

uint64_t sub_20C6A2928@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_35Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView, a2);
}

uint64_t keypath_get_35Tm@<X0>(void *a1@<X0>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1 + *a2;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v4);
  *a3 = result;
  return result;
}

uint64_t sub_20C6A298C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocument);
  swift_beginAccess();
  *a2 = *v3;
  return swift_unknownObjectRetain();
}

uint64_t sub_20C6A29EC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior, a2);
}

uint64_t ObjC metadata update function for PaperDocumentView()
{
  return type metadata accessor for PaperDocumentView();
}

void type metadata completion function for PaperDocumentView()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Capsule<PaperDocument>?();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Capsule<PaperDocument>();
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRAsset?();
        if (v3 <= 0x3F)
        {
          type metadata accessor for ContinuousClock.Instant();
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t method lookup function for PaperDocumentView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PaperDocumentView);
}

uint64_t dispatch thunk of PaperDocumentView.editingMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of PaperDocumentView.editingMode.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of PaperDocumentView.editingMode.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of PaperDocumentView.pdfView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of PaperDocumentView.pdfView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of PaperDocumentView.pdfView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of PaperDocumentView.viewControllerForPresenting.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of PaperDocumentView.viewControllerForPresenting.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of PaperDocumentView.viewControllerForPresenting.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of PaperDocumentView.viewControllerForPresentingUI.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of PaperDocumentView.viewControllerForPresentingUI.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of PaperDocumentView.viewControllerForPresentingUI.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of PaperDocumentView.pageOverlayViewProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of PaperDocumentView.pageOverlayViewProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x250))();
}

uint64_t dispatch thunk of PaperDocumentView.pageOverlayViewProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x258))();
}

uint64_t dispatch thunk of PaperDocumentView.contentSnapshottingView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x260))();
}

uint64_t dispatch thunk of PaperDocumentView.contentSnapshottingView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x268))();
}

uint64_t dispatch thunk of PaperDocumentView.contentSnapshottingView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x270))();
}

uint64_t dispatch thunk of PaperDocumentView.allowsDocumentStructureEditing.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x278))();
}

uint64_t dispatch thunk of PaperDocumentView.allowsDocumentStructureEditing.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x280))();
}

uint64_t dispatch thunk of PaperDocumentView.allowsDocumentStructureEditing.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x288))();
}

uint64_t dispatch thunk of PaperDocumentView.allowsDocumentStructureCopying.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of PaperDocumentView.allowsDocumentStructureCopying.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of PaperDocumentView.allowsDocumentStructureCopying.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of PaperDocumentView.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of PaperDocumentView.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of PaperDocumentView.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of PaperDocumentView.vellumOpacity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x380))();
}

uint64_t dispatch thunk of PaperDocumentView.vellumOpacity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x388))();
}

uint64_t dispatch thunk of PaperDocumentView.vellumOpacity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x390))();
}

uint64_t dispatch thunk of PaperDocumentView.canEditVellumOpacity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x398))();
}

uint64_t dispatch thunk of PaperDocumentView.canEditVellumOpacity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of PaperDocumentView.canEditVellumOpacity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of PaperDocumentView.toolPicker.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of PaperDocumentView.toolPicker.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of PaperDocumentView.toolPicker.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of PaperDocumentView.paperDocument.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x400))();
}

uint64_t dispatch thunk of PaperDocumentView.paperDocument.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x408))();
}

uint64_t dispatch thunk of PaperDocumentView.paperDocument.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x410))();
}

uint64_t dispatch thunk of PaperDocumentView.merge<A>(_:forward:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x420))();
}

uint64_t dispatch thunk of PaperDocumentView.__allocating_init(context:document:editingMode:toolPicker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 1064) + **(int **)(v4 + 1064));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of PaperDocumentView.deselectAll()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x430))();
}

uint64_t dispatch thunk of PaperDocumentView.automaticallyAdjustScaleFactor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x438))();
}

uint64_t dispatch thunk of PaperDocumentView.automaticallyAdjustScaleFactor.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x440))();
}

uint64_t dispatch thunk of PaperDocumentView.automaticallyAdjustScaleFactor.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x448))();
}

uint64_t dispatch thunk of PaperDocumentView.toolPickerSelectedToolDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x470))();
}

uint64_t dispatch thunk of PaperDocumentView.toolPickerSelectedToolItemDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x478))();
}

uint64_t dispatch thunk of PaperDocumentView.toolPickerIsRulerActiveDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x480))();
}

uint64_t dispatch thunk of PaperDocumentView.toolPickerVisibilityDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x488))();
}

uint64_t dispatch thunk of PaperDocumentView.publisher.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4D8))();
}

uint64_t dispatch thunk of PaperDocumentView.livePublisher.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4E0))();
}

uint64_t dispatch thunk of PaperDocumentView.revertAllChanges()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x598))();
}

uint64_t dispatch thunk of PaperDocumentView.currentPage.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5A8))();
}

uint64_t dispatch thunk of PaperDocumentView.canGoToNextPage.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5B0))();
}

uint64_t dispatch thunk of PaperDocumentView.goToNextPage()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5B8))();
}

uint64_t dispatch thunk of PaperDocumentView.canGoToPreviousPage.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5C0))();
}

uint64_t dispatch thunk of PaperDocumentView.goToPreviousPage()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5C8))();
}

uint64_t dispatch thunk of PaperDocumentView.canZoomIn.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5D8))();
}

uint64_t dispatch thunk of PaperDocumentView.zoomIn()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5E0))();
}

uint64_t dispatch thunk of PaperDocumentView.canZoomOut.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5E8))();
}

uint64_t dispatch thunk of PaperDocumentView.zoomOut()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5F0))();
}

uint64_t dispatch thunk of PaperDocumentView.page(for:nearest:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5F8))();
}

uint64_t dispatch thunk of PaperDocumentView.convert(_:to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x600))();
}

uint64_t dispatch thunk of PaperDocumentView.convert(_:from:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x608))();
}

uint64_t dispatch thunk of PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x610))();
}

uint64_t dispatch thunk of PaperDocumentView.canvas(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x618))();
}

uint64_t dispatch thunk of PaperDocumentView.liveStreamMessenger.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x670))();
}

uint64_t dispatch thunk of PaperDocumentView.liveStreamMessenger.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x678))();
}

uint64_t dispatch thunk of PaperDocumentView.liveStreamMessenger.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x680))();
}

uint64_t dispatch thunk of PaperDocumentView.participantDetailsDataSource.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x688))();
}

uint64_t dispatch thunk of PaperDocumentView.participantDetailsDataSource.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x690))();
}

uint64_t dispatch thunk of PaperDocumentView.participantDetailsDataSource.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x698))();
}

uint64_t dispatch thunk of PaperDocumentView.participantDetailsDidChange()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x6A0))();
}

uint64_t dispatch thunk of PaperDocumentView.showParticipantCursors.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x6A8))();
}

uint64_t dispatch thunk of PaperDocumentView.showParticipantCursors.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x6B0))();
}

uint64_t dispatch thunk of PaperDocumentView.showParticipantCursors.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x6B8))();
}

uint64_t dispatch thunk of PaperDocumentView.textualContextProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x6C0))();
}

uint64_t dispatch thunk of PaperDocumentView.textualContextProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x6C8))();
}

uint64_t dispatch thunk of PaperDocumentView.textualContextProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x6D0))();
}

uint64_t dispatch thunk of PaperDocumentView.canvasSelectionDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x6D8))();
}

uint64_t dispatch thunk of PaperDocumentView.canvasDrawingWillChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x6E0))();
}

uint64_t dispatch thunk of PaperDocumentView.pdfView(_:overlayViewFor:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x720))();
}

uint64_t dispatch thunk of PaperDocumentView.pdfView(_:willDisplayOverlayView:for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x728))();
}

uint64_t dispatch thunk of PaperDocumentView.pdfView(_:willEndDisplayingOverlayView:for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x730))();
}

uint64_t dispatch thunk of PaperDocumentView.export()()
{
  unint64_t v2 = *(int **)((*MEMORY[0x263F8EED0] & *v0) + 0x780);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v5();
}

uint64_t dispatch thunk of PaperDocumentView.documentPicker(_:didPickDocumentsAt:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x818))();
}

uint64_t dispatch thunk of PaperDocumentView.documentPickerWasCancelled(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x820))();
}

uint64_t dispatch thunk of PaperDocumentView.canvas(_:shouldOpenLink:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x8E8))();
}

uint64_t dispatch thunk of PaperDocumentView.rulerHostView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x908))();
}

uint64_t dispatch thunk of PaperDocumentView.rulerHostView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x910))();
}

uint64_t dispatch thunk of PaperDocumentView.rulerHostView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x918))();
}

uint64_t dispatch thunk of PaperDocumentView.calculateDocument.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x920))();
}

uint64_t dispatch thunk of PaperDocumentView.calculateDocument.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x928))();
}

uint64_t dispatch thunk of PaperDocumentView.calculateDocument.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x930))();
}

uint64_t dispatch thunk of PaperDocumentView.calculateDocumentExpressionSolvingBehavior.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x938))();
}

uint64_t dispatch thunk of PaperDocumentView.calculateDocumentExpressionSolvingBehavior.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x940))();
}

uint64_t dispatch thunk of PaperDocumentView.calculateDocumentExpressionSolvingBehavior.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x948))();
}

void type metadata accessor for Capsule<PaperDocument>()
{
  if (!lazy cache variable for type metadata for Capsule<PaperDocument>)
  {
    type metadata accessor for PaperDocument(255);
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    unint64_t v0 = type metadata accessor for Capsule();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Capsule<PaperDocument>);
    }
  }
}

uint64_t type metadata accessor for PaperDocumentView.PaperDocumentViewProxy()
{
  return self;
}

uint64_t type metadata accessor for PaperDocumentDelegate()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for PPKEdgeInsetsAxis(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C6A4730);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPKEdgeInsetsAxis()
{
  return &type metadata for PPKEdgeInsetsAxis;
}

unint64_t lazy protocol witness table accessor for type PPKEdgeInsetsAxis and conformance PPKEdgeInsetsAxis()
{
  unint64_t result = lazy protocol witness table cache variable for type PPKEdgeInsetsAxis and conformance PPKEdgeInsetsAxis;
  if (!lazy protocol witness table cache variable for type PPKEdgeInsetsAxis and conformance PPKEdgeInsetsAxis)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PPKEdgeInsetsAxis and conformance PPKEdgeInsetsAxis);
  }
  return result;
}

uint64_t outlined consume of AsyncCache<Data, CGImageRef>.CacheState(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return MEMORY[0x270F9A758]();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

id specialized PaperDocumentDelegate.documentCanBeEdited(_:)()
{
  uint64_t v1 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView);
  if (v1)
  {
    unint64_t v2 = (char *)v1;
    uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    if (MEMORY[0x210550400](v3))
    {
      uint64_t v4 = *(void *)(v3 + 8);
      uint64_t ObjectType = swift_getObjectType();
      LOBYTE(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 24))(v2, ObjectType, v4);
      swift_unknownObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      char v7 = &v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
      swift_beginAccess();
      if (!*v7) {
        goto LABEL_9;
      }
    }
    if (v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] == 1)
    {
      id v6 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly);
LABEL_10:

      return v6;
    }
LABEL_9:
    id v6 = 0;
    goto LABEL_10;
  }
  return 0;
}

void specialized PaperDocumentDelegate.pdfDocument(_:handleTabFrom:direction:)(void *a1, uint64_t a2)
{
  id v5 = objc_msgSend(a1, sel_page);
  if (v5)
  {
    id v23 = v5;
    type metadata accessor for PaperKitPDFPage(0);
    uint64_t v6 = swift_dynamicCastClass();
    if (v6
      && (uint64_t v7 = v6, (v8 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView)) != 0))
    {
      uint64_t v9 = (void *)v8;
      uint64_t v10 = (uint64_t *)(v8 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
      swift_beginAccess();
      uint64_t v11 = *v10;
      id v12 = v23;
      swift_bridgeObjectRetain();

      if (*(void *)(v11 + 16) && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v14 & 1) != 0))
      {
        id v15 = *(id *)(*(void *)(v11 + 56) + 16 * v13);

        swift_bridgeObjectRelease();
        type metadata accessor for AnyCanvas();
        uint64_t v16 = (void *)swift_dynamicCastClass();
        if (v16
          && (uint64_t v17 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v16) + 0x2F8))(),
              uint64_t v19 = v18,
              uint64_t ObjectType = swift_getObjectType(),
              uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 144))(ObjectType, v19),
              v17,
              v21))
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
          lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotation and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
          id v22 = a1;
          AnyHashable.init<A>(_:)();
          FormFillingView.focusNextField(from:direction:)((uint64_t)v24, a2 != 0);

          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for AnyHashable?);
        }
        else
        {
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {
    }
  }
}

void specialized PaperDocumentDelegate.pdfView(_:allowsFormFillingMode:for:)(char a1)
{
  uint64_t v3 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    uint64_t v5 = v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    if (MEMORY[0x210550400](v5))
    {
      uint64_t v6 = *(void *)(v5 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, void, void, uint64_t, uint64_t))(v6 + 16))(v4, a1 & 1, 0, ObjectType, v6);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void specialized PaperDocumentDelegate.pdfView(_:allowsFormFillingMode:withAutofill:for:)(char a1, char a2)
{
  uint64_t v5 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    uint64_t v7 = v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    if (MEMORY[0x210550400](v7))
    {
      uint64_t v8 = *(void *)(v7 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, void, void, uint64_t, uint64_t))(v8 + 16))(v6, a1 & 1, a2 & 1, ObjectType, v8);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void specialized PaperDocumentDelegate.pdfView(_:allowsFormFillingMode:with:for:)(char a1, uint64_t a2)
{
  uint64_t v5 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView);
  if (v5)
  {
    uint64_t v6 = (char *)v5;
    uint64_t v7 = v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    if (MEMORY[0x210550400](v7))
    {
      uint64_t v8 = *(void *)(v7 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(char *, void, BOOL, uint64_t, uint64_t))(v8 + 16))(v6, a1 & 1, a2 == 3, ObjectType, v8);
      swift_unknownObjectRelease();
    }
    if (a2 == 3)
    {
      uint64_t v10 = *(void *)&v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics];
      swift_retain();

      char v11 = 45;
LABEL_8:
      *(unsigned char *)(v10 + 18) = v11;
      swift_release();
      return;
    }
    if (a1)
    {
      uint64_t v10 = *(void *)&v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics];
      swift_retain();

      char v11 = 44;
      goto LABEL_8;
    }
  }
}

void specialized PaperDocumentDelegate.pdfDocument(_:didReceive:for:)(void *a1)
{
  uint64_t v3 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView);
  if (v3)
  {
    uint64_t v4 = (char *)v3;
    id v5 = objc_msgSend(a1, sel_formRegions);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v6 >> 62) {
      goto LABEL_14;
    }
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v8 = 4;
      while (1)
      {
        id v9 = (v6 & 0xC000000000000001) != 0 ? (id)MEMORY[0x21054E050](v8 - 4, v6) : *(id *)(v6 + 8 * v8);
        uint64_t v10 = v9;
        uint64_t v11 = v8 - 3;
        if (__OFADD__(v8 - 4, 1)) {
          break;
        }
        if (objc_msgSend(v9, sel_contentType) != (id)1 && objc_msgSend(v10, sel_contentType))
        {
          char v12 = 0;
          goto LABEL_16;
        }

        ++v8;
        if (v11 == v7) {
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
    }
LABEL_15:
    uint64_t v10 = 0;
    char v12 = 1;
LABEL_16:

    swift_bridgeObjectRelease_n();
    unint64_t v13 = &v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI];
    swift_beginAccess();
    uint64_t v14 = MEMORY[0x210550400](v13);
    if (v14)
    {
      id v15 = (void *)v14;
      type metadata accessor for PaperDocumentViewController(0);
      uint64_t v16 = swift_dynamicCastClass();
      if (v16) {
        char v17 = v12;
      }
      else {
        char v17 = 1;
      }
      if ((v17 & 1) == 0)
      {
        uint64_t v18 = (unsigned char *)(v16 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically);
        swift_beginAccess();
        if (*v18 == 1)
        {
          uint64_t v19 = swift_allocObject();
          *(void *)(v19 + 16) = v4;
          char v20 = v4;
          PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)((uint64_t)partial apply for closure #2 in PaperDocumentDelegate.pdfDocument(_:didReceive:for:), v19);
          swift_release();
        }
      }
    }
    uint64_t v21 = PaperDocumentView.currentPageCanvas.getter();
    if (v21)
    {
      id v22 = v21;
      id v23 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v21) + 0x2F8))();
      uint64_t v25 = v24;

      uint64_t ObjectType = swift_getObjectType();
      uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 144))(ObjectType, v25);

      if (v27)
      {
        uint64_t v28 = *(void **)(v27 + OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis);
        *(void *)(v27 + OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis) = a1;
        id v29 = a1;

        uint64_t v4 = (char *)v27;
      }
    }
  }
}

void specialized PaperDocumentDelegate.pdfViewWillClick(onLink:with:)(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView;
  uint64_t v4 = MEMORY[0x210550400](v3);
  if (v4)
  {
    id v5 = (void *)v4;
    uint64_t v6 = v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    uint64_t v7 = MEMORY[0x210550400](v6);
    uint64_t v8 = *(void *)(v6 + 8);

    if (v7)
    {
      uint64_t v9 = MEMORY[0x210550400](v3);
      if (v9)
      {
        uint64_t v10 = (void *)v9;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, a1, ObjectType, v8);
        swift_unknownObjectRelease();
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void specialized PaperDocumentDelegate.canvasViewDidBeginDrawing(_:)()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView;
  uint64_t v2 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    uint64_t v5 = MEMORY[0x210550400](v4);
    uint64_t v6 = *(void *)(v4 + 8);

    if (v5)
    {
      uint64_t v7 = MEMORY[0x210550400](v1);
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, uint64_t))(v6 + 104))(v8, ObjectType, v6);

        swift_unknownObjectRelease();
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void specialized PaperDocumentDelegate.canvasViewDidEndDrawing(_:)()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView;
  uint64_t v2 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit21PaperDocumentDelegate_documentView);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    uint64_t v5 = MEMORY[0x210550400](v4);
    uint64_t v6 = *(void *)(v4 + 8);

    if (v5)
    {
      uint64_t v7 = MEMORY[0x210550400](v1);
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, uint64_t))(v6 + 112))(v8, ObjectType, v6);

        swift_unknownObjectRelease();
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t sub_20C6A55C8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #2 in PaperDocumentDelegate.pdfDocument(_:didReceive:for:)()
{
  return closure #2 in PaperDocumentDelegate.pdfDocument(_:didReceive:for:)(*(void *)(v0 + 16));
}

uint64_t sub_20C6A5608()
{
  return objectdestroy_219Tm(32);
}

uint64_t partial apply for closure #1 in PaperDocumentView.cropPageAction(for:)(uint64_t a1)
{
  return closure #1 in PaperDocumentView.cropPageAction(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_20C6A5618()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRAssetOrData() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  swift_unknownObjectRelease();
  uint64_t v9 = v0 + v3;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(void *)v9, *(void *)(v9 + 8));
    outlined consume of Data._Representation(*(void *)(v9 + 16), *(void *)(v9 + 24));
  }
  else
  {
    uint64_t v10 = type metadata accessor for CRAsset();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v0 + v3, v10);
  }
  uint64_t v11 = v2 | v7 | 7;
  unint64_t v12 = (v4 + v3 + 79) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = (v12 + v7 + 8) & ~v7;

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v13, v5);
  return MEMORY[0x270FA0238](v0, v13 + v8, v11);
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for CRAssetOrData() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v7 + 79) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>)
                                       - 8)
                           + 80);
  uint64_t v11 = v9 + v10 + 8;
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void *)(v1 + 24);
  uint64_t v14 = v1 + v6;
  uint64_t v15 = v1 + v8;
  uint64_t v16 = *(void *)(v1 + v9);
  uint64_t v17 = v1 + (v11 & ~v10);
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v18;
  void *v18 = v3;
  v18[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)(a1, v12, v13, v14, v15, v16, v17);
}

void partial apply for closure #1 in closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>)
                 - 8);
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = v4 + ((*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  closure #1 in closure #1 in closure #1 in PaperDocumentView.cropPageAction(for:)(a1, a2, a3, a4, v10, v11);
}

uint64_t block_copy_helper_52(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_52()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in PaperDocumentView.apply(contentsBoundsQuad:to:)()
{
  return closure #1 in PaperDocumentView.apply(contentsBoundsQuad:to:)();
}

uint64_t partial apply for closure #1 in closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)()
{
  return closure #1 in closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.apply(contentsBoundsQuad:to:)@<X0>(BOOL *a1@<X8>)
{
  return closure #1 in closure #1 in PaperDocumentView.apply(contentsBoundsQuad:to:)(*(_OWORD **)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in PaperDocumentView.applyFilterPageAction(for:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PaperDocumentView.applyFilterPageAction(for:)(a1);
}

uint64_t sub_20C6A5A70()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v14 = *(void *)(v1 + 64);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v3, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v3, v8);
  }
  uint64_t v10 = v2 | v6 | 7;
  unint64_t v11 = (v14 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = (v11 + v6 + 8) & ~v6;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v12, v4);
  return MEMORY[0x270FA0238](v0, v12 + v7, v10);
}

uint64_t partial apply for closure #2 in PaperDocumentView.applyFilterPageAction(for:)(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>)
                 - 8);
  uint64_t v9 = *(void *)(v2 + v7);
  uint64_t v10 = v2 + ((v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return closure #2 in PaperDocumentView.applyFilterPageAction(for:)(a1, a2, v2 + v6, v9, v10);
}

uint64_t partial apply for closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:));
}

uint64_t partial apply for closure #2 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #2 in closure #2 in PaperDocumentView.applyFilterPageAction(for:));
}

uint64_t partial apply for closure #3 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #3 in closure #2 in PaperDocumentView.applyFilterPageAction(for:));
}

uint64_t objectdestroy_228Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #4 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #4 in closure #2 in PaperDocumentView.applyFilterPageAction(for:));
}

uint64_t partial apply for closure #1 in closure #2 in PaperDocumentView.applyFilterPageAction(for:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>)
                 - 8);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a2(a1, v5, v6);
}

uint64_t partial apply for closure #1 in PaperDocumentView.apply(filter:to:)()
{
  return closure #1 in PaperDocumentView.apply(filter:to:)();
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.apply(filter:to:)@<X0>(char *a1@<X8>)
{
  return closure #1 in closure #1 in PaperDocumentView.apply(filter:to:)(*(unsigned char *)(v1 + 16), a1);
}

uint64_t sub_20C6A5F40()
{
  return objectdestroy_219Tm(40);
}

uint64_t objectdestroy_219Tm(uint64_t a1)
{
  swift_release();

  return MEMORY[0x270FA0238](v1, a1, 7);
}

void partial apply for closure #1 in PaperDocumentView.scanPagesAction(for:toolPicker:)(uint64_t a1)
{
  closure #1 in PaperDocumentView.scanPagesAction(for:toolPicker:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_20C6A5FA0()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in PaperDocumentView.insertFromFileAction(for:)(uint64_t a1)
{
  closure #2 in PaperDocumentView.pasteAction(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (void (*)(uint64_t))PaperDocumentView.insertFromFile(at:));
}

void partial apply for closure #1 in PaperDocumentView.insertPageAction(for:)(uint64_t a1)
{
  closure #2 in PaperDocumentView.pasteAction(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (void (*)(uint64_t))PaperDocumentView.insertBlankPage(at:));
}

void partial apply for closure #1 in PaperDocumentView.rotateRightAction(for:)(uint64_t a1)
{
  closure #1 in PaperDocumentView.rotateLeftAction(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 0);
}

void partial apply for closure #1 in PaperDocumentView.rotateLeftAction(for:)(uint64_t a1)
{
  closure #1 in PaperDocumentView.rotateLeftAction(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 1);
}

void partial apply for closure #1 in PaperDocumentView.copyPageAction(for:)(uint64_t a1)
{
  closure #1 in PaperDocumentView.copyPageAction(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_20C6A6080()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

void partial apply for closure #1 in closure #1 in PaperDocumentView.scanPagesAction(for:toolPicker:)(void *a1)
{
  closure #1 in closure #1 in PaperDocumentView.scanPagesAction(for:toolPicker:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40), *(void **)(v1 + 48));
}

void partial apply for closure #1 in PaperDocumentView.deleteAction(for:)(uint64_t a1)
{
  closure #1 in PaperDocumentView.deleteAction(for:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.deletePage(at:)(uint64_t a1)
{
  return closure #1 in closure #1 in PaperDocumentView.deletePage(at:)(a1, *(void *)(v1 + 16));
}

void partial apply for closure #2 in PaperDocumentView.pasteAction(for:)(uint64_t a1)
{
  closure #2 in PaperDocumentView.pasteAction(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (void (*)(uint64_t))PaperDocumentView.paste(at:));
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.rotatePage(_:left:)(uint64_t a1)
{
  return closure #1 in closure #1 in PaperDocumentView.rotatePage(_:left:)(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_20C6A6154()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #3 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in PaperDocumentView.insert(_:at:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), (uint64_t)&unk_26C15E440, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #3 in PaperDocumentView.insert(_:at:));
}

uint64_t partial apply for closure #2 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in PaperDocumentView.insert(_:at:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), (uint64_t)&unk_26C15E418, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #2 in PaperDocumentView.insert(_:at:));
}

uint64_t partial apply for closure #1 in PaperDocumentView.insert(_:at:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in PaperDocumentView.insert(_:at:)(a1, a2, *(char **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_20C6A6204()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.insert(_:at:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *unint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in PaperDocumentView.insert(_:at:)(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_20C6A6418()
{
  return objectdestroy_330Tm(MEMORY[0x263F32D98]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in PaperDocumentView.insert(_:at:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CRStableAsset() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *unint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in closure #2 in PaperDocumentView.insert(_:at:)(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_20C6A655C()
{
  return objectdestroy_330Tm(MEMORY[0x263F32D98]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #3 in PaperDocumentView.insert(_:at:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CRStableAsset() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *unint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in closure #3 in PaperDocumentView.insert(_:at:)(a1, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.insert(_:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in PaperDocumentView.insert(_:at:)(a1, *(void **)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in PaperDocumentView.insert(_:at:)()
{
  return closure #1 in PaperDocumentView.insert(newDocument:at:)(v0[2], v0[3], v0[4], (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.insert(_:at:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in PaperDocumentView.insert(_:at:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in PaperDocumentView.loadAndInsertPDF(url:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in PaperDocumentView.loadAndInsertPDF(url:at:)(a1, *(void *)(v2 + 16), *(unsigned char **)(v2 + 32), a2);
}

id partial apply for specialized closure #1 in PaperDocument.appendPages<A>(_:_:_:assetManager:useProxyPages:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized PaperDocument.create<A>(page:fromDocument:asset:in:assetManager:useProxyPages:)(*a1, *(void **)(v2 + 24), *(id *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(unsigned __int8 *)(v2 + 56), a2);
}

uint64_t sub_20C6A676C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_20C6A6784()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _ss13OpaquePointerVSpySbGIgyy_AbCIegyy_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #1 in PaperDocumentView.insert(newDocument:at:)()
{
  return closure #1 in PaperDocumentView.insert(newDocument:at:)(v0[2], v0[3], v0[4], &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.insert(newDocument:at:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in PaperDocumentView.insert(newDocument:at:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in PaperDocumentView.paste(document:at:)()
{
  return closure #1 in PaperDocumentView.paste(document:at:)();
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.paste(document:at:)(uint64_t a1)
{
  return closure #1 in closure #1 in PaperDocumentView.paste(document:at:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in PaperDocumentView.registerFileRepresentations(forPage:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in PaperDocumentView.registerFileRepresentations(forPage:to:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_20C6A6848()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #2 in PaperDocumentView.registerFileRepresentations(forPage:to:)(void (*a1)(uint64_t, void, void), uint64_t a2)
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return closure #2 in PaperDocumentView.registerFileRepresentations(forPage:to:)(a1, a2, v6, v7);
}

uint64_t sub_20C6A69A0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void **)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)(a1, a2, v2 + v6, v7);
}

uint64_t sub_20C6A6AF8()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return MEMORY[0x270FA0238](v0, v10, v11);
}

uint64_t partial apply for closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>)
                 - 8);
  uint64_t v9 = v2 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)(a1, a2, v2 + v6, v9);
}

uint64_t sub_20C6A6D3C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release();
  return MEMORY[0x270FA0238](v0, v11, v10);
}

uint64_t partial apply for closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>)
                 - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = v1 + v9;
  uint64_t v14 = (uint64_t *)(v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v17;
  *uint64_t v17 = v3;
  v17[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #4 in PaperDocumentView.registerFileRepresentations(forPage:to:)(a1, v10, v11, v12, v13, v15, v16);
}

uint64_t outlined retain of PaperRenderableOptions(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  id v3 = *(id *)(a1 + 64);
  id v4 = v2;
  return a1;
}

uint64_t partial apply for closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1)
{
  return closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_20C6A7094()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();
  return MEMORY[0x270FA0238](v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

uint64_t partial apply for closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = (uint64_t *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #3 in PaperDocumentView.registerFileRepresentations(forPage:to:)(a1, v7, v8, v10, v9, v12, v13);
}

uint64_t sub_20C6A72DC()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSURL?, @unowned Bool, @unowned NSError?) -> ()(uint64_t a1, char a2, uint64_t a3)
{
  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSURL?, @unowned Bool, @unowned NSError?) -> ()(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.insertBlankPage(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 48);
  long long v4 = *(_OWORD *)(v2 + 32);
  v6[0] = *(_OWORD *)(v2 + 16);
  v6[1] = v4;
  uint64_t v7 = v3;
  return closure #1 in closure #1 in PaperDocumentView.insertBlankPage(at:)(a1, (double *)v6, *(void *)(v2 + 56), a2);
}

uint64_t sub_20C6A7358()
{
  return objectdestroy_330Tm(MEMORY[0x263F06EA8]);
}

uint64_t objectdestroy_330Tm(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 40) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = ((*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return MEMORY[0x270FA0238](v1, v7, v6);
}

uint64_t partial apply for closure #1 in PaperDocumentView.insertFile(at:at:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  v8[2] = a1;
  uint64_t v9 = (void *)swift_task_alloc();
  v8[3] = v9;
  *uint64_t v9 = v8;
  v9[1] = closure #1 in PaperDocumentView.insertFile(at:at:);
  return PaperDocumentView.loadAndInsertPDF(url:at:)(v6, v7);
}

uint64_t outlined consume of CollectionDifference<PDFPage>.Change()
{
  return MEMORY[0x270F9A758]();
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.handlePageOrderedCollectionDifference(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in PaperDocumentView.handlePageOrderedCollectionDifference(_:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in PaperDocumentView.pdfPageDidChange(page:)()
{
  return closure #1 in PaperDocumentView.pdfPageDidChange(page:)();
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.pdfPageDidChange(page:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in closure #1 in PaperDocumentView.pdfPageDidChange(page:)(a1, *(void *)(v2 + 24), a2);
}

uint64_t sub_20C6A7608()
{
  uint64_t v1 = type metadata accessor for Notification();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in PaperDocumentView.annotationPropertiesChanged(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Notification() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperDocumentView.annotationPropertiesChanged(_:)(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in closure #2 in PaperDocumentView.annotationPropertiesChanged(_:)(uint64_t a1)
{
  return closure #1 in closure #2 in PaperDocumentView.annotationPropertiesChanged(_:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_20C6A77F8()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in PaperDocumentView.didChange(page:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperDocumentView.didChange(page:)(a1, v4, v5, v6);
}

uint64_t sub_20C6A78F8()
{
  uint64_t v1 = type metadata accessor for CRAsset();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CRAsset() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:)(a1, v6, v7, v8, v9);
}

uint64_t partial apply for specialized closure #1 in PaperDocument.update<A>(_:in:otherDocuments:use:)(uint64_t a1)
{
  return specialized closure #1 in PaperDocument.update<A>(_:in:otherDocuments:use:)(a1);
}

uint64_t _s2os21OSAllocatedUnfairLockVAAytRszlE04withD0yqd__qd__yYbKXEKs8SendableRd__lFqd__ytz_tYbKXEfU_8PaperKit6PageIdVSg_Tg5TA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t _s8PaperKit0A8DocumentVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of Image(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s8PaperKit13CRAssetOrDataOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

double partial apply for closure #1 in Shape.renderSync<A>(in:id:capsule:options:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  return closure #1 in Shape.renderSync<A>(in:id:capsule:options:)(a1, a2);
}

uint64_t outlined assign with take of WeakCalculateExpression(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_20C6A7CF4()
{
  swift_release();

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in PaperDocumentView.addFormFields(_:for:)()
{
  closure #1 in PaperDocumentView.addFormFields(_:for:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t partial apply for closure #1 in PaperDocumentView.loadPaperKitPageIfNeeded(for:)(uint64_t a1)
{
  return closure #1 in PaperDocumentView.loadPaperKitPageIfNeeded(for:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_20C6A7D70()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v4 + v6 + 8) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = v0 + v3;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>);
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }

  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v0 + v7, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0 + v7, v12);
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((v7 + v8) & 0xFFFFFFFFFFFFFFF8) + 24, v2 | v6 | 7);
}

uint64_t objectdestroy_231Tm()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 18) & ~v2;
  uint64_t v13 = *(void *)(v1 + 64);
  uint64_t v4 = type metadata accessor for CapsuleUndoAction();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v3, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v3, v8);
  }
  uint64_t v10 = (v3 + v13 + v6) & ~v6;
  uint64_t v11 = v10 + v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v10, v4);
  return MEMORY[0x270FA0238](v0, v11, v2 | v6 | 7);
}

void *partial apply for closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for CapsuleUndoAction();
  return specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)((*(unsigned char *)(v0 + 16) | *(unsigned char *)(v0 + 17)) & 1, 0, v0 + v2, (void (*)(uint64_t))partial apply for closure #1 in closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:));
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in PaperDocumentView.addCanvasElement<A>(_:in:setSelected:)(a1, v2[6], v2[2], v2[3], v2[4], a2);
}

void partial apply for closure #1 in PaperDocumentView.liveStreamMessenger.didset(uint64_t a1)
{
  closure #1 in PaperDocumentView.liveStreamMessenger.didset(a1, v1);
}

uint64_t partial apply for closure #1 in PaperDocumentView.convert(_:from:)(void *a1)
{
  return partial apply for closure #1 in PaperDocumentView.canvas(for:)(a1) & 1;
}

uint64_t closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply()
{
  return _s2os21OSAllocatedUnfairLockVAAytRszlE04withD0yqd__qd__yYbKXEKs8SendableRd__lFqd__ytz_tYbKXEfU_8PaperKit6PageIdVSg_Tg5TA_0();
}

uint64_t closure #1 in PaperDocumentView.updateVellumWithOpacity(_:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in PaperDocumentView.updateVellumWithOpacity(_:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for FontToggleStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (uint64_t *)((char *)a1 + v6);
    uint64_t v8 = (uint64_t *)((char *)a2 + v6);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for FontToggleStyle(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

void *initializeWithCopy for FontToggleStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *uint64_t v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for FontToggleStyle(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    outlined destroy of Environment<ColorScheme>.Content((uint64_t)a1 + v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of Environment<ColorScheme>.Content(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for FontToggleStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for FontToggleStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    outlined destroy of Environment<ColorScheme>.Content((uint64_t)a1 + v7);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FontToggleStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C6A8968);
}

uint64_t sub_20C6A8968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for FontToggleStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C6A8A30);
}

uint64_t sub_20C6A8A30(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for FontToggleStyle()
{
  uint64_t result = type metadata singleton initialization cache for FontToggleStyle;
  if (!type metadata singleton initialization cache for FontToggleStyle) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for FontToggleStyle()
{
  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in FontToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #2 in FontToggleStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = &v30[-v9];
  swift_bridgeObjectRetain();
  uint64_t v11 = Image.init(systemName:)();
  uint64_t v12 = static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(54.0, 0, 0.0, 1, 54.0, 0, 36.0, 0, (uint64_t)v50, 0.0, 1, 36.0, 0, v12, v13, v11);
  swift_release();
  uint64_t v14 = v50[0];
  uint64_t v15 = v50[1];
  char v16 = v51;
  uint64_t v43 = v52;
  int v42 = v53;
  uint64_t v41 = v54;
  int v40 = v55;
  uint64_t v39 = v56;
  int v38 = v57;
  uint64_t v37 = v58;
  int v36 = v59;
  uint64_t v35 = v60;
  int v34 = v61;
  uint64_t v33 = v62;
  uint64_t v32 = v63;
  if (ToggleStyleConfiguration.isOn.getter())
  {
    uint64_t v17 = static Color.accentColor.getter();
  }
  else
  {
    type metadata accessor for FontToggleStyle();
    specialized Environment.wrappedValue.getter((uint64_t)v10);
    (*(void (**)(unsigned char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F18508], v4);
    int v31 = static ColorScheme.== infix(_:_:)();
    uint64_t v18 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
    v18(v7, v4);
    v18(v10, v4);
    uint64_t v19 = self;
    uint64_t v20 = &selRef_secondarySystemBackgroundColor;
    if ((v31 & 1) == 0) {
      uint64_t v20 = &selRef_tertiarySystemBackgroundColor;
    }
    uint64_t v17 = MEMORY[0x21054A6C0]([v19 *v20]);
  }
  uint64_t v21 = v17;
  uint64_t result = static Edge.Set.all.getter();
  char v49 = v16;
  char v23 = v42;
  char v48 = v42;
  char v24 = v40;
  char v47 = v40;
  char v25 = v38;
  char v46 = v38;
  char v26 = v36;
  char v45 = v36;
  char v27 = v34;
  char v44 = v34;
  uint64_t v28 = *(void *)(a1 + 16);
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v15;
  *(unsigned char *)(a2 + 16) = v16;
  *(void *)(a2 + 24) = v43;
  *(unsigned char *)(a2 + 32) = v23;
  *(void *)(a2 + 40) = v41;
  *(unsigned char *)(a2 + 48) = v24;
  *(void *)(a2 + 56) = v39;
  *(unsigned char *)(a2 + 64) = v25;
  *(void *)(a2 + 72) = v37;
  *(unsigned char *)(a2 + 80) = v26;
  *(void *)(a2 + 88) = v35;
  *(unsigned char *)(a2 + 96) = v27;
  uint64_t v29 = v32;
  *(void *)(a2 + 104) = v33;
  *(void *)(a2 + 112) = v29;
  *(void *)(a2 + 120) = v21;
  *(unsigned char *)(a2 + 128) = result;
  *(void *)(a2 + 136) = 0x4014000000000000;
  *(void *)(a2 + 144) = v28;
  *(_WORD *)(a2 + 152) = 256;
  return result;
}

uint64_t protocol witness for ToggleStyle.makeBody(configuration:) in conformance FontToggleStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v3 = type metadata accessor for PlainButtonStyle();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v20 = v3;
  uint64_t v21 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ToggleStyleConfiguration();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7, v12);
  unint64_t v15 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v16 + v15, (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  uint64_t v23 = v19;
  uint64_t v24 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
  uint64_t v17 = v20;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_20C6A92A4()
{
  uint64_t v1 = type metadata accessor for ToggleStyleConfiguration();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in FontToggleStyle.makeBody(configuration:)()
{
  type metadata accessor for ToggleStyleConfiguration();
  uint64_t v0 = (uint64_t (*)(uint64_t *, void))ToggleStyleConfiguration.isOn.modify();
  *uint64_t v1 = !*v1;
  return v0(&v3, 0);
}

uint64_t partial apply for closure #2 in FontToggleStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in FontToggleStyle.makeBody(configuration:)(*(void *)(v1 + 16), a1);
}

uint64_t sub_20C6A93D0()
{
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeBufferWithCopyOfBuffer for MiniMenu(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    swift_weakCopyInit();
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    swift_retain();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  return a1;
}

uint64_t destroy for MiniMenu(uint64_t a1, uint64_t a2)
{
  swift_weakDestroy();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for MiniMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(swift_weakCopyInit() + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  swift_retain();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for MiniMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(swift_weakCopyAssign() + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for MiniMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_weakTakeInit();
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for MiniMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(swift_weakTakeAssign() + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C6A9858);
}

uint64_t sub_20C6A9858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for MiniMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C6A992C);
}

uint64_t sub_20C6A992C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 16) = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for MiniMenu(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for MiniMenu);
}

void type metadata completion function for MiniMenu()
{
  type metadata accessor for Bindable<MiniMenuState>(319, (unint64_t *)&lazy cache variable for type metadata for Bindable<MiniMenuState>, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, MEMORY[0x263F1B870]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t associated type witness table accessor for View.Body : View in MiniMenu()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t key path getter for MiniMenuState.popoverState : MiniMenuState@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 24);
  return swift_retain();
}

uint64_t key path setter for MiniMenuState.popoverState : MiniMenuState()
{
  return swift_release();
}

uint64_t key path getter for MiniMenuState.visible : MiniMenuState@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 32);
  return result;
}

uint64_t key path setter for MiniMenuState.visible : MiniMenuState()
{
  return swift_release();
}

uint64_t MiniMenuPalette.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v81 = a1;
  uint64_t v3 = type metadata accessor for ColorScheme();
  uint64_t v79 = *(void *)(v3 - 8);
  uint64_t v80 = v3;
  MEMORY[0x270FA5388](v3);
  id v78 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v76 = (uint64_t)&v65 - v6;
  uint64_t v7 = type metadata accessor for Capsule();
  MEMORY[0x270FA5388](v7 - 8);
  id v75 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for Material();
  uint64_t v70 = *(void *)(v71 - 8);
  MEMORY[0x270FA5388](v71);
  uint64_t v69 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>);
  MEMORY[0x270FA5388](v65);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>);
  MEMORY[0x270FA5388](v66);
  uint64_t v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>);
  MEMORY[0x270FA5388](v67);
  uint64_t v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>);
  MEMORY[0x270FA5388](v68);
  uint64_t v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>);
  MEMORY[0x270FA5388](v72);
  char v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>, _PaddingLayout>);
  MEMORY[0x270FA5388](v73);
  uint64_t v74 = (uint64_t)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v17 = static VerticalAlignment.center.getter();
  *((void *)v17 + 1) = 0;
  v17[16] = 1;
  uint64_t v27 = (uint64_t)&v17[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>)
                             + 44)];
  uint64_t v28 = static VerticalAlignment.firstTextBaseline.getter();
  if (one-time initialization token for buttonSpacing != -1) {
    swift_once();
  }
  uint64_t v29 = static MiniMenuConstants.buttonSpacing;
  *(void *)uint64_t v12 = v28;
  *((void *)v12 + 1) = v29;
  v12[16] = 0;
  uint64_t v30 = (uint64_t)&v12[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>)
                             + 44)];
  uint64_t v77 = v2;
  closure #1 in closure #1 in MiniMenuPalette.body.getter(v2, v30);
  char v31 = static Edge.Set.horizontal.getter();
  if (one-time initialization token for paletteHorizontalPadding != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>);
  int v40 = &v14[*(int *)(v65 + 36)];
  *int v40 = v31;
  *((void *)v40 + 1) = v33;
  *((void *)v40 + 2) = v35;
  *((void *)v40 + 3) = v37;
  *((void *)v40 + 4) = v39;
  v40[40] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v14, v27, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>);
  if (one-time initialization token for paletteHeight != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v17, (uint64_t)v19, &demangling cache variable for type metadata for HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>);
  uint64_t v41 = &v19[*(int *)(v66 + 36)];
  long long v42 = v83;
  *(_OWORD *)uint64_t v41 = v82;
  *((_OWORD *)v41 + 1) = v42;
  *((_OWORD *)v41 + 2) = v84;
  uint64_t v43 = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>);
  char v44 = v69;
  MEMORY[0x21054A9B0](v43);
  char v45 = static Edge.Set.all.getter();
  char v46 = &v21[*(int *)(v67 + 36)];
  uint64_t v47 = v70;
  uint64_t v48 = v71;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v46, v44, v71);
  v46[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _BackgroundStyleModifier<Material>)
             + 36)] = v45;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v19, (uint64_t)v21, &demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v48);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>);
  uint64_t v49 = *MEMORY[0x263F19860];
  uint64_t v50 = type metadata accessor for RoundedCornerStyle();
  uint64_t v51 = (uint64_t)v75;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 104))(v75, v49, v50);
  uint64_t v52 = (uint64_t)&v23[*(int *)(v68 + 36)];
  outlined init with copy of MiniMenuPalette(v51, v52, MEMORY[0x263F1B7A0]);
  *(_WORD *)(v52
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ClipEffect<Capsule>)
                    + 36)) = 256;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v21, (uint64_t)v23, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>);
  outlined destroy of MiniMenuPalette(v51, MEMORY[0x263F1B7A0]);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>);
  static Color.black.getter();
  uint64_t v53 = Color.opacity(_:)();
  swift_release();
  uint64_t v54 = v76;
  specialized Environment.wrappedValue.getter(v76);
  uint64_t v56 = v78;
  uint64_t v55 = v79;
  uint64_t v57 = v80;
  (*(void (**)(char *, void, uint64_t))(v79 + 104))(v78, *MEMORY[0x263F184F8], v80);
  LOBYTE(v51) = static ColorScheme.== infix(_:_:)();
  uint64_t v58 = *(void (**)(char *, uint64_t))(v55 + 8);
  v58(v56, v57);
  v58((char *)v54, v57);
  uint64_t v59 = 0;
  if ((v51 & 1) == 0)
  {
    if (one-time initialization token for paletteShadowRadius != -1) {
      swift_once();
    }
    uint64_t v59 = static MiniMenuConstants.paletteShadowRadius;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v23, (uint64_t)v25, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>);
  uint64_t v60 = (uint64_t *)&v25[*(int *)(v72 + 36)];
  *uint64_t v60 = v53;
  v60[1] = v59;
  v60[2] = 0;
  v60[3] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>);
  char v61 = static Edge.Set.all.getter();
  uint64_t v62 = v74;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v25, v74, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>);
  uint64_t v63 = v62 + *(int *)(v73 + 36);
  *(unsigned char *)uint64_t v63 = v61;
  *(_OWORD *)(v63 + 8) = 0u;
  *(_OWORD *)(v63 + 24) = 0u;
  *(unsigned char *)(v63 + 40) = 1;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v62, v81, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>, _PaddingLayout>);
}

uint64_t closure #1 in closure #1 in MiniMenuPalette.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v51 = type metadata accessor for MiniMagicButtons();
  uint64_t v50 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v48 = (char *)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiniMagicButtons?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v57 = (uint64_t)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v56 = (uint64_t)v47 - v7;
  uint64_t v53 = type metadata accessor for MiniStyleButtons();
  uint64_t v54 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v9 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MiniStyleButtons?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v55 = (uint64_t)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v47 - v13;
  uint64_t v15 = type metadata accessor for MiniMenuPalette(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  Bindable.wrappedValue.getter();
  uint64_t v16 = v66;
  swift_getKeyPath();
  uint64_t v66 = v16;
  uint64_t v17 = _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v18 = *(void *)(v16 + 40);
  swift_release();
  uint64_t v49 = v15;
  if ((v18 & 0x1F) != 0)
  {
    Bindable.wrappedValue.getter();
    swift_weakLoadStrong();
    type metadata accessor for MiniMenuState();
    Bindable<A>.init(wrappedValue:)();
    uint64_t v19 = v53;
    swift_weakInit();
    swift_release();
    outlined init with take of MiniMenu((uint64_t)v9, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for MiniStyleButtons);
    uint64_t v20 = 0;
    uint64_t v21 = a1;
    uint64_t v22 = v17;
    uint64_t v23 = v19;
  }
  else
  {
    uint64_t v20 = 1;
    uint64_t v21 = a1;
    uint64_t v22 = v17;
    uint64_t v23 = v53;
  }
  uint64_t v24 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v14, v20, 1, v23);
  Bindable.wrappedValue.getter();
  char v25 = (void *)MEMORY[0x210550400](v66 + 16);
  uint64_t v26 = swift_release();
  if (!v25)
  {
    uint64_t v39 = v52;
    uint64_t v38 = v56;
    uint64_t v37 = v51;
    uint64_t v40 = v50;
    goto LABEL_14;
  }
  uint64_t v27 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v25) + 0x320))(v26);
  if (!v27)
  {
    uint64_t v39 = v52;
    goto LABEL_13;
  }
  uint64_t v28 = (void *)v27;
  uint64_t v54 = v22;
  uint64_t v29 = v21;
  type metadata accessor for TiledTextView();
  if (!swift_dynamicCastClass()) {
    goto LABEL_11;
  }
  id v30 = TiledTextView.canvasGenerationToolOverlayController.getter();
  id v31 = CanvasGenerationToolOverlayController.imageGenerationController.getter();
  unsigned int v32 = objc_msgSend(v31, sel_shouldShowImageGenerationUI);

  if (!v32) {
    goto LABEL_11;
  }
  Bindable.wrappedValue.getter();
  uint64_t v33 = v66;
  swift_getKeyPath();
  uint64_t v66 = v33;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v34 = *(void *)(v33 + 40);
  swift_release();
  if ((v34 & 0x40060) == 0)
  {
LABEL_11:

    char v25 = v28;
    uint64_t v39 = v52;
LABEL_13:
    uint64_t v37 = v51;
    uint64_t v40 = v50;

    uint64_t v24 = 1;
    uint64_t v38 = v56;
    goto LABEL_14;
  }
  Bindable.wrappedValue.getter();
  v47[1] = v29;
  swift_weakLoadStrong();
  type metadata accessor for FeedbackManager();
  initedouble d = swift_initStaticObject();
  type metadata accessor for MiniMenuState();
  uint64_t v36 = (uint64_t)v48;
  Bindable<A>.init(wrappedValue:)();
  uint64_t v37 = v51;
  swift_weakInit();

  swift_release();
  *(void *)(v36 + *(int *)(v37 + 24)) = inited;
  uint64_t v38 = v56;
  outlined init with take of MiniMenu(v36, v56, (uint64_t (*)(void))type metadata accessor for MiniMagicButtons);
  uint64_t v24 = 0;
  uint64_t v39 = v52;
  uint64_t v40 = v50;
LABEL_14:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v38, v24, 1, v37);
  Bindable.wrappedValue.getter();
  swift_weakLoadStrong();
  type metadata accessor for FeedbackManager();
  uint64_t v41 = swift_initStaticObject();
  v59[0] = 0;
  State.init(wrappedValue:)();
  v59[0] = v66;
  uint64_t v60 = v67;
  char v58 = 0;
  State.init(wrappedValue:)();
  char v61 = v66;
  uint64_t v62 = v67;
  type metadata accessor for MiniMenuState();
  _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  uint64_t v63 = ObservedObject.init(wrappedValue:)();
  uint64_t v64 = v42;
  swift_weakInit();
  swift_release();
  uint64_t v65 = v41;
  outlined init with take of MiniObjectButtons((uint64_t)v59, (uint64_t)&v66);
  uint64_t v43 = v55;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v14, v55, (uint64_t *)&demangling cache variable for type metadata for MiniStyleButtons?);
  uint64_t v44 = v57;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v38, v57, &demangling cache variable for type metadata for MiniMagicButtons?);
  outlined init with copy of MiniObjectButtons((uint64_t)&v66, (uint64_t)v59);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v43, v39, (uint64_t *)&demangling cache variable for type metadata for MiniStyleButtons?);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons));
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v44, v39 + *(int *)(v45 + 48), &demangling cache variable for type metadata for MiniMagicButtons?);
  outlined init with copy of MiniObjectButtons((uint64_t)v59, v39 + *(int *)(v45 + 64));
  outlined destroy of MiniObjectButtons((uint64_t)&v66);
  outlined destroy of StocksKitCurrencyCache.Provider?(v38, &demangling cache variable for type metadata for MiniMagicButtons?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for MiniStyleButtons?);
  outlined destroy of MiniObjectButtons((uint64_t)v59);
  outlined destroy of StocksKitCurrencyCache.Provider?(v44, &demangling cache variable for type metadata for MiniMagicButtons?);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v43, (uint64_t *)&demangling cache variable for type metadata for MiniStyleButtons?);
}

uint64_t MiniMenu.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v58 = a1;
  uint64_t v3 = type metadata accessor for MiniMenu(0);
  uint64_t v4 = v3 - 8;
  uint64_t v52 = *(void *)(v3 - 8);
  uint64_t v51 = *(void *)(v52 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v50 = (uint64_t)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MiniMenuPalette(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (void *)((char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<MiniMenuPalette, _ScaleEffect>);
  uint64_t v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect>);
  MEMORY[0x270FA5388](v47);
  uint64_t v14 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.onChange<A>(of:initial:_:)>>.0);
  uint64_t v56 = *(void *)(v15 - 8);
  uint64_t v57 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v49 = (char *)v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>)
      - 8;
  MEMORY[0x270FA5388](v54);
  uint64_t v48 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>, _EnvironmentKeyWritingModifier<MiniMenuController?>>)
      - 8;
  MEMORY[0x270FA5388](v55);
  uint64_t v53 = (uint64_t)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakLoadStrong();
  v46[1] = v1 + *(int *)(v4 + 32);
  v46[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  Bindable.wrappedValue.getter();
  *uint64_t v8 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  swift_weakInit();
  swift_release();
  type metadata accessor for MiniMenuState();
  _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  Bindable<A>.init(wrappedValue:)();
  uint64_t v19 = *(void *)(v1 + 16);
  LOBYTE(v59) = *(unsigned char *)(v1 + 8);
  uint64_t v60 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  if (v61) {
    double v20 = 1.0;
  }
  else {
    double v20 = 0.75;
  }
  static UnitPoint.center.getter();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  outlined init with copy of MiniMenuPalette((uint64_t)v8, (uint64_t)v12, type metadata accessor for MiniMenuPalette);
  char v25 = &v12[*(int *)(v10 + 44)];
  *(double *)char v25 = v20;
  *((double *)v25 + 1) = v20;
  *((void *)v25 + 2) = v22;
  *((void *)v25 + 3) = v24;
  outlined destroy of MiniMenuPalette((uint64_t)v8, type metadata accessor for MiniMenuPalette);
  uint64_t v26 = *(void *)(v1 + 16);
  LOBYTE(v59) = *(unsigned char *)(v1 + 8);
  uint64_t v60 = v26;
  State.wrappedValue.getter();
  if (v61) {
    double v27 = 1.0;
  }
  else {
    double v27 = 0.0;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<MiniMenuPalette, _ScaleEffect>);
  *(double *)&v14[*(int *)(v47 + 36)] = v27;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<MiniMenuPalette, _ScaleEffect>);
  Bindable.wrappedValue.getter();
  uint64_t v28 = v59;
  swift_getKeyPath();
  uint64_t v59 = v28;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v29 = *(unsigned char *)(v28 + 32);
  swift_release();
  LOBYTE(v59) = v29;
  uint64_t v30 = v50;
  outlined init with copy of MiniMenuPalette(v2, v50, type metadata accessor for MiniMenu);
  unint64_t v31 = (*(unsigned __int8 *)(v52 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  uint64_t v32 = swift_allocObject();
  outlined init with take of MiniMenu(v30, v32 + v31, type metadata accessor for MiniMenu);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<MiniMenuPalette, _ScaleEffect> and conformance <> ModifiedContent<A, B>);
  uint64_t v33 = v49;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect>);
  Bindable.wrappedValue.getter();
  uint64_t v34 = v59;
  swift_getKeyPath();
  uint64_t v59 = v34;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v35 = *(void *)(v34 + 24);
  swift_retain();
  swift_release();
  type metadata accessor for MiniPopoverState();
  _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState, (void (*)(uint64_t))type metadata accessor for MiniPopoverState);
  uint64_t v36 = static ObservableObject.environmentStore.getter();
  uint64_t v38 = v56;
  uint64_t v37 = v57;
  uint64_t v39 = (uint64_t)v48;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v48, v33, v57);
  uint64_t v40 = (uint64_t *)(v39 + *(int *)(v54 + 44));
  *uint64_t v40 = v36;
  v40[1] = v35;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v33, v37);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v43 = v53;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v39, v53, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>);
  uint64_t v44 = (uint64_t *)(v43 + *(int *)(v55 + 44));
  uint64_t *v44 = KeyPath;
  v44[1] = Strong;
  outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v43, v58, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>, _EnvironmentKeyWritingModifier<MiniMenuController?>>);
}

uint64_t closure #1 in MiniMenu.body.getter()
{
  return swift_release();
}

uint64_t closure #1 in closure #1 in MiniMenu.body.getter()
{
  return State.wrappedValue.setter();
}

uint64_t key path getter for EnvironmentValues.miniMenuController : EnvironmentValues@<X0>(void *a1@<X8>)
{
  lazy protocol witness table accessor for type EnvironmentValues.__Key_miniMenuController and conformance EnvironmentValues.__Key_miniMenuController();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.miniMenuController : EnvironmentValues()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t type metadata accessor for MiniMenuPalette(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for MiniMenuPalette);
}

uint64_t key path getter for EnvironmentValues.colorScheme : EnvironmentValues()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_20C6AB928()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t key path setter for EnvironmentValues.colorScheme : EnvironmentValues(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  double v3 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues.colorScheme.setter();
}

uint64_t outlined init with copy of MiniMenuPalette(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_20C6ABA88()
{
  uint64_t v1 = (int *)(type metadata accessor for MiniMenu(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_weakDestroy();
  swift_release();
  uint64_t v7 = v6 + v1[8];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t partial apply for closure #1 in MiniMenu.body.getter()
{
  type metadata accessor for MiniMenu(0);
  return closure #1 in MiniMenu.body.getter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MiniMenuPalette, _ScaleEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<MiniMenuPalette, _ScaleEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MiniMenuPalette, _ScaleEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<MiniMenuPalette, _ScaleEffect>);
    _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type MiniMenuPalette and conformance MiniMenuPalette, (void (*)(uint64_t))type metadata accessor for MiniMenuPalette);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MiniMenuPalette, _ScaleEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20C6ABCE4@<X0>(void *a1@<X8>)
{
  lazy protocol witness table accessor for type EnvironmentValues.__Key_miniMenuController and conformance EnvironmentValues.__Key_miniMenuController();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.__Key_miniMenuController and conformance EnvironmentValues.__Key_miniMenuController()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.__Key_miniMenuController and conformance EnvironmentValues.__Key_miniMenuController;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.__Key_miniMenuController and conformance EnvironmentValues.__Key_miniMenuController)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.__Key_miniMenuController and conformance EnvironmentValues.__Key_miniMenuController);
  }
  return result;
}

uint64_t partial apply for closure #1 in MiniMenuState.popoverState.setter()
{
  return closure #1 in MiniMenuState.popoverState.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in MiniMenu.body.getter()
{
  return closure #1 in closure #1 in MiniMenu.body.getter();
}

uint64_t _s8PaperKit13MiniMenuStateC7visibleSbvsyyXEfU_TA_0()
{
  return closure #1 in MiniMenuState.visible.setter(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t *initializeBufferWithCopyOfBuffer for MiniMenuPalette(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    swift_weakCopyInit();
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for MiniMenuPalette(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  swift_weakDestroy();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

void *initializeWithCopy for MiniMenuPalette(void *a1, void *a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  swift_weakCopyInit();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

void *assignWithCopy for MiniMenuPalette(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_weakCopyAssign();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

char *initializeWithTake for MiniMenuPalette(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  swift_weakTakeInit();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

char *assignWithTake for MiniMenuPalette(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  swift_weakTakeAssign();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniMenuPalette(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C6AC4F8);
}

uint64_t sub_20C6AC4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 24);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for MiniMenuPalette(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C6AC60C);
}

uint64_t sub_20C6AC60C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 24);
    return v13(v15, a2, a2, v14);
  }
}

void type metadata completion function for MiniMenuPalette()
{
  type metadata accessor for Bindable<MiniMenuState>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<ColorScheme>.Content, MEMORY[0x263F18520], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Bindable<MiniMenuState>(319, (unint64_t *)&lazy cache variable for type metadata for Bindable<MiniMenuState>, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, MEMORY[0x263F1B870]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Bindable<MiniMenuState>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>, _EnvironmentKeyWritingModifier<MiniMenuController?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>, _EnvironmentKeyWritingModifier<MiniMenuController?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>, _EnvironmentKeyWritingModifier<MiniMenuController?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>, _EnvironmentKeyWritingModifier<MiniMenuController?>>);
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<MiniMenuController?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<MiniMenuController?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>, _EnvironmentKeyWritingModifier<MiniMenuController?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<MiniMenuPalette, _ScaleEffect> and conformance <> ModifiedContent<A, B>);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<MiniPopoverState?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<MiniPopoverState?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onChange<A>(of:initial:_:)>>.0, _EnvironmentKeyWritingModifier<MiniPopoverState?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in MiniMenuPalette()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined destroy of MiniMenuPalette(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of MiniMenu(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_20C6ACB58()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<MiniMenuPalette, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _ShadowEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type _ClipEffect<Capsule> and conformance _ClipEffect<A>, &demangling cache variable for type metadata for _ClipEffect<Capsule>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>>);
    lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Material>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<HStack<TupleView<(MiniStyleButtons?, MiniMagicButtons?, MiniObjectButtons)>>, _PaddingLayout>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t specialized CanvasElementView.endLiveEdit(undoable:discard:)(int a1, int a2)
{
  uint64_t v3 = v2;
  int v58 = a2;
  LODWORD(v54) = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v51 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (char *)&v51 - v7;
  uint64_t v53 = type metadata accessor for CapsuleUndoAction();
  uint64_t v57 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v56 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v55 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v51 - v20;
  uint64_t v22 = (void *)MEMORY[0x263F8EED0];
  uint64_t v23 = (uint64_t)v3 + *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0x388);
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v23, (uint64_t)v15, &demangling cache variable for type metadata for Capsule<Shape>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for Capsule<Shape>?);
  }
  char v25 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  uint64_t v52 = v21;
  v25(v21, v15, v16);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v12, 1, 1, v16);
  swift_beginAccess();
  outlined assign with copy of Capsule<Image>?((uint64_t)v12, v23, &demangling cache variable for type metadata for Capsule<Shape>?);
  uint64_t v26 = swift_endAccess();
  double v27 = *(uint64_t (**)(void))((*v22 & *v3) + 0x88);
  uint64_t v28 = ((uint64_t (*)(uint64_t))v27)(v26);
  if (v28)
  {
    char v29 = (void *)v28;
    specialized LiveEditable.didChangeLiveEditing()();
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for Capsule<Shape>?);
  uint64_t v30 = (void *)MEMORY[0x263F8EED0];
  uint64_t v31 = *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0x3A8);
  uint64_t v32 = *(void **)((char *)v3 + v31);
  *(void *)((char *)v3 + v31) = 0;

  uint64_t v34 = v56;
  uint64_t v35 = v57;
  if (v58 & 1) != 0 || (v54)
  {
    uint64_t v33 = (void *)v27();
    if (v33)
    {
      uint64_t v54 = v33;
      uint64_t v36 = (char *)v3 + *(void *)((*v30 & *v3) + 0x380);
      swift_beginAccess();
      uint64_t v37 = v55;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v55, v36, v16);
      Capsule.actionUndoingDifference(from:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v37, v16);
      uint64_t v38 = v53;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v8, 1, v53) == 1)
      {

        uint64_t v33 = (void *)outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for CapsuleUndoAction?);
LABEL_12:
        uint64_t v30 = (void *)MEMORY[0x263F8EED0];
        goto LABEL_14;
      }
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v34, v8, v38);
      if (v58)
      {
        uint64_t v39 = (uint64_t)v51;
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v51, v34, v38);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v39, 0, 1, v38);
        swift_beginAccess();
        Capsule.apply(_:)();
        outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for CapsuleUndoAction?);
        swift_endAccess();

        uint64_t v33 = (void *)(*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v34, v53);
        goto LABEL_12;
      }
      id v40 = v54;
      uint64_t v30 = (void *)MEMORY[0x263F8EED0];
      (*(void (**)(char *, void, void, void, void, void))((*MEMORY[0x263F8EED0] & *v54) + 0x468))(v34, 0, 0, 0, 0, MEMORY[0x263F8EE78]);

      uint64_t v33 = (void *)(*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v34, v53);
    }
  }
LABEL_14:
  uint64_t v41 = (*(uint64_t (**)(void *))((*v30 & *v3) + 0x288))(v33);
  uint64_t v42 = ((uint64_t (*)(uint64_t))v27)(v41);
  if (!v42) {
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v52, v16);
  }
  uint64_t v43 = (void *)v42;
  uint64_t v44 = (char *)v3 + *(void *)((*v30 & *v3) + 0x380);
  swift_beginAccess();
  uint64_t v45 = v55;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v55, v44, v16);
  char v59 = 4;
  char v46 = v30;
  uint64_t v47 = *(void (**)(char *, char *, uint64_t, uint64_t))((*v30 & *v43) + 0x550);
  uint64_t v48 = type metadata accessor for Shape();
  uint64_t v49 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  v47(v45, &v59, v48, v49);
  char v59 = 4;
  (*(void (**)(char *))((*v46 & *v43) + 0x530))(&v59);

  uint64_t v50 = *(void (**)(char *, uint64_t))(v17 + 8);
  v50(v45, v16);
  return ((uint64_t (*)(char *, uint64_t))v50)(v52, v16);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  char *v45;
  void *v46;
  void (*v47)(char *, char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;
  char v59;

  uint64_t v3 = v2;
  int v58 = a2;
  LODWORD(v54) = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v51 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (char *)&v51 - v7;
  uint64_t v53 = type metadata accessor for CapsuleUndoAction();
  uint64_t v57 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v56 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v55 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v51 - v20;
  uint64_t v22 = (void *)MEMORY[0x263F8EED0];
  uint64_t v23 = (uint64_t)v3 + *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0x388);
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v23, (uint64_t)v15, &demangling cache variable for type metadata for Capsule<TextBox>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for Capsule<TextBox>?);
  }
  char v25 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  uint64_t v52 = v21;
  v25(v21, v15, v16);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v12, 1, 1, v16);
  swift_beginAccess();
  outlined assign with copy of Capsule<Image>?((uint64_t)v12, v23, &demangling cache variable for type metadata for Capsule<TextBox>?);
  uint64_t v26 = swift_endAccess();
  double v27 = *(uint64_t (**)(void))((*v22 & *v3) + 0x88);
  uint64_t v28 = ((uint64_t (*)(uint64_t))v27)(v26);
  if (v28)
  {
    char v29 = (void *)v28;
    specialized LiveEditable.didChangeLiveEditing()();
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for Capsule<TextBox>?);
  uint64_t v30 = (void *)MEMORY[0x263F8EED0];
  uint64_t v31 = *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0x3A8);
  uint64_t v32 = *(void **)((char *)v3 + v31);
  *(void *)((char *)v3 + v31) = 0;

  uint64_t v34 = v56;
  uint64_t v35 = v57;
  if (v58 & 1) != 0 || (v54)
  {
    uint64_t v33 = (void *)v27();
    if (v33)
    {
      uint64_t v54 = v33;
      uint64_t v36 = (char *)v3 + *(void *)((*v30 & *v3) + 0x380);
      swift_beginAccess();
      uint64_t v37 = v55;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v55, v36, v16);
      Capsule.actionUndoingDifference(from:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v37, v16);
      uint64_t v38 = v53;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v8, 1, v53) == 1)
      {

        uint64_t v33 = (void *)outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for CapsuleUndoAction?);
LABEL_12:
        uint64_t v30 = (void *)MEMORY[0x263F8EED0];
        goto LABEL_14;
      }
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v34, v8, v38);
      if (v58)
      {
        uint64_t v39 = (uint64_t)v51;
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v51, v34, v38);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v39, 0, 1, v38);
        swift_beginAccess();
        Capsule.apply(_:)();
        outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for CapsuleUndoAction?);
        swift_endAccess();

        uint64_t v33 = (void *)(*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v34, v53);
        goto LABEL_12;
      }
      id v40 = v54;
      uint64_t v30 = (void *)MEMORY[0x263F8EED0];
      (*(void (**)(char *, void, void, void, void, void))((*MEMORY[0x263F8EED0] & *v54) + 0x468))(v34, 0, 0, 0, 0, MEMORY[0x263F8EE78]);

      uint64_t v33 = (void *)(*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v34, v53);
    }
  }
LABEL_14:
  uint64_t v41 = (*(uint64_t (**)(void *))((*v30 & *v3) + 0x288))(v33);
  uint64_t v42 = ((uint64_t (*)(uint64_t))v27)(v41);
  if (!v42) {
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v52, v16);
  }
  uint64_t v43 = (void *)v42;
  uint64_t v44 = (char *)v3 + *(void *)((*v30 & *v3) + 0x380);
  swift_beginAccess();
  uint64_t v45 = v55;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v55, v44, v16);
  char v59 = 4;
  char v46 = v30;
  uint64_t v47 = *(void (**)(char *, char *, uint64_t, uint64_t))((*v30 & *v43) + 0x550);
  uint64_t v48 = type metadata accessor for TextBox();
  uint64_t v49 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  v47(v45, &v59, v48, v49);
  char v59 = 4;
  (*(void (**)(char *))((*v46 & *v43) + 0x530))(&v59);

  uint64_t v50 = *(void (**)(char *, uint64_t))(v17 + 8);
  v50(v45, v16);
  return ((uint64_t (*)(char *, uint64_t))v50)(v52, v16);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  char *v45;
  void *v46;
  void (*v47)(char *, char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;
  char v59;

  uint64_t v3 = v2;
  int v58 = a2;
  LODWORD(v54) = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v51 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (char *)&v51 - v7;
  uint64_t v53 = type metadata accessor for CapsuleUndoAction();
  uint64_t v57 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v56 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v55 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v51 - v20;
  uint64_t v22 = (void *)MEMORY[0x263F8EED0];
  uint64_t v23 = (uint64_t)v3 + *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0x388);
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v23, (uint64_t)v15, &demangling cache variable for type metadata for Capsule<Image>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for Capsule<Image>?);
  }
  char v25 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  uint64_t v52 = v21;
  v25(v21, v15, v16);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v12, 1, 1, v16);
  swift_beginAccess();
  outlined assign with copy of Capsule<Image>?((uint64_t)v12, v23, &demangling cache variable for type metadata for Capsule<Image>?);
  uint64_t v26 = swift_endAccess();
  double v27 = *(uint64_t (**)(void))((*v22 & *v3) + 0x88);
  uint64_t v28 = ((uint64_t (*)(uint64_t))v27)(v26);
  if (v28)
  {
    char v29 = (void *)v28;
    specialized LiveEditable.didChangeLiveEditing()();
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for Capsule<Image>?);
  uint64_t v30 = (void *)MEMORY[0x263F8EED0];
  uint64_t v31 = *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0x3A8);
  uint64_t v32 = *(void **)((char *)v3 + v31);
  *(void *)((char *)v3 + v31) = 0;

  uint64_t v34 = v56;
  uint64_t v35 = v57;
  if (v58 & 1) != 0 || (v54)
  {
    uint64_t v33 = (void *)v27();
    if (v33)
    {
      uint64_t v54 = v33;
      uint64_t v36 = (char *)v3 + *(void *)((*v30 & *v3) + 0x380);
      swift_beginAccess();
      uint64_t v37 = v55;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v55, v36, v16);
      Capsule.actionUndoingDifference(from:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v37, v16);
      uint64_t v38 = v53;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v8, 1, v53) == 1)
      {

        uint64_t v33 = (void *)outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for CapsuleUndoAction?);
LABEL_12:
        uint64_t v30 = (void *)MEMORY[0x263F8EED0];
        goto LABEL_14;
      }
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v34, v8, v38);
      if (v58)
      {
        uint64_t v39 = (uint64_t)v51;
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v51, v34, v38);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v39, 0, 1, v38);
        swift_beginAccess();
        Capsule.apply(_:)();
        outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for CapsuleUndoAction?);
        swift_endAccess();

        uint64_t v33 = (void *)(*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v34, v53);
        goto LABEL_12;
      }
      id v40 = v54;
      uint64_t v30 = (void *)MEMORY[0x263F8EED0];
      (*(void (**)(char *, void, void, void, void, void))((*MEMORY[0x263F8EED0] & *v54) + 0x468))(v34, 0, 0, 0, 0, MEMORY[0x263F8EE78]);

      uint64_t v33 = (void *)(*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v34, v53);
    }
  }
LABEL_14:
  uint64_t v41 = (*(uint64_t (**)(void *))((*v30 & *v3) + 0x288))(v33);
  uint64_t v42 = ((uint64_t (*)(uint64_t))v27)(v41);
  if (!v42) {
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v52, v16);
  }
  uint64_t v43 = (void *)v42;
  uint64_t v44 = (char *)v3 + *(void *)((*v30 & *v3) + 0x380);
  swift_beginAccess();
  uint64_t v45 = v55;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v55, v44, v16);
  char v59 = 4;
  char v46 = v30;
  uint64_t v47 = *(void (**)(char *, char *, uint64_t, uint64_t))((*v30 & *v43) + 0x550);
  uint64_t v48 = type metadata accessor for Image();
  uint64_t v49 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  v47(v45, &v59, v48, v49);
  char v59 = 4;
  (*(void (**)(char *))((*v46 & *v43) + 0x530))(&v59);

  uint64_t v50 = *(void (**)(char *, uint64_t))(v17 + 8);
  v50(v45, v16);
  return ((uint64_t (*)(char *, uint64_t))v50)(v52, v16);
}

uint64_t specialized LiveEditable.didChangeLiveEditing()()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_isCurrentlyLiveEditing;
  int v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_isCurrentlyLiveEditing);
  uint64_t result = AnyCanvas.isLiveEditing()();
  *(unsigned char *)(v0 + v1) = result & 1;
  if (v2 == 1 && (result & 1) == 0)
  {
    uint64_t v4 = v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveEditingContinuations;
    swift_beginAccess();
    uint64_t v5 = *(void *)(*(void *)v4 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v5; ++i)
        swift_continuation_throwingResume();
      swift_bridgeObjectRelease();
    }
    *(void *)uint64_t v4 = MEMORY[0x263F8EE78];
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AsyncCache.cancel(for:uuid:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v17 = (uint64_t *)(v3 + 112);
  uint64_t result = swift_beginAccess();
  uint64_t v19 = *(void *)(v3 + 112);
  if (*(void *)(v19 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v21)
    {
      unint64_t v36 = a2;
      uint64_t v37 = a3;
      uint64_t v35 = a1;
      uint64_t v22 = *(void *)(v19 + 56) + 24 * v20;
      uint64_t v23 = *(void *)v22;
      uint64_t v24 = *(void **)(v22 + 8);
      char v25 = *(unsigned char *)(v22 + 16);
      outlined copy of AsyncCache<Data, CGImageRef>.CacheState(*(void *)v22, v24, v25);
      swift_bridgeObjectRelease();
      if (v25)
      {
        return outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v23, (uint64_t)v24, 1);
      }
      else
      {
        uint64_t v40 = v23;
        if (*(void *)(v23 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v37);
          if (v27)
          {
            (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v16, *(void *)(v23 + 56) + *(void *)(v8 + 72) * v26, v7);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v7);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v16, 1, 1, v7);
          }
          outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v23, (uint64_t)v24, 0);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v16, 1, 1, v7);
        }
        int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v7);
        uint64_t v29 = v35;
        uint64_t v30 = v37;
        if (v28)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v16, v7);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
          uint64_t v39 = 0;
          CheckedContinuation.resume(returning:)();
          (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        }
        specialized Dictionary._Variant.removeValue(forKey:)(v30, (uint64_t)v13);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
        uint64_t v31 = v40;
        swift_beginAccess();
        unint64_t v32 = v36;
        outlined copy of Data._Representation(v29, v36);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v38 = *v17;
        *uint64_t v17 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, 0, 0, v29, v32, isUniquelyReferenced_nonNull_native);
        *uint64_t v17 = v38;
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v29, v32);
        return swift_endAccess();
      }
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t specialized AsyncCache.cached(for:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  uint64_t v6 = type metadata accessor for UUID();
  v3[12] = v6;
  v3[13] = *(void *)(v6 - 8);
  v3[14] = swift_task_alloc();
  v3[5] = a1;
  v3[6] = a2;
  return MEMORY[0x270FA2498](specialized AsyncCache.cached(for:), v2, 0);
}

uint64_t specialized AsyncCache.cached(for:)()
{
  uint64_t v1 = v0[11] + 112;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 16))
  {
    uint64_t v4 = v0[9];
    uint64_t v3 = v0[10];
    swift_bridgeObjectRetain();
    uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
    if (v6)
    {
      uint64_t v7 = *(void *)(v2 + 56) + 24 * v5;
      uint64_t v9 = *(void *)v7;
      uint64_t v8 = *(void **)(v7 + 8);
      char v10 = *(unsigned char *)(v7 + 16);
      outlined copy of AsyncCache<Data, CGImageRef>.CacheState(*(void *)v7, v8, v10);
      swift_bridgeObjectRelease();
      if (v10)
      {
        swift_task_dealloc();
        uint64_t v11 = (uint64_t (*)(void *))v0[1];
        return v11(v8);
      }
      outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v9, (uint64_t)v8, 0);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v13 = v0 + 5;
  uint64_t v14 = *(void *)v1;
  if (!*(void *)(*(void *)v1 + 16)) {
    goto LABEL_14;
  }
  uint64_t v16 = v0[9];
  uint64_t v15 = v0[10];
  swift_bridgeObjectRetain();
  uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v15);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v19 = *(void *)(v14 + 56) + 24 * v17;
  uint64_t v20 = *(void *)v19;
  char v21 = *(void **)(v19 + 8);
  char v22 = *(unsigned char *)(v19 + 16);
  outlined copy of AsyncCache<Data, CGImageRef>.CacheState(*(void *)v19, v21, v22);
  swift_bridgeObjectRelease();
  if (v22)
  {
    outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v20, (uint64_t)v21, 1);
LABEL_14:
    uint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  uint64_t v23 = v0[14];
  uint64_t v24 = v0[11];
  v0[8] = v20;
  UUID.init()();
  char v25 = (void *)swift_task_alloc();
  v0[15] = v25;
  v25[2] = v0 + 8;
  v25[3] = v23;
  v25[4] = v24;
  v25[5] = v13;
  unint64_t v26 = (void *)swift_task_alloc();
  v0[16] = v26;
  v26[2] = v24;
  void v26[3] = v13;
  v26[4] = v23;
  uint64_t v27 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type AsyncCache<Data, CGImageRef> and conformance AsyncCache<A, B>, &demangling cache variable for type metadata for AsyncCache<Data, CGImageRef>);
  int v28 = (void *)swift_task_alloc();
  v0[17] = v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGImageRef?);
  *int v28 = v0;
  v28[1] = specialized AsyncCache.cached(for:);
  return MEMORY[0x270FA2338](v0 + 7, &async function pointer to partial apply for specialized closure #1 in AsyncCache.cached(for:), v25, partial apply for specialized closure #2 in AsyncCache.cached(for:), v26, v24, v27, v29);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized AsyncCache.cached(for:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[7];
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t specialized closure #1 in closure #1 in AsyncCache.cached(for:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  double v16 = MEMORY[0x270FA5388](v15);
  char v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v19 + 16))(v18, a3, v16);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v14, a1, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v14, 0, 1, v20);
  specialized Dictionary.subscript.setter((uint64_t)v14, (uint64_t)v18);
  uint64_t v22 = *a2;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v29 = *(void *)(a4 + 112);
  *(void *)(a4 + 112) = 0x8000000000000000;
  uint64_t v24 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v22, 0, 0, a5, a6, isUniquelyReferenced_nonNull_native);
  uint64_t v26 = v25;
  LOBYTE(a5) = v27;
  *(void *)(a4 + 112) = v29;
  swift_bridgeObjectRelease();
  outlined consume of AsyncCache<Data, CGImageRef>.CacheState?(v24, v26, a5);
  return swift_endAccess();
}

uint64_t ImageElementView.ImageState.init(asset:filter:crop:maxDimensionInPixels:canUseFile:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  LODWORD(v43) = a5;
  uint64_t v40 = a4;
  uint64_t v41 = a3;
  uint64_t v42 = a1;
  uint64_t v8 = type metadata accessor for CRAssetOrData();
  MEMORY[0x270FA5388](v8);
  char v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CRAsset();
  uint64_t v39 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  double v16 = (char *)&v37 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = a2;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a2, (uint64_t)v22, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  if ((v43 & 1) == 0)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    uint64_t v26 = v41;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v41, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    goto LABEL_7;
  }
  uint64_t v43 = v8;
  uint64_t v38 = v16;
  uint64_t v23 = (uint64_t)v10;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v22, 1, v24);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  uint64_t v26 = v41;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v41, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  if (v25 != 1)
  {
LABEL_7:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    uint64_t v29 = v42;
    goto LABEL_8;
  }
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v19, 1, v27);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  uint64_t v29 = v42;
  if (v28 == 1)
  {
    outlined init with copy of ImageElementView.ImageOrFile(v42, v23, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 32);
      v35(v13, v23, v11);
      outlined destroy of StocksKitCurrencyCache.Provider?(v26, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v44, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      outlined destroy of ImageElementView.ImageOrFile(v29, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      unint64_t v36 = v38;
      v35(v38, (uint64_t)v13, v11);
      v35((char *)a6, (uint64_t)v36, v11);
      goto LABEL_9;
    }
    outlined destroy of ImageElementView.ImageOrFile(v23, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  }
LABEL_8:
  uint64_t v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
  uint64_t v31 = a6 + v30[12];
  uint64_t v32 = a6 + v30[16];
  uint64_t v33 = v30[20];
  outlined init with take of CRAssetOrData(v29, a6, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v44, v31, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v26, v32, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  *(void *)(a6 + v33) = v40;
LABEL_9:
  type metadata accessor for ImageElementView.ImageState(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[9] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[10] = v7;
  v4[11] = v6;
  return MEMORY[0x270FA2498](closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:), v7, v6);
}

uint64_t closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:)()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:);
  return v3(200000000000000000, 0, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[7] + 8))(v2[8], v2[6]);
  uint64_t v3 = v2[11];
  uint64_t v4 = v2[10];
  if (v0) {
    uint64_t v5 = closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:);
  }
  else {
    uint64_t v5 = closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1 + 16);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    ImageElementView.setMissingImage()();
  }
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void @objc ImageElementView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized ImageElementView.init(coder:)();
}

void ImageElementView.__ivar_destroyer()
{
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(*(void *)(v0 + direct field offset for ImageElementView.thumbnailCacheDigest), *(void *)(v0 + direct field offset for ImageElementView.thumbnailCacheDigest + 8));
  outlined destroy of ImageElementView.ImageOrFile(v0 + direct field offset for ImageElementView.state, type metadata accessor for ImageElementView.ImageState);
  outlined destroy of ImageElementView.ImageOrFile(v0 + direct field offset for ImageElementView.presentedState, type metadata accessor for ImageElementView.ImageState);
  outlined destroy of ImageElementView.ImageOrFile(v0 + direct field offset for ImageElementView.image, type metadata accessor for ImageElementView.ImageOrFile);
  outlined destroy of weak AnyContainerCanvasElementView?(v0 + direct field offset for ImageElementView.imageAnalysisDelegate);
  uint64_t v1 = *(void **)(v0 + direct field offset for ImageElementView.$__lazy_storage_$_pendingImageAnalysisObservers);
}

id ImageElementView.__deallocating_deinit()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v1 - 8);
  id v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x263F8EE60];
  if (*(void *)&v0[direct field offset for ImageElementView.getImageTask])
  {
    uint64_t v5 = swift_retain();
    MEMORY[0x21054D560](v5, v4 + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
    swift_release();
  }
  if (*(void *)&v0[direct field offset for ImageElementView.getThumbnailTask])
  {
    uint64_t v6 = swift_retain();
    MEMORY[0x21054D560](v6, v4 + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
    swift_release();
  }
  unint64_t v7 = *(void *)&v0[direct field offset for ImageElementView.thumbnailCacheDigest + 8];
  if (v7 >> 60 != 15)
  {
    uint64_t v8 = *(void *)&v0[direct field offset for ImageElementView.thumbnailCacheDigest];
    uint64_t v9 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v3, 1, 1, v9);
    char v10 = (void *)swift_allocObject();
    v10[2] = 0;
    void v10[3] = 0;
    v10[4] = v8;
    id v10[5] = v7;
    outlined copy of Data._Representation(v8, v7);
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in ImageElementView.deinit, (uint64_t)v10);
    swift_release();
  }
  uint64_t v11 = (objc_class *)type metadata accessor for ImageElementView(0);
  v13.receiver = v0;
  v13.super_class = v11;
  return objc_msgSendSuper2(&v13, sel_dealloc);
}

uint64_t closure #1 in ImageElementView.deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  return MEMORY[0x270FA2498](closure #1 in ImageElementView.deinit, 0, 0);
}

uint64_t closure #1 in ImageElementView.deinit()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = static ImageThumbnailManager.shared;
  *(void *)(v0 + 56) = static ImageThumbnailManager.shared;
  return MEMORY[0x270FA2498](closure #1 in ImageElementView.deinit, v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 112);
  *(void *)(v0 + 64) = v1;
  return MEMORY[0x270FA2498](closure #1 in ImageElementView.deinit, v1, 0);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  swift_beginAccess();
  outlined copy of Data._Representation(v2, v1);
  uint64_t v3 = specialized Dictionary._Variant.removeValue(forKey:)(v2, v1);
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  swift_endAccess();
  outlined consume of Data._Representation(v2, v1);
  outlined consume of AsyncCache<Data, CGImageRef>.CacheState?(v3, v5, v7);
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

id @objc ImageElementView.__deallocating_deinit(void *a1)
{
  id v1 = a1;
  return ImageElementView.__deallocating_deinit();
}

void @objc ImageElementView.__ivar_destroyer(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(*(void *)(a1 + direct field offset for ImageElementView.thumbnailCacheDigest), *(void *)(a1 + direct field offset for ImageElementView.thumbnailCacheDigest + 8));
  outlined destroy of ImageElementView.ImageOrFile(a1 + direct field offset for ImageElementView.state, type metadata accessor for ImageElementView.ImageState);
  outlined destroy of ImageElementView.ImageOrFile(a1 + direct field offset for ImageElementView.presentedState, type metadata accessor for ImageElementView.ImageState);
  outlined destroy of ImageElementView.ImageOrFile(a1 + direct field offset for ImageElementView.image, type metadata accessor for ImageElementView.ImageOrFile);
  outlined destroy of weak AnyContainerCanvasElementView?(a1 + direct field offset for ImageElementView.imageAnalysisDelegate);
  uint64_t v2 = *(void **)(a1 + direct field offset for ImageElementView.$__lazy_storage_$_pendingImageAnalysisObservers);
}

uint64_t ImageElementView.modifiableProperties.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v5, v1);
  v9[0] = type metadata accessor for Image();
  v9[1] = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  v9[2] = &protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v6 = 9;
  if ((v10 & 0x80) == 0) {
    uint64_t v6 = 11;
  }
  uint64_t v7 = 3;
  if ((v10 & 0x80) != 0) {
    uint64_t v7 = 1;
  }
  if ((v10 & 0x10) != 0) {
    uint64_t v6 = v7;
  }
  if ((v10 & 4) != 0) {
    return 0;
  }
  else {
    return v6;
  }
}

Swift::Void __swiftcall ImageElementView.layoutSubviews()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (objc_class *)type metadata accessor for ImageElementView(0);
  v30.receiver = v1;
  v30.super_class = v6;
  objc_msgSendSuper2(&v30, sel_layoutSubviews);
  uint64_t v7 = direct field offset for ImageElementView.contentView;
  uint64_t v8 = *(void **)((char *)v1 + direct field offset for ImageElementView.contentView);
  t1.double a = 1.0;
  t1.double b = 0.0;
  t1.double c = 0.0;
  t1.double d = 1.0;
  t1.tCGFloat x = 0.0;
  t1.tCGFloat y = 0.0;
  objc_msgSend(v8, sel_setTransform_, &t1);
  id v9 = *(id *)((char *)v1 + v7);
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v9, sel_setFrame_);

  uint64_t v10 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  if (v10)
  {

    uint64_t v11 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
    swift_beginAccess();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v12(v5, v11, v2);
    uint64_t v26 = v7;
    swift_getKeyPath();
    lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    Capsule<>.subscript.getter();
    swift_release();
    objc_super v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v5, v2);
    v14.n128_u64[0] = *(void *)&t1.c;
    if (t1.c >= 0.0) {
      double v15 = 1.0;
    }
    else {
      double v15 = -1.0;
    }
    ((void (*)(char *, char *, uint64_t, __n128))v12)(v5, v11, v2, v14);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v13(v5, v2);
    if (t1.d >= 0.0) {
      double v16 = 1.0;
    }
    else {
      double v16 = -1.0;
    }
    CGAffineTransformMakeScale(&t1, v15, v16);
    long long v25 = *(_OWORD *)&t1.a;
    long long v24 = *(_OWORD *)&t1.c;
    tCGFloat x = t1.tx;
    tCGFloat y = t1.ty;
    uint64_t v19 = *(void **)((char *)v1 + v26);
    v12(v5, v11, v2);
    swift_getKeyPath();
    id v20 = v19;
    Capsule<>.subscript.getter();
    swift_release();
    v13(v5, v2);
    CGAffineTransformMakeRotation(&t1, t2.a);
    long long v21 = *(_OWORD *)&t1.a;
    long long v22 = *(_OWORD *)&t1.c;
    long long v23 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.double a = v25;
    *(_OWORD *)&t1.double c = v24;
    t1.tCGFloat x = tx;
    t1.tCGFloat y = ty;
    *(_OWORD *)&t2.double a = v21;
    *(_OWORD *)&t2.double c = v22;
    *(_OWORD *)&t2.tCGFloat x = v23;
    CGAffineTransformConcat(&v27, &t1, &t2);
    CGAffineTransform t1 = v27;
    objc_msgSend(v20, sel_setTransform_, &t1);
  }
}

void @objc ImageElementView.layoutSubviews()(void *a1)
{
  id v1 = a1;
  ImageElementView.layoutSubviews()();
}

void __swiftcall ImageElementView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  isdouble a = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for ImageElementView(0);
  id v7 = -[UIView_optional hitTest:withEvent:](&v13, sel_hitTest_withEvent_, isa, x, y);
  if (v7)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    uint64_t v8 = v3;
    id v9 = v7;
    char v10 = static NSObject.== infix(_:_:)();

    if (v10)
    {
      uint64_t v11 = *(void **)&v8[direct field offset for ImageElementView.mediaView];
      if (v11)
      {
        id v12 = v11;
        objc_msgSend(v8, sel_convertPoint_toCoordinateSpace_, v12, x, y);
        objc_msgSend(v12, sel_hitTest_withEvent_, isa);
      }
    }
  }
}

id @objc ImageElementView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  v16.value.super.isdouble a = (Class)a5;
  ImageElementView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v16);
  objc_super v13 = v12;

  return v13;
}

void ImageElementView.updateImage(_:state:counter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for ImageElementView.ImageState(0);
  MEMORY[0x270FA5388](v7);
  MEMORY[0x270FA5388](v8);
  id v10 = (char *)&v35 - v9;
  MEMORY[0x270FA5388](v11);
  MEMORY[0x270FA5388](v12);
  __n128 v14 = (char *)&v35 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v35 - v18;
  uint64_t v20 = direct field offset for ImageElementView.imageSetCounter;
  if (*(void *)(v3 + direct field offset for ImageElementView.imageSetCounter) < a3)
  {
    uint64_t v38 = a1;
    uint64_t v39 = a2;
    uint64_t v36 = v17;
    uint64_t v40 = v16;
    uint64_t v21 = v3 + direct field offset for ImageElementView.presentedState;
    swift_beginAccess();
    outlined init with copy of ImageElementView.ImageOrFile(v21, (uint64_t)v19, type metadata accessor for ImageElementView.ImageState);
    swift_storeEnumTagMultiPayload();
    char v22 = specialized static ImageElementView.ImageState.== infix(_:_:)((uint64_t)v19, (uint64_t)v14);
    outlined destroy of ImageElementView.ImageOrFile((uint64_t)v14, type metadata accessor for ImageElementView.ImageState);
    outlined destroy of ImageElementView.ImageOrFile((uint64_t)v19, type metadata accessor for ImageElementView.ImageState);
    if ((v22 & 1) != 0
      || (outlined init with copy of ImageElementView.ImageOrFile(v21, (uint64_t)v19, type metadata accessor for ImageElementView.ImageState), swift_storeEnumTagMultiPayload(), char v23 = specialized static ImageElementView.ImageState.== infix(_:_:)((uint64_t)v19, (uint64_t)v14), outlined destroy of ImageElementView.ImageOrFile((uint64_t)v14, type metadata accessor for ImageElementView.ImageState), outlined destroy of ImageElementView.ImageOrFile((uint64_t)v19, type metadata accessor for ImageElementView.ImageState), (v23 & 1) != 0))
    {
      int v37 = 1;
    }
    else
    {
      outlined init with copy of ImageElementView.ImageOrFile(v21, (uint64_t)v19, type metadata accessor for ImageElementView.ImageState);
      swift_storeEnumTagMultiPayload();
      int v37 = specialized static ImageElementView.ImageState.== infix(_:_:)((uint64_t)v19, (uint64_t)v14);
      outlined destroy of ImageElementView.ImageOrFile((uint64_t)v14, type metadata accessor for ImageElementView.ImageState);
      outlined destroy of ImageElementView.ImageOrFile((uint64_t)v19, type metadata accessor for ImageElementView.ImageState);
    }
    uint64_t v24 = v40;
    outlined init with copy of ImageElementView.ImageOrFile(v21, v40, type metadata accessor for ImageElementView.ImageState);
    uint64_t v25 = v39;
    outlined init with copy of ImageElementView.ImageOrFile(v39, (uint64_t)v19, type metadata accessor for ImageElementView.ImageState);
    swift_beginAccess();
    outlined assign with take of ImageElementView.ImageState((uint64_t)v19, v21);
    swift_endAccess();
    *(void *)(v3 + v20) = a3;
    outlined init with copy of ImageElementView.ImageOrFile(v25, (uint64_t)v10, type metadata accessor for ImageElementView.ImageState);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        ImageElementView.setImage(_:canAnimate:)(v38, v37 & 1);
        outlined destroy of ImageElementView.ImageOrFile(v24, type metadata accessor for ImageElementView.ImageState);
        uint64_t v31 = type metadata accessor for CRAsset();
        (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8))(v10, v31);
        return;
      case 2u:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x20C6B0DE8);
      case 3u:
        uint64_t v32 = v36;
        outlined init with copy of ImageElementView.ImageOrFile(v24, v36, type metadata accessor for ImageElementView.ImageState);
        if (swift_getEnumCaseMultiPayload())
        {
          outlined destroy of ImageElementView.ImageOrFile(v32, type metadata accessor for ImageElementView.ImageState);
          ImageElementView.setImage(_:canAnimate:)(v38, v37 & 1);
        }
        else
        {
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
          uint64_t v34 = v32 + *(int *)(v33 + 48);
          outlined destroy of StocksKitCurrencyCache.Provider?(v32 + *(int *)(v33 + 64), (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
          outlined destroy of StocksKitCurrencyCache.Provider?(v34, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
          outlined destroy of ImageElementView.ImageOrFile(v32, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
        }
        goto LABEL_13;
      case 4u:
        ImageElementView.setMissingImage()();
LABEL_13:
        uint64_t v29 = type metadata accessor for ImageElementView.ImageState;
        uint64_t v30 = v24;
        break;
      default:
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
        uint64_t v27 = (uint64_t)&v10[*(int *)(v26 + 48)];
        uint64_t v28 = (uint64_t)&v10[*(int *)(v26 + 64)];
        ImageElementView.setImage(_:canAnimate:)(v38, v37 & 1);
        outlined destroy of ImageElementView.ImageOrFile(v24, type metadata accessor for ImageElementView.ImageState);
        outlined destroy of StocksKitCurrencyCache.Provider?(v28, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v27, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        uint64_t v29 = (uint64_t (*)(void))type metadata accessor for CRAssetOrData;
        uint64_t v30 = (uint64_t)v10;
        break;
    }
    outlined destroy of ImageElementView.ImageOrFile(v30, v29);
  }
}

Swift::Void __swiftcall ImageElementView.setMissingImage()()
{
  uint64_t v1 = type metadata accessor for ImageElementView.ImageState(0);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v24 - v5;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = v0 + direct field offset for ImageElementView.presentedState;
  swift_beginAccess();
  outlined init with copy of ImageElementView.ImageOrFile(v10, (uint64_t)v9, type metadata accessor for ImageElementView.ImageState);
  swift_storeEnumTagMultiPayload();
  LOBYTE(v10) = specialized static ImageElementView.ImageState.== infix(_:_:)((uint64_t)v9, (uint64_t)v6);
  outlined destroy of ImageElementView.ImageOrFile((uint64_t)v6, type metadata accessor for ImageElementView.ImageState);
  outlined init with copy of ImageElementView.ImageOrFile((uint64_t)v9, (uint64_t)v3, type metadata accessor for ImageElementView.ImageState);
  if (v10)
  {
    outlined destroy of ImageElementView.ImageOrFile((uint64_t)v3, type metadata accessor for ImageElementView.ImageState);
    outlined destroy of ImageElementView.ImageOrFile((uint64_t)v9, type metadata accessor for ImageElementView.ImageState);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    char v11 = specialized static ImageElementView.ImageState.== infix(_:_:)((uint64_t)v3, (uint64_t)v6);
    outlined destroy of ImageElementView.ImageOrFile((uint64_t)v6, type metadata accessor for ImageElementView.ImageState);
    outlined destroy of ImageElementView.ImageOrFile((uint64_t)v3, type metadata accessor for ImageElementView.ImageState);
    outlined destroy of ImageElementView.ImageOrFile((uint64_t)v9, type metadata accessor for ImageElementView.ImageState);
    if ((v11 & 1) == 0) {
      return;
    }
  }
  uint64_t v12 = direct field offset for ImageElementView.contentView;
  objc_msgSend(*(id *)(v0 + direct field offset for ImageElementView.contentView), sel_bounds);
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithFrame_, v13, v14, v15, v16);
  objc_msgSend(*(id *)(v0 + v12), sel_addSubview_, v17);
  uint64_t v18 = one-time initialization token for imageMissingBackgroundColor;
  id v19 = v17;
  if (v18 != -1) {
    swift_once();
  }
  objc_msgSend(v19, sel_setBackgroundColor_, static UIConstants.imageMissingBackgroundColor);

  id v20 = objc_msgSend(self, sel_configurationWithPointSize_, 80.0);
  uint64_t v21 = (void *)MEMORY[0x21054D080](0x6F746F6870, 0xE500000000000000);
  id v22 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v21, v20);

  objc_msgSend(v19, sel_setImage_, v22);
  objc_msgSend(v19, sel_setContentMode_, 4);
  if (one-time initialization token for imageMissingIconColor != -1) {
    swift_once();
  }
  objc_msgSend(v19, sel_setTintColor_, static UIConstants.imageMissingIconColor);
  objc_msgSend(v19, sel_setAutoresizingMask_, 18);
  char v23 = *(void **)(v0 + direct field offset for ImageElementView.missingImageView);
  *(void *)(v0 + direct field offset for ImageElementView.missingImageView) = v19;
}

Swift::Void __swiftcall ImageElementView.updateMediaViewImageAnalysis()()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for ImageElementView.mediaView);
  if (!v1) {
    return;
  }
  uint64_t v2 = direct field offset for ImageElementView.isImageAnalysisEnabled;
  uint64_t v3 = *(unsigned __int8 *)(v0 + direct field offset for ImageElementView.isImageAnalysisEnabled);
  id v14 = v1;
  objc_msgSend(v14, sel_setIsImageAnalysisEnabled_, v3);
  uint64_t v4 = v14;
  if (*(unsigned char *)(v0 + v2) == 1)
  {
    id v5 = objc_msgSend(v14, sel_imageAnalysisContext);
    if (v5)
    {
      objc_msgSend(v5, sel_setDelegate_, MEMORY[0x210550400](v0 + direct field offset for ImageElementView.imageAnalysisDelegate));
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    id v6 = ImageElementView.pendingImageAnalysisObservers.getter();
    id v7 = objc_msgSend(v6, sel_allObjects);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PPKPhotosMediaViewImageAnalysisInteractionContextObserver);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v9)
      {
LABEL_7:
        if (v9 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          if ((v8 & 0xC000000000000001) != 0)
          {
            uint64_t v11 = MEMORY[0x21054E050](i, v8);
          }
          else
          {
            uint64_t v11 = *(void *)(v8 + 8 * i + 32);
            swift_unknownObjectRetain();
          }
          id v12 = objc_msgSend(v14, sel_imageAnalysisContext);
          if (v12)
          {
            objc_msgSend(v12, sel_addAnalysisObserver_, v11);
            swift_unknownObjectRelease();
          }
          swift_unknownObjectRelease();
        }
      }
    }
    swift_bridgeObjectRelease();
    id v13 = ImageElementView.pendingImageAnalysisObservers.getter();
    objc_msgSend(v13, sel_removeAllObjects);

    uint64_t v4 = v14;
  }
}

void ImageElementView.setImage(_:canAnimate:)(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for ImageElementView.ImageOrFile(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5 - 8);
  if (*(void *)&v2[direct field offset for ImageElementView.mediaView] && (a2 & 1) != 0)
  {
    unint64_t v8 = self;
    uint64_t v9 = *(void **)&v2[direct field offset for ImageElementView.contentView];
    outlined init with copy of ImageElementView.ImageOrFile(a1, (uint64_t)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ImageElementView.ImageOrFile);
    unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v2;
    outlined init with take of CRAssetOrData((uint64_t)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, type metadata accessor for ImageElementView.ImageOrFile);
    aBlock[4] = partial apply for closure #1 in ImageElementView.setImage(_:canAnimate:);
    aBlock[5] = v11;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_172;
    id v12 = _Block_copy(aBlock);
    id v13 = v9;
    id v14 = v2;
    swift_release();
    objc_msgSend(v8, sel_transitionWithView_duration_options_animations_completion_, v13, 5242880, v12, 0, 0.3);
    _Block_release(v12);
  }
  else
  {
    perform #1 () in ImageElementView.setImage(_:canAnimate:)((uint64_t)v2, a1);
  }
}

uint64_t perform #1 () in ImageElementView.setImage(_:canAnimate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ImageElementView.ImageOrFile(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v8 = MEMORY[0x270FA5388](v7);
  unint64_t v10 = &v15[-v9];
  uint64_t v11 = direct field offset for ImageElementView.missingImageView;
  objc_msgSend(*(id *)(a1 + direct field offset for ImageElementView.missingImageView), sel_removeFromSuperview, v8);
  id v12 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = 0;

  outlined init with copy of ImageElementView.ImageOrFile(a2, (uint64_t)v10, type metadata accessor for ImageElementView.ImageOrFile);
  uint64_t v13 = a1 + direct field offset for ImageElementView.image;
  swift_beginAccess();
  outlined init with copy of ImageElementView.ImageOrFile(v13, (uint64_t)v6, type metadata accessor for ImageElementView.ImageOrFile);
  swift_beginAccess();
  outlined assign with copy of ImageElementView.ImageOrFile((uint64_t)v10, v13);
  swift_endAccess();
  ImageElementView.image.didset((uint64_t)v6);
  outlined destroy of ImageElementView.ImageOrFile((uint64_t)v10, type metadata accessor for ImageElementView.ImageOrFile);
  return outlined destroy of ImageElementView.ImageOrFile((uint64_t)v6, type metadata accessor for ImageElementView.ImageOrFile);
}

void ImageElementView.image.didset(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v48 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CRStableAsset();
  uint64_t v49 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ImageElementView.ImageOrFile(0);
  MEMORY[0x270FA5388](v10);
  id v12 = (void **)((char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  double v15 = (char *)&v47 - v14;
  uint64_t v16 = v2 + direct field offset for ImageElementView.image;
  swift_beginAccess();
  outlined init with copy of ImageElementView.ImageOrFile(v16, (uint64_t)v15, type metadata accessor for ImageElementView.ImageOrFile);
  LOBYTE(a1) = specialized static ImageElementView.ImageOrFile.== infix(_:_:)((uint64_t)v15, a1);
  outlined destroy of ImageElementView.ImageOrFile((uint64_t)v15, type metadata accessor for ImageElementView.ImageOrFile);
  if ((a1 & 1) == 0)
  {
    id v17 = v6;
    uint64_t v18 = v2;
    uint64_t v19 = v49;
    outlined init with copy of ImageElementView.ImageOrFile(v16, (uint64_t)v12, type metadata accessor for ImageElementView.ImageOrFile);
    EnumCaseMultiPayloadouble d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v21 = v9;
        id v22 = v9;
        uint64_t v23 = v7;
        (*(void (**)(char *, void **, uint64_t))(v19 + 32))(v22, v12, v7);
        uint64_t v24 = direct field offset for ImageElementView.mediaView;
        uint64_t v25 = *(void **)(v18 + direct field offset for ImageElementView.mediaView);
        if (v25)
        {
          id v26 = v25;
          uint64_t v27 = v21;
          CRStableAsset.url.getter();
          URL._bridgeToObjectiveC()(v28);
          id v30 = v29;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v17, v4);
          objc_msgSend(v26, sel_setURL_, v30);
        }
        else
        {
          uint64_t v47 = v7;
          uint64_t v27 = v21;
          CRStableAsset.url.getter();
          id v36 = objc_allocWithZone((Class)PPKPhotosMediaView);
          URL._bridgeToObjectiveC()(v37);
          uint64_t v39 = v38;
          id v40 = objc_msgSend(v36, sel_initWithImageURL_, v38);

          uint64_t v41 = v18;
          uint64_t v23 = v47;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v17, v4);
          uint64_t v42 = direct field offset for ImageElementView.contentView;
          objc_msgSend(*(id *)(v41 + direct field offset for ImageElementView.contentView), sel_bounds);
          objc_msgSend(v40, sel_setFrame_);
          objc_msgSend(v40, sel_setAutoresizingMask_, 18);
          objc_msgSend(v40, sel_setContentMode_, 2);
          objc_msgSend(v40, sel_setBackgroundColor_, 0);
          uint64_t v43 = *(void **)(v41 + v24);
          *(void *)(v41 + v24) = v40;
          id v30 = v40;

          objc_msgSend(*(id *)(v41 + v42), sel_addSubview_, v30);
        }

        (*(void (**)(char *, uint64_t))(v19 + 8))(v27, v23);
      }
    }
    else
    {
      uint64_t v31 = *v12;
      uint64_t v32 = direct field offset for ImageElementView.mediaView;
      uint64_t v33 = v18;
      uint64_t v34 = *(void **)(v18 + direct field offset for ImageElementView.mediaView);
      if (v34)
      {
        id v35 = v34;
        objc_msgSend(v35, sel_setImage_orientation_, v31, 0);
      }
      else
      {
        id v44 = objc_msgSend(objc_allocWithZone((Class)PPKPhotosMediaView), sel_initWithImage_orientation_, v31, 0);
        uint64_t v45 = direct field offset for ImageElementView.contentView;
        objc_msgSend(*(id *)(v33 + direct field offset for ImageElementView.contentView), sel_bounds);
        objc_msgSend(v44, sel_setFrame_);
        objc_msgSend(v44, sel_setAutoresizingMask_, 18);
        objc_msgSend(v44, sel_setContentMode_, 2);
        objc_msgSend(v44, sel_setBackgroundColor_, 0);
        char v46 = *(void **)(v33 + v32);
        *(void *)(v33 + v32) = v44;
        id v35 = v44;

        objc_msgSend(*(id *)(v33 + v45), sel_addSubview_, v35);
      }
    }
    ImageElementView.updateMediaViewImageAnalysis()();
  }
}

id ImageElementView.imageAnalysisDelegate.didset(id a1)
{
  uint64_t v3 = v1 + direct field offset for ImageElementView.imageAnalysisDelegate;
  id result = (id)MEMORY[0x210550400](v1 + direct field offset for ImageElementView.imageAnalysisDelegate);
  if (result)
  {
    id v5 = result;
    id result = (id)swift_unknownObjectRelease();
    if (a1 && v5 == a1) {
      return result;
    }
  }
  else if (!a1)
  {
    return result;
  }
  id result = *(id *)(v1 + direct field offset for ImageElementView.mediaView);
  if (result)
  {
    id result = objc_msgSend(result, sel_imageAnalysisContext);
    if (result)
    {
      objc_msgSend(result, sel_setDelegate_, MEMORY[0x210550400](v3));
      swift_unknownObjectRelease();
      return (id)swift_unknownObjectRelease();
    }
  }
  return result;
}

id ImageElementView.pendingImageAnalysisObservers.getter()
{
  uint64_t v1 = direct field offset for ImageElementView.$__lazy_storage_$_pendingImageAnalysisObservers;
  uint64_t v2 = *(void **)(v0 + direct field offset for ImageElementView.$__lazy_storage_$_pendingImageAnalysisObservers);
  if (v2)
  {
    id v3 = *(id *)(v0 + direct field offset for ImageElementView.$__lazy_storage_$_pendingImageAnalysisObservers);
  }
  else
  {
    id v4 = objc_msgSend(self, sel_weakObjectsHashTable);
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

Swift::Void __swiftcall ImageElementView.endLiveEdit(undoable:discard:)(Swift::Bool undoable, Swift::Bool discard)
{
  BOOL v17 = undoable;
  BOOL v18 = discard;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x270FA5388](v3 - 8);
  id v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  uint64_t v10 = (uint64_t)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x388);
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v10, (uint64_t)v8, &demangling cache variable for type metadata for Capsule<Image>?);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  id v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
  int v13 = v12(v8, 1, v11);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for Capsule<Image>?);
  if (v13 != 1
    || (uint64_t v14 = *(void *)((char *)v2 + *(void *)((*v9 & *v2) + 0x4C0))) != 0
    && *(void *)(v14 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink))
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v10, (uint64_t)v5, &demangling cache variable for type metadata for Capsule<Image>?);
    int v15 = v12(v5, 1, v11);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Capsule<Image>?);
    if (v15 != 1
      || (uint64_t v16 = *(void *)((char *)v2 + *(void *)((*v9 & *v2) + 0x4C0))) != 0
      && *(void *)(v16 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink))
    {
      specialized CanvasElementView.endLiveEdit(undoable:discard:)(v17, v18);
      specialized ContainerCanvasElementView.transformDrawing()();
    }
    ImageElementView.updateUI()();
  }
}

void @objc ImageElementView.didMoveToWindow()(void *a1)
{
  v3.receiver = a1;
  v3.super_class = (Class)type metadata accessor for ImageElementView(0);
  id v1 = v3.receiver;
  objc_msgSendSuper2(&v3, sel_didMoveToWindow);
  id v2 = objc_msgSend(v1, sel_window, v3.receiver, v3.super_class);

  if (v2)
  {
    specialized ContainerCanvasElementView.screenScaleDidChange()();
    ImageElementView.updateUI()();
  }
}

Swift::Void __swiftcall ImageElementView.screenScaleDidChange()()
{
  specialized ContainerCanvasElementView.screenScaleDidChange()();
  ImageElementView.updateUI()();
}

uint64_t specialized ContainerCanvasElementView.screenScaleDidChange()()
{
  unint64_t v0 = specialized ContainerCanvasElementView.subelementViews.getter();
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    id v5 = (void *)MEMORY[0x263F8EED0];
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        uint64_t v6 = (void *)MEMORY[0x21054E050](v4, v1);
      }
      else {
        uint64_t v6 = *(id *)(v1 + 8 * v4 + 32);
      }
      uint64_t v7 = v6;
      ++v4;
      (*(void (**)(void))((*v5 & *v6) + 0x270))();
    }
    while (v2 != v4);
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t ImageElementView.alwaysUseMaxResolutionImage.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4F0));
}

void ImageElementView.alwaysUseMaxResolutionImage.setter(char a1)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4F0)) = a1;
  ImageElementView.updateUI()();
}

unint64_t ImageElementView.didZoom(in:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v29 = v4;
  MEMORY[0x270FA5388](v4);
  id v26 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v27 = (char *)&v25 - v7;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x270FA5388](v8);
  unint64_t result = specialized ContainerCanvasElementView.subelementViews.getter();
  unint64_t v10 = result;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v11 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v11) {
      goto LABEL_10;
    }
  }
  if (v11 < 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = 0;
  int v13 = (void *)MEMORY[0x263F8EED0];
  do
  {
    if ((v10 & 0xC000000000000001) != 0) {
      uint64_t v14 = (void *)MEMORY[0x21054E050](v12, v10);
    }
    else {
      uint64_t v14 = *(id *)(v10 + 8 * v12 + 32);
    }
    int v15 = v14;
    ++v12;
    (*(void (**)(uint64_t))((*v13 & *v14) + 0x280))(a1);
  }
  while (v11 != v12);
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v16 = direct field offset for ImageElementView.updateAfterZoomWorkItem;
  if (*(void *)(v2 + direct field offset for ImageElementView.updateAfterZoomWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in ImageElementView.didZoom(in:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_53;
  _Block_copy(aBlock);
  uint64_t v30 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type CGRect and conformance CGRect((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v18 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  *(void *)(v2 + v16) = v18;
  swift_release();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v19 = (void *)static OS_dispatch_queue.main.getter();
  id v20 = v26;
  static DispatchTime.now()();
  uint64_t v21 = v27;
  MEMORY[0x21054AB00](v20, 0.2);
  uint64_t v22 = v29;
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v28 + 8);
  unint64_t result = v23(v20, v29);
  uint64_t v24 = *(void *)(v2 + v16);
  if (v24)
  {
    swift_retain();
    MEMORY[0x21054D9D0](v21, v24);

    swift_release();
    return v23(v21, v22);
  }
LABEL_15:
  __break(1u);
  return result;
}

void closure #1 in ImageElementView.didZoom(in:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    objc_super v3 = (void *)v2;
    ImageElementView.updateUI()();
  }
}

Swift::Void __swiftcall ImageElementView.updateHDR()()
{
  uint64_t v1 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v1 - 8);
  objc_super v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void **)((char *)v0 + direct field offset for ImageElementView.mediaView);
  if (v12)
  {
    uint64_t v13 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, v9);
    if (v13)
    {
      uint64_t v14 = (void *)v13;
      id v15 = v12;

      BOOL v16 = 0;
    }
    else
    {
      uint64_t v17 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
      swift_beginAccess();
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v21(v11, v17, v4);
      lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
      id v18 = v12;
      Capsule<>.root.getter();
      uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
      v19(v11, v4);
      v21(v7, v17, v4);
      BOOL v20 = specialized ContainerCanvasElement.hasMarkup(in:)((uint64_t)v7);
      outlined destroy of ImageElementView.ImageOrFile((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for Image);
      v19(v7, v4);
      BOOL v16 = !v20;
    }
    objc_msgSend(v12, sel_setIsHDRAllowed_, v16);
  }
}

Swift::Void __swiftcall ImageElementView.didBeginDrawing()()
{
  specialized ContainerCanvasElementView.didBeginDrawing()();
  uint64_t v1 = *(void **)(v0 + direct field offset for ImageElementView.mediaView);
  if (v1)
  {
    objc_msgSend(v1, sel_setIsHDRAllowed_, 0);
  }
}

void specialized ContainerCanvasElementView.didBeginDrawing()()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas;
  uint64_t v2 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v2)
  {
    objc_super v3 = (void *)v2;
    uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v4)
    {
      __break(1u);
      return;
    }
    uint64_t v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    if (*(void *)(v6 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v8 = 1;
    }
    else
    {
      uint64_t v9 = *(void *)(v7 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v8 = v9 != 0;
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  uint64_t v10 = (void *)MEMORY[0x263F8EED0];
  *((unsigned char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4E8)) = v8;
  uint64_t v11 = (void *)MEMORY[0x210550400](v1);
  if (v11)
  {
    id v12 = v11;
    (*(void (**)(void *))((*v10 & *v11) + 0x5D8))(v0);
  }
}

Swift::Void __swiftcall ImageElementView.didEndDrawing()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  BOOL v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x270FA5388](v9);
  id v12 = (char *)&v24 - v11;
  uint64_t v13 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas, v10);
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
  }
  id v15 = *(void **)((char *)v1 + direct field offset for ImageElementView.mediaView);
  if (v15)
  {
    uint64_t v16 = MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
    if (v16)
    {
      uint64_t v17 = (void *)v16;
      id v18 = v15;

      BOOL v19 = 0;
    }
    else
    {
      BOOL v20 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
      v24(v12, v20, v5);
      lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
      id v21 = v15;
      Capsule<>.root.getter();
      uint64_t v22 = *(void (**)(char *, uint64_t))(v6 + 8);
      v22(v12, v5);
      v24(v8, v20, v5);
      BOOL v23 = specialized ContainerCanvasElement.hasMarkup(in:)((uint64_t)v8);
      outlined destroy of ImageElementView.ImageOrFile((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Image);
      v22(v8, v5);
      BOOL v19 = !v23;
    }
    objc_msgSend(v15, sel_setIsHDRAllowed_, v19);
  }
}

Swift::Void __swiftcall ImageElementView.updateUI()()
{
  uint64_t v1 = v0;
  uint64_t v205 = type metadata accessor for ImageElementView.ImageOrFile(0);
  MEMORY[0x270FA5388](v205);
  CGRect v206 = (char *)&v192 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v220 = (uint64_t)&v192 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v208 = type metadata accessor for CRAsset();
  uint64_t v207 = *(void *)(v208 - 8);
  MEMORY[0x270FA5388](v208);
  double v195 = (char *)&v192 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v197 = (char *)&v192 - v7;
  uint64_t v8 = type metadata accessor for ImageElementView.ImageState(0);
  uint64_t v203 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v216 = (char *)&v192 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v222 = (uint64_t)&v192 - v11;
  uint64_t v204 = v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v219 = (uint64_t)&v192 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  uint64_t v200 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v218 = (uint64_t)&v192 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v212 = (uint64_t)&v192 - v18;
  uint64_t v201 = v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v225 = (uint64_t)&v192 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  uint64_t v199 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v217 = (uint64_t)&v192 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v211 = (uint64_t)&v192 - v25;
  uint64_t v214 = v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v233 = (uint64_t)&v192 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v221 = (uint64_t)&v192 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v232 = type metadata accessor for CRAssetOrData();
  uint64_t v223 = *(void *)(v232 - 8);
  MEMORY[0x270FA5388](v232);
  uint64_t v213 = (uint64_t)&v192 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v198 = (uint64_t *)((char *)&v192 - v33);
  MEMORY[0x270FA5388](v34);
  uint64_t v209 = (uint64_t)&v192 - v35;
  MEMORY[0x270FA5388](v36);
  uint64_t v210 = (uint64_t)&v192 - v37;
  uint64_t v202 = v38;
  MEMORY[0x270FA5388](v39);
  uint64_t v234 = (uint64_t)&v192 - v40;
  uint64_t v41 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v41);
  uint64_t v43 = (char *)&v192 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v44);
  uint64_t v230 = (char *)&v192 - v45;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v47 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v49 = (char *)&v192 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v50);
  unint64_t v235 = (char *)&v192 - v51;
  specialized ContainerCanvasElementView.updateGestures()();
  uint64_t v196 = (char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement;
  uint64_t v52 = (void *)MEMORY[0x210550400]();
  uint64_t v224 = v46;
  uint64_t v231 = v41;
  if (v52)
  {

    specialized CanvasElementView.updateFrame()();
  }
  else
  {
    uint64_t v53 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
    swift_beginAccess();
    uint64_t v54 = (*(uint64_t (**)(char *, char *, uint64_t))(v47 + 16))(v235, v53, v46);
    MEMORY[0x270FA5388](v54);
    *(&v192 - 4) = v41;
    *(&v192 - 3) = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    *(&v192 - 2) = (uint64_t)&protocol witness table for Image;
    swift_getKeyPath();
    uint64_t v55 = v224;
    uint64_t v56 = v235;
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v56, v55);
    objc_msgSend(v1, sel_setFrame_, 0.0, 0.0, v237);
  }
  id v215 = (void (*)(uint64_t, void, uint64_t, char *))v8;
  uint64_t v57 = (char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas;
  int v58 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  char v59 = (void *)MEMORY[0x263F8EED0];
  if (v58)
  {
    uint64_t v60 = v58;
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v58) + 0x680))();
  }
  char v61 = (char *)v1 + *(void *)((*v59 & *v1) + 0x380);
  swift_beginAccess();
  uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  uint64_t v63 = v235;
  uint64_t v64 = v61;
  uint64_t v65 = v224;
  uint64_t v228 = v47 + 16;
  unint64_t v227 = (unint64_t)v62;
  v62(v235, v61, v224);
  uint64_t v66 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  uint64_t v67 = v230;
  uint64_t v226 = v66;
  Capsule<>.root.getter();
  uint64_t v68 = *(void (**)(char *, uint64_t))(v47 + 8);
  uint64_t v229 = v47 + 8;
  v68(v63, v65);
  uint64_t v69 = v68;
  uint64_t v70 = (uint64_t)v67;
  uint64_t v71 = (void *)MEMORY[0x263F8EED0];
  outlined destroy of ImageElementView.ImageOrFile(v70, (uint64_t (*)(void))type metadata accessor for Image);
  specialized ContainerCanvasElementView.updateDrawing()();
  specialized ContainerCanvasElementView.updateSubelements()();
  uint64_t v72 = *(void **)((char *)v1 + *(void *)((*v71 & *v1) + 0x4D0));
  if (v72)
  {
    id v73 = v72;
    FormFillingView.updateUI()();
  }
  ImageElementView.updateHDR()();
  uint64_t v74 = v64;
  ((void (*)(char *, char *, uint64_t))v227)(v49, v64, v65);
  Capsule<>.root.getter();
  v69(v49, v65);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  uint64_t v75 = v221;
  CRRegister.wrappedValue.getter();
  outlined destroy of ImageElementView.ImageOrFile((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for Image);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v223 + 48))(v75, 1, v232) != 1)
  {
    outlined init with take of CRAssetOrData(v75, v234, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    uint64_t v86 = (void *)MEMORY[0x210550400](v57);
    double v87 = 1.0;
    if (v86)
    {
      uint64_t v88 = v86;
      *(double *)&uint64_t v89 = COERCE_DOUBLE((*(uint64_t (**)(void))((*v71 & *v86) + 0x278))());
      if (v90)
      {
        id v92 = objc_msgSend(v88, sel_window);
        if (v92)
        {
          uint64_t v93 = v92;
          id v94 = objc_msgSend(v92, sel_screen);

          objc_msgSend(v94, sel_scale);
          double v87 = v95;
        }
        else
        {
        }
      }
      else
      {
        double v91 = *(double *)&v89;

        double v87 = v91;
      }
    }
    id v96 = objc_msgSend(v1, sel_window);
    if (v96
      && (uint64_t v97 = v96,
          id v98 = objc_msgSend(v96, sel_screen),
          v97,
          id v99 = objc_msgSend(v98, sel_coordinateSpace),
          v98,
          v99))
    {
      objc_msgSend(v1, sel_bounds);
      objc_msgSend(v1, sel_convertRect_toCoordinateSpace_, v99);
      CGFloat v101 = v100;
      CGFloat v103 = v102;
      CGFloat v105 = v104;
      CGFloat v107 = v106;
      swift_unknownObjectRelease();
    }
    else
    {
      objc_msgSend(v1, sel_bounds);
      CGFloat v101 = v108;
      CGFloat v103 = v109;
      CGFloat v105 = v110;
      CGFloat v107 = v111;
    }
    if (*((unsigned char *)v1 + *(void *)((*v71 & *v1) + 0x4F0)))
    {
      uint64_t v112 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v239.origin.double x = v101;
      v239.origin.double y = v103;
      v239.size.CGFloat width = v105;
      v239.size.CGFloat height = v107;
      double Width = CGRectGetWidth(v239);
      v240.origin.double x = v101;
      v240.origin.double y = v103;
      v240.size.CGFloat width = v105;
      v240.size.CGFloat height = v107;
      double Height = CGRectGetHeight(v240);
      if (Width > Height) {
        double Height = Width;
      }
      double v115 = v87 * Height;
      if ((~*(void *)&v115 & 0x7FF0000000000000) == 0) {
        goto LABEL_56;
      }
      if (v115 <= -9.22337204e18)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      if (v115 >= 9.22337204e18)
      {
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        return;
      }
      uint64_t v112 = (uint64_t)v115;
    }
    uint64_t v221 = v112;
    if (one-time initialization token for isLowJetsamLimitEnvironment != -1) {
      swift_once();
    }
    double v194 = (char *)v1;
    if (static NSBundle.isLowJetsamLimitEnvironment == 1)
    {
      CGFloat v116 = (void *)MEMORY[0x210550400](v196);
      CGFloat v117 = v74;
      CGFloat v118 = v69;
      if (v116) {

      }
      else {
        uint64_t v221 = 2048;
      }
    }
    else
    {
      CGFloat v117 = v74;
      CGFloat v118 = v69;
    }
    CGFloat v119 = v235;
    id v193 = v117;
    CGFloat v120 = (void (*)(char *, char *, uint64_t))v227;
    ((void (*)(char *, char *, uint64_t))v227)(v235, v117, v65);
    uint64_t v121 = (uint64_t)v230;
    Capsule<>.root.getter();
    v118(v119, v65);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of ImageElementView.ImageOrFile(v121, (uint64_t (*)(void))type metadata accessor for Image);
    v120(v119, v193, v65);
    Capsule<>.root.getter();
    v118(v119, v65);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
    uint64_t v122 = v225;
    CRRegister.wrappedValue.getter();
    outlined destroy of ImageElementView.ImageOrFile(v121, (uint64_t (*)(void))type metadata accessor for Image);
    double v123 = v194;
    id v124 = objc_msgSend(v194, sel_traitCollection);
    id v125 = objc_msgSend(v124, sel_imageDynamicRange);

    uint64_t v126 = v234;
    uint64_t v127 = v210;
    outlined init with copy of ImageElementView.ImageOrFile(v234, v210, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    uint64_t v128 = v212;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v122, v212, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    uint64_t v129 = v211;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v233, v211, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    uint64_t v130 = v209;
    outlined init with copy of ImageElementView.ImageOrFile(v126, v209, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of ImageElementView.ImageOrFile(v130, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      long long v236 = 0u;
      long long v237 = 0u;
      uint64_t v238 = 0;
      BOOL v131 = 1;
    }
    else
    {
      uint64_t v132 = v207;
      char v133 = v197;
      uint64_t v134 = v130;
      uint64_t v135 = v208;
      (*(void (**)(char *, uint64_t, uint64_t))(v207 + 32))(v197, v134, v208);
      CRAsset.assetManager.getter();
      (*(void (**)(char *, uint64_t))(v132 + 8))(v133, v135);
      CRAssetManager.encryptionDelegate.getter();
      swift_release();
      BOOL v131 = *((void *)&v237 + 1) == 0;
    }
    uint64_t v136 = v222;
    uint64_t v137 = v219;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v236, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
    ImageElementView.ImageState.init(asset:filter:crop:maxDimensionInPixels:canUseFile:)(v127, v128, v129, v221, v131, v137);
    uint64_t v138 = (uint64_t)&v123[direct field offset for ImageElementView.state];
    swift_beginAccess();
    outlined init with copy of ImageElementView.ImageOrFile(v138, v136, type metadata accessor for ImageElementView.ImageState);
    char v139 = specialized static ImageElementView.ImageState.== infix(_:_:)(v136, v137);
    outlined destroy of ImageElementView.ImageOrFile(v136, type metadata accessor for ImageElementView.ImageState);
    if ((v139 & 1) == 0)
    {
      outlined init with copy of ImageElementView.ImageOrFile(v137, v136, type metadata accessor for ImageElementView.ImageState);
      swift_beginAccess();
      outlined assign with take of ImageElementView.ImageState(v136, v138);
      swift_endAccess();
      uint64_t v230 = (char *)direct field offset for ImageElementView.getThumbnailTask;
      uint64_t v140 = MEMORY[0x263F8EE60];
      if (*(void *)&v123[direct field offset for ImageElementView.getThumbnailTask])
      {
        uint64_t v141 = swift_retain();
        MEMORY[0x21054D560](v141, v140 + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
        swift_release();
      }
      unint64_t v142 = v198;
      outlined init with copy of ImageElementView.ImageOrFile(v234, (uint64_t)v198, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      EnumCaseMultiPayloadouble d = swift_getEnumCaseMultiPayload();
      uint64_t v231 = (uint64_t)v125;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v144 = *v142;
        unint64_t v145 = v142[1];
        uint64_t v146 = v142[2];
        unint64_t v147 = v142[3];
        outlined copy of Data._Representation(*v142, v145);
        uint64_t v232 = v144;
        outlined consume of Data._Representation(v144, v145);
        outlined consume of Data._Representation(v146, v147);
      }
      else
      {
        uint64_t v148 = v207;
        char v149 = v195;
        id v150 = v142;
        uint64_t v151 = v208;
        (*(void (**)(char *, uint64_t *, uint64_t))(v207 + 32))(v195, v150, v208);
        uint64_t v232 = CRAsset.digest.getter();
        unint64_t v145 = v152;
        (*(void (**)(char *, uint64_t))(v148 + 8))(v149, v151);
      }
      uint64_t v153 = &v123[direct field offset for ImageElementView.thumbnailCacheDigest];
      uint64_t v154 = *(void *)&v123[direct field offset for ImageElementView.thumbnailCacheDigest];
      unint64_t v155 = *(void *)&v123[direct field offset for ImageElementView.thumbnailCacheDigest + 8];
      uint64_t v156 = v232;
      *(void *)uint64_t v153 = v232;
      *((void *)v153 + 1) = v145;
      outlined copy of Data._Representation(v156, v145);
      outlined consume of Data?(v154, v155);
      uint64_t v157 = v220;
      static TaskPriority.userInitiated.getter();
      uint64_t v158 = type metadata accessor for TaskPriority();
      uint64_t v159 = *(void *)(v158 - 8);
      uint64_t v160 = *(void (**)(uint64_t, void, uint64_t, char *))(v159 + 56);
      char v216 = (char *)v158;
      id v215 = v160;
      uint64_t v212 = v159 + 56;
      ((void (*)(uint64_t, void, uint64_t))v160)(v157, 0, 1);
      uint64_t v211 = swift_allocObject();
      swift_unknownObjectWeakInit();
      unint64_t v235 = (char *)direct field offset for ImageElementView.imageGetCounter;
      uint64_t v210 = *(void *)&v123[direct field offset for ImageElementView.imageGetCounter];
      uint64_t v161 = v218;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v225, v218, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      uint64_t v162 = v217;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v233, v217, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      uint64_t v163 = *(unsigned __int8 *)(v200 + 80);
      uint64_t v228 = ~v163;
      uint64_t v164 = (v163 + 48) & ~v163;
      uint64_t v165 = *(unsigned __int8 *)(v199 + 80);
      unint64_t v227 = ~v165;
      uint64_t v224 = v201 + v165;
      uint64_t v166 = (v201 + v165 + v164) & ~v165;
      uint64_t v229 = v163;
      uint64_t v226 = v163 | v165;
      unint64_t v167 = (v214 + v166 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v168 = v123;
      uint64_t v169 = v145;
      unint64_t v170 = (void *)swift_allocObject();
      v170[2] = 0;
      v170[3] = 0;
      v170[4] = v156;
      v170[5] = v169;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v161, (uint64_t)v170 + v164, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v162, (uint64_t)v170 + v166, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      *(void *)((char *)v170 + v167) = v211;
      *(void *)((char *)v170 + ((v167 + 15) & 0xFFFFFFFFFFFFFFF8)) = v210;
      uint64_t v211 = v169;
      unint64_t v171 = v169;
      uint64_t v172 = v168;
      outlined copy of Data._Representation(v156, v171);
      uint64_t v173 = v220;
      uint64_t v174 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v220, (uint64_t)&async function pointer to partial apply for closure #1 in ImageElementView.updateUI(), (uint64_t)v170);
      outlined destroy of StocksKitCurrencyCache.Provider?(v173, &demangling cache variable for type metadata for TaskPriority?);
      *(void *)&v230[(void)v168] = v174;
      swift_release();
      uint64_t v230 = (char *)direct field offset for ImageElementView.getImageTask;
      if (*(void *)&v168[direct field offset for ImageElementView.getImageTask])
      {
        uint64_t v175 = swift_retain();
        MEMORY[0x21054D560](v175, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
        swift_release();
      }
      LODWORD(v231) = v231 != 0;
      uint64_t v176 = v220;
      static TaskPriority.userInitiated.getter();
      v215(v176, 0, 1, v216);
      char v216 = (char *)swift_allocObject();
      swift_unknownObjectWeakInit();
      id v215 = *(void (**)(uint64_t, void, uint64_t, char *))&v235[(void)v168];
      uint64_t v177 = v222;
      outlined init with copy of ImageElementView.ImageOrFile(v219, v222, type metadata accessor for ImageElementView.ImageState);
      outlined init with copy of ImageElementView.ImageOrFile(v234, v213, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v225, v218, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v233, v217, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      unint64_t v178 = (*(unsigned __int8 *)(v203 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v203 + 80);
      unint64_t v179 = (v204 + v178 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v180 = (v179 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v181 = (*(unsigned __int8 *)(v223 + 80) + v180 + 8) & ~(unint64_t)*(unsigned __int8 *)(v223 + 80);
      unint64_t v182 = (v202 + v181 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v183 = (v229 + v182 + 9) & v228;
      unint64_t v184 = (v224 + v183) & v227;
      uint64_t v185 = swift_allocObject();
      *(void *)(v185 + 16) = 0;
      *(void *)(v185 + 24) = 0;
      outlined init with take of CRAssetOrData(v177, v185 + v178, type metadata accessor for ImageElementView.ImageState);
      *(void *)(v185 + v179) = v216;
      *(void *)(v185 + v180) = v215;
      outlined init with take of CRAssetOrData(v213, v185 + v181, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      unint64_t v186 = v185 + v182;
      *(void *)unint64_t v186 = v221;
      *(unsigned char *)(v186 + 8) = v231;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v218, v185 + v183, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v217, v185 + v184, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      uint64_t v187 = v220;
      uint64_t v188 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v220, (uint64_t)&async function pointer to partial apply for specialized closure #2 in ImageElementView.updateUI(), v185);
      outlined destroy of StocksKitCurrencyCache.Provider?(v187, &demangling cache variable for type metadata for TaskPriority?);
      *(void *)&v230[(void)v172] = v188;
      swift_release();
      uint64_t v189 = *(void *)&v235[(void)v172];
      BOOL v190 = __OFADD__(v189, 2);
      uint64_t v191 = v189 + 2;
      if (v190) {
        goto LABEL_59;
      }
      *(void *)&v235[(void)v172] = v191;
      outlined consume of Data._Representation(v232, v211);
      uint64_t v137 = v219;
    }
    outlined destroy of ImageElementView.ImageOrFile(v137, type metadata accessor for ImageElementView.ImageState);
    outlined destroy of StocksKitCurrencyCache.Provider?(v225, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v233, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    long long v84 = (uint64_t (*)(void))type metadata accessor for CRAssetOrData;
    uint64_t v85 = v234;
    goto LABEL_53;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v75, &demangling cache variable for type metadata for CRAssetOrData?);
  uint64_t v76 = (uint64_t)v1 + direct field offset for ImageElementView.state;
  swift_beginAccess();
  uint64_t v77 = v222;
  outlined init with copy of ImageElementView.ImageOrFile(v76, v222, type metadata accessor for ImageElementView.ImageState);
  uint64_t v78 = (uint64_t)v216;
  swift_storeEnumTagMultiPayload();
  char v79 = specialized static ImageElementView.ImageState.== infix(_:_:)(v77, v78);
  outlined destroy of ImageElementView.ImageOrFile(v78, type metadata accessor for ImageElementView.ImageState);
  outlined destroy of ImageElementView.ImageOrFile(v77, type metadata accessor for ImageElementView.ImageState);
  if (v79) {
    return;
  }
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  outlined assign with take of ImageElementView.ImageState(v77, v76);
  swift_endAccess();
  if (*(void *)((char *)v1 + direct field offset for ImageElementView.getImageTask))
  {
    uint64_t v80 = swift_retain();
    MEMORY[0x21054D560](v80, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
    swift_release();
  }
  uint64_t v81 = *(void *)((char *)v1 + direct field offset for ImageElementView.imageGetCounter);
  uint64_t v82 = v81 + 1;
  if (__OFADD__(v81, 1))
  {
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  *(void *)((char *)v1 + direct field offset for ImageElementView.imageGetCounter) = v82;
  uint64_t v83 = (uint64_t)v206;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  ImageElementView.updateImage(_:state:counter:)(v83, v77, v82);
  outlined destroy of ImageElementView.ImageOrFile(v77, type metadata accessor for ImageElementView.ImageState);
  long long v84 = type metadata accessor for ImageElementView.ImageOrFile;
  uint64_t v85 = v83;
LABEL_53:
  outlined destroy of ImageElementView.ImageOrFile(v85, v84);
}

uint64_t closure #1 in ImageElementView.updateUI()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = a8;
  v8[11] = v11;
  v8[8] = a6;
  v8[9] = a7;
  v8[6] = a4;
  v8[7] = a5;
  v8[12] = type metadata accessor for ImageElementView.ImageState(0);
  v8[13] = swift_task_alloc();
  v8[14] = type metadata accessor for ImageElementView.ImageOrFile(0);
  v8[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in ImageElementView.updateUI(), 0, 0);
}

uint64_t closure #1 in ImageElementView.updateUI()()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = static ImageThumbnailManager.shared;
  *(void *)(v0 + 128) = static ImageThumbnailManager.shared;
  return MEMORY[0x270FA2498](closure #1 in ImageElementView.updateUI(), v1, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized AsyncCache.cached(for:)
                                                + async function pointer to specialized AsyncCache.cached(for:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[17] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in ImageElementView.updateUI();
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  return v5(v3, v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  long long v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;

  uint64_t v1 = *(void **)(v0 + 144);
  if (v1)
  {
    if (one-time initialization token for defaultFilterQueue != -1) {
      swift_once();
    }
    uint64_t v2 = *(void *)(v0 + 80) + 16;
    uint64_t v3 = (void *)defaultFilterQueue;
    uint64_t v4 = swift_task_alloc();
    uint64_t v5 = *(_OWORD *)(v0 + 64);
    *(void *)(v4 + 16) = v1;
    *(_OWORD *)(v4 + 24) = v5;
    type metadata accessor for CGImageRef(0);
    uint64_t v6 = v3;
    OS_dispatch_queue.sync<A>(execute:)();

    swift_task_dealloc();
    uint64_t v7 = *(void **)(v0 + 40);
    *(void *)(v0 + 152) = v7;
    swift_beginAccess();
    uint64_t v8 = MEMORY[0x210550400](v2);
    *(void *)(v0 + 160) = v8;
    if (v8)
    {
      uint64_t v9 = *(void *)(v0 + 88);
      **(void **)(v0 + 120) = v7;
      swift_storeEnumTagMultiPayload();
      uint64_t v10 = swift_storeEnumTagMultiPayload();
      if (__OFADD__(v9, 1))
      {
        __break(1u);
      }
      else
      {
        *(void *)(v0 + 168) = v9 + 1;
        type metadata accessor for MainActor();
        uint64_t v13 = v7;
        *(void *)(v0 + 176) = static MainActor.shared.getter();
        uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v16 = v15;
        uint64_t v10 = (uint64_t)closure #1 in ImageElementView.updateUI();
        uint64_t v11 = v14;
        uint64_t v12 = v16;
      }
      return MEMORY[0x270FA2498](v10, v11, v12);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[21];
  uint64_t v2 = (void *)v0[20];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[13];
  swift_release();
  ImageElementView.updateImage(_:state:counter:)(v3, v4, v1);

  outlined destroy of ImageElementView.ImageOrFile(v4, type metadata accessor for ImageElementView.ImageState);
  outlined destroy of ImageElementView.ImageOrFile(v3, type metadata accessor for ImageElementView.ImageOrFile);
  return MEMORY[0x270FA2498](closure #1 in ImageElementView.updateUI(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 144);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in ImageElementView.updateUI()(uint64_t a1)
{
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in ImageElementView.updateUI(), 0, 0);
}

uint64_t specialized closure #2 in ImageElementView.updateUI()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 112) = v14;
  *(void *)(v8 + 120) = v15;
  *(unsigned char *)(v8 + 296) = v13;
  *(void *)(v8 + 96) = a7;
  *(void *)(v8 + 104) = a8;
  *(void *)(v8 + 80) = a5;
  *(void *)(v8 + 88) = a6;
  *(void *)(v8 + 72) = a4;
  *(void *)(v8 + 128) = type metadata accessor for ImageElementView.ImageOrFile(0);
  *(void *)(v8 + 136) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRStableAsset?);
  *(void *)(v8 + 144) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for CRStableAsset();
  *(void *)(v8 + 152) = v9;
  *(void *)(v8 + 160) = *(void *)(v9 - 8);
  *(void *)(v8 + 168) = swift_task_alloc();
  *(void *)(v8 + 176) = type metadata accessor for ImageElementView.ImageState(0);
  *(void *)(v8 + 184) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for CRAsset();
  *(void *)(v8 + 192) = v10;
  *(void *)(v8 + 200) = *(void *)(v10 - 8);
  *(void *)(v8 + 208) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #2 in ImageElementView.updateUI(), 0, 0);
}

uint64_t specialized closure #2 in ImageElementView.updateUI()()
{
  outlined init with copy of ImageElementView.ImageOrFile(*(void *)(v0 + 72), *(void *)(v0 + 184), type metadata accessor for ImageElementView.ImageState);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 200) + 32))(*(void *)(v0 + 208), *(void *)(v0 + 184), *(void *)(v0 + 192));
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v1;
    *uint64_t v1 = v0;
    v1[1] = specialized closure #2 in ImageElementView.updateUI();
    uint64_t v2 = *(void *)(v0 + 144);
    uint64_t v3 = *(void *)(v0 + 152);
    return MEMORY[0x270F17D68](v2, 1, &async function pointer to closure #1 in closure #2 in ImageElementView.updateUI(), 0, v3);
  }
  else
  {
    outlined destroy of ImageElementView.ImageOrFile(*(void *)(v0 + 184), type metadata accessor for ImageElementView.ImageState);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v4;
    *uint64_t v4 = v0;
    v4[1] = specialized closure #2 in ImageElementView.updateUI();
    char v5 = *(unsigned char *)(v0 + 296);
    uint64_t v6 = *(void *)(v0 + 104);
    return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(v6, 1, v5);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #2 in ImageElementView.updateUI(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;

  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[18];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
    outlined destroy of StocksKitCurrencyCache.Provider?(v3, &demangling cache variable for type metadata for CRStableAsset?);
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
  uint64_t v4 = v0[10] + 16;
  (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[21], v3, v1);
  swift_beginAccess();
  char v5 = MEMORY[0x210550400](v4);
  v0[30] = v5;
  if (!v5)
  {
    uint64_t v14 = v0[25];
    char v13 = v0[26];
    uint64_t v15 = v0[24];
    (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    goto LABEL_9;
  }
  uint64_t v6 = v0[11];
  (*(void (**)(void, void, void))(v0[20] + 16))(v0[17], v0[21], v0[19]);
  uint64_t v7 = swift_storeEnumTagMultiPayload();
  if (__OFADD__(v6, 2))
  {
    __break(1u);
  }
  else
  {
    v0[31] = v6 + 2;
    type metadata accessor for MainActor();
    v0[32] = static MainActor.shared.getter();
    uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v12 = v11;
    uint64_t v7 = (uint64_t)specialized closure #2 in ImageElementView.updateUI();
    uint64_t v8 = v10;
    uint64_t v9 = v12;
  }
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  long long v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;

  uint64_t v1 = *(void **)(v0 + 232);
  if (v1)
  {
    if (one-time initialization token for defaultFilterQueue != -1) {
      swift_once();
    }
    uint64_t v2 = *(void *)(v0 + 80) + 16;
    uint64_t v3 = (void *)defaultFilterQueue;
    uint64_t v4 = swift_task_alloc();
    char v5 = *(_OWORD *)(v0 + 112);
    *(void *)(v4 + 16) = v1;
    *(_OWORD *)(v4 + 24) = v5;
    type metadata accessor for CGImageRef(0);
    uint64_t v6 = v3;
    OS_dispatch_queue.sync<A>(execute:)();

    swift_task_dealloc();
    uint64_t v7 = *(void **)(v0 + 64);
    *(void *)(v0 + 264) = v7;
    swift_beginAccess();
    uint64_t v8 = MEMORY[0x210550400](v2);
    *(void *)(v0 + 272) = v8;
    if (v8)
    {
      uint64_t v9 = *(void *)(v0 + 88);
      **(void **)(v0 + 136) = v7;
      uint64_t v10 = swift_storeEnumTagMultiPayload();
      if (__OFADD__(v9, 2))
      {
        __break(1u);
      }
      else
      {
        *(void *)(v0 + 280) = v9 + 2;
        type metadata accessor for MainActor();
        char v13 = v7;
        *(void *)(v0 + 288) = static MainActor.shared.getter();
        uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v16 = v15;
        uint64_t v10 = (uint64_t)specialized closure #2 in ImageElementView.updateUI();
        uint64_t v11 = v14;
        uint64_t v12 = v16;
      }
      return MEMORY[0x270FA2498](v10, v11, v12);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[31];
  uint64_t v2 = (void *)v0[30];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[9];
  swift_release();
  ImageElementView.updateImage(_:state:counter:)(v3, v4, v1);

  outlined destroy of ImageElementView.ImageOrFile(v3, type metadata accessor for ImageElementView.ImageOrFile);
  return MEMORY[0x270FA2498](specialized closure #2 in ImageElementView.updateUI(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[25];
  uint64_t v1 = v0[26];
  uint64_t v3 = v0[24];
  (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[35];
  uint64_t v2 = (void *)v0[34];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[9];
  swift_release();
  ImageElementView.updateImage(_:state:counter:)(v3, v4, v1);

  outlined destroy of ImageElementView.ImageOrFile(v3, type metadata accessor for ImageElementView.ImageOrFile);
  return MEMORY[0x270FA2498](specialized closure #2 in ImageElementView.updateUI(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 232);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t specialized closure #2 in ImageElementView.updateUI()(uint64_t a1)
{
  *(void *)(*(void *)v1 + 232) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #2 in ImageElementView.updateUI(), 0, 0);
}

uint64_t closure #1 in closure #2 in ImageElementView.updateUI()(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for URL();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #2 in ImageElementView.updateUI(), 0, 0);
}

uint64_t closure #1 in closure #2 in ImageElementView.updateUI()()
{
  (*(void (**)(void, void, void))(v0[5] + 16))(v0[6], v0[3], v0[4]);
  CRStableAsset.init(url:extension:)();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void ImageElementView.drawingDidChange(newDrawing:)(char *a1)
{
  uint64_t v3 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v22 - v11;
  specialized ContainerCanvasElementView.drawingDidChange(newDrawing:)(a1);
  char v13 = *(void **)((char *)v1 + direct field offset for ImageElementView.mediaView);
  if (v13)
  {
    uint64_t v14 = MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
    if (v14)
    {
      uint64_t v15 = (void *)v14;
      id v16 = v13;

      BOOL v17 = 0;
    }
    else
    {
      uint64_t v18 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v22(v12, v18, v6);
      lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
      id v19 = v13;
      Capsule<>.root.getter();
      uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
      v20(v12, v6);
      v22(v9, v18, v6);
      BOOL v21 = specialized ContainerCanvasElement.hasMarkup(in:)((uint64_t)v9);
      outlined destroy of ImageElementView.ImageOrFile((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Image);
      v20(v9, v6);
      BOOL v17 = !v21;
    }
    objc_msgSend(v13, sel_setIsHDRAllowed_, v17);
  }
}

void specialized ContainerCanvasElementView.drawingDidChange(newDrawing:)(char *a1)
{
  uint64_t v62 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v61 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  MEMORY[0x270FA5388](v14);
  BOOL v17 = (char *)&v52 - v16;
  uint64_t v18 = *MEMORY[0x263F8EED0] & *v1;
  if (*((unsigned char *)v1 + *(void *)(v18 + 0x4F8))) {
    return;
  }
  uint64_t v52 = v5;
  uint64_t v53 = v3;
  uint64_t v54 = v2;
  int v58 = v1;
  uint64_t v59 = v15;
  id v19 = (char *)v1 + *(void *)(v18 + 896);
  swift_beginAccess();
  uint64_t v20 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 16);
  uint64_t v60 = v19;
  uint64_t v55 = v20;
  uint64_t v56 = v13 + 16;
  uint64_t v21 = ((uint64_t (*)(char *, char *, uint64_t))v20)(v17, v19, v12);
  MEMORY[0x270FA5388](v21);
  uint64_t v57 = type metadata accessor for Image();
  *(&v52 - 4) = (char *)v57;
  *(&v52 - 3) = (char *)lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  *(&v52 - 2) = (char *)&protocol witness table for Image;
  uint64_t v22 = v12;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v17, v12);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v11, 1, v24);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  uint64_t v26 = v61;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v61, v62, v6);
  if (v25 == 1)
  {
    swift_getKeyPath();
    lazy protocol witness table accessor for type CGRect and conformance CGRect((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
    uint64_t v27 = v52;
    Capsule<>.subscript.getter();
    swift_release();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    uint64_t v28 = v7;
    uint64_t v29 = v23;
    uint64_t v30 = v6;
    uint64_t v31 = v54;
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    uint64_t v32 = v26;
    uint64_t v34 = v63[0];
    uint64_t v33 = v63[1];
    (*(void (**)(char *, uint64_t))(v53 + 8))(v27, v31);
    uint64_t v35 = v32;
    uint64_t v36 = v62;
    uint64_t v37 = v30;
    uint64_t v23 = v29;
    uint64_t v38 = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v35, v37);
    uint64_t v39 = v58;
    uint64_t v40 = v59;
    uint64_t v41 = (void *)MEMORY[0x263F8EED0];
    if (v33 != v34)
    {
      MEMORY[0x270FA5388](v38);
      *(&v52 - 2) = v36;
      uint64_t v42 = v60;
      swift_beginAccess();
      Capsule.callAsFunction<A>(_:)();
      uint64_t v43 = v42;
      goto LABEL_7;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v26, v6);
    uint64_t v39 = v58;
    uint64_t v40 = v59;
    uint64_t v41 = (void *)MEMORY[0x263F8EED0];
  }
  uint64_t v43 = v60;
  swift_beginAccess();
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type CGRect and conformance CGRect((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Capsule.merge<A>(_:)();
LABEL_7:
  swift_endAccess();
  uint64_t v44 = MEMORY[0x210550400]((char *)v39 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v44)
  {
    uint64_t v45 = (void *)v44;
    uint64_t v46 = v44 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
    swift_beginAccess();
    if (MEMORY[0x210550400](v46))
    {
      uint64_t v47 = *(void *)(v46 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, uint64_t, uint64_t))(v47 + 16))(v45, ObjectType, v47);
      swift_unknownObjectRelease();
    }
    v55(v40, v43, v22);
    LOBYTE(v63[0]) = 4;
    uint64_t v49 = *(void (**)(uint64_t, void *, uint64_t, uint64_t))((*v41 & *v45) + 0x550);
    uint64_t v50 = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    v49(v40, v63, v57, v50);
    LOBYTE(v63[0]) = 4;
    (*(void (**)(void *))((*v41 & *v45) + 0x530))(v63);
    uint64_t v51 = ((uint64_t (*)(uint64_t, uint64_t))v23)(v40, v22);
    (*(void (**)(uint64_t))((*v41 & *v45) + 0x318))(v51);
  }
}

Swift::OpaquePointer_optional __swiftcall ImageElementView.pasteboardRepresentation()()
{
  uint64_t v1 = type metadata accessor for CRStableAsset();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v27[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for UTType();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for ImageElementView.ImageOrFile(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)&v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = v0 + direct field offset for ImageElementView.image;
  swift_beginAccess();
  outlined init with copy of ImageElementView.ImageOrFile(v12, (uint64_t)v11, type metadata accessor for ImageElementView.ImageOrFile);
  EnumCaseMultiPayloadouble d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    unint64_t v15 = 0;
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v2 + 32))(v4, v11, v1);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      initedouble d = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_20C832C20;
      static UTType.url.getter();
      uint64_t v17 = UTType.identifier.getter();
      uint64_t v19 = v18;
      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
      *(void *)(inited + 32) = v17;
      *(void *)(inited + 40) = v19;
      *(void *)(inited + 72) = type metadata accessor for URL();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
      CRStableAsset.url.getter();
      unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
    }
  }
  else
  {
    uint64_t v20 = *v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v21 = swift_initStackObject();
    *(_OWORD *)(v21 + 16) = xmmword_20C832C20;
    static UTType.png.getter();
    uint64_t v22 = UTType.identifier.getter();
    uint64_t v24 = v23;
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    *(void *)(v21 + 32) = v22;
    *(void *)(v21 + 40) = v24;
    type metadata accessor for CGImageRef(0);
    *(void *)(v21 + 72) = v25;
    *(void *)(v21 + 48) = v20;
    unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(v21);
  }
  uint64_t v26 = (void *)v15;
  result.value._Swift::Int rawValue = v26;
  result.is_nil = v14;
  return result;
}

id @objc ImageElementView.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)(uint64_t a1)
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CC8]), sel_initWithView_, *(void *)(a1 + direct field offset for ImageElementView.contentView));
  return v1;
}

uint64_t type metadata accessor for ImageElementView(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, type metadata singleton initialization cache for ImageElementView);
}

uint64_t type metadata completion function for ImageElementView()
{
  uint64_t result = type metadata accessor for ImageElementView.ImageState(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ImageElementView.ImageOrFile(319);
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

id ImageElementView.dragInteractionPreviewForLifting(item:session:)()
{
  uint64_t v1 = *(void *)(v0 + direct field offset for ImageElementView.contentView);
  id v2 = objc_allocWithZone(MEMORY[0x263F82CB8]);
  return objc_msgSend(v2, sel_initWithView_, v1);
}

void specialized ContainerCanvasElementView.updateGestures()()
{
  uint64_t v1 = v0;
  specialized CanvasElementView.updateGestures()();
  id v2 = (void *)MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = (void *)MEMORY[0x263F8EED0];
    uint64_t v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x320))();

    if (v5)
    {
      id v6 = objc_msgSend(v5, sel_canvasView);

      if (v6)
      {
        id v7 = objc_msgSend(v6, sel_drawingGestureRecognizer);

        id v20 = objc_msgSend(v7, sel_view);
        if (v20)
        {
          uint64_t v8 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
          if (!v8 || (v8, (AnyCanvasElementView.isEditingCanvasElement.getter() & 1) != 0))
          {
            uint64_t v9 = *(void *)((*v4 & *v1) + 0x4E0);
            if (!*(void *)((char *)v1 + v9))
            {
              id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v1, sel_rootTapped_);
              uint64_t v11 = *(void **)((char *)v1 + v9);
              *(void *)((char *)v1 + v9) = v10;

              uint64_t v12 = *(void **)((char *)v1 + v9);
              if (!v12) {
                goto LABEL_19;
              }
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
              uint64_t v13 = swift_allocObject();
              *(_OWORD *)(v13 + 16) = xmmword_20C835790;
              id v14 = v12;
              *(NSNumber *)(v13 + 32) = Int._bridgeToObjectiveC()();
              uint64_t v21 = v13;
              specialized Array._endMutation()();
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
              isdouble a = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              objc_msgSend(v14, sel_setAllowedTouchTypes_, isa);

              uint64_t v16 = *(void **)((char *)v1 + v9);
              if (!v16) {
                goto LABEL_19;
              }
              uint64_t v17 = one-time initialization token for selectionAllowableMovementForFingerDrawingTap;
              id v18 = v16;
              if (v17 != -1) {
                swift_once();
              }
              objc_msgSend(v18, sel_setAllowableMovement_, *(double *)&static UIConstants.selectionAllowableMovementForFingerDrawingTap, v20, v21);

              uint64_t v19 = *(void **)((char *)v1 + v9);
              if (!v19 || (objc_msgSend(v19, sel_setDelegate_, v1), !*(void *)((char *)v1 + v9)))
              {
LABEL_19:
                __break(1u);
                return;
              }
              objc_msgSend(v20, sel_addGestureRecognizer_);
            }
          }
        }
      }
    }
  }
}

uint64_t specialized ContainerCanvasElementView.subelementViews.getter()
{
  uint64_t v1 = v0;
  id v2 = (void *)MEMORY[0x263F8EED0];
  uint64_t v3 = *(void **)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4C8));
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (!v3) {
    goto LABEL_19;
  }
  id v5 = objc_msgSend(v3, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = v4;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v7 = result;
    if (result) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_4:
      if (v7 < 1)
      {
        __break(1u);
        return result;
      }
      for (uint64_t i = 0; i != v7; ++i)
      {
        if ((v6 & 0xC000000000000001) != 0) {
          id v10 = (id)MEMORY[0x21054E050](i, v6);
        }
        else {
          id v10 = *(id *)(v6 + 8 * i + 32);
        }
        uint64_t v11 = v10;
        type metadata accessor for AnyCanvasElementView();
        if (swift_dynamicCastClass())
        {
          MEMORY[0x21054D330]();
          if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v4 = v17;
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = MEMORY[0x263F8EE78];
LABEL_18:
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v12 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v12
    && (uint64_t v13 = v12,
        (*(void (**)(uint64_t *__return_ptr))((*v2 & *v12) + 0x2C8))(&v17),
        v13,
        v17 == 1)
    && (id v14 = *(void **)((char *)v1 + *(void *)((*v2 & *v1) + 0x4D0))) != 0)
  {
    id v15 = v14;
    unint64_t v16 = FormFillingView.formFields.getter();
  }
  else
  {
    unint64_t v16 = MEMORY[0x263F8EE78];
  }
  uint64_t v17 = v4;
  specialized Array.append<A>(contentsOf:)(v16);
  return v17;
}

void specialized ContainerCanvasElementView.transformDrawing()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v72 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)MEMORY[0x263F8EED0];
  uint64_t v13 = *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4C0);
  id v14 = *(void **)((char *)v1 + v13);
  if (!v14) {
    return;
  }
  id v75 = v14;
  objc_msgSend(v75, sel_frame);
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CGFloat v22 = v21;
  objc_msgSend(v1, sel_bounds);
  v82.origin.CGFloat x = v23;
  v82.origin.CGFloat y = v24;
  v82.size.CGFloat width = v25;
  v82.size.double height = v26;
  v79.origin.CGFloat x = v16;
  v79.origin.CGFloat y = v18;
  v79.size.CGFloat width = v20;
  v79.size.double height = v22;
  if (!CGRectEqualToRect(v79, v82))
  {
    uint64_t v74 = v13;
    id v73 = v4;
    v77.double a = 1.0;
    v77.double b = 0.0;
    v77.CGFloat c = 0.0;
    v77.CGFloat d = 1.0;
    v77.tCGFloat x = 0.0;
    v77.tCGFloat y = 0.0;
    objc_msgSend(v75, sel_setTransform_, &v77);
    id v28 = v75;
    objc_msgSend(v1, sel_bounds);
    objc_msgSend(v28, sel_setFrame_);

    uint64_t v29 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
    if (v29)
    {

      uint64_t v30 = (char *)v1 + *(void *)((*v12 & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 16))(v11, v30, v8);
      MEMORY[0x270FA5388](v31);
      *(&v72 - 4) = type metadata accessor for Image();
      *(&v72 - 3) = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
      uint64_t v71 = &protocol witness table for Image;
      uint64_t v12 = (void *)MEMORY[0x263F8EED0];
      swift_getKeyPath();
      id v32 = v28;
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      CGAffineTransformMakeRotation(&v77, aBlock.a);
      objc_msgSend(v32, sel_setTransform_, &v77);
    }
    resize #1 <A>() in ContainerCanvasElementView.transformDrawing()(v28, &v77.a);
    double a = v77.a;
    double b = v77.b;
    CGFloat c = v77.c;
    CGFloat d = v77.d;
    tCGFloat x = v77.tx;
    tCGFloat y = v77.ty;
    double v39 = sqrt(a * a + b * b);
    uint64_t v40 = (uint64_t)v1 + *(void *)((*v12 & *v1) + 0x388);
    swift_beginAccess();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v40, (uint64_t)v7, &demangling cache variable for type metadata for Capsule<Image>?);
    uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
    int v42 = v41(v7, 1, v8);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Capsule<Image>?);
    BOOL v43 = v42 == 1;
    uint64_t v44 = v74;
    if (!v43
      || (uint64_t v45 = *(void *)((char *)v1 + v74)) != 0
      && *(void *)(v45 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink))
    {
      BOOL v46 = v39 < 0.5;
    }
    else
    {
      objc_msgSend(v1, sel_bounds);
      aBlock.double a = a;
      aBlock.double b = b;
      aBlock.CGFloat c = c;
      aBlock.CGFloat d = d;
      aBlock.tCGFloat x = tx;
      aBlock.tCGFloat y = ty;
      CGRect v81 = CGRectApplyAffineTransform(v80, &aBlock);
      CGFloat x = v81.origin.x;
      CGFloat y = v81.origin.y;
      CGFloat width = v81.size.width;
      double height = v81.size.height;
      objc_msgSend(v1, sel_bounds);
      if (!CGRect.almostEqual(_:threshold:)(v51, v52, v53, v54, 0.5, x, y, width, height)) {
        goto LABEL_25;
      }
      BOOL v46 = v39 < 0.5;
    }
    if (!v46 && v39 <= 2.0)
    {
      uint64_t v56 = (uint64_t)v73;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v40, (uint64_t)v73, &demangling cache variable for type metadata for Capsule<Image>?);
      int v57 = v41((char *)v56, 1, v8);
      outlined destroy of StocksKitCurrencyCache.Provider?(v56, &demangling cache variable for type metadata for Capsule<Image>?);
      if (v57 == 1)
      {
        uint64_t v58 = *(void *)((char *)v1 + v44);
        if (!v58 || !*(void *)(v58 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink))
        {
          uint64_t v59 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
          if (v59)
          {
            uint64_t v60 = v59;
            char v61 = (void *)(*(uint64_t (**)(void))((*v12 & *v59) + 0x320))();

            objc_msgSend(v61, sel_updateTilesForVisibleRect);
          }
        }
      }
LABEL_28:

      return;
    }
LABEL_25:
    uint64_t v62 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (v62)
    {
      uint64_t v63 = v62;
      uint64_t v64 = (void *)(*(uint64_t (**)(void))((*v12 & *v62) + 0x320))();

      if (v64)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v65 = swift_allocObject();
        *(_OWORD *)(v65 + 16) = xmmword_20C835790;
        *(void *)(v65 + 32) = v28;
        *(void *)&aBlock.double a = v65;
        specialized Array._endMutation()();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKAttachmentView);
        id v66 = v28;
        isdouble a = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v68 = swift_allocObject();
        *(void *)(v68 + 16) = v66;
        *(void *)&aBlock.tCGFloat x = partial apply for closure #1 in ContainerCanvasElementView.transformDrawing();
        *(void *)&aBlock.tCGFloat y = v68;
        *(void *)&aBlock.double a = MEMORY[0x263EF8330];
        *(void *)&aBlock.double b = 1107296256;
        *(void *)&aBlock.CGFloat c = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
        *(void *)&aBlock.CGFloat d = &block_descriptor_156;
        uint64_t v69 = _Block_copy(&aBlock);
        id v70 = v66;
        swift_release();
        objc_msgSend(v64, sel_resizeTiles_completion_, isa, v69);

        _Block_release(v69);
        return;
      }
    }
    goto LABEL_28;
  }
  id v27 = v75;
}

uint64_t type metadata accessor for ImageElementView.ImageState(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for ImageElementView.ImageState);
}

uint64_t type metadata accessor for ImageElementView.ImageOrFile(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for ImageElementView.ImageOrFile);
}

uint64_t ObjC metadata update function for ImageElementView()
{
  return type metadata accessor for ImageElementView(0);
}

char *initializeBufferWithCopyOfBuffer for ImageElementView.ImageOrFile(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = type metadata accessor for CRStableAsset();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = *a2;
      *(void *)a1 = *a2;
      uint64_t v9 = v8;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void destroy for ImageElementView.ImageOrFile(void **a1)
{
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v4 = type metadata accessor for CRStableAsset();
    int v5 = *(void (**)(void **, uint64_t))(*(void *)(v4 - 8) + 8);
    v5(a1, v4);
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v3 = *a1;
  }
}

void **initializeWithCopy for ImageElementView.ImageOrFile(void **a1, void **a2, uint64_t a3)
{
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v9 = type metadata accessor for CRStableAsset();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    id v8 = v7;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void **assignWithCopy for ImageElementView.ImageOrFile(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ImageElementView.ImageOrFile((uint64_t)a1, type metadata accessor for ImageElementView.ImageOrFile);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for CRStableAsset();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = *a2;
      *a1 = *a2;
      id v8 = v7;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for ImageElementView.ImageOrFile(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for CRStableAsset();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ImageElementView.ImageOrFile(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ImageElementView.ImageOrFile((uint64_t)a1, type metadata accessor for ImageElementView.ImageOrFile);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for CRStableAsset();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for ImageElementView.ImageOrFile()
{
  uint64_t result = type metadata accessor for CRStableAsset();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ImageElementView.ImageState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
LABEL_17:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      type metadata accessor for CRAssetOrData();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v8 = *a2;
        unint64_t v9 = a2[1];
        outlined copy of Data._Representation(*a2, v9);
        *a1 = v8;
        a1[1] = v9;
        uint64_t v10 = a2[2];
        unint64_t v11 = a2[3];
        outlined copy of Data._Representation(v10, v11);
        a1[2] = v10;
        a1[3] = v11;
      }
      else
      {
        uint64_t v14 = type metadata accessor for CRAsset();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
      }
      swift_storeEnumTagMultiPayload();
      double v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
      uint64_t v16 = v15[12];
      double v17 = (char *)a1 + v16;
      CGFloat v18 = (char *)a2 + v16;
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      uint64_t v22 = v15[16];
      CGFloat v23 = (char *)a1 + v22;
      CGFloat v24 = (char *)a2 + v22;
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      *(uint64_t *)((char *)a1 + v15[20]) = *(uint64_t *)((char *)a2 + v15[20]);
      goto LABEL_17;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t destroy for ImageElementView.ImageState(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for CRAsset();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    uint64_t v5 = v3;
    uint64_t v6 = a1;
LABEL_12:
    return v4(v6, v5);
  }
  if (!result)
  {
    type metadata accessor for CRAssetOrData();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
      outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
    }
    else
    {
      uint64_t v7 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
    }
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
    uint64_t v9 = a1 + *(int *)(v8 + 48);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    uint64_t v11 = *(void *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
    uint64_t v12 = a1 + *(int *)(v8 + 64);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
    if (!result)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
      uint64_t v6 = v12;
      uint64_t v5 = v13;
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t *initializeWithCopy for ImageElementView.ImageState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v11 = type metadata accessor for CRAsset();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
LABEL_15:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    type metadata accessor for CRAssetOrData();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = *a2;
      unint64_t v8 = a2[1];
      outlined copy of Data._Representation(*a2, v8);
      *a1 = v7;
      a1[1] = v8;
      uint64_t v9 = a2[2];
      unint64_t v10 = a2[3];
      outlined copy of Data._Representation(v9, v10);
      a1[2] = v9;
      a1[3] = v10;
    }
    else
    {
      uint64_t v12 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
    uint64_t v14 = v13[12];
    double v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v20 = v13[16];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    *(uint64_t *)((char *)a1 + v13[20]) = *(uint64_t *)((char *)a2 + v13[20]);
    goto LABEL_15;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t *assignWithCopy for ImageElementView.ImageState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ImageElementView.ImageOrFile((uint64_t)a1, type metadata accessor for ImageElementView.ImageState);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
LABEL_16:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      type metadata accessor for CRAssetOrData();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v7 = *a2;
        unint64_t v8 = a2[1];
        outlined copy of Data._Representation(*a2, v8);
        *a1 = v7;
        a1[1] = v8;
        uint64_t v9 = a2[2];
        unint64_t v10 = a2[3];
        outlined copy of Data._Representation(v9, v10);
        a1[2] = v9;
        a1[3] = v10;
      }
      else
      {
        uint64_t v12 = type metadata accessor for CRAsset();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
      uint64_t v14 = v13[12];
      double v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      uint64_t v20 = v13[16];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      *(uint64_t *)((char *)a1 + v13[20]) = *(uint64_t *)((char *)a2 + v13[20]);
      goto LABEL_16;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t outlined destroy of ImageElementView.ImageOrFile(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for ImageElementView.ImageState(char *a1, char *a2, uint64_t a3)
{
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = type metadata accessor for CRAsset();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_15:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for CRAssetOrData();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      uint64_t v9 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    unint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
    uint64_t v11 = v10[12];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    uint64_t v17 = v10[16];
    uint64_t v18 = &a1[v17];
    uint64_t v19 = &a2[v17];
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    *(void *)&a1[v10[20]] = *(void *)&a2[v10[20]];
    goto LABEL_15;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for ImageElementView.ImageState(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ImageElementView.ImageOrFile((uint64_t)a1, type metadata accessor for ImageElementView.ImageState);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_16:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for CRAssetOrData();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        uint64_t v9 = type metadata accessor for CRAsset();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
      }
      unint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
      uint64_t v11 = v10[12];
      uint64_t v12 = &a1[v11];
      uint64_t v13 = &a2[v11];
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      uint64_t v17 = v10[16];
      uint64_t v18 = &a1[v17];
      uint64_t v19 = &a2[v17];
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      *(void *)&a1[v10[20]] = *(void *)&a2[v10[20]];
      goto LABEL_16;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void type metadata completion function for ImageElementView.ImageState()
{
  type metadata accessor for CRAssetOrData();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TaggedValue_1<CRExtensible<BasicImageFilter>>?(319, &lazy cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    if (v1 <= 0x3F)
    {
      type metadata accessor for TaggedValue_1<CRExtensible<BasicImageFilter>>?(319, &lazy cache variable for type metadata for TaggedValue_2<CGRect, Quad>?, &demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      if (v2 <= 0x3F)
      {
        swift_getTupleTypeLayout();
        uint64_t v6 = &v5;
        uint64_t v3 = type metadata accessor for CRAsset();
        if (v4 <= 0x3F)
        {
          uint64_t v7 = *(void *)(v3 - 8) + 64;
          swift_initEnumMetadataMultiPayload();
        }
      }
    }
  }
}

void type metadata accessor for TaggedValue_1<CRExtensible<BasicImageFilter>>?(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t specialized closure #1 in ContainerCanvasElementView.drawingDidChange(newDrawing:)()
{
  uint64_t v0 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type CGRect and conformance CGRect((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Capsule.Ref.import<A>(_:)();
  v6[0] = type metadata accessor for Image();
  v6[1] = lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  _OWORD v6[2] = &protocol witness table for Image;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  Capsule<>.rootID.getter();
  Ref.init(id:)();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  uint64_t v14 = (void *)*v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_13;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a6 & 1) != 0) {
    goto LABEL_9;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a6 & 1);
  uint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  if ((v20 & 1) != (v23 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v22;
LABEL_9:
  int v24 = a3 & 1;
  uint64_t v25 = *v7;
  if (v20)
  {
    uint64_t v26 = v25[7] + 24 * v16;
    uint64_t result = *(void *)v26;
    *(void *)uint64_t v26 = a1;
    *(void *)(v26 + 8) = a2;
    *(unsigned char *)(v26 + 16) = v24 != 0;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a4, a5, a1, a2, v24, v25);
    outlined copy of Data._Representation(a4, a5);
    return 0;
  }
  return result;
}

BOOL specialized ContainerCanvasElement.hasMarkup(in:)(uint64_t a1)
{
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v30 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v31 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v29);
  uint64_t v33 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, a1, v10, v12);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v37 == v36)
  {
    char v15 = v33;
    unint64_t v16 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v6, 1, v35) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      BOOL v17 = 0;
    }
    else
    {
      uint64_t v18 = v34;
      uint64_t v19 = v16;
      char v20 = v6;
      uint64_t v21 = v35;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v16, v20, v35);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Capsule<Image> and conformance Capsule<A>, &demangling cache variable for type metadata for Capsule<Image>);
      uint64_t v22 = (uint64_t)v15;
      Ref.subscript.getter();
      char v23 = &v15[*(int *)(v29 + 20)];
      uint64_t v25 = v30;
      int v24 = v31;
      uint64_t v26 = v32;
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v31, v23, v32);
      outlined destroy of ImageElementView.ImageOrFile(v22, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      BOOL v17 = v37 != v36;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v24, v26);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v21);
    }
  }
  else
  {
    BOOL v17 = 1;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v17;
}

void specialized ImageElementView.addImageAnalysisObserver(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + direct field offset for ImageElementView.mediaView);
  if (v3)
  {
    id v5 = v3;
    id v4 = objc_msgSend(v5, sel_imageAnalysisContext);
    if (v4)
    {
      objc_msgSend(v4, sel_addAnalysisObserver_, a1);

      swift_unknownObjectRelease();
      return;
    }
  }
  else
  {
    id v5 = ImageElementView.pendingImageAnalysisObservers.getter();
    objc_msgSend(v5, sel_addObject_, a1);
  }
}

uint64_t specialized closure #1 in AsyncCache.cached(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  *(void *)(v5 + 56) = a3;
  *(void *)(v5 + 64) = a4;
  *(void *)(v5 + 40) = a1;
  *(void *)(v5 + 48) = a2;
  *(_OWORD *)(v5 + 16) = *a5;
  return MEMORY[0x270FA2498](specialized closure #1 in AsyncCache.cached(for:), a4, 0);
}

uint64_t specialized closure #1 in AsyncCache.cached(for:)()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type AsyncCache<Data, CGImageRef> and conformance AsyncCache<A, B>, &demangling cache variable for type metadata for AsyncCache<Data, CGImageRef>);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 48);
  *(void *)(v3 + 32) = v1;
  *(void *)(v3 + 40) = v0 + 16;
  id v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGImageRef?);
  *id v4 = v0;
  v4[1] = specialized closure #1 in AsyncCache.cached(for:);
  return MEMORY[0x270FA2318](v0 + 32, v1, v2, 0x6628646568636163, 0xEC000000293A726FLL, partial apply for specialized closure #1 in closure #1 in AsyncCache.cached(for:), v3, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #1 in AsyncCache.cached(for:), v1, 0);
}

{
  uint64_t v0;

  **(void **)(v0 + 40) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized closure #2 in AsyncCache.cached(for:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a2;
  unint64_t v12 = a2[1];
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v11, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6);
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = 0;
  *((void *)v16 + 3) = 0;
  *((void *)v16 + 4) = a1;
  *((void *)v16 + 5) = v13;
  *((void *)v16 + 6) = v12;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v16[v15], (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  outlined copy of Data._Representation(v13, v12);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #2 in AsyncCache.cached(for:), (uint64_t)v16);
  return swift_release();
}

uint64_t specialized closure #1 in closure #2 in AsyncCache.cached(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a4;
  *(void *)(v6 + 24) = a6;
  *(_OWORD *)(v6 + 32) = *a5;
  return MEMORY[0x270FA2498](specialized closure #1 in closure #2 in AsyncCache.cached(for:), a4, 0);
}

uint64_t specialized closure #1 in closure #2 in AsyncCache.cached(for:)()
{
  specialized AsyncCache.cancel(for:uuid:)(v0[4], v0[5], v0[3]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t specialized static ImageElementView.ImageOrFile.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v41 = *(void *)(v4 - 8);
  uint64_t v42 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v40 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  double v39 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for CRStableAsset();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v44 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = type metadata accessor for ImageElementView.ImageOrFile(0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (void **)((char *)&v39 - v18);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ImageElementView.ImageOrFile, ImageElementView.ImageOrFile));
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v24 = (void **)&v22[*(int *)(v23 + 56)];
  outlined init with copy of ImageElementView.ImageOrFile(a1, (uint64_t)v22, type metadata accessor for ImageElementView.ImageOrFile);
  outlined init with copy of ImageElementView.ImageOrFile(a2, (uint64_t)v24, type metadata accessor for ImageElementView.ImageOrFile);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with copy of ImageElementView.ImageOrFile((uint64_t)v22, (uint64_t)v19, type metadata accessor for ImageElementView.ImageOrFile);
    uint64_t v36 = *v19;
    if (!swift_getEnumCaseMultiPayload())
    {
      uint64_t v37 = *v24;

      char v31 = v36 == v37;
      goto LABEL_12;
    }

    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with copy of ImageElementView.ImageOrFile((uint64_t)v22, (uint64_t)v16, type metadata accessor for ImageElementView.ImageOrFile);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v27 = v43;
      uint64_t v26 = v44;
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
      v28(v13, v16, v44);
      v28(v10, (char *)v24, v26);
      uint64_t v29 = v39;
      CRStableAsset.url.getter();
      uint64_t v30 = v40;
      CRStableAsset.url.getter();
      char v31 = MEMORY[0x210548C10](v29, v30);
      uint64_t v32 = *(void (**)(char *, uint64_t))(v41 + 8);
      uint64_t v33 = v30;
      uint64_t v34 = v42;
      v32(v33, v42);
      v32(v29, v34);
      uint64_t v35 = *(void (**)(char *, uint64_t))(v27 + 8);
      v35(v10, v26);
      v35(v13, v26);
LABEL_12:
      outlined destroy of ImageElementView.ImageOrFile((uint64_t)v22, type metadata accessor for ImageElementView.ImageOrFile);
      return v31 & 1;
    }
    (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v44);
    goto LABEL_10;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
LABEL_10:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for (ImageElementView.ImageOrFile, ImageElementView.ImageOrFile));
    char v31 = 0;
    return v31 & 1;
  }
  outlined destroy of ImageElementView.ImageOrFile((uint64_t)v22, type metadata accessor for ImageElementView.ImageOrFile);
  char v31 = 1;
  return v31 & 1;
}

uint64_t specialized static ImageElementView.ImageState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v100 = (char *)a2;
  uint64_t v3 = type metadata accessor for CRAsset();
  uint64_t v99 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  uint64_t v86 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v83 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TaggedValue_2<CGRect, Quad>?, TaggedValue_2<CGRect, Quad>?));
  MEMORY[0x270FA5388](v85);
  uint64_t v87 = (uint64_t)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  uint64_t v92 = *(void *)(v8 - 8);
  uint64_t v93 = v8;
  MEMORY[0x270FA5388](v8);
  long long v84 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
  MEMORY[0x270FA5388](v10);
  uint64_t v91 = (uint64_t)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v89 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v94 = (uint64_t)&v82 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v97 = (uint64_t)&v82 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v90 = (uint64_t)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v96 = (uint64_t)&v82 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v95 = (uint64_t)&v82 - v23;
  uint64_t v24 = type metadata accessor for CRAssetOrData();
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v98 = (uint64_t)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for ImageElementView.ImageState(0);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  char v31 = (char *)&v82 - v30;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ImageElementView.ImageState, ImageElementView.ImageState));
  MEMORY[0x270FA5388](v32 - 8);
  uint64_t v34 = (char *)&v82 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = (uint64_t)&v34[*(int *)(v35 + 56)];
  outlined init with copy of ImageElementView.ImageOrFile(a1, (uint64_t)v34, type metadata accessor for ImageElementView.ImageState);
  outlined init with copy of ImageElementView.ImageOrFile((uint64_t)v100, v36, type metadata accessor for ImageElementView.ImageState);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of ImageElementView.ImageOrFile((uint64_t)v34, (uint64_t)v28, type metadata accessor for ImageElementView.ImageState);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v43 = v99;
        (*(void (**)(char *, uint64_t, uint64_t))(v99 + 32))(v5, v36, v3);
        char v44 = static CRAsset.== infix(_:_:)();
        uint64_t v45 = *(void (**)(char *, uint64_t))(v43 + 8);
        v45(v5, v3);
        v45(v28, v3);
        goto LABEL_6;
      }
      (*(void (**)(char *, uint64_t))(v99 + 8))(v28, v3);
      goto LABEL_14;
    case 2u:
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_14;
      }
      goto LABEL_12;
    case 3u:
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_14;
      }
      goto LABEL_12;
    case 4u:
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_14;
      }
LABEL_12:
      outlined destroy of ImageElementView.ImageOrFile((uint64_t)v34, type metadata accessor for ImageElementView.ImageState);
      char v44 = 1;
      return v44 & 1;
    default:
      outlined init with copy of ImageElementView.ImageOrFile((uint64_t)v34, (uint64_t)v31, type metadata accessor for ImageElementView.ImageState);
      uint64_t v37 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
      uint64_t v38 = v37[12];
      double v100 = &v31[v38];
      uint64_t v39 = v37[16];
      uint64_t v40 = &v31[v39];
      uint64_t v41 = v37[20];
      uint64_t v42 = *(void *)&v31[v41];
      if (swift_getEnumCaseMultiPayload())
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v31[v39], (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v100, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        outlined destroy of ImageElementView.ImageOrFile((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
LABEL_14:
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, &demangling cache variable for type metadata for (ImageElementView.ImageState, ImageElementView.ImageState));
        goto LABEL_15;
      }
      uint64_t v99 = v42;
      uint64_t v47 = v36 + v38;
      uint64_t v48 = v36 + v39;
      uint64_t v82 = *(void *)(v36 + v41);
      uint64_t v49 = v36;
      uint64_t v50 = v98;
      outlined init with take of CRAssetOrData(v49, v98, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      uint64_t v51 = v95;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v100, v95, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      uint64_t v52 = (uint64_t)v40;
      uint64_t v53 = v97;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v52, v97, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      uint64_t v54 = v47;
      uint64_t v55 = v96;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v54, v96, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      uint64_t v56 = v48;
      uint64_t v57 = v94;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v56, v94, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      char v58 = specialized static CRAssetOrData.== infix(_:_:)((uint64_t)v31, v50);
      outlined destroy of ImageElementView.ImageOrFile((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      if ((v58 & 1) == 0)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v57, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v55, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v53, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v51, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        outlined destroy of ImageElementView.ImageOrFile(v50, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
LABEL_33:
        outlined destroy of ImageElementView.ImageOrFile((uint64_t)v34, type metadata accessor for ImageElementView.ImageState);
LABEL_15:
        char v44 = 0;
        return v44 & 1;
      }
      uint64_t v59 = v91;
      uint64_t v60 = v91 + *(int *)(v10 + 48);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v51, v91, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v55, v60, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      uint64_t v62 = v92;
      uint64_t v61 = v93;
      uint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v92 + 48);
      uint64_t v64 = v51;
      if (v63(v59, 1, v93) == 1)
      {
        int v65 = v63(v60, 1, v61);
        uint64_t v66 = v97;
        if (v65 == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
          goto LABEL_27;
        }
        goto LABEL_24;
      }
      uint64_t v67 = v90;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v59, v90, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      if (v63(v60, 1, v61) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v67, v61);
        uint64_t v66 = v97;
LABEL_24:
        outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
LABEL_25:
        outlined destroy of StocksKitCurrencyCache.Provider?(v57, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v96, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v66, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v64, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        outlined destroy of ImageElementView.ImageOrFile(v98, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
        goto LABEL_33;
      }
      uint64_t v68 = v84;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v84, v60, v61);
      lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>();
      char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v70 = *(void (**)(char *, uint64_t))(v62 + 8);
      v70(v68, v61);
      v70((char *)v67, v61);
      outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      uint64_t v66 = v97;
      if ((v69 & 1) == 0) {
        goto LABEL_25;
      }
LABEL_27:
      uint64_t v71 = v87;
      uint64_t v72 = v87 + *(int *)(v85 + 48);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v66, v87, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v57, v72, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      uint64_t v73 = v86;
      uint64_t v74 = v57;
      id v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
      uint64_t v76 = v88;
      if (v75(v71, 1, v88) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v74, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v96, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v66, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v95, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        outlined destroy of ImageElementView.ImageOrFile(v98, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
        if (v75(v72, 1, v76) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v71, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
          uint64_t v77 = v99;
          goto LABEL_35;
        }
        goto LABEL_32;
      }
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v71, (uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      unsigned int v78 = v75(v72, 1, v76);
      uint64_t v77 = v99;
      if (v78 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v94, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v96, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v66, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v95, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
        outlined destroy of ImageElementView.ImageOrFile(v98, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
        (*(void (**)(char *, uint64_t))(v73 + 8))(v89, v76);
LABEL_32:
        outlined destroy of StocksKitCurrencyCache.Provider?(v71, &demangling cache variable for type metadata for (TaggedValue_2<CGRect, Quad>?, TaggedValue_2<CGRect, Quad>?));
        goto LABEL_33;
      }
      CGRect v79 = v83;
      (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(v83, v72, v76);
      lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad> and conformance <> TaggedValue_2<A, B>();
      char v80 = dispatch thunk of static Equatable.== infix(_:_:)();
      CGRect v81 = *(void (**)(char *, uint64_t))(v73 + 8);
      v81(v79, v76);
      outlined destroy of StocksKitCurrencyCache.Provider?(v94, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v96, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v66, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v95, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      outlined destroy of ImageElementView.ImageOrFile(v98, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      v81(v89, v76);
      outlined destroy of StocksKitCurrencyCache.Provider?(v71, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      if ((v80 & 1) == 0) {
        goto LABEL_33;
      }
LABEL_35:
      char v44 = v77 == v82;
LABEL_6:
      outlined destroy of ImageElementView.ImageOrFile((uint64_t)v34, type metadata accessor for ImageElementView.ImageState);
      return v44 & 1;
  }
}

uint64_t outlined init with copy of ImageElementView.ImageOrFile(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_20C6BB664()
{
  return 24;
}

__n128 sub_20C6BB670(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in ContainerCanvasElementView.drawingDidChange(newDrawing:)()
{
  return specialized closure #1 in ContainerCanvasElementView.drawingDidChange(newDrawing:)();
}

uint64_t sub_20C6BB6A8()
{
  return 24;
}

__n128 sub_20C6BB6B4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t outlined assign with take of ImageElementView.ImageState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ImageElementView.ImageState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C6BB72C()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C6BB764()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?)
                 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  uint64_t v9 = v0 + v3;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v0 + v7, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0 + v7, v12);
  }
  swift_release();
  return MEMORY[0x270FA0238](v0, ((((v8 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | v6 | 7);
}

uint64_t partial apply for closure #1 in ImageElementView.updateUI()(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?)
                 - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = v1[5];
  uint64_t v14 = (uint64_t)v1 + v9;
  uint64_t v15 = *(void *)((char *)v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v16;
  *uint64_t v16 = v3;
  v16[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ImageElementView.updateUI()(a1, v10, v11, v12, v13, (uint64_t)v1 + v6, v14, v15);
}

uint64_t sub_20C6BBB6C()
{
  uint64_t v1 = *(void *)(type metadata accessor for ImageElementView.ImageState(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(type metadata accessor for CRAssetOrData() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6;
  unint64_t v8 = (*(void *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?)
                 - 8);
  uint64_t v35 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v37 = (v8 + v35 + 9) & ~v35;
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?)
                  - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v36 = v10 + v12;
  uint64_t v34 = *(void *)(v11 + 64);
  swift_unknownObjectRelease();
  uint64_t v13 = v0 + v3;
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v15 = type metadata accessor for CRAsset();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v13, v15);
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v32 = v6;
    uint64_t v33 = v2;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined consume of Data._Representation(*(void *)v13, *(void *)(v13 + 8));
      outlined consume of Data._Representation(*(void *)(v13 + 16), *(void *)(v13 + 24));
    }
    else
    {
      uint64_t v16 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v13, v16);
    }
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (asset: CRAssetOrData, filter: TaggedValue_1<CRExtensible<BasicImageFilter>>?, crop: TaggedValue_2<CGRect, Quad>?, maxDimensionInPixels: Int));
    uint64_t v18 = v13 + *(int *)(v17 + 48);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    uint64_t v20 = *(void *)(v19 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    }
    uint64_t v21 = v13 + *(int *)(v17 + 64);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v6 = v32;
    uint64_t v2 = v33;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22)) {
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
  }
  swift_release();
  uint64_t v24 = v0 + v7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(void *)v24, *(void *)(v24 + 8));
    outlined consume of Data._Representation(*(void *)(v24 + 16), *(void *)(v24 + 24));
  }
  else
  {
    uint64_t v25 = type metadata accessor for CRAsset();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v0 + v7, v25);
  }
  uint64_t v26 = (v37 + v36) & ~v12;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  uint64_t v28 = *(void *)(v27 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v0 + v37, 1, v27)) {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v0 + v37, v27);
  }
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  uint64_t v30 = *(void *)(v29 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v0 + v26, 1, v29)) {
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v0 + v26, v29);
  }
  return MEMORY[0x270FA0238](v0, v26 + v34, v2 | v6 | v35 | v12 | 7);
}

uint64_t outlined init with take of CRAssetOrData(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for specialized closure #2 in ImageElementView.updateUI()(uint64_t a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for ImageElementView.ImageState(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for CRAssetOrData() - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = *(void *)(v1 + v4);
  uint64_t v12 = *(void *)(v1 + v5);
  uint64_t v13 = *(void *)(v1 + v8);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v16 + 16) = v14;
  *uint64_t v14 = v16;
  v14[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return specialized closure #2 in ImageElementView.updateUI()(a1, v9, v10, v1 + v3, v11, v12, v1 + v7, v13);
}

CGImageRef _s8PaperKit5ImageV13filterAndCrop_0D04crop5queueSo10CGImageRefaAI_9Coherence13TaggedValue_1VyAJ12CRExtensibleOyAA05BasicC6FilterOGGSgAJ0lM2_2VySo6CGRectVAA4QuadVAwJ7CRValueAAyHCg_GSgSo012OS_dispatch_H0CSgtFZAIyXEfU_TA_0@<X0>(CGImageRef *a1@<X8>)
{
  return closure #1 in static Image.filterAndCrop(_:filter:crop:queue:)(*(CGImage **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t partial apply for specialized closure #1 in AsyncCache.cached(for:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = (_OWORD *)v1[5];
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *unint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&async function pointer to specialized closure #1 in AsyncCache.cached(for:)
                                                                            + async function pointer to specialized closure #1 in AsyncCache.cached(for:));
  return v9(a1, v4, v5, v7, v6);
}

uint64_t partial apply for specialized closure #2 in AsyncCache.cached(for:)()
{
  return specialized closure #2 in AsyncCache.cached(for:)(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_20C6BC4D0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + 40), *(void *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for specialized closure #1 in closure #2 in AsyncCache.cached(for:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  unint64_t v8 = v1 + 5;
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))((char *)&async function pointer to specialized closure #1 in closure #2 in AsyncCache.cached(for:)
                                                                                      + async function pointer to specialized closure #1 in closure #2 in AsyncCache.cached(for:));
  return v11(a1, v5, v6, v7, v8, v9);
}

uint64_t partial apply for specialized closure #1 in closure #1 in AsyncCache.cached(for:)(uint64_t a1)
{
  return specialized closure #1 in closure #1 in AsyncCache.cached(for:)(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), **(void **)(v1 + 40), *(void *)(*(void *)(v1 + 40) + 8));
}

uint64_t outlined consume of AsyncCache<Data, CGImageRef>.CacheState?(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined consume of AsyncCache<Data, CGImageRef>.CacheState(result, a2, a3 & 1);
  }
  return result;
}

void partial apply for closure #1 in ImageElementView.didZoom(in:)()
{
  closure #1 in ImageElementView.didZoom(in:)(v0);
}

uint64_t block_copy_helper_53(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_53()
{
  return swift_release();
}

uint64_t sub_20C6BC70C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in ContainerCanvasElementView.transformDrawing()(char a1)
{
  closure #1 in ContainerCanvasElementView.transformDrawing()(a1, *(void **)(v1 + 16));
}

uint64_t sub_20C6BC754()
{
  return 24;
}

__n128 sub_20C6BC760(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C6BC77C()
{
  return 24;
}

__n128 sub_20C6BC788(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C6BC79C()
{
  uint64_t v1 = *(void *)(type metadata accessor for ImageElementView.ImageOrFile(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);

  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = type metadata accessor for CRStableAsset();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  }
  else if (!EnumCaseMultiPayload)
  {
  }
  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in ImageElementView.setImage(_:canAnimate:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for ImageElementView.ImageOrFile(0) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return perform #1 () in ImageElementView.setImage(_:canAnimate:)(v2, v3);
}

uint64_t outlined assign with copy of ImageElementView.ImageOrFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ImageElementView.ImageOrFile(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void *specialized ImageElementView.init(canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3)
{
  id v32 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v33 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v3[direct field offset for ImageElementView.mediaView] = 0;
  *(void *)&v3[direct field offset for ImageElementView.missingImageView] = 0;
  *(void *)&v3[direct field offset for ImageElementView.getImageTask] = 0;
  *(void *)&v3[direct field offset for ImageElementView.getThumbnailTask] = 0;
  *(void *)&v3[direct field offset for ImageElementView.imageGetCounter] = 0;
  *(void *)&v3[direct field offset for ImageElementView.imageSetCounter] = 0;
  *(void *)&v3[direct field offset for ImageElementView.updateAfterZoomWorkItem] = 0;
  *(_OWORD *)&v3[direct field offset for ImageElementView.thumbnailCacheDigest] = xmmword_20C8352B0;
  type metadata accessor for ImageElementView.ImageState(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v3[direct field offset for ImageElementView.isImageAnalysisEnabled] = 0;
  type metadata accessor for ImageElementView.ImageOrFile(0);
  swift_storeEnumTagMultiPayload();
  swift_unknownObjectWeakInit();
  *(void *)&v3[direct field offset for ImageElementView.$__lazy_storage_$_pendingImageAnalysisObservers] = 0;
  swift_getKeyPath();
  lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  uint64_t v12 = v3;
  Capsule<>.subscript.getter();
  swift_release();
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_initWithFrame_, v36, v37, v38, v39);
  *(void *)&v12[direct field offset for ImageElementView.contentView] = v13;
  id v14 = v13;
  objc_msgSend(v14, sel_setContentMode_, 2);

  uint64_t v34 = v9;
  uint64_t v35 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  id v15 = a3;
  id v16 = v32;
  id v17 = v32;
  uint64_t v18 = specialized ContainerCanvasElementView.init(canvasElement:canvas:parentCanvasElement:)((uint64_t)v11, v16, a3);

  uint64_t v19 = direct field offset for ImageElementView.contentView;
  uint64_t v20 = *(void *)((char *)v18 + direct field offset for ImageElementView.contentView);
  uint64_t v21 = v18;
  objc_msgSend(v21, sel_insertSubview_atIndex_, v20, 0);
  objc_msgSend(*(id *)((char *)v18 + v19), sel_setClipsToBounds_, 1);
  if (a3)
  {
    id v22 = objc_msgSend(*(id *)((char *)v18 + v19), sel_layer);
    if (one-time initialization token for imageCornerRadius != -1) {
      swift_once();
    }
    objc_msgSend(v22, sel_setCornerRadius_, *(double *)&static UIConstants.imageCornerRadius, v32);
  }
  uint64_t v23 = v21;
  uint64_t v24 = (void *)MEMORY[0x21054D080](0xD000000000000026, 0x800000020C85D0A0);
  objc_msgSend(v23, sel_setAccessibilityIdentifier_, v24);

  uint64_t v25 = type metadata accessor for TaskPriority();
  uint64_t v26 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v33, 1, 1, v25);
  uint64_t v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v28 = static MainActor.shared.getter();
  uint64_t v29 = (void *)swift_allocObject();
  uint64_t v30 = MEMORY[0x263F8F500];
  void v29[2] = v28;
  v29[3] = v30;
  v29[4] = v27;
  swift_release();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v26, (uint64_t)&async function pointer to partial apply for closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:), (uint64_t)v29);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v8);
  return v23;
}

void specialized ImageElementView.init(coder:)()
{
  *(void *)&v0[direct field offset for ImageElementView.mediaView] = 0;
  *(void *)&v0[direct field offset for ImageElementView.missingImageView] = 0;
  *(void *)&v0[direct field offset for ImageElementView.getImageTask] = 0;
  *(void *)&v0[direct field offset for ImageElementView.getThumbnailTask] = 0;
  *(void *)&v0[direct field offset for ImageElementView.imageGetCounter] = 0;
  *(void *)&v0[direct field offset for ImageElementView.imageSetCounter] = 0;
  *(void *)&v0[direct field offset for ImageElementView.updateAfterZoomWorkItem] = 0;
  *(_OWORD *)&v0[direct field offset for ImageElementView.thumbnailCacheDigest] = xmmword_20C8352B0;
  type metadata accessor for ImageElementView.ImageState(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v0[direct field offset for ImageElementView.isImageAnalysisEnabled] = 0;
  type metadata accessor for ImageElementView.ImageOrFile(0);
  swift_storeEnumTagMultiPayload();
  swift_unknownObjectWeakInit();
  *(void *)&v0[direct field offset for ImageElementView.$__lazy_storage_$_pendingImageAnalysisObservers] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_20C6BD000()
{
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ImageElementView.deinit()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  v4[5] = v2;
  v4[6] = v3;
  return MEMORY[0x270FA2498](closure #1 in ImageElementView.deinit, 0, 0);
}

uint64_t outlined assign with copy of Capsule<Image>?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_20C6BD198()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ImageElementView.init(canvasElement:canvas:parentCanvasElement:)(a1, v4, v5, v6);
}

CGImageRef closure #1 in static Image.filterAndCrop(_:filter:crop:queue:)partial apply@<X0>(CGImageRef *a1@<X8>)
{
  return _s8PaperKit5ImageV13filterAndCrop_0D04crop5queueSo10CGImageRefaAI_9Coherence13TaggedValue_1VyAJ12CRExtensibleOyAA05BasicC6FilterOGGSgAJ0lM2_2VySo6CGRectVAA4QuadVAwJ7CRValueAAyHCg_GSgSo012OS_dispatch_H0CSgtFZAIyXEfU_TA_0(a1);
}

uint64_t thunk for @escaping @callee_unowned @convention(block) () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

Swift::Void __swiftcall ImageWandTipController.userDidUseImageWand()()
{
  uint64_t v0 = type metadata accessor for Tips.InvalidationReason();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for imageWandTipController != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.imageWandTipController);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_20C2D7000, v5, v6, "invalidate tip; action performed", v7, 2u);
    MEMORY[0x210550270](v7, -1, -1);
  }

  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F1C018], v0);
  lazy protocol witness table accessor for type ImageWandTip and conformance ImageWandTip();
  Tip.invalidate(reason:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t one-time initialization function for imageWandTipController()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.imageWandTipController);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.imageWandTipController);
  return Logger.init(subsystem:category:)();
}

uint64_t ImageWandTipController.tipStatusIsPending.getter(unsigned int *a1)
{
  uint64_t v3 = type metadata accessor for Tips.Status();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  os_log_type_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Tips.Status?, Tips.Status?));
  uint64_t v8 = v7 - 8;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Status?);
  MEMORY[0x270FA5388](v11 - 8);
  id v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  id v16 = (char *)&v24 - v15;
  uint64_t v17 = v1 + OBJC_IVAR____TtC8PaperKit22ImageWandTipController_lastTipStatus;
  swift_beginAccess();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v16, *a1, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v16, 0, 1, v3);
  uint64_t v18 = (uint64_t)&v10[*(int *)(v8 + 56)];
  outlined init with copy of Tips.Status?(v17, (uint64_t)v10);
  outlined init with copy of Tips.Status?((uint64_t)v16, v18);
  uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v10, 1, v3) == 1)
  {
    uint64_t v20 = &demangling cache variable for type metadata for Tips.Status?;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Tips.Status?);
    if (v19(v18, 1, v3) == 1)
    {
      char v21 = -1;
    }
    else
    {
      uint64_t v20 = &demangling cache variable for type metadata for (Tips.Status?, Tips.Status?);
      char v21 = 0;
    }
  }
  else
  {
    outlined init with copy of Tips.Status?((uint64_t)v10, (uint64_t)v13);
    if (v19(v18, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Tips.Status?);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
      char v21 = 0;
      uint64_t v20 = &demangling cache variable for type metadata for (Tips.Status?, Tips.Status?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v6, v18, v3);
      lazy protocol witness table accessor for type Tips.Status and conformance Tips.Status();
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v22 = *(void (**)(char *, uint64_t))(v4 + 8);
      v22(v6, v3);
      uint64_t v20 = &demangling cache variable for type metadata for Tips.Status?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Tips.Status?);
      v22(v13, v3);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, v20);
  return v21 & 1;
}

id ImageWandTipController.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit22ImageWandTipController_tipObservationTask] = 0;
  uint64_t v5 = &v0[OBJC_IVAR____TtC8PaperKit22ImageWandTipController_lastTipStatus];
  uint64_t v6 = type metadata accessor for Tips.Status();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v14.receiver = v0;
  v14.super_class = ObjectType;
  id v7 = objc_msgSendSuper2(&v14, sel_init);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 1, 1, v8);
  type metadata accessor for MainActor();
  id v9 = v7;
  uint64_t v10 = static MainActor.shared.getter();
  uint64_t v11 = (void *)swift_allocObject();
  uint64_t v12 = MEMORY[0x263F8F500];
  v11[2] = v10;
  v11[3] = v12;
  v11[4] = v9;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in ImageWandTipController.init(), (uint64_t)v11);
  swift_release();

  return v9;
}

uint64_t closure #1 in ImageWandTipController.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a4;
  v4[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Tips.Status?, Tips.Status?));
  v4[10] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Tips.Status();
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Status?);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  v4[20] = v6;
  v4[21] = *(void *)(v6 - 8);
  v4[22] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  v4[23] = v7;
  v4[24] = *(void *)(v7 - 8);
  v4[25] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Tips.ConfigurationOption.DatastoreLocation();
  v4[26] = v8;
  v4[27] = *(void *)(v8 - 8);
  v4[28] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Tips.ConfigurationOption.DisplayFrequency();
  v4[29] = v9;
  v4[30] = *(void *)(v9 - 8);
  v4[31] = swift_task_alloc();
  v4[32] = type metadata accessor for MainActor();
  v4[33] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[34] = v11;
  v4[35] = v10;
  return MEMORY[0x270FA2498](closure #1 in ImageWandTipController.init(), v11, v10);
}

uint64_t closure #1 in ImageWandTipController.init()()
{
  if (os_variant_has_internal_ui())
  {
    id v1 = objc_msgSend(self, sel_standardUserDefaults);
    uint64_t v2 = (void *)MEMORY[0x21054D080](0xD000000000000018, 0x800000020C85D250);
    unsigned int v3 = objc_msgSend(v1, sel_BOOLForKey_, v2);

    if (v3)
    {
      if (one-time initialization token for imageWandTipController != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)static Logger.imageWandTipController);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl(&dword_20C2D7000, v5, v6, "should force show image wand tip", v7, 2u);
        MEMORY[0x210550270](v7, -1, -1);
      }

      static Tips.resetDatastore()();
      unsigned int v3 = 1;
    }
  }
  else
  {
    unsigned int v3 = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.ConfigurationOption>);
  type metadata accessor for Tips.ConfigurationOption();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_20C835740;
  if (v3) {
    static Tips.ConfigurationOption.DisplayFrequency.immediate.getter();
  }
  else {
    static Tips.ConfigurationOption.DisplayFrequency.system.getter();
  }
  uint64_t v9 = v0[30];
  uint64_t v8 = v0[31];
  uint64_t v11 = v0[28];
  uint64_t v10 = v0[29];
  uint64_t v12 = v0[26];
  uint64_t v13 = v0[27];
  static Tips.ConfigurationOption.displayFrequency(_:)();
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  MEMORY[0x210549970](v14);
  static Tips.ConfigurationOption.datastoreLocation(_:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  static Tips.configure(_:)();
  uint64_t v16 = v0[21];
  uint64_t v15 = v0[22];
  uint64_t v17 = v0[20];
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type ImageWandTip and conformance ImageWandTip();
  Tip.statusUpdates.getter();
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  uint64_t v18 = OBJC_IVAR____TtC8PaperKit22ImageWandTipController_delegate;
  v0[36] = OBJC_IVAR____TtC8PaperKit22ImageWandTipController_lastTipStatus;
  v0[37] = v18;
  swift_beginAccess();
  uint64_t v19 = static MainActor.shared.getter();
  v0[38] = v19;
  uint64_t v20 = (void *)swift_task_alloc();
  v0[39] = v20;
  *uint64_t v20 = v0;
  v20[1] = closure #1 in ImageWandTipController.init();
  uint64_t v21 = v0[23];
  uint64_t v22 = v0[19];
  uint64_t v23 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA1F68](v22, v19, v23, v21);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  id v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 280);
  unsigned int v3 = *(void *)(v1 + 272);
  return MEMORY[0x270FA2498](closure #1 in ImageWandTipController.init(), v3, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  void *v57;
  uint64_t v58;

  uint64_t v57 = v0;
  id v1 = v0[19];
  uint64_t v2 = v0[11];
  unsigned int v3 = (void *)v0[12];
  uint64_t v4 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v3[6];
  if (v4(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  uint64_t v7 = v0[18];
  uint64_t v8 = v0[15];
  uint64_t v9 = v0[10];
  uint64_t v52 = v0[36];
  uint64_t v53 = v0[9];
  uint64_t v10 = v0[8];
  uint64_t v51 = (void (*)(uint64_t, uint64_t, uint64_t))v3[4];
  v51(v8, v1, v2);
  uint64_t v55 = (void (*)(uint64_t, uint64_t, uint64_t))v3[2];
  v55(v7, v8, v2);
  uint64_t v11 = v10 + v52;
  uint64_t v12 = (void (*)(uint64_t, void, uint64_t, uint64_t))v3[7];
  v12(v7, 0, 1, v2);
  uint64_t v13 = v9 + *(int *)(v53 + 48);
  outlined init with copy of Tips.Status?(v11, v9);
  outlined init with copy of Tips.Status?(v7, v13);
  if (v4(v9, 1, v2) != 1)
  {
    uint64_t v16 = v0[11];
    outlined init with copy of Tips.Status?(v0[10], v0[17]);
    uint64_t v17 = v4(v13, 1, v16);
    uint64_t v18 = v0[17];
    uint64_t v19 = v0[18];
    if (v17 != 1)
    {
      uint64_t v42 = v0[14];
      uint64_t v43 = v0[11];
      char v44 = v0[12];
      uint64_t v54 = v0[10];
      v51(v42, v13, v43);
      lazy protocol witness table accessor for type Tips.Status and conformance Tips.Status();
      uint64_t v45 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v40(v42, v43);
      outlined destroy of StocksKitCurrencyCache.Provider?(v19, &demangling cache variable for type metadata for Tips.Status?);
      v40(v18, v43);
      outlined destroy of StocksKitCurrencyCache.Provider?(v54, &demangling cache variable for type metadata for Tips.Status?);
      uint64_t v22 = v55;
      if (v45)
      {
LABEL_19:
        v40(v0[15], v0[11]);
        goto LABEL_20;
      }
LABEL_11:
      uint64_t v23 = v0[16];
      uint64_t v24 = v0[11];
      uint64_t v25 = v0[8] + v0[36];
      v22(v23, v0[15], v24);
      v12(v23, 0, 1, v24);
      swift_beginAccess();
      outlined assign with take of Tips.Status?(v23, v25);
      swift_endAccess();
      if (one-time initialization token for imageWandTipController != -1) {
        swift_once();
      }
      uint64_t v26 = v0[15];
      uint64_t v27 = v0[13];
      uint64_t v28 = v0[11];
      uint64_t v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.imageWandTipController);
      v22(v27, v26, v28);
      uint64_t v30 = Logger.logObject.getter();
      char v31 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v33 = v0[13];
        id v32 = v0[14];
        uint64_t v34 = v0[11];
        uint64_t v35 = v0[12];
        double v36 = swift_slowAlloc();
        double v37 = swift_slowAlloc();
        uint64_t v56 = v37;
        *(_DWORD *)double v36 = 136315138;
        v55(v32, v33, v34);
        double v38 = String.init<A>(describing:)();
        *(void *)(v36 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v56);
        swift_bridgeObjectRelease();
        uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
        v40(v33, v34);
        _os_log_impl(&dword_20C2D7000, v30, v31, "tip status did update: %s", (uint8_t *)v36, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x210550270](v37, -1, -1);
        MEMORY[0x210550270](v36, -1, -1);
      }
      else
      {
        uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v0[12] + 8);
        v40(v0[13], v0[11]);
      }

      uint64_t v41 = (void *)MEMORY[0x210550400](v0[8] + v0[37]);
      if (v41)
      {
        objc_msgSend(v41, sel_imageWandTipControllerTipStatusDidUpdate_, v0[8]);
        swift_unknownObjectRelease();
      }
      goto LABEL_19;
    }
    uint64_t v20 = v0[11];
    uint64_t v21 = v0[12];
    outlined destroy of StocksKitCurrencyCache.Provider?(v0[18], &demangling cache variable for type metadata for Tips.Status?);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v18, v20);
LABEL_10:
    outlined destroy of StocksKitCurrencyCache.Provider?(v0[10], &demangling cache variable for type metadata for (Tips.Status?, Tips.Status?));
    uint64_t v22 = v55;
    goto LABEL_11;
  }
  uint64_t v14 = v0[11];
  outlined destroy of StocksKitCurrencyCache.Provider?(v0[18], &demangling cache variable for type metadata for Tips.Status?);
  if (v4(v13, 1, v14) != 1) {
    goto LABEL_10;
  }
  uint64_t v15 = v0[12];
  outlined destroy of StocksKitCurrencyCache.Provider?(v0[10], &demangling cache variable for type metadata for Tips.Status?);
  (*(void (**)(void, void))(v15 + 8))(v0[15], v0[11]);
LABEL_20:
  BOOL v46 = static MainActor.shared.getter();
  v0[38] = v46;
  uint64_t v47 = (void *)swift_task_alloc();
  v0[39] = v47;
  *uint64_t v47 = v0;
  v47[1] = closure #1 in ImageWandTipController.init();
  uint64_t v48 = v0[23];
  uint64_t v49 = v0[19];
  uint64_t v50 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA1F68](v49, v46, v50, v48);
}

uint64_t ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, int a6)
{
  uint64_t v7 = v6;
  int v27 = a6;
  uint64_t v26 = a4;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = OBJC_IVAR____TtC8PaperKit22ImageWandTipController_tipObservationTask;
  if (*(void *)&v7[OBJC_IVAR____TtC8PaperKit22ImageWandTipController_tipObservationTask])
  {
    uint64_t v16 = swift_retain();
    MEMORY[0x21054D560](v16, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
    swift_release();
  }
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v14, 1, 1, v17);
  type metadata accessor for MainActor();
  id v18 = a5;
  id v19 = a1;
  uint64_t v20 = v7;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = static MainActor.shared.getter();
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = MEMORY[0x263F8F500];
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = v23;
  *(void *)(v22 + 32) = v20;
  *(void *)(v22 + 40) = a2;
  uint64_t v24 = v26;
  *(void *)(v22 + 48) = a3;
  *(void *)(v22 + 56) = v24;
  *(void *)(v22 + 64) = a5;
  *(void *)(v22 + 72) = v19;
  *(unsigned char *)(v22 + 80) = v27 & 1;
  *(void *)&v7[v15] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:), v22);
  return swift_release();
}

uint64_t closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 409) = v17;
  *(void *)(v8 + 168) = a8;
  *(void *)(v8 + 176) = v16;
  *(void *)(v8 + 152) = a6;
  *(void *)(v8 + 160) = a7;
  *(void *)(v8 + 136) = a4;
  *(void *)(v8 + 144) = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Status?);
  *(void *)(v8 + 184) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Tips.Status();
  *(void *)(v8 + 192) = v9;
  *(void *)(v8 + 200) = *(void *)(v9 - 8);
  *(void *)(v8 + 208) = swift_task_alloc();
  *(void *)(v8 + 216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  *(void *)(v8 + 224) = swift_task_alloc();
  *(void *)(v8 + 232) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  *(void *)(v8 + 240) = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>);
  *(void *)(v8 + 248) = v10;
  *(void *)(v8 + 256) = *(void *)(v10 - 8);
  *(void *)(v8 + 264) = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>.Iterator);
  *(void *)(v8 + 272) = v11;
  *(void *)(v8 + 280) = *(void *)(v11 - 8);
  *(void *)(v8 + 288) = swift_task_alloc();
  *(void *)(v8 + 296) = swift_task_alloc();
  *(void *)(v8 + 304) = type metadata accessor for MainActor();
  *(void *)(v8 + 312) = static MainActor.shared.getter();
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v8 + 320) = v13;
  *(void *)(v8 + 328) = v12;
  return MEMORY[0x270FA2498](closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:), v13, v12);
}

uint64_t closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:)()
{
  uint64_t v2 = v0[32];
  uint64_t v1 = v0[33];
  uint64_t v3 = v0[31];
  v0[42] = lazy protocol witness table accessor for type ImageWandTip and conformance ImageWandTip();
  Tip.shouldDisplayUpdates.getter();
  MEMORY[0x21054E1A0](v3);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type AsyncStream<Tips.Status> and conformance AsyncStream<A>, &demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.Iterator.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncMapSequence.Iterator.init(_:transform:)();
  v0[43] = OBJC_IVAR____TtC8PaperKit22ImageWandTipController_tipPopoverViewController;
  uint64_t v4 = static MainActor.shared.getter();
  v0[44] = v4;
  if (v4)
  {
    swift_getObjectType();
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  v0[45] = v5;
  v0[46] = v7;
  return MEMORY[0x270FA2498](closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:), v5, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = v0[44];
  v0[47] = AsyncMapSequence.Iterator.baseIterator.modify();
  uint64_t v2 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type AsyncStream<Tips.Status>.Iterator and conformance AsyncStream<A>.Iterator, &demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[48] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:);
  uint64_t v5 = v0[29];
  uint64_t v6 = v0[23];
  uint64_t v7 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA1E88](v6, v1, v7, v3, v5, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 360);
    uint64_t v4 = *(void *)(v2 + 368);
    uint64_t v5 = closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:);
  }
  else
  {
    (*(void (**)(void))(v2 + 376))();
    uint64_t v3 = *(void *)(v2 + 360);
    uint64_t v4 = *(void *)(v2 + 368);
    uint64_t v5 = closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int *v15;
  uint64_t v16;

  uint64_t v1 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[23];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v3, &demangling cache variable for type metadata for Tips.Status?);
    swift_release();
    uint64_t v4 = v0[40];
    uint64_t v5 = v0[41];
    return MEMORY[0x270FA2498](closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:), v4, v5);
  }
  else
  {
    uint64_t v7 = v0[36];
    uint64_t v6 = v0[37];
    uint64_t v8 = v0[34];
    uint64_t v9 = v0[35];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[26], v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v6, v8);
    uint64_t v10 = (int *)AsyncMapSequence.Iterator.transform.getter();
    v0[49] = v11;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    uint64_t v15 = (int *)((char *)v10 + *v10);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[50] = v12;
    char *v12 = v0;
    v12[1] = closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:);
    uint64_t v13 = v0[26];
    return ((uint64_t (*)(void *, uint64_t))v15)(v0 + 51, v13);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 376))();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 208);
  uint64_t v3 = *(void *)(*v0 + 200);
  uint64_t v4 = *(void *)(*v0 + 192);
  swift_task_dealloc();
  swift_release();
  *(unsigned char *)(v1 + 410) = *(unsigned char *)(v1 + 408);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v1 + 368);
  uint64_t v6 = *(void *)(v1 + 360);
  return MEMORY[0x270FA2498](closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:), v6, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 328);
  return MEMORY[0x270FA2498](closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:), v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Class isa;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  if (*(unsigned char *)(v0 + 410))
  {
    if (one-time initialization token for imageWandTipController != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.imageWandTipController);
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_20C2D7000, v2, v3, "show tip", v4, 2u);
      MEMORY[0x210550270](v4, -1, -1);
    }
    uint64_t v5 = *(void *)(v0 + 336);

    type metadata accessor for TipUIPopoverViewController();
    *(void *)(v0 + 88) = &type metadata for ImageWandTip;
    *(void *)(v0 + 96) = v5;
    swift_unknownObjectRetain();
    uint64_t v6 = (void *)TipUIPopoverViewController.__allocating_init(_:sourceItem:actionHandler:)();
    uint64_t v7 = TipUIPopoverViewController.popoverPresentationController.getter();
    if (v7)
    {
      uint64_t v8 = (void *)v7;
      isdouble a = *(Class *)(v0 + 152);
      if (isa)
      {
        type metadata accessor for UIView();
        isdouble a = Array._bridgeToObjectiveC()().super.isa;
      }
      objc_msgSend(v8, sel_setPassthroughViews_, isa);
    }
    uint64_t v10 = *(void *)(v0 + 160);
    uint64_t v11 = (void *)TipUIPopoverViewController.popoverPresentationController.getter();
    objc_msgSend(v11, sel_setPermittedArrowDirections_, v10);

    uint64_t v12 = (uint64_t (*)())objc_msgSend(v6, sel_view);
    if (!v12)
    {
      __break(1u);
      return MEMORY[0x270FA2498](v12, v13, v14);
    }
    uint64_t v15 = v12;
    uint64_t v16 = *(unsigned __int8 *)(v0 + 409);
    char v17 = *(void **)(v0 + 176);
    objc_msgSend(v12, sel_setTintColor_, *(void *)(v0 + 168));

    objc_msgSend(v17, sel_presentViewController_animated_completion_, v6, v16, 0);
    swift_unknownObjectWeakAssign();
  }
  else
  {
    id v18 = (void *)MEMORY[0x210550400](*(void *)(v0 + 136) + *(void *)(v0 + 344));
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = objc_msgSend(v18, sel_presentationController);

      if (v20 && (objc_msgSend(v19, sel_isBeingDismissed) & 1) == 0)
      {
        if (one-time initialization token for imageWandTipController != -1) {
          swift_once();
        }
        uint64_t v21 = type metadata accessor for Logger();
        __swift_project_value_buffer(v21, (uint64_t)static Logger.imageWandTipController);
        uint64_t v22 = Logger.logObject.getter();
        uint64_t v23 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v24 = 0;
          _os_log_impl(&dword_20C2D7000, v22, v23, "dismiss tip", v24, 2u);
          MEMORY[0x210550270](v24, -1, -1);
        }

        uint64_t v25 = objc_msgSend(v19, sel_presentationController);
        if (v25)
        {
          uint64_t v26 = v25;
          int v27 = objc_msgSend(v25, sel_presentingViewController);

          uint64_t v28 = swift_allocObject();
          *(void *)(v28 + 16) = 0;
          *(void *)(v28 + 24) = 0;
          *(void *)(v0 + 48) = partial apply for closure #1 in ImageWandTipController.hideTip(animated:completion:);
          *(void *)(v0 + 56) = v28;
          *(void *)(v0 + 16) = MEMORY[0x263EF8330];
          *(void *)(v0 + 24) = 1107296256;
          *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          *(void *)(v0 + 40) = &block_descriptor_22_1;
          uint64_t v29 = _Block_copy((const void *)(v0 + 16));
          swift_release();
          objc_msgSend(v27, sel_dismissViewControllerAnimated_completion_, 1, v29);

          _Block_release(v29);
          id v19 = v27;
        }

        swift_unknownObjectWeakAssign();
      }
      else
      {
      }
    }
  }
  uint64_t v30 = static MainActor.shared.getter();
  *(void *)(v0 + 352) = v30;
  if (v30)
  {
    swift_getObjectType();
    char v31 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v14 = v32;
  }
  else
  {
    char v31 = 0;
    uint64_t v14 = 0;
  }
  *(void *)(v0 + 360) = v31;
  *(void *)(v0 + 368) = v14;
  uint64_t v12 = closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:);
  uint64_t v13 = v31;
  return MEMORY[0x270FA2498](v12, v13, v14);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[35] + 8))(v0[37], v0[34]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void ImageWandTipController.dismissTip(animated:completion:)(char a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v7 = (void *)MEMORY[0x210550400](v3 + OBJC_IVAR____TtC8PaperKit22ImageWandTipController_tipPopoverViewController);
  if (!v7) {
    goto LABEL_5;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel_presentationController);

  if (!v9 || (objc_msgSend(v8, sel_isBeingDismissed) & 1) != 0)
  {

LABEL_5:
    if (a2) {
      a2();
    }
    return;
  }
  if (one-time initialization token for imageWandTipController != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.imageWandTipController);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_20C2D7000, v11, v12, "dismiss tip", v13, 2u);
    MEMORY[0x210550270](v13, -1, -1);
  }

  id v14 = objc_msgSend(v8, sel_presentationController);
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = objc_msgSend(v14, sel_presentingViewController);

    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = a2;
    *(void *)(v17 + 24) = a3;
    v19[4] = partial apply for closure #1 in ImageWandTipController.hideTip(animated:completion:);
    v19[5] = v17;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 1107296256;
    v19[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v19[3] = &block_descriptor_54;
    id v18 = _Block_copy(v19);
    outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?((uint64_t)a2);
    swift_release();
    objc_msgSend(v16, sel_dismissViewControllerAnimated_completion_, a1 & 1, v18);

    _Block_release(v18);
  }
  else
  {
  }
  swift_unknownObjectWeakAssign();
}

uint64_t ImageWandTipController.hideTip(animated:completion:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit22ImageWandTipController_tipObservationTask;
  if (*(void *)(v3 + OBJC_IVAR____TtC8PaperKit22ImageWandTipController_tipObservationTask))
  {
    uint64_t v5 = v3;
    char v8 = result;
    if (one-time initialization token for imageWandTipController != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.imageWandTipController);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v12 = 0;
      _os_log_impl(&dword_20C2D7000, v10, v11, "hide tip", v12, 2u);
      MEMORY[0x210550270](v12, -1, -1);
    }

    if (*(void *)(v5 + v4))
    {
      uint64_t v13 = swift_retain();
      MEMORY[0x21054D560](v13, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
      swift_release();
    }
    *(void *)(v5 + v4) = 0;
    swift_release();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a2;
    *(void *)(v14 + 24) = a3;
    outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(a2);
    ImageWandTipController.dismissTip(animated:completion:)(v8 & 1, (void (*)(void))partial apply for closure #1 in ImageWandTipController.hideTip(animated:completion:), v14);
    return swift_release();
  }
  return result;
}

uint64_t ObjC metadata update function for ImageWandTipController()
{
  return type metadata accessor for ImageWandTipController();
}

uint64_t type metadata accessor for ImageWandTipController()
{
  uint64_t result = type metadata singleton initialization cache for ImageWandTipController;
  if (!type metadata singleton initialization cache for ImageWandTipController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for ImageWandTipController()
{
  type metadata accessor for Tips.Status?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for Tips.Status?()
{
  if (!lazy cache variable for type metadata for Tips.Status?)
  {
    type metadata accessor for Tips.Status();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Tips.Status?);
    }
  }
}

uint64_t sub_20C6C04B4()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t _sIeyB_Ieg_TRTA_0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t block_copy_helper_54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_54()
{
  return swift_release();
}

unint64_t type metadata accessor for UIView()
{
  unint64_t result = lazy cache variable for type metadata for UIView;
  if (!lazy cache variable for type metadata for UIView)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIView);
  }
  return result;
}

uint64_t sub_20C6C0560()
{
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 81, 7);
}

uint64_t partial apply for closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:)(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in ImageWandTipController.showTip(withPresentationViewController:sourceItem:passthroughViews:permittedArrowDirections:tintColor:animated:)(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t objectdestroy_5Tm_0()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in ImageWandTipController.hideTip(animated:completion:)()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_20C6C072C()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in ImageWandTipController.init()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ImageWandTipController.init()(a1, v4, v5, v6);
}

uint64_t outlined init with copy of Tips.Status?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Status?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Tips.Status?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Status?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Tips.Status and conformance Tips.Status()
{
  unint64_t result = lazy protocol witness table cache variable for type Tips.Status and conformance Tips.Status;
  if (!lazy protocol witness table cache variable for type Tips.Status and conformance Tips.Status)
  {
    type metadata accessor for Tips.Status();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Tips.Status and conformance Tips.Status);
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageWandTip()
{
  return &type metadata for ImageWandTip;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in ImageWandTip()
{
  return MEMORY[0x263F8D320];
}

uint64_t protocol witness for Tip.title.getter in conformance ImageWandTip()
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v4._object = (void *)0x800000020C85D310;
  v0._uint64_t countAndFlagsBits = 0x6120657461657243;
  v0._object = (void *)0xEF6567616D49206ELL;
  v1.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v1.value._object = (void *)0xEB00000000656C62;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v0, v1, paperKitBundle, v2, v4);
  lazy protocol witness table accessor for type String and conformance String();
  return Text.init<A>(_:)();
}

uint64_t protocol witness for Tip.image.getter in conformance ImageWandTip()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image.TemplateRenderingMode?);
  MEMORY[0x270FA5388](v0 - 8);
  Swift::String v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(systemName:)();
  uint64_t v3 = *MEMORY[0x263F1B510];
  uint64_t v4 = type metadata accessor for Image.TemplateRenderingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 104))(v2, v3, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v4);
  uint64_t v6 = Image.renderingMode(_:)();
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v2, &demangling cache variable for type metadata for Image.TemplateRenderingMode?);
  return v6;
}

uint64_t protocol witness for Tip.actions.getter in conformance ImageWandTip()
{
  return MEMORY[0x270F05B68]();
}

uint64_t protocol witness for Tip.rules.getter in conformance ImageWandTip()
{
  return MEMORY[0x270F05B68]();
}

uint64_t protocol witness for Identifiable.id.getter in conformance ImageWandTip@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = lazy protocol witness table accessor for type ImageWandTip and conformance ImageWandTip();
  uint64_t result = MEMORY[0x210549850](a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t specialized ImageWandTip.message.getter()
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v0._uint64_t countAndFlagsBits = 0xD00000000000004ALL;
  v4._object = (void *)0x800000020C85D2E0;
  v0._object = (void *)0x800000020C85D290;
  v1.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v1.value._object = (void *)0xEB00000000656C62;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._uint64_t countAndFlagsBits = 0xD000000000000020;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v0, v1, paperKitBundle, v2, v4);
  lazy protocol witness table accessor for type String and conformance String();
  return Text.init<A>(_:)();
}

uint64_t specialized ImageWandTip.options.getter()
{
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A>(first:)>>.0);
  uint64_t v0 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  Swift::String v2 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A>(first:)>>.0);
  uint64_t v36 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v35 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Tips.MaxDisplayCount();
  uint64_t v31 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>.0);
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  MEMORY[0x270FA5388](v8);
  id v32 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildOptional(_:)>>.0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  double v38 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!os_variant_has_internal_ui()) {
    goto LABEL_4;
  }
  id v13 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v14 = MEMORY[0x21054D080](0xD000000000000018, 0x800000020C85D250);
  uint64_t v30 = v3;
  uint64_t v15 = (void *)v14;
  unsigned __int8 v16 = objc_msgSend(v13, sel_BOOLForKey_, v14);

  uint64_t v3 = v30;
  if (v16)
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    uint64_t v17 = v38;
    MEMORY[0x2105498B0](&v41);
  }
  else
  {
LABEL_4:
    Tips.MaxDisplayCount.init(_:)();
    uint64_t v18 = MEMORY[0x263F1C008];
    id v19 = v32;
    MEMORY[0x2105498C0](v7, v5, MEMORY[0x263F1C008]);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v5);
    *(void *)&long long v41 = v5;
    *((void *)&v41 + 1) = v18;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v22 = v34;
    uint64_t v21 = v35;
    MEMORY[0x2105498E0](v19, v34, OpaqueTypeConformance2);
    *((void *)&v42 + 1) = v3;
    uint64_t v39 = v22;
    uint64_t v40 = OpaqueTypeConformance2;
    uint64_t v43 = swift_getOpaqueTypeConformance2();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v41);
    uint64_t v24 = v36;
    (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(boxed_opaque_existential_1, v21, v3);
    uint64_t v17 = v38;
    MEMORY[0x2105498B0](&v41);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v3);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v22);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v41, &demangling cache variable for type metadata for TipOption?);
  uint64_t v25 = swift_getOpaqueTypeConformance2();
  MEMORY[0x2105498E0](v17, v10, v25);
  *(void *)&long long v41 = v10;
  *((void *)&v41 + 1) = v25;
  swift_getOpaqueTypeConformance2();
  uint64_t v26 = v37;
  uint64_t v27 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)();
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v26);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  return v27;
}

uint64_t *initializeBufferWithCopyOfBuffer for UnknownLayout(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for CRKeyPath();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for UnknownLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for UnknownLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for UnknownLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for UnknownLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for UnknownLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C6C1520);
}

uint64_t sub_20C6C1520(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for UnknownLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C6C15A0);
}

uint64_t sub_20C6C15A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for UnknownLayout()
{
  uint64_t result = type metadata singleton initialization cache for UnknownLayout;
  if (!type metadata singleton initialization cache for UnknownLayout) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for UnknownLayout()
{
  uint64_t result = type metadata accessor for CRKeyPath();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnknownCanvasElement and conformance UnknownCanvasElement()
{
  unint64_t result = lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement;
  if (!lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement)
  {
    type metadata accessor for UnknownCanvasElement();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for LayoutItemProvider.Model : CanvasElement in UnknownLayout()
{
  return &protocol witness table for UnknownCanvasElement;
}

void *UnknownLayout.createView<A>(in:canvas:parent:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  v25[1] = a4;
  v25[2] = a5;
  v25[3] = a1;
  uint64_t v9 = type metadata accessor for CRKeyPath();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unsigned __int8 v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  double v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v20 = (char *)v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v6, v9, v18);
  type metadata accessor for UnknownCanvasElement();
  lazy protocol witness table accessor for type UnknownCanvasElement and conformance UnknownCanvasElement();
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<UnknownCanvasElement> and conformance Ref<A>();
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v21 = *(void *)(v6 + *(int *)(type metadata accessor for UnknownLayout() + 20));
  objc_allocWithZone((Class)type metadata accessor for UnknownCanvasElementView());
  id v22 = a3;
  id v23 = a2;
  return UnknownCanvasElementView.init(canvasElement:tag:canvas:parentCanvasElement:)((uint64_t)v20, v21, a2, a3);
}

unint64_t lazy protocol witness table accessor for type Ref<UnknownCanvasElement> and conformance Ref<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Ref<UnknownCanvasElement> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<UnknownCanvasElement> and conformance Ref<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<UnknownCanvasElement> and conformance Ref<A>);
  }
  return result;
}

double UnknownPage.bounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t UnknownPage.bounds.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*UnknownPage.bounds.modify(void *a1))()
{
  Swift::String v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t UnknownPage.$bounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for UnknownPage.$bounds : UnknownPage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t UnknownPage.$bounds.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*UnknownPage.$bounds.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

double UnknownPage.frame.getter()
{
  type metadata accessor for UnknownPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for UnknownPage()
{
  uint64_t result = type metadata singleton initialization cache for UnknownPage;
  if (!type metadata singleton initialization cache for UnknownPage) {
    return swift_getSingletonMetadata();
  }
  return result;
}

double key path getter for UnknownPage.frame : UnknownPage@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for UnknownPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for UnknownPage.frame : UnknownPage()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t UnknownPage.frame.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*UnknownPage.frame.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for UnknownPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t UnknownPage.$frame.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for UnknownPage.$frame : UnknownPage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for UnknownPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t UnknownPage.$frame.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for UnknownPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*UnknownPage.$frame.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for UnknownPage() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t UnknownPage.additionalFields.getter()
{
  type metadata accessor for UnknownPage();
  return swift_bridgeObjectRetain();
}

uint64_t UnknownPage.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for UnknownPage() + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

double (*UnknownPage.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static UnknownPage.fields.getter()
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v0 = static UnknownPage.fields;
  swift_bridgeObjectRetain();
  swift_retain();
  return v0;
}

uint64_t UnknownPage.init()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  CRRegister.init(wrappedValue:)();
  uint64_t v2 = type metadata accessor for UnknownPage();
  uint64_t result = CRRegister.init(wrappedValue:)();
  *(void *)(a1 + *(int *)(v2 + 24)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance UnknownPage()
{
  return CRStruct_1.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance UnknownPage()
{
  return CRStruct_1.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance UnknownPage(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F16F58](a1, v2);
}

uint64_t protocol witness for static CRStruct_Base_1.fields.getter in conformance UnknownPage()
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v0 = static UnknownPage.fields;
  swift_bridgeObjectRetain();
  swift_retain();
  return v0;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance UnknownPage(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F16FC8](a1, v2);
}

uint64_t protocol witness for CRStruct_Base.init() in conformance UnknownPage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  CRRegister.init(wrappedValue:)();
  uint64_t result = CRRegister.init(wrappedValue:)();
  *(void *)(a2 + *(int *)(a1 + 24)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t protocol witness for CRDT.context.getter in conformance UnknownPage(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance UnknownPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F16F68](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance UnknownPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F16F90](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance UnknownPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F16FC0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance UnknownPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F16F98](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance UnknownPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F16FB8](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance UnknownPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F16FA0](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance UnknownPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F16F80](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F16F78](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance UnknownPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F16F60](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance UnknownPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F16F48](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance UnknownPage()
{
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return CRStruct_1.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance UnknownPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F16F50](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance UnknownPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
  return MEMORY[0x270F16FA8](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance UnknownPage()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance UnknownPage()
{
  return CRDT.init(serializedData:)();
}

uint64_t UnknownPage.pdfPageID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for PDFPageID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

void UnknownPage.shared(_:)()
{
}

double UnknownPage.pdfContentsBounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t UnknownPage.importAnnotations<A>(from:scale:mediaBox:in:)()
{
  return 0;
}

uint64_t UnknownPage.indexableTextContent<A>(in:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t UnknownPage.search<A>(query:fullWordsOnly:caseMatchingOnly:in:)()
{
  return protocol witness for PaperRenderable.renderedImage(in:) in conformance Paper(*(uint64_t (**)(uint64_t))(v0 + 8), v0, MEMORY[0x263F8EE78]);
}

void UnknownPage.update<A>(pdfPage:id:use:in:options:)(void *a1)
{
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    id v4 = a1;
    specialized PaperPage.updateCropAndRotation(pdfPage:updateMediaBox:)(v3, 0);
  }
}

id UnknownPage.createPageView<A>(id:in:pdfView:documentView:pdfPage:)(int a1, int a2, id a3)
{
  objc_msgSend(a3, sel_bounds);
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  id v11 = objc_allocWithZone((Class)type metadata accessor for UnknownPageView());
  return objc_msgSend(v11, sel_initWithFrame_, v4, v6, v8, v10);
}

uint64_t UnknownPage.finishDecode(from:pageID:assetManager:)()
{
  return 1;
}

uint64_t UnknownPage.render<A>(in:id:capsule:options:)()
{
  return PDFAnnotationElement.render<A>(in:id:capsule:options:)(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t base witness table accessor for CRStruct_Base_1 in UnknownPage()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
}

uint64_t base witness table accessor for CRStruct_Base in UnknownPage()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
}

uint64_t base witness table accessor for CRDT in UnknownPage()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
}

uint64_t base witness table accessor for CRMergeable in UnknownPage()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
}

uint64_t base witness table accessor for CRType in UnknownPage()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in UnknownPage()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_1<UnknownPage> and conformance CRStructMergeableDelta_1<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_1<UnknownPage>);
}

uint64_t base witness table accessor for CRCodable in UnknownPage()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_8(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
}

id protocol witness for PaperPage.createPageView<A>(id:in:pdfView:documentView:pdfPage:) in conformance UnknownPage(int a1, int a2, id a3)
{
  objc_msgSend(a3, sel_bounds);
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  id v11 = objc_allocWithZone((Class)type metadata accessor for UnknownPageView());
  return objc_msgSend(v11, sel_initWithFrame_, v4, v6, v8, v10);
}

void protocol witness for PaperPage.update<A>(pdfPage:id:use:in:options:) in conformance UnknownPage(void *a1)
{
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    double v3 = (void *)v2;
    id v4 = a1;
    specialized PaperPage.updateCropAndRotation(pdfPage:updateMediaBox:)(v3, 0);
  }
}

void protocol witness for PaperPage.shared(_:) in conformance UnknownPage()
{
}

uint64_t protocol witness for PaperPage.search<A>(query:fullWordsOnly:caseMatchingOnly:in:) in conformance UnknownPage()
{
  return protocol witness for PaperRenderable.renderedImage(in:) in conformance Paper(*(uint64_t (**)(uint64_t))(v0 + 8), v0, MEMORY[0x263F8EE78]);
}

uint64_t sub_20C6C379C()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C6C37E0()
{
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for UnknownPage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    double v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for UnknownPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UnknownPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UnknownPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for UnknownPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for UnknownPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnknownPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C6C3CA4);
}

uint64_t sub_20C6C3CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    double v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for UnknownPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C6C3D7C);
}

uint64_t sub_20C6C3D7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

void type metadata completion function for UnknownPage()
{
  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void AnyCanvas.performSelectionAction(_:_:at:)(char a1, uint64_t a2, void *a3, const char *a4, char a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v9 = v8;
  double v169 = *(double *)&a6;
  uint64_t v173 = a4;
  uint64_t v174 = a2;
  id v175 = a3;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v163 = (char *)&v160 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v172 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  double v18 = (char *)&v160 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v171 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v160 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, uti: String)?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v170 = (uint64_t)&v160 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, String));
  MEMORY[0x270FA5388](v165);
  uint64_t v164 = (char *)&v160 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for URL();
  uint64_t v167 = *(void *)(v25 - 8);
  uint64_t v168 = v25;
  v26.n128_f64[0] = MEMORY[0x270FA5388](v25);
  uint64_t v166 = (char *)&v160 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *v8) + 0x520))(v26)) {
    return;
  }
  int v162 = a8;
  *(void *)&aBlock.CGFloat d = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v28 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  *(void *)&aBlock.tdouble x = v28;
  LOBYTE(aBlock.a) = 0;
  char v29 = isFeatureEnabled(_:)();
  uint64_t v30 = (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  if ((v29 & 1) == 0)
  {
    uint64_t v30 = (void *)(*(uint64_t (**)(void *))((*MEMORY[0x263F8EED0] & *v9) + 0x320))(v30);
    if (v30)
    {
      uint64_t v31 = v30;
      double v160 = *(double *)&a7;
      uint64_t v161 = v9;
      id v32 = objc_msgSend(v30, sel_selectionInteraction);
      unsigned int v33 = objc_msgSend(v32, sel_currentSelectionHasStrokes);

      if (v33)
      {
        switch(a1)
        {
          case 1:
            objc_msgSend(v31, sel_copy_, v161);
            break;
          case 2:
            objc_msgSend(v31, sel_paste_, v161);
            break;
          case 3:
            objc_msgSend(v31, sel_duplicate_, v161);
            break;
          case 4:
            objc_msgSend(v31, sel_delete_, v161);
            break;
          case 5:
          case 6:
            break;
          default:
            objc_msgSend(v31, sel_cut_, v161);
            break;
        }

        return;
      }

      uint64_t v9 = v161;
      *(double *)&a7 = v160;
    }
  }
  uint64_t v34 = a5 & 1;
  switch(a1)
  {
    case 1:
      *(void *)&aBlock.CGFloat d = &type metadata for PencilAndPaperFeatureFlags;
      *(void *)&aBlock.tdouble x = v28;
      LOBYTE(aBlock.a) = 0;
      char v38 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
      uint64_t v39 = (void *)MEMORY[0x263F8EED0];
      uint64_t v41 = v174;
      id v40 = v175;
      long long v42 = v173;
      if ((v38 & 1) != 0
        || !(*(uint64_t (**)(uint64_t, id, const char *, uint64_t))((*MEMORY[0x263F8EED0] & *v9) + 0x648))(v174, v175, v173, v34))
      {
        id v111 = objc_msgSend(self, sel_generalPasteboard);
        uint64_t v112 = (void *)(*(uint64_t (**)(uint64_t, id, const char *, uint64_t))((*v39 & *v9) + 0x640))(v41, v40, v42, v34);
        CGFloat v113 = v112;
        *(void *)&aBlock.double a = MEMORY[0x263F8EE78];
        if (v112)
        {
          id v114 = v112;
          MEMORY[0x21054D330]();
          if (*(void *)((*(void *)&aBlock.a & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&aBlock.a & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }

        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
        isdouble a = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v111, sel_setItemProviders_, isa);

        goto LABEL_53;
      }
      id v43 = objc_msgSend(self, sel_generalPasteboard);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      Class v44 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v43, sel_setItems_, v44);

      return;
    case 2:
      id v175 = self;
      id v45 = objc_msgSend(v175, sel_generalPasteboard);
      id v46 = objc_msgSend(v45, sel_itemProviders);

      uint64_t v174 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
      unint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v161 = v9;
      double v160 = *(double *)&a7;
      if (v47 >> 62) {
        goto LABEL_89;
      }
      uint64_t v48 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v48) {
        goto LABEL_16;
      }
      break;
    case 3:
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v77 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v78 = swift_allocObject();
      uint64_t v80 = v174;
      id v79 = v175;
      *(void *)(v78 + 16) = v9;
      *(void *)(v78 + 24) = v80;
      CGRect v81 = v173;
      *(void *)(v78 + 32) = v79;
      *(void *)(v78 + 40) = v81;
      *(unsigned char *)(v78 + 48) = v34 != 0;
      *(void *)&aBlock.tdouble x = partial apply for closure #6 in AnyCanvas.performSelectionAction(_:_:at:);
      *(void *)&aBlock.tdouble y = v78;
      *(void *)&aBlock.double a = MEMORY[0x263EF8330];
      *(void *)&aBlock.double b = 1107296256;
      *(void *)&aBlock.CGFloat c = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      *(void *)&aBlock.CGFloat d = &block_descriptor_55;
      uint64_t v82 = _Block_copy(&aBlock);
      uint64_t v83 = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_release();
      static DispatchQoS.unspecified.getter();
      *(void *)&aBlock.double a = MEMORY[0x263F8EE78];
      _s9Coherence9CRKeyPathVACSQAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x21054DA10](0, v21, v18, v82);
      _Block_release(v82);

      (*(void (**)(char *, uint64_t))(v172 + 8))(v18, v16);
      (*(void (**)(char *, uint64_t))(v171 + 8))(v21, v19);
      return;
    case 4:
      (*(void (**)(uint64_t, id, const char *, void))((*MEMORY[0x263F8EED0] & *v9) + 0x4A8))(v174, v175, v173, a5 & 1);
      return;
    case 5:
      *(void *)&aBlock.CGFloat d = &type metadata for PencilAndPaperFeatureFlags;
      *(void *)&aBlock.tdouble x = v28;
      LOBYTE(aBlock.a) = 6;
      char v84 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
      if (v84) {
        (*(void (**)(uint64_t, id, const char *, void))((*MEMORY[0x263F8EED0] & *v9) + 0x4C0))(v174, v175, v173, a5 & 1);
      }
      return;
    case 6:
      uint64_t v85 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v9) + 0x320);
      int v86 = a5 & 1;
      uint64_t v87 = ((uint64_t (*)(void *))v85)(v30);
      if (v87)
      {
        isdouble a = (Class)v87;
        type metadata accessor for TiledTextView();
        uint64_t v89 = swift_dynamicCastClass();
        if (!v89) {
          goto LABEL_53;
        }
        uint64_t v90 = v89;
        uint64_t v91 = v9;
        id v92 = TiledTextView.canvasGenerationToolOverlayController.getter();
        id v93 = CanvasGenerationToolOverlayController.imageGenerationController.getter();
        unsigned int v94 = objc_msgSend(v93, sel_shouldShowImageGenerationUI);

        if (!v94) {
          goto LABEL_53;
        }
        uint64_t v95 = (void *)v85();
        if (!v95) {
          goto LABEL_47;
        }
        uint64_t v96 = v95;
        id v97 = objc_msgSend(v95, sel_window);

        if (v97
          && (id v98 = objc_msgSend(self, sel_sharedInstance),
              unsigned int v99 = objc_msgSend(v98, sel_presentGreymatterAvailabilityAlertControllerInWindow_, v97),
              v98,
              v97,
              v99))
        {
LABEL_53:
        }
        else
        {
LABEL_47:
          BOOL v100 = v86 != 0;
          uint64_t v101 = type metadata accessor for TaskPriority();
          uint64_t v102 = (uint64_t)v163;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v163, 1, 1, v101);
          type metadata accessor for MainActor();
          id v103 = v91;
          double v104 = isa;
          uint64_t v105 = v174;
          swift_bridgeObjectRetain();
          id v106 = v175;
          swift_bridgeObjectRetain();
          uint64_t v107 = static MainActor.shared.getter();
          uint64_t v108 = swift_allocObject();
          uint64_t v109 = MEMORY[0x263F8F500];
          *(void *)(v108 + 16) = v107;
          *(void *)(v108 + 24) = v109;
          *(void *)(v108 + 32) = v90;
          *(void *)(v108 + 40) = v105;
          double v110 = v173;
          *(void *)(v108 + 48) = v106;
          *(void *)(v108 + 56) = v110;
          *(unsigned char *)(v108 + 64) = v100;
          *(void *)(v108 + 72) = v103;
          _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5(v102, (uint64_t)&async function pointer to partial apply for closure #7 in AnyCanvas.performSelectionAction(_:_:at:), v108);

          swift_release();
        }
      }
      return;
    default:
      uint64_t v36 = v174;
      id v35 = v175;
      uint64_t v37 = v173;
      AnyCanvas.performSelectionAction(_:_:at:)(1, v174, v175, v173, v34, 0, 0, 1);
      AnyCanvas.performSelectionAction(_:_:at:)(4, v36, v35, v37, v34, 0, 0, 1);
      return;
  }
  do
  {
LABEL_23:
    swift_bridgeObjectRelease_n();
    id v55 = v175;
    id v56 = objc_msgSend(v175, sel_generalPasteboard);
    id v57 = objc_msgSend(v56, sel_items);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    uint64_t v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v59 = v170;
    Array<A>.pasteboardPaperKitURL.getter(v58, v170);
    swift_bridgeObjectRelease();
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (url: URL, uti: String));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 48))(v59, 1, v60) != 1)
    {
      double v115 = (uint64_t *)(v59 + *(int *)(v60 + 48));
      uint64_t v116 = *v115;
      uint64_t v117 = v115[1];
      CGFloat v118 = v164;
      CGFloat v119 = &v164[*(int *)(v165 + 48)];
      uint64_t v120 = v167;
      uint64_t v121 = *(void (**)(char *, uint64_t, uint64_t))(v167 + 32);
      uint64_t v122 = v59;
      uint64_t v123 = v168;
      v121(v164, v122, v168);
      *(void *)CGFloat v119 = v116;
      *((void *)v119 + 1) = v117;
      swift_bridgeObjectRelease();
      id v124 = v166;
      uint64_t v125 = ((uint64_t (*)(char *, char *, uint64_t))v121)(v166, v118, v123);
      uint64_t v126 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v161) + 0x2F8))(v125);
      uint64_t v128 = v127;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(char *, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(v128 + 112))(v124, 1, 0, 0, 1, ObjectType, v128);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v120 + 8))(v124, v123);
      return;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for (url: URL, uti: String)?);
    id v61 = objc_msgSend(v55, sel_generalPasteboard);
    id v62 = objc_msgSend(v61, sel_itemProviders);

    unint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    if (v47 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
      if (v63)
      {
LABEL_26:
        uint64_t v64 = 4;
        uint64_t v173 = "com.apple.paper.private";
        do
        {
          id v65 = (v47 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x21054E050](v64 - 4, v47)
              : *(id *)(v47 + 8 * v64);
          uint64_t v51 = v65;
          uint64_t v66 = v64 - 3;
          if (__OFADD__(v64 - 4, 1)) {
            goto LABEL_87;
          }
          uint64_t v67 = (void *)MEMORY[0x21054D080](0xD000000000000011, 0x800000020C84EE60);
          unsigned __int8 v68 = objc_msgSend(v51, sel_hasItemConformingToTypeIdentifier_, v67);

          if (v68)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v130 = (void *)MEMORY[0x21054D080](0xD000000000000011, (unint64_t)v173 | 0x8000000000000000);
            uint64_t v155 = swift_allocObject();
            uint64_t v156 = v161;
            double v157 = v169;
            *(void *)(v155 + 16) = v161;
            *(double *)(v155 + 24) = v157;
            *(double *)(v155 + 32) = v160;
            *(unsigned char *)(v155 + 40) = v162 & 1;
            *(void *)&aBlock.tdouble x = partial apply for closure #5 in AnyCanvas.performSelectionAction(_:_:at:);
            *(void *)&aBlock.tdouble y = v155;
            *(void *)&aBlock.double a = MEMORY[0x263EF8330];
            *(void *)&aBlock.double b = 1107296256;
            *(void *)&aBlock.CGFloat c = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @guaranteed Error?) -> ();
            *(void *)&aBlock.CGFloat d = &block_descriptor_32_3;
            uint64_t v134 = _Block_copy(&aBlock);
            id v158 = v156;
            swift_release();
            id v136 = objc_msgSend(v51, sel_loadFileRepresentationForTypeIdentifier_completionHandler_, v130, v134);
            goto LABEL_84;
          }

          ++v64;
        }
        while (v66 != v63);
      }
    }
    else
    {
      uint64_t v63 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v63) {
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRelease_n();
    if (one-time initialization token for canvasElementDefaultSize != -1) {
      swift_once();
    }
    char v69 = v161;
    id v70 = (void *)MEMORY[0x263F8EED0];
    uint64_t v71 = (*(uint64_t (**)(double, double))((*MEMORY[0x263F8EED0] & *v161) + 0x6D0))(*(double *)&static UIConstants.canvasElementDefaultSize, *(double *)algn_2676E93F0);
    id v74 = v175;
    if (v162)
    {
      double x = v72;
      double y = v73;
    }
    else
    {
      double v137 = v169;
      double v138 = v160;
      char v139 = (void *)(*(uint64_t (**)(uint64_t))((*v70 & *v69) + 0x2F8))(v71);
      objc_msgSend(v139, sel_convertPoint_fromCoordinateSpace_, v69, v137, v138);
      double x = v140;
      double y = v141;
    }
    id v142 = objc_msgSend(v74, sel_generalPasteboard, *(void *)&v160);
    unint64_t v47 = (unint64_t)objc_msgSend(v142, sel_itemProviders);

    uint64_t v143 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    if ((unint64_t)v143 >> 62)
    {
      if (v143 < 0) {
        unint64_t v47 = v143;
      }
      else {
        unint64_t v47 = v143 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      uint64_t v144 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v144)
      {
LABEL_97:
        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v144 = *(void *)((v143 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v144) {
        goto LABEL_97;
      }
    }
    unint64_t v145 = 0;
    uint64_t v174 = v143 & 0xFFFFFFFFFFFFFF8;
    id v175 = (id)(v143 & 0xC000000000000001);
    uint64_t v173 = (const char *)(v143 + 32);
    while (1)
    {
      if (v175)
      {
        id v146 = (id)MEMORY[0x21054E050](v145, v143);
      }
      else
      {
        if (v145 >= *(void *)(v174 + 16)) {
          goto LABEL_88;
        }
        id v146 = *(id *)&v173[8 * v145];
      }
      unint64_t v147 = v146;
      if (__OFADD__(v145++, 1)) {
        break;
      }
      unint64_t v47 = (unint64_t)v69;
      uint64_t v149 = AnyCanvas.acceptedDropLayouts.getter();
      uint64_t v150 = *(void *)(v149 + 16);
      if (v150)
      {
        uint64_t v151 = v69;
        unint64_t v152 = (void *)(v149 + 40);
        while (1)
        {
          unint64_t v47 = *(v152 - 1);
          uint64_t v153 = *v152;
          if ((*(uint64_t (**)(void *, unint64_t, void))(*v152 + 32))(v147, v47, *v152)) {
            break;
          }
          v152 += 2;
          if (!--v150)
          {

            swift_bridgeObjectRelease();
            char v69 = v151;
            goto LABEL_67;
          }
        }
        swift_bridgeObjectRelease();
        char v69 = v151;
        if ((*(uint64_t (**)(void *, void *, void, unint64_t, uint64_t, double, double, double, double, double))(v153 + 16))(v147, v151, 0, v47, v153, x, y, *(double *)&static UIConstants.canvasElementDefaultSize, *(double *)algn_2676E93F0, 0.0))
        {
          if (one-time initialization token for canvasElementPasteOffset != -1) {
            swift_once();
          }
          CGAffineTransformMakeTranslation(&aBlock, *(CGFloat *)&static UIConstants.canvasElementPasteOffset, *((CGFloat *)&static UIConstants.canvasElementPasteOffset + 1));
          v177.double x = x;
          v177.double y = y;
          CGPoint v154 = CGPointApplyAffineTransform(v177, &aBlock);
          double x = v154.x;
          double y = v154.y;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
LABEL_67:
      if (v145 == v144) {
        goto LABEL_97;
      }
    }
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    swift_bridgeObjectRetain();
    uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
  }
  while (!v48);
LABEL_16:
  uint64_t v49 = 4;
  while (1)
  {
    if ((v47 & 0xC000000000000001) != 0) {
      id v50 = (id)MEMORY[0x21054E050](v49 - 4, v47);
    }
    else {
      id v50 = *(id *)(v47 + 8 * v49);
    }
    uint64_t v51 = v50;
    uint64_t v52 = v49 - 3;
    if (__OFADD__(v49 - 4, 1))
    {
      __break(1u);
      goto LABEL_86;
    }
    uint64_t v53 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
    unsigned __int8 v54 = objc_msgSend(v51, sel_hasItemConformingToTypeIdentifier_, v53);

    if (v54) {
      break;
    }

    ++v49;
    if (v52 == v48) {
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v130 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
  uint64_t v131 = swift_allocObject();
  uint64_t v132 = v161;
  double v133 = v169;
  *(void *)(v131 + 16) = v161;
  *(double *)(v131 + 24) = v133;
  *(double *)(v131 + 32) = v160;
  *(unsigned char *)(v131 + 40) = v162 & 1;
  *(void *)&aBlock.tdouble x = partial apply for closure #3 in AnyCanvas.performSelectionAction(_:_:at:);
  *(void *)&aBlock.tdouble y = v131;
  *(void *)&aBlock.double a = MEMORY[0x263EF8330];
  *(void *)&aBlock.double b = 1107296256;
  *(void *)&aBlock.CGFloat c = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @guaranteed Error?) -> ();
  *(void *)&aBlock.CGFloat d = &block_descriptor_38_1;
  uint64_t v134 = _Block_copy(&aBlock);
  id v135 = v132;
  swift_release();
  id v136 = objc_msgSend(v51, sel_loadFileRepresentationForTypeIdentifier_completionHandler_, v130, v134);
LABEL_84:
  id v159 = v136;
  _Block_release(v134);
}

void AnyCanvas.contextMenuInteraction(_:members:configurationForMenuAtLocation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, double a6, double a7)
{
  uint64_t v74 = a4;
  uint64_t v14 = type metadata accessor for CRKeyPath();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v63 - v19;
  if ((v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isScribbling] & 1) != 0 || !*(void *)(a2 + 16) && !*(void *)(a3 + 16)) {
    return;
  }
  uint64_t v21 = v7;
  uint64_t v22 = swift_bridgeObjectRetain();
  unint64_t v23 = specialized Sequence.compactMap<A>(_:)(v22, v21);
  swift_bridgeObjectRelease();
  double v73 = v21;

  unint64_t v72 = v23 >> 62;
  if (!(v23 >> 62))
  {
    if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_6;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v62) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v70 = a1;
  unint64_t v71 = v23 & 0xC000000000000001;
  uint64_t v69 = v15;
  if ((v23 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = (void *)MEMORY[0x21054E050](0, v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    uint64_t v24 = *(id *)(v23 + 32);
  }
  uint64_t v25 = (void *)MEMORY[0x263F8EED0];
  __n128 v26 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v24) + 0x2D0))();

  if (v26)
  {
    char v27 = (*(uint64_t (**)(void))((*v25 & *v26) + 0x98))();

    if (v27) {
      goto LABEL_11;
    }
  }
  char v28 = a5 & 1;
  char v29 = v73;
  uint64_t v74 = AnyCanvas.actions(canvasElementViews:members:)(v23, a2, a3, v74, v28);
  unint64_t v30 = v72;
  if (v72)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v32 = v70;
  if (v31 != 1) {
    goto LABEL_48;
  }
  AnyCanvas.selectedCanvasElementIds.getter();
  uint64_t v34 = v33;
  if (v71)
  {
    swift_bridgeObjectRetain();
    id v35 = (void *)MEMORY[0x21054E050](0, v23);
    uint64_t v36 = (void *)swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_58:
      __break(1u);
      return;
    }
    uint64_t v36 = *(id *)(v23 + 32);
    id v35 = v36;
  }
  (*(void (**)(void *))((*v25 & *v35) + 0xE0))(v36);

  uint64_t v67 = *(void *)(v34 + 16);
  if (!v67)
  {
    (*(void (**)(char *, uint64_t))(v69 + 8))(v20, v14);
    goto LABEL_32;
  }
  uint64_t v37 = v69;
  unint64_t v38 = (*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
  uint64_t v66 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
  v66(v17, v34 + v38, v14);
  uint64_t v39 = _s9Coherence9CRKeyPathVACSQAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
  swift_bridgeObjectRetain();
  uint64_t v65 = v39;
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v41 = v37;
  id v43 = *(void (**)(char *, uint64_t))(v37 + 8);
  uint64_t v42 = v37 + 8;
  unsigned __int8 v68 = v43;
  v43(v17, v14);
  if ((v40 & 1) == 0)
  {
    uint64_t v64 = v34;
    if (v67 == 1)
    {
      swift_bridgeObjectRelease();
      unint64_t v30 = v72;
      char v29 = v73;
      uint64_t v25 = (void *)MEMORY[0x263F8EED0];
      uint64_t v32 = v70;
      v68(v20, v14);
LABEL_32:
      swift_bridgeObjectRelease();
      if (v71)
      {
        swift_bridgeObjectRetain();
        id v48 = (id)MEMORY[0x21054E050](0, v23);
        swift_bridgeObjectRelease();
      }
      else
      {
        id v48 = *(id *)(v23 + 32);
      }
      objc_msgSend(v29, sel_convertPoint_fromCoordinateSpace_, v48, a6, a7);
      double v50 = v49;
      double v52 = v51;

      uint64_t v53 = (void *)(*(uint64_t (**)(void))((*v25 & *v29) + 0x2F8))();
      uint64_t v55 = v54;
      uint64_t ObjectType = swift_getObjectType();
      id v57 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t, double, double))(v55 + 136))(0, ObjectType, v55, v50, v52);

      if (v57)
      {
        type metadata accessor for LinkCanvasElementView();
        if (swift_dynamicCastClass())
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return;
        }
      }
      goto LABEL_41;
    }
    v63[1] = v42 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v69 = *(void *)(v41 + 72);
    unint64_t v44 = v64 + v69 + v38;
    uint64_t v45 = 1;
    while (1)
    {
      v66(v17, v44, v14);
      uint64_t v46 = v45 + 1;
      if (__OFADD__(v45, 1)) {
        goto LABEL_57;
      }
      char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      v68(v17, v14);
      if (v47)
      {
        swift_bridgeObjectRelease();
        uint64_t v32 = v70;
        unint64_t v30 = v72;
        goto LABEL_40;
      }
      ++v45;
      v44 += v69;
      if (v46 == v67)
      {
        swift_bridgeObjectRelease();
        uint64_t v32 = v70;
        unint64_t v30 = v72;
        char v29 = v73;
        uint64_t v25 = (void *)MEMORY[0x263F8EED0];
        v68(v20, v14);
        goto LABEL_32;
      }
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v30 = v72;
  uint64_t v32 = v70;
LABEL_40:
  v68(v20, v14);
  swift_bridgeObjectRelease();
  char v29 = v73;
  uint64_t v25 = (void *)MEMORY[0x263F8EED0];
LABEL_41:
  if (v71)
  {
    swift_bridgeObjectRetain();
    id v58 = (id)MEMORY[0x21054E050](0, v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v58 = *(id *)(v23 + 32);
  }
  type metadata accessor for LinkCanvasElementView();
  uint64_t v59 = swift_dynamicCastClass();
  if (v59)
  {
    uint64_t v60 = (void *)v59;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    objc_msgSend(v60, sel_contextMenuInteraction_configurationForMenuAtLocation_, v32, a6, a7);

    return;
  }

  if (v71)
  {
    swift_bridgeObjectRetain();
    MEMORY[0x21054E050](0, v23);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_48:
  if (v30)
  {
    uint64_t v61 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v61 = v23 & 0xFFFFFFFFFFFFFF8;
  }
  (*(void (**)(uint64_t, uint64_t))((*v25 & *v29) + 0x6F0))(v61, v74);
  swift_release();
  swift_bridgeObjectRelease();
}

UITargetedPreview_optional __swiftcall AnyCanvas.contextMenuInteraction(_:canvasElementViews:previewForHighlightingMenuWithConfiguration:)(UIContextMenuInteraction _, Swift::OpaquePointer canvasElementViews, UIContextMenuConfiguration previewForHighlightingMenuWithConfiguration)
{
  if ((unint64_t)canvasElementViews._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v26 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = (void *)_CocoaArrayWrapper.endIndex.getter();
      if (v7) {
        goto LABEL_4;
      }
      swift_bridgeObjectRelease();
    }
LABEL_10:
    memset(v27, 0, sizeof(v27));
    char v28 = 1;
    uint64_t v13 = (void *)MEMORY[0x263F8EED0];
    uint64_t v14 = (*(uint64_t (**)(void *, _OWORD *))((*MEMORY[0x263F8EED0] & *v3) + 0x678))(canvasElementViews._rawValue, v27);
    if (v14)
    {
      uint64_t v15 = (void *)v14;
      uint64_t v16 = (*(uint64_t (**)(void))((*v13 & *v3) + 0x308))();
      if (v16)
      {
        uint64_t v17 = (void *)v16;
        uint64_t v7 = *(void **)((char *)v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
        if (v7)
        {
          objc_msgSend(v7, sel_frame);
          CGFloat x = v30.origin.x;
          CGFloat y = v30.origin.y;
          CGFloat width = v30.size.width;
          CGFloat height = v30.size.height;
          double MidX = CGRectGetMidX(v30);
          v31.origin.CGFloat x = x;
          v31.origin.CGFloat y = y;
          v31.size.CGFloat width = width;
          v31.size.CGFloat height = height;
          id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F826F0]), sel_initWithContainer_center_, v17, MidX, CGRectGetMidY(v31));
          id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F826E0]), sel_init);
          id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v15);
          objc_msgSend(v25, sel__setContinuousCornerRadius_, 13.0);
          id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB8]), sel_initWithView_parameters_target_, v25, v24, v23);

          goto LABEL_16;
        }
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
    }
    id v12 = 0;
    goto LABEL_16;
  }
  if (*(void *)(((unint64_t)canvasElementViews._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10) != 1) {
    goto LABEL_10;
  }
  uint64_t v7 = (void *)swift_bridgeObjectRetain();
LABEL_4:
  if (((unint64_t)canvasElementViews._rawValue & 0xC000000000000001) != 0)
  {
    id v9 = (id)MEMORY[0x21054E050](0, canvasElementViews._rawValue);
  }
  else
  {
    if (!*(void *)(((unint64_t)canvasElementViews._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_22;
    }
    id v9 = *((id *)canvasElementViews._rawValue + 4);
  }
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v10, sel_window);

  if (!v11)
  {

    goto LABEL_10;
  }
  id v12 = objc_msgSend(v10, sel_contextMenuInteraction_previewForHighlightingMenuWithConfiguration_, _.super.isa, previewForHighlightingMenuWithConfiguration.super.isa);

LABEL_16:
  uint64_t v7 = v12;
LABEL_23:
  result.value.super.isdouble a = (Class)v7;
  result.is_nil = v8;
  return result;
}

void closure #1 in AnyCanvas.cutAction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, const char *a5, char a6)
{
}

void closure #1 in AnyCanvas.copyAction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, const char *a5, char a6)
{
}

void closure #1 in AnyCanvas.duplicateAction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, const char *a5, char a6)
{
}

void closure #1 in AnyCanvas.deleteAction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, const char *a5, char a6)
{
}

uint64_t AnyCanvas.createImageAction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v5 = v4;
  uint64_t v10 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x320))();
  if (!v10) {
    return 0;
  }
  id v11 = (void *)v10;
  type metadata accessor for TiledTextView();
  if (!swift_dynamicCastClass()
    || (id v12 = TiledTextView.canvasGenerationToolOverlayController.getter(),
        id v13 = CanvasGenerationToolOverlayController.imageGenerationController.getter(),
        unsigned int v14 = objc_msgSend(v13, sel_shouldShowImageGenerationUI),
        v12,
        v13,
        !v14)
    || *(void *)(a1 + 16)
    || *(void *)(a2 + 16))
  {

    return 0;
  }
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v5;
  *(void *)(v17 + 24) = a1;
  *(void *)(v17 + 32) = a2;
  *(void *)(v17 + 40) = a3;
  *(unsigned char *)(v17 + 48) = a4 & 1;
  uint64_t v18 = one-time initialization token for paperKitBundle;
  id v19 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  v25._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
  v25._object = (void *)0x800000020C851790;
  v20._object = (void *)0x800000020C851770;
  v20._uint64_t countAndFlagsBits = 0xD000000000000011;
  v21.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v21.value._object = (void *)0xEB00000000656C62;
  v22._uint64_t countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, paperKitBundle, v22, v25);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  id v23 = (void *)MEMORY[0x21054D080](0xD000000000000016, 0x800000020C8517D0);
  id v24 = objc_msgSend(self, sel_systemImageNamed_, v23);

  uint64_t v15 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  return v15;
}

uint64_t AnyCanvas.createImageActionWithDivider(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = AnyCanvas.createImageAction(_:)(a1, a2, a3, a4 & 1);
  if (!v4) {
    return MEMORY[0x263F8EE78];
  }
  int v5 = (void *)v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIMenuElement?>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_20C835740;
  *(void *)(v6 + 32) = v5;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_20C835790;
  *(void *)(v7 + 32) = v5;
  children._Swift::Int rawValue = (void *)v7;
  specialized Array._endMutation()();
  id v8 = v5;
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v12.value.super.isdouble a = 0;
  v12.is_nil = 0;
  *(UIMenu *)(v6 + 40) = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v9, (Swift::String_optional)0, v12, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)children._rawValue, children);
  specialized Array._endMutation()();

  return v6;
}

uint64_t closure #1 in closure #1 in closure #3 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 88) = v14;
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = a8;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 16) = a4;
  uint64_t v9 = type metadata accessor for URL();
  *(void *)(v8 + 56) = v9;
  *(void *)(v8 + 64) = *(void *)(v9 - 8);
  *(void *)(v8 + 72) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v8 + 80) = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #3 in AnyCanvas.performSelectionAction(_:_:at:), v11, v10);
}

uint64_t closure #1 in closure #1 in closure #3 in AnyCanvas.performSelectionAction(_:_:at:)()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 64);
  char v3 = *(unsigned char *)(v0 + 88);
  uint64_t v10 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 24);
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  CRStableAsset.url.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v6 + 112))(v1, 1, v5, v4, v3 & 1, ObjectType, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v10);
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t closure #3 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v50 = a8;
  uint64_t v51 = a4;
  uint64_t v48 = a7;
  int v53 = a6;
  uint64_t v52 = a5;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v54 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for CRStableAsset();
  uint64_t v12 = *(void *)(v49 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v49);
  char v47 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v43 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v17 - 8);
  id v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  id v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v43 - v25;
  outlined init with copy of URL?(a1, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for URL?);
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v26, v19, v20);
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v23, v26, v20);
  uint64_t v46 = v16;
  CRStableAsset.init(url:extension:)();
  uint64_t v28 = type metadata accessor for TaskPriority();
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v54, 1, 1, v28);
  uint64_t v30 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *a3) + 0x2F8))(v29);
  uint64_t v44 = v31;
  uint64_t v45 = v30;
  uint64_t v32 = v47;
  uint64_t v33 = v49;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v47, v16, v49);
  type metadata accessor for MainActor();
  uint64_t v34 = static MainActor.shared.getter();
  unint64_t v35 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v36 = (v13 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = (char *)swift_allocObject();
  uint64_t v38 = MEMORY[0x263F8F500];
  *((void *)v37 + 2) = v34;
  *((void *)v37 + 3) = v38;
  uint64_t v39 = v44;
  *((void *)v37 + 4) = v45;
  *((void *)v37 + 5) = v39;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v37[v35], v32, v33);
  char v40 = &v37[v36];
  uint64_t v41 = v50;
  uint64_t v42 = v52;
  *(void *)char v40 = v51;
  *((void *)v40 + 1) = v42;
  unsigned char v40[16] = v53 & 1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v54, v41, (uint64_t)v37);
  swift_release();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v46, v33);
}

uint64_t closure #1 in closure #1 in closure #5 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 88) = v14;
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = a8;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 16) = a4;
  uint64_t v9 = type metadata accessor for URL();
  *(void *)(v8 + 56) = v9;
  *(void *)(v8 + 64) = *(void *)(v9 - 8);
  *(void *)(v8 + 72) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v8 + 80) = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #5 in AnyCanvas.performSelectionAction(_:_:at:), v11, v10);
}

uint64_t closure #1 in closure #1 in closure #5 in AnyCanvas.performSelectionAction(_:_:at:)()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 64);
  char v3 = *(unsigned char *)(v0 + 88);
  uint64_t v10 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 24);
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  CRStableAsset.url.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v6 + 104))(v1, v5, v4, v3 & 1, ObjectType, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v10);
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t closure #6 in AnyCanvas.performSelectionAction(_:_:at:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))((*MEMORY[0x263F8EED0] & *a1) + 0x4B0))(a2, a3, a4, a5 & 1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #7 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 104) = a8;
  *(void *)(v8 + 48) = a7;
  *(void *)(v8 + 56) = v13;
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + 40) = a6;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a4;
  type metadata accessor for MainActor();
  *(void *)(v8 + 64) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v8 + 72) = v10;
  *(void *)(v8 + 80) = v9;
  return MEMORY[0x270FA2498](closure #7 in AnyCanvas.performSelectionAction(_:_:at:), v10, v9);
}

uint64_t closure #7 in AnyCanvas.performSelectionAction(_:_:at:)()
{
  uint64_t v1 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 56);
    char v5 = *(unsigned char *)(v0 + 104) & 1;
    uint64_t v6 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool);
    *(void *)(v0 + 88) = v6;
    v6;

    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v7;
    *uint64_t v7 = v0;
    v7[1] = closure #7 in AnyCanvas.performSelectionAction(_:_:at:);
    uint64_t v8 = *(void *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 48);
    uint64_t v10 = *(void *)(v0 + 32);
    return CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:)(v10, v8, v9, v5, v4);
  }
  else
  {

    swift_release();
    **(unsigned char **)(v0 + 16) = 1;
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 88);
  swift_task_dealloc();

  if (v0)
  {

    uint64_t v4 = *(void *)(v2 + 72);
    char v5 = *(void *)(v2 + 80);
    uint64_t v6 = closure #7 in AnyCanvas.performSelectionAction(_:_:at:);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 72);
    char v5 = *(void *)(v2 + 80);
    uint64_t v6 = closure #7 in AnyCanvas.performSelectionAction(_:_:at:);
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  **(unsigned char **)(v0 + 16) = 0;
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  **(unsigned char **)(v0 + 16) = 1;
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AnyCanvas.actions(canvasElementViews:members:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  unsigned int v11 = a5 & 1;
  uint64_t v12 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v5) + 0x2F8))();
  uint64_t v14 = v13;
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 160))(ObjectType, v14);

  swift_bridgeObjectRetain();
  LOBYTE(v12) = specialized Sequence.contains(where:)(a1, v16);
  swift_bridgeObjectRelease_n();
  if (v12)
  {
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v6;
    *(void *)(v17 + 24) = a2;
    *(void *)(v17 + 32) = a3;
    *(void *)(v17 + 40) = a4;
    *(unsigned char *)(v17 + 48) = v11 != 0;
    uint64_t v18 = one-time initialization token for paperKitBundle;
    id v19 = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18 != -1) {
      swift_once();
    }
    v94._uint64_t countAndFlagsBits = 0xD000000000000020;
    v94._object = (void *)0x800000020C85B240;
    v20._uint64_t countAndFlagsBits = 0x6574656C6544;
    v20._object = (void *)0xE600000000000000;
    v21.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v21.value._object = (void *)0xEB00000000656C62;
    v22._uint64_t countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, paperKitBundle, v22, v94);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    id v23 = (void *)MEMORY[0x21054D080](0x6873617274, 0xE500000000000000);
    id v24 = objc_msgSend(self, sel_systemImageNamed_, v23);

    MEMORY[0x21054D080](0xD000000000000015, 0x800000020C85B270);
    uint64_t v25 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    v93[0] = MEMORY[0x263F8EE78];
    id v26 = v25;
    MEMORY[0x21054D330](v26, v27, v28, v29, v30);
    if (*(void *)((v93[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v93[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v31 = v93[0];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIMenuElement?>);
    initeCGFloat d = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C8387B0;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = v6;
    *(void *)(v32 + 24) = a2;
    *(void *)(v32 + 32) = a3;
    *(void *)(v32 + 40) = a4;
    *(unsigned char *)(v32 + 48) = v11 != 0;
    uint64_t v33 = one-time initialization token for paperKitBundle;
    id v88 = v6;
    uint64_t v34 = a2;
    swift_bridgeObjectRetain();
    uint64_t v35 = a3;
    swift_bridgeObjectRetain();
    uint64_t v89 = a4;
    if (v33 != -1) {
      swift_once();
    }
    v95._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v95._object = (void *)0x800000020C85B170;
    v36._uint64_t countAndFlagsBits = 7632195;
    v36._object = (void *)0xE300000000000000;
    v37.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v37.value._object = (void *)0xEB00000000656C62;
    v38._uint64_t countAndFlagsBits = 0;
    v38._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v36, v37, paperKitBundle, v38, v95);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    uint64_t v39 = (void *)MEMORY[0x21054D080](0x73726F7373696373, 0xE800000000000000);
    id v91 = self;
    id v40 = objc_msgSend(v91, sel_systemImageNamed_, v39);

    MEMORY[0x21054D080](0xD000000000000012, 0x800000020C85B190);
    *(void *)(inited + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = v88;
    *(void *)(v41 + 24) = a2;
    *(void *)(v41 + 32) = a3;
    *(void *)(v41 + 40) = v89;
    *(unsigned char *)(v41 + 48) = v11 != 0;
    isdouble a = paperKitBundle.super.isa;
    id v43 = v88;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v96._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v96._object = (void *)0x800000020C85B1B0;
    v44._uint64_t countAndFlagsBits = 2037411651;
    v44._object = (void *)0xE400000000000000;
    v45.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v45.value._object = (void *)0xEB00000000656C62;
    v46._uint64_t countAndFlagsBits = 0;
    v46._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v44, v45, (NSBundle)isa, v46, v96);
    char v47 = (void *)MEMORY[0x21054D080](0x642E6E6F2E636F64, 0xEA0000000000636FLL);
    id v48 = objc_msgSend(v91, sel_systemImageNamed_, v47);

    MEMORY[0x21054D080]();
    *(void *)(inited + 40) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    *(void *)(inited + 48) = 0;
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = v43;
    *(void *)(v49 + 24) = v34;
    *(void *)(v49 + 32) = a3;
    *(void *)(v49 + 40) = v89;
    *(unsigned char *)(v49 + 48) = v11 != 0;
    Class v50 = paperKitBundle.super.isa;
    uint64_t v51 = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v97._uint64_t countAndFlagsBits = 0xD000000000000023;
    v97._object = (void *)0x800000020C85B1F0;
    v52._uint64_t countAndFlagsBits = 0x746163696C707544;
    v52._object = (void *)0xE900000000000065;
    v53.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v53.value._object = (void *)0xEB00000000656C62;
    v54._uint64_t countAndFlagsBits = 0;
    v54._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v52, v53, (NSBundle)v50, v54, v97);
    uint64_t v55 = (void *)MEMORY[0x21054D080](0xD000000000000015, 0x800000020C851400);
    id v56 = objc_msgSend(v91, sel_systemImageNamed_, v55);

    MEMORY[0x21054D080](0xD000000000000018, 0x800000020C85B220);
    uint64_t v57 = inited;
    *(void *)(inited + 56) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    v93[3] = &type metadata for PencilAndPaperFeatureFlags;
    v93[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
    LOBYTE(v93[0]) = 6;
    LOBYTE(v49) = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
    uint64_t v58 = 0;
    if (v49)
    {
      if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))((*MEMORY[0x263F8EED0] & *v51) + 0x4B8))(v34, v35, v89, v11))
      {
        uint64_t v59 = swift_allocObject();
        *(void *)(v59 + 16) = v51;
        *(void *)(v59 + 24) = v34;
        *(void *)(v59 + 32) = v35;
        *(void *)(v59 + 40) = v89;
        *(unsigned char *)(v59 + 48) = v11 != 0;
        Class v60 = paperKitBundle.super.isa;
        uint64_t v61 = v51;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v62._uint64_t countAndFlagsBits = 0xD000000000000016;
        v98._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
        v98._object = (void *)0x800000020C85D390;
        v62._object = (void *)0x800000020C851840;
        v63.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
        v63.value._object = (void *)0xEB00000000656C62;
        v64._uint64_t countAndFlagsBits = 0;
        v64._object = (void *)0xE000000000000000;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v62, v63, (NSBundle)v60, v64, v98);
        uint64_t v65 = (void *)MEMORY[0x21054D080](0xD000000000000013, 0x800000020C851890);
        id v66 = objc_msgSend(v91, sel_systemImageNamed_, v65);

        uint64_t v57 = inited;
        uint64_t v58 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
      }
      else
      {
        uint64_t v58 = 0;
      }
    }
    *(void *)(v57 + 64) = v58;
    v93[0] = v57;
    specialized Array._endMutation()();
    uint64_t v67 = AnyCanvas.createImageActionWithDivider(_:)(v34, v35, v89, v11);
    specialized Array.append<A>(contentsOf:)(v67);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    unint64_t v68 = swift_initStackObject();
    *(_OWORD *)(v68 + 16) = xmmword_20C835790;
    uint64_t v69 = swift_allocObject();
    *(void *)(v69 + 16) = v51;
    *(void *)(v69 + 24) = v34;
    *(void *)(v69 + 32) = v35;
    *(void *)(v69 + 40) = v89;
    *(unsigned char *)(v69 + 48) = v11 != 0;
    Class v70 = paperKitBundle.super.isa;
    unint64_t v71 = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v99._uint64_t countAndFlagsBits = 0xD000000000000020;
    v99._object = (void *)0x800000020C85B240;
    v72._uint64_t countAndFlagsBits = 0x6574656C6544;
    v72._object = (void *)0xE600000000000000;
    v73.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v73.value._object = (void *)0xEB00000000656C62;
    v74._uint64_t countAndFlagsBits = 0;
    v74._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v72, v73, (NSBundle)v70, v74, v99);
    id v75 = (void *)MEMORY[0x21054D080](0x6873617274, 0xE500000000000000);
    id v76 = objc_msgSend(v91, sel_systemImageNamed_, v75);

    MEMORY[0x21054D080](0xD000000000000015, 0x800000020C85B270);
    *(void *)(v68 + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    specialized Array._endMutation()();
    uint64_t v77 = specialized _arrayForceCast<A, B>(_:)(v68);
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v77);
    uint64_t v78 = v93[0];
    uint64_t v92 = MEMORY[0x263F8EE78];
    uint64_t v79 = *(void *)(v93[0] + 16);
    if (v79)
    {
      swift_bridgeObjectRetain_n();
      for (uint64_t i = 0; i != v79; ++i)
      {
        CGRect v81 = *(void **)(v78 + 8 * i + 32);
        if (v81)
        {
          id v82 = v81;
          MEMORY[0x21054D330](v82, v83, v84, v85, v86);
          if (*(void *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v31 = v92;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease_n();
  }
  return v31;
}

void closure #1 in AnyCanvas.actions(canvasElementViews:members:)(void **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_8;
    }
  }
  if ((a2 & 0xC000000000000001) != 0) {
    id v5 = (id)MEMORY[0x21054E050](0, a2);
  }
  else {
    id v5 = *(id *)(a2 + 32);
  }
  uint64_t v6 = v5;
  type metadata accessor for AnyCanvasElementView();
  char v7 = static NSObject.== infix(_:_:)();

  if (v7) {
    goto LABEL_6;
  }
  if (v4 == 1) {
    goto LABEL_8;
  }
  if ((a2 & 0xC000000000000001) == 0)
  {
    id v13 = *(id *)(a2 + 40);
    char v14 = static NSObject.== infix(_:_:)();

    if (v14) {
      goto LABEL_6;
    }
    if (v4 != 2)
    {
      uint64_t v15 = 6;
      do
      {
        uint64_t v16 = v15 - 3;
        if (__OFADD__(v15 - 4, 1)) {
          goto LABEL_28;
        }
        id v17 = *(id *)(a2 + 8 * v15);
        char v18 = static NSObject.== infix(_:_:)();

        if (v18) {
          goto LABEL_6;
        }
        ++v15;
      }
      while (v16 != v4);
    }
LABEL_8:
    uint64_t v8 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *__return_ptr, uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x200))(&v19, v8);
    return;
  }
  MEMORY[0x21054E050](1, a2);
  char v9 = static NSObject.== infix(_:_:)();
  swift_unknownObjectRelease();
  if (v9)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return;
  }
  if (v4 == 2) {
    goto LABEL_8;
  }
  uint64_t v10 = 2;
  while (1)
  {
    MEMORY[0x21054E050](v10, a2);
    uint64_t v11 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    char v12 = static NSObject.== infix(_:_:)();
    swift_unknownObjectRelease();
    if (v12) {
      goto LABEL_6;
    }
    ++v10;
    if (v11 == v4) {
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, unint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      char v7 = (a1 & 0xC000000000000001) != 0
         ? (void *)MEMORY[0x21054E050](v6 - 4, a1)
         : *(id *)(a1 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      char v14 = v7;
      closure #1 in AnyCanvas.actions(canvasElementViews:members:)(&v14, a2);
      if (v2)
      {
        swift_bridgeObjectRelease();

        return v12 & 1;
      }
      char v11 = v10;

      if (v11)
      {
        swift_bridgeObjectRelease();
        char v12 = 1;
        return v12 & 1;
      }
      ++v6;
      if (v9 == v5) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  char v12 = 0;
  return v12 & 1;
}

void _s8PaperKit9AnyCanvasC9cutActionySo8UIActionCAA0D7MembersVFyAFcfU_TA_0(uint64_t a1)
{
}

void _s8PaperKit9AnyCanvasC10copyActionySo8UIActionCAA0D7MembersVFyAFcfU_TA_0(uint64_t a1)
{
}

void _s8PaperKit9AnyCanvasC15duplicateActionySo8UIActionCAA0D7MembersVFyAFcfU_TA_0(uint64_t a1)
{
}

void _s8PaperKit9AnyCanvasC12deleteActionySo8UIActionCAA0D7MembersVFyAFcfU_TA_0(uint64_t a1)
{
}

void partial apply for closure #1 in AnyCanvas.convertToHandwritingAction(_:)(uint64_t a1)
{
}

void partial apply for closure #1 in AnyCanvas.createImageAction(_:)(uint64_t a1)
{
}

void _s8PaperKit9AnyCanvasC9cutActionySo8UIActionCAA0D7MembersVFyAFcfU_TATm_0(uint64_t a1, char a2)
{
  AnyCanvas.performSelectionAction(_:_:at:)(a2, *(void *)(v2 + 24), *(void **)(v2 + 32), *(const char **)(v2 + 40), *(unsigned char *)(v2 + 48), 0, 0, 1);
}

uint64_t sub_20C6C81C4()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t partial apply for closure #7 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  char v10 = *(unsigned char *)(v1 + 64);
  char v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *char v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #7 in AnyCanvas.performSelectionAction(_:_:at:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #6 in AnyCanvas.performSelectionAction(_:_:at:)()
{
  return closure #6 in AnyCanvas.performSelectionAction(_:_:at:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
}

uint64_t block_copy_helper_55(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_55()
{
  return swift_release();
}

uint64_t _s9Coherence9CRKeyPathVACSQAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20C6C8380()
{
  return MEMORY[0x270FA0238](v0, 41, 7);
}

uint64_t partial apply for closure #5 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #5 in AnyCanvas.performSelectionAction(_:_:at:)(a1, a2, (uint64_t)&unk_26C15EF48, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #5 in AnyCanvas.performSelectionAction(_:_:at:));
}

uint64_t partial apply for closure #3 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #5 in AnyCanvas.performSelectionAction(_:_:at:)(a1, a2, (uint64_t)&unk_26C15EF20, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #3 in AnyCanvas.performSelectionAction(_:_:at:));
}

uint64_t partial apply for closure #5 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #3 in AnyCanvas.performSelectionAction(_:_:at:)(a1, a2, *(void **)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(unsigned __int8 *)(v4 + 40), a3, a4);
}

uint64_t partial apply for closure #1 in closure #1 in closure #3 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CRStableAsset() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = (uint64_t)v1 + v5;
  char v11 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  char v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *char v14 = v2;
  v14[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in closure #1 in closure #3 in AnyCanvas.performSelectionAction(_:_:at:)(a1, v6, v7, v8, v9, v10, v12, v13);
}

uint64_t objectdestroy_40Tm()
{
  uint64_t v1 = type metadata accessor for CRStableAsset();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in closure #5 in AnyCanvas.performSelectionAction(_:_:at:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CRStableAsset() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = (uint64_t)v1 + v5;
  char v11 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  char v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *char v14 = v2;
  v14[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in closure #5 in AnyCanvas.performSelectionAction(_:_:at:)(a1, v6, v7, v8, v9, v10, v12, v13);
}

uint64_t initializeBufferWithCopyOfBuffer for GraphableExpressionView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v6;
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(void *)(a1 + 32) = a2[4];
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (uint64_t *)((char *)a2 + v7);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for EnvironmentValues();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for GraphableExpressionView(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for EnvironmentValues();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t initializeWithCopy for GraphableExpressionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (void *)(a2 + v5);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for EnvironmentValues();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *uint64_t v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for GraphableExpressionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    outlined destroy of StocksKitCurrencyCache.Provider?(a1 + v6, &demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for EnvironmentValues();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for GraphableExpressionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for EnvironmentValues();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for GraphableExpressionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (const void *)(a2 + v6);
    outlined destroy of StocksKitCurrencyCache.Provider?(a1 + v6, &demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for EnvironmentValues();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphableExpressionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C6C8E58);
}

uint64_t sub_20C6C8E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for GraphableExpressionView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C6C8F20);
}

uint64_t sub_20C6C8F20(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for GraphableExpressionView()
{
  uint64_t result = type metadata singleton initialization cache for GraphableExpressionView;
  if (!type metadata singleton initialization cache for GraphableExpressionView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for GraphableExpressionView()
{
  type metadata accessor for Environment<EnvironmentValues>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Environment<EnvironmentValues>.Content()
{
  if (!lazy cache variable for type metadata for Environment<EnvironmentValues>.Content)
  {
    type metadata accessor for EnvironmentValues();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<EnvironmentValues>.Content);
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in GraphableExpressionView()
{
  return swift_getOpaqueTypeConformance2();
}

void one-time initialization function for viewPadding()
{
  static GraphableExpressionView.viewPadding = 0x4020000000000000;
}

void one-time initialization function for checkmarkSize()
{
  static GraphableExpressionView.checkmarkSize = 0x4040000000000000;
}

double one-time initialization function for insetForColorButton()
{
  if (one-time initialization token for viewPadding != -1) {
    swift_once();
  }
  double result = *(double *)&static GraphableExpressionView.viewPadding + 30.0;
  *(double *)&static GraphableExpressionView.insetForColorButton = *(double *)&static GraphableExpressionView.viewPadding
                                                                 + 30.0;
  return result;
}

void GraphableExpressionView.expressionColorDescription.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
  MEMORY[0x21054A870](&v17, v0);
  uint64_t v1 = v17;
  swift_getKeyPath();
  _s8PaperKit24GraphableExpressionStateCAC11Observation10ObservableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 32);
  swift_retain();
  swift_release();
  if (!v2) {
    static Color.clear.getter();
  }
  type metadata accessor for UIColor();
  uint64_t v3 = (void *)UIColor.init(_:)();
  id v4 = objc_msgSend(self, sel_clearColor);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {

    return;
  }
  id v6 = objc_msgSend(v3, sel_accessibilityName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v7._uint64_t countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v18._object = (void *)0x800000020C85D4D0;
  v8._uint64_t countAndFlagsBits = 0x7974696361704FLL;
  v8._object = (void *)0xE700000000000000;
  v9.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v9.value._object = (void *)0xEB00000000656C62;
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v18._uint64_t countAndFlagsBits = 0xD000000000000030;
  Swift::String v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, paperKitBundle, v10, v18);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  uint64_t v13 = (CGColor *)objc_msgSend(v3, sel_CGColor);
  Alphdouble a = CGColorGetAlpha(v13);

  double v15 = Alpha * 100.0;
  if ((~COERCE__INT64(Alpha * 100.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v15 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v15 < 9.22337204e18)
  {
    uint64_t v17 = (uint64_t)v15;
    v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);

    swift_bridgeObjectRelease();
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t closure #1 in GraphableExpressionView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v220 = a2;
  uint64_t v218 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>, Spacer>.Storage);
  MEMORY[0x270FA5388](v218);
  uint64_t v219 = (double *)((char *)&v175 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>);
  uint64_t v181 = *(void *)(v183 - 8);
  MEMORY[0x270FA5388](v183);
  unint64_t v179 = (char *)&v175 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>);
  MEMORY[0x270FA5388](v177);
  unint64_t v182 = (char *)&v175 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>);
  MEMORY[0x270FA5388](v178);
  uint64_t v180 = (uint64_t)&v175 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>);
  MEMORY[0x270FA5388](v184);
  uint64_t v185 = (uint64_t)&v175 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  MEMORY[0x270FA5388](v215);
  uint64_t v187 = (char *)&v175 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v186 = (char *)&v175 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v188 = (uint64_t)&v175 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>, Spacer>);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v217 = (uint64_t)&v175 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  char v216 = (char *)&v175 - v16;
  uint64_t v211 = type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x270FA5388](v211);
  uint64_t v210 = (char *)&v175 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v209 = type metadata accessor for AttributedString();
  uint64_t v208 = *(void *)(v209 - 8);
  MEMORY[0x270FA5388](v209);
  uint64_t v207 = (char *)&v175 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for GraphableExpressionView();
  uint64_t v199 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v176 = (uint64_t)&v175 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v200 = v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v198 = (uint64_t)&v175 - v22;
  uint64_t v196 = type metadata accessor for CalculateExpressionTypesetView();
  uint64_t v194 = *(void *)(v196 - 8);
  MEMORY[0x270FA5388](v196);
  id v193 = (char *)&v175 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>);
  MEMORY[0x270FA5388](v192);
  double v195 = (char *)&v175 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>, _PaddingLayout>);
  MEMORY[0x270FA5388](v202);
  uint64_t v197 = (uint64_t)&v175 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.onTapGesture(count:perform:)>>.0);
  uint64_t v203 = *(void *)(v204 - 8);
  MEMORY[0x270FA5388](v204);
  uint64_t v201 = (char *)&v175 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>);
  MEMORY[0x270FA5388](v205);
  CGRect v206 = (char *)&v175 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v214 = (char *)&v175 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v213 = (uint64_t)&v175 - v31;
  uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>);
  MEMORY[0x270FA5388](v189);
  uint64_t v33 = (char *)&v175 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  Swift::String v36 = (char *)&v175 - v35;
  uint64_t v190 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>);
  MEMORY[0x270FA5388](v190);
  Swift::String v38 = (char *)&v175 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v191 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _PaddingLayout>);
  MEMORY[0x270FA5388](v191);
  uint64_t v224 = (uint64_t)&v175 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  uint64_t v223 = (uint64_t)&v175 - v41;
  *(void *)uint64_t v229 = *(void *)a1;
  *(_OWORD *)&v229[8] = *(_OWORD *)(a1 + 8);
  uint64_t v225 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
  MEMORY[0x21054A870](&v238);
  uint64_t v42 = v238;
  swift_getKeyPath();
  *(void *)uint64_t v229 = v42;
  uint64_t v221 = _s8PaperKit24GraphableExpressionStateCAC11Observation10ObservableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v43 = *(void *)(v42 + 32);
  swift_retain();
  swift_release();
  if (!v43)
  {
    id v44 = objc_msgSend(self, sel_clearColor);
    uint64_t v43 = MEMORY[0x21054A6C0](v44);
  }
  swift_retain();
  char v45 = static Edge.Set.leading.getter();
  if (one-time initialization token for viewPadding != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)uint64_t v229 = v43;
  *(_WORD *)&v229[8] = 256;
  v229[16] = v45;
  *(void *)&v229[24] = v47;
  *(void *)&long long v230 = v49;
  *((void *)&v230 + 1) = v51;
  uint64_t v231 = v53;
  char v232 = 0;
  uint64_t v233 = v238;
  char v234 = v239;
  uint64_t v235 = v240;
  char v236 = v241;
  long long v237 = v242;
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v243._uint64_t countAndFlagsBits = 0xD000000000000033;
  v243._object = (void *)0x800000020C85D3C0;
  v54._uint64_t countAndFlagsBits = 0x726F6C6F43;
  v54._object = (void *)0xE500000000000000;
  v55.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v55.value._object = (void *)0xEB00000000656C62;
  v56._uint64_t countAndFlagsBits = 0;
  v56._object = (void *)0xE000000000000000;
  Swift::String v57 = NSLocalizedString(_:tableName:bundle:value:comment:)(v54, v55, paperKitBundle, v56, v243);
  uint64_t countAndFlagsBits = v57._countAndFlagsBits;
  *(void *)&long long v227 = v57._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  unint64_t v222 = lazy protocol witness table accessor for type String and conformance String();
  View.accessibilityLabel<A>(_:)();
  uint64_t v212 = v43;
  swift_release();
  swift_bridgeObjectRelease();
  GraphableExpressionView.expressionColorDescription.getter();
  *(void *)uint64_t v229 = v58;
  *(void *)&v229[8] = v59;
  ModifiedContent<>.accessibilityValue<A>(_:)();
  swift_bridgeObjectRelease();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>);
  char v60 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v36, (uint64_t)v38, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>);
  uint64_t v69 = &v38[*(int *)(v190 + 36)];
  char *v69 = v60;
  *((void *)v69 + 1) = v62;
  *((void *)v69 + 2) = v64;
  *((void *)v69 + 3) = v66;
  *((void *)v69 + 4) = v68;
  v69[40] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v36, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>);
  char v70 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v72 = v71;
  uint64_t v74 = v73;
  uint64_t v76 = v75;
  uint64_t v78 = v77;
  uint64_t v79 = v224;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v38, v224, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>);
  uint64_t v80 = v79 + *(int *)(v191 + 36);
  *(unsigned char *)uint64_t v80 = v70;
  *(void *)(v80 + 8) = v72;
  *(void *)(v80 + 16) = v74;
  *(void *)(v80 + 24) = v76;
  *(void *)(v80 + 32) = v78;
  *(unsigned char *)(v80 + 40) = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v38, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v79, v223, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _PaddingLayout>);
  *(void *)uint64_t v229 = *(void *)a1;
  *(_OWORD *)&v229[8] = *(_OWORD *)(a1 + 8);
  MEMORY[0x21054A870](&countAndFlagsBits, v225);
  uint64_t v81 = countAndFlagsBits;
  swift_getKeyPath();
  *(void *)uint64_t v229 = v81;
  uint64_t v82 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  swift_release();
  uint64_t v83 = v193;
  CalculateExpressionTypesetView.init(expression:result:showResult:)();
  LOBYTE(v81) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v85 = v84;
  uint64_t v87 = v86;
  uint64_t v89 = v88;
  uint64_t v91 = v90;
  uint64_t v92 = v194;
  uint64_t v93 = (uint64_t)v195;
  uint64_t v94 = v196;
  (*(void (**)(char *, char *, uint64_t))(v194 + 16))(v195, v83, v196);
  uint64_t v95 = v93 + *(int *)(v192 + 36);
  *(unsigned char *)uint64_t v95 = v81;
  *(void *)(v95 + 8) = v85;
  *(void *)(v95 + 16) = v87;
  *(void *)(v95 + 24) = v89;
  *(void *)(v95 + 32) = v91;
  *(unsigned char *)(v95 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v92 + 8))(v83, v94);
  LOBYTE(v81) = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v97 = v96;
  uint64_t v99 = v98;
  uint64_t v101 = v100;
  uint64_t v103 = v102;
  uint64_t v104 = v197;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v93, v197, &demangling cache variable for type metadata for ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>);
  uint64_t v105 = v202;
  uint64_t v106 = v104 + *(int *)(v202 + 36);
  *(unsigned char *)uint64_t v106 = v81;
  *(void *)(v106 + 8) = v97;
  *(void *)(v106 + 16) = v99;
  *(void *)(v106 + 24) = v101;
  *(void *)(v106 + 32) = v103;
  *(unsigned char *)(v106 + 40) = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?(v93, &demangling cache variable for type metadata for ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>);
  uint64_t v107 = v198;
  outlined init with copy of GraphableExpressionView(a1, v198);
  uint64_t v108 = *(unsigned __int8 *)(v199 + 80);
  uint64_t v109 = (v108 + 16) & ~v108;
  v200 += v109;
  uint64_t v199 = v108 | 7;
  uint64_t v110 = swift_allocObject();
  outlined init with take of GraphableExpressionView(v107, v110 + v109);
  uint64_t v111 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  uint64_t v112 = v201;
  View.onTapGesture(count:perform:)();
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?(v104, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>, _PaddingLayout>);
  v244._object = (void *)0x800000020C85D400;
  v113._uint64_t countAndFlagsBits = 0x6E6F697461757145;
  v113._object = (void *)0xE800000000000000;
  v114.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v114.value._object = (void *)0xEB00000000656C62;
  v115._uint64_t countAndFlagsBits = 0;
  v115._object = (void *)0xE000000000000000;
  v244._uint64_t countAndFlagsBits = 0xD000000000000028;
  *(Swift::String *)uint64_t v229 = NSLocalizedString(_:tableName:bundle:value:comment:)(v113, v114, paperKitBundle, v115, v244);
  uint64_t countAndFlagsBits = v105;
  *(void *)&long long v227 = v111;
  swift_getOpaqueTypeConformance2();
  uint64_t v116 = (uint64_t)v206;
  uint64_t v117 = v204;
  View.accessibilityLabel<A>(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v203 + 8))(v112, v117);
  *(void *)uint64_t v229 = *(void *)a1;
  *(_OWORD *)&v229[8] = *(_OWORD *)(a1 + 8);
  MEMORY[0x21054A870](&countAndFlagsBits, v225);
  uint64_t v118 = countAndFlagsBits;
  swift_getKeyPath();
  *(void *)uint64_t v229 = v118;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  swift_release();
  CGFloat v119 = v207;
  CalculateExpression.accessibilityMathEquationDescription.getter();
  swift_release();
  AttributedString.characters.getter();
  (*(void (**)(char *, uint64_t))(v208 + 8))(v119, v209);
  _s8PaperKit24GraphableExpressionStateCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
  *(void *)uint64_t v229 = String.init<A>(_:)();
  *(void *)&v229[8] = v120;
  uint64_t v121 = (uint64_t)v214;
  ModifiedContent<>.accessibilityValue<A>(_:)();
  swift_bridgeObjectRelease();
  outlined destroy of StocksKitCurrencyCache.Provider?(v116, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>);
  uint64_t v122 = v121;
  uint64_t v123 = v213;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v121, v213, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>);
  uint64_t v124 = *(void *)(v82 + 32);
  v229[0] = *(unsigned char *)(v82 + 24);
  *(void *)&v229[8] = v124;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  if (countAndFlagsBits == 1)
  {
    uint64_t v125 = v176;
    outlined init with copy of GraphableExpressionView(v82, v176);
    uint64_t v126 = swift_allocObject();
    uint64_t v127 = outlined init with take of GraphableExpressionView(v125, v126 + v109);
    MEMORY[0x270FA5388](v127);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>);
    lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>> and conformance <> _ConditionalContent<A, B>();
    uint64_t v128 = v179;
    Button.init(action:label:)();
    uint64_t v129 = v216;
    if (one-time initialization token for checkmarkSize != -1) {
      swift_once();
    }
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v130 = v181;
    uint64_t v131 = (uint64_t)v182;
    uint64_t v132 = v183;
    (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v182, v128, v183);
    double v133 = (_OWORD *)(v131 + *(int *)(v177 + 36));
    long long v134 = *(_OWORD *)&v229[16];
    *double v133 = *(_OWORD *)v229;
    v133[1] = v134;
    v133[2] = v230;
    (*(void (**)(char *, uint64_t))(v130 + 8))(v128, v132);
    LOBYTE(v132) = static Edge.Set.leading.getter();
    EdgeInsets.init(_all:)();
    uint64_t v136 = v135;
    uint64_t v138 = v137;
    uint64_t v140 = v139;
    uint64_t v142 = v141;
    uint64_t v143 = v180;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v131, v180, &demangling cache variable for type metadata for ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>);
    uint64_t v144 = v143 + *(int *)(v178 + 36);
    *(unsigned char *)uint64_t v144 = v132;
    *(void *)(v144 + 8) = v136;
    *(void *)(v144 + 16) = v138;
    *(void *)(v144 + 24) = v140;
    *(void *)(v144 + 32) = v142;
    *(unsigned char *)(v144 + 40) = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?(v131, &demangling cache variable for type metadata for ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>);
    uint64_t v145 = v185;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v143, v185, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>);
    *(unsigned char *)(v145 + *(int *)(v184 + 36)) = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?(v143, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>);
    v245._uint64_t countAndFlagsBits = 0xD000000000000035;
    v245._object = (void *)0x800000020C85D430;
    v146._uint64_t countAndFlagsBits = 0x696C696269736956;
    v146._object = (void *)0xEA00000000007974;
    v147.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v147.value._object = (void *)0xEB00000000656C62;
    v148._uint64_t countAndFlagsBits = 0;
    v148._object = (void *)0xE000000000000000;
    Swift::String v149 = NSLocalizedString(_:tableName:bundle:value:comment:)(v146, v147, paperKitBundle, v148, v245);
    uint64_t countAndFlagsBits = v149._countAndFlagsBits;
    *(void *)&long long v227 = v149._object;
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>();
    uint64_t v150 = (uint64_t)v187;
    View.accessibilityLabel<A>(_:)();
    swift_bridgeObjectRelease();
    outlined destroy of StocksKitCurrencyCache.Provider?(v145, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>);
    uint64_t countAndFlagsBits = *(void *)v82;
    long long v227 = *(_OWORD *)(v82 + 8);
    MEMORY[0x21054A870](&v228, v225);
    uint64_t v151 = v228;
    swift_getKeyPath();
    uint64_t countAndFlagsBits = v151;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LODWORD(v145) = *(unsigned __int8 *)(v151 + 24);
    swift_release();
    if (v145 == 1)
    {
      unint64_t v152 = 0xD000000000000029;
      unint64_t v174 = 0x800000020C85D4A0;
      uint64_t v153 = 0x656C6269736956;
      unint64_t v154 = 0xE700000000000000;
      uint64_t v155 = 0x617A696C61636F4CLL;
      unint64_t v156 = 0xEB00000000656C62;
      uint64_t v157 = 0;
      unint64_t v158 = 0xE000000000000000;
    }
    else
    {
      unint64_t v174 = 0x800000020C85D470;
      uint64_t v153 = 0x6E6564646948;
      unint64_t v154 = 0xE600000000000000;
      uint64_t v155 = 0x617A696C61636F4CLL;
      unint64_t v156 = 0xEB00000000656C62;
      uint64_t v157 = 0;
      unint64_t v158 = 0xE000000000000000;
      unint64_t v152 = 0xD000000000000028;
    }
    Swift::String v161 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v153, *(Swift::String_optional *)&v155, paperKitBundle, *(Swift::String *)&v157, *(Swift::String *)&v152);
    uint64_t countAndFlagsBits = v161._countAndFlagsBits;
    *(void *)&long long v227 = v161._object;
    int v162 = v186;
    ModifiedContent<>.accessibilityValue<A>(_:)();
    swift_bridgeObjectRelease();
    outlined destroy of StocksKitCurrencyCache.Provider?(v150, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
    uint64_t v163 = (uint64_t)v162;
    uint64_t v164 = v188;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v163, v188, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v164, (uint64_t)v219, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    uint64_t v160 = (uint64_t)v129;
    _ConditionalContent<>.init(storage:)();
    outlined destroy of StocksKitCurrencyCache.Provider?(v164, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
  }
  else
  {
    id v159 = v219;
    *uint64_t v219 = *(double *)&static GraphableExpressionView.viewPadding + 22.0;
    *((unsigned char *)v159 + 8) = 0;
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    uint64_t v160 = (uint64_t)v216;
    _ConditionalContent<>.init(storage:)();
  }
  uint64_t v165 = v223;
  uint64_t v166 = v224;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v223, v224, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _PaddingLayout>);
  uint64_t v167 = v122;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v123, v122, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>);
  uint64_t v168 = v217;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v160, v217, &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>, Spacer>);
  uint64_t v169 = v160;
  uint64_t v170 = v220;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v166, v220, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _PaddingLayout>);
  uint64_t v171 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>, Spacer, _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>, Spacer>));
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v167, v170 + v171[12], &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>);
  uint64_t v172 = v170 + v171[16];
  *(void *)uint64_t v172 = 0;
  *(unsigned char *)(v172 + 8) = 1;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v168, v170 + v171[20], &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>, Spacer>);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?(v169, &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>, Spacer>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v123, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v165, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _PaddingLayout>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v168, &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>, Spacer>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v167, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v166, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _PaddingLayout>);
}

uint64_t closure #1 in closure #1 in GraphableExpressionView.body.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
  MEMORY[0x21054A870](&v3, v0);
  uint64_t v1 = v3;
  swift_getKeyPath();
  _s8PaperKit24GraphableExpressionStateCAC11Observation10ObservableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  *(unsigned char *)(v1 + 24) = (*(unsigned char *)(v1 + 24) & 1) == 0;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  return swift_release();
}

uint64_t closure #3 in closure #1 in GraphableExpressionView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
  MEMORY[0x270FA5388](v41);
  uint64_t v35 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v36 = (uint64_t)&v34 - v5;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>.Storage);
  MEMORY[0x270FA5388](v37);
  uint64_t v39 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DynamicTypeSize();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.dynamicTypeSize(_:)>>.0);
  uint64_t v11 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v42 = *(void *)a1;
  long long v43 = *(_OWORD *)(a1 + 8);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionState>);
  MEMORY[0x21054A870](&v44, v17);
  uint64_t v18 = v44;
  swift_getKeyPath();
  uint64_t v42 = v18;
  _s8PaperKit24GraphableExpressionStateCAC11Observation10ObservableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v19 = *(unsigned __int8 *)(v18 + 24);
  swift_release();
  uint64_t v20 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v42 = Image.init(systemName:)();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F18D38], v7);
  if (v19 == 1)
  {
    uint64_t v21 = MEMORY[0x263F1B570];
    uint64_t v22 = MEMORY[0x263F1B558];
    View.dynamicTypeSize(_:)();
    (*v20)(v10, v7);
    swift_release();
    uint64_t v23 = v38;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v13, v38);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v39, v16, v23);
    swift_storeEnumTagMultiPayload();
    uint64_t v42 = v21;
    *(void *)&long long v43 = v22;
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v23);
  }
  else
  {
    uint64_t v25 = MEMORY[0x263F1B570];
    View.dynamicTypeSize(_:)();
    (*v20)(v10, v7);
    swift_release();
    id v26 = objc_msgSend(self, sel_separatorColor);
    uint64_t v27 = MEMORY[0x21054A5D0](v26);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v42 = v27;
    swift_retain();
    uint64_t v29 = AnyShapeStyle.init<A>(_:)();
    uint64_t v30 = (uint64_t)v35;
    uint64_t v31 = v38;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v35, v16, v38);
    swift_release();
    uint64_t v32 = (uint64_t *)(v30 + *(int *)(v41 + 36));
    *uint64_t v32 = KeyPath;
    v32[1] = v29;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v31);
    uint64_t v33 = v36;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v30, v36, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v33, v39, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
    swift_storeEnumTagMultiPayload();
    uint64_t v42 = v25;
    *(void *)&long long v43 = MEMORY[0x263F1B558];
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>();
    _ConditionalContent<>.init(storage:)();
    return outlined destroy of StocksKitCurrencyCache.Provider?(v33, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
  }
}

uint64_t protocol witness for View.body.getter in conformance GraphableExpressionView@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static VerticalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>, Spacer, _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>, Spacer>)>>);
  return closure #1 in GraphableExpressionView.body.getter(v1, a1 + *(int *)(v3 + 44));
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type _ShapeView<Circle, Color> and conformance _ShapeView<A, B>, &demangling cache variable for type metadata for _ShapeView<Circle, Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined init with take of GraphableExpressionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GraphableExpressionView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout>);
    _s8PaperKit24GraphableExpressionStateCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type CalculateExpressionTypesetView and conformance CalculateExpressionTypesetView, MEMORY[0x263F2FD18]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<CalculateExpressionTypesetView, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>();
    _s8PaperKit24GraphableExpressionStateCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8PaperKit24GraphableExpressionStateCAC11Observation10ObservableAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t objectdestroyTm_7()
{
  uint64_t v1 = (int *)(type metadata accessor for GraphableExpressionView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v5 = v0 + v3 + v1[8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for EnvironmentValues();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in GraphableExpressionView.body.getter()
{
  return closure #1 in closure #1 in GraphableExpressionView.body.getter();
}

uint64_t partial apply for closure #3 in closure #1 in GraphableExpressionView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #3 in closure #1 in GraphableExpressionView.body.getter(*(void *)(v1 + 16), a1);
}

uint64_t key path getter for EnvironmentValues.tint : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_20C6CBA78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.tint : EnvironmentValues, serialized()
{
  return EnvironmentValues.tint.setter();
}

uint64_t sub_20C6CBAD0()
{
  return EnvironmentValues.tint.setter();
}

unint64_t type metadata accessor for UIColor()
{
  unint64_t result = lazy cache variable for type metadata for UIColor;
  if (!lazy cache variable for type metadata for UIColor)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  }
  return result;
}

uint64_t sub_20C6CBB3C()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>, Spacer, _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>, Spacer>)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, _FrameLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, AccessibilityAttachmentModifier>, Spacer, _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>, Spacer>)>>);
}

uint64_t specialized MagicPaperUsageAnalyticsEvent.countGroups(in:)(char *a1)
{
  uint64_t v51 = type metadata accessor for PKDrawing();
  uint64_t v4 = *(char **)(v51 - 8);
  double v5 = MEMORY[0x270FA5388](v51);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(a1, sel_attachmentViews, v5);
  type metadata accessor for PKAttachmentView();
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62) {
    goto LABEL_12;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v49 = a1;
  if (v10)
  {
    while (v10 >= 1)
    {
      uint64_t v11 = 0;
      a1 = 0;
      unint64_t v1 = (unint64_t)(v4 + 8);
      while (1)
      {
        uint64_t v12 = (v9 & 0xC000000000000001) != 0
            ? (char *)MEMORY[0x21054E050](v11, v9)
            : (char *)*(id *)(v9 + 8 * v11 + 32);
        uint64_t v4 = v12;
        id v13 = objc_msgSend(v12, sel_drawing, v49);
        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v2 = PKDrawing.strokes.getter();
        (*(void (**)(char *, uint64_t))v1)(v7, v51);
        uint64_t v14 = *(void *)(v2 + 16);

        swift_bridgeObjectRelease();
        BOOL v15 = __OFADD__(a1, v14);
        a1 += v14;
        if (v15) {
          break;
        }
        if (v10 == ++v11) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_12:
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v49 = a1;
      if (!v10) {
        goto LABEL_13;
      }
    }
LABEL_46:
    __break(1u);
  }
  else
  {
LABEL_13:
    a1 = 0;
LABEL_14:
    swift_bridgeObjectRelease_n();
    uint64_t v16 = type metadata accessor for MagicPaperUsageReflowEvent();
    *(void *)(v50 + *(int *)(v16 + 36)) = a1;
    type metadata accessor for TiledTextView();
    uint64_t result = swift_dynamicCastClass();
    if (!result) {
      return result;
    }
    uint64_t v51 = v16;
    unint64_t v18 = TiledTextView.paperAttachments.getter();
    unint64_t v1 = v18;
    uint64_t v2 = MEMORY[0x263F8EE78];
    unint64_t v52 = MEMORY[0x263F8EE78];
    if (!(v18 >> 62))
    {
      uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v19) {
        goto LABEL_48;
      }
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v19 = result;
  if (!result)
  {
LABEL_48:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v28 = MEMORY[0x263F8EE78];
    if (MEMORY[0x263F8EE78] >> 62) {
      goto LABEL_49;
    }
    goto LABEL_24;
  }
LABEL_17:
  if (v19 < 1)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v20 = 0;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      uint64_t v21 = (void *)MEMORY[0x21054E050](v20, v1);
    }
    else {
      uint64_t v21 = *(id *)(v1 + 8 * v20 + 32);
    }
    uint64_t v22 = v21;
    ++v20;
    uint64_t v23 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v21) + 0x2F8))();
    uint64_t v25 = v24;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 32))(ObjectType, v25);

    specialized Array.append<A>(contentsOf:)(v27);
  }
  while (v19 != v20);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v28 = v52;
  if (v52 >> 62)
  {
LABEL_49:
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v29)
    {
LABEL_50:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      unint64_t v52 = v2;
      if (v19) {
        goto LABEL_34;
      }
LABEL_51:
      swift_bridgeObjectRelease();
      unint64_t v44 = MEMORY[0x263F8EE78];
LABEL_52:
      uint64_t v45 = specialized Sequence<>.uniqueElements()(v44);
      swift_bridgeObjectRelease();
      if ((v45 & 0xC000000000000001) != 0) {
        uint64_t v46 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v46 = *(void *)(v45 + 16);
      }
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v48 = v50;
      uint64_t v47 = v51;
      *(void *)(v50 + *(int *)(v51 + 48)) = v46;
      *(void *)(v48 + *(int *)(v47 + 40)) = v31;
      if (!__OFSUB__(v30, v46))
      {
        *(void *)(v48 + *(int *)(v47 + 44)) = (v30 - v46) & ~((v30 - v46) >> 63);
        return result;
      }
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v29) {
    goto LABEL_50;
  }
LABEL_25:
  if (v29 < 1)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  while (1)
  {
    uint64_t v33 = *(void **)(v28 + 8 * v32 + 32);
    uint64_t v34 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v33) + 0x118);
    uint64_t v2 = (*MEMORY[0x263F8EED0] & *v33) + 280;
    uint64_t v35 = v33;
    LOBYTE(v34) = v34();

    if ((v34 & 1) == 0)
    {
      BOOL v15 = __OFADD__(v30++, 1);
      if (v15)
      {
        __break(1u);
        goto LABEL_46;
      }
      goto LABEL_28;
    }
    BOOL v15 = __OFADD__(v31++, 1);
    if (v15) {
      break;
    }
LABEL_28:
    if (v29 == ++v32) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_33:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v52 = MEMORY[0x263F8EE78];
  if (!v19) {
    goto LABEL_51;
  }
LABEL_34:
  if (v19 >= 1)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v19; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        uint64_t v38 = (void *)MEMORY[0x21054E050](i, v1);
      }
      else {
        uint64_t v38 = *(id *)(v1 + 8 * i + 32);
      }
      uint64_t v39 = v38;
      if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v38) + 0x738))()
        && (uint64_t v41 = v40,
            uint64_t v42 = swift_getObjectType(),
            uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v42, v41),
            swift_unknownObjectRelease(),
            v43))
      {
        unint64_t v37 = dispatch thunk of CalculateDocument.expressions.getter();

        swift_release();
      }
      else
      {

        unint64_t v37 = MEMORY[0x263F8EE78];
      }
      specialized Array.append<A>(contentsOf:)(v37);
    }
    swift_bridgeObjectRelease_n();
    unint64_t v44 = v52;
    goto LABEL_52;
  }
LABEL_61:
  __break(1u);
  return result;
}

{
  unint64_t v1;
  char *v3;
  uint64_t v4;
  char *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t (*v32)(void);
  void *v33;
  uint64_t i;
  unint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  uint64_t v48 = type metadata accessor for PKDrawing();
  uint64_t v3 = *(char **)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  double v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = objc_msgSend(a1, sel_attachmentViews);
  type metadata accessor for PKAttachmentView();
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62) {
    goto LABEL_12;
  }
  id v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v46 = a1;
  if (v8)
  {
    while (v8 >= 1)
    {
      unint64_t v9 = 0;
      a1 = 0;
      unint64_t v1 = (unint64_t)(v3 + 8);
      while (1)
      {
        uint64_t v10 = (v7 & 0xC000000000000001) != 0
            ? (char *)MEMORY[0x21054E050](v9, v7)
            : (char *)*(id *)(v7 + 8 * v9 + 32);
        uint64_t v3 = v10;
        uint64_t v11 = objc_msgSend(v10, sel_drawing, v46);
        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v12 = PKDrawing.strokes.getter();
        (*(void (**)(char *, uint64_t))v1)(v5, v48);
        id v13 = *(void *)(v12 + 16);

        swift_bridgeObjectRelease();
        uint64_t v14 = __OFADD__(a1, v13);
        a1 += v13;
        if (v14) {
          break;
        }
        if (v8 == ++v9) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_12:
      swift_bridgeObjectRetain();
      id v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v46 = a1;
      if (!v8) {
        goto LABEL_13;
      }
    }
LABEL_46:
    __break(1u);
  }
  else
  {
LABEL_13:
    a1 = 0;
LABEL_14:
    swift_bridgeObjectRelease_n();
    *(void *)(v47 + 80) = a1;
    type metadata accessor for TiledTextView();
    uint64_t result = swift_dynamicCastClass();
    if (!result) {
      return result;
    }
    uint64_t v16 = TiledTextView.paperAttachments.getter();
    unint64_t v1 = v16;
    uint64_t v3 = (char *)MEMORY[0x263F8EE78];
    uint64_t v49 = MEMORY[0x263F8EE78];
    if (!(v16 >> 62))
    {
      uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v17) {
        goto LABEL_48;
      }
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v17 = result;
  if (!result)
  {
LABEL_48:
    uint64_t result = swift_bridgeObjectRelease();
    id v26 = MEMORY[0x263F8EE78];
    if (MEMORY[0x263F8EE78] >> 62) {
      goto LABEL_49;
    }
    goto LABEL_24;
  }
LABEL_17:
  if (v17 < 1)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  unint64_t v18 = 0;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      uint64_t v19 = (void *)MEMORY[0x21054E050](v18, v1);
    }
    else {
      uint64_t v19 = *(id *)(v1 + 8 * v18 + 32);
    }
    uint64_t v20 = v19;
    ++v18;
    uint64_t v21 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v19) + 0x2F8))();
    uint64_t v23 = v22;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 32))(ObjectType, v23);

    specialized Array.append<A>(contentsOf:)(v25);
  }
  while (v17 != v18);
  uint64_t result = swift_bridgeObjectRelease();
  id v26 = v49;
  if (v49 >> 62)
  {
LABEL_49:
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v27)
    {
LABEL_50:
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v49 = (unint64_t)v3;
      if (v17) {
        goto LABEL_34;
      }
LABEL_51:
      swift_bridgeObjectRelease();
      uint64_t v42 = MEMORY[0x263F8EE78];
LABEL_52:
      uint64_t v43 = specialized Sequence<>.uniqueElements()(v42);
      swift_bridgeObjectRelease();
      if ((v43 & 0xC000000000000001) != 0) {
        unint64_t v44 = __CocoaSet.count.getter();
      }
      else {
        unint64_t v44 = *(void *)(v43 + 16);
      }
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v45 = v47;
      *(void *)(v47 + 104) = v44;
      *(void *)(v45 + 88) = v29;
      if (!__OFSUB__(v28, v44))
      {
        *(void *)(v45 + 96) = (v28 - v44) & ~((v28 - v44) >> 63);
        return result;
      }
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v27) {
    goto LABEL_50;
  }
LABEL_25:
  if (v27 < 1)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  while (1)
  {
    uint64_t v31 = *(void **)(v26 + 8 * v30 + 32);
    uint64_t v32 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v31) + 0x118);
    uint64_t v3 = (char *)((*MEMORY[0x263F8EED0] & *v31) + 280);
    uint64_t v33 = v31;
    LOBYTE(v32) = v32();

    if ((v32 & 1) == 0)
    {
      uint64_t v14 = __OFADD__(v28++, 1);
      if (v14)
      {
        __break(1u);
        goto LABEL_46;
      }
      goto LABEL_28;
    }
    uint64_t v14 = __OFADD__(v29++, 1);
    if (v14) {
      break;
    }
LABEL_28:
    if (v27 == ++v30) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_33:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v49 = MEMORY[0x263F8EE78];
  if (!v17) {
    goto LABEL_51;
  }
LABEL_34:
  if (v17 >= 1)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v17; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        uint64_t v36 = (void *)MEMORY[0x21054E050](i, v1);
      }
      else {
        uint64_t v36 = *(id *)(v1 + 8 * i + 32);
      }
      unint64_t v37 = v36;
      if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v36) + 0x738))()
        && (uint64_t v39 = v38,
            uint64_t v40 = swift_getObjectType(),
            uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v40, v39),
            swift_unknownObjectRelease(),
            v41))
      {
        uint64_t v35 = dispatch thunk of CalculateDocument.expressions.getter();

        swift_release();
      }
      else
      {

        uint64_t v35 = MEMORY[0x263F8EE78];
      }
      specialized Array.append<A>(contentsOf:)(v35);
    }
    swift_bridgeObjectRelease_n();
    uint64_t v42 = v49;
    goto LABEL_52;
  }
LABEL_61:
  __break(1u);
  return result;
}

{
  unint64_t v1;
  char *v3;
  uint64_t v4;
  char *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t (*v32)(void);
  void *v33;
  uint64_t i;
  unint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  uint64_t v48 = type metadata accessor for PKDrawing();
  uint64_t v3 = *(char **)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  double v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = objc_msgSend(a1, sel_attachmentViews);
  type metadata accessor for PKAttachmentView();
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62) {
    goto LABEL_12;
  }
  id v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v46 = a1;
  if (v8)
  {
    while (v8 >= 1)
    {
      unint64_t v9 = 0;
      a1 = 0;
      unint64_t v1 = (unint64_t)(v3 + 8);
      while (1)
      {
        uint64_t v10 = (v7 & 0xC000000000000001) != 0
            ? (char *)MEMORY[0x21054E050](v9, v7)
            : (char *)*(id *)(v7 + 8 * v9 + 32);
        uint64_t v3 = v10;
        uint64_t v11 = objc_msgSend(v10, sel_drawing, v46);
        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v12 = PKDrawing.strokes.getter();
        (*(void (**)(char *, uint64_t))v1)(v5, v48);
        id v13 = *(void *)(v12 + 16);

        swift_bridgeObjectRelease();
        uint64_t v14 = __OFADD__(a1, v13);
        a1 += v13;
        if (v14) {
          break;
        }
        if (v8 == ++v9) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_12:
      swift_bridgeObjectRetain();
      id v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v46 = a1;
      if (!v8) {
        goto LABEL_13;
      }
    }
LABEL_46:
    __break(1u);
  }
  else
  {
LABEL_13:
    a1 = 0;
LABEL_14:
    swift_bridgeObjectRelease_n();
    *(void *)(v47 + 32) = a1;
    type metadata accessor for TiledTextView();
    uint64_t result = swift_dynamicCastClass();
    if (!result) {
      return result;
    }
    uint64_t v16 = TiledTextView.paperAttachments.getter();
    unint64_t v1 = v16;
    uint64_t v3 = (char *)MEMORY[0x263F8EE78];
    uint64_t v49 = MEMORY[0x263F8EE78];
    if (!(v16 >> 62))
    {
      uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v17) {
        goto LABEL_48;
      }
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v17 = result;
  if (!result)
  {
LABEL_48:
    uint64_t result = swift_bridgeObjectRelease();
    id v26 = MEMORY[0x263F8EE78];
    if (MEMORY[0x263F8EE78] >> 62) {
      goto LABEL_49;
    }
    goto LABEL_24;
  }
LABEL_17:
  if (v17 < 1)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  unint64_t v18 = 0;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      uint64_t v19 = (void *)MEMORY[0x21054E050](v18, v1);
    }
    else {
      uint64_t v19 = *(id *)(v1 + 8 * v18 + 32);
    }
    uint64_t v20 = v19;
    ++v18;
    uint64_t v21 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v19) + 0x2F8))();
    uint64_t v23 = v22;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 32))(ObjectType, v23);

    specialized Array.append<A>(contentsOf:)(v25);
  }
  while (v17 != v18);
  uint64_t result = swift_bridgeObjectRelease();
  id v26 = v49;
  if (v49 >> 62)
  {
LABEL_49:
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v27)
    {
LABEL_50:
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v49 = (unint64_t)v3;
      if (v17) {
        goto LABEL_34;
      }
LABEL_51:
      swift_bridgeObjectRelease();
      uint64_t v42 = MEMORY[0x263F8EE78];
LABEL_52:
      uint64_t v43 = specialized Sequence<>.uniqueElements()(v42);
      swift_bridgeObjectRelease();
      if ((v43 & 0xC000000000000001) != 0) {
        unint64_t v44 = __CocoaSet.count.getter();
      }
      else {
        unint64_t v44 = *(void *)(v43 + 16);
      }
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v45 = v47;
      *(void *)(v47 + 56) = v44;
      *(void *)(v45 + 40) = v29;
      if (!__OFSUB__(v28, v44))
      {
        *(void *)(v45 + 48) = (v28 - v44) & ~((v28 - v44) >> 63);
        return result;
      }
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v27) {
    goto LABEL_50;
  }
LABEL_25:
  if (v27 < 1)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  while (1)
  {
    uint64_t v31 = *(void **)(v26 + 8 * v30 + 32);
    uint64_t v32 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v31) + 0x118);
    uint64_t v3 = (char *)((*MEMORY[0x263F8EED0] & *v31) + 280);
    uint64_t v33 = v31;
    LOBYTE(v32) = v32();

    if ((v32 & 1) == 0)
    {
      uint64_t v14 = __OFADD__(v28++, 1);
      if (v14)
      {
        __break(1u);
        goto LABEL_46;
      }
      goto LABEL_28;
    }
    uint64_t v14 = __OFADD__(v29++, 1);
    if (v14) {
      break;
    }
LABEL_28:
    if (v27 == ++v30) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_33:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v49 = MEMORY[0x263F8EE78];
  if (!v17) {
    goto LABEL_51;
  }
LABEL_34:
  if (v17 >= 1)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v17; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        uint64_t v36 = (void *)MEMORY[0x21054E050](i, v1);
      }
      else {
        uint64_t v36 = *(id *)(v1 + 8 * i + 32);
      }
      unint64_t v37 = v36;
      if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v36) + 0x738))()
        && (uint64_t v39 = v38,
            uint64_t v40 = swift_getObjectType(),
            uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v40, v39),
            swift_unknownObjectRelease(),
            v41))
      {
        uint64_t v35 = dispatch thunk of CalculateDocument.expressions.getter();

        swift_release();
      }
      else
      {

        uint64_t v35 = MEMORY[0x263F8EE78];
      }
      specialized Array.append<A>(contentsOf:)(v35);
    }
    swift_bridgeObjectRelease_n();
    uint64_t v42 = v49;
    goto LABEL_52;
  }
LABEL_61:
  __break(1u);
  return result;
}

{
  unint64_t v1;
  char *v3;
  double v4;
  uint64_t v5;
  char *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t (*v33)(void);
  void *v34;
  uint64_t i;
  unint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;

  uint64_t v49 = type metadata accessor for PKDrawing();
  uint64_t v3 = *(char **)(v49 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v49);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = objc_msgSend(a1, sel_attachmentViews, v4);
  type metadata accessor for PKAttachmentView();
  id v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62) {
    goto LABEL_12;
  }
  unint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v47 = a1;
  if (v9)
  {
    while (v9 >= 1)
    {
      uint64_t v10 = 0;
      a1 = 0;
      unint64_t v1 = (unint64_t)(v3 + 8);
      while (1)
      {
        uint64_t v11 = (v8 & 0xC000000000000001) != 0
            ? (char *)MEMORY[0x21054E050](v10, v8)
            : (char *)*(id *)(v8 + 8 * v10 + 32);
        uint64_t v3 = v11;
        uint64_t v12 = objc_msgSend(v11, sel_drawing, v47);
        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

        id v13 = PKDrawing.strokes.getter();
        (*(void (**)(char *, uint64_t))v1)(v6, v49);
        uint64_t v14 = *(void *)(v13 + 16);

        swift_bridgeObjectRelease();
        BOOL v15 = __OFADD__(a1, v14);
        a1 += v14;
        if (v15) {
          break;
        }
        if (v9 == ++v10) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_12:
      swift_bridgeObjectRetain();
      unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v47 = a1;
      if (!v9) {
        goto LABEL_13;
      }
    }
LABEL_46:
    __break(1u);
  }
  else
  {
LABEL_13:
    a1 = 0;
LABEL_14:
    swift_bridgeObjectRelease_n();
    *(void *)(v48 + 24) = a1;
    type metadata accessor for TiledTextView();
    uint64_t result = swift_dynamicCastClass();
    if (!result) {
      return result;
    }
    uint64_t v17 = TiledTextView.paperAttachments.getter();
    unint64_t v1 = v17;
    uint64_t v3 = (char *)MEMORY[0x263F8EE78];
    uint64_t v50 = MEMORY[0x263F8EE78];
    if (!(v17 >> 62))
    {
      unint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v18) {
        goto LABEL_48;
      }
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  unint64_t v18 = result;
  if (!result)
  {
LABEL_48:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v27 = MEMORY[0x263F8EE78];
    if (MEMORY[0x263F8EE78] >> 62) {
      goto LABEL_49;
    }
    goto LABEL_24;
  }
LABEL_17:
  if (v18 < 1)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v19 = 0;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      uint64_t v20 = (void *)MEMORY[0x21054E050](v19, v1);
    }
    else {
      uint64_t v20 = *(id *)(v1 + 8 * v19 + 32);
    }
    uint64_t v21 = v20;
    ++v19;
    uint64_t v22 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v20) + 0x2F8))();
    uint64_t v24 = v23;
    uint64_t ObjectType = swift_getObjectType();
    id v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 32))(ObjectType, v24);

    specialized Array.append<A>(contentsOf:)(v26);
  }
  while (v18 != v19);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v27 = v50;
  if (v50 >> 62)
  {
LABEL_49:
    swift_bridgeObjectRetain();
    unint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v28)
    {
LABEL_50:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v50 = (unint64_t)v3;
      if (v18) {
        goto LABEL_34;
      }
LABEL_51:
      swift_bridgeObjectRelease();
      uint64_t v43 = MEMORY[0x263F8EE78];
LABEL_52:
      unint64_t v44 = specialized Sequence<>.uniqueElements()(v43);
      swift_bridgeObjectRelease();
      if ((v44 & 0xC000000000000001) != 0) {
        uint64_t v45 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v45 = *(void *)(v44 + 16);
      }
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v46 = v48;
      *(void *)(v48 + 48) = v45;
      *(void *)(v46 + 32) = v30;
      if (!__OFSUB__(v29, v45))
      {
        *(void *)(v46 + 40) = (v29 - v45) & ~((v29 - v45) >> 63);
        return result;
      }
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_25;
  }
LABEL_24:
  unint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v28) {
    goto LABEL_50;
  }
LABEL_25:
  if (v28 < 1)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  while (1)
  {
    uint64_t v32 = *(void **)(v27 + 8 * v31 + 32);
    uint64_t v33 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v32) + 0x118);
    uint64_t v3 = (char *)((*MEMORY[0x263F8EED0] & *v32) + 280);
    uint64_t v34 = v32;
    LOBYTE(v33) = v33();

    if ((v33 & 1) == 0)
    {
      BOOL v15 = __OFADD__(v29++, 1);
      if (v15)
      {
        __break(1u);
        goto LABEL_46;
      }
      goto LABEL_28;
    }
    BOOL v15 = __OFADD__(v30++, 1);
    if (v15) {
      break;
    }
LABEL_28:
    if (v28 == ++v31) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_33:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v50 = MEMORY[0x263F8EE78];
  if (!v18) {
    goto LABEL_51;
  }
LABEL_34:
  if (v18 >= 1)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v18; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        unint64_t v37 = (void *)MEMORY[0x21054E050](i, v1);
      }
      else {
        unint64_t v37 = *(id *)(v1 + 8 * i + 32);
      }
      uint64_t v38 = v37;
      if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v37) + 0x738))()
        && (uint64_t v40 = v39,
            uint64_t v41 = swift_getObjectType(),
            uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v41, v40),
            swift_unknownObjectRelease(),
            v42))
      {
        uint64_t v36 = dispatch thunk of CalculateDocument.expressions.getter();

        swift_release();
      }
      else
      {

        uint64_t v36 = MEMORY[0x263F8EE78];
      }
      specialized Array.append<A>(contentsOf:)(v36);
    }
    swift_bridgeObjectRelease_n();
    uint64_t v43 = v50;
    goto LABEL_52;
  }
LABEL_61:
  __break(1u);
  return result;
}

{
  unint64_t v1;
  char *v3;
  double v4;
  uint64_t v5;
  char *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t (*v33)(void);
  void *v34;
  uint64_t i;
  unint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;

  uint64_t v49 = type metadata accessor for PKDrawing();
  uint64_t v3 = *(char **)(v49 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v49);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = objc_msgSend(a1, sel_attachmentViews, v4);
  type metadata accessor for PKAttachmentView();
  id v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62) {
    goto LABEL_12;
  }
  unint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v47 = a1;
  if (v9)
  {
    while (v9 >= 1)
    {
      uint64_t v10 = 0;
      a1 = 0;
      unint64_t v1 = (unint64_t)(v3 + 8);
      while (1)
      {
        uint64_t v11 = (v8 & 0xC000000000000001) != 0
            ? (char *)MEMORY[0x21054E050](v10, v8)
            : (char *)*(id *)(v8 + 8 * v10 + 32);
        uint64_t v3 = v11;
        uint64_t v12 = objc_msgSend(v11, sel_drawing, v47);
        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

        id v13 = PKDrawing.strokes.getter();
        (*(void (**)(char *, uint64_t))v1)(v6, v49);
        uint64_t v14 = *(void *)(v13 + 16);

        swift_bridgeObjectRelease();
        BOOL v15 = __OFADD__(a1, v14);
        a1 += v14;
        if (v15) {
          break;
        }
        if (v9 == ++v10) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_12:
      swift_bridgeObjectRetain();
      unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v47 = a1;
      if (!v9) {
        goto LABEL_13;
      }
    }
LABEL_46:
    __break(1u);
  }
  else
  {
LABEL_13:
    a1 = 0;
LABEL_14:
    swift_bridgeObjectRelease_n();
    *(void *)(v48 + 40) = a1;
    type metadata accessor for TiledTextView();
    uint64_t result = swift_dynamicCastClass();
    if (!result) {
      return result;
    }
    uint64_t v17 = TiledTextView.paperAttachments.getter();
    unint64_t v1 = v17;
    uint64_t v3 = (char *)MEMORY[0x263F8EE78];
    uint64_t v50 = MEMORY[0x263F8EE78];
    if (!(v17 >> 62))
    {
      unint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v18) {
        goto LABEL_48;
      }
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  unint64_t v18 = result;
  if (!result)
  {
LABEL_48:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v27 = MEMORY[0x263F8EE78];
    if (MEMORY[0x263F8EE78] >> 62) {
      goto LABEL_49;
    }
    goto LABEL_24;
  }
LABEL_17:
  if (v18 < 1)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v19 = 0;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      uint64_t v20 = (void *)MEMORY[0x21054E050](v19, v1);
    }
    else {
      uint64_t v20 = *(id *)(v1 + 8 * v19 + 32);
    }
    uint64_t v21 = v20;
    ++v19;
    uint64_t v22 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v20) + 0x2F8))();
    uint64_t v24 = v23;
    uint64_t ObjectType = swift_getObjectType();
    id v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 32))(ObjectType, v24);

    specialized Array.append<A>(contentsOf:)(v26);
  }
  while (v18 != v19);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v27 = v50;
  if (v50 >> 62)
  {
LABEL_49:
    swift_bridgeObjectRetain();
    unint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v28)
    {
LABEL_50:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v50 = (unint64_t)v3;
      if (v18) {
        goto LABEL_34;
      }
LABEL_51:
      swift_bridgeObjectRelease();
      uint64_t v43 = MEMORY[0x263F8EE78];
LABEL_52:
      unint64_t v44 = specialized Sequence<>.uniqueElements()(v43);
      swift_bridgeObjectRelease();
      if ((v44 & 0xC000000000000001) != 0) {
        uint64_t v45 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v45 = *(void *)(v44 + 16);
      }
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v46 = v48;
      *(void *)(v48 + 64) = v45;
      *(void *)(v46 + 48) = v30;
      if (!__OFSUB__(v29, v45))
      {
        *(void *)(v46 + 56) = (v29 - v45) & ~((v29 - v45) >> 63);
        return result;
      }
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_25;
  }
LABEL_24:
  unint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v28) {
    goto LABEL_50;
  }
LABEL_25:
  if (v28 < 1)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  while (1)
  {
    uint64_t v32 = *(void **)(v27 + 8 * v31 + 32);
    uint64_t v33 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v32) + 0x118);
    uint64_t v3 = (char *)((*MEMORY[0x263F8EED0] & *v32) + 280);
    uint64_t v34 = v32;
    LOBYTE(v33) = v33();

    if ((v33 & 1) == 0)
    {
      BOOL v15 = __OFADD__(v29++, 1);
      if (v15)
      {
        __break(1u);
        goto LABEL_46;
      }
      goto LABEL_28;
    }
    BOOL v15 = __OFADD__(v30++, 1);
    if (v15) {
      break;
    }
LABEL_28:
    if (v28 == ++v31) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_33:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v50 = MEMORY[0x263F8EE78];
  if (!v18) {
    goto LABEL_51;
  }
LABEL_34:
  if (v18 >= 1)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v18; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        unint64_t v37 = (void *)MEMORY[0x21054E050](i, v1);
      }
      else {
        unint64_t v37 = *(id *)(v1 + 8 * i + 32);
      }
      uint64_t v38 = v37;
      if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v37) + 0x738))()
        && (uint64_t v40 = v39,
            uint64_t v41 = swift_getObjectType(),
            uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v41, v40),
            swift_unknownObjectRelease(),
            v42))
      {
        uint64_t v36 = dispatch thunk of CalculateDocument.expressions.getter();

        swift_release();
      }
      else
      {

        uint64_t v36 = MEMORY[0x263F8EE78];
      }
      specialized Array.append<A>(contentsOf:)(v36);
    }
    swift_bridgeObjectRelease_n();
    uint64_t v43 = v50;
    goto LABEL_52;
  }
LABEL_61:
  __break(1u);
  return result;
}