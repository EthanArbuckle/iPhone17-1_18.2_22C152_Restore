uint64_t Canvas.harmonizeCanvasElement<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t (*v56)(void);
  void *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v53 = a4;
  v61 = a1;
  v50 = *MEMORY[0x263F8EED0] & *v4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  v54 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v9 - 8);
  v58 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  v55 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = (uint64_t (*)(void))type metadata accessor for CRAssetOrData();
  v59 = *((void *)v56 - 1);
  v14 = *(void *)(v59 + 64);
  MEMORY[0x270FA5388](v56);
  MEMORY[0x270FA5388](v15);
  v17 = (char *)&v48 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x270FA5388](v18 - 8);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = a2;
  v52 = a3;
  v21 = type metadata accessor for Capsule();
  v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  v24 = (char *)&v48 - v23;
  v60 = swift_allocBox();
  v26 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v61, v21);
  if (swift_dynamicCast())
  {
    v49 = v14;
    v61 = (uint64_t)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    v27 = (uint64_t)v17;
    v28 = v57;
    v29 = v54;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v20, 0, 1, v11);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v26, v20, v11);
    v30 = v55;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v55, v26, v11);
    swift_getKeyPath();
    _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    v31 = (uint64_t)v58;
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v30, v11);
    v32 = v59;
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(void)))(v59 + 48))(v31, 1, v56);
    v34 = v60;
    if (v33 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v31, &demangling cache variable for type metadata for CRAssetOrData?);
    }
    else
    {
      v56 = (uint64_t (*)(void))type metadata accessor for CRAssetOrData;
      _s8PaperKit13CRAssetOrDataOWObTm_0(v31, v27, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      v36 = type metadata accessor for TaskPriority();
      v37 = (uint64_t)v29;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v29, 1, 1, v36);
      v38 = v61;
      _s8PaperKit13CRAssetOrDataOWOcTm_1(v27, v61, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      type metadata accessor for MainActor();
      v39 = v28;
      swift_retain();
      v40 = static MainActor.shared.getter();
      v41 = (*(unsigned __int8 *)(v32 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
      v42 = (v49 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
      v43 = (void *)swift_allocObject();
      v44 = MEMORY[0x263F8F500];
      v43[2] = v40;
      v43[3] = v44;
      v45 = v50;
      v46 = v51;
      v43[4] = *(void *)(v50 + 2008);
      v43[5] = v46;
      v43[6] = *(void *)(v45 + 2016);
      v47 = v52;
      v43[7] = *(void *)(v45 + 2024);
      v43[8] = v47;
      v43[9] = v53;
      v43[10] = v39;
      _s8PaperKit13CRAssetOrDataOWObTm_0(v38, (uint64_t)v43 + v41, v56);
      *(void *)((char *)v43 + v42) = v34;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(v37, (uint64_t)&async function pointer to partial apply for closure #1 in Canvas.harmonizeCanvasElement<A>(_:), (uint64_t)v43);
      swift_release();
      _s8PaperKit5ImageVWOhTm_1(v27, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    }
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v20, 1, 1, v11);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for Capsule<Image>?);
    return swift_deallocBox();
  }
}

uint64_t Canvas.harmonizeImage(_:)(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v3[10] = *MEMORY[0x263F8EED0] & *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  v3[12] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v3[13] = v4;
  v3[14] = *(void *)(v4 - 8);
  v3[15] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CRAssetOrData();
  v3[16] = v5;
  v3[17] = *(void *)(v5 - 8);
  v3[18] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[19] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[20] = v7;
  v3[21] = v6;
  return MEMORY[0x270FA2498](Canvas.harmonizeImage(_:), v7, v6);
}

void Canvas.harmonizeImage(_:)()
{
  v1 = *(void **)(v0 + 72);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasView<Image>);
  uint64_t v2 = swift_dynamicCastClass();
  if (!v2)
  {
    swift_release();
    goto LABEL_5;
  }
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 104);
  uint64_t v9 = *(void *)(v2 + direct field offset for Canvas.paperView)
     + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v2 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v9, v8);
  swift_getKeyPath();
  _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  id v10 = v1;
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v8);
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v7, 1, v3);
  uint64_t v12 = *(void *)(v0 + 96);
  v13 = *(void **)(v0 + 72);
  if (v11 == 1)
  {
    swift_release();

    outlined destroy of StocksKitCurrencyCache.Provider?(v12, &demangling cache variable for type metadata for CRAssetOrData?);
LABEL_5:
    type metadata accessor for Canvas.CanvasHarmonizationError();
    swift_getWitnessTable();
    swift_allocError();
    unsigned char *v14 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v15 = *(void (**)(void))(v0 + 8);
    v15();
    return;
  }
  _s8PaperKit13CRAssetOrDataOWObTm_0(*(void *)(v0 + 96), *(void *)(v0 + 144), (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  objc_msgSend(v13, sel_bounds);
  double Width = CGRectGetWidth(v28);
  *(double *)(v0 + 176) = Width;
  objc_msgSend(v13, sel_bounds);
  double Height = CGRectGetHeight(v29);
  *(double *)(v0 + 184) = Height;
  if (Width > Height) {
    double v18 = Width;
  }
  else {
    double v18 = Height;
  }
  id v19 = objc_msgSend(v13, sel_window);
  if (v19)
  {
    v20 = v19;
    id v21 = objc_msgSend(v19, sel_screen);

    objc_msgSend(v21, sel_scale);
    double v23 = v22;
  }
  else
  {
    double v23 = 1.0;
  }
  *(double *)(v0 + 192) = v23;
  double v24 = v18 * v23;
  if ((~COERCE__INT64(v18 * v23) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v24 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v24 >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    return;
  }
  uint64_t v25 = (uint64_t)v24;
  v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v26;
  void *v26 = v0;
  v26[1] = Canvas.harmonizeImage(_:);
  CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(v25, 1, 0);
}

uint64_t Canvas.harmonizeImage(_:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 168);
  uint64_t v4 = *(void *)(v2 + 160);
  return MEMORY[0x270FA2498](Canvas.harmonizeImage(_:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 168);
  uint64_t v4 = *(void *)(v2 + 160);
  return MEMORY[0x270FA2498](Canvas.harmonizeImage(_:), v4, v3);
}

uint64_t Canvas.harmonizeImage(_:)()
{
  if (*(void *)(v0 + 208))
  {
    double v2 = *(double *)(v0 + 184);
    double v1 = *(double *)(v0 + 192);
    double v3 = *(double *)(v0 + 176);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v4;
    *uint64_t v4 = v0;
    v4[1] = Canvas.harmonizeImage(_:);
    if (v3 > v2) {
      double v5 = v3;
    }
    else {
      double v5 = v2;
    }
    return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)((uint64_t)(v1 * v5), 1, 0);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v8 = *(void **)(v0 + 72);
    swift_release();
    type metadata accessor for Canvas.CanvasHarmonizationError();
    swift_getWitnessTable();
    swift_allocError();
    *uint64_t v9 = 1;
    swift_willThrow();

    _s8PaperKit5ImageVWOhTm_1(v7, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned char *v16;
  uint64_t (*v17)(void);
  uint64_t v19;

  double v1 = *(void **)(v0 + 224);
  if (v1)
  {
    double v2 = *(void **)(v0 + 208);
    uint64_t v4 = *(void *)(v0 + 80);
    double v3 = *(void *)(v0 + 88);
    static TaskPriority.userInitiated.getter();
    double v5 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 0, 1, v5);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = 0;
    *(_OWORD *)(v6 + 32) = *(_OWORD *)(v4 + 2008);
    *(void *)(v6 + 48) = *(void *)(v4 + 2024);
    *(void *)(v6 + 56) = v1;
    *(void *)(v6 + 64) = v2;
    uint64_t v7 = v1;
    uint64_t v8 = v2;
    uint64_t v9 = _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ10Foundation4DataVSg_Tgm5Tm(v3, (uint64_t)&async function pointer to partial apply for closure #1 in Canvas.harmonizeImage(_:), v6, &demangling cache variable for type metadata for Data?);
    *(void *)(v0 + 232) = v9;
    outlined destroy of StocksKitCurrencyCache.Provider?(v3, &demangling cache variable for type metadata for TaskPriority?);
    id v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v10;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    *id v10 = v0;
    v10[1] = Canvas.harmonizeImage(_:);
    v13 = MEMORY[0x263F8E4E0];
    return MEMORY[0x270FA1FA8](v0 + 40, v9, v11, v12, v13);
  }
  else
  {

    v14 = *(void *)(v0 + 144);
    v15 = *(void **)(v0 + 72);
    swift_release();
    type metadata accessor for Canvas.CanvasHarmonizationError();
    swift_getWitnessTable();
    swift_allocError();
    *v16 = 1;
    swift_willThrow();

    _s8PaperKit5ImageVWOhTm_1(v14, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  double v2 = *v1;
  *(void *)(*v1 + 248) = v0;
  swift_task_dealloc();
  double v3 = *(void *)(v2 + 168);
  uint64_t v4 = *(void *)(v2 + 160);
  if (v0) {
    double v5 = Canvas.harmonizeImage(_:);
  }
  else {
    double v5 = Canvas.harmonizeImage(_:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  swift_release();
  double v1 = (void *)v0[28];
  double v2 = (void *)v0[26];
  double v3 = v0[18];
  uint64_t v4 = (void *)v0[9];
  if (v0[6] >> 60 == 15)
  {
    _s8PaperKit5ImageVWOhTm_1(v0[18], (uint64_t (*)(void))type metadata accessor for CRAssetOrData);

    swift_release();
    double v5 = 1;
  }
  else
  {
    CRContext.assetManager.getter();
    CRAsset.init(data:assetManager:)();
    swift_release();

    _s8PaperKit5ImageVWOhTm_1(v3, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    double v5 = 0;
  }
  uint64_t v6 = v0[7];
  uint64_t v7 = type metadata accessor for CRAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, v5, 1, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  double v1 = (void *)v0[28];
  double v2 = (void *)v0[26];
  double v3 = v0[18];
  uint64_t v4 = (void *)v0[9];
  swift_release();
  swift_release();

  _s8PaperKit5ImageVWOhTm_1(v3, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ9Coherence7CapsuleVy8PaperKit5ImageVG_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ10Foundation4DataVSg_Tgm5Tm(a1, a2, a3, &demangling cache variable for type metadata for Capsule<Image>);
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ10Foundation4DataVSg_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(a4);
  if (v14 | v12)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v12;
    v16[3] = v14;
  }
  return swift_task_create();
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v51 = a2;
  v52 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for PKStroke();
  uint64_t v8 = *(void *)(v54 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v54);
  v42 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  v41 = (char *)&v38 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  v50 = (char *)&v38 - v17;
  uint64_t v18 = *(void *)(a3 + 56);
  uint64_t v45 = a3 + 56;
  uint64_t v19 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v48 = v13 + 32;
  uint64_t v49 = v13 + 16;
  double v22 = (void (**)(char *, uint64_t))(v13 + 8);
  int64_t v46 = (unint64_t)(v19 + 63) >> 6;
  v47 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v40 = v8;
  v43 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v53 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v24 = 0;
  unint64_t v44 = MEMORY[0x263F8EE78];
  while (1)
  {
    if (v21)
    {
      unint64_t v25 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v26 = v25 | (v24 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v24++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v24 >= v46) {
      goto LABEL_32;
    }
    unint64_t v28 = *(void *)(v45 + 8 * v24);
    if (!v28) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v24 << 6);
LABEL_19:
    v30 = v50;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v50, *(void *)(v53 + 48) + *(void *)(v13 + 72) * v26, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v30, v12);
    v52(v16);
    if (v3)
    {
      (*v22)(v16, v12);
      unint64_t v37 = v44;
      swift_bridgeObjectRelease();
LABEL_33:
      swift_release();
      return v37;
    }
    (*v22)(v16, v12);
    if ((*v47)(v7, 1, v54) == 1)
    {
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for PKStroke?);
    }
    else
    {
      v31 = *v43;
      (*v43)(v41, v7, v54);
      v31(v42, v41, v54);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, v44);
      }
      unint64_t v33 = *(void *)(v44 + 16);
      unint64_t v32 = *(void *)(v44 + 24);
      unint64_t v34 = v33 + 1;
      if (v33 >= v32 >> 1)
      {
        unint64_t v38 = *(void *)(v44 + 16);
        unint64_t v39 = v33 + 1;
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v44);
        unint64_t v33 = v38;
        unint64_t v34 = v39;
        unint64_t v44 = v36;
      }
      unint64_t v35 = v44;
      *(void *)(v44 + 16) = v34;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)(v35+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * v33, v42, v54);
    }
  }
  int64_t v29 = v24 + 1;
  if (v24 + 1 >= v46) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 2;
  if (v24 + 2 >= v46) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 3;
  if (v24 + 3 >= v46) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 4;
  if (v24 + 4 >= v46)
  {
LABEL_32:
    unint64_t v37 = v44;
    goto LABEL_33;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28)
  {
LABEL_17:
    int64_t v24 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v24 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v24 >= v46) {
      goto LABEL_32;
    }
    unint64_t v28 = *(void *)(v45 + 8 * v24);
    ++v29;
    if (v28) {
      goto LABEL_18;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (**v22)(char *, uint64_t);
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  int64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t (*v34)();
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t (*v39)();
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unsigned int (**v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *);
  uint64_t v52;
  uint64_t v53;

  uint64_t v51 = a1;
  v52 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for Shape();
  uint64_t v8 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  v42 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v40 = (uint64_t)&v39 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  v50 = (char *)&v39 - v17;
  uint64_t v18 = *(void *)(a3 + 56);
  unint64_t v44 = a3 + 56;
  uint64_t v19 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v48 = v13 + 32;
  uint64_t v49 = v13 + 16;
  double v22 = (void (**)(char *, uint64_t))(v13 + 8);
  v41 = v8;
  uint64_t v45 = (unint64_t)(v19 + 63) >> 6;
  int64_t v46 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v53 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v24 = 0;
  v43 = MEMORY[0x263F8EE78];
  while (1)
  {
    if (v21)
    {
      unint64_t v25 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v26 = v25 | (v24 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v24++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v24 >= v45) {
      goto LABEL_32;
    }
    unint64_t v28 = *(void *)(v44 + 8 * v24);
    if (!v28) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v24 << 6);
LABEL_19:
    v30 = v50;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v50, *(void *)(v53 + 48) + *(void *)(v13 + 72) * v26, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v30, v12);
    v51(v15);
    if (v3)
    {
      (*v22)(v15, v12);
      unint64_t v38 = v43;
      swift_bridgeObjectRelease();
LABEL_33:
      swift_release();
      return v38;
    }
    (*v22)(v15, v12);
    if ((*v46)(v7, 1, v47) == 1)
    {
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Shape?);
    }
    else
    {
      unint64_t v39 = type metadata accessor for Shape;
      v31 = v40;
      _s8PaperKit13CRAssetOrDataOWObTm_0((uint64_t)v7, v40, (uint64_t (*)(void))type metadata accessor for Shape);
      _s8PaperKit13CRAssetOrDataOWObTm_0(v31, v42, (uint64_t (*)(void))v39);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v43 + 16) + 1, 1, v43);
      }
      unint64_t v33 = *(void *)(v43 + 16);
      unint64_t v32 = *(void *)(v43 + 24);
      unint64_t v34 = (uint64_t (*)())(v33 + 1);
      if (v33 >= v32 >> 1)
      {
        unint64_t v39 = (uint64_t (*)())(v33 + 1);
        unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v43);
        unint64_t v34 = v39;
        v43 = v37;
      }
      unint64_t v35 = v42;
      uint64_t v36 = v43;
      *(void *)(v43 + 16) = v34;
      uint64_t result = _s8PaperKit13CRAssetOrDataOWObTm_0(v35, v36+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v33, (uint64_t (*)(void))type metadata accessor for Shape);
    }
  }
  int64_t v29 = v24 + 1;
  if (v24 + 1 >= v45) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v44 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 2;
  if (v24 + 2 >= v45) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v44 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 3;
  if (v24 + 3 >= v45) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v44 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 4;
  if (v24 + 4 >= v45)
  {
LABEL_32:
    unint64_t v38 = v43;
    goto LABEL_33;
  }
  unint64_t v28 = *(void *)(v44 + 8 * v29);
  if (v28)
  {
LABEL_17:
    int64_t v24 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v24 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v24 >= v45) {
      goto LABEL_32;
    }
    unint64_t v28 = *(void *)(v44 + 8 * v24);
    ++v29;
    if (v28) {
      goto LABEL_18;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2)
{
  void (*v21)(uint64_t *__return_ptr, char *);
  uint64_t v22;
  uint64_t v23;
  void (*v25)(uint64_t *__return_ptr, char *);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t (**v30)(char *, uint64_t);
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  unint64_t v32 = a2;
  unint64_t v25 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v28 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  unint64_t v26 = *(void *)(v12 - 8);
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v37 = MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, v34, v8, v13);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v16 = v28;
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  unint64_t v33 = v15;
  unint64_t v34 = v12;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v17 = v3 + 48;
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v18(v16, 1, v2) == 1)
  {
    uint64_t v19 = v26;
    uint64_t v17 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v30 = (uint64_t (**)(char *, uint64_t))(v3 + 8);
    v31 = v20;
    unint64_t v21 = v25;
    uint64_t v27 = v5;
    int64_t v29 = v3 + 48;
    v20(v5, v16, v2);
    while (1)
    {
      double v22 = v35;
      v21(&v36, v5);
      double v23 = (*v30)(v5, v2);
      if (v22)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v33, v34);
        swift_bridgeObjectRelease();
        return v17;
      }
      unint64_t v35 = 0;
      if (v36)
      {
        MEMORY[0x21054D330](v23);
        if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v5 = v27;
        v16 = v28;
      }
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v17 = v29;
      if (v18(v16, 1, v2) == 1) {
        break;
      }
      v31(v5, v16, v2);
    }
    uint64_t v17 = v37;
    uint64_t v19 = v26;
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v33, v34);
  return v17;
}

unint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PKStroke();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v33 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  v30 = (char *)v25 - v13;
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v15 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>)
                  - 8);
  uint64_t v16 = v10;
  uint64_t v17 = a3 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v27 = v16;
  unint64_t v32 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v31 = *(void *)(v15 + 72);
  v25[1] = a3;
  swift_bridgeObjectRetain();
  unint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t v28 = v9;
  int64_t v29 = a1;
  unint64_t v26 = v18;
  do
  {
    a1(v17);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
    if ((*v18)(v8, 1, v9) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for PKStroke?);
    }
    else
    {
      uint64_t v20 = *v32;
      unint64_t v21 = v30;
      (*v32)(v30, v8, v9);
      v20(v33, v21, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, v19);
      }
      unint64_t v23 = *(void *)(v19 + 16);
      unint64_t v22 = *(void *)(v19 + 24);
      if (v23 >= v22 >> 1) {
        unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v19);
      }
      *(void *)(v19 + 16) = v23 + 1;
      uint64_t v9 = v28;
      v20((char *)(v19+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v23), v33, v28);
      a1 = v29;
      uint64_t v18 = v26;
    }
    v17 += v31;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(_OWORD *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  void (*v40)(_OWORD *__return_ptr, char *);
  _OWORD v41[2];
  char v42;
  uint64_t v43;

  uint64_t v40 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v12 = *(void *)(a3 + 56);
  uint64_t v36 = a3 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v39 = v6 + 16;
  int64_t v37 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v38 = v6 + 32;
  uint64_t v16 = (void (**)(char *, uint64_t))(v6 + 8);
  v43 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  unint64_t v35 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v18 >= v37) {
      goto LABEL_31;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v18);
    if (!v22) {
      break;
    }
LABEL_18:
    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(void *)(v43 + 48) + *(void *)(v6 + 72) * v20, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v40(v41, v8);
    if (v3)
    {
      (*v16)(v8, v5);
      v30 = v35;
      swift_bridgeObjectRelease();
LABEL_32:
      swift_release();
      return (uint64_t)v30;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v16)(v8, v5);
    if ((v42 & 1) == 0)
    {
      long long v33 = v41[1];
      long long v34 = v41[0];
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
        unint64_t v35 = (void *)result;
      }
      unint64_t v25 = v35[2];
      unint64_t v24 = v35[3];
      unint64_t v26 = v25 + 1;
      if (v25 >= v24 >> 1)
      {
        unint64_t v31 = v35[2];
        unint64_t v32 = v25 + 1;
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v35);
        unint64_t v25 = v31;
        unint64_t v26 = v32;
        unint64_t v35 = (void *)result;
      }
      uint64_t v27 = v35;
      v35[2] = v26;
      uint64_t v28 = &v27[4 * v25];
      long long v29 = v33;
      *((_OWORD *)v28 + 2) = v34;
      *((_OWORD *)v28 + 3) = v29;
    }
  }
  int64_t v23 = v18 + 1;
  if (v18 + 1 >= v37) {
    goto LABEL_31;
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 2;
  if (v18 + 2 >= v37) {
    goto LABEL_31;
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 3;
  if (v18 + 3 >= v37) {
    goto LABEL_31;
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 4;
  if (v18 + 4 >= v37)
  {
LABEL_31:
    v30 = v35;
    goto LABEL_32;
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
LABEL_17:
    int64_t v18 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v37) {
      goto LABEL_31;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_18;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(char *), uint64_t a2)
{
  uint64_t v3 = v2;
  v58 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v49 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v48 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  v57 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  v47 = (char *)&v42 - v9;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v10 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v13 - 8);
  unint64_t v44 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  int64_t v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v43 = *(void *)(v19 - 8);
  double v20 = MEMORY[0x270FA5388](v19);
  unint64_t v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v18, v63, v15, v20);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v23 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  unint64_t v24 = v44;
  v60 = v22;
  uint64_t v61 = v19;
  uint64_t v56 = v23;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v25 = v45;
  unint64_t v26 = v24;
  uint64_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v55 = v10 + 48;
  if (v54(v24, 1, v45) == 1)
  {
    unint64_t v59 = MEMORY[0x263F8EE78];
LABEL_3:
    (*(void (**)(char *, uint64_t))(v43 + 8))(v60, v61);
    return v59;
  }
  else
  {
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v52 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v53 = v28;
    uint64_t v29 = (uint64_t)v49;
    v50 = (void (**)(char *, uint64_t, uint64_t))(v48 + 32);
    uint64_t v51 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
    unint64_t v59 = MEMORY[0x263F8EE78];
    uint64_t v46 = a2;
    while (1)
    {
      v53(v12, v26, v25);
      v58(v12);
      if (v3) {
        break;
      }
      uint64_t v63 = 0;
      unint64_t v31 = v12;
      uint64_t v32 = v25;
      (*v52)(v12, v25);
      uint64_t v33 = v62;
      if ((*v51)(v29, 1, v62) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v29, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      }
      else
      {
        uint64_t v34 = v29;
        unint64_t v35 = *v50;
        uint64_t v36 = v47;
        (*v50)(v47, v34, v33);
        v35(v57, (uint64_t)v36, v33);
        unint64_t v37 = v59;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v37 + 16) + 1, 1, v37);
        }
        unint64_t v39 = *(void *)(v37 + 16);
        unint64_t v38 = *(void *)(v37 + 24);
        if (v39 >= v38 >> 1) {
          unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, v37);
        }
        *(void *)(v37 + 16) = v39 + 1;
        unint64_t v40 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
        unint64_t v59 = v37;
        v35((char *)(v37 + v40 + *(void *)(v48 + 72) * v39), (uint64_t)v57, v62);
        uint64_t v29 = (uint64_t)v49;
      }
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v25 = v32;
      int v30 = v54(v26, 1, v32);
      uint64_t v12 = v31;
      uint64_t v3 = v63;
      if (v30 == 1) {
        goto LABEL_3;
      }
    }
    (*v52)(v12, v25);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v60, v61);
    unint64_t v27 = v59;
    swift_bridgeObjectRelease();
  }
  return v27;
}

void specialized Sequence.compactMap<A>(_:)(void (*a1)(void, __n128), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v28 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16.n128_f64[0] = MEMORY[0x270FA5388](v15);
  unint64_t v27 = (char *)&v23 - v17;
  if (a3 != a4)
  {
    if (a4 >= a3)
    {
      uint64_t v29 = (void (**)(char *, char *, uint64_t))(v28 + 32);
      int v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
      unint64_t v18 = MEMORY[0x263F8EE78];
      uint64_t v25 = a2;
      uint64_t v26 = a4;
      uint64_t v23 = a1;
      unint64_t v24 = v14;
      while (a3 < a4)
      {
        uint64_t v31 = a3;
        a1(&v31, v16);
        if (v4)
        {
          swift_bridgeObjectRelease();
          return;
        }
        if ((*v30)(v11, 1, v12) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
        }
        else
        {
          uint64_t v19 = *v29;
          double v20 = v27;
          (*v29)(v27, v11, v12);
          v19(v14, v20, v12);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1, v18);
          }
          unint64_t v22 = *(void *)(v18 + 16);
          unint64_t v21 = *(void *)(v18 + 24);
          if (v22 >= v21 >> 1) {
            unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1, v18);
          }
          *(void *)(v18 + 16) = v22 + 1;
          uint64_t v14 = v24;
          v19((char *)(v18+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v22), v24, v12);
          a4 = v26;
          a1 = v23;
        }
        if (a4 == ++a3) {
          return;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
}

double Canvas.visibleBoundsInModelSpace.getter()
{
  double v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x308))();
  if (!v3) {
    return 0.0;
  }
  uint64_t v4 = (void *)v3;
  uint64_t v5 = Canvas.editingView.getter();
  (*(void (**)(void *__return_ptr))((*v2 & *v5) + 0x2A0))(v51);
  CGFloat v44 = *(double *)&v51[1];
  CGFloat v46 = *(double *)v51;
  CGFloat v6 = *(double *)&v51[4];
  CGFloat v40 = *(double *)&v51[3];
  CGFloat v42 = *(double *)&v51[2];
  CGFloat v7 = *(double *)&v51[5];

  (*(void (**)(void *__return_ptr))((*v2 & *v1) + 0x5D0))(v52);
  CGFloat v9 = *(double *)v52;
  CGFloat v8 = *(double *)&v52[1];
  CGFloat v10 = *(double *)&v52[2];
  CGFloat v11 = *(double *)&v52[3];
  CGFloat v12 = *(double *)&v52[4];
  CGFloat v13 = *(double *)&v52[5];
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v52, (uint64_t)v53, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  if (v53[48])
  {
    CGFloat v11 = 1.0;
    CGFloat v13 = 0.0;
    CGFloat v12 = 0.0;
    CGFloat v10 = 0.0;
    CGFloat v8 = 0.0;
    CGFloat v9 = 1.0;
  }
  t1.CGFloat a = v46;
  t1.CGFloat b = v44;
  t1.CGFloat c = v42;
  t1.CGFloat d = v40;
  t1.tCGFloat x = v6;
  t1.tCGFloat y = v7;
  t2.CGFloat a = v9;
  t2.CGFloat b = v8;
  t2.CGFloat c = v10;
  t2.CGFloat d = v11;
  t2.tCGFloat x = v12;
  t2.tCGFloat y = v13;
  CGAffineTransformConcat(&v48, &t1, &t2);
  CGAffineTransform t1 = v48;
  uint64_t v14 = CGAffineTransformInvert(&t2, &t1);
  CGFloat a = t2.a;
  CGFloat b = t2.b;
  CGFloat c = t2.c;
  CGFloat d = t2.d;
  tCGFloat y = t2.ty;
  tCGFloat x = t2.tx;
  (*(void (**)(CGAffineTransform *))((*v2 & *v1) + 0x348))(v14);
  objc_msgSend(v4, sel_convertRect_toCoordinateSpace_, v1);
  CGFloat v41 = v20;
  CGFloat v43 = v19;
  CGFloat v38 = v22;
  CGFloat v39 = v21;
  id v23 = Canvas.editingView.getter();
  objc_msgSend(v23, sel_bounds);
  CGFloat v34 = v25;
  CGFloat v36 = v24;
  CGFloat v27 = v26;
  double v29 = v28;

  if ((*(uint64_t (**)(void))((*v2 & *v1) + 0x588))())
  {
    objc_msgSend(v4, sel_bounds);
    double v29 = v29 + CGRectGetHeight(v54);
  }
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tCGFloat x = tx;
  t1.tCGFloat y = ty;
  v55.origin.CGFloat y = v34;
  v55.origin.CGFloat x = v36;
  v55.size.CGFloat width = v27;
  v55.size.CGFloat height = v29;
  CGRect v56 = CGRectApplyAffineTransform(v55, &t1);
  CGFloat y = v56.origin.y;
  CGFloat x = v56.origin.x;
  CGFloat width = v56.size.width;
  CGFloat height = v56.size.height;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tCGFloat x = tx;
  t1.tCGFloat y = ty;
  v56.origin.CGFloat y = v41;
  v56.origin.CGFloat x = v43;
  v56.size.CGFloat height = v38;
  v56.size.CGFloat width = v39;
  CGRect v58 = CGRectApplyAffineTransform(v56, &t1);
  v57.origin.CGFloat y = y;
  v57.origin.CGFloat x = x;
  v57.size.CGFloat width = width;
  v57.size.CGFloat height = height;
  *(void *)&double v32 = (unint64_t)CGRectIntersection(v57, v58);

  return v32;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  }
  uint64_t v6 = *(void *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2 & 1);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8[2];

  uint64_t v4 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  }
  uint64_t v6 = *(void *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2 & 1);
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContainerCanvasElement.ensureHasDrawing<A>(in:)(uint64_t a1)
{
  uint64_t v28 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v5);
  uint64_t v27 = (uint64_t)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  CGFloat v9 = (char *)v25 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v26 = (uint64_t)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v25 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v25 - v16;
  uint64_t v18 = v1 + *(int *)(type metadata accessor for Paper() + 28);
  v25[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  void v25[2] = v18;
  CRRegister.wrappedValue.getter();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v20 = *(void *)(v19 - 8);
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19);
  uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  if (v21 == 1)
  {
    long long v23 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
    long long v29 = *MEMORY[0x263F001A0];
    long long v30 = v23;
    type metadata accessor for CGRect(0);
    _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
    CRRegister.init(wrappedValue:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    v25[0] = v4;
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    CROrderedSet.init()();
    *(void *)&v9[*(int *)(v5 + 24)] = MEMORY[0x263F8EE80];
    _s8PaperKit13CRAssetOrDataOWOcTm_1((uint64_t)v9, v27, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
    uint64_t v24 = type metadata accessor for CRKeyPath();
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v25[0], 1, 1, v24);
    _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
    swift_retain();
    Ref.init<A>(_:_:identity:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v14, 0, 1, v19);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v14, v26, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    return _s8PaperKit5ImageVWOhTm_1((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
  }
  return result;
}

uint64_t key path getter for ContainerCanvasElement.subelements : <A>A(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 72))(*(void *)(a3 + a2 - 24));
}

uint64_t key path setter for ContainerCanvasElement.subelements : <A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 24);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  double v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v11 + 16))(v10, a1, v8);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 80))(v10, v5, v6);
}

uint64_t key path getter for ContainerCanvasElement.drawing : <A>A(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 48))(*(void *)(a3 + a2 - 24));
}

uint64_t key path setter for ContainerCanvasElement.drawing : <A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 24);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v9, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 56))(v9, v5, v6);
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.getter in conformance Canvas<A>()
{
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance Canvas<A>(uint64_t a1, uint64_t a2)
{
  specialized Canvas.liveStreamMessenger.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance Canvas<A>(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Canvas.liveStreamMessenger.modify((uint64_t)v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t specialized static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(uint64_t a1, CGFloat *a2, int a3, uint64_t a4)
{
  int v103 = a3;
  CGFloat v6 = *a2;
  CGFloat v7 = a2[1];
  CGFloat v8 = a2[2];
  CGFloat v9 = a2[3];
  CGFloat v10 = a2[4];
  CGFloat v11 = a2[5];
  v94 = a2;
  uint64_t v105 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v105);
  v93 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v13 = *(void *)(v104 - 8);
  MEMORY[0x270FA5388](v104);
  v92 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  v100 = (char *)&v80 - v16;
  uint64_t v17 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v17 - 8);
  v91 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  v99 = (char *)&v80 - v20;
  uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v108 = *(void (***)(char *, uint64_t))(v112 - 8);
  MEMORY[0x270FA5388](v112);
  double v22 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v23 = *(void *)(v102 - 8);
  MEMORY[0x270FA5388](v102);
  v111 = (char *)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v28 - 8);
  long long v30 = (char *)&v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  v110 = (char *)&v80 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  t1.double a = v6;
  t1.double b = v7;
  t1.double c = v8;
  t1.double d = v9;
  t1.tCGFloat x = v10;
  t1.tCGFloat y = v11;
  uint64_t result = CGAffineTransformIsIdentity(&t1);
  if (!result || (v103 & 1) == 0)
  {
    uint64_t v35 = *(void *)(a1 + 16);
    if (v35)
    {
      uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      uint64_t v36 = *(void *)(v117 - 8);
      uint64_t v37 = v13;
      uint64_t v38 = a1 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
      v116 = (unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
      uint64_t v115 = *(void *)(v36 + 72);
      v113 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
      v109 = (void (**)(char *, char *, uint64_t))(v23 + 16);
      ++v108;
      v107 = (void (**)(char *, uint64_t))(v23 + 8);
      v106 = (unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
      v98 = (void (**)(char *, char *, uint64_t))(v32 + 32);
      v101 = (void (**)(char *, uint64_t))(v37 + 8);
      v95 = (void (**)(char *, uint64_t))(v32 + 8);
      uint64_t v82 = a1;
      swift_bridgeObjectRetain();
      double v83 = 0.001;
      double v81 = 0.1;
      uint64_t v97 = a4;
      v96 = v22;
      uint64_t v39 = v102;
      double v87 = v8;
      double v86 = v9;
      double v85 = v10;
      double v84 = v11;
      uint64_t v114 = v31;
      while (1)
      {
        WeakRef.subscript.getter();
        if ((*v116)(v27, 1, v39))
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
          (*v113)(v30, 1, 1, v31);
        }
        else
        {
          CGFloat v40 = v111;
          (*v109)(v111, v27, v39);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
          CRRegister.value.getter();
          uint64_t v41 = v112;
          SharedTagged_2.tagged1.getter();
          (*v108)(v22, v41);
          CGFloat v42 = v40;
          uint64_t v31 = v114;
          (*v107)(v42, v39);
          if ((*v106)(v30, 1, v31) != 1)
          {
            CGFloat v43 = v110;
            (*v98)(v110, v30, v31);
            CGFloat v44 = (void (*)(CGAffineTransform *, void))Ref.subscript.modify();
            specialized PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(a4, &lazy protocol witness table cache variable for type Capsule<PKDrawingStruct>.Ref and conformance Capsule<A>.Ref, &demangling cache variable for type metadata for Capsule<PKDrawingStruct>.Ref);
            v44(&t1, 0);
            if (v103)
            {
              uint64_t v45 = (uint64_t)v99;
              Ref.subscript.getter();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
              CGFloat v46 = v100;
              CRRegister.wrappedValue.getter();
              _s8PaperKit5ImageVWOhTm_1(v45, type metadata accessor for PKStrokeStruct);
              uint64_t v47 = v104;
              CGAffineTransform v48 = (void (*)(char *, void))Ref.subscript.modify();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
              uint64_t v49 = (void (*)(char *, void))CRRegister.wrappedValue.modify();
              uint64_t v51 = v50;
              long long v52 = v50[1];
              long long v53 = v50[2];
              *(_OWORD *)&t1.double a = *v50;
              *(_OWORD *)&t1.double c = v52;
              *(_OWORD *)&t1.tCGFloat x = v53;
              t2.double a = v6;
              t2.double b = v7;
              t2.double c = v8;
              t2.double d = v9;
              t2.tCGFloat x = v10;
              t2.tCGFloat y = v11;
              CGAffineTransformConcat(&v118, &t1, &t2);
              long long v54 = *(_OWORD *)&v118.c;
              long long v55 = *(_OWORD *)&v118.tx;
              *uint64_t v51 = *(_OWORD *)&v118.a;
              v51[1] = v54;
              v51[2] = v55;
              a4 = v97;
              v49(v120, 0);
              v48(v121, 0);
              CGRect v56 = v46;
              double v22 = v96;
              uint64_t v57 = v47;
              uint64_t v31 = v114;
              (*v101)(v56, v57);
              (*v95)(v43, v31);
            }
            else
            {
              double v58 = v6;
              uint64_t v59 = (uint64_t)v91;
              Ref.subscript.getter();
              uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
              uint64_t v61 = v92;
              v90 = (void (*)(CGAffineTransform *, void))v60;
              CRRegister.wrappedValue.getter();
              _s8PaperKit5ImageVWOhTm_1(v59, type metadata accessor for PKStrokeStruct);
              uint64_t v62 = (uint64_t)v93;
              uint64_t v63 = v104;
              Ref.subscript.getter();
              v64 = *v101;
              (*v101)(v61, v63);
              uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
              CRRegister.wrappedValue.getter();
              double a = t1.a;
              double b = t1.b;
              double c = t1.c;
              double d = t1.d;
              tCGFloat x = t1.tx;
              tCGFloat y = t1.ty;
              _s8PaperKit5ImageVWOhTm_1(v62, type metadata accessor for PKStrokeInheritedProperties);
              if (vabdd_f64(a, *v94) >= v83
                || vabdd_f64(b, v94[1]) >= v83
                || vabdd_f64(c, v94[2]) >= v83
                || vabdd_f64(d, v94[3]) >= v83
                || vabdd_f64(tx, v94[4]) >= v81
                || vabdd_f64(ty, v94[5]) >= v81)
              {
                uint64_t v72 = (uint64_t)v99;
                a4 = v97;
                uint64_t v88 = v65;
                v73 = v94;
                v89 = v64;
                uint64_t v74 = v114;
                Ref.subscript.getter();
                v75 = v100;
                CRRegister.wrappedValue.getter();
                _s8PaperKit5ImageVWOhTm_1(v72, type metadata accessor for PKStrokeStruct);
                uint64_t v76 = v104;
                v90 = (void (*)(CGAffineTransform *, void))Ref.subscript.modify();
                long long v77 = *((_OWORD *)v73 + 2);
                long long v79 = *(_OWORD *)v73;
                long long v78 = *((_OWORD *)v73 + 1);
                uint64_t v31 = v74;
                *(_OWORD *)&t1.double c = v78;
                *(_OWORD *)&t1.tCGFloat x = v77;
                *(_OWORD *)&t1.double a = v79;
                CRRegister.wrappedValue.setter();
                v90(&t2, 0);
                v89(v75, v76);
                (*v95)(v110, v74);
              }
              else
              {
                uint64_t v31 = v114;
                (*v95)(v110, v114);
                a4 = v97;
              }
              CGFloat v6 = v58;
              CGFloat v8 = v87;
              CGFloat v9 = v86;
              CGFloat v10 = v85;
              CGFloat v11 = v84;
              double v22 = v96;
            }
            uint64_t v39 = v102;
            goto LABEL_7;
          }
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
LABEL_7:
        v38 += v115;
        if (!--v35) {
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  return result;
}

uint64_t key path setter for Canvas.liveStreamMessenger : <A>Canvas<A>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = swift_unknownObjectRetain();
  specialized Canvas.liveStreamMessenger.setter(v2, v1);
  return swift_unknownObjectRelease();
}

uint64_t Canvas.liveStreamMessenger.didset()
{
  uint64_t v1 = v0;
  v67 = (void *)(*MEMORY[0x263F8EED0] & *v0);
  uint64_t v66 = type metadata accessor for CRMulticastSyncManagerCatchupBehavior();
  uint64_t v2 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  uint64_t v4 = (char *)v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v67[252];
  uint64_t v65 = v67[251];
  uint64_t v6 = type metadata accessor for Capsule();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  CGFloat v9 = (char *)v55 - v8;
  uint64_t v10 = type metadata accessor for CRKeyPath();
  uint64_t v64 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v63 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t **)((char *)v1 + direct field offset for Canvas.liveStreamMessenger);
  swift_beginAccess();
  v69 = v12;
  uint64_t v13 = *v12;
  if (v13)
  {
    uint64_t v58 = v7;
    uint64_t v62 = v5;
    v68 = v69[1];
    uint64_t v14 = one-time initialization token for multipeerLogger;
    swift_unknownObjectRetain();
    if (v14 != -1) {
      swift_once();
    }
    uint64_t v57 = v10;
    uint64_t v59 = v6;
    uint64_t v60 = v4;
    uint64_t v61 = v2;
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)multipeerLogger);
    swift_unknownObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      v71[0] = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v20 = ObjectIdentifier.debugDescription.getter();
      uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
      _os_log_impl(&dword_20C2D7000, v16, v17, "New session for %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v19, -1, -1);
      MEMORY[0x210550270](v18, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n();
    }

    uint64_t ObjectType = swift_getObjectType();
    uint64_t v56 = ObjectType;
    uint64_t v31 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_context);
    uint64_t v32 = (uint64_t)v63;
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x930))();
    CanvasElementView.canvasElement.getter((uint64_t)v9);
    uint64_t v33 = *MEMORY[0x263F32FA8];
    v55[1] = v13;
    uint64_t v34 = v61;
    uint64_t v35 = (uint64_t)v9;
    uint64_t v36 = (uint64_t)v60;
    uint64_t v37 = v66;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 104))(v60, v33, v66);
    uint64_t v38 = v62;
    uint64_t v39 = ObjectType;
    uint64_t v40 = v65;
    v55[0] = (uint64_t *)PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(v31, v32, v35, v36, 0x7265706150, 0xE500000000000000, v39, v65, (uint64_t)v68, v62);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v37);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v35, v59);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v32, v57);
    uint64_t v41 = swift_allocObject();
    swift_unknownObjectWeakInit();
    CGFloat v42 = (void *)swift_allocObject();
    v42[2] = v40;
    v42[3] = v38;
    v42[4] = v67[253];
    v42[5] = v41;
    uint64_t v43 = type metadata accessor for Canvas();
    swift_retain();
    CGFloat v44 = v55[0];
    PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(v55[0], (uint64_t)v1, 0x7265706150, 0xE500000000000000, (uint64_t)partial apply for closure #1 in Canvas.liveStreamMessenger.didset, (uint64_t)v42, v56, v43, (uint64_t)v68, (uint64_t)&protocol witness table for AnyCanvas);
    swift_release();
    swift_release();
    *(void *)((char *)v1 + direct field offset for Canvas.multipeerConnection) = v44;
    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for multipeerLogger != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)multipeerLogger);
    uint64_t v23 = v1;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      v71[0] = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      uint64_t v28 = ObjectIdentifier.debugDescription.getter();
      uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v24, v25, "Ended session for %s", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v27, -1, -1);
      MEMORY[0x210550270](v26, -1, -1);
    }
    else
    {
    }
    *(void *)((char *)v23 + direct field offset for Canvas.multipeerConnection) = 0;
  }
  swift_release();
  BOOL v45 = *v69 != 0;
  CGFloat v46 = (unsigned __int8 *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings;
  uint64_t v47 = swift_beginAccess();
  *CGFloat v46 = v45;
  CGAffineTransform v48 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v1) + 0x320))(v47);
  if (v48)
  {
    uint64_t v49 = v48;
    id v50 = objc_msgSend(v48, sel_canvasView);

    if (v50)
    {
      objc_msgSend(v50, sel_setGenerateLiveDrawing_, *v46);
    }
  }
  uint64_t v51 = v69[1];
  long long v52 = *(uint64_t (**)(uint64_t, uint64_t *))((*MEMORY[0x263F8EED0] & *v1) + 0x208);
  uint64_t v53 = swift_unknownObjectRetain();
  return v52(v53, v51);
}

void closure #1 in Canvas.liveStreamMessenger.didset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x210550400](v7);
  if (v8)
  {
    CGFloat v9 = (void *)v8;
    uint64_t v10 = *(void *)(a4 + 16);
    unsigned __int8 v11 = 3;
    AnyCanvas.merge<A>(_:from:)(a1, &v11, a3, v10);
  }
}

uint64_t Canvas.canvasStateLiveStreamMessenger.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = *MEMORY[0x263F8EED0] & *v0;
  uint64_t v3 = type metadata accessor for CRMulticastSyncManagerCatchupBehavior();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<CanvasState>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CRKeyPath();
  uint64_t v27 = *(void *)(v11 - 8);
  uint64_t v28 = v11;
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v2;
  if ((*(uint64_t (**)(double))(v2 + 512))(v12))
  {
    uint64_t v30 = v15;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v26 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_context);
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x930))();
    uint64_t v16 = (char *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasState;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v16, v7);
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F32FA0], v3);
    uint64_t v17 = type metadata accessor for CanvasState();
    uint64_t v18 = _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
    uint64_t v26 = (void *)PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(v26, (uint64_t)v14, (uint64_t)v10, (uint64_t)v6, 0x74537361766E6143, 0xEB00000000657461, ObjectType, v17, v30, v18);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v28);
    uint64_t v19 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v20 = (void *)swift_allocObject();
    uint64_t v21 = v29;
    v20[2] = *(void *)(v29 + 2008);
    v20[3] = *(void *)(v21 + 2016);
    v20[4] = *(void *)(v21 + 2024);
    v20[5] = v19;
    uint64_t v22 = type metadata accessor for Canvas();
    uint64_t v23 = v26;
    PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)((uint64_t *)v26, (uint64_t)v1, 0x74537361766E6143, 0xEB00000000657461, (uint64_t)partial apply for closure #1 in Canvas.canvasStateLiveStreamMessenger.didset, (uint64_t)v20, ObjectType, v22, v30, (uint64_t)&protocol witness table for AnyCanvas);
    swift_release();
    *(void *)((char *)v1 + direct field offset for Canvas.multipeerCanvasStateConnection) = v23;
    swift_unknownObjectRelease();
    return swift_release();
  }
  else
  {
    *(void *)((char *)v1 + direct field offset for Canvas.multipeerCanvasStateConnection) = 0;
    return swift_release();
  }
}

void closure #1 in Canvas.canvasStateLiveStreamMessenger.didset(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x210550400](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    Canvas.mergeCanvasState(_:)();
  }
}

uint64_t key path setter for Canvas.updatablePaper : <A>Canvas<A>(uint64_t a1)
{
  type metadata accessor for Capsule();
  uint64_t v2 = type metadata accessor for Optional();
  double v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - v4;
  (*(void (**)(char *, uint64_t, double))(v6 + 16))((char *)&v8 - v4, a1, v3);
  return Canvas.updatablePaper.setter((uint64_t)v5);
}

uint64_t closure #1 in Canvas.mergeToCanvasElements()(uint64_t a1, void *a2)
{
  uint64_t v30 = a1;
  uint64_t v2 = (void *)(*MEMORY[0x263F8EED0] & *a2);
  uint64_t v3 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v28 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v23 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v29 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v24 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v27 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v22 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v2[251];
  uint64_t v10 = v2[252];
  uint64_t v11 = type metadata accessor for Capsule();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v22 - v13;
  CanvasElementView.canvasElement.getter((uint64_t)&v22 - v13);
  uint64_t v32 = v9;
  uint64_t v33 = v10;
  uint64_t v34 = v2[253];
  swift_getKeyPath();
  uint64_t v15 = v22;
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v16 = v23;
  uint64_t v17 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v6, v30, v26);
  WeakTagged_9.tag.getter();
  uint64_t v35 = v37;
  char v36 = v38;
  MEMORY[0x21054B9C0](v17);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  uint64_t v18 = v24;
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v17);
  uint64_t v19 = v18;
  uint64_t v20 = v25;
  LOBYTE(v18) = CROrderedSet.contains(_:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v31);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v20);
  return v18 & 1;
}

void Canvas.editingMode.didset(unsigned __int8 *a1)
{
  void (*v5)(uint64_t *__return_ptr);
  void *v6;
  uint64_t (*v7)(void);
  char v8;
  char **v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t vars8;

  uint64_t v2 = v1;
  int v3 = *a1;
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = *(void (**)(uint64_t *__return_ptr))((*MEMORY[0x263F8EED0] & *v1) + 0x2C8);
  v5((uint64_t *)((char *)&v17 + 2));
  if (BYTE2(v17) != v3)
  {
    uint64_t v6 = *(void **)((char *)v1 + direct field offset for Canvas.dropInteraction);
    if (v6)
    {
      uint64_t v7 = *(uint64_t (**)(void))((*v4 & *v1) + 0xB18);
      uint64_t v16 = v6;
      uint64_t v8 = v7();
      uint64_t v9 = &selRef_addInteraction_;
      if ((v8 & 1) == 0) {
        uint64_t v9 = &selRef_removeInteraction_;
      }
      ((void (*)(uint64_t *__return_ptr, id))v5)((uint64_t *)((char *)&v17 + 1), objc_msgSend(v1, *v9, v16));
      if (v3 == 1 || BYTE1(v17) == 1)
      {
        uint64_t v10 = Canvas.editingView.getter();
        uint64_t v12 = v11;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v12 + 24))(ObjectType, v12);
      }
      v5(&v17);
      if (!(_BYTE)v17)
      {
        uint64_t v14 = *(void *)((char *)v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
        if (!v14)
        {
          __break(1u);
          return;
        }
        uint64_t v15 = (void *)(v14 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
        if (*(void *)(*v15 + 16) || *(void *)(v15[1] + 16)) {
          AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
        }
      }
    }
  }
}

void @objc Canvas.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized Canvas.init(coder:)();
}

void closure #1 in Canvas.setupBandSelection()(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v6 - 8);
  v122 = (char *)v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v8 - 8);
  v125 = (char *)v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v124 = *(void *)(v127 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v127);
  v126 = (char *)v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  v121 = (char *)v113 - v12;
  uint64_t v129 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v116 = *(void *)(v129 - 8);
  MEMORY[0x270FA5388](v129);
  v128 = (char *)v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v14 - 8);
  v132 = (char *)v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v117 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = (void *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v131 = (unsigned __int8 *)*(v130 - 1);
  MEMORY[0x270FA5388](v130);
  v133 = (char *)v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v118 = (uint64_t)v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)v113 - v23;
  uint64_t v25 = a2 + 16;
  uint64_t v26 = swift_projectBox();
  swift_beginAccess();
  uint64_t v27 = MEMORY[0x210550400](v25);
  if (!v27) {
    return;
  }
  uint64_t v28 = (char *)v27;
  switch((unint64_t)objc_msgSend((id)a1, sel_state))
  {
    case 1uLL:
      uint64_t v29 = *(void *)&v28[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
      if (!v29) {
        goto LABEL_66;
      }
      uint64_t v30 = v26;
      uint64_t v31 = (uint64_t *)(v29 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
      uint64_t v32 = *v31;
      uint64_t v33 = v31[1];
      uint64_t v34 = v31[2];
      char v35 = *((unsigned char *)v31 + 24);
      swift_beginAccess();
      *(void *)(a3 + 16) = v32;
      *(void *)(a3 + 24) = v33;
      *(void *)(a3 + 32) = v34;
      *(unsigned char *)(a3 + 40) = v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v36 = Canvas.editingView.getter();
      uint64_t v38 = v37;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v40 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v38 + 16))(ObjectType, v38);

      if (v40)
      {
        id v41 = objc_msgSend(v40, sel_drawing);

        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v42 = type metadata accessor for PKDrawing();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v24, 0, 1, v42);
      }
      else
      {

        uint64_t v76 = type metadata accessor for PKDrawing();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v24, 1, 1, v76);
      }
      swift_beginAccess();
      outlined assign with take of Date?((uint64_t)v24, v30, &demangling cache variable for type metadata for PKDrawing?);
      return;
    case 2uLL:
      v113[1] = a3 + 16;
      UIBandSelectionInteraction.selectionRect.getter();
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v141, (uint64_t)v142, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
      if (v143 == 1) {
        goto LABEL_3;
      }
      double v43 = *(double *)v142;
      double v44 = *(double *)&v142[1];
      double v45 = *(double *)&v142[2];
      double v46 = *(double *)&v142[3];
      id v47 = Canvas.editingView.getter();
      objc_msgSend(v47, sel_convertRect_fromCoordinateSpace_, v28, v43, v44, v45, v46);
      double v49 = v48;
      double v51 = v50;
      double v53 = v52;
      double v55 = v54;

      uint64_t v139 = MEMORY[0x263F8EE88];
      uint64_t v140 = MEMORY[0x263F8EE88];
      id v56 = Canvas.editingView.getter();
      uint64_t v58 = v57;
      uint64_t v59 = swift_getObjectType();
      unint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 56))(v59, v58);

      *(void *)&long long v137 = MEMORY[0x263F8EE78];
      if (v60 >> 62) {
        goto LABEL_41;
      }
      uint64_t v61 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_10:
      uint64_t v62 = MEMORY[0x263F8EE78];
      unint64_t v114 = a1;
      v123 = v28;
      uint64_t v115 = a3;
      v113[0] = v26;
      if (v61)
      {
        a1 = 0;
        unint64_t v120 = v60 & 0xC000000000000001;
        uint64_t v119 = v60 & 0xFFFFFFFFFFFFFF8;
        a3 = v61;
        while (1)
        {
          if (v120)
          {
            unint64_t v64 = v60;
            uint64_t v65 = (void *)MEMORY[0x21054E050](a1, v60);
          }
          else
          {
            if (a1 >= *(void *)(v119 + 16))
            {
              __break(1u);
LABEL_40:
              __break(1u);
LABEL_41:
              swift_bridgeObjectRetain();
              uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_10;
            }
            unint64_t v64 = v60;
            uint64_t v65 = *(id *)(v60 + 8 * a1 + 32);
          }
          uint64_t v66 = v65;
          unint64_t v60 = a1 + 1;
          if (__OFADD__(a1, 1)) {
            goto LABEL_40;
          }
          uint64_t v26 = v62;
          id v67 = objc_msgSend(v28, sel_bounds);
          v69.n128_u64[0] = v68;
          v71.n128_u64[0] = v70;
          v73.n128_u64[0] = v72;
          v75.n128_u64[0] = v74;
          if ((*(uint64_t (**)(id, double, double, double, double, __n128, __n128, __n128, __n128))((*MEMORY[0x263F8EED0] & *v66) + 0x328))(v67, v49, v51, v53, v55, v69, v71, v73, v75))
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            uint64_t v28 = v123;
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
          }
          ++a1;
          BOOL v63 = v60 == a3;
          unint64_t v60 = v64;
          if (v63)
          {
            uint64_t v77 = v137;
            a3 = v115;
            a1 = v114;
            uint64_t v26 = v113[0];
            goto LABEL_25;
          }
        }
      }
      uint64_t v77 = MEMORY[0x263F8EE78];
LABEL_25:
      swift_bridgeObjectRelease();
      uint64_t v78 = (uint64_t)v125;
      if (v77 < 0 || (v77 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (v79) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v79 = *(void *)(v77 + 16);
        if (v79)
        {
LABEL_28:
          v135[0] = v62;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79 & ~(v79 >> 63), 0);
          unint64_t v120 = v79;
          if (v79 < 0)
          {
            __break(1u);
LABEL_66:
            __break(1u);
            JUMPOUT(0x20C77A3A0);
          }
          uint64_t v80 = 0;
          unint64_t v81 = v77 & 0xC000000000000001;
          uint64_t v82 = (void (**)(char *, uint64_t))(v117 + 8);
          uint64_t v83 = v77;
          do
          {
            if (v81) {
              double v84 = (void *)MEMORY[0x21054E050](v80, v77);
            }
            else {
              double v84 = *(id *)(v77 + 8 * v80 + 32);
            }
            double v85 = v84;
            (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v84) + 0xE8))();
            SharedTagged_9.tag.getter();
            *(void *)&v136[0] = v137;
            BYTE8(v136[0]) = BYTE8(v137);
            MEMORY[0x21054BDF0](v16);
            lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
            WeakTagged_9.init(_:id:)();
            (*v82)(v18, v16);

            uint64_t v86 = v135[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v86 + 16) + 1, 1);
              uint64_t v86 = v135[0];
            }
            unint64_t v88 = *(void *)(v86 + 16);
            unint64_t v87 = *(void *)(v86 + 24);
            if (v88 >= v87 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, v88 + 1, 1);
              uint64_t v86 = v135[0];
            }
            ++v80;
            *(void *)(v86 + 16) = v88 + 1;
            (*((void (**)(unint64_t, char *, void *))v131 + 4))(v86 + ((v131[80] + 32) & ~(unint64_t)v131[80]) + *((void *)v131 + 9) * v88, v133, v130);
            uint64_t v77 = v83;
          }
          while (v120 != v80);
          swift_release();
          a3 = v115;
          a1 = v114;
          uint64_t v28 = v123;
          uint64_t v78 = (uint64_t)v125;
          uint64_t v26 = v113[0];
          goto LABEL_44;
        }
      }
      swift_release();
      uint64_t v86 = MEMORY[0x263F8EE78];
LABEL_44:
      uint64_t v89 = specialized Set.init<A>(_:)(v86);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v140 = v89;
      swift_beginAccess();
      uint64_t v90 = v118;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v26, v118, &demangling cache variable for type metadata for PKDrawing?);
      uint64_t v91 = type metadata accessor for PKDrawing();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 48))(v90, 1, v91) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v90, &demangling cache variable for type metadata for PKDrawing?);
      }
      else
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
        swift_dynamicCast();
        v92 = (void *)v137;
        id v93 = objc_msgSend((id)v137, sel_intersectedStrokesFromRect_visibleOnscreenStrokes_, 0, v49, v51, v53, v55);

        v94 = v93;
        NSOrderedSet.makeIterator()();
        v130 = v94;

        _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, MEMORY[0x263F06DC0]);
        dispatch thunk of IteratorProtocol.next()();
        if (v138)
        {
          v95 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56);
          v96 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48);
          uint64_t v97 = (void (**)(char *, uint64_t, uint64_t))(v124 + 32);
          uint64_t v98 = MEMORY[0x263F8EE78];
          v133 = (char *)(MEMORY[0x263F8EE58] + 8);
          uint64_t v99 = v127;
          do
          {
            outlined init with take of Any(&v137, v136);
            outlined init with copy of Any((uint64_t)v136, (uint64_t)v135);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKStroke);
            if (swift_dynamicCast())
            {
              v131 = v134;
              id v100 = objc_msgSend(v134, sel__strokeUUID);
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              v101 = v125;
              CRKeyPath.init(_:)();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
              uint64_t v78 = (uint64_t)v101;
              lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
              uint64_t v28 = v123;
              WeakRef.init(id:)();

              uint64_t v99 = v127;
              uint64_t v102 = 0;
            }
            else
            {
              uint64_t v102 = 1;
            }
            (*v95)(v78, v102, 1, v99);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v136);
            if ((*v96)(v78, 1, v99) == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(v78, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
            }
            else
            {
              int v103 = *v97;
              uint64_t v104 = v121;
              (*v97)(v121, v78, v99);
              v103(v126, (uint64_t)v104, v99);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v98 + 16) + 1, 1, v98);
              }
              unint64_t v106 = *(void *)(v98 + 16);
              unint64_t v105 = *(void *)(v98 + 24);
              if (v106 >= v105 >> 1) {
                uint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1, v106 + 1, 1, v98);
              }
              *(void *)(v98 + 16) = v106 + 1;
              uint64_t v99 = v127;
              v103((char *)(v98+ ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80))+ *(void *)(v124 + 72) * v106), (uint64_t)v126, v127);
              uint64_t v28 = v123;
            }
            dispatch thunk of IteratorProtocol.next()();
          }
          while (v138);
        }
        else
        {
          uint64_t v98 = MEMORY[0x263F8EE78];
        }
        (*(void (**)(char *, uint64_t))(v116 + 8))(v128, v129);

        uint64_t v107 = specialized Set.init<A>(_:)(v98);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v139 = v107;
        a3 = v115;
        a1 = v114;
      }
      if (objc_msgSend((id)a1, sel_initialModifierFlags, v113[0]) == (id)0x20000)
      {
        swift_beginAccess();
        uint64_t v108 = *(void *)(a3 + 16);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        specialized Set.formSymmetricDifference(_:)(v108);
        uint64_t v109 = swift_bridgeObjectRetain();
        specialized Set.formSymmetricDifference(_:)(v109);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v111 = v139;
      uint64_t v110 = v140;
      uint64_t v112 = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AnyCanvas.selection.setter(v110, v111, 6, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    default:
LABEL_3:

      return;
  }
}

uint64_t closure #2 in Canvas.setupBandSelection()(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v6);
  if (result)
  {
    uint64_t v8 = (void *)result;
    (*(void (**)(void **__return_ptr))((*MEMORY[0x263F8EED0] & *(void *)result) + 0x2C8))(&v20);
    if ((_BYTE)v20 && *((unsigned char *)v8 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_nonDrawingToolMode) == 1)
    {
      id v9 = Canvas.editingView.getter();
      uint64_t v11 = v10;
      uint64_t ObjectType = swift_getObjectType();
      unint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 56))(ObjectType, v11);

      if (v13 >> 62) {
        goto LABEL_19;
      }
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v14; uint64_t v14 = _CocoaArrayWrapper.endIndex.getter())
      {
        uint64_t v15 = 4;
        while (1)
        {
          uint64_t v16 = (v13 & 0xC000000000000001) != 0
              ? (void *)MEMORY[0x21054E050](v15 - 4, v13)
              : *(id *)(v13 + 8 * v15);
          uint64_t v17 = v16;
          uint64_t v18 = v15 - 3;
          if (__OFADD__(v15 - 4, 1)) {
            break;
          }
          uint64_t v20 = v16;
          char v19 = closure #1 in closure #2 in Canvas.setupBandSelection()(&v20, (uint64_t)v8, a1, a2);

          if ((v19 & 1) == 0)
          {

            swift_bridgeObjectRelease_n();
            return 0;
          }
          ++v15;
          if (v18 == v14) {
            goto LABEL_13;
          }
        }
        __break(1u);
LABEL_19:
        swift_bridgeObjectRetain();
      }
LABEL_13:

      swift_bridgeObjectRelease_n();
      return 1;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

uint64_t closure #1 in closure #2 in Canvas.setupBandSelection()(void **a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7 = *a1;
  if ((*(uint64_t (**)(void))((**a1 & *MEMORY[0x263F8EED0]) + 0x218))()) {
    return 1;
  }
  objc_msgSend(v7, sel_convertPoint_fromCoordinateSpace_, a2, a3, a4);
  id v8 = objc_msgSend(v7, sel_hitTest_withEvent_, 0);
  if (!v8) {
    return 1;
  }

  return 0;
}

Swift::Void __swiftcall Canvas.didMoveToSuperview()()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for Canvas();
  objc_msgSendSuper2(&v7, sel_didMoveToSuperview);
  id v2 = objc_msgSend(v0, sel_superview);

  if (v2)
  {
    id v3 = *(uint64_t (**)(void))((*v1 & *v0) + 0x320);
    uint64_t v4 = (void *)v3();
    objc_msgSend(v4, sel__layoutSubviews);

    uint64_t v5 = (void *)v3();
    objc_msgSend(v5, sel__didAddDrawingAttachmentView);

    uint64_t v6 = (void *)v3();
    objc_msgSend(v6, sel_updateTilesForVisibleRect);
  }
}

void @objc Canvas.didMoveToSuperview()(void *a1)
{
  id v1 = a1;
  Canvas.didMoveToSuperview()();
}

uint64_t closure #1 in Canvas.canvasElementOrFormFieldExistsAtPoint(_:)(void **a1, uint64_t a2, double a3, double a4)
{
  objc_super v7 = *a1;
  if ((*(uint64_t (**)(void))((**a1 & *MEMORY[0x263F8EED0]) + 0x218))()) {
    return 0;
  }
  objc_msgSend(v7, sel_convertPoint_fromCoordinateSpace_, *(void *)(a2 + direct field offset for Canvas.paperView), a3, a4);
  uint64_t result = (uint64_t)objc_msgSend(v7, sel_hitTest_withEvent_, 0);
  if (result)
  {

    return 1;
  }
  return result;
}

uint64_t closure #1 in Canvas.showOrHideContent(below:)(uint64_t *a1, char *a2, char *a3, char *a4, double a5, double a6)
{
  uint64_t v66 = a2;
  uint64_t v71 = *a1;
  unint64_t v72 = a1;
  uint64_t v10 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v58 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v12 - 8);
  unint64_t v60 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v61 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v57 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  __n128 v73 = *(char ***)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v57 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v25 = *(char **)(v24 - 8);
  __n128 v69 = (char **)v24;
  unint64_t v70 = v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v65 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v57 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = *(char **)(v71 + *MEMORY[0x263F33088]);
  unint64_t v74 = v59;
  __n128 v75 = a3;
  unint64_t v64 = a4;
  uint64_t v76 = a4;
  swift_getKeyPath();
  BOOL v63 = a3;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  uint64_t v31 = v69;
  CROrderedSet.makeIterator()();
  (*((void (**)(char *, char **))v70 + 1))(v27, v31);
  unint64_t v70 = v30;
  uint64_t v71 = v28;
  CROrderedSet.Iterator.next()();
  uint64_t v32 = v73;
  unint64_t v68 = v73[6];
  __n128 v69 = v73 + 6;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v68)(v23, 1, v15) != 1)
  {
    uint64_t v42 = v32[4];
    id v41 = v32 + 4;
    id v67 = v42;
    double v43 = (void (**)(char *, char *, uint64_t))(v41 - 2);
    __n128 v73 = v41;
    double v44 = (void (**)(char *, uint64_t))(v41 - 3);
    ((void (*)(char *, char *, uint64_t))v42)(v20, v23, v15);
    while (1)
    {
      SharedTagged_9.subscript.getter();
      uint64_t v47 = v78;
      uint64_t v46 = v79;
      __swift_project_boxed_opaque_existential_1(v77, v78);
      (*(void (**)(uint64_t))(*(void *)(v46 + 8) + 8))(v47);
      double v49 = v48;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
      (*v43)(v17, v20, v15);
      if (v49 <= a6)
      {
        double v45 = *v44;
        (*v44)(v17, v15);
        v45(v20, v15);
      }
      else
      {
        SharedTagged_9.subscript.getter();
        uint64_t v51 = v78;
        uint64_t v50 = v79;
        __swift_project_boxed_opaque_existential_1(v77, v78);
        double v52 = (*(double (**)(uint64_t))(*(void *)(v50 + 8) + 8))(v51);
        double v53 = *v44;
        (*v44)(v17, v15);
        v53(v20, v15);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
        if (v52 > 5000.0)
        {
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v70, v71);
          *uint64_t v66 = 0;
          return result;
        }
      }
      CROrderedSet.Iterator.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v68)(v23, 1, v15) == 1) {
        break;
      }
      ((void (*)(char *, char *, uint64_t))v67)(v20, v23, v15);
    }
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v70, v71);
  uint64_t v34 = v66;
  if (*v66 == 1)
  {
    MEMORY[0x270FA5388](result);
    char v35 = v63;
    *(&v57 - 4) = v59;
    *(&v57 - 3) = v35;
    id v36 = v64;
    *(&v57 - 2) = v64;
    swift_getKeyPath();
    uint64_t v37 = (uint64_t)v60;
    uint64_t v38 = (uint64_t)v72;
    Capsule.Ref<>.subscript.getter();
    swift_release();
    uint64_t v39 = v61;
    uint64_t v40 = v62;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v37, 1, v62) == 1)
    {
      return outlined destroy of StocksKitCurrencyCache.Provider?(v37, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    }
    else
    {
      double v54 = v57;
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v57, v37, v40);
      uint64_t v55 = (uint64_t)v58;
      uint64_t v56 = Ref.subscript.getter();
      __n128 v73 = &v57;
      MEMORY[0x270FA5388](v56);
      *(&v57 - 6) = v35;
      *(&v57 - 5) = v36;
      *(&v57 - 4) = (char *)v38;
      *((double *)&v57 - 3) = a5;
      *((double *)&v57 - 2) = a6;
      *(&v57 - 1) = v34;
      PKDrawingStruct.visitStrokes<A>(in:_:)(v38, partial apply for closure #1 in closure #1 in Canvas.showOrHideContent(below:), (uint64_t)(&v57 - 8));
      _s8PaperKit5ImageVWOhTm_1(v55, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v54, v40);
    }
  }
  return result;
}

void closure #1 in closure #1 in Canvas.showOrHideContent(below:)(double a1, CGFloat a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  uint64_t v22 = a4;
  uint64_t v12 = type metadata accessor for Capsule.Ref();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  double v14 = specialized CRRegister<>.bounds(in:)(&v22, (uint64_t)v11, v12, WitnessTable);
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
  if (CGRect.isFinite.getter(v14, v16, v18, v20))
  {
    v23.origin.CGFloat x = v14;
    v23.origin.CGFloat y = v16;
    v23.size.CGFloat width = v18;
    v23.size.CGFloat height = v20;
    if (CGRectGetMinY(v23) > a2)
    {
      v24.origin.CGFloat x = v14;
      v24.origin.CGFloat y = v16;
      v24.size.CGFloat width = v18;
      v24.size.CGFloat height = v20;
      if (CGRectGetMinX(v24) > 5000.0) {
        *a5 = 0;
      }
    }
  }
}

uint64_t closure #2 in Canvas.showOrHideContent(below:)(char *a1, unsigned __int8 *a2, uint64_t a3, char *a4, double a5, double a6)
{
  v95 = a2;
  uint64_t v10 = a1;
  uint64_t v110 = *(char **)a1;
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v103 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  uint64_t v99 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v98 = (char *)&v83 - v13;
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v102 = *(void *)(v97 - 8);
  MEMORY[0x270FA5388](v97);
  v101 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v83 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  double v20 = (char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  CGRect v23 = (char *)&v83 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v86 = (char *)&v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v89 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90);
  unint64_t v88 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v27 - 8);
  v96 = (char *)&v83 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v30 = *(void (***)(char *, uint64_t))(v29 - 8);
  uint64_t v108 = (uint64_t (*)(void, void, void))v29;
  uint64_t v109 = v30;
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v83 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v85 = *(void *)(v111 - 8);
  MEMORY[0x270FA5388](v111);
  uint64_t v34 = (char *)&v83 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v84 = *(char **)&v110[*MEMORY[0x263F33088]];
  uint64_t v112 = v84;
  uint64_t v113 = a3;
  unint64_t v87 = a4;
  unint64_t v114 = a4;
  uint64_t v35 = v18;
  swift_getKeyPath();
  uint64_t v91 = a3;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  id v36 = v108;
  CROrderedSet.makeIterator()();
  v109[1](v32, (uint64_t)v36);
  uint64_t v37 = v96;
  uint64_t v110 = v34;
  CROrderedSet.Iterator.next()();
  uint64_t v108 = *(uint64_t (**)(void, void, void))(v35 + 48);
  uint64_t v109 = (void (**)(char *, uint64_t))(v35 + 48);
  int v38 = v108(v37, 1, v17);
  uint64_t v104 = v10;
  if (v38 != 1)
  {
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v46 = v35 + 32;
    uint64_t v107 = v47;
    unint64_t v106 = (void (**)(char *, char *, uint64_t))(v46 - 16);
    unint64_t v105 = (void (**)(char *, uint64_t))(v46 - 24);
    uint64_t v94 = v46;
    id v93 = v20;
    v92 = v23;
    v47(v23, v37, v17);
    while (1)
    {
      SharedTagged_9.subscript.getter();
      CGFloat d = v116.d;
      tCGFloat x = v116.tx;
      __swift_project_boxed_opaque_existential_1(&v116, *(uint64_t *)&v116.d);
      (*(void (**)(CGFloat))(*(void *)(*(void *)&tx + 8) + 8))(COERCE_CGFLOAT(*(void *)&d));
      double v52 = v51;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v116);
      (*v106)(v20, v23, v17);
      if (v52 <= a6)
      {
        double v48 = *v105;
        (*v105)(v20, v17);
      }
      else
      {
        double v53 = v95;
        int v54 = *v95;
        uint64_t v55 = v105;
        SharedTagged_9.subscript.getter();
        CGFloat v57 = v116.d;
        CGFloat v56 = v116.tx;
        __swift_project_boxed_opaque_existential_1(&v116, *(uint64_t *)&v116.d);
        double v58 = (*(double (**)(CGFloat))(*(void *)(*(void *)&v56 + 8) + 8))(COERCE_CGFLOAT(*(void *)&v57));
        double v48 = *v55;
        (*v55)(v20, v17);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v116);
        if ((v54 ^ (v58 >= 5000.0)))
        {
          double v59 = *v53 ? 10000.0 : -10000.0;
          CGRect v23 = v92;
          unint64_t v60 = (void (*)(CGAffineTransform *, void))SharedTagged_9.subscript.modify();
          uint64_t v63 = *(void *)(v61 + 24);
          uint64_t v62 = *(void *)(v61 + 32);
          __swift_mutable_project_boxed_opaque_existential_1(v61, v63);
          uint64_t v64 = v63;
          uint64_t v10 = v104;
          uint64_t v65 = (void (*)(char *, void))(*(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 24))(v115, v64, v62);
          *uint64_t v66 = v59 + *v66;
          v65(v115, 0);
          v60(&v116, 0);
          double v20 = v93;
        }
        else
        {
          double v20 = v93;
          CGRect v23 = v92;
        }
        uint64_t v37 = v96;
      }
      v48(v23, v17);
      CROrderedSet.Iterator.next()();
      if (v108(v37, 1, v17) == 1) {
        break;
      }
      v107(v23, v37, v17);
    }
  }
  uint64_t v39 = (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v110, v111);
  MEMORY[0x270FA5388](v39);
  uint64_t v40 = v91;
  *(&v83 - 4) = v84;
  *(&v83 - 3) = (char *)v40;
  id v41 = v87;
  *(&v83 - 2) = v87;
  swift_getKeyPath();
  uint64_t v42 = (uint64_t)v86;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  uint64_t v43 = v89;
  uint64_t v44 = v90;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v42, 1, v90) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?(v42, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v88, v42, v44);
  uint64_t v67 = (uint64_t)v83;
  uint64_t v68 = Ref.subscript.getter();
  MEMORY[0x270FA5388](v68);
  *(&v83 - 6) = (char *)v40;
  *(&v83 - 5) = v41;
  *(&v83 - 4) = v10;
  *((double *)&v83 - 3) = a5;
  *((double *)&v83 - 2) = a6;
  __n128 v69 = v95;
  *(&v83 - 1) = (char *)v95;
  uint64_t v70 = PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)((uint64_t)v10, (uint64_t)partial apply for closure #1 in closure #2 in Canvas.showOrHideContent(below:), (uint64_t)(&v83 - 8));
  _s8PaperKit5ImageVWOhTm_1(v67, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
  int64_t v71 = *(void *)(v70 + 16);
  if (v71)
  {
    *(void *)&v116.double a = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71, 0);
    uint64_t v111 = *(void *)(v103 + 16);
    unint64_t v72 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
    uint64_t v107 = (void (*)(char *, char *, uint64_t))v70;
    unint64_t v73 = v70 + v72;
    uint64_t v110 = *(char **)(v103 + 72);
    v103 += 16;
    uint64_t v109 = (void (**)(char *, uint64_t))(v103 - 8);
    uint64_t v108 = (uint64_t (*)(void, void, void))(v102 + 32);
    uint64_t v74 = *(void *)&v116.a;
    __n128 v75 = v98;
    uint64_t v76 = (void (*)(char *, unint64_t, uint64_t))v111;
    uint64_t v77 = v99;
    do
    {
      uint64_t v78 = v100;
      v76(v75, v73, v100);
      v76(v77, (unint64_t)v75, v78);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      WeakRef.init<A>(_:)();
      (*v109)(v75, v78);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v74 + 16) + 1, 1);
        uint64_t v74 = *(void *)&v116.a;
      }
      unint64_t v80 = *(void *)(v74 + 16);
      unint64_t v79 = *(void *)(v74 + 24);
      unint64_t v81 = v101;
      if (v80 >= v79 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1);
        uint64_t v74 = *(void *)&v116.a;
      }
      *(void *)(v74 + 16) = v80 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v102 + 32))(v74+ ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80))+ *(void *)(v102 + 72) * v80, v81, v97);
      v73 += (unint64_t)v110;
      --v71;
      uint64_t v10 = v104;
    }
    while (v71);
    swift_bridgeObjectRelease();
    uint64_t v40 = v91;
    __n128 v69 = v95;
    uint64_t v44 = v90;
    uint64_t v43 = v89;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v74 = MEMORY[0x263F8EE78];
  }
  double v82 = -10000.0;
  if (*v69) {
    double v82 = 10000.0;
  }
  CGAffineTransformMakeTranslation(&v116, v82, 0.0);
  static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(v74, &v116.a, 1, v10, v40);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v88, v44);
}

uint64_t closure #1 in closure #2 in Canvas.showOrHideContent(below:)(double a1, CGFloat a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  uint64_t v25 = a4;
  uint64_t v12 = type metadata accessor for Capsule.Ref();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  double v14 = specialized CRRegister<>.bounds(in:)(&v25, (uint64_t)v11, v12, WitnessTable);
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
  v26.origin.CGFloat x = v14;
  v26.origin.CGFloat y = v16;
  v26.size.CGFloat width = v18;
  v26.size.CGFloat height = v20;
  if (CGRectGetMinY(v26) <= a2)
  {
    char v22 = 0;
  }
  else
  {
    char v21 = *a5;
    v27.origin.CGFloat x = v14;
    v27.origin.CGFloat y = v16;
    v27.size.CGFloat width = v18;
    v27.size.CGFloat height = v20;
    char v22 = v21 ^ (CGRectGetMinX(v27) >= 5000.0);
  }
  return v22 & 1;
}

uint64_t closure #1 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)()
{
  __asm { FMOV            V1.2D, #-0.5 }
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #3 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)(void *a1)
{
  uint64_t v2 = self;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #2 in CanvasGenerationTool.showBlurEffect(animationDuration:);
  *(void *)(v4 + 24) = v3;
  v8[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v8[5] = v4;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1107296256;
  uint64_t v8[2] = thunk for @escaping @callee_guaranteed () -> ();
  v8[3] = &block_descriptor_281_1;
  uint64_t v5 = _Block_copy(v8);
  id v6 = a1;
  swift_retain();
  swift_release();
  objc_msgSend((id)v2, sel_performWithoutAnimation_, v5);
  _Block_release(v5);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v2) {
    __break(1u);
  }
  return result;
}

void Canvas.screenScaleOverride.didset()
{
  id v1 = *(void **)(v0 + direct field offset for Canvas.paperView);
  uint64_t v2 = *(void (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x270);
  uint64_t v3 = v1;
  v2();
}

void closure #2 in Canvas.presentSubelement<A>(_:presentationViewController:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a2 + 16;
  swift_beginAccess();
  uint64_t v11 = MEMORY[0x210550400](v10);
  if (v11)
  {
    uint64_t v12 = (void *)v11;
    unsigned __int8 v13 = 4;
    AnyCanvas.merge<A>(_:from:)(a1, &v13, a4, *(void *)(a7 + 16));
  }
}

uint64_t @objc Canvas.canBecomeFirstResponder.getter()
{
  return 1;
}

void Canvas.pressesBegan(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (!objc_msgSend(v2, sel_isFirstResponder)) {
    goto LABEL_7;
  }
  uint64_t v15 = AnyCanvas.overlays.getter();
  uint64_t v6 = *(void *)(v15 + 16);
  if (!v6)
  {
LABEL_6:
    swift_bridgeObjectRelease();
LABEL_7:
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPress);
    lazy protocol witness table accessor for type UIPress and conformance NSObject();
    isdouble a = Set._bridgeToObjectiveC()().super.isa;
    v16.receiver = v3;
    v16.super_class = (Class)type metadata accessor for Canvas();
    objc_msgSendSuper2(&v16, sel_pressesBegan_withEvent_, isa, a2);

    return;
  }
  objc_super v7 = (uint64_t *)(v15 + 16 * v6 + 24);
  while (1)
  {
    uint64_t v8 = (void *)*(v7 - 1);
    uint64_t v9 = *v7;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8);
    id v12 = v8;
    char v13 = v11(a1, a2, ObjectType, v9);

    if (v13) {
      break;
    }
    v7 -= 2;
    if (!--v6) {
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
}

void @objc Canvas.pressesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
}

void Canvas.pressesEnded(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = v2;
  uint64_t v5 = AnyCanvas.overlays.getter();
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    objc_super v7 = (uint64_t *)(v5 + 16 * v6 + 24);
    while (1)
    {
      uint64_t v8 = (void *)*(v7 - 1);
      uint64_t v9 = *v7;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16);
      id v12 = v8;
      char v13 = v11(a1, a2, ObjectType, v9);

      if (v13) {
        break;
      }
      v7 -= 2;
      if (!--v6) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPress);
    lazy protocol witness table accessor for type UIPress and conformance NSObject();
    isdouble a = Set._bridgeToObjectiveC()().super.isa;
    v16.receiver = v15;
    v16.super_class = (Class)type metadata accessor for Canvas();
    objc_msgSendSuper2(&v16, sel_pressesEnded_withEvent_, isa, a2);
  }
}

void @objc Canvas.pressesEnded(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
}

void @objc Canvas.pressesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPress);
  lazy protocol witness table accessor for type UIPress and conformance NSObject();
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = a4;
  id v9 = a1;
  a5(v8, a4);
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in Canvas.selectAll()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v2 - 8);
  double v19 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  objc_super v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Capsule();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v19 - v10;
  CanvasElementView.canvasElement.getter((uint64_t)&v19 - v10);
  uint64_t v12 = v20;
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v13 = v26;
  uint64_t v14 = v27;
  __swift_project_boxed_opaque_existential_1(&v24, v26);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 64))(&v22, v13, v14);
  LOBYTE(v13) = v22;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  if ((v13 & 2) != 0)
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v21, 1, 1, v18);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v12, v4);
    SharedTagged_9.tag.getter();
    uint64_t v22 = v24;
    char v23 = v25;
    MEMORY[0x21054BDF0](v4);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    uint64_t v15 = v21;
    WeakTagged_9.init(_:id:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 0, 1, v16);
  }
}

uint64_t Canvas.PaperViewCanvasPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v90 = a1;
  uint64_t v91 = a4;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v85 = a2;
  uint64_t v86 = v8;
  uint64_t v87 = *(void *)(a2 + 24);
  uint64_t v81 = type metadata accessor for Capsule();
  uint64_t v9 = type metadata accessor for AnySubscriber();
  uint64_t v79 = type metadata accessor for Optional();
  uint64_t v78 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  double v82 = (char *)&v72 - v10;
  uint64_t v89 = *(void *)(a3 - 8);
  uint64_t v11 = *(void *)(v89 + 64);
  MEMORY[0x270FA5388](v12);
  __n128 v75 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v80 = (char *)&v72 - v14;
  MEMORY[0x270FA5388](v15);
  double v17 = (char *)&v72 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v83 = (char *)&v72 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v72 - v21;
  MEMORY[0x270FA5388](v23);
  char v25 = (char *)&v72 - v24;
  uint64_t v26 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  unint64_t v88 = (char *)&v72 - v31;
  double v33 = MEMORY[0x270FA5388](v32);
  double v84 = (char *)&v72 - v34;
  uint64_t v35 = v5;
  uint64_t result = MEMORY[0x210550400](v5, v33);
  if (result)
  {
    uint64_t v37 = (void *)result;
    uint64_t v74 = v17;
    int v76 = *(unsigned __int8 *)(v35 + 8);
    uint64_t v39 = v89 + 16;
    int v38 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 16);
    v38(v25, v90, a3);
    v38(v22, (uint64_t)v25, a3);
    id v77 = v37;
    uint64_t v40 = v82;
    int v41 = swift_dynamicCast();
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
    if (v41)
    {
      v42(v40, 0, 1, v9);
      uint64_t v43 = v40;
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
      v44(v29, v43, v9);
      double v45 = v88;
      v44(v88, v29, v9);
      uint64_t v46 = v26;
      uint64_t v47 = v89;
      double v48 = v25;
    }
    else
    {
      uint64_t v73 = v26;
      v42(v40, 1, 1, v9);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v40, v79);
      double v49 = (uint64_t *)v88;
      dispatch thunk of CustomCombineIdentifierConvertible.combineIdentifier.getter();
      type metadata accessor for AnySubscriberBox();
      v38(v83, (uint64_t)v25, a3);
      *double v49 = AnySubscriberBox.__allocating_init(_:)();
      double v82 = (char *)v38;
      uint64_t v79 = v39;
      v38(v74, (uint64_t)v25, a3);
      uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CustomStringConvertible);
      double v48 = v25;
      if (swift_dynamicCast())
      {
        outlined init with take of FindResult(&v92, (uint64_t)&v95);
        outlined init with take of FindResult(&v95, (uint64_t)&v92);
        uint64_t v50 = swift_allocObject();
        outlined init with take of FindResult(&v92, v50 + 16);
        double v51 = partial apply for closure #1 in AnySubscriber.init<A>(_:);
      }
      else
      {
        uint64_t v94 = 0;
        long long v92 = 0u;
        long long v93 = 0u;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v92, (uint64_t *)&demangling cache variable for type metadata for CustomStringConvertible?);
        swift_getDynamicType();
        uint64_t v52 = _typeName(_:qualified:)();
        uint64_t v54 = v53;
        uint64_t v50 = swift_allocObject();
        *(void *)(v50 + 16) = v52;
        *(void *)(v50 + 24) = v54;
        double v51 = partial apply for closure #2 in AnySubscriber.init<A>(_:);
      }
      uint64_t v55 = v88;
      uint64_t v47 = v89;
      *((void *)v88 + 1) = v51;
      v55[2] = v50;
      CGFloat v57 = (void (*)(char *, char *, uint64_t))v82;
      CGFloat v56 = v83;
      ((void (*)(char *, char *, uint64_t))v82)(v83, v48, a3);
      unint64_t v58 = (*(unsigned __int8 *)(v47 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
      double v59 = (char *)swift_allocObject();
      *((void *)v59 + 2) = v81;
      *((void *)v59 + 3) = a3;
      *((void *)v59 + 4) = v91;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(&v59[v58], v56, a3);
      v55[3] = partial apply for closure #3 in AnySubscriber.init<A>(_:);
      v55[4] = v59;
      v57(v80, v48, a3);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible);
      if (swift_dynamicCast())
      {
        outlined init with take of FindResult(&v92, (uint64_t)&v95);
        outlined init with take of FindResult(&v95, (uint64_t)&v92);
        uint64_t v60 = swift_allocObject();
        outlined init with take of FindResult(&v92, v60 + 16);
        v55[5] = partial apply for closure #4 in AnySubscriber.init<A>(_:);
        v55[6] = v60;
        uint64_t v46 = v73;
        double v45 = v55;
      }
      else
      {
        uint64_t v94 = 0;
        long long v92 = 0u;
        long long v93 = 0u;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v92, &demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible?);
        v57(v75, v48, a3);
        if (swift_dynamicCast())
        {
          outlined init with take of FindResult(&v92, (uint64_t)&v95);
          outlined init with take of FindResult(&v95, (uint64_t)&v92);
          uint64_t v61 = swift_allocObject();
          outlined init with take of FindResult(&v92, v61 + 16);
          double v45 = v88;
          *((void *)v88 + 5) = partial apply for closure #5 in AnySubscriber.init<A>(_:);
          v45[6] = v61;
        }
        else
        {
          uint64_t v94 = 0;
          long long v92 = 0u;
          long long v93 = 0u;
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v92, (uint64_t *)&demangling cache variable for type metadata for CustomStringConvertible?);
          swift_getDynamicType();
          uint64_t v62 = _typeName(_:qualified:)();
          uint64_t v63 = v48;
          uint64_t v65 = v64;
          uint64_t v66 = swift_allocObject();
          *(void *)(v66 + 16) = v62;
          *(void *)(v66 + 24) = v65;
          double v48 = v63;
          double v45 = v88;
          *((void *)v88 + 5) = partial apply for closure #6 in AnySubscriber.init<A>(_:);
          v45[6] = v66;
        }
        uint64_t v46 = v73;
      }
    }
    uint64_t v67 = *(void *)(v85 + 32);
    *(void *)&long long v95 = v86;
    *((void *)&v95 + 1) = v86;
    uint64_t v96 = v87;
    uint64_t v97 = v67;
    uint64_t WitnessTable = v87;
    uint64_t v68 = type metadata accessor for Canvas.PaperViewCanvasSubscription();
    uint64_t v69 = (uint64_t)v84;
    (*(void (**)(char *, void *, uint64_t))(v46 + 32))(v84, v45, v9);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, a3);
    swift_allocObject();
    id v70 = v77;
    uint64_t v71 = specialized Canvas.PaperViewCanvasSubscription.init(canvas:live:subscriber:)((uint64_t)v77, v76, v69);

    *(void *)&long long v92 = v71;
    swift_beginAccess();
    type metadata accessor for Array();
    swift_retain();
    Array.append(_:)();
    swift_endAccess();
    uint64_t v97 = v68;
    uint64_t WitnessTable = swift_getWitnessTable();
    *(void *)&long long v95 = v71;
    dispatch thunk of Subscriber.receive(subscription:)();

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
  }
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Canvas<A>.PaperViewCanvasPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Canvas.PaperViewCanvasPublisher.receive<A>(subscriber:)(a1, a4, a2, a3);
}

Swift::Void __swiftcall Canvas.setNeedsLayout()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for Canvas();
  objc_msgSendSuper2(&v1, sel_setNeedsLayout);
  Canvas.setCanvasStateNeedsLayout()();
}

void @objc Canvas.setNeedsLayout()(void *a1)
{
  id v1 = a1;
  Canvas.setNeedsLayout()();
}

Swift::Void __swiftcall Canvas.layoutSubviews()()
{
  v32.receiver = v0;
  v32.super_class = (Class)type metadata accessor for Canvas();
  objc_msgSendSuper2(&v32, sel_layoutSubviews);
  uint64_t v31 = AnyCanvas.overlays.getter();
  uint64_t v1 = *(void *)(v31 + 16);
  if (v1)
  {
    uint64_t v2 = (id *)(v31 + 32);
    do
    {
      id v4 = *v2;
      id v5 = objc_msgSend(v4, sel_superview);
      if (v5)
      {
        uint64_t v6 = v5;
        id v7 = Canvas.editingView.getter();
        objc_msgSend(v7, sel_bounds);
        double v9 = v8;
        double v11 = v10;
        double v13 = v12;
        double v15 = v14;

        id v16 = Canvas.editingView.getter();
        objc_msgSend(v6, sel_convertRect_fromCoordinateSpace_, v16, v9, v11, v13, v15);
        double v18 = v17;
        double v20 = v19;
        double v22 = v21;
        double v24 = v23;

        objc_msgSend(v4, sel_frame);
        double x = v33.origin.x;
        double y = v33.origin.y;
        double width = v33.size.width;
        double height = v33.size.height;
        int IsNull = CGRectIsNull(v33);
        v34.origin.double x = v18;
        v34.origin.double y = v20;
        v34.size.double width = v22;
        v34.size.double height = v24;
        int v30 = CGRectIsNull(v34);
        if (IsNull && v30
          || IsNull == v30
          && vabdd_f64(x, v18) < 0.1
          && vabdd_f64(y, v20) < 0.1
          && vabdd_f64(width, v22) < 0.1
          && vabdd_f64(height, v24) < 0.1)
        {
          uint64_t v3 = v4;
          id v4 = v6;
        }
        else
        {
          objc_msgSend(v4, sel_setFrame_, v18, v20, v22, v24, v31);
          uint64_t v3 = v6;
        }
      }
      v2 += 2;
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
}

void @objc Canvas.layoutSubviews()(void *a1)
{
  id v1 = a1;
  Canvas.layoutSubviews()();
}

void closure #1 in Canvas.applyUndo(_:selection:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CapsuleUndoAction();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a2, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  double v9 = *(void **)(a1 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v10 = v9;
  Capsule.apply(_:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for CapsuleUndoAction?);
  swift_endAccess();
}

void closure #2 in Canvas.registerUndo(_:selection:analyticsEvents:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  Canvas.applyUndo(_:selection:)(a2, a3, a4, a5, a6);
  uint64_t v8 = *(void *)(a7 + 16);
  if (v8)
  {
    uint64_t v9 = a7 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of FindResult(v9, (uint64_t)v10);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
      AnalyticsEvent.send()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v9 += 40;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
}

uint64_t Canvas.PaperViewCanvasSubscription.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 120);
  type metadata accessor for Capsule();
  uint64_t v2 = type metadata accessor for AnySubscriber();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t Canvas.PaperViewCanvasSubscription.__deallocating_deinit()
{
  Canvas.PaperViewCanvasSubscription.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Canvas<A>.PaperViewCanvasSubscription<A1>()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t closure #1 in closure #1 in Canvas.addWords(_:layout:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = a3;
  uint64_t v9 = *a1;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  unint64_t v48 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v40 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v11 - 8);
  double v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v9 + *MEMORY[0x263F33088]);
  uint64_t v44 = *(void (***)(char *, uint64_t))(v14 - 8);
  MEMORY[0x270FA5388](v15);
  double v17 = (char *)&v36 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v42 = *(void (***)(char *, uint64_t))(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v53 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = a4;
  double v20 = (void (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  double v49 = a1;
  uint64_t v52 = a5;
  ContainerCanvasElement.ensureHasDrawing<A>(in:)((uint64_t)a1, v14, a5);
  v20(v56, 0);
  if (!(a2 >> 62))
  {
    uint64_t v21 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    double v23 = v53;
    if (v21) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v21 = result;
  double v23 = v53;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v21 >= 1)
  {
    uint64_t v24 = 0;
    unint64_t v57 = a2 & 0xC000000000000001;
    uint64_t v45 = v52 + 48;
    uint64_t v46 = (uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 2);
    uint64_t v43 = (unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
    ++v44;
    ++v42;
    int v38 = (void (**)(char *, char *, uint64_t))(v48 + 16);
    uint64_t v37 = (void (**)(char *, uint64_t))(v48 + 8);
    uint64_t v41 = MEMORY[0x263F8EE60] + 8;
    unint64_t v48 = a2;
    uint64_t v39 = v18;
    uint64_t v47 = v21;
    do
    {
      if (v57) {
        MEMORY[0x21054E050](v24, a2);
      }
      else {
        swift_retain();
      }
      type metadata accessor for ReflowWord();
      uint64_t v25 = swift_dynamicCastClass();
      if (v25)
      {
        uint64_t v26 = *(void *)(v25 + 280) + OBJC_IVAR___PKDrawingCoherence_model;
        swift_beginAccess();
        uint64_t v27 = (*v46)(v23, v26, v18);
        if (v50)
        {
          MEMORY[0x270FA5388](v27);
          *(&v36 - 2) = v28;
          uint64_t v29 = v54;
          Capsule.callAsFunction<A>(_:)();
          uint64_t v54 = v29;
          a2 = v48;
        }
        Capsule.Ref<>.root.getter();
        (*(void (**)(uint64_t))(v52 + 48))(v14);
        (*v44)(v17, v14);
        uint64_t v30 = v55;
        if ((*v43)(v13, 1, v55))
        {
          double v23 = v53;
          (*v42)(v53, v18);
          swift_release();
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
        }
        else
        {
          uint64_t v31 = v17;
          uint64_t v32 = v14;
          CGRect v33 = v40;
          (*v38)(v40, v13, v30);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
          CGRect v34 = (void (*)(unsigned char *, void))Ref.subscript.modify();
          double v23 = v53;
          PKDrawingStruct.append<A>(_:in:)();
          v34(v56, 0);
          a2 = v48;
          swift_release();
          uint64_t v35 = v33;
          uint64_t v14 = v32;
          double v17 = v31;
          uint64_t v18 = v39;
          (*v37)(v35, v55);
          (*v42)(v23, v18);
        }
        uint64_t v21 = v47;
      }
      else
      {
        swift_release();
      }
      ++v24;
    }
    while (v21 != v24);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in Canvas.addWords(_:layout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = a1;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v3 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v52 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v51 = (char *)v43 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform)?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v54 = (char *)v43 - v11;
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v44 = a2 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  unint64_t v57 = (void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v46 = v3;
  double v49 = (uint64_t (**)(char *, uint64_t))(v3 + 8);
  uint64_t v50 = (void (**)(char *, uint64_t, uint64_t))(v3 + 32);
  int64_t v45 = (unint64_t)(v13 + 63) >> 6;
  v43[0] = v45 - 1;
  uint64_t v47 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v55 = 0;
  double v17 = (uint64_t *)&demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform);
  long long v48 = xmmword_20C832C20;
  uint64_t v18 = v56;
  uint64_t v19 = v52;
  if (!v15) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v28 = __clz(__rbit64(v15));
  uint64_t v29 = (v15 - 1) & v15;
  uint64_t v30 = (uint64_t)v54;
  unint64_t v31 = v28 | (v55 << 6);
  while (2)
  {
    uint64_t v32 = v47;
    (*(void (**)(char *, unint64_t, uint64_t))(v46 + 16))(v9, *(void *)(v47 + 48) + *(void *)(v46 + 72) * v31, v56);
    CGRect v33 = (_OWORD *)(*(void *)(v32 + 56) + 48 * v31);
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(v17);
    uint64_t v35 = &v9[*(int *)(v34 + 48)];
    long long v36 = v33[1];
    long long v37 = v33[2];
    *(_OWORD *)uint64_t v35 = *v33;
    *((_OWORD *)v35 + 1) = v36;
    *((_OWORD *)v35 + 2) = v37;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v9, 0, 1, v34);
    while (1)
    {
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v9, v30, &demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform)?);
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(v17);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v30, 1, v42) == 1) {
        return swift_release();
      }
      double v20 = (_OWORD *)(v30 + *(int *)(v42 + 48));
      long long v21 = v20[1];
      v58[0] = *v20;
      v58[1] = v21;
      v58[2] = v20[2];
      double v22 = *v50;
      unint64_t v59 = v29;
      double v23 = v17;
      uint64_t v24 = v9;
      uint64_t v25 = v51;
      v22(v51, v30, v18);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = v48;
      (*v57)(v19, v25, v18);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      WeakRef.init<A>(_:)();
      specialized static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(v26, (CGFloat *)v58, 0, v53);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      uint64_t v27 = v25;
      uint64_t v9 = v24;
      double v17 = v23;
      unint64_t v15 = v59;
      uint64_t result = (*v49)(v27, v18);
      if (v15) {
        goto LABEL_6;
      }
LABEL_8:
      uint64_t v30 = (uint64_t)v54;
      int64_t v38 = v55 + 1;
      if (__OFADD__(v55, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v38 < v45)
      {
        unint64_t v39 = *(void *)(v44 + 8 * v38);
        if (v39) {
          goto LABEL_11;
        }
        int64_t v40 = v55 + 2;
        ++v55;
        if (v38 + 1 < v45)
        {
          unint64_t v39 = *(void *)(v44 + 8 * v40);
          if (v39) {
            goto LABEL_14;
          }
          int64_t v55 = v38 + 1;
          if (v38 + 2 < v45)
          {
            unint64_t v39 = *(void *)(v44 + 8 * (v38 + 2));
            if (v39)
            {
              v38 += 2;
              goto LABEL_11;
            }
            int64_t v40 = v38 + 3;
            int64_t v55 = v38 + 2;
            if (v38 + 3 < v45) {
              break;
            }
          }
        }
      }
LABEL_25:
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(v17);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v9, 1, 1, v41);
      uint64_t v29 = 0;
    }
    unint64_t v39 = *(void *)(v44 + 8 * v40);
    if (v39)
    {
LABEL_14:
      int64_t v38 = v40;
LABEL_11:
      uint64_t v29 = (v39 - 1) & v39;
      unint64_t v31 = __clz(__rbit64(v39)) + (v38 << 6);
      int64_t v55 = v38;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v38 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v38 >= v45)
    {
      int64_t v55 = v43[0];
      goto LABEL_25;
    }
    unint64_t v39 = *(void *)(v44 + 8 * v38);
    ++v40;
    if (v39) {
      goto LABEL_11;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t closure #1 in Canvas.transformStrokes(_:)(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  uint64_t v3 = *(void **)((char *)a1 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v4 = v3;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  return (*(uint64_t (**)(uint64_t))((*v2 & *a1) + 0x5C8))(1);
}

uint64_t closure #1 in closure #1 in Canvas.transformStrokes(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v54 = a1;
  uint64_t v55 = a3;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v4 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  uint64_t v53 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v52 = (char *)v44 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform)?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v56 = (char *)v44 - v12;
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v45 = a2 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  unint64_t v59 = (void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v47 = v4;
  uint64_t v50 = (uint64_t (**)(char *, uint64_t))(v4 + 8);
  uint64_t v51 = (void (**)(char *, uint64_t, uint64_t))(v4 + 32);
  int64_t v46 = (unint64_t)(v14 + 63) >> 6;
  v44[0] = v46 - 1;
  uint64_t v48 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v57 = 0;
  uint64_t v18 = (uint64_t *)&demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform);
  long long v49 = xmmword_20C832C20;
  uint64_t v19 = v58;
  double v20 = v53;
  if (!v16) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v29 = __clz(__rbit64(v16));
  uint64_t v30 = (v16 - 1) & v16;
  uint64_t v31 = (uint64_t)v56;
  unint64_t v32 = v29 | (v57 << 6);
  while (2)
  {
    uint64_t v33 = v48;
    (*(void (**)(char *, unint64_t, uint64_t))(v47 + 16))(v10, *(void *)(v48 + 48) + *(void *)(v47 + 72) * v32, v58);
    uint64_t v34 = (_OWORD *)(*(void *)(v33 + 56) + 48 * v32);
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(v18);
    long long v36 = &v10[*(int *)(v35 + 48)];
    long long v37 = v34[1];
    long long v38 = v34[2];
    *(_OWORD *)long long v36 = *v34;
    *((_OWORD *)v36 + 1) = v37;
    *((_OWORD *)v36 + 2) = v38;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v10, 0, 1, v35);
    while (1)
    {
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v10, v31, &demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform)?);
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(v18);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48))(v31, 1, v43) == 1) {
        return swift_release();
      }
      long long v21 = (_OWORD *)(v31 + *(int *)(v43 + 48));
      long long v22 = v21[1];
      v60[0] = *v21;
      v60[1] = v22;
      v60[2] = v21[2];
      double v23 = *v51;
      unint64_t v61 = v30;
      uint64_t v24 = v18;
      uint64_t v25 = v10;
      uint64_t v26 = v52;
      v23(v52, v31, v19);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = v49;
      (*v59)(v20, v26, v19);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      WeakRef.init<A>(_:)();
      static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(v27, (CGFloat *)v60, 0, v54, v55);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      unint64_t v28 = v26;
      uint64_t v10 = v25;
      uint64_t v18 = v24;
      unint64_t v16 = v61;
      uint64_t result = (*v50)(v28, v19);
      if (v16) {
        goto LABEL_6;
      }
LABEL_8:
      uint64_t v31 = (uint64_t)v56;
      int64_t v39 = v57 + 1;
      if (__OFADD__(v57, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v39 < v46)
      {
        unint64_t v40 = *(void *)(v45 + 8 * v39);
        if (v40) {
          goto LABEL_11;
        }
        int64_t v41 = v57 + 2;
        ++v57;
        if (v39 + 1 < v46)
        {
          unint64_t v40 = *(void *)(v45 + 8 * v41);
          if (v40) {
            goto LABEL_14;
          }
          int64_t v57 = v39 + 1;
          if (v39 + 2 < v46)
          {
            unint64_t v40 = *(void *)(v45 + 8 * (v39 + 2));
            if (v40)
            {
              v39 += 2;
              goto LABEL_11;
            }
            int64_t v41 = v39 + 3;
            int64_t v57 = v39 + 2;
            if (v39 + 3 < v46) {
              break;
            }
          }
        }
      }
LABEL_25:
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(v18);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v10, 1, 1, v42);
      uint64_t v30 = 0;
    }
    unint64_t v40 = *(void *)(v45 + 8 * v41);
    if (v40)
    {
LABEL_14:
      int64_t v39 = v41;
LABEL_11:
      uint64_t v30 = (v40 - 1) & v40;
      unint64_t v32 = __clz(__rbit64(v40)) + (v39 << 6);
      int64_t v57 = v39;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v39 = v41 + 1;
    if (__OFADD__(v41, 1)) {
      break;
    }
    if (v39 >= v46)
    {
      int64_t v57 = v44[0];
      goto LABEL_25;
    }
    unint64_t v40 = *(void *)(v45 + 8 * v39);
    ++v41;
    if (v40) {
      goto LABEL_11;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void closure #1 in Canvas.startCheckingForOldEraserStrokes()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x210550400](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    Canvas.removeOldEraserStrokes()();
  }
}

uint64_t closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a8;
  v8[10] = v13;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  void v8[6] = a5;
  v8[11] = *(void *)(a8 + 16);
  uint64_t v9 = type metadata accessor for Capsule();
  v8[12] = v9;
  uint64_t v10 = type metadata accessor for Optional();
  v8[13] = v10;
  v8[14] = *(void *)(v10 - 8);
  v8[15] = swift_task_alloc();
  v8[16] = *(void *)(v9 - 8);
  v8[17] = swift_task_alloc();
  v8[18] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), 0, 0);
}

uint64_t closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)()
{
  uint64_t v1 = *(void *)(v0 + 40) + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  *(void *)(v0 + 152) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 120);
    uint64_t v4 = *(void *)(v0 + 128);
    uint64_t v5 = *(void *)(v0 + 96);
    Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(*(void *)(v0 + 56), v5, *(void *)(v0 + 72), *(void *)(v0 + 80), v3);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5) == 1)
    {
      (*(void (**)(void, void))(*(void *)(v0 + 112) + 8))(*(void *)(v0 + 120), *(void *)(v0 + 104));
      *(void *)(v0 + 168) = type metadata accessor for MainActor();
      *(void *)(v0 + 176) = static MainActor.shared.getter();
      uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v8 = v7;
      uint64_t v9 = closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 128) + 32))(*(void *)(v0 + 144), *(void *)(v0 + 120), *(void *)(v0 + 96));
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)logger);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl(&dword_20C2D7000, v13, v14, "Removed old eraser stroke(s)", v15, 2u);
        MEMORY[0x210550270](v15, -1, -1);
      }

      *(unsigned char *)(v0 + 208) = 3;
      type metadata accessor for MainActor();
      *(void *)(v0 + 160) = static MainActor.shared.getter();
      uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v8 = v16;
      uint64_t v9 = closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:);
    }
    return MEMORY[0x270FA2498](v9, v6, v8);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 64);
  swift_release();
  AnyCanvas.merge<A>(_:from:)(v1, (unsigned __int8 *)(v0 + 208), v3, v2);
  return MEMORY[0x270FA2498](closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(void, void))(v0[16] + 8))(v0[18], v0[12]);
  v0[21] = type metadata accessor for MainActor();
  v0[22] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 152);
  swift_release();
  *(void *)(v0 + 184) = *(void *)(v1 + direct field offset for Canvas.eraserCheckingIndex);
  return MEMORY[0x270FA2498](closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 192) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 136);
  swift_release();
  CanvasElementView.canvasElement.getter(v1);
  return MEMORY[0x270FA2498](closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (Capsule<>.hasAnyEraserStrokes()(v0[12], v0[9], v0[10]))
  {
    uint64_t v1 = (void *)v0[19];
    (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[12]);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    v0[25] = static MainActor.shared.getter();
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    return MEMORY[0x270FA2498](closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), v5, v4);
  }
}

{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 184);
  swift_release();
  Canvas.stopCheckingForOldEraserStrokes(index:)(v1);
  return MEMORY[0x270FA2498](closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 96);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t closure #1 in Canvas.align(members:to:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  CGFloat v84 = a3;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  double v23 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  __n128 v75 = (char *)&v69 - v25;
  double v26 = *MEMORY[0x263F001A0];
  double v27 = *(double *)(MEMORY[0x263F001A0] + 8);
  double v28 = *(double *)(MEMORY[0x263F001A0] + 16);
  double v29 = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v78 = a10;
  uint64_t v79 = a11;
  uint64_t v76 = a1;
  uint64_t v80 = a1;
  swift_bridgeObjectRetain();
  specialized Sequence.reduce<A>(_:_:)((void (*)(void *__return_ptr, double *, char *))partial apply for closure #1 in closure #1 in Canvas.align(members:to:), v26, v27, v28, v29, (uint64_t)v77, a2);
  CGFloat v31 = v30;
  CGFloat v33 = v32;
  CGFloat v35 = v34;
  CGFloat v37 = v36;
  uint64_t v69 = v11;
  swift_bridgeObjectRelease();
  v85.origin.double x = a3;
  v85.origin.double y = a4;
  CGFloat v38 = a4;
  v85.size.double width = a5;
  CGFloat v39 = a5;
  v85.size.double height = a6;
  CGFloat v40 = a6;
  double MinX = CGRectGetMinX(v85);
  v86.origin.double x = v31;
  v86.origin.double y = v33;
  v86.size.double width = v35;
  v86.size.double height = v37;
  CGFloat v42 = MinX - CGRectGetMinX(v86);
  v87.origin.double x = v84;
  v87.origin.double y = v38;
  v87.size.double width = v39;
  v87.size.double height = v40;
  double MinY = CGRectGetMinY(v87);
  v88.origin.double x = v31;
  v88.origin.double y = v33;
  v88.size.double width = v35;
  v88.size.double height = v37;
  CGFloat v44 = CGRectGetMinY(v88);
  CGAffineTransformMakeTranslation(&v83, v42, MinY - v44);
  CGFloat a = v83.a;
  CGFloat b = v83.b;
  CGFloat c = v83.c;
  CGFloat d = v83.d;
  uint64_t v49 = *(void *)(a2 + 56);
  uint64_t v70 = a2 + 56;
  uint64_t v50 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v51 = -1;
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  unint64_t v52 = v51 & v49;
  tdouble x = v83.tx;
  tdouble y = v83.ty;
  int64_t v71 = (unint64_t)(v50 + 63) >> 6;
  uint64_t v74 = v21 + 16;
  uint64_t v73 = v21 + 32;
  uint64_t v72 = (uint64_t (**)(char *, uint64_t))(v21 + 8);
  CGFloat v84 = *(double *)&a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v56 = 0;
  while (1)
  {
    if (v52)
    {
      unint64_t v57 = __clz(__rbit64(v52));
      v52 &= v52 - 1;
      unint64_t v58 = v57 | (v56 << 6);
      goto LABEL_21;
    }
    int64_t v59 = v56 + 1;
    if (__OFADD__(v56, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v59 >= v71) {
      return swift_release();
    }
    unint64_t v60 = *(void *)(v70 + 8 * v59);
    ++v56;
    if (!v60)
    {
      int64_t v56 = v59 + 1;
      if (v59 + 1 >= v71) {
        return swift_release();
      }
      unint64_t v60 = *(void *)(v70 + 8 * v56);
      if (!v60)
      {
        int64_t v56 = v59 + 2;
        if (v59 + 2 >= v71) {
          return swift_release();
        }
        unint64_t v60 = *(void *)(v70 + 8 * v56);
        if (!v60) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v52 = (v60 - 1) & v60;
    unint64_t v58 = __clz(__rbit64(v60)) + (v56 << 6);
LABEL_21:
    uint64_t v62 = v75;
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v75, *(void *)(*(void *)&v84 + 48) + *(void *)(v21 + 72) * v58, v20);
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v62, v20);
    uint64_t v64 = (void (*)(char *, void))WeakTagged_9.subscript.modify();
    uint64_t v65 = *(void *)(v63 + 24);
    if (v65)
    {
      uint64_t v66 = *(void *)(v63 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v63, *(void *)(v63 + 24));
      uint64_t v67 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v66 + 24))(v81, v65, v66);
      CGRect v89 = *v68;
      v83.CGFloat a = a;
      v83.CGFloat b = b;
      v83.CGFloat c = c;
      v83.CGFloat d = d;
      v83.tdouble x = tx;
      v83.tdouble y = ty;
      CGRect *v68 = CGRectApplyAffineTransform(v89, &v83);
      v67(v81, 0);
    }
    v64(v82, 0);
    uint64_t result = (*v72)(v23, v20);
  }
  int64_t v61 = v59 + 3;
  if (v61 >= v71) {
    return swift_release();
  }
  unint64_t v60 = *(void *)(v70 + 8 * v61);
  if (v60)
  {
    int64_t v56 = v61;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v56 = v61 + 1;
    if (__OFADD__(v61, 1)) {
      break;
    }
    if (v56 >= v71) {
      return swift_release();
    }
    unint64_t v60 = *(void *)(v70 + 8 * v56);
    ++v61;
    if (v60) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void closure #1 in closure #1 in Canvas.align(members:to:)(CGFloat *a1@<X0>, CGFloat *a2@<X8>)
{
  CGFloat x = *a1;
  CGFloat y = a1[1];
  CGFloat width = a1[2];
  CGFloat height = a1[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.subscript.getter();
  uint64_t v7 = v17;
  if (v17)
  {
    uint64_t v8 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    CGFloat v9 = (*(double (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
    CGFloat v11 = v10;
    CGFloat v13 = v12;
    CGFloat v15 = v14;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for CanvasElement?);
    v19.origin.CGFloat x = x;
    v19.origin.CGFloat y = y;
    v19.size.CGFloat width = width;
    v19.size.CGFloat height = height;
    v21.origin.CGFloat x = v9;
    v21.origin.CGFloat y = v11;
    v21.size.CGFloat width = v13;
    v21.size.CGFloat height = v15;
    CGRect v20 = CGRectUnion(v19, v21);
    CGFloat x = v20.origin.x;
    CGFloat y = v20.origin.y;
    CGFloat width = v20.size.width;
    CGFloat height = v20.size.height;
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for CanvasElement?);
  }
  *a2 = x;
  a2[1] = y;
  a2[2] = width;
  a2[3] = height;
}

void closure #1 in Canvas.addWords(_:layout:)(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v2 = v1;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
}

uint64_t closure #1 in closure #1 in Canvas.canvasDescription.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v3 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  uint64_t v15 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v7);
  CGFloat v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  Capsule.Ref<>.root.getter();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    _s8PaperKit5ImageVWOhTm_1((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Image);
    Capsule.Ref<>.rootID.getter();
    _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    Ref.init(id:)();
    uint64_t v12 = v17;
    swift_bridgeObjectRetain();
    CGFloat v13 = (void (*)(unsigned char *, void))Ref.subscript.modify();
    uint64_t v18 = v16;
    uint64_t v19 = v12;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
    CRRegister.wrappedValue.setter();
    v13(v20, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v6, v4);
  }
  return result;
}

uint64_t closure #1 in Canvas.selectedShapes.getter@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v14 = a2;
  uint64_t v13 = *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x7D8);
  uint64_t v2 = type metadata accessor for Capsule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13 - v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakRef<Shape>?);
    uint64_t v11 = type metadata accessor for Shape();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v14, 1, 1, v11);
  }
  else
  {
    CanvasElementView.canvasElement.getter((uint64_t)v5);
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
}

uint64_t closure #1 in Canvas.initiateMagicGenerativePlayground(context:in:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  *(unsigned char *)(v11 + 33) = a11;
  *(void *)(v11 + 80) = a9;
  *(void *)(v11 + 88) = a10;
  *(double *)(v11 + 64) = a3;
  *(double *)(v11 + 72) = a4;
  *(double *)(v11 + 48) = a1;
  *(double *)(v11 + 56) = a2;
  *(void *)(v11 + 40) = a8;
  type metadata accessor for MainActor();
  *(void *)(v11 + 96) = static MainActor.shared.getter();
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v11 + 104) = v13;
  *(void *)(v11 + 112) = v12;
  return MEMORY[0x270FA2498](closure #1 in Canvas.initiateMagicGenerativePlayground(context:in:), v13, v12);
}

uint64_t closure #1 in Canvas.initiateMagicGenerativePlayground(context:in:)()
{
  uint64_t v31 = v0;
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)(v0 + 40)) + 0x320))();
  *(void *)(v0 + 120) = v2;
  if (!v2) {
    goto LABEL_9;
  }
  uint64_t v3 = (void *)v2;
  type metadata accessor for TiledTextView();
  uint64_t v4 = swift_dynamicCastClass();
  if (!v4)
  {

LABEL_9:
    swift_release();
    char v21 = *(unsigned char *)(v0 + 33);
    v22.n128_u64[0] = *(void *)(v0 + 64);
    v23.n128_u64[0] = *(void *)(v0 + 72);
    v24.n128_u64[0] = *(void *)(v0 + 48);
    v25.n128_u64[0] = *(void *)(v0 + 56);
    double v26 = *(void **)(v0 + 40);
    long long v29 = *(_OWORD *)(v0 + 80);
    char v30 = v21;
    (*(void (**)(long long *, __n128, __n128, __n128, __n128))((*v1 & *v26) + 0x7A8))(&v29, v24, v25, v22, v23);
    goto LABEL_11;
  }
  objc_msgSend(*(id *)(v0 + 40), sel_convertRect_toCoordinateSpace_, v4, *(double *)(v0 + 48), *(double *)(v0 + 56), *(double *)(v0 + 64), *(double *)(v0 + 72));
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  uint64_t v13 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)&v13[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
  if (v15)
  {
    char v16 = *(unsigned char *)(v0 + 33);
    uint64_t v17 = *(void *)(v0 + 40);
    uint64_t v18 = *(void **)(v15 + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool);
    *(void *)(v0 + 128) = v18;
    v18;
    long long v28 = *(_OWORD *)(v0 + 80);

    *(_OWORD *)(v0 + 16) = v28;
    *(unsigned char *)(v0 + 32) = v16;
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v19;
    *uint64_t v19 = v0;
    v19[1] = closure #1 in Canvas.initiateMagicGenerativePlayground(context:in:);
    return CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:invocation:canvas:)(v0 + 16, 2, v17, v6, v8, v10, v12);
  }

  swift_release();
LABEL_11:
  double v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void **)(v2 + 128);
  }
  else
  {
  }
  uint64_t v4 = *(void *)(v2 + 104);
  double v5 = *(void *)(v2 + 112);
  return MEMORY[0x270FA2498](closure #1 in Canvas.initiateMagicGenerativePlayground(context:in:), v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 120);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in Canvas.removeImageBackground(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[23] = a5;
  v6[24] = a6;
  v6[22] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v6[25] = v7;
  v6[26] = *(void *)(v7 - 8);
  v6[27] = swift_task_alloc();
  v6[28] = swift_task_alloc();
  v6[29] = type metadata accessor for Image();
  v6[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  v6[31] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in Canvas.removeImageBackground(for:), 0, 0);
}

uint64_t closure #1 in Canvas.removeImageBackground(for:)()
{
  uint64_t v2 = v0[30];
  uint64_t v1 = v0[31];
  _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  Capsule<>.root.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  _s8PaperKit5ImageVWOhTm_1(v2, (uint64_t (*)(void))type metadata accessor for Image);
  uint64_t v3 = type metadata accessor for CRAssetOrData();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v1, 1, v3) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0[31], &demangling cache variable for type metadata for CRAssetOrData?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    double v6 = (void *)swift_task_alloc();
    v0[32] = v6;
    *double v6 = v0;
    v6[1] = closure #1 in Canvas.removeImageBackground(for:);
    return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(0x7FFFFFFFFFFFFFFFLL, 1, 0);
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = (void *)v0[33];
  if (v1)
  {
    if ((static Task<>.isCancelled.getter() & 1) == 0)
    {
      uint64_t v2 = v0[23] + 16;
      swift_beginAccess();
      uint64_t v3 = (void *)MEMORY[0x210550400](v2);

      if (v3)
      {
        uint64_t v4 = swift_task_alloc();
        v0[34] = v4;
        *(void *)(v4 + 16) = v1;
        double v5 = (void *)swift_task_alloc();
        v0[35] = v5;
        double v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CGImageRef?, CGRect));
        *double v5 = v0;
        v5[1] = closure #1 in Canvas.removeImageBackground(for:);
        return MEMORY[0x270FA2360](v0 + 8, 0, 0, 0xD00000000000001BLL, 0x800000020C85EF90, partial apply for closure #1 in closure #1 in Canvas.removeImageBackground(for:), v4, v6);
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in Canvas.removeImageBackground(for:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = closure #1 in Canvas.removeImageBackground(for:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void (*v23)(void, void, void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = *(void **)(v0 + 64);
  *(void *)(v0 + 296) = v1;
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  double v5 = *(void *)(v0 + 96);
  if ((static Task<>.isCancelled.getter() & 1) != 0
    || (double v6 = *(void *)(v0 + 184) + 16,
        swift_beginAccess(),
        uint64_t v7 = (void *)MEMORY[0x210550400](v6),
        v7,
        !v7))
  {

    goto LABEL_7;
  }
  if (!v1)
  {

    goto LABEL_7;
  }
  double v8 = v1;
  uint64_t v9 = CGImageRef.imageData(compressionQuality:asPng:)(1, 0.9);
  *(void *)(v0 + 304) = v9;
  *(void *)(v0 + 312) = v10;
  if (v10 >> 60 == 15)
  {
    double v11 = *(void **)(v0 + 264);

LABEL_7:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    double v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  uint64_t v14 = v9;
  uint64_t v15 = v10;
  __n128 v24 = *(void *)(v0 + 264);
  char v16 = *(void *)(v0 + 192);
  __n128 v25 = *(void *)(v0 + 184) + 16;
  __n128 v23 = *(void (**)(void, void, void))(*(void *)(v0 + 208) + 16);
  v23(*(void *)(v0 + 224), *(void *)(v0 + 176), *(void *)(v0 + 200));
  uint64_t v17 = (void *)swift_task_alloc();
  v17[2] = v14;
  v17[3] = v15;
  v17[4] = v16;
  v17[5] = v24;
  v17[6] = v1;
  v17[7] = v2;
  v17[8] = v3;
  v17[9] = v4;
  v17[10] = v5;
  Capsule.callAsFunction<A>(_:)();
  swift_task_dealloc();
  swift_beginAccess();
  uint64_t v18 = MEMORY[0x210550400](v25);
  *(void *)(v0 + 320) = v18;
  if (!v18)
  {
    char v21 = *(void **)(v0 + 264);
    __n128 v22 = *(void *)(v0 + 208);

    outlined consume of Data?(v14, v15);
    (*(void (**)(void, void))(v22 + 8))(*(void *)(v0 + 224), *(void *)(v0 + 200));
    goto LABEL_7;
  }
  v23(*(void *)(v0 + 216), *(void *)(v0 + 224), *(void *)(v0 + 200));
  type metadata accessor for MainActor();
  *(void *)(v0 + 328) = static MainActor.shared.getter();
  CGRect v20 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in Canvas.removeImageBackground(for:), v20, v19);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v1 = (void *)v0[40];
  uint64_t v2 = v0[29];
  uint64_t v4 = v0[26];
  uint64_t v3 = v0[27];
  double v5 = v0[25];
  swift_release();
  double v6 = _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  v0[4] = v2;
  v0[5] = v6;
  v0[6] = v1;
  v0[7] = v3;
  Canvas.undoable(newChange:persistSelection:action:)(0, 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.mergeUndoable<A>(_:));

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[42] = v7;
  v7(v3, v5);
  return MEMORY[0x270FA2498](closure #1 in Canvas.removeImageBackground(for:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void **)(v0 + 296);
  uint64_t v4 = *(void **)(v0 + 264);

  outlined consume of Data?(v1, v2);
  (*(void (**)(void, void))(v0 + 336))(*(void *)(v0 + 224), *(void *)(v0 + 200));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in Canvas.removeImageBackground(for:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 248);
  *(void *)(*(void *)v1 + 264) = a1;
  swift_task_dealloc();
  _s8PaperKit5ImageVWOhTm_1(v2, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  return MEMORY[0x270FA2498](closure #1 in Canvas.removeImageBackground(for:), 0, 0);
}

void closure #1 in closure #1 in Canvas.removeImageBackground(for:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(CGImageRef?, CGRect), Error>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  double v5 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in Canvas.removeImageBackground(for:);
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed CGImageRef?, @unowned CGRect, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_303;
  double v8 = _Block_copy(aBlock);
  swift_release();
  vk_cgImageRemoveBackground();
  _Block_release(v8);
}

uint64_t closure #1 in closure #1 in closure #1 in Canvas.removeImageBackground(for:)(void *a1, id a2)
{
  if (a2)
  {
    id v2 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(CGImageRef?, CGRect), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    id v4 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(CGImageRef?, CGRect), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed CGImageRef?, @unowned CGRect, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v13 = *(void (**)(void *, void *, double, double, double, double))(a1 + 32);
  swift_retain();
  id v15 = a2;
  id v14 = a3;
  v13(a2, a3, a4, a5, a6, a7);
  swift_release();
}

uint64_t closure #2 in closure #1 in Canvas.removeImageBackground(for:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, CGImage *a5, double *a6)
{
  uint64_t v48 = a1;
  double v9 = a6[1];
  double v10 = a6[2];
  CGFloat v11 = a6[3];
  CGFloat v12 = a6[4];
  uint64_t v13 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v13);
  id v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  char v21 = (char *)&v44 - v20;
  outlined copy of Data._Representation(a2, a3);
  swift_retain();
  CRAsset.init(data:assetManager:)();
  uint64_t v22 = type metadata accessor for CRAssetOrData();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 0, 1, v22);
  _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  __n128 v23 = (void (*)(void *, void))Capsule.Ref<>.root.modify();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v21, (uint64_t)v18, &demangling cache variable for type metadata for CRAssetOrData?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for CRAssetOrData?);
  v23(v53, 0);
  int64_t Width = CGImageGetWidth(a5);
  CGFloat Height = (double)(uint64_t)CGImageGetHeight(a5);
  v54.origin.CGFloat x = v9;
  v54.origin.CGFloat y = v10;
  v54.size.CGFloat width = v11;
  v54.size.CGFloat height = v12;
  double v26 = CGRectGetWidth(v54);
  v55.origin.CGFloat x = 0.0;
  v55.origin.CGFloat y = 0.0;
  v55.size.CGFloat width = (double)Width;
  v55.size.CGFloat height = Height;
  CGFloat v27 = v26 / CGRectGetWidth(v55);
  v56.origin.CGFloat x = v9;
  v56.origin.CGFloat y = v10;
  v56.size.CGFloat width = v11;
  v56.size.CGFloat height = v12;
  double v28 = CGRectGetHeight(v56);
  v57.origin.CGFloat x = 0.0;
  v57.origin.CGFloat y = 0.0;
  v57.size.CGFloat width = (double)Width;
  v57.size.CGFloat height = Height;
  CGFloat v29 = v28 / CGRectGetHeight(v57);
  v58.origin.CGFloat x = 0.0;
  v58.origin.CGFloat y = 0.0;
  v58.size.CGFloat width = (double)Width;
  v58.size.CGFloat height = Height;
  CGFloat v30 = v9 / CGRectGetWidth(v58);
  CGFloat v45 = v30;
  v59.origin.CGFloat x = 0.0;
  v59.origin.CGFloat y = 0.0;
  v59.size.CGFloat width = (double)Width;
  v59.size.CGFloat height = Height;
  CGFloat v31 = v10 / CGRectGetHeight(v59);
  Capsule.Ref<>.root.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double v32 = *(double *)v53;
  double v33 = *(double *)&v53[1];
  CGFloat v34 = *(double *)&v53[2];
  CGFloat v35 = *(double *)&v53[3];
  _s8PaperKit5ImageVWOhTm_1((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Image);
  v60.origin.CGFloat x = v30;
  v60.origin.CGFloat y = v31;
  double v46 = v31;
  v60.size.CGFloat width = v27;
  v60.size.CGFloat height = v29;
  double v36 = CGRectGetWidth(v60);
  v61.origin.CGFloat x = v32;
  v61.origin.CGFloat y = v33;
  v61.size.CGFloat width = v34;
  v61.size.CGFloat height = v35;
  double v47 = v36 * CGRectGetWidth(v61);
  double v37 = v45;
  v62.origin.CGFloat x = v45;
  v62.origin.CGFloat y = v31;
  v62.size.CGFloat width = v27;
  v62.size.CGFloat height = v29;
  double v38 = CGRectGetHeight(v62);
  v63.origin.CGFloat x = v32;
  v63.origin.CGFloat y = v33;
  v63.size.CGFloat width = v34;
  v63.size.CGFloat height = v35;
  double v39 = v38 * CGRectGetHeight(v63);
  v64.origin.CGFloat x = v32;
  v64.origin.CGFloat y = v33;
  v64.size.CGFloat width = v34;
  v64.size.CGFloat height = v35;
  double v40 = v32 + v37 * CGRectGetWidth(v64);
  v65.origin.CGFloat x = v32;
  v65.origin.CGFloat y = v33;
  v65.size.CGFloat width = v34;
  v65.size.CGFloat height = v35;
  double v41 = v33 + v46 * CGRectGetHeight(v65);
  CGFloat v42 = (uint64_t (*)(void *, void))Capsule.Ref<>.root.modify();
  double v49 = v40;
  double v50 = v41;
  double v51 = v47;
  double v52 = v39;
  CRRegister.wrappedValue.setter();
  return v42(v53, 0);
}

uint64_t closure #2 in Canvas.removeImageBackground(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[7] = v7;
  v4[8] = v6;
  return MEMORY[0x270FA2498](closure #2 in Canvas.removeImageBackground(for:), v7, v6);
}

uint64_t closure #2 in Canvas.removeImageBackground(for:)()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  void *v1 = v0;
  v1[1] = closure #2 in Canvas.removeImageBackground(for:);
  return v3(5000000000000000000, 0, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  id v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void *)(*v1 + 32);
  uint64_t v5 = *(void *)(*v1 + 24);
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v7 = *(void *)(v2 + 56);
  if (v0) {
    double v8 = closure #2 in Canvas.removeImageBackground(for:);
  }
  else {
    double v8 = closure #2 in Canvas.removeImageBackground(for:);
  }
  return MEMORY[0x270FA2498](v8, v7, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  id v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  MEMORY[0x21054D560](v1, MEMORY[0x263F8EE60] + 8, v2, MEMORY[0x263F8E4E0]);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in Canvas.addFlags(_:strokeFlags:to:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v62 = a7;
  uint64_t v63 = a6;
  uint64_t v10 = (uint64_t)a1;
  uint64_t v60 = a9;
  uint64_t v61 = a8;
  uint64_t v57 = *a1;
  uint64_t v11 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v11 - 8);
  CGRect v55 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v58 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  CGRect v54 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v14 - 8);
  CGRect v56 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v69 = (char *)&v53 - v21;
  uint64_t v70 = v20;
  uint64_t v22 = *(void *)(a2 + 56);
  uint64_t v64 = a2 + 56;
  uint64_t v23 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & v22;
  uint64_t v67 = v20 + 32;
  uint64_t v68 = v20 + 16;
  int64_t v65 = (unint64_t)(v23 + 63) >> 6;
  uint64_t v66 = (uint64_t (**)(char *, uint64_t))(v20 + 8);
  uint64_t v73 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v27 = 0;
  while (1)
  {
    if (v25)
    {
      unint64_t v28 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      unint64_t v29 = v28 | (v27 << 6);
      goto LABEL_21;
    }
    int64_t v30 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v30 >= v65) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v64 + 8 * v30);
    ++v27;
    if (!v31)
    {
      int64_t v27 = v30 + 1;
      if (v30 + 1 >= v65) {
        goto LABEL_23;
      }
      unint64_t v31 = *(void *)(v64 + 8 * v27);
      if (!v31)
      {
        int64_t v27 = v30 + 2;
        if (v30 + 2 >= v65) {
          goto LABEL_23;
        }
        unint64_t v31 = *(void *)(v64 + 8 * v27);
        if (!v31) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v25 = (v31 - 1) & v31;
    unint64_t v29 = __clz(__rbit64(v31)) + (v27 << 6);
LABEL_21:
    CGFloat v34 = v69;
    uint64_t v33 = v70;
    (*(void (**)(char *, unint64_t, uint64_t))(v70 + 16))(v69, *(void *)(v73 + 48) + *(void *)(v70 + 72) * v29, v16);
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v18, v34, v16);
    double v36 = (void (*)(char *, void))WeakTagged_9.subscript.modify();
    uint64_t v37 = *(void *)(v35 + 24);
    if (v37)
    {
      uint64_t v38 = v10;
      uint64_t v39 = *(void *)(v35 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v35, *(void *)(v35 + 24));
      double v40 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v39 + 80);
      uint64_t v41 = v39;
      uint64_t v10 = v38;
      CGFloat v42 = (void (*)(unsigned char *, void))v40(v71, v37, v41);
      *v43 |= v63;
      v42(v71, 0);
    }
    v36(v72, 0);
    uint64_t result = (*v66)(v18, v16);
  }
  int64_t v32 = v30 + 3;
  if (v32 < v65)
  {
    unint64_t v31 = *(void *)(v64 + 8 * v32);
    if (!v31)
    {
      while (1)
      {
        int64_t v27 = v32 + 1;
        if (__OFADD__(v32, 1)) {
          goto LABEL_29;
        }
        if (v27 >= v65) {
          goto LABEL_23;
        }
        unint64_t v31 = *(void *)(v64 + 8 * v27);
        ++v32;
        if (v31) {
          goto LABEL_20;
        }
      }
    }
    int64_t v27 = v32;
    goto LABEL_20;
  }
LABEL_23:
  uint64_t result = swift_release();
  uint64_t v44 = v62;
  if (v62)
  {
    MEMORY[0x270FA5388](result);
    uint64_t v46 = v60;
    uint64_t v45 = v61;
    *(&v53 - 4) = *(void *)(v57 + *MEMORY[0x263F33088]);
    *(&v53 - 3) = v45;
    *(&v53 - 2) = v46;
    swift_getKeyPath();
    uint64_t v47 = (uint64_t)v56;
    Capsule.Ref<>.subscript.getter();
    swift_release();
    uint64_t v48 = v58;
    uint64_t v49 = v59;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v47, 1, v59))
    {
      return outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    }
    else
    {
      double v50 = v54;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v54, v47, v49);
      outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      uint64_t v51 = (uint64_t)v55;
      Ref.subscript.getter();
      uint64_t v52 = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v50, v49);
      MEMORY[0x270FA5388](v52);
      *(&v53 - 4) = v45;
      *(&v53 - 3) = v46;
      *(&v53 - 2) = v10;
      *(&v53 - 1) = v44;
      PKDrawingStruct.visitStrokes<A>(in:_:)(v10, (void (*)(void))partial apply for closure #1 in closure #1 in Canvas.addFlags(_:strokeFlags:to:), (uint64_t)(&v53 - 6));
      return _s8PaperKit5ImageVWOhTm_1(v51, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in Canvas.addFlags(_:strokeFlags:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  }
  uint64_t v18 = (void (*)(unsigned char *, void))Ref.subscript.modify();
  type metadata accessor for PKStrokeStruct(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  uint64_t v19 = (void (*)(unsigned char *, void))CRRegister.wrappedValue.modify();
  *v20 &= a3;
  v19(v21, 0);
  v18(v22, 0);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v16 + 8))(v14, v15);
}

uint64_t closure #1 in Canvas.hide(weakStrokes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v30 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  MEMORY[0x270FA5388](v4);
  double v26 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  uint64_t v25 = a1;
  v24(v12, a1, v9, v14);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  WeakRef.init<A>(_:)();
  type metadata accessor for PKDrawingStruct();
  _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  LODWORD(v16) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v8, 1, v17);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  if (v16 == 1)
  {
    uint64_t v18 = type metadata accessor for PKStroke();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v29, 1, 1, v18);
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v24)(v12, v25, v9);
    uint64_t v20 = (uint64_t)v26;
    Ref.init<A>(_:)();
    uint64_t v21 = v29;
    specialized static PKStrokeCoherenceBase.initStroke<A>(strokeNodeRef:in:)(v20, v30, v29);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v20, v28);
    uint64_t v22 = type metadata accessor for PKStroke();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 0, 1, v22);
  }
}

uint64_t closure #2 in Canvas.hide(strokes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  type metadata accessor for MainActor();
  v6[18] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[19] = v8;
  v6[20] = v7;
  return MEMORY[0x270FA2498](closure #2 in Canvas.hide(strokes:), v8, v7);
}

uint64_t closure #2 in Canvas.hide(strokes:)()
{
  uint64_t v1 = (void *)v0[15];
  type metadata accessor for PKStroke();
  isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
  v0[21] = isa;
  PKDrawing._bridgeToObjectiveC()(v3);
  uint64_t v5 = v4;
  v0[22] = v4;
  v0[2] = v0;
  v0[3] = closure #2 in Canvas.hide(strokes:);
  uint64_t v6 = swift_continuation_init();
  v0[10] = MEMORY[0x263EF8330];
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) () -> () with result type ();
  v0[13] = &block_descriptor_249;
  v0[14] = v6;
  objc_msgSend(v1, sel__setAdditionalStrokes_inDrawing_completion_, isa, v5, v0 + 10);
  return MEMORY[0x270FA23F0](v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  id v2 = *(void *)(*(void *)v0 + 152);
  return MEMORY[0x270FA2498](closure #2 in Canvas.hide(strokes:), v2, v1);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = (void *)v0[21];
  id v2 = (void *)v0[22];
  swift_release();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void closure #2 in Canvas.imageOf(canvasElementViews:in:)(CGFloat *a1@<X0>, id *a2@<X1>, void *a3@<X2>, CGRect *a4@<X8>)
{
  CGFloat v6 = *a1;
  CGFloat v7 = a1[1];
  CGFloat v8 = a1[2];
  CGFloat v9 = a1[3];
  id v10 = *a2;
  objc_msgSend(*a2, sel_bounds);
  objc_msgSend(a3, sel_convertRect_fromCoordinateSpace_, v10);
  v16.origin.CGFloat x = v11;
  v16.origin.CGFloat y = v12;
  v16.size.CGFloat width = v13;
  v16.size.CGFloat height = v14;
  v15.origin.CGFloat x = v6;
  v15.origin.CGFloat y = v7;
  v15.size.CGFloat width = v8;
  v15.size.CGFloat height = v9;
  *a4 = CGRectUnion(v15, v16);
}

void closure #3 in Canvas.imageOf(canvasElementViews:in:)(id a1, id *a2, CGRect *a3, unint64_t a4, void *a5)
{
  if (*a2)
  {
    CGFloat v9 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    CGContextSetGrayFillColor(v9, 1.0, 1.0);

    id v10 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    CGFloat v11 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    ClipBoundingBoCGFloat x = CGContextGetClipBoundingBox(v11);
    CGFloat x = ClipBoundingBox.origin.x;
    CGFloat y = ClipBoundingBox.origin.y;
    CGFloat width = ClipBoundingBox.size.width;
    CGFloat height = ClipBoundingBox.size.height;

    v73.origin.CGFloat x = x;
    v73.origin.CGFloat y = y;
    v73.size.CGFloat width = width;
    v73.size.CGFloat height = height;
    CGContextFillRect(v10, v73);
  }
  CGRect v16 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGFloat v17 = -CGRectGetMinX(*a3);
  CGFloat MinY = CGRectGetMinY(*a3);
  CGContextTranslateCTM(v16, v17, -MinY);

  if (a4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    if (!v19) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v19 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v19) {
      goto LABEL_12;
    }
  }
  if (v19 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v20 = 0;
  do
  {
    if ((a4 & 0xC000000000000001) != 0) {
      id v21 = (id)MEMORY[0x21054E050](v20, a4);
    }
    else {
      id v21 = *(id *)(a4 + 8 * v20 + 32);
    }
    uint64_t v22 = v21;
    ++v20;
    uint64_t v23 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    CGContextSaveGState(v23);

    objc_msgSend(v22, sel_bounds);
    objc_msgSend(a5, sel_convertRect_fromCoordinateSpace_, v22);
    CGFloat v25 = v24;
    CGFloat v27 = v26;
    CGFloat v29 = v28;
    CGFloat v31 = v30;
    int64_t v32 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    v74.origin.CGFloat x = v25;
    v74.origin.CGFloat y = v27;
    v74.size.CGFloat width = v29;
    v74.size.CGFloat height = v31;
    CGFloat MinX = CGRectGetMinX(v74);
    v75.origin.CGFloat x = v25;
    v75.origin.CGFloat y = v27;
    v75.size.CGFloat width = v29;
    v75.size.CGFloat height = v31;
    CGFloat v34 = CGRectGetMinY(v75);
    CGContextTranslateCTM(v32, MinX, v34);

    id v35 = objc_msgSend(v22, sel_layer);
    id v36 = objc_msgSend(a1, sel_CGContext);
    objc_msgSend(v35, sel_renderInContext_, v36);

    uint64_t v37 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    CGContextRestoreGState(v37);
  }
  while (v19 != v20);
LABEL_12:
  swift_bridgeObjectRelease();
  if (*a2)
  {
    uint64_t v38 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a5) + 0x320);
    id v67 = *a2;
    uint64_t v39 = (void *)v38();
    if (v39
      && (double v40 = v39,
          id v41 = objc_msgSend(v39, sel_selectionImage),
          v40,
          v41))
    {
      objc_msgSend(v67, sel_bounds);
      objc_msgSend(a5, sel_convertRect_fromCoordinateSpace_, v67);
      CGFloat v43 = v42;
      CGFloat v45 = v44;
      CGFloat v47 = v46;
      CGFloat v49 = v48;
      double v50 = (CGContext *)objc_msgSend(a1, sel_CGContext);
      v76.origin.CGFloat x = v43;
      v76.origin.CGFloat y = v45;
      v76.size.CGFloat width = v47;
      v76.size.CGFloat height = v49;
      double v51 = CGRectGetMinY(v76);
      v77.origin.CGFloat x = v43;
      v77.origin.CGFloat y = v45;
      v77.size.CGFloat width = v47;
      v77.size.CGFloat height = v49;
      t1.CGFloat a = 1.0;
      t1.CGFloat b = 0.0;
      t1.CGFloat c = 0.0;
      t1.CGFloat d = 1.0;
      t1.tCGFloat x = 0.0;
      t1.tCGFloat y = 0.0;
      t2.CGFloat b = 0.0;
      t2.CGFloat c = 0.0;
      t2.CGFloat a = 1.0;
      *(_OWORD *)&t2.CGFloat d = xmmword_20C8340F0;
      t2.tCGFloat y = v51 + CGRectGetMaxY(v77);
      CGAffineTransformConcat(&v68, &t1, &t2);
      CGAffineTransform t1 = v68;
      CGContextConcatCTM(v50, &t1);

      id v52 = objc_msgSend(v41, sel_image);
      if (v52)
      {
        uint64_t v53 = v52;
        CGRect v54 = (CGImage *)objc_msgSend(v52, sel_CGImage);

        if (v54)
        {
          id v55 = objc_msgSend(a1, sel_CGContext);
          v78.origin.CGFloat x = v43;
          v78.origin.CGFloat y = v45;
          v78.size.CGFloat width = v47;
          v78.size.CGFloat height = v49;
          CGContextRef.draw(_:in:byTiling:)(v54, v78, 0);
        }
      }
      id v56 = objc_msgSend(v41, sel_mulImage);
      if (v56)
      {
        uint64_t v57 = v56;
        uint64_t v58 = (CGImage *)objc_msgSend(v56, sel_CGImage);

        if (v58)
        {
          uint64_t v59 = (CGContext *)objc_msgSend(a1, sel_CGContext);
          CGContextSetBlendMode(v59, kCGBlendModeMultiply);

          id v60 = objc_msgSend(a1, sel_CGContext);
          v79.origin.CGFloat x = v43;
          v79.origin.CGFloat y = v45;
          v79.size.CGFloat width = v47;
          v79.size.CGFloat height = v49;
          CGContextRef.draw(_:in:byTiling:)(v58, v79, 0);
        }
      }
      id v61 = objc_msgSend(v41, sel_addImage);
      if (v61
        && (uint64_t v62 = v61,
            uint64_t v63 = (CGImage *)objc_msgSend(v61, sel_CGImage),
            v62,
            v63))
      {
        uint64_t v64 = (CGContext *)objc_msgSend(a1, sel_CGContext);
        CGContextSetBlendMode(v64, kCGBlendModePlusLighter);

        id v65 = objc_msgSend(a1, sel_CGContext);
        v80.origin.CGFloat x = v43;
        v80.origin.CGFloat y = v45;
        v80.size.CGFloat width = v47;
        v80.size.CGFloat height = v49;
        CGContextRef.draw(_:in:byTiling:)(v63, v80, 0);
      }
      else
      {
      }
    }
    else
    {
    }
  }
}

uint64_t closure #2 in Canvas.dropInteraction(_:performDrop:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v25 = type metadata accessor for CRStableAsset();
  uint64_t v10 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  CGFloat v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v13 - 8);
  CGRect v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v24 - v21;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v15, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for URL?);
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v15, v16);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v22, v16);
  CRStableAsset.init(url:extension:)();
  closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:)((uint64_t)v12, &v26, a2, a3, a4, a5);
  swift_release();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v25);
}

uint64_t closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v33 = a1;
  CGFloat v34 = a2;
  uint64_t v10 = type metadata accessor for CRStableAsset();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v31 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  id v32 = Canvas.editingView.getter();
  uint64_t v22 = v21;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v23(v16, v33, v10);
  v23(v13, (uint64_t)v16, v10);
  type metadata accessor for MainActor();
  uint64_t v24 = static MainActor.shared.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  unint64_t v25 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v26 = (v12 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  CGFloat v27 = (char *)swift_allocObject();
  uint64_t v28 = MEMORY[0x263F8F500];
  *((void *)v27 + 2) = v24;
  *((void *)v27 + 3) = v28;
  *((void *)v27 + 4) = v32;
  *((void *)v27 + 5) = v22;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v27[v25], v13, v10);
  CGFloat v29 = (double *)&v27[v26];
  *CGFloat v29 = a3;
  v29[1] = a4;
  v29[2] = a5;
  v29[3] = a6;
  uint64_t result = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v19, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:), (uint64_t)v27);
  *CGFloat v34 = result;
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(double *)(v10 + 56) = a3;
  *(double *)(v10 + 64) = a4;
  *(double *)(v10 + 40) = a1;
  *(double *)(v10 + 48) = a2;
  *(void *)(v10 + 24) = a9;
  *(void *)(v10 + 32) = a10;
  *(void *)(v10 + 16) = a8;
  uint64_t v11 = type metadata accessor for URL();
  *(void *)(v10 + 72) = v11;
  *(void *)(v10 + 80) = *(void *)(v11 - 8);
  *(void *)(v10 + 88) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v10 + 96) = static MainActor.shared.getter();
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:), v13, v12);
}

uint64_t closure #1 in closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:)()
{
  uint64_t v1 = *((void *)v0 + 11);
  uint64_t v2 = *((void *)v0 + 9);
  uint64_t v3 = *((void *)v0 + 10);
  CGFloat v5 = v0[7];
  CGFloat v4 = v0[8];
  CGFloat v7 = v0[5];
  CGFloat v6 = v0[6];
  uint64_t v8 = *((void *)v0 + 3);
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  CRStableAsset.url.getter();
  v15.origin.CGFloat x = v7;
  v15.origin.CGFloat y = v6;
  v15.size.CGFloat width = v5;
  v15.size.CGFloat height = v4;
  CGFloat MidX = CGRectGetMidX(v15);
  v16.origin.CGFloat x = v7;
  v16.origin.CGFloat y = v6;
  v16.size.CGFloat width = v5;
  v16.size.CGFloat height = v4;
  CGFloat MidY = CGRectGetMidY(v16);
  (*(void (**)(uint64_t, uint64_t, CGFloat, void, void, uint64_t, uint64_t))(v8 + 112))(v1, 1, COERCE_CGFLOAT(*(void *)&MidX), *(void *)&MidY, 0, ObjectType, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))*((void *)v0 + 1);
  return v12();
}

uint64_t closure #1 in Canvas.dropInteraction(_:item:willAnimateDropWith:)(uint64_t a1, uint64_t a2, void *a3)
{
  CGFloat v4 = (uint64_t *)(a2 + direct field offset for Canvas.dropCompletions);
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    id v6 = a3;
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8)
    {
      CGFloat v9 = *(void (**)(uint64_t))(*(void *)(v5 + 56) + 16 * v7);
      swift_retain_n();

      uint64_t v10 = swift_bridgeObjectRelease();
      v9(v10);
      swift_release_n();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
  }
  swift_beginAccess();
  uint64_t v11 = specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)a3);
  uint64_t result = swift_endAccess();
  if (v11) {
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v11);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t Canvas.canPerformAction(_:withSender:)(uint64_t a1, uint64_t a2)
{
  if (static Selector.== infix(_:_:)()) {
    return 1;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a2, (uint64_t)v16, &demangling cache variable for type metadata for Any?);
  uint64_t v6 = v17;
  if (v17)
  {
    unint64_t v7 = __swift_project_boxed_opaque_existential_1(v16, v17);
    uint64_t v8 = *(void *)(v6 - 8);
    double v9 = MEMORY[0x270FA5388](v7);
    uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v8 + 16))(v11, v9);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (objc_class *)type metadata accessor for Canvas();
  v15.receiver = v2;
  v15.super_class = v13;
  id v5 = objc_msgSendSuper2(&v15, sel_canPerformAction_withSender_, a1, v12);
  swift_unknownObjectRelease();
  return (uint64_t)v5;
}

uint64_t @objc Canvas.canPerformAction(_:withSender:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  char v8 = Canvas.canPerformAction(_:withSender:)(a3, (uint64_t)v10);

  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
  return v8 & 1;
}

uint64_t @objc Canvas.cut(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc Canvas.cut(_:)(a1, a2, a3, 0);
}

uint64_t @objc Canvas.copy(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc Canvas.cut(_:)(a1, a2, a3, 1);
}

uint64_t @objc Canvas.cut(_:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    id v7 = (id)swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
    id v7 = a1;
  }
  Canvas.cut(_:)((uint64_t)v7, a4);

  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
}

uint64_t @objc Canvas.paste(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc Canvas.cut(_:)(a1, a2, a3, 2);
}

uint64_t Canvas.cut(_:)(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v3)
  {
    uint64_t v5 = v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    uint64_t v6 = *(void *)v5;
    id v7 = *(void **)(v5 + 8);
    char v8 = *(const char **)(v5 + 16);
    char v9 = *(unsigned char *)(v5 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    AnyCanvas.performSelectionAction(_:_:at:)(a2, v6, v7, v8, v9, 0, 0, 1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t @objc Canvas.duplicate(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc Canvas.cut(_:)(a1, a2, a3, 3);
}

uint64_t closure #1 in Canvas.itemProvider(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v14 + v13, (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  objc_super v15 = (void *)(v14 + ((v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8));
  *objc_super v15 = a1;
  v15[1] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in Canvas.itemProvider(for:), v14);
  swift_release();
  return 0;
}

uint64_t closure #1 in closure #1 in Canvas.itemProvider(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  type metadata accessor for Paper();
  v6[10] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in Canvas.itemProvider(for:), 0, 0);
}

uint64_t closure #1 in closure #1 in Canvas.itemProvider(for:)()
{
  double v1 = Capsule<>.contentBounds(includeDrawing:)(1);
  uint64_t v3 = v2;
  double v5 = v4;
  double v7 = v6;
  if (one-time initialization token for copyImageMaxDimension != -1) {
    swift_once();
  }
  BOOL v8 = *(double *)&static UIConstants.copyImageMaxDimension < v5
    || *(double *)&static UIConstants.copyImageMaxDimension < v7;
  double v9 = v5;
  double v10 = v7;
  if (v8)
  {
    double v11 = *(double *)&static UIConstants.copyImageMaxDimension / v7;
    if (*(double *)&static UIConstants.copyImageMaxDimension / v7 >= *(double *)&static UIConstants.copyImageMaxDimension
                                                                    / v5)
      double v11 = *(double *)&static UIConstants.copyImageMaxDimension / v5;
    double v9 = v5 * v11;
    double v10 = v7 * v11;
  }
  if (one-time initialization token for copyImageScale != -1) {
    swift_once();
  }
  uint64_t v12 = static UIConstants.copyImageScale;
  type metadata accessor for ImageRenderer();
  uint64_t v13 = swift_allocObject();
  *(double *)(v13 + 16) = v9;
  *(double *)(v13 + 24) = v10;
  *(void *)(v13 + 32) = v12;
  *(void *)(v0 + 88) = specialized CanvasElementImageRenderer.__allocating_init(renderer:)(v13);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule<>.root.getter();
  *(double *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = v3;
  *(double *)(v0 + 32) = v5;
  *(double *)(v0 + 40) = v7;
  *(unsigned char *)(v0 + 48) = 0;
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                      + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v14;
  void *v14 = v0;
  v14[1] = closure #1 in closure #1 in Canvas.itemProvider(for:);
  uint64_t v15 = *(void *)(v0 + 80);
  uint64_t v16 = *(void *)(v0 + 56);
  return v18(v15, v16, v0 + 16, 0, 0);
}

{
  void *v0;
  void *v1;
  void (*v2)(void *, void);
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  double v1 = (void *)v0[13];
  uint64_t v2 = (void (*)(void *, void))v0[8];
  uint64_t v3 = v1;
  v2(v1, 0);

  swift_release();
  swift_task_dealloc();
  double v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t closure #1 in closure #1 in Canvas.itemProvider(for:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  *(void *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();
  _s8PaperKit5ImageVWOhTm_1(v2, (uint64_t (*)(void))type metadata accessor for Paper);
  return MEMORY[0x270FA2498](closure #1 in closure #1 in Canvas.itemProvider(for:), 0, 0);
}

id thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderWriting?, @guaranteed Error?) -> ()) -> (@owned NSProgress?)(uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(uint64_t (**)(void, uint64_t))(a1 + 32);
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  double v5 = (void *)v2(partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> (), v4);
  swift_release();
  swift_release();
  return v5;
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t closure #2 in Canvas.itemProvider(for:)(void (*a1)(uint64_t, void, void), uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a3;
  uint64_t v34 = a2;
  id v35 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  BOOL v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v16 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v32 = v9;
  double v30 = v17;
  v17(v12, v9);
  type metadata accessor for CRContext();
  uint64_t v37 = 0;
  memset(v36, 0, sizeof(v36));
  uint64_t v18 = (void *)MEMORY[0x21054C990](0, v36);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v19 = type metadata accessor for CRCodableVersion();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 72);
  unint64_t v22 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_20C835740;
  unint64_t v24 = v23 + v22;
  unint64_t v25 = *(void (**)(unint64_t, void, uint64_t))(v20 + 104);
  v25(v23 + v22, *MEMORY[0x263F32EB0], v19);
  v25(v24 + v21, *MEMORY[0x263F32EB8], v19);
  if (one-time initialization token for allFileFormatVersions != -1) {
    swift_once();
  }
  static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)();

  swift_bridgeObjectRelease();
  uint64_t v27 = v32;
  uint64_t v26 = (uint64_t)v33;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v33, v15, v32);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v26, 0, 1, v27);
  v35(v26, 0, 0);
  outlined destroy of StocksKitCurrencyCache.Provider?(v26, &demangling cache variable for type metadata for URL?);
  v30(v15, v27);
  return 0;
}

uint64_t closure #3 in Canvas.pasteboardRepresentations(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  id v55 = a3;
  uint64_t v5 = type metadata accessor for UTType();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  CGRect v54 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v49 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v49 - v12;
  uint64_t v14 = *a1;
  uint64_t v15 = *a2;
  static UTType.png.getter();
  uint64_t v16 = UTType.identifier.getter();
  uint64_t v18 = v17;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19(v13, v5);
  if (*(void *)(v14 + 16) && (uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18), (v21 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v14 + 56) + 32 * v20, (uint64_t)&aBlock);
  }
  else
  {
    long long aBlock = 0u;
    long long v57 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v57 + 1))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for Any?);
    uint64_t v29 = v55;
    if (v15)
    {
LABEL_24:
      *uint64_t v29 = v15;
      return swift_bridgeObjectRetain();
    }
LABEL_12:
    uint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    *uint64_t v29 = result;
    return result;
  }
  outlined init with take of Any(&aBlock, v60);
  outlined init with copy of Any((uint64_t)v60, (uint64_t)&aBlock);
  uint64_t v22 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_23:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    uint64_t v29 = v55;
    if (v15) {
      goto LABEL_24;
    }
    goto LABEL_12;
  }
  id v23 = v61;
  if (!v15)
  {
    long long aBlock = 0u;
    long long v57 = 0u;
LABEL_21:

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for Any?);
    goto LABEL_23;
  }
  uint64_t v52 = v22;
  id v53 = v61;
  static UTType.png.getter();
  uint64_t v24 = UTType.identifier.getter();
  uint64_t v26 = v25;
  v19(v10, v5);
  if (*(void *)(v15 + 16) && (uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v26), (v28 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v15 + 56) + 32 * v27, (uint64_t)&aBlock);
  }
  else
  {
    long long aBlock = 0u;
    long long v57 = 0u;
  }
  id v23 = v53;
  swift_bridgeObjectRelease();
  if (!*((void *)&v57 + 1)) {
    goto LABEL_21;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_23;
  }
  uint64_t v31 = v61;
  objc_msgSend(v23, sel_size);
  double v33 = v32;
  objc_msgSend(v31, sel_size);
  if (v33 <= v34) {
    double v33 = v34;
  }
  objc_msgSend(v23, sel_size);
  double v36 = v35;
  uint64_t v37 = v31;
  objc_msgSend(v31, sel_size);
  double v39 = v36 + v38;
  id v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827A0]), sel_initWithSize_, v33, v39);
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = v23;
  *(double *)(v40 + 24) = v33;
  *(double *)(v40 + 32) = v39;
  *(void *)(v40 + 40) = v37;
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = partial apply for closure #1 in closure #3 in Canvas.pasteboardRepresentations(_:);
  *(void *)(v41 + 24) = v40;
  uint64_t v51 = v40;
  uint64_t v58 = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
  uint64_t v59 = v41;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v57 = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  *((void *)&v57 + 1) = &block_descriptor_217_0;
  double v42 = _Block_copy(&aBlock);
  id v50 = v23;
  id v49 = v37;
  swift_retain();
  swift_release();
  id v43 = objc_msgSend(v53, sel_imageWithActions_, v42);
  _Block_release(v42);
  LOBYTE(v42) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v42)
  {
    __break(1u);
  }
  else
  {
    *id v55 = v14;
    swift_bridgeObjectRetain();
    double v44 = v54;
    static UTType.png.getter();
    uint64_t v45 = UTType.identifier.getter();
    uint64_t v47 = v46;
    v19(v44, v5);
    *((void *)&v57 + 1) = v52;
    *(void *)&long long aBlock = v43;
    id v48 = v43;
    specialized Dictionary.subscript.setter((uint64_t)&aBlock, v45, v47);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    return swift_release();
  }
  return result;
}

id closure #1 in closure #3 in Canvas.pasteboardRepresentations(_:)(int a1, id a2, double a3, void *a4)
{
  objc_msgSend(a2, sel_size);
  objc_msgSend(a2, sel_drawInRect_, 0.0, 0.0, a3, v7);
  objc_msgSend(a2, sel_size);
  double v9 = v8;
  objc_msgSend(a4, sel_size);
  return objc_msgSend(a4, sel_drawInRect_, 0.0, v9, a3, v10);
}

uint64_t closure #1 in Canvas.canvasElementBounds(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Capsule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v17[-1] - v4;
  CanvasElementView.canvasElement.getter((uint64_t)&v17[-1] - v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v6 = v18;
  if (v18)
  {
    uint64_t v7 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    double v8 = (*(double (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v6);
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CanvasElement?);
    double v8 = 0.0;
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  *(double *)a1 = v8;
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v14;
  *(unsigned char *)(a1 + 32) = v6 == 0;
  return result;
}

uint64_t closure #2 in Canvas.createSubCanvasElement(from:)(void *a1, uint64_t a2, char *a3, uint64_t a4, char *a5, int a6, uint64_t a7, uint64_t a8)
{
  int v53 = a6;
  uint64_t v52 = a5;
  uint64_t v67 = a4;
  uint64_t v51 = a3;
  uint64_t v65 = a2;
  uint64_t v64 = a1;
  uint64_t v10 = *a1;
  uint64_t v59 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v59);
  id v50 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v57 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  id v56 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v63 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  id v60 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  CGRect v54 = (char *)&v50 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v16 - 8);
  id v61 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  id v55 = (char *)&v50 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  id v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v75 = *(void *)(v10 + *MEMORY[0x263F33088]);
  uint64_t v25 = v75;
  uint64_t v76 = a7;
  uint64_t v62 = a8;
  uint64_t v77 = a8;
  swift_getKeyPath();
  uint64_t v72 = v25;
  uint64_t v73 = a7;
  uint64_t v74 = a8;
  swift_getKeyPath();
  uint64_t v26 = (uint64_t)v64;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  uint64_t v71 = v65;
  uint64_t v27 = v66;
  CROrderedSet.filter(_:)();
  uint64_t v66 = v27;
  char v28 = v23;
  uint64_t v29 = v67;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v28, v20);
  uint64_t v30 = v63;
  Capsule.Ref<>.subscript.setter();
  uint64_t v31 = *(void *)(v29 + 16);
  uint64_t v68 = v25;
  uint64_t v69 = a7;
  uint64_t v70 = v62;
  swift_getKeyPath();
  double v32 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
  if (v31)
  {
    uint64_t v33 = (uint64_t)v61;
    Capsule.Ref<>.subscript.getter();
    swift_release();
    uint64_t v34 = v79;
    if ((*v32)(v33, 1, v79) == 1)
    {
      return outlined destroy of StocksKitCurrencyCache.Provider?(v33, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    }
    else
    {
      (*(void (**)(void))(v30 + 32))();
      uint64_t v39 = (uint64_t)v50;
      uint64_t v40 = Ref.subscript.getter();
      MEMORY[0x270FA5388](v40);
      *(&v50 - 4) = v51;
      *(&v50 - 3) = (char *)v29;
      *(&v50 - 2) = v52;
      *((unsigned char *)&v50 - 8) = v53 & 1;
      uint64_t v41 = PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(v26, (uint64_t)partial apply for closure #2 in closure #2 in Canvas.createSubCanvasElement(from:), (uint64_t)(&v50 - 6));
      _s8PaperKit5ImageVWOhTm_1(v39, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
      uint64_t v78 = v41;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
      double v42 = v56;
      CROrderedSet.init<A>(_:)();
      id v43 = v60;
      double v44 = (void (*)(uint64_t *, void))Ref.subscript.modify();
      (*(void (**)(uint64_t, char *, uint64_t))(v57 + 40))(v45 + *(int *)(v59 + 20), v42, v58);
      v44(&v78, 0);
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v43, v34);
    }
  }
  else
  {
    double v36 = v54;
    uint64_t v37 = (uint64_t)v55;
    Capsule.Ref<>.subscript.getter();
    swift_release();
    uint64_t v38 = v79;
    if ((*v32)(v37, 1, v79))
    {
      return outlined destroy of StocksKitCurrencyCache.Provider?(v37, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    }
    else
    {
      uint64_t v46 = v36;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v36, v37, v38);
      outlined destroy of StocksKitCurrencyCache.Provider?(v37, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      uint64_t v47 = v56;
      CROrderedSet.init()();
      id v48 = (void (*)(uint64_t *, void))Ref.subscript.modify();
      (*(void (**)(uint64_t, char *, uint64_t))(v57 + 40))(v49 + *(int *)(v59 + 20), v47, v58);
      v48(&v78, 0);
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v46, v38);
    }
  }
}

uint64_t closure #2 in closure #2 in Canvas.createSubCanvasElement(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  double v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, v5, v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  WeakRef.init<A>(_:)();
  LOBYTE(a3) = specialized Set.contains(_:)((uint64_t)v13, a3);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return a3 & 1;
}

uint64_t closure #2 in Canvas.createNewPaper(from:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v66 = a7;
  uint64_t v67 = a6;
  uint64_t v86 = a5;
  uint64_t v68 = a4;
  uint64_t v84 = a3;
  uint64_t v94 = a1;
  double v8 = (void *)(*MEMORY[0x263F8EED0] & *a2);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v63 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v62 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v69);
  uint64_t v70 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v61);
  uint64_t v65 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v71 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v87 = (uint64_t)&v59 - v15;
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v88 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  id v60 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v76 = (char *)&v59 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v82 = v19;
  uint64_t v83 = v20;
  MEMORY[0x270FA5388](v19);
  __C::CGRect v80 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v81 = (char *)&v59 - v23;
  uint64_t v78 = v8;
  uint64_t v24 = v8[251];
  uint64_t v25 = v8[252];
  uint64_t v26 = type metadata accessor for Capsule();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v74 = (uint64_t)&v59 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v59 - v30;
  CanvasElementView.canvasElement.getter((uint64_t)&v59 - v30);
  Capsule.Ref.import<A>(_:)();
  double v32 = *(void (**)(char *, uint64_t))(v27 + 8);
  v32(v31, v26);
  uint64_t KeyPath = swift_getKeyPath();
  CanvasElementView.canvasElement.getter((uint64_t)v31);
  uint64_t v75 = v24;
  uint64_t v90 = v24;
  uint64_t v91 = v25;
  uint64_t v33 = v78;
  uint64_t v78 = a2;
  uint64_t v72 = v33[253];
  uint64_t v92 = v72;
  swift_getKeyPath();
  uint64_t v34 = v80;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v73 = (void (*)(uint64_t, uint64_t))v32;
  v32(v31, v26);
  uint64_t v35 = v85;
  uint64_t v89 = v84;
  uint64_t v36 = v82;
  CROrderedSet.filter(_:)();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v34, v36);
  uint64_t v37 = v86;
  uint64_t v38 = _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t result = Capsule.Ref<>.subscript.setter();
  if (*(void *)(v37 + 16))
  {
    uint64_t v84 = v38;
    uint64_t v85 = v35;
    uint64_t v40 = v74;
    uint64_t v41 = CanvasElementView.canvasElement.getter(v74);
    MEMORY[0x270FA5388](v41);
    *(&v59 - 4) = v75;
    *(&v59 - 3) = v25;
    *(&v59 - 2) = v72;
    swift_getKeyPath();
    uint64_t v42 = v87;
    Capsule<>.subscript.getter();
    swift_release();
    v73(v40, v26);
    id v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
    uint64_t v44 = v77;
    if (v43(v42, 1, v77) == 1)
    {
      return outlined destroy of StocksKitCurrencyCache.Provider?(v87, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    }
    else
    {
      int v45 = v66 & 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v76, v87, v44);
      uint64_t v46 = (uint64_t)v65;
      uint64_t v47 = v94;
      Ref.subscript.getter();
      uint64_t v48 = v68;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v49 = specialized PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(v47, v46, v48, v37, v67, v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s8PaperKit5ImageVWOhTm_1(v46, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
      id v50 = (void (*)(unint64_t *, void))Capsule.Ref<>.root.modify();
      specialized ContainerCanvasElement.ensureHasDrawing<A>(in:)(v47);
      v50(&v93, 0);
      uint64_t v51 = (uint64_t)v70;
      Capsule.Ref<>.root.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
      uint64_t v52 = (uint64_t)v71;
      CRRegister.wrappedValue.getter();
      _s8PaperKit5ImageVWOhTm_1(v51, (uint64_t (*)(void))type metadata accessor for Paper);
      if (v43(v52, 1, v44))
      {
        (*(void (**)(char *, uint64_t))(v88 + 8))(v76, v44);
        swift_bridgeObjectRelease();
        return outlined destroy of StocksKitCurrencyCache.Provider?(v52, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      }
      else
      {
        uint64_t v53 = v88;
        CGRect v54 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v60, v52, v44);
        outlined destroy of StocksKitCurrencyCache.Provider?(v52, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
        unint64_t v93 = v49;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
        id v55 = v62;
        CROrderedSet.init<A>(_:)();
        id v56 = (void (*)(unint64_t *, void))Ref.subscript.modify();
        (*(void (**)(uint64_t, char *, uint64_t))(v63 + 40))(v57 + *(int *)(v61 + 20), v55, v64);
        v56(&v93, 0);
        uint64_t v58 = *(void (**)(char *, uint64_t))(v53 + 8);
        v58(v54, v44);
        return ((uint64_t (*)(char *, uint64_t))v58)(v76, v44);
      }
    }
  }
  return result;
}

uint64_t closure #1 in closure #2 in Canvas.createSubCanvasElement(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CRKeyPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  MEMORY[0x21054BEC0](v7);
  char v8 = specialized Set.contains(_:)((uint64_t)v6, a2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v8 & 1;
}

uint64_t closure #1 in Canvas.canvasCalculateSetShouldSolve(_:stroke:flag:undoable:)(uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(void, void), unsigned char *a5)
{
  uint64_t v75 = a5;
  unint64_t v79 = (unint64_t)a4;
  LODWORD(v80) = a3;
  uint64_t v7 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v78 = (char *)v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v81);
  uint64_t v77 = (char *)v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v86 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  uint64_t v85 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v74 = (char *)v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v83 = (char *)v64 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v76 = (char *)v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v64 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v87 = (uint64_t)v64 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v82 = a1;
  uint64_t v27 = a2;
  WeakRef.subscript.getter();
  uint64_t v28 = v12;
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, char *))(v12 + 48);
  uint64_t v30 = v12 + 48;
  uint64_t v29 = v31;
  double v32 = (char *)v11;
  if (v31((uint64_t)v20, 1, (char *)v11)) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  }
  uint64_t v70 = v30;
  uint64_t v71 = v29;
  uint64_t v72 = v26;
  uint64_t v69 = v23;
  uint64_t v73 = v27;
  uint64_t v34 = v28 + 16;
  uint64_t v35 = v83;
  uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v68(v83, v20, v11);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  uint64_t v36 = v85;
  CRRegister.value.getter();
  uint64_t v37 = v87;
  uint64_t v38 = v84;
  SharedTagged_2.tagged1.getter();
  uint64_t v39 = v86 + 8;
  uint64_t v67 = *(void (**)(char *, uint64_t))(v86 + 8);
  v67(v36, v38);
  uint64_t v41 = *(void (**)(char *, char *))(v28 + 8);
  uint64_t v40 = v28 + 8;
  uint64_t v83 = v32;
  int v66 = v41;
  v41(v35, v32);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v65 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  if (v65(v37, 1, v42) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?(v87, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  }
  v64[0] = v34;
  v64[1] = v40;
  uint64_t v86 = v39;
  uint64_t v44 = (uint64_t)v77;
  uint64_t v45 = v42;
  uint64_t v46 = v87;
  Ref.subscript.getter();
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  uint64_t v48 = (uint64_t *)v78;
  CRRegister.wrappedValue.getter();
  _s8PaperKit5ImageVWOhTm_1(v44, type metadata accessor for PKStrokeStruct);
  uint64_t v49 = *v48;
  _s8PaperKit5ImageVWOhTm_1((uint64_t)v48, type metadata accessor for PKStrokeProperties);
  id v50 = *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8);
  uint64_t result = v50(v46, v45);
  if (v80) {
    unint64_t v51 = v49 | v79;
  }
  else {
    unint64_t v51 = v49 & ~v79;
  }
  if (v51 != v49)
  {
    uint64_t v80 = v47;
    uint64_t v87 = v45;
    uint64_t v52 = (uint64_t)v76;
    WeakRef.subscript.getter();
    uint64_t v53 = v83;
    if (v71(v52, 1, v83))
    {
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v52, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
      CGRect v54 = v75;
    }
    else
    {
      unint64_t v79 = (unint64_t)v50;
      id v55 = v74;
      v68(v74, (char *)v52, (uint64_t)v53);
      outlined destroy of StocksKitCurrencyCache.Provider?(v52, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
      id v56 = v85;
      CRRegister.value.getter();
      uint64_t v57 = (uint64_t)v69;
      uint64_t v58 = v84;
      SharedTagged_2.tagged1.getter();
      v67(v56, v58);
      v66(v55, v53);
      uint64_t v59 = v87;
      unsigned int v60 = v65(v57, 1, v87);
      CGRect v54 = v75;
      if (v60 == 1)
      {
        uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
      }
      else
      {
        uint64_t v61 = (void (*)(char *, void))Ref.subscript.modify();
        uint64_t v62 = (void (*)(char *, void))CRRegister.wrappedValue.modify();
        *uint64_t v63 = v51;
        v62(v88, 0);
        v61(v89, 0);
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v79)(v57, v59);
      }
    }
    *CGRect v54 = 1;
  }
  return result;
}

void closure #1 in Canvas.undoablyAdd(_:to:)(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v2 = v1;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
}

uint64_t closure #1 in closure #1 in Canvas.undoablyAdd(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for GraphableExpression();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _s8PaperKit13CRAssetOrDataOWOcTm_1(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
  uint64_t v13 = type metadata accessor for CRKeyPath();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v5, 1, 1, v13);
  _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  uint64_t v14 = (void (*)(unsigned char *, void))Ref.subscript.modify();
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  CROrderedSet.append(_:)();
  v14(v16, 0);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t closure #1 in Canvas.mathAddGraph(forExpression:variable:range:identifier:expressionLocation:addToExisting:)(double a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, long long *a8, uint64_t a9)
{
  uint64_t v34 = a9;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for GraphableExpression();
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  long long v26 = a8[1];
  long long v35 = *a8;
  long long v36 = v26;
  _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  long long v35 = 0uLL;
  *(double *)&long long v36 = a1;
  *((double *)&v36 + 1) = a2;
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  v37.origin.CGFloat x = a3;
  v37.origin.CGFloat y = a4;
  v37.size.CGFloat width = a5;
  v37.size.CGFloat height = a6;
  if (CGRectIsEmpty(v37))
  {
    a3 = specialized static GraphElement.defaultVisibleRange.getter();
    a4 = v27;
    a5 = v28;
    a6 = v29;
  }
  *(double *)&long long v35 = a3;
  *((CGFloat *)&v35 + 1) = a4;
  *(CGFloat *)&long long v36 = a5;
  *((CGFloat *)&v36 + 1) = a6;
  Capsule.Ref<>.subscript.setter();
  _s8PaperKit13CRAssetOrDataOWOcTm_1(v34, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
  uint64_t v30 = type metadata accessor for CRKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v18, 1, 1, v30);
  _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  swift_getKeyPath();
  uint64_t v31 = (void (*)(long long *, void))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  CROrderedSet.append(_:)();
  v31(&v35, 0);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v22);
}

uint64_t closure #1 in Canvas.harmonizeCanvasElement<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CRAsset();
  v5[13] = v8;
  v5[14] = *(void *)(v8 - 8);
  v5[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  v5[16] = swift_task_alloc();
  uint64_t v9 = swift_task_alloc();
  v5[17] = v9;
  v5[18] = swift_task_alloc();
  v5[19] = swift_projectBox();
  v5[20] = type metadata accessor for MainActor();
  v5[21] = static MainActor.shared.getter();
  uint64_t v10 = (void *)swift_task_alloc();
  v5[22] = v10;
  *uint64_t v10 = v5;
  v10[1] = closure #1 in Canvas.harmonizeCanvasElement<A>(_:);
  return Canvas.harmonizeImage(_:)(v9, a5);
}

uint64_t closure #1 in Canvas.harmonizeCanvasElement<A>(_:)()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    uint64_t v4 = closure #1 in Canvas.harmonizeCanvasElement<A>(_:);
  }
  else {
    uint64_t v4 = closure #1 in Canvas.harmonizeCanvasElement<A>(_:);
  }
  return MEMORY[0x270FA2498](v4, v3, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19[9];
  void *v20;
  uint64_t v21;

  uint64_t v20 = v0;
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[14];
  swift_release();
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v1, v2, &demangling cache variable for type metadata for CRAsset?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v2, v3, &demangling cache variable for type metadata for CRAsset?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    uint64_t v6 = v0[16];
    outlined destroy of StocksKitCurrencyCache.Provider?(v0[18], &demangling cache variable for type metadata for CRAsset?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v6, &demangling cache variable for type metadata for CRAsset?);
  }
  else
  {
    uint64_t v7 = v0[19];
    uint64_t v8 = v0[15];
    uint64_t v9 = v0[14];
    uint64_t v17 = v0[13];
    uint64_t v18 = v0[18];
    uint64_t v11 = v0[11];
    uint64_t v10 = v0[12];
    uint64_t v12 = v0[10];
    (*(void (**)(uint64_t, void))(v9 + 32))(v8, v0[16]);
    *(void *)(swift_task_alloc() + 16) = v8;
    swift_beginAccess();
    Capsule.callAsFunction<A>(_:)();
    swift_endAccess();
    swift_task_dealloc();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v7, v12);
    uint64_t v13 = type metadata accessor for Image();
    uint64_t v14 = _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    v19[0] = 3;
    AnyCanvas.merge<A>(_:from:)(v10, v19, v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    outlined destroy of StocksKitCurrencyCache.Provider?(v18, &demangling cache variable for type metadata for CRAsset?);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v17);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  swift_release();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[23];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[23];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    uint64_t v11 = v8;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_20C2D7000, v5, v6, "Cannot harmonize image: %@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x210550270](v10, -1, -1);
    MEMORY[0x210550270](v9, -1, -1);
  }
  else
  {
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t closure #1 in closure #1 in Canvas.harmonizeCanvasElement<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v6 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5, a2, v6);
  uint64_t v7 = type metadata accessor for CRAssetOrData();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 0, 1, v7);
  _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return Capsule.Ref<>.subscript.setter();
}

BOOL static Canvas.CanvasHarmonizationError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Canvas.CanvasHarmonizationError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int Canvas.CanvasHarmonizationError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Canvas<A>.CanvasHarmonizationError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Canvas.CanvasHarmonizationError.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Canvas<A>.CanvasHarmonizationError()
{
  return Canvas.CanvasHarmonizationError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Canvas<A>.CanvasHarmonizationError(uint64_t a1)
{
  Canvas.CanvasHarmonizationError.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Canvas<A>.CanvasHarmonizationError()
{
  Hasher.init(_seed:)();
  Canvas.CanvasHarmonizationError.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t closure #1 in Canvas.harmonizeImage(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  uint64_t v8[2] = a1;
  v8[3] = a4;
  uint64_t v9 = type metadata accessor for UTType();
  v8[8] = v9;
  v8[9] = *(void *)(v9 - 8);
  v8[10] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in Canvas.harmonizeImage(_:), 0, 0);
}

uint64_t closure #1 in Canvas.harmonizeImage(_:)()
{
  CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable) {
    goto LABEL_7;
  }
  uint64_t v2 = Mutable;
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0[8];
  static UTType.png.getter();
  uint64_t v6 = UTType.identifier.getter();
  uint64_t v8 = v7;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v9 = (__CFString *)MEMORY[0x21054D080](v6, v8);
  swift_bridgeObjectRelease();
  CGImageDestinationRef v10 = CGImageDestinationCreateWithData(v2, v9, 1uLL, 0);

  if (!v10)
  {

LABEL_7:
    type metadata accessor for Canvas.CanvasHarmonizationError();
    swift_getWitnessTable();
    swift_allocError();
    unsigned char *v20 = 1;
    swift_willThrow();
LABEL_8:
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
    goto LABEL_11;
  }
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F4B5B8]), sel_initWithForeground_background_, v0[3], v0[4]);
  id v12 = objc_msgSend(self, sel_getDefault);
  objc_msgSend(v12, sel_load);
  id v13 = objc_msgSend(v12, sel_harmonize_, v11);
  uint64_t v14 = (CGImage *)objc_msgSend(v13, sel_harmonized);
  if (!v14)
  {

    uint64_t v17 = 0;
    unint64_t v19 = 0xF000000000000000;
    goto LABEL_10;
  }
  uint64_t v15 = v14;
  CGImageDestinationAddImage(v10, v14, 0);
  if (!CGImageDestinationFinalize(v10))
  {
    type metadata accessor for Canvas.CanvasHarmonizationError();
    swift_getWitnessTable();
    swift_allocError();
    *uint64_t v24 = 1;
    swift_willThrow();

    goto LABEL_8;
  }
  uint64_t v16 = v2;
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

LABEL_10:
  uint64_t v22 = (uint64_t *)v0[2];
  *uint64_t v22 = v17;
  v22[1] = v19;
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
LABEL_11:
  return v21();
}

void @objc Canvas.init(frame:)()
{
}

uint64_t Canvas.__ivar_destroyer()
{
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id Canvas.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Canvas();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc Canvas.__ivar_destroyer(uint64_t a1)
{
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id CanvasPointerDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasPointerDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Clock.sleep(for:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return MEMORY[0x270FA2498](specialized Clock.sleep(for:tolerance:), 0, 0);
}

uint64_t specialized Clock.sleep(for:tolerance:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, MEMORY[0x263F8F710]);
  dispatch thunk of Clock.now.getter();
  _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant, MEMORY[0x263F8F6D8]);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized Clock.sleep(for:tolerance:);
  uint64_t v8 = v0[11];
  return MEMORY[0x270FA2380](v8, v0 + 2, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return MEMORY[0x270FA2498](specialized Clock.sleep(for:tolerance:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t (*)(char *))isStackAllocationSafe;
  v14[1] = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(a3 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    specialized closure #1 in _NativeSet.filter(_:)((void *)((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a3, v5);
    uint64_t v10 = v9;
    swift_release();
    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    id v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v11, v7, a3, v5);
    uint64_t v10 = v12;
    swift_release();
    MEMORY[0x210550270](v11, -1, -1);
  }
  return v10;
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  double v32 = a4;
  uint64_t v25 = a2;
  long long v26 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = 0;
  uint64_t v33 = a3;
  uint64_t v12 = *(void *)(a3 + 56);
  uint64_t v27 = 0;
  uint64_t v28 = a3 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v31 = v7 + 16;
  int64_t v29 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v30 = v7 + 8;
  while (v15)
  {
    unint64_t v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v17 = v16 | (v11 << 6);
LABEL_17:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v10, *(void *)(v33 + 48) + *(void *)(v7 + 72) * v17, v6, v8);
    char v21 = v32(v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v4) {
      return;
    }
    if (v21)
    {
      *(unint64_t *)((char *)v26 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      BOOL v18 = __OFADD__(v27++, 1);
      if (v18) {
        goto LABEL_30;
      }
    }
  }
  BOOL v18 = __OFADD__(v11++, 1);
  if (v18)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v11 >= v29) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v28 + 8 * v11);
  if (v19)
  {
LABEL_16:
    unint64_t v15 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v11 << 6);
    goto LABEL_17;
  }
  int64_t v20 = v11 + 1;
  if (v11 + 1 >= v29) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v28 + 8 * v20);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v11 + 2;
  if (v11 + 2 >= v29) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v28 + 8 * v20);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v11 + 3;
  if (v11 + 3 >= v29)
  {
LABEL_27:
    uint64_t v22 = v25;
    uint64_t v23 = v27;
    uint64_t v24 = v33;
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(v26, v22, v23, v24, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &demangling cache variable for type metadata for _SetStorage<WeakTagged_9<TaggedCanvasElement>>, &lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, MEMORY[0x263F32D58]);
    return;
  }
  unint64_t v19 = *(void *)(v28 + 8 * v20);
  if (v19)
  {
LABEL_15:
    int64_t v11 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_27;
    }
    unint64_t v19 = *(void *)(v28 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &demangling cache variable for type metadata for _SetStorage<WeakTagged_9<TaggedCanvasElement>>, &lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, MEMORY[0x263F32D58]);
}

{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, (unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, MEMORY[0x263F330C0]);
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t (**v35)(unint64_t, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;

  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  CGRect v37 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  long long v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  long long v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      unint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      BOOL v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        BOOL v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          BOOL v18 = v34[v13];
          if (!v18)
          {
            unint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            BOOL v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                BOOL v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      uint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    int64_t v20 = a4;
    char v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      long long v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        int64_t v29 = v25 == v28;
        if (v25 == v28) {
          uint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      long long v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;

  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = MEMORY[0x263F8EE88];
LABEL_36:
    swift_release();
    return v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ResizeHandleType>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v28 = a1;
  if (a2 < 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *a1;
  }
  int64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      uint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v28[v11];
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v28[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v10 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    BOOL v18 = *(unsigned __int8 *)(*(void *)(v4 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    unint64_t v19 = -1 << *(unsigned char *)(v9 + 32);
    int64_t v20 = result & ~v19;
    char v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      uint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        uint64_t v25 = v21 == v24;
        if (v21 == v24) {
          char v21 = 0;
        }
        v23 |= v25;
        long long v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      uint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(unsigned char *)(*(void *)(v9 + 48) + v22) = v18;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = v28[v17];
  if (v16)
  {
    int64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v42 = a7;
  uint64_t v43 = a8;
  uint64_t v38 = a1;
  uint64_t v41 = a5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v44 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(a6);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v15 = result;
  uint64_t v37 = a2;
  if (a2 < 1) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = *v38;
  }
  uint64_t v18 = 0;
  uint64_t v19 = result + 56;
  uint64_t v39 = (uint64_t (**)(unint64_t, char *, uint64_t))(v44 + 32);
  uint64_t v40 = v44 + 16;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v18 << 6);
    }
    else
    {
      uint64_t v22 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        goto LABEL_40;
      }
      if (v22 >= v37)
      {
LABEL_37:
        swift_release();
        return v15;
      }
      unint64_t v23 = v38[v22];
      ++v18;
      if (!v23)
      {
        uint64_t v18 = v22 + 1;
        if (v22 + 1 >= v37) {
          goto LABEL_37;
        }
        unint64_t v23 = v38[v18];
        if (!v23)
        {
          uint64_t v18 = v22 + 2;
          if (v22 + 2 >= v37) {
            goto LABEL_37;
          }
          unint64_t v23 = v38[v18];
          if (!v23)
          {
            uint64_t v24 = v22 + 3;
            if (v24 >= v37) {
              goto LABEL_37;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v37) {
                  goto LABEL_37;
                }
                unint64_t v23 = v38[v18];
                ++v24;
                if (v23) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v18 = v24;
          }
        }
      }
LABEL_24:
      unint64_t v17 = (v23 - 1) & v23;
      unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
    }
    uint64_t v25 = a4;
    uint64_t v26 = *(void *)(a4 + 48);
    uint64_t v27 = *(void *)(v44 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v44 + 16))(v14, v26 + v27 * v21, v12);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(v42, v41);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v19 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v31 = __clz(__rbit64((-1 << v29) & ~*(void *)(v19 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v34 = v30 == v33;
        if (v30 == v33) {
          unint64_t v30 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v19 + 8 * v30);
      }
      while (v35 == -1);
      unint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(void *)(v19 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    uint64_t result = (*v39)(*(void *)(v15 + 48) + v31 * v27, v14, v12);
    ++*(void *)(v15 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v25;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  outlined init with copy of Any((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v52 = v8;
  uint64_t v53 = 0;
  uint64_t v54 = v11 & v9;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v48);
  uint64_t v12 = *((void *)&v48 + 1);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_27;
  }
  uint64_t v13 = v48;
  outlined init with take of Any(v49, v47);
  uint64_t v14 = *(void **)a5;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v20 = v15;
  if (v14[3] >= v19)
  {
    if (a4)
    {
      if (v15) {
        goto LABEL_12;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v20) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v24 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    uint64_t v25 = (uint64_t *)(v24[6] + 16 * v16);
    *uint64_t v25 = v13;
    v25[1] = v12;
    outlined init with take of Any(v47, (_OWORD *)(v24[7] + 32 * v16));
    uint64_t v26 = v24[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v24[2] = v28;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()(&v48);
    for (uint64_t i = *((void *)&v48 + 1); *((void *)&v48 + 1); uint64_t i = *((void *)&v48 + 1))
    {
      uint64_t v31 = v48;
      outlined init with take of Any(v49, v47);
      char v32 = *(void **)a5;
      unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v31, i);
      uint64_t v35 = v32[2];
      BOOL v36 = (v33 & 1) == 0;
      uint64_t v37 = v35 + v36;
      if (__OFADD__(v35, v36)) {
        goto LABEL_28;
      }
      char v38 = v33;
      if (v32[3] < v37)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
        uint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v31, i);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_30;
        }
        unint64_t v34 = v39;
      }
      if (v38)
      {
        outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
        swift_bridgeObjectRelease();
        unint64_t v30 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v34);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
        outlined init with take of Any(v46, v30);
      }
      else
      {
        uint64_t v41 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        uint64_t v42 = (uint64_t *)(v41[6] + 16 * v34);
        uint64_t *v42 = v31;
        v42[1] = i;
        outlined init with take of Any(v47, (_OWORD *)(v41[7] + 32 * v34));
        uint64_t v43 = v41[2];
        BOOL v27 = __OFADD__(v43, 1);
        uint64_t v44 = v43 + 1;
        if (v27) {
          goto LABEL_29;
        }
        v41[2] = v44;
      }
      specialized LazyMapSequence.Iterator.next()(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    if ((v20 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    swift_bridgeObjectRelease();
    unint64_t v23 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    outlined init with take of Any(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  void v42[3];
  void (**v43)(char *, uint64_t);
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  uint64_t v10 = type metadata accessor for CRKeyPath();
  uint64_t v44 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView)?);
  MEMORY[0x270FA5388](v13 - 8);
  char v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = ~v16;
  BOOL v18 = *(void *)(a1 + 64);
  uint64_t v19 = -v16;
  uint64_t v46 = a1;
  uint64_t v47 = a1 + 64;
  if (v19 < 64) {
    char v20 = ~(-1 << v19);
  }
  else {
    char v20 = -1;
  }
  long long v48 = v17;
  uint64_t v49 = 0;
  uint64_t v50 = v20 & v18;
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  v42[2] = a1;
  swift_bridgeObjectRetain();
  v42[1] = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v15);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return swift_release();
  }
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
  uint64_t v53 = v44 + 32;
  uint64_t v43 = (void (**)(char *, uint64_t))(v44 + 8);
  while (1)
  {
    uint64_t v26 = *(int *)(v21 + 48);
    BOOL v27 = v10;
    v45(v12, v15, v10);
    uint64_t v28 = *(void **)&v15[v26];
    unint64_t v29 = *(void **)a5;
    uint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
    char v32 = v29[2];
    char v33 = (v30 & 1) == 0;
    unint64_t v34 = v32 + v33;
    if (__OFADD__(v32, v33)) {
      break;
    }
    uint64_t v35 = v30;
    if (v29[3] >= v34)
    {
      if (a4)
      {
        char v38 = *(void **)a5;
        if (v30) {
          goto LABEL_7;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        char v38 = *(void **)a5;
        if (v35) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, a4 & 1);
      BOOL v36 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
      if ((v35 & 1) != (v37 & 1)) {
        goto LABEL_22;
      }
      uint64_t v31 = v36;
      char v38 = *(void **)a5;
      if (v35)
      {
LABEL_7:
        unint64_t v23 = 8 * v31;
        uint64_t v24 = *(id *)(v38[7] + 8 * v31);

        uint64_t v10 = v27;
        (*v43)(v12, v27);
        uint64_t v25 = *(void *)(*(void *)a5 + 56);

        *(void *)(v25 + v23) = v24;
        goto LABEL_8;
      }
    }
    v38[(v31 >> 6) + 8] |= 1 << v31;
    uint64_t v10 = v27;
    v45((char *)(v38[6] + *(void *)(v44 + 72) * v31), v12, v27);
    *(void *)(v38[7] + 8 * v31) = v28;
    uint64_t v39 = v38[2];
    char v40 = __OFADD__(v39, 1);
    uint64_t v41 = v39 + 1;
    if (v40) {
      goto LABEL_21;
    }
    v38[2] = v41;
LABEL_8:
    specialized LazyMapSequence.Iterator.next()((uint64_t)v15);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, char a2)
{
  uint64_t v3 = v2;
  Swift::Int v6 = a1[1];
  Swift::Int v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 < v6)
  {
    if (v6 >= 0) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v6 + 1;
    }
    if (v6 >= -1)
    {
      Swift::Int v9 = v7;
      char v145 = a2;
      uint64_t v139 = a1;
      if (v6 < 2)
      {
        uint64_t v12 = (char *)MEMORY[0x263F8EE78];
        uint64_t v147 = MEMORY[0x263F8EE78];
        v144 = (void **)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
        if (v6 != 1)
        {
          unint64_t v15 = *(void *)(MEMORY[0x263F8EE78] + 16);
          if (v15 < 2) {
            goto LABEL_130;
          }
          goto LABEL_118;
        }
      }
      else
      {
        uint64_t v10 = v8 >> 1;
        type metadata accessor for AnyCanvasElementView();
        uint64_t v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v10;
        v144 = (void **)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
        uint64_t v147 = v11;
      }
      Swift::Int v141 = v9;
      Swift::Int v13 = 0;
      uint64_t v14 = *a1;
      uint64_t v140 = *a1 - 8;
      uint64_t v12 = (char *)MEMORY[0x263F8EE78];
      Swift::Int v143 = v6;
      uint64_t v146 = *a1;
      while (1)
      {
        Swift::Int v16 = v13++;
        if (v13 < v6)
        {
          uint64_t v17 = *(void **)(v14 + 8 * v16);
          id v18 = *(id *)(v14 + 8 * v13);
          id v19 = v17;
          objc_msgSend(v18, sel_center);
          double v21 = v20;
          objc_msgSend(v19, sel_center);
          double v23 = v22;
          objc_msgSend(v18, sel_center);
          double v25 = v24;
          double v27 = v26;
          objc_msgSend(v19, sel_center);
          double v29 = v28;
          double v31 = v30;

          if (v21 == v23)
          {
            Swift::Int v32 = v16 + 2;
            if (a2) {
              BOOL v33 = v25 < v29;
            }
            else {
              BOOL v33 = v29 < v25;
            }
            BOOL v34 = v33;
          }
          else
          {
            BOOL v34 = v27 < v31;
            Swift::Int v32 = v16 + 2;
          }
          uint64_t v14 = v146;
          if (v32 < v143)
          {
            Swift::Int v35 = v32;
            while (1)
            {
              Swift::Int v32 = v35;
              BOOL v36 = *(void **)(v14 + 8 * v13);
              id v37 = *(id *)(v14 + 8 * v35);
              id v38 = v36;
              objc_msgSend(v37, sel_center);
              double v40 = v39;
              objc_msgSend(v38, sel_center);
              double v42 = v41;
              objc_msgSend(v37, sel_center);
              double v44 = v43;
              double v46 = v45;
              objc_msgSend(v38, sel_center);
              double v48 = v47;
              double v50 = v49;

              if (v40 != v42) {
                break;
              }
              if (a2)
              {
                BOOL v51 = v44 < v48;
                goto LABEL_32;
              }
              uint64_t v14 = v146;
              if (v34 == v48 >= v44) {
                goto LABEL_36;
              }
LABEL_27:
              Swift::Int v35 = v32 + 1;
              Swift::Int v13 = v32;
              if (v32 + 1 >= v143)
              {
                ++v32;
                if (!v34) {
                  goto LABEL_45;
                }
                goto LABEL_37;
              }
            }
            BOOL v51 = v46 < v50;
LABEL_32:
            int v52 = !v51;
            uint64_t v14 = v146;
            if (((v34 ^ v52) & 1) == 0) {
              goto LABEL_36;
            }
            goto LABEL_27;
          }
LABEL_36:
          if (!v34) {
            goto LABEL_45;
          }
LABEL_37:
          if (v32 < v16) {
            goto LABEL_154;
          }
          if (v16 < v32)
          {
            uint64_t v53 = (uint64_t *)(v140 + 8 * v32);
            Swift::Int v54 = v32;
            Swift::Int v55 = v16;
            uint64_t v56 = (uint64_t *)(v14 + 8 * v16);
            do
            {
              if (v55 != --v54)
              {
                if (!v14) {
                  goto LABEL_159;
                }
                uint64_t v57 = *v56;
                *uint64_t v56 = *v53;
                *uint64_t v53 = v57;
              }
              ++v55;
              --v53;
              ++v56;
            }
            while (v55 < v54);
          }
LABEL_45:
          Swift::Int v13 = v32;
          Swift::Int v6 = v143;
        }
        if (v13 < v6)
        {
          if (__OFSUB__(v13, v16)) {
            goto LABEL_152;
          }
          if (v13 - v16 < v141)
          {
            if (__OFADD__(v16, v141)) {
              goto LABEL_155;
            }
            if (v16 + v141 >= v6) {
              Swift::Int v58 = v6;
            }
            else {
              Swift::Int v58 = v16 + v141;
            }
            if (v58 < v16)
            {
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
              break;
            }
            if (v13 != v58)
            {
              Swift::Int v142 = v16;
              uint64_t v138 = v12;
              uint64_t v59 = v140 + 8 * v13;
              do
              {
                Swift::Int v60 = v58;
                uint64_t v61 = *(void **)(v14 + 8 * v13);
                Swift::Int v62 = v142;
                uint64_t v63 = v59;
                do
                {
                  uint64_t v64 = *(void **)v63;
                  id v65 = v61;
                  id v66 = v64;
                  objc_msgSend(v65, sel_center);
                  double v68 = v67;
                  objc_msgSend(v66, sel_center);
                  double v70 = v69;
                  objc_msgSend(v65, sel_center);
                  double v72 = v71;
                  double v74 = v73;
                  objc_msgSend(v66, sel_center);
                  double v76 = v75;
                  double v78 = v77;

                  if (v68 == v70)
                  {
                    if (a2)
                    {
                      uint64_t v14 = v146;
                      if (v72 >= v76) {
                        break;
                      }
                    }
                    else
                    {
                      uint64_t v14 = v146;
                      if (v76 >= v72) {
                        break;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v14 = v146;
                    if (v74 >= v78) {
                      break;
                    }
                  }
                  if (!v14) {
                    goto LABEL_157;
                  }
                  unint64_t v79 = *(void **)v63;
                  uint64_t v61 = *(void **)(v63 + 8);
                  *(void *)uint64_t v63 = v61;
                  *(void *)(v63 + 8) = v79;
                  v63 -= 8;
                  ++v62;
                }
                while (v13 != v62);
                ++v13;
                v59 += 8;
                Swift::Int v58 = v60;
              }
              while (v13 != v60);
              Swift::Int v13 = v60;
              uint64_t v12 = v138;
              Swift::Int v16 = v142;
            }
          }
        }
        if (v13 < v16) {
          goto LABEL_147;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
        }
        unint64_t v81 = *((void *)v12 + 2);
        unint64_t v80 = *((void *)v12 + 3);
        unint64_t v15 = v81 + 1;
        uint64_t v14 = v146;
        if (v81 >= v80 >> 1)
        {
          v130 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v80 > 1), v81 + 1, 1, v12);
          uint64_t v14 = v146;
          uint64_t v12 = v130;
        }
        *((void *)v12 + 2) = v15;
        uint64_t v82 = v12 + 32;
        uint64_t v83 = &v12[16 * v81 + 32];
        *(void *)uint64_t v83 = v16;
        *((void *)v83 + 1) = v13;
        if (v81)
        {
          while (1)
          {
            unint64_t v84 = v15 - 1;
            if (v15 >= 4)
            {
              uint64_t v89 = &v82[16 * v15];
              uint64_t v90 = *((void *)v89 - 8);
              uint64_t v91 = *((void *)v89 - 7);
              BOOL v95 = __OFSUB__(v91, v90);
              uint64_t v92 = v91 - v90;
              if (v95) {
                goto LABEL_136;
              }
              uint64_t v94 = *((void *)v89 - 6);
              uint64_t v93 = *((void *)v89 - 5);
              BOOL v95 = __OFSUB__(v93, v94);
              uint64_t v87 = v93 - v94;
              char v88 = v95;
              if (v95) {
                goto LABEL_137;
              }
              unint64_t v96 = v15 - 2;
              uint64_t v97 = &v82[16 * v15 - 32];
              uint64_t v99 = *(void *)v97;
              uint64_t v98 = *((void *)v97 + 1);
              BOOL v95 = __OFSUB__(v98, v99);
              uint64_t v100 = v98 - v99;
              if (v95) {
                goto LABEL_139;
              }
              BOOL v95 = __OFADD__(v87, v100);
              uint64_t v101 = v87 + v100;
              if (v95) {
                goto LABEL_142;
              }
              if (v101 >= v92)
              {
                uint64_t v119 = &v82[16 * v84];
                uint64_t v121 = *(void *)v119;
                uint64_t v120 = *((void *)v119 + 1);
                BOOL v95 = __OFSUB__(v120, v121);
                uint64_t v122 = v120 - v121;
                if (v95) {
                  goto LABEL_146;
                }
                BOOL v112 = v87 < v122;
                goto LABEL_106;
              }
            }
            else
            {
              if (v15 != 3)
              {
                uint64_t v113 = *((void *)v12 + 4);
                uint64_t v114 = *((void *)v12 + 5);
                BOOL v95 = __OFSUB__(v114, v113);
                uint64_t v106 = v114 - v113;
                char v107 = v95;
                goto LABEL_100;
              }
              uint64_t v86 = *((void *)v12 + 4);
              uint64_t v85 = *((void *)v12 + 5);
              BOOL v95 = __OFSUB__(v85, v86);
              uint64_t v87 = v85 - v86;
              char v88 = v95;
            }
            if (v88) {
              goto LABEL_138;
            }
            unint64_t v96 = v15 - 2;
            uint64_t v102 = &v82[16 * v15 - 32];
            uint64_t v104 = *(void *)v102;
            uint64_t v103 = *((void *)v102 + 1);
            BOOL v105 = __OFSUB__(v103, v104);
            uint64_t v106 = v103 - v104;
            char v107 = v105;
            if (v105) {
              goto LABEL_141;
            }
            uint64_t v108 = &v82[16 * v84];
            uint64_t v110 = *(void *)v108;
            uint64_t v109 = *((void *)v108 + 1);
            BOOL v95 = __OFSUB__(v109, v110);
            uint64_t v111 = v109 - v110;
            if (v95) {
              goto LABEL_144;
            }
            if (__OFADD__(v106, v111)) {
              goto LABEL_145;
            }
            if (v106 + v111 >= v87)
            {
              BOOL v112 = v87 < v111;
LABEL_106:
              if (v112) {
                unint64_t v84 = v96;
              }
              goto LABEL_108;
            }
LABEL_100:
            if (v107) {
              goto LABEL_140;
            }
            uint64_t v115 = &v82[16 * v84];
            uint64_t v117 = *(void *)v115;
            uint64_t v116 = *((void *)v115 + 1);
            BOOL v95 = __OFSUB__(v116, v117);
            uint64_t v118 = v116 - v117;
            if (v95) {
              goto LABEL_143;
            }
            if (v118 < v106) {
              goto LABEL_14;
            }
LABEL_108:
            v123 = v12;
            unint64_t v124 = v84 - 1;
            if (v84 - 1 >= v15)
            {
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
              goto LABEL_156;
            }
            if (!v14) {
              goto LABEL_158;
            }
            v125 = &v82[16 * v124];
            uint64_t v126 = *(void *)v125;
            uint64_t v127 = &v82[16 * v84];
            uint64_t v128 = *((void *)v127 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v14 + 8 * *(void *)v125), (id *)(v14 + 8 * *(void *)v127), v14 + 8 * v128, v144, v145 & 1);
            if (v2) {
              goto LABEL_130;
            }
            if (v128 < v126) {
              goto LABEL_133;
            }
            if (v84 > *((void *)v123 + 2)) {
              goto LABEL_134;
            }
            *(void *)v125 = v126;
            *(void *)&v82[16 * v124 + 8] = v128;
            unint64_t v129 = *((void *)v123 + 2);
            if (v84 >= v129) {
              goto LABEL_135;
            }
            uint64_t v12 = v123;
            unint64_t v15 = v129 - 1;
            memmove(&v82[16 * v84], v127 + 16, 16 * (v129 - 1 - v84));
            *((void *)v123 + 2) = v129 - 1;
            a2 = v145;
            uint64_t v14 = v146;
            if (v129 <= 2) {
              goto LABEL_14;
            }
          }
        }
        unint64_t v15 = 1;
LABEL_14:
        Swift::Int v6 = v143;
        if (v13 >= v143)
        {
          uint64_t v3 = v2;
          if (v15 < 2)
          {
LABEL_130:
            swift_bridgeObjectRelease();
            *(void *)((v147 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
            specialized Array._endMutation()();
            swift_bridgeObjectRelease();
            return;
          }
LABEL_118:
          uint64_t v131 = *v139;
          while (1)
          {
            unint64_t v132 = v15 - 2;
            if (v15 < 2) {
              goto LABEL_148;
            }
            if (!v131) {
              goto LABEL_160;
            }
            v133 = v12;
            uint64_t v134 = *(void *)&v12[16 * v132 + 32];
            uint64_t v135 = *(void *)&v12[16 * v15 + 24];
            specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v131 + 8 * v134), (id *)(v131 + 8 * *(void *)&v12[16 * v15 + 16]), v131 + 8 * v135, v144, v145 & 1);
            if (v3) {
              goto LABEL_130;
            }
            if (v135 < v134) {
              goto LABEL_149;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v133 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
            }
            if (v132 >= *((void *)v133 + 2)) {
              goto LABEL_150;
            }
            v136 = &v133[16 * v132 + 32];
            *(void *)v136 = v134;
            *((void *)v136 + 1) = v135;
            unint64_t v137 = *((void *)v133 + 2);
            if (v15 > v137) {
              goto LABEL_151;
            }
            memmove(&v133[16 * v15 + 16], &v133[16 * v15 + 32], 16 * (v137 - v15));
            *((void *)v133 + 2) = v137 - 1;
            unint64_t v15 = v137 - 1;
            uint64_t v12 = v133;
            if (v137 <= 2) {
              goto LABEL_130;
            }
          }
        }
      }
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v6 < 0) {
    goto LABEL_153;
  }
  if (v6) {
    specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v6, 1, a1, a2 & 1);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  Swift::Int v16;
  void *v17;
  id v18;
  id v19;
  double MinY;
  double v21;
  uint64_t v22;
  double MinX;
  double v27;
  Swift::Int v28;
  BOOL v29;
  double v30;
  double v31;
  int v32;
  Swift::Int v33;
  void *v34;
  id v35;
  id v36;
  double v37;
  double v38;
  uint64_t v39;
  double v43;
  double v44;
  uint64_t *v45;
  Swift::Int v46;
  Swift::Int v47;
  uint64_t *v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  Swift::Int v52;
  void *v53;
  Swift::Int v54;
  uint64_t v55;
  void *v56;
  id v57;
  id v58;
  double v59;
  double v60;
  uint64_t v61;
  double v65;
  double v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  char *v126;
  uint64_t *v127;
  uint64_t v128;
  Swift::Int v129;
  BOOL v130;
  Swift::Int v131;
  Swift::Int v132;
  void **v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;

  uint64_t v3 = v2;
  Swift::Int v6 = a1[1];
  Swift::Int v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 < v6)
  {
    if (v6 >= 0) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v6 + 1;
    }
    if (v6 >= -1)
    {
      Swift::Int v9 = v7;
      uint64_t v134 = a2;
      uint64_t v127 = a1;
      if (v6 < 2)
      {
        uint64_t v12 = (char *)MEMORY[0x263F8EE78];
        v136 = MEMORY[0x263F8EE78];
        v133 = (void **)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
        if (v6 != 1)
        {
          unint64_t v15 = *(void *)(MEMORY[0x263F8EE78] + 16);
          if (v15 < 2) {
            goto LABEL_127;
          }
          goto LABEL_115;
        }
      }
      else
      {
        uint64_t v10 = v8 >> 1;
        type metadata accessor for AnyCanvasElementView();
        uint64_t v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v10;
        v133 = (void **)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
        v136 = v11;
      }
      unint64_t v129 = v9;
      Swift::Int v13 = 0;
      uint64_t v14 = *a1;
      uint64_t v128 = *a1 - 8;
      uint64_t v12 = (char *)MEMORY[0x263F8EE78];
      unint64_t v132 = v6;
      uint64_t v135 = *a1;
LABEL_15:
      Swift::Int v16 = v13++;
      if (v13 < v6)
      {
        uint64_t v17 = *(void **)(v14 + 8 * v16);
        id v18 = *(id *)(v14 + 8 * v13);
        id v19 = v17;
        objc_msgSend(v18, sel_frame);
        CGFloat MinY = CGRectGetMinY(v137);
        objc_msgSend(v19, sel_frame);
        double v21 = CGRectGetMinY(v138);
        objc_msgSend(v18, sel_frame);
        if (MinY == v21)
        {
          CGFloat MinX = CGRectGetMinX(*(CGRect *)&v22);
          objc_msgSend(v19, sel_frame);
          double v27 = CGRectGetMinX(v139);

          double v28 = v16 + 2;
          if (a2) {
            double v29 = MinX < v27;
          }
          else {
            double v29 = v27 < MinX;
          }
          Swift::Int v32 = v29;
          v130 = v32;
        }
        else
        {
          double v30 = CGRectGetMinY(*(CGRect *)&v22);
          objc_msgSend(v19, sel_frame);
          double v31 = CGRectGetMinY(v140);

          v130 = v30 < v31;
          double v28 = v16 + 2;
        }
        uint64_t v14 = v135;
        if (v28 < v132)
        {
          BOOL v33 = v28;
          while (1)
          {
            double v28 = v33;
            BOOL v34 = *(void **)(v14 + 8 * v13);
            Swift::Int v35 = *(id *)(v14 + 8 * v33);
            BOOL v36 = v34;
            objc_msgSend(v35, sel_frame);
            id v37 = CGRectGetMinY(v141);
            objc_msgSend(v36, sel_frame);
            id v38 = CGRectGetMinY(v142);
            objc_msgSend(v35, sel_frame);
            if (v37 != v38) {
              break;
            }
            double v43 = CGRectGetMinX(*(CGRect *)&v39);
            objc_msgSend(v36, sel_frame);
            double v44 = CGRectGetMinX(v143);

            if (a2) {
              goto LABEL_33;
            }
            uint64_t v14 = v135;
            if (v130 == v44 >= v43) {
              goto LABEL_34;
            }
LABEL_28:
            BOOL v33 = v28 + 1;
            Swift::Int v13 = v28;
            if (v28 + 1 >= v132)
            {
              ++v28;
              if (!v130) {
                goto LABEL_43;
              }
              goto LABEL_35;
            }
          }
          double v43 = CGRectGetMinY(*(CGRect *)&v39);
          objc_msgSend(v36, sel_frame);
          double v44 = CGRectGetMinY(v144);

LABEL_33:
          uint64_t v14 = v135;
          if (((v130 ^ (v43 >= v44)) & 1) == 0) {
            goto LABEL_34;
          }
          goto LABEL_28;
        }
LABEL_34:
        if (!v130) {
          goto LABEL_43;
        }
LABEL_35:
        if (v28 < v16) {
          goto LABEL_151;
        }
        if (v16 < v28)
        {
          double v45 = (uint64_t *)(v128 + 8 * v28);
          double v46 = v28;
          double v47 = v16;
          double v48 = (uint64_t *)(v14 + 8 * v16);
          do
          {
            if (v47 != --v46)
            {
              if (!v14) {
                goto LABEL_156;
              }
              double v49 = *v48;
              *double v48 = *v45;
              *double v45 = v49;
            }
            ++v47;
            --v45;
            ++v48;
          }
          while (v47 < v46);
        }
LABEL_43:
        Swift::Int v13 = v28;
        Swift::Int v6 = v132;
      }
      if (v13 >= v6) {
        goto LABEL_66;
      }
      if (__OFSUB__(v13, v16)) {
        goto LABEL_149;
      }
      if (v13 - v16 >= v129) {
        goto LABEL_66;
      }
      if (__OFADD__(v16, v129)) {
        goto LABEL_152;
      }
      if (v16 + v129 >= v6) {
        double v50 = v6;
      }
      else {
        double v50 = v16 + v129;
      }
      if (v50 >= v16)
      {
        if (v13 == v50) {
          goto LABEL_66;
        }
        uint64_t v131 = v16;
        uint64_t v126 = v12;
        BOOL v51 = v128 + 8 * v13;
LABEL_55:
        int v52 = v50;
        uint64_t v53 = *(void **)(v14 + 8 * v13);
        Swift::Int v54 = v131;
        Swift::Int v55 = v51;
        while (1)
        {
          uint64_t v56 = *(void **)v55;
          uint64_t v57 = v53;
          Swift::Int v58 = v56;
          objc_msgSend(v57, sel_frame);
          uint64_t v59 = CGRectGetMinY(v145);
          objc_msgSend(v58, sel_frame);
          Swift::Int v60 = CGRectGetMinY(v146);
          objc_msgSend(v57, sel_frame);
          if (v59 != v60) {
            break;
          }
          id v65 = CGRectGetMinX(*(CGRect *)&v61);
          objc_msgSend(v58, sel_frame);
          id v66 = CGRectGetMinX(v147);

          if (a2) {
            goto LABEL_61;
          }
          uint64_t v14 = v135;
          if (v66 >= v65) {
            goto LABEL_54;
          }
LABEL_62:
          if (!v14) {
            goto LABEL_154;
          }
          double v67 = *(void **)v55;
          uint64_t v53 = *(void **)(v55 + 8);
          *(void *)Swift::Int v55 = v53;
          *(void *)(v55 + 8) = v67;
          v55 -= 8;
          if (v13 == ++v54)
          {
LABEL_54:
            ++v13;
            v51 += 8;
            double v50 = v52;
            if (v13 != v52) {
              goto LABEL_55;
            }
            Swift::Int v13 = v52;
            uint64_t v12 = v126;
            Swift::Int v16 = v131;
LABEL_66:
            if (v13 < v16) {
              goto LABEL_144;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
            }
            double v69 = *((void *)v12 + 2);
            double v68 = *((void *)v12 + 3);
            unint64_t v15 = v69 + 1;
            uint64_t v14 = v135;
            if (v69 >= v68 >> 1)
            {
              uint64_t v118 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v12);
              uint64_t v14 = v135;
              uint64_t v12 = v118;
            }
            *((void *)v12 + 2) = v15;
            double v70 = v12 + 32;
            double v71 = &v12[16 * v69 + 32];
            *(void *)double v71 = v16;
            *((void *)v71 + 1) = v13;
            if (v69)
            {
              while (2)
              {
                double v72 = v15 - 1;
                if (v15 >= 4)
                {
                  double v77 = &v70[16 * v15];
                  double v78 = *((void *)v77 - 8);
                  unint64_t v79 = *((void *)v77 - 7);
                  uint64_t v83 = __OFSUB__(v79, v78);
                  unint64_t v80 = v79 - v78;
                  if (v83) {
                    goto LABEL_133;
                  }
                  uint64_t v82 = *((void *)v77 - 6);
                  unint64_t v81 = *((void *)v77 - 5);
                  uint64_t v83 = __OFSUB__(v81, v82);
                  double v75 = v81 - v82;
                  double v76 = v83;
                  if (v83) {
                    goto LABEL_134;
                  }
                  unint64_t v84 = v15 - 2;
                  uint64_t v85 = &v70[16 * v15 - 32];
                  uint64_t v87 = *(void *)v85;
                  uint64_t v86 = *((void *)v85 + 1);
                  uint64_t v83 = __OFSUB__(v86, v87);
                  char v88 = v86 - v87;
                  if (v83) {
                    goto LABEL_136;
                  }
                  uint64_t v83 = __OFADD__(v75, v88);
                  uint64_t v89 = v75 + v88;
                  if (v83) {
                    goto LABEL_139;
                  }
                  if (v89 >= v80)
                  {
                    char v107 = &v70[16 * v72];
                    uint64_t v109 = *(void *)v107;
                    uint64_t v108 = *((void *)v107 + 1);
                    uint64_t v83 = __OFSUB__(v108, v109);
                    uint64_t v110 = v108 - v109;
                    if (v83) {
                      goto LABEL_143;
                    }
                    uint64_t v100 = v75 < v110;
                  }
                  else
                  {
LABEL_85:
                    if (v76) {
                      goto LABEL_135;
                    }
                    unint64_t v84 = v15 - 2;
                    uint64_t v90 = &v70[16 * v15 - 32];
                    uint64_t v92 = *(void *)v90;
                    uint64_t v91 = *((void *)v90 + 1);
                    uint64_t v93 = __OFSUB__(v91, v92);
                    uint64_t v94 = v91 - v92;
                    BOOL v95 = v93;
                    if (v93) {
                      goto LABEL_138;
                    }
                    unint64_t v96 = &v70[16 * v72];
                    uint64_t v98 = *(void *)v96;
                    uint64_t v97 = *((void *)v96 + 1);
                    uint64_t v83 = __OFSUB__(v97, v98);
                    uint64_t v99 = v97 - v98;
                    if (v83) {
                      goto LABEL_141;
                    }
                    if (__OFADD__(v94, v99)) {
                      goto LABEL_142;
                    }
                    if (v94 + v99 < v75) {
                      goto LABEL_97;
                    }
                    uint64_t v100 = v75 < v99;
                  }
                  if (v100) {
                    double v72 = v84;
                  }
                }
                else
                {
                  if (v15 == 3)
                  {
                    double v74 = *((void *)v12 + 4);
                    double v73 = *((void *)v12 + 5);
                    uint64_t v83 = __OFSUB__(v73, v74);
                    double v75 = v73 - v74;
                    double v76 = v83;
                    goto LABEL_85;
                  }
                  uint64_t v101 = *((void *)v12 + 4);
                  uint64_t v102 = *((void *)v12 + 5);
                  uint64_t v83 = __OFSUB__(v102, v101);
                  uint64_t v94 = v102 - v101;
                  BOOL v95 = v83;
LABEL_97:
                  if (v95) {
                    goto LABEL_137;
                  }
                  uint64_t v103 = &v70[16 * v72];
                  BOOL v105 = *(void *)v103;
                  uint64_t v104 = *((void *)v103 + 1);
                  uint64_t v83 = __OFSUB__(v104, v105);
                  uint64_t v106 = v104 - v105;
                  if (v83) {
                    goto LABEL_140;
                  }
                  if (v106 < v94) {
                    goto LABEL_14;
                  }
                }
                uint64_t v111 = v12;
                BOOL v112 = v72 - 1;
                if (v72 - 1 >= v15)
                {
                  __break(1u);
LABEL_130:
                  __break(1u);
LABEL_131:
                  __break(1u);
LABEL_132:
                  __break(1u);
LABEL_133:
                  __break(1u);
LABEL_134:
                  __break(1u);
LABEL_135:
                  __break(1u);
LABEL_136:
                  __break(1u);
LABEL_137:
                  __break(1u);
LABEL_138:
                  __break(1u);
LABEL_139:
                  __break(1u);
LABEL_140:
                  __break(1u);
LABEL_141:
                  __break(1u);
LABEL_142:
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
                  goto LABEL_153;
                }
                if (!v14) {
                  goto LABEL_155;
                }
                uint64_t v113 = &v70[16 * v112];
                uint64_t v114 = *(void *)v113;
                uint64_t v115 = &v70[16 * v72];
                uint64_t v116 = *((void *)v115 + 1);
                specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v14 + 8 * *(void *)v113), (id *)(v14 + 8 * *(void *)v115), v14 + 8 * v116, v133, v134 & 1);
                if (v2) {
                  goto LABEL_127;
                }
                if (v116 < v114) {
                  goto LABEL_130;
                }
                if (v72 > *((void *)v111 + 2)) {
                  goto LABEL_131;
                }
                *(void *)uint64_t v113 = v114;
                *(void *)&v70[16 * v112 + 8] = v116;
                uint64_t v117 = *((void *)v111 + 2);
                if (v72 >= v117) {
                  goto LABEL_132;
                }
                uint64_t v12 = v111;
                unint64_t v15 = v117 - 1;
                memmove(&v70[16 * v72], v115 + 16, 16 * (v117 - 1 - v72));
                *((void *)v111 + 2) = v117 - 1;
                a2 = v134;
                uint64_t v14 = v135;
                if (v117 <= 2) {
                  goto LABEL_14;
                }
                continue;
              }
            }
            unint64_t v15 = 1;
LABEL_14:
            Swift::Int v6 = v132;
            if (v13 >= v132)
            {
              uint64_t v3 = v2;
              if (v15 < 2)
              {
LABEL_127:
                swift_bridgeObjectRelease();
                *(void *)((v136 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
                specialized Array._endMutation()();
                swift_bridgeObjectRelease();
                return;
              }
LABEL_115:
              uint64_t v119 = *v127;
              while (1)
              {
                uint64_t v120 = v15 - 2;
                if (v15 < 2) {
                  goto LABEL_145;
                }
                if (!v119) {
                  goto LABEL_157;
                }
                uint64_t v121 = v12;
                uint64_t v122 = *(void *)&v12[16 * v120 + 32];
                v123 = *(void *)&v12[16 * v15 + 24];
                specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v119 + 8 * v122), (id *)(v119 + 8 * *(void *)&v12[16 * v15 + 16]), v119 + 8 * v123, v133, v134 & 1);
                if (v3) {
                  goto LABEL_127;
                }
                if (v123 < v122) {
                  goto LABEL_146;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
                }
                if (v120 >= *((void *)v121 + 2)) {
                  goto LABEL_147;
                }
                unint64_t v124 = &v121[16 * v120 + 32];
                *(void *)unint64_t v124 = v122;
                *((void *)v124 + 1) = v123;
                v125 = *((void *)v121 + 2);
                if (v15 > v125) {
                  goto LABEL_148;
                }
                memmove(&v121[16 * v15 + 16], &v121[16 * v15 + 32], 16 * (v125 - v15));
                *((void *)v121 + 2) = v125 - 1;
                unint64_t v15 = v125 - 1;
                uint64_t v12 = v121;
                if (v125 <= 2) {
                  goto LABEL_127;
                }
              }
            }
            goto LABEL_15;
          }
        }
        id v65 = CGRectGetMinY(*(CGRect *)&v61);
        objc_msgSend(v58, sel_frame);
        id v66 = CGRectGetMinY(v148);

LABEL_61:
        uint64_t v14 = v135;
        if (v65 >= v66) {
          goto LABEL_54;
        }
        goto LABEL_62;
      }
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v6 < 0) {
    goto LABEL_150;
  }
  if (v6) {
    specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v6, 1, a1, a2 & 1);
  }
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 8 * a3 - 8;
LABEL_5:
    Swift::Int v9 = *(void **)(v7 + 8 * v6);
    uint64_t v10 = a1;
    uint64_t v11 = v8;
    while (1)
    {
      uint64_t v12 = *(void **)v11;
      id v13 = v9;
      id v14 = v12;
      objc_msgSend(v13, sel_center);
      double v16 = v15;
      objc_msgSend(v14, sel_center);
      double v18 = v17;
      objc_msgSend(v13, sel_center);
      double v20 = v19;
      double v22 = v21;
      objc_msgSend(v14, sel_center);
      double v24 = v23;
      double v26 = v25;

      if (v16 == v18)
      {
        if (a5)
        {
          if (v20 >= v24) {
            goto LABEL_4;
          }
        }
        else if (v24 >= v20)
        {
          goto LABEL_4;
        }
      }
      else if (v22 >= v26)
      {
        goto LABEL_4;
      }
      if (!v7) {
        break;
      }
      double v27 = *(void **)v11;
      Swift::Int v9 = *(void **)(v11 + 8);
      *(void *)uint64_t v11 = v9;
      *(void *)(v11 + 8) = v27;
      v11 -= 8;
      if (v6 == ++v10)
      {
LABEL_4:
        ++v6;
        v8 += 8;
        if (v6 == a2) {
          return;
        }
        goto LABEL_5;
      }
    }
    __break(1u);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  double MinY;
  double v16;
  uint64_t v17;
  double MinX;
  double v22;
  void *v23;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  if (a3 != a2)
  {
    uint64_t v6 = a3;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 8 * a3 - 8;
LABEL_5:
    Swift::Int v9 = *(void **)(v7 + 8 * v6);
    uint64_t v10 = a1;
    uint64_t v11 = v8;
    while (1)
    {
      uint64_t v12 = *(void **)v11;
      id v13 = v9;
      id v14 = v12;
      objc_msgSend(v13, sel_frame);
      CGFloat MinY = CGRectGetMinY(v26);
      objc_msgSend(v14, sel_frame);
      double v16 = CGRectGetMinY(v27);
      objc_msgSend(v13, sel_frame);
      if (MinY == v16)
      {
        CGFloat MinX = CGRectGetMinX(*(CGRect *)&v17);
        objc_msgSend(v14, sel_frame);
        double v22 = CGRectGetMinX(v28);

        if ((a5 & 1) == 0)
        {
          if (v22 >= MinX) {
            goto LABEL_4;
          }
          goto LABEL_12;
        }
      }
      else
      {
        CGFloat MinX = CGRectGetMinY(*(CGRect *)&v17);
        objc_msgSend(v14, sel_frame);
        double v22 = CGRectGetMinY(v29);
      }
      if (MinX >= v22) {
        goto LABEL_4;
      }
LABEL_12:
      if (!v7)
      {
        __break(1u);
        return;
      }
      double v23 = *(void **)v11;
      Swift::Int v9 = *(void **)(v11 + 8);
      *(void *)uint64_t v11 = v9;
      *(void *)(v11 + 8) = v23;
      v11 -= 8;
      if (v6 == ++v10)
      {
LABEL_4:
        ++v6;
        v8 += 8;
        if (v6 == a2) {
          return;
        }
        goto LABEL_5;
      }
    }
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, id *a2, unint64_t a3, void **a4, char a5)
{
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  Swift::Int v58 = __src;
  uint64_t v57 = a4;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7) {
      goto LABEL_54;
    }
    if (a4 != a2 || &a2[v13] <= a4) {
      memmove(a4, a2, 8 * v13);
    }
    Swift::Int v32 = &a4[v13];
    uint64_t v56 = (char *)v32;
    Swift::Int v58 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_53:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v58, &v57, &v56);
      return 1;
    }
    BOOL v33 = (id *)(a3 - 8);
    BOOL v34 = v6;
    uint64_t v53 = v7;
    while (1)
    {
      Swift::Int v35 = v33 + 1;
      BOOL v36 = *--v34;
      id v37 = *(v32 - 1);
      id v38 = v36;
      objc_msgSend(v37, sel_center);
      double v40 = v39;
      objc_msgSend(v38, sel_center);
      double v42 = v41;
      objc_msgSend(v37, sel_center);
      double v44 = v43;
      double v46 = v45;
      objc_msgSend(v38, sel_center);
      double v48 = v47;
      double v50 = v49;

      if (v40 == v42)
      {
        if (a5)
        {
          unint64_t v51 = (unint64_t)v53;
          if (v44 >= v48) {
            goto LABEL_47;
          }
        }
        else
        {
          unint64_t v51 = (unint64_t)v53;
          if (v48 >= v44)
          {
LABEL_47:
            uint64_t v56 = (char *)(v32 - 1);
            if (v35 < v32 || v33 >= v32 || v35 != v32) {
              *BOOL v33 = *(v32 - 1);
            }
            BOOL v34 = v6;
            --v32;
            if ((unint64_t)v6 <= v51) {
              goto LABEL_53;
            }
            goto LABEL_52;
          }
        }
      }
      else
      {
        unint64_t v51 = (unint64_t)v53;
        if (v46 >= v50) {
          goto LABEL_47;
        }
      }
      if (v35 != v6 || v33 >= v6) {
        *BOOL v33 = *v34;
      }
      Swift::Int v58 = v34;
      if ((unint64_t)v34 <= v51) {
        goto LABEL_53;
      }
LABEL_52:
      --v33;
      uint64_t v6 = v34;
      if (v32 <= a4) {
        goto LABEL_53;
      }
    }
  }
  if (v8 >= -7)
  {
    if (a4 != __src || &__src[v10] <= a4) {
      memmove(a4, __src, 8 * v10);
    }
    id v14 = &a4[v10];
    uint64_t v56 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      double v15 = a4;
      while (1)
      {
        double v16 = *v15;
        id v17 = *v6;
        id v18 = v16;
        objc_msgSend(v17, sel_center);
        double v20 = v19;
        objc_msgSend(v18, sel_center);
        double v22 = v21;
        objc_msgSend(v17, sel_center);
        double v24 = v23;
        double v26 = v25;
        objc_msgSend(v18, sel_center);
        double v28 = v27;
        double v30 = v29;

        if (v20 == v22)
        {
          if (a5)
          {
            if (v24 < v28) {
              goto LABEL_18;
            }
          }
          else if (v28 < v24)
          {
LABEL_18:
            double v31 = v6 + 1;
            if (v7 < v6 || v7 >= v31 || v7 != v6) {
              *uint64_t v7 = *v6;
            }
            goto LABEL_26;
          }
        }
        else if (v26 < v30)
        {
          goto LABEL_18;
        }
        if (v7 != v15) {
          *uint64_t v7 = *v15;
        }
        uint64_t v57 = ++v15;
        double v31 = v6;
LABEL_26:
        ++v7;
        if (v15 < v14)
        {
          uint64_t v6 = v31;
          if ((unint64_t)v31 < a3) {
            continue;
          }
        }
        Swift::Int v58 = v7;
        goto LABEL_53;
      }
    }
    goto LABEL_53;
  }
LABEL_54:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  id *v6;
  void **v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void *v16;
  id v17;
  id v18;
  double v19;
  double v20;
  uint64_t v21;
  double v25;
  double v26;
  id *v27;
  id *v28;
  id *v29;
  id *v30;
  id *v31;
  void *v32;
  id v33;
  id v34;
  double MinY;
  double v36;
  uint64_t v37;
  double MinX;
  double v42;
  unint64_t v43;
  uint64_t result;
  void **v45;
  char *v48;
  void **v49;
  id *v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;

  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  double v50 = __src;
  double v49 = a4;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7) {
      goto LABEL_52;
    }
    if (a4 != a2 || &a2[v13] <= a4) {
      memmove(a4, a2, 8 * v13);
    }
    double v28 = &a4[v13];
    double v48 = (char *)v28;
    double v50 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_51:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v50, &v49, &v48);
      return 1;
    }
    double v29 = (id *)(a3 - 8);
    double v30 = v6;
    double v45 = v7;
    while (1)
    {
      double v31 = v29 + 1;
      Swift::Int v32 = *--v30;
      BOOL v33 = *(v28 - 1);
      BOOL v34 = v32;
      objc_msgSend(v33, sel_frame);
      CGFloat MinY = CGRectGetMinY(v55);
      objc_msgSend(v34, sel_frame);
      BOOL v36 = CGRectGetMinY(v56);
      objc_msgSend(v33, sel_frame);
      if (MinY == v36)
      {
        CGFloat MinX = CGRectGetMinX(*(CGRect *)&v37);
        objc_msgSend(v34, sel_frame);
        double v42 = CGRectGetMinX(v57);

        if ((a5 & 1) == 0)
        {
          double v43 = (unint64_t)v45;
          if (v42 >= MinX) {
            goto LABEL_38;
          }
          goto LABEL_46;
        }
      }
      else
      {
        CGFloat MinX = CGRectGetMinY(*(CGRect *)&v37);
        objc_msgSend(v34, sel_frame);
        double v42 = CGRectGetMinY(v58);
      }
      double v43 = (unint64_t)v45;
      if (MinX >= v42)
      {
LABEL_38:
        double v48 = (char *)(v28 - 1);
        if (v31 < v28 || v29 >= v28 || v31 != v28) {
          *double v29 = *(v28 - 1);
        }
        double v30 = v6;
        --v28;
        if ((unint64_t)v6 <= v43) {
          goto LABEL_51;
        }
        goto LABEL_50;
      }
LABEL_46:
      if (v31 != v6 || v29 >= v6) {
        *double v29 = *v30;
      }
      double v50 = v30;
      if ((unint64_t)v30 <= v43) {
        goto LABEL_51;
      }
LABEL_50:
      --v29;
      uint64_t v6 = v30;
      if (v28 <= a4) {
        goto LABEL_51;
      }
    }
  }
  if (v8 >= -7)
  {
    if (a4 != __src || &__src[v10] <= a4) {
      memmove(a4, __src, 8 * v10);
    }
    id v14 = &a4[v10];
    double v48 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      double v15 = a4;
      while (1)
      {
        double v16 = *v15;
        id v17 = *v6;
        id v18 = v16;
        objc_msgSend(v17, sel_frame);
        double v19 = CGRectGetMinY(v51);
        objc_msgSend(v18, sel_frame);
        double v20 = CGRectGetMinY(v52);
        objc_msgSend(v17, sel_frame);
        if (v19 == v20)
        {
          double v25 = CGRectGetMinX(*(CGRect *)&v21);
          objc_msgSend(v18, sel_frame);
          double v26 = CGRectGetMinX(v53);

          if ((a5 & 1) == 0)
          {
            if (v26 < v25) {
              goto LABEL_21;
            }
            goto LABEL_16;
          }
        }
        else
        {
          double v25 = CGRectGetMinY(*(CGRect *)&v21);
          objc_msgSend(v18, sel_frame);
          double v26 = CGRectGetMinY(v54);
        }
        if (v25 < v26)
        {
LABEL_21:
          double v27 = v6 + 1;
          if (v7 < v6 || v7 >= v27 || v7 != v6) {
            *uint64_t v7 = *v6;
          }
          goto LABEL_25;
        }
LABEL_16:
        if (v7 != v15) {
          *uint64_t v7 = *v15;
        }
        double v49 = ++v15;
        double v27 = v6;
LABEL_25:
        ++v7;
        if (v15 < v14)
        {
          uint64_t v6 = v27;
          if ((unint64_t)v27 < a3) {
            continue;
          }
        }
        double v50 = v7;
        goto LABEL_51;
      }
    }
    goto LABEL_51;
  }
LABEL_52:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #3 in AnySubscriber.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  v22[1] = a3;
  uint64_t v5 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v13);
  double v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x270FA5388](v16);
  id v18 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v18((char *)v22 - v19, a1, a2, v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomReflectable);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v23, (uint64_t)v25);
    __swift_project_boxed_opaque_existential_1(v25, v25[3]);
    dispatch thunk of CustomReflectable.customMirror.getter();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  else
  {
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for CustomReflectable?);
    ((void (*)(char *, uint64_t, uint64_t))v18)(v15, a1, a2);
    uint64_t v21 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v11, 1, 1, v21);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F8E830], v5);
    return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  }
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x21054E050](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    uint64_t *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t (*v3)();
  id v4;

  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = (id)MEMORY[0x21054E050](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x21054E050](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    uint64_t *v3 = v4;
    return destroy for ReflowSpacingAdjustment;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x21054E050](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_unknownObjectRetain();
LABEL_5:
    uint64_t *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_unknownObjectRelease();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5TQ0_;
  return v5(v2 + 32);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  unsigned char *v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of FindResult(&v12, v10 + 40 * a1 + 32);
}

uint64_t specialized Canvas.paperView.getter()
{
  return *(void *)(v0 + direct field offset for Canvas.paperView);
}

uint64_t partial apply for closure #1 in Canvas.editingContainerElementId.setter()
{
  return static CRKeyPath.== infix(_:_:)() & 1;
}

uint64_t sub_20C78C28C()
{
  swift_unknownObjectRelease();

  outlined consume of MagicGenerativePlaygroundContext(*(void **)(v0 + 72), *(id *)(v0 + 80), *(unsigned char *)(v0 + 88));
  return MEMORY[0x270FA0238](v0, 89, 7);
}

uint64_t partial apply for closure #1 in Canvas.initiateMagicGenerativePlayground(context:in:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  double v7 = *(double *)(v1 + 40);
  double v8 = *(double *)(v1 + 48);
  double v9 = *(double *)(v1 + 56);
  double v10 = *(double *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  uint64_t v12 = *(void *)(v1 + 80);
  char v13 = *(unsigned char *)(v1 + 88);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  void *v14 = v2;
  v14[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in Canvas.initiateMagicGenerativePlayground(context:in:)(v7, v8, v9, v10, a1, v4, v5, v6, v11, v12, v13);
}

uint64_t specialized Canvas.xpcMulticast.getter()
{
  uint64_t v1 = v0 + direct field offset for Canvas.xpcMulticast;
  swift_beginAccess();
  return *(void *)v1;
}

void specialized Canvas.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:)(void *a1, ValueMetadata *a2, unsigned __int8 *a3, int a4, int a5, double a6, double a7, double a8, double a9)
{
  LODWORD(v91) = a5;
  int v92 = a4;
  uint64_t v93 = a2;
  id v90 = a1;
  double v15 = (void *)(*MEMORY[0x263F8EED0] & *v9);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v89 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)((char *)v9 + direct field offset for Canvas.multipeerConnection) = 0;
  *(void *)((char *)v9 + direct field offset for Canvas.multipeerCanvasStateConnection) = 0;
  *(void *)((char *)v9 + direct field offset for Canvas.removeOldEraserStrokesTimer) = 0;
  double v22 = (void *)((char *)v9 + direct field offset for Canvas.liveStreamMessenger);
  *double v22 = 0;
  v22[1] = 0;
  *(void *)((char *)v9 + direct field offset for Canvas.childViewControllerCancellable) = 0;
  *(void *)((char *)v9 + direct field offset for Canvas.xpcMulticast) = 0;
  int v94 = *a3;
  double v23 = (void *)((char *)v9 + direct field offset for Canvas._editingView);
  *double v23 = 0;
  v23[1] = 0;
  *(void *)((char *)v9 + direct field offset for Canvas._canvasElementController) = 0;
  uint64_t v24 = direct field offset for Canvas.delayedPreviewProviders;
  double v25 = v9;
  uint64_t v26 = MEMORY[0x263F8EE78];
  *(void *)((char *)v9 + v24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v27 = direct field offset for Canvas.dropCompletions;
  *(void *)((char *)v25 + v27) = specialized Dictionary.init(dictionaryLiteral:)(v26);
  *((unsigned char *)v25 + direct field offset for Canvas.dropSessionType) = 3;
  *(void *)((char *)v25 + direct field offset for Canvas.scribbleDelegate) = 0;
  *(void *)((char *)v25 + direct field offset for Canvas.scribbleInteraction) = 0;
  *(void *)((char *)v25 + direct field offset for Canvas.indirectScribbleInteraction) = 0;
  *(void *)((char *)v25 + direct field offset for Canvas.pointerDelegate) = 0;
  *((unsigned char *)v25 + direct field offset for Canvas.dropInteractionSessionIsActive) = 0;
  *(void *)((char *)v25 + direct field offset for Canvas.dropInteraction) = 0;
  *(void *)((char *)v25 + direct field offset for Canvas.dropDelegate) = 0;
  *(void *)((char *)v25 + direct field offset for Canvas.editMenuInteraction) = 0;
  *(void *)((char *)v25 + direct field offset for Canvas.editMenuInteractionDelegate) = 0;
  double v28 = (char *)v25 + direct field offset for Canvas.visibleBoundsOverride;
  *(_OWORD *)double v28 = 0u;
  *((_OWORD *)v28 + 1) = 0u;
  v28[32] = 1;
  uint64_t v29 = direct field offset for Canvas.subscriptions;
  uint64_t v30 = v15[251];
  uint64_t v31 = v15[252];
  Swift::Int v32 = (ValueMetadata *)v15[253];
  v95[0] = v30;
  v95[1] = v30;
  v95[2] = v31;
  unint64_t v96 = v32;
  unint64_t v97 = v31;
  type metadata accessor for Canvas.PaperViewCanvasSubscription();
  *(void *)((char *)v25 + v29) = Array.init()();
  BOOL v33 = v32;
  *((unsigned char *)v25 + direct field offset for Canvas.isInUndoableGroup) = 0;
  *((unsigned char *)v25 + direct field offset for Canvas.isUndoableGroupNewChange) = 0;
  *(void *)((char *)v25 + direct field offset for Canvas.eraserCheckingIndex) = 0;
  uint64_t v34 = direct field offset for Canvas.dropTargets;
  *(void *)((char *)v25 + v34) = specialized Dictionary.init(dictionaryLiteral:)(v26);
  uint64_t v35 = direct field offset for Canvas.stickerDropPreviewInfoMap;
  *(void *)((char *)v25 + v35) = specialized Dictionary.init(dictionaryLiteral:)(v26);
  uint64_t v36 = *(void *)(v31 + 16);
  uint64_t v37 = type metadata accessor for Capsule();
  id v38 = v93;
  Capsule<>.sharedCanvasElement.getter(v37, (uint64_t)v33->Description, (uint64_t)v21);
  SharedTagged_9<>.layout()(v95);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  double v39 = v96;
  unint64_t v40 = v97;
  __swift_project_boxed_opaque_existential_1(v95, (uint64_t)v96);
  if (!(*(uint64_t (**)(ValueMetadata *, void, void, uint64_t, uint64_t, ValueMetadata *, unint64_t))(v40 + 8))(v38, 0, 0, v30, v36, v39, v40))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  type metadata accessor for ContainerCanvasElementView();
  *(void *)((char *)v25 + direct field offset for Canvas.paperView) = swift_dynamicCastClassUnconditional();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
  LOBYTE(v95[0]) = v94;
  id v41 = v90;
  double v42 = (char *)specialized AnyCanvas.init(context:frame:editingMode:transparentBackground:)(v41, (unsigned __int8 *)v95, v91 & 1, a6, a7, a8, a9);
  id v91 = v41;

  uint64_t v43 = direct field offset for Canvas.paperView;
  double v44 = *(void **)&v42[direct field offset for Canvas.paperView];
  double v45 = v42;
  id v46 = v44;
  specialized ContainerCanvasElementView.canvas.setter();

  objc_msgSend(v45, sel_addSubview_, *(void *)&v42[v43]);
  double v47 = &off_2640D6000;
  uint64_t v93 = v33;
  if (v92)
  {
    type metadata accessor for CanvasDropDelegate();
    double v48 = v45;
    id v49 = specialized CanvasDropDelegate.__allocating_init(canvas:)();

    double v50 = *(void **)&v48[direct field offset for Canvas.dropDelegate];
    *(void *)&v48[direct field offset for Canvas.dropDelegate] = v49;
    id v51 = v49;

    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDropInteraction);
    ObjCClassFromMetadatCGFloat a = (objc_class *)swift_getObjCClassFromMetadata();
    id v53 = v51;
    id v54 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_initWithDelegate_, v53);

    if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v48) + 0xB18))())
    {
      Swift::Int v55 = v48;
      id v56 = v54;
      objc_msgSend(v55, sel_addInteraction_, v56);
    }
    uint64_t v57 = *(void **)&v48[direct field offset for Canvas.dropInteraction];
    *(void *)&v48[direct field offset for Canvas.dropInteraction] = v54;

    double v47 = &off_2640D6000;
  }
  type metadata accessor for CanvasScribbleDelegate();
  Swift::Int v58 = v45;
  id v59 = specialized CanvasScribbleDelegate.__allocating_init(canvas:)();

  uint64_t v60 = direct field offset for Canvas.scribbleDelegate;
  uint64_t v61 = *(void **)&v58[direct field offset for Canvas.scribbleDelegate];
  *(void *)&v58[direct field offset for Canvas.scribbleDelegate] = v59;

  Swift::Int v62 = *(void **)&v58[v60];
  if (!v62) {
    goto LABEL_13;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIScribbleInteraction);
  uint64_t v63 = (objc_class *)swift_getObjCClassFromMetadata();
  id v64 = v62;
  id v65 = objc_msgSend(objc_allocWithZone(v63), sel_initWithDelegate_, v64);

  id v66 = *(void **)&v58[direct field offset for Canvas.scribbleInteraction];
  *(void *)&v58[direct field offset for Canvas.scribbleInteraction] = v65;

  double v67 = *(void **)&v58[v60];
  if (!v67)
  {
LABEL_14:
    __break(1u);
    return;
  }
  swift_getWitnessTable();
  type metadata accessor for UIIndirectScribbleInteraction();
  id v68 = v67;
  uint64_t v69 = UIIndirectScribbleInteraction.__allocating_init(delegate:)();
  double v70 = *(void **)&v58[direct field offset for Canvas.indirectScribbleInteraction];
  *(void *)&v58[direct field offset for Canvas.indirectScribbleInteraction] = v69;

  id v71 = *(id *)&v42[v43];
  Canvas.updateScribbleIteractions(for:)(v71);

  id v72 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasPointerDelegate()), sel_init);
  uint64_t v73 = direct field offset for Canvas.pointerDelegate;
  double v74 = *(void **)&v58[direct field offset for Canvas.pointerDelegate];
  *(void *)&v58[direct field offset for Canvas.pointerDelegate] = v72;

  id v75 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82A70]), sel_initWithDelegate_, *(void *)&v58[v73]);
  objc_msgSend(v58, (SEL)v47[279], v75);
  unint64_t v96 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v97 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v95[0]) = 0;
  char v76 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
  if (v76)
  {
    if (v94)
    {
      type metadata accessor for CanvasEditMenuDelegate();
      double v77 = v58;
      id v78 = specialized CanvasEditMenuDelegate.__allocating_init(canvas:)();

      unint64_t v79 = *(void **)&v77[direct field offset for Canvas.editMenuInteractionDelegate];
      *(void *)&v77[direct field offset for Canvas.editMenuInteractionDelegate] = v78;
      id v80 = v78;

      id v81 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82718]), sel_initWithDelegate_, v80);
      objc_msgSend(v77, (SEL)v47[279], v81);
      uint64_t v82 = *(void **)&v77[direct field offset for Canvas.editMenuInteraction];
      *(void *)&v77[direct field offset for Canvas.editMenuInteraction] = v81;
      id v83 = v81;

      Canvas.setupBandSelection()();
    }
  }
  unint64_t v84 = v58;
  uint64_t v85 = (uint64_t)v89;
  Date.init()();
  uint64_t v86 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v85, 0, 1, v86);
  uint64_t v87 = (uint64_t)&v84[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_timeOfOpeningContainerView];
  swift_beginAccess();
  outlined assign with take of Date?(v85, v87, &demangling cache variable for type metadata for Date?);
  swift_endAccess();
}

uint64_t specialized Canvas.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + direct field offset for Canvas.liveStreamMessenger);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return Canvas.liveStreamMessenger.didset();
}

uint64_t specialized Canvas.canvasStateLiveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasStateLiveStreamMessenger + 8) = a2;
  swift_unknownObjectWeakAssign();
  return Canvas.canvasStateLiveStreamMessenger.didset();
}

void specialized Canvas.undoable(newChange:persistSelection:action:)(char a1, char a2, void *a3, uint64_t a4, uint64_t a5)
{
}

void specialized Canvas.undoable(newChange:persistSelection:action:)(char a1, char a2, void *a3, uint64_t a4, uint64_t a5, unsigned char *a6, uint64_t a7)
{
  uint64_t v60 = a7;
  uint64_t v61 = a6;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v11 - 8);
  Swift::Int v58 = &v47[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for CapsuleUndoAction();
  uint64_t v59 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v57 = &v47[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = &v47[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = &v47[-v20];
  if (*((unsigned char *)a3 + direct field offset for Canvas.isInUndoableGroup) == 1)
  {
    *((unsigned char *)a3 + direct field offset for Canvas.isUndoableGroupNewChange) = (*((unsigned char *)a3
                                                                                + direct field offset for Canvas.isUndoableGroupNewChange) | a1) & 1;
    double v22 = *(void **)(a4 + direct field offset for Canvas.paperView);
    swift_beginAccess();
    id v23 = v22;
    Capsule.callAsFunction<A>(_:)();
    swift_endAccess();

    return;
  }
  uint64_t v55 = direct field offset for Canvas.isInUndoableGroup;
  *((unsigned char *)a3 + direct field offset for Canvas.isInUndoableGroup) = 1;
  uint64_t v24 = direct field offset for Canvas.isUndoableGroupNewChange;
  *((unsigned char *)a3 + direct field offset for Canvas.isUndoableGroupNewChange) = a1 & 1;
  uint64_t v52 = v24;
  uint64_t v53 = direct field offset for Canvas.paperView;
  uint64_t v25 = *(void *)((char *)a3 + direct field offset for Canvas.paperView)
      + *(void *)((*MEMORY[0x263F8EED0] & **(void **)((char *)a3 + direct field offset for Canvas.paperView))
                  + 0x380);
  swift_beginAccess();
  uint64_t v56 = v16;
  uint64_t v26 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v61 = v21;
  id v54 = v26;
  v26(v21, v25, v15);
  uint64_t v27 = v15;
  if (a2)
  {
    uint64_t v28 = *(void *)((char *)a3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v28)
    {
      __break(1u);
      return;
    }
    uint64_t v29 = v28 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    uint64_t v30 = *(void *)v29;
    uint64_t v31 = *(void *)(v29 + 8);
    uint64_t v49 = *(void *)(v29 + 16);
    unsigned int v48 = *(unsigned __int8 *)(v29 + 24);
    uint64_t v51 = v30;
    swift_bridgeObjectRetain();
    uint64_t v50 = v31;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v49 = 0;
    unsigned int v48 = 0;
  }
  Swift::Int v32 = *(void **)(a4 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  id v33 = v32;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  if (one-time initialization token for $currentAnalyticsEvents != -1) {
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v60 = v13;
    TaskLocal.get()();
    uint64_t v34 = v62;
    uint64_t v35 = v62[2];
    if (!v35) {
      break;
    }
    uint64_t v13 = 0;
    unint64_t v36 = 0;
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew()(v34);
      }
      if (v36 >= v34[2]) {
        break;
      }
      ++v36;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34 + v13 + 32, *(void *)((char *)v34 + v13 + 56));
      AnalyticsEvent.send()();
      v13 += 40;
      if (v35 == v36) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_21:
    swift_once();
  }
LABEL_14:
  uint64_t v37 = (void *)MEMORY[0x263F8EED0];
  if (*((unsigned char *)a3 + v52) == 1)
  {
    LOBYTE(v62) = 3;
    (*(void (**)(void **))((*MEMORY[0x263F8EED0] & *a3) + 0x530))(&v62);
  }
  uint64_t v38 = *(void *)((char *)a3 + v53) + *(void *)((*v37 & **(void **)((char *)a3 + v53)) + 0x380);
  swift_beginAccess();
  v54(v18, v38, v27);
  uint64_t v39 = (uint64_t)v58;
  Capsule.actionUndoingDifference(from:)();
  unint64_t v40 = v37;
  id v41 = *(unsigned char **)(v56 + 8);
  ((void (*)(unsigned char *, uint64_t))v41)(v18, v27);
  uint64_t v43 = v59;
  uint64_t v42 = v60;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v39, 1, v60) == 1)
  {
    outlined consume of CanvasMembers?(v51);
    swift_bridgeObjectRelease();
    ((void (*)(unsigned char *, uint64_t))v41)(v61, v27);
    outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    double v44 = v57;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v43 + 32))(v57, v39, v42);
    double v45 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, void, void *))((*v40 & *a3) + 0x468);
    uint64_t v46 = v51;
    Swift::Int v58 = v41;
    v45(v44, v51, v50, v49, v48, v34);
    outlined consume of CanvasMembers?(v46);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v43 + 8))(v57, v42);
    ((void (*)(unsigned char *, uint64_t))v58)(v61, v27);
  }
  *((unsigned char *)a3 + v55) = 0;
}

uint64_t specialized Canvas.liveStreamMessenger.getter()
{
  uint64_t v1 = v0 + direct field offset for Canvas.liveStreamMessenger;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t specialized Canvas.updatablePaper2.setter(uint64_t a1)
{
  uint64_t v3 = (void *)MEMORY[0x263F8EED0];
  uint64_t v4 = *(void **)((char *)v1 + direct field offset for Canvas.paperView);
  uint64_t v5 = (char *)v4 + *(void *)((*v4 & *MEMORY[0x263F8EED0]) + 0x380);
  swift_beginAccess();
  uint64_t v6 = type metadata accessor for Capsule();
  double v7 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  double v8 = v4;
  v7(v5, a1, v6);
  swift_endAccess();

  v10[0] = 3;
  return (*(uint64_t (**)(char *))((*v3 & *v1) + 0x530))(v10);
}

void specialized Canvas.rootElement.setter(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + direct field offset for Canvas.paperView);
  uint64_t v4 = (char *)v3 + *(void *)((*v3 & *MEMORY[0x263F8EED0]) + 0x380);
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for Capsule();
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24);
  double v7 = v3;
  v6(v4, a1, v5);
  swift_endAccess();
}

uint64_t specialized Canvas.paper.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Capsule();
  uint64_t v3 = type metadata accessor for Optional();
  double v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - v5;
  (*(void (**)(char *, uint64_t, double))(v7 + 16))((char *)&v10 - v5, a1, v4);
  uint64_t v8 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v2);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    specialized Canvas.rootElement.setter((uint64_t)v6);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v2);
  }
  return result;
}

uint64_t sub_20C78DDF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 72))(*(void *)(a3 + a2 - 24));
}

uint64_t sub_20C78DE3C()
{
  return 24;
}

__n128 sub_20C78DE48(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in Canvas.selectAll()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Canvas.selectAll()(a1, a2);
}

uint64_t sub_20C78DE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 48))(*(void *)(a3 + a2 - 24));
}

uint64_t sub_20C78DEC0()
{
  return 24;
}

__n128 sub_20C78DECC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for Canvas.PaperViewCanvasPublisher()
{
  return __swift_instantiateGenericMetadata();
}

void partial apply for closure #1 in Canvas.undoablyAdd(_:to:)()
{
  closure #1 in Canvas.undoablyAdd(_:to:)(*(void *)(v0 + 16));
}

uint64_t type metadata accessor for Canvas()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type UIPress and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type UIPress and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UIPress and conformance NSObject)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIPress);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject);
  }
  return result;
}

uint64_t sub_20C78DF84@<X0>(uint64_t *a1@<X8>)
{
  *a1 = specialized Canvas.liveStreamMessenger.getter();
  a1[1] = v2;
  return swift_unknownObjectRetain();
}

uint64_t sub_20C78DFC4()
{
  return 24;
}

__n128 sub_20C78DFD0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C78DFE4()
{
  return Canvas.updatablePaper.getter();
}

uint64_t sub_20C78E00C()
{
  return 24;
}

__n128 sub_20C78E018(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C78E02C@<X0>(uint64_t a1@<X8>)
{
  return Canvas.updatablePaper2.getter(a1);
}

uint64_t sub_20C78E050(uint64_t a1)
{
  return specialized Canvas.updatablePaper2.setter(a1);
}

uint64_t sub_20C78E074()
{
  return 24;
}

__n128 sub_20C78E080(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C78E094@<X0>(uint64_t a1@<X8>)
{
  return Canvas.updatablePaper2.getter(a1);
}

void sub_20C78E0B8(uint64_t a1)
{
}

uint64_t sub_20C78E0DC()
{
  return 24;
}

__n128 sub_20C78E0E8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C78E0FC(uint64_t a1)
{
  return specialized Canvas.paper.setter(a1);
}

uint64_t sub_20C78E120()
{
  return 24;
}

__n128 sub_20C78E12C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C78E140()
{
  return 24;
}

__n128 sub_20C78E14C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C78E160@<X0>(uint64_t *a1@<X8>)
{
  *a1 = specialized Canvas.xpcMulticast.getter();
  return swift_retain();
}

uint64_t sub_20C78E19C()
{
  uint64_t v0 = swift_retain();
  return Canvas.xpcMulticast.setter(v0);
}

uint64_t sub_20C78E1C8()
{
  return 24;
}

__n128 sub_20C78E1D4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C78E1E8@<X0>(uint64_t a1@<X8>)
{
  Canvas.visibleBoundsOverride.getter((uint64_t)v3);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v3, a1, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
}

uint64_t sub_20C78E230(uint64_t a1)
{
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a1, (uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  return Canvas.visibleBoundsOverride.setter((uint64_t)v2);
}

uint64_t sub_20C78E274()
{
  return 24;
}

__n128 sub_20C78E280(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

id sub_20C78E294@<X0>(unsigned char *a1@<X8>)
{
  id result = Canvas.isRulerActive.getter();
  *a1 = result & 1;
  return result;
}

void sub_20C78E2C4(char *a1)
{
}

uint64_t sub_20C78E2EC()
{
  return 24;
}

__n128 sub_20C78E2F8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C78E30C@<X0>(uint64_t *a1@<X8>)
{
  return Canvas.tool.getter(a1);
}

uint64_t sub_20C78E330(uint64_t a1)
{
  outlined init with copy of FindResult(a1, (uint64_t)v2);
  return Canvas.tool.setter(v2);
}

uint64_t sub_20C78E36C()
{
  return 24;
}

__n128 sub_20C78E378(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for Canvas()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for Canvas(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Canvas);
}

uint64_t dispatch thunk of Canvas.liveStreamMessenger.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x918))();
}

uint64_t dispatch thunk of Canvas.liveStreamMessenger.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x920))();
}

uint64_t dispatch thunk of Canvas.liveStreamMessenger.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x928))();
}

uint64_t dispatch thunk of Canvas.merge<A>(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x938))();
}

uint64_t dispatch thunk of Canvas.updatablePaper.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x940))();
}

uint64_t dispatch thunk of Canvas.updatablePaper.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x948))();
}

uint64_t dispatch thunk of Canvas.updatablePaper.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x950))();
}

uint64_t dispatch thunk of Canvas.updatablePaper2.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x958))();
}

uint64_t dispatch thunk of Canvas.updatablePaper2.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x960))();
}

uint64_t dispatch thunk of Canvas.updatablePaper2.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x968))();
}

uint64_t dispatch thunk of Canvas.rootElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x988))();
}

uint64_t dispatch thunk of Canvas.rootElement.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x990))();
}

uint64_t dispatch thunk of Canvas.rootElement.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x998))();
}

uint64_t dispatch thunk of Canvas.paper.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x9A0))();
}

uint64_t dispatch thunk of Canvas.paper.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x9A8))();
}

uint64_t dispatch thunk of Canvas.paper.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x9B0))();
}

uint64_t dispatch thunk of Canvas.paper2.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x9B8))();
}

uint64_t dispatch thunk of Canvas.paper2.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x9C0))();
}

uint64_t dispatch thunk of Canvas.paper2.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x9C8))();
}

uint64_t dispatch thunk of Canvas.xpcMulticast.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x9D0))();
}

uint64_t dispatch thunk of Canvas.xpcMulticast.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x9D8))();
}

uint64_t dispatch thunk of Canvas.xpcMulticast.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x9E0))();
}

uint64_t dispatch thunk of Canvas.editingContainerElementId.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA18))();
}

uint64_t dispatch thunk of Canvas.editingContainerElementId.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA20))();
}

uint64_t dispatch thunk of Canvas.visibleBoundsOverride.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xBA8))();
}

uint64_t dispatch thunk of Canvas.visibleBoundsOverride.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 32);
  uint64_t v3 = *(uint64_t (**)(_OWORD *))((*MEMORY[0x263F8EED0] & *v1) + 0xBB0);
  long long v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  char v7 = v2;
  return v3(v6);
}

uint64_t dispatch thunk of Canvas.visibleBoundsOverride.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xBB8))();
}

uint64_t dispatch thunk of Canvas.selectedTextRange.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xBC0))();
}

uint64_t dispatch thunk of Canvas.selectAll()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xBD0))();
}

uint64_t dispatch thunk of Canvas._copyAll()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xBD8))();
}

uint64_t dispatch thunk of Canvas.isRulerActive.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xBE0))();
}

uint64_t dispatch thunk of Canvas.isRulerActive.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xBE8))();
}

uint64_t dispatch thunk of Canvas.isRulerActive.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xBF0))();
}

uint64_t dispatch thunk of Canvas.tool.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xBF8))();
}

uint64_t dispatch thunk of Canvas.tool.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC00))();
}

uint64_t dispatch thunk of Canvas.tool.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC08))();
}

uint64_t dispatch thunk of Canvas.publisher.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC28))();
}

uint64_t dispatch thunk of Canvas.livePublisher.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC30))();
}

uint64_t dispatch thunk of Canvas.undoablyAdd(_:to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD40))();
}

uint64_t type metadata completion function for Canvas.PaperViewCanvasSubscription()
{
  type metadata accessor for Capsule();
  uint64_t result = type metadata accessor for AnySubscriber();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Canvas.PaperViewCanvasSubscription()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for CanvasPointerDelegate()
{
  return self;
}

uint64_t initializeWithCopy for Canvas.PaperViewCanvasPublisher(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit();
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for Canvas.PaperViewCanvasPublisher(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for Canvas.PaperViewCanvasPublisher(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for Canvas.PaperViewCanvasPublisher(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign();
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for Canvas.PaperViewCanvasPublisher(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Canvas.PaperViewCanvasPublisher(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t base witness table accessor for Cancellable in Canvas<A>.PaperViewCanvasSubscription<A1>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in Canvas<A>.PaperViewCanvasSubscription<A1>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Canvas<A>.PaperViewCanvasPublisher()
{
  return MEMORY[0x263F8E658];
}

uint64_t sub_20C78F04C()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #2 in AnySubscriber.init<A>(_:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_20C78F0B4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t partial apply for closure #3 in AnySubscriber.init<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #3 in AnySubscriber.init<A>(_:)(v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80)), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #6 in AnySubscriber.init<A>(_:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  a1[3] = MEMORY[0x263F8D310];
  *a1 = v3;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t specialized Canvas.dropInteraction(_:canHandle:)(void *a1)
{
  if (((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0xB18))() & 1) == 0) {
    return 0;
  }
  uint64_t v3 = AnyCanvas.acceptedDropLayouts.getter();
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v5 = v3 + 40;
  while (((*(uint64_t (**)(void *))(*(void *)v5 + 24))(a1) & 1) == 0)
  {
    v5 += 16;
    if (!--v4) {
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_locationInView_, v1);
  return Canvas.isValidDropPoint(dropLocation:)(v7, v8);
}

id specialized Canvas.dropInteraction(_:sessionDidUpdate:)(void *a1)
{
  uint64_t v2 = v1;
  if ((Canvas.dropSessionFromCurrentCanvas(session:)(a1) & 1) == 0)
  {
    objc_msgSend(a1, sel_locationInView_, v1);
    if (Canvas.isValidDropPoint(dropLocation:)(v4, v5))
    {
      *((unsigned char *)v1 + direct field offset for Canvas.dropSessionType) = 0;
      id v6 = objc_msgSend(a1, sel_localDragSession);
      if (v6)
      {
        id v7 = objc_msgSend(v6, sel_localContext);
        swift_unknownObjectRelease();
        if (v7)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v22 = 0u;
          long long v23 = 0u;
        }
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v22, (uint64_t)&v24, &demangling cache variable for type metadata for Any?);
        if (*((void *)&v25 + 1))
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
          if (swift_dynamicCast())
          {
            uint64_t v10 = (void *)v22;
            type metadata accessor for AnyCanvas();
            uint64_t v11 = (void *)swift_dynamicCastClass();
            uint64_t v12 = (void *)MEMORY[0x263F8EED0];
            if (v11)
            {
              uint64_t v13 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v11) + 0x320);
              id v14 = v10;
              uint64_t v15 = (void *)v13();
            }
            else
            {
              uint64_t v15 = 0;
            }
            uint64_t v17 = (*(uint64_t (**)(void))((*v12 & *v1) + 0x320))();
            uint64_t v18 = (void *)v17;
            if (v15)
            {
              if (v17)
              {
                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKTiledView);
                id v19 = v15;
                char v20 = static NSObject.== infix(_:_:)();

                if (v20) {
                  goto LABEL_30;
                }
LABEL_28:
                unsigned int v21 = objc_msgSend(v2, sel_isDescendantOfView_, v10, v22, v23);

                if (v21) {
                  *((unsigned char *)v2 + direct field offset for Canvas.dropSessionType) = 2;
                }
                goto LABEL_16;
              }
            }
            else
            {
              if (!v17)
              {
LABEL_30:

                *((unsigned char *)v2 + direct field offset for Canvas.dropSessionType) = 1;
                goto LABEL_16;
              }
              uint64_t v15 = (void *)v17;
            }

            goto LABEL_28;
          }
LABEL_16:
          if (*((unsigned char *)v2 + direct field offset for Canvas.dropSessionType)) {
            uint64_t v16 = 3;
          }
          else {
            uint64_t v16 = 2;
          }
          return objc_msgSend(objc_allocWithZone(MEMORY[0x263F82700]), sel_initWithDropOperation_, v16);
        }
      }
      else
      {
        long long v24 = 0u;
        long long v25 = 0u;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v24, &demangling cache variable for type metadata for Any?);
      goto LABEL_16;
    }
  }
  id v8 = objc_allocWithZone(MEMORY[0x263F82700]);
  return objc_msgSend(v8, sel_initWithDropOperation_, 0);
}

void specialized Canvas.dropInteraction(_:performDrop:)(void *a1)
{
  uint64_t v2 = v1;
  double v77 = (void *)(*MEMORY[0x263F8EED0] & *(void *)v1);
  unint64_t v87 = v77[251];
  unint64_t v79 = v77[252];
  uint64_t v78 = type metadata accessor for Capsule();
  unint64_t v85 = *(void *)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  uint64_t v76 = (uint64_t)&v68 - v4;
  Canvas.dropFrame(session:)(a1, &aBlock.origin.x);
  CGFloat x = aBlock.origin.x;
  double width = aBlock.size.width;
  CGFloat y = aBlock.origin.y;
  double height = aBlock.size.height;
  double v7 = v90;
  double v86 = *(double *)&a1;
  id v8 = objc_msgSend(a1, sel_items);
  uint64_t v88 = (char *)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62) {
    goto LABEL_44;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v10; uint64_t v10 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v11 = 4;
    while (1)
    {
      id v12 = (v9 & 0xC000000000000001) != 0 ? (id)MEMORY[0x21054E050](v11 - 4, v9) : *(id *)(v9 + 8 * v11);
      uint64_t v13 = v12;
      uint64_t v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1)) {
        break;
      }
      id v15 = objc_msgSend(v12, sel_itemProvider);
      uint64_t v16 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
      unsigned __int8 v17 = objc_msgSend(v15, sel_hasItemConformingToTypeIdentifier_, v16);

      if (v17)
      {
        swift_bridgeObjectRelease_n();
        id v54 = objc_msgSend(v13, sel_itemProvider);
        uint64_t v55 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
        uint64_t v56 = (CGFloat *)swift_allocObject();
        *((void *)v56 + 2) = v2;
        CGFloat v57 = y;
        v56[3] = x;
        v56[4] = v57;
        v56[5] = width;
        v56[6] = height;
        double v90 = COERCE_DOUBLE(partial apply for closure #2 in Canvas.dropInteraction(_:performDrop:));
        id v91 = v56;
        *(void *)&aBlock.origin.CGFloat x = MEMORY[0x263EF8330];
        *(void *)&aBlock.origin.CGFloat y = 1107296256;
        *(void *)&aBlock.size.double width = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @guaranteed Error?) -> ();
        *(void *)&aBlock.size.double height = &block_descriptor_120;
        Swift::Int v58 = _Block_copy(&aBlock);
        uint64_t v59 = v2;
        swift_release();
        id v60 = objc_msgSend(v54, sel_loadFileRepresentationForTypeIdentifier_completionHandler_, v55, v58);
        _Block_release(v58);

        goto LABEL_48;
      }

      ++v11;
      if (v14 == v10) {
        goto LABEL_10;
      }
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  id v18 = objc_msgSend(*(id *)&v86, sel_items);
  unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v20)
    {
LABEL_12:
      uint64_t v82 = 0;
      unint64_t v21 = 0;
      double v74 = &v2[direct field offset for Canvas.dropTargets];
      unint64_t v75 = v19 & 0xC000000000000001;
      uint64_t v69 = v19 & 0xFFFFFFFFFFFFFF8;
      unint64_t v68 = v19 + 32;
      long long v22 = (double *)(v85 + 8);
      unint64_t v72 = v19;
      uint64_t v71 = v20;
      double v70 = (double *)(v85 + 8);
      uint64_t v73 = v2;
      double v23 = x;
      double v24 = y;
      do
      {
        if (v75)
        {
          long long v25 = (char *)MEMORY[0x21054E050](v21, v19);
          unint64_t v26 = v87;
          unint64_t v27 = v79;
          unint64_t v9 = v78;
          BOOL v28 = __OFADD__(v21, 1);
          unint64_t v29 = v21 + 1;
          if (v28) {
            goto LABEL_40;
          }
        }
        else
        {
          unint64_t v26 = v87;
          unint64_t v27 = v79;
          unint64_t v9 = v78;
          if (v21 >= *(void *)(v69 + 16)) {
            goto LABEL_42;
          }
          long long v25 = (char *)*(id *)(v68 + 8 * v21);
          BOOL v28 = __OFADD__(v21, 1);
          unint64_t v29 = v21 + 1;
          if (v28)
          {
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
        }
        unint64_t v85 = v29;
        uint64_t v88 = v25;
        unint64_t v30 = v26;
        id v31 = objc_msgSend(v25, sel_itemProvider, v68);
        uint64_t v32 = v76;
        uint64_t v33 = CanvasElementView.canvasElement.getter(v76);
        MEMORY[0x270FA5388](v33);
        *(&v68 - 4) = v30;
        *(&v68 - 3) = v27;
        unint64_t v34 = v77[253];
        *(&v68 - 2) = v34;
        swift_getKeyPath();
        Capsule<>.subscript.getter();
        swift_release();
        double v86 = *v22;
        (*(void (**)(uint64_t, unint64_t))&v86)(v32, v9);
        double v35 = CGRectGetWidth(aBlock);
        if (one-time initialization token for dropItemSpacing != -1) {
          swift_once();
        }
        double v36 = *(double *)&static UIConstants.dropItemSpacing;
        v94.origin.CGFloat x = v23;
        v94.origin.CGFloat y = v24;
        v94.size.double width = width;
        v94.size.double height = height;
        double v37 = CGRectGetWidth(v94);
        if (v36 > v23) {
          double v38 = v36;
        }
        else {
          double v38 = v23;
        }
        double v39 = v35 - v36 - v37;
        if (v38 < v39) {
          double v39 = v38;
        }
        double v84 = v39;
        double v40 = *((double *)&static UIConstants.dropItemSpacing + 1);
        if (*((double *)&static UIConstants.dropItemSpacing + 1) > v24) {
          double v41 = *((double *)&static UIConstants.dropItemSpacing + 1);
        }
        else {
          double v41 = v24;
        }
        double v83 = v41;
        uint64_t v42 = v73;
        uint64_t v43 = CanvasElementView.canvasElement.getter(v32);
        MEMORY[0x270FA5388](v43);
        *(&v68 - 4) = v87;
        *(&v68 - 3) = v27;
        *(&v68 - 2) = v34;
        swift_getKeyPath();
        Capsule<>.subscript.getter();
        swift_release();
        (*(void (**)(uint64_t, unint64_t))&v86)(v32, v9);
        double v44 = aBlock.origin.x;
        double v86 = aBlock.origin.y;
        double v45 = v74;
        swift_beginAccess();
        uint64_t v46 = v88;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v93 = *(void *)v45;
        *(void *)double v45 = 0x8000000000000000;
        *(double *)int v92 = v23;
        *(double *)&v92[1] = v24;
        *(double *)&v92[2] = width;
        *(double *)&v92[3] = height;
        *(double *)&v92[4] = v7;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v92, v46, isUniquelyReferenced_nonNull_native);
        *(void *)double v45 = v93;

        swift_bridgeObjectRelease();
        swift_endAccess();
        uint64_t v88 = (char *)AnyCanvas.acceptedDropLayouts.getter();
        uint64_t v48 = *((void *)v88 + 2);
        if (v48)
        {
          double v49 = v36 * (double)v82 + v84 + v44;
          double v50 = v40 * (double)v82 + v83 + v86;
          uint64_t v51 = v88 + 40;
          while (1)
          {
            uint64_t v52 = *((void *)v51 - 1);
            uint64_t v2 = *(char **)v51;
            unint64_t v9 = *(void *)(*(void *)v51 + 16);
            uint64_t v53 = v46;
            LOBYTE(v52) = ((uint64_t (*)(id, char *, char *, uint64_t, char *, double, double, double, double, double))v9)(v31, v42, v46, v52, v2, v49, v50, width, height, v7);

            if (v52) {
              break;
            }
            v51 += 16;
            if (!--v48) {
              goto LABEL_13;
            }
          }

          swift_bridgeObjectRelease();
          BOOL v28 = __OFADD__(v82++, 1);
          if (v28) {
            goto LABEL_43;
          }
        }
        else
        {
LABEL_13:

          swift_bridgeObjectRelease();
        }
        unint64_t v21 = v85;
        uint64_t v2 = v42;
        unint64_t v19 = v72;
        long long v22 = v70;
      }
      while (v85 != v71);
    }
  }
  swift_bridgeObjectRelease();
LABEL_48:
  type metadata accessor for Analytics();
  initeCGFloat d = swift_initStaticObject();
  int v62 = v2[direct field offset for Canvas.dropSessionType];
  if (v62 == 3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v63 = inited;
    uint64_t v64 = swift_allocObject();
    *(void *)(v64 + 16) = v63;
    *(unsigned char *)(v64 + 24) = v62;
    id v65 = (void *)MEMORY[0x21054D080](0xD00000000000001ELL, 0x800000020C84E1B0);
    uint64_t v66 = swift_allocObject();
    *(void *)(v66 + 16) = partial apply for implicit closure #1 in Analytics.recordDragAndDropEvent(type:);
    *(void *)(v66 + 24) = v64;
    double v90 = COERCE_DOUBLE(partial apply for closure #1 in Analytics.sendEventLazy(key:payload:));
    id v91 = (CGFloat *)v66;
    *(void *)&aBlock.origin.CGFloat x = MEMORY[0x263EF8330];
    *(void *)&aBlock.origin.CGFloat y = 1107296256;
    *(void *)&aBlock.size.double width = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    *(void *)&aBlock.size.double height = &block_descriptor_114;
    double v67 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v67);
    swift_release();

    v2[direct field offset for Canvas.dropSessionType] = 3;
  }
}

id specialized Canvas.dropInteraction(_:previewForDropping:withDefault:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  id v6 = (void *)((char *)v2 + direct field offset for Canvas.dropTargets);
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (!*(void *)(v7 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  id v8 = a1;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8);
  if (v10)
  {
    uint64_t v11 = *(void *)(v7 + 56) + 40 * v9;
    CGFloat v12 = *(double *)v11;
    CGFloat v13 = *(double *)(v11 + 8);
    CGFloat v15 = *(double *)(v11 + 16);
    CGFloat v14 = *(double *)(v11 + 24);
    CGFloat v16 = *(double *)(v11 + 32);

    swift_bridgeObjectRelease();
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v8, (uint64_t)v63);
    swift_endAccess();
    id v17 = objc_msgSend(v8, sel_itemProvider);
    id v18 = (void *)MEMORY[0x21054D080](0xD000000000000011, 0x800000020C853C60);
    unsigned int v19 = objc_msgSend(v17, sel_hasItemConformingToTypeIdentifier_, v18);

    if (v19)
    {
      return specialized Canvas.stickerDropInteraction(_:previewForDropping:withDefault:)(v8, a2);
    }
    else
    {
      CGAffineTransformMakeRotation(&t1, v16);
      long long v53 = *(_OWORD *)&t1.c;
      long long v55 = *(_OWORD *)&t1.a;
      tCGFloat x = t1.tx;
      tCGFloat y = t1.ty;
      v64.origin.CGFloat x = v12;
      v64.origin.CGFloat y = v13;
      v64.size.double width = v15;
      v64.size.double height = v14;
      double Width = CGRectGetWidth(v64);
      objc_msgSend(a2, sel_size);
      CGFloat v25 = Width / v24;
      CGFloat v58 = v13;
      CGFloat v59 = v12;
      v65.origin.CGFloat x = v12;
      v65.origin.CGFloat y = v13;
      CGFloat v57 = v15;
      v65.size.double width = v15;
      v65.size.double height = v14;
      double Height = CGRectGetHeight(v65);
      objc_msgSend(a2, sel_size);
      CGAffineTransformMakeScale(&t1, v25, Height / v27);
      long long v28 = *(_OWORD *)&t1.a;
      long long v29 = *(_OWORD *)&t1.c;
      long long v30 = *(_OWORD *)&t1.tx;
      *(_OWORD *)&t1.CGFloat a = v55;
      *(_OWORD *)&t1.CGFloat c = v53;
      t1.tCGFloat x = tx;
      t1.tCGFloat y = ty;
      *(_OWORD *)&t2.CGFloat a = v28;
      *(_OWORD *)&t2.CGFloat c = v29;
      *(_OWORD *)&t2.tCGFloat x = v30;
      id v31 = CGAffineTransformConcat(&v60, &t1, &t2);
      CGFloat a = v60.a;
      CGFloat b = v60.b;
      CGFloat c = v60.c;
      CGFloat d = v60.d;
      CGFloat v36 = v60.tx;
      CGFloat v37 = v60.ty;
      double v38 = (void *)(*(uint64_t (**)(CGAffineTransform *))((*MEMORY[0x263F8EED0] & *v3) + 0x308))(v31);
      if (v38)
      {
        double v39 = v38;
        objc_msgSend(v38, sel_zoomScale);
        CGFloat v41 = v40;
      }
      else
      {
        CGFloat v41 = 1.0;
      }
      CGAffineTransformMakeScale(&t1, v41, v41);
      long long v42 = *(_OWORD *)&t1.a;
      long long v43 = *(_OWORD *)&t1.c;
      long long v44 = *(_OWORD *)&t1.tx;
      t1.CGFloat a = a;
      t1.CGFloat b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.tCGFloat x = v36;
      t1.tCGFloat y = v37;
      *(_OWORD *)&t2.CGFloat a = v42;
      *(_OWORD *)&t2.CGFloat c = v43;
      *(_OWORD *)&t2.tCGFloat x = v44;
      CGAffineTransformConcat(&v60, &t1, &t2);
      long long v54 = *(_OWORD *)&v60.c;
      long long v56 = *(_OWORD *)&v60.a;
      CGFloat v45 = v60.tx;
      CGFloat v46 = v60.ty;
      id v47 = Canvas.editingView.getter();
      v66.origin.CGFloat x = v59;
      v66.origin.CGFloat y = v58;
      v66.size.double width = v57;
      v66.size.double height = v14;
      double MidX = CGRectGetMidX(v66);
      v67.origin.CGFloat x = v59;
      v67.origin.CGFloat y = v58;
      v67.size.double width = v57;
      v67.size.double height = v14;
      double MidY = CGRectGetMidY(v67);
      id v50 = objc_allocWithZone(MEMORY[0x263F826F0]);
      *(_OWORD *)&t1.CGFloat a = v56;
      *(_OWORD *)&t1.CGFloat c = v54;
      t1.tCGFloat x = v45;
      t1.tCGFloat y = v46;
      id v51 = objc_msgSend(v50, sel_initWithContainer_center_transform_, v47, &t1, MidX, MidY);

      id v20 = objc_msgSend(a2, sel_retargetedPreviewWithTarget_, v51);
    }
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
  return v20;
}

void specialized Canvas.dropInteraction(_:item:willAnimateDropWith:)(void *a1, void *a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = a1;
  v9[4] = partial apply for closure #1 in Canvas.dropInteraction(_:item:willAnimateDropWith:);
  v9[5] = v5;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1107296256;
  _OWORD v9[2] = thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ();
  v9[3] = &block_descriptor_65;
  id v6 = _Block_copy(v9);
  id v7 = v2;
  id v8 = a1;
  swift_release();
  objc_msgSend(a2, sel_addCompletion_, v6);
  _Block_release(v6);
}

uint64_t specialized Canvas.dropInteraction(_:sessionDidEnter:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + direct field offset for Canvas.dropInteraction);
  if (v2) {
    BOOL v3 = v2 == result;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    *(unsigned char *)(v1 + direct field offset for Canvas.dropInteractionSessionIsActive) = 1;
  }
  return result;
}

uint64_t specialized Canvas.dropInteraction(_:sessionDidEnd:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + direct field offset for Canvas.dropInteraction);
  if (v3) {
    BOOL v4 = v3 == a1;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    *(unsigned char *)(v1 + direct field offset for Canvas.dropInteractionSessionIsActive) = 0;
  }
  uint64_t v5 = (uint64_t *)(v1 + direct field offset for Canvas.dropCompletions);
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v7 = *v5 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(*v5 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(*v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v15 = v14 | (v13 << 6);
      goto LABEL_11;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v18 >= v11) {
      goto LABEL_29;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_29;
      }
      unint64_t v19 = *(void *)(v7 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_29;
        }
        unint64_t v19 = *(void *)(v7 + 8 * v13);
        if (!v19)
        {
          int64_t v13 = v18 + 3;
          if (v18 + 3 >= v11) {
            goto LABEL_29;
          }
          unint64_t v19 = *(void *)(v7 + 8 * v13);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_28:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_11:
    CGFloat v16 = *(void (**)(uint64_t))(*(void *)(v6 + 56) + 16 * v15);
    uint64_t v17 = swift_retain();
    v16(v17);
    uint64_t result = swift_release();
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v11)
  {
LABEL_29:
    swift_release();
    unint64_t v21 = (void *)(v2 + direct field offset for Canvas.dropCompletions);
    swift_beginAccess();
    uint64_t v22 = MEMORY[0x263F8EE80];
    *unint64_t v21 = MEMORY[0x263F8EE80];
    swift_bridgeObjectRelease();
    double v23 = (void *)(v2 + direct field offset for Canvas.delayedPreviewProviders);
    swift_beginAccess();
    *double v23 = v22;
    swift_bridgeObjectRelease();
    double v24 = (void *)(v2 + direct field offset for Canvas.stickerDropPreviewInfoMap);
    swift_beginAccess();
    *double v24 = v22;
    return swift_bridgeObjectRelease();
  }
  unint64_t v19 = *(void *)(v7 + 8 * v20);
  if (v19)
  {
    int64_t v13 = v20;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v13 >= v11) {
      goto LABEL_29;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_28;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized Canvas._dropInteraction(_:delayedPreviewProviderForDropping:previewProvider:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  uint64_t v8 = (uint64_t *)(v3 + direct field offset for Canvas.delayedPreviewProviders);
  swift_beginAccess();
  id v9 = a1;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *v8;
  *uint64_t v8 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed UITargetedDragPreview) -> (), v7, v9, isUniquelyReferenced_nonNull_native);
  *uint64_t v8 = v12;

  swift_bridgeObjectRelease();
  return swift_endAccess();
}

void specialized Canvas.init(coder:)()
{
  *(void *)&v0[direct field offset for Canvas.multipeerConnection] = 0;
  *(void *)&v0[direct field offset for Canvas.multipeerCanvasStateConnection] = 0;
  *(void *)&v0[direct field offset for Canvas.removeOldEraserStrokesTimer] = 0;
  uint64_t v1 = &v0[direct field offset for Canvas.liveStreamMessenger];
  void *v1 = 0;
  v1[1] = 0;
  *(void *)&v0[direct field offset for Canvas.childViewControllerCancellable] = 0;
  *(void *)&v0[direct field offset for Canvas.xpcMulticast] = 0;
  uint64_t v2 = &v0[direct field offset for Canvas._editingView];
  void *v2 = 0;
  v2[1] = 0;
  *(void *)&v0[direct field offset for Canvas._canvasElementController] = 0;
  uint64_t v3 = direct field offset for Canvas.delayedPreviewProviders;
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)&v0[v3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v5 = direct field offset for Canvas.dropCompletions;
  *(void *)&v0[v5] = specialized Dictionary.init(dictionaryLiteral:)(v4);
  v0[direct field offset for Canvas.dropSessionType] = 3;
  *(void *)&v0[direct field offset for Canvas.scribbleDelegate] = 0;
  *(void *)&v0[direct field offset for Canvas.scribbleInteraction] = 0;
  *(void *)&v0[direct field offset for Canvas.indirectScribbleInteraction] = 0;
  *(void *)&v0[direct field offset for Canvas.pointerDelegate] = 0;
  v0[direct field offset for Canvas.dropInteractionSessionIsActive] = 0;
  *(void *)&v0[direct field offset for Canvas.dropInteraction] = 0;
  *(void *)&v0[direct field offset for Canvas.dropDelegate] = 0;
  *(void *)&v0[direct field offset for Canvas.editMenuInteraction] = 0;
  *(void *)&v0[direct field offset for Canvas.editMenuInteractionDelegate] = 0;
  uint64_t v6 = &v0[direct field offset for Canvas.visibleBoundsOverride];
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  uint64_t v7 = direct field offset for Canvas.subscriptions;
  type metadata accessor for Canvas.PaperViewCanvasSubscription();
  *(void *)&v0[v7] = Array.init()();
  v0[direct field offset for Canvas.isInUndoableGroup] = 0;
  v0[direct field offset for Canvas.isUndoableGroupNewChange] = 0;
  *(void *)&v0[direct field offset for Canvas.eraserCheckingIndex] = 0;
  uint64_t v8 = direct field offset for Canvas.dropTargets;
  *(void *)&v0[v8] = specialized Dictionary.init(dictionaryLiteral:)(v4);
  uint64_t v9 = direct field offset for Canvas.stickerDropPreviewInfoMap;
  *(void *)&v0[v9] = specialized Dictionary.init(dictionaryLiteral:)(v4);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized Canvas.PaperViewCanvasSubscription.init(canvas:live:subscriber:)(uint64_t a1, char a2, uint64_t a3)
{
  swift_unknownObjectWeakInit();
  uint64_t v6 = v3 + *(void *)(*(void *)v3 + 120);
  type metadata accessor for Capsule();
  uint64_t v7 = type metadata accessor for AnySubscriber();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, a3, v7);
  swift_unknownObjectWeakAssign();
  *(unsigned char *)(v3 + *(void *)(*(void *)v3 + 136)) = a2;
  return v3;
}

uint64_t sub_20C790BEC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #5 in AnySubscriber.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), *(void *)(v1 + 40));
  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  a1[3] = MEMORY[0x263F8D310];
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t partial apply for closure #4 in AnySubscriber.init<A>(_:)()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  return dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter();
}

uint64_t partial apply for closure #1 in AnySubscriber.init<A>(_:)()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu);
  return v6(a1, v4);
}

uint64_t _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in Canvas.canvasStateLiveStreamMessenger.didset(uint64_t a1)
{
  closure #1 in Canvas.canvasStateLiveStreamMessenger.didset(a1, *(void *)(v1 + 40));
}

uint64_t partial apply for closure #1 in Canvas.registerUndo(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_20C790E40()
{
  uint64_t v1 = type metadata accessor for CapsuleUndoAction();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  if (*(void *)(v0 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8)))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((v5 + 39) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void partial apply for closure #2 in Canvas.registerUndo(_:selection:analyticsEvents:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CapsuleUndoAction() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = v1 + v4;
  uint64_t v7 = v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v11 = *(void *)(v1 + ((v5 + 39) & 0xFFFFFFFFFFFFFFF8));
  char v12 = *(unsigned char *)(v7 + 24);
  closure #2 in Canvas.registerUndo(_:selection:analyticsEvents:)(a1, v6, v8, v9, v10, v12, v11);
}

uint64_t partial apply for closure #1 in Canvas.mergeToCanvasElements()(uint64_t a1)
{
  return closure #1 in Canvas.mergeToCanvasElements()(a1, *(void **)(v1 + 16)) & 1;
}

void specialized Canvas.init(frame:)()
{
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5TA(uint64_t a1)
{
  unint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5Tu);
  return v6(a1, v4);
}

uint64_t sub_20C7910C0()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in Canvas.dropInteraction(_:item:willAnimateDropWith:)(uint64_t a1)
{
  return closure #1 in Canvas.dropInteraction(_:item:willAnimateDropWith:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t block_copy_helper_65(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_65()
{
  return swift_release();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed UITargetedDragPreview) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_20C791154()
{
  return 24;
}

__n128 sub_20C791160(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C791174()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_20C7911AC()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7911E4()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #2 in Canvas.dropInteraction(_:performDrop:)(uint64_t a1)
{
  return closure #2 in Canvas.dropInteraction(_:performDrop:)(a1, v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_20C79122C()
{
  uint64_t v1 = type metadata accessor for CRStableAsset();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CRStableAsset() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v1[5];
  uint64_t v11 = (uint64_t)v1 + v5;
  double v12 = *(double *)((char *)v1 + v6);
  double v13 = *(double *)((char *)v1 + v6 + 8);
  double v14 = *(double *)((char *)v1 + v6 + 16);
  double v15 = *(double *)((char *)v1 + v6 + 24);
  CGFloat v16 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v16;
  void *v16 = v2;
  v16[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:)(v12, v13, v14, v15, a1, v7, v8, v9, v10, v11);
}

uint64_t type metadata accessor for Canvas.CanvasHarmonizationError()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_20C791488()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #1 in Canvas.harmonizeImage(_:)(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in Canvas.harmonizeImage(_:)(a1, v6, v7, v9, v10, v4, v5, v8);
}

uint64_t sub_20C7915AC()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRAssetOrData() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 88) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();

  uint64_t v5 = v0 + v3;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(void *)v5, *(void *)(v5 + 8));
    outlined consume of Data._Representation(*(void *)(v5 + 16), *(void *)(v5 + 24));
  }
  else
  {
    uint64_t v6 = type metadata accessor for CRAsset();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  }
  swift_release();
  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t partial apply for closure #1 in Canvas.harmonizeCanvasElement<A>(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CRAssetOrData() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[10];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in Canvas.harmonizeCanvasElement<A>(_:)(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in closure #1 in Canvas.harmonizeCanvasElement<A>(_:)(uint64_t a1)
{
  return closure #1 in closure #1 in Canvas.harmonizeCanvasElement<A>(_:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #2 in Canvas.createSubCanvasElement(from:)(void *a1)
{
  return closure #2 in Canvas.createSubCanvasElement(from:)(a1, *(void *)(v1 + 32), *(char **)(v1 + 40), *(void *)(v1 + 48), *(char **)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #2 in closure #2 in Canvas.createSubCanvasElement(from:)(uint64_t a1)
{
  return closure #2 in closure #2 in Canvas.createSubCanvasElement(from:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_20C791890()
{
  return 24;
}

__n128 sub_20C79189C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C7918B0()
{
  uint64_t v1 = type metadata accessor for Capsule();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return MEMORY[0x270FA0238](v0, v10, v11);
}

uint64_t partial apply for closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v6 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for Capsule() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(type metadata accessor for Date() - 8) + 80);
  unint64_t v11 = v8 + v9 + v10;
  uint64_t v12 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v14 = v1[7];
  uint64_t v15 = (uint64_t)v1 + v8;
  uint64_t v16 = (uint64_t)v1 + (v11 & ~v10);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v17;
  *uint64_t v17 = v3;
  v17[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)(a1, v12, v13, v14, v15, v16, v6, v5);
}

uint64_t sub_20C791BA8()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

id partial apply for closure #1 in Canvas.presentSubelement<A>(_:presentationViewController:)()
{
  return objc_msgSend(*(id *)(v0 + 40), sel_becomeFirstResponder);
}

uint64_t sub_20C791BF0()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C791C28()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

void partial apply for closure #2 in Canvas.presentSubelement<A>(_:presentationViewController:)(uint64_t a1)
{
  closure #2 in Canvas.presentSubelement<A>(_:presentationViewController:)(a1, v1[8], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_20C791C74()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 41, 7);
}

uint64_t sub_20C791CB4()
{
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

void partial apply for closure #1 in Canvas.setupBandSelection()(unint64_t a1)
{
  closure #1 in Canvas.setupBandSelection()(a1, *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_20C791D0C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #2 in Canvas.setupBandSelection()(uint64_t a1, double a2, double a3)
{
  return closure #2 in Canvas.setupBandSelection()(a2, a3, a1, *(void *)(v3 + 40));
}

uint64_t partial apply for closure #1 in Canvas.mathAddGraph(forExpression:variable:range:identifier:expressionLocation:addToExisting:)(uint64_t a1)
{
  return closure #1 in Canvas.mathAddGraph(forExpression:variable:range:identifier:expressionLocation:addToExisting:)(*(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), *(CGFloat *)(v1 + 48), *(CGFloat *)(v1 + 56), *(CGFloat *)(v1 + 64), a1, *(long long **)(v1 + 16), *(void *)(v1 + 72));
}

uint64_t partial apply for closure #1 in Canvas.canvasCalculateSetShouldSolve(_:stroke:flag:undoable:)(uint64_t a1)
{
  return closure #1 in Canvas.canvasCalculateSetShouldSolve(_:stroke:flag:undoable:)(a1, *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(uint64_t (**)(void, void))(v1 + 48), *(unsigned char **)(v1 + 56));
}

void partial apply for closure #2 in Canvas.imageOf(canvasElementViews:in:)(CGFloat *a1@<X0>, id *a2@<X1>, CGRect *a3@<X8>)
{
  closure #2 in Canvas.imageOf(canvasElementViews:in:)(a1, a2, *(void **)(v3 + 16), a3);
}

uint64_t sub_20C791DD8()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #3 in Canvas.imageOf(canvasElementViews:in:)(void *a1)
{
  closure #3 in Canvas.imageOf(canvasElementViews:in:)(a1, *(id **)(v1 + 16), *(CGRect **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_20C791E24()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in Canvas.canvasElementBounds(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Canvas.canvasElementBounds(_:)(a1);
}

uint64_t lazy protocol witness table accessor for type [ReflowEnum] and conformance <A> [A](unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #2 in Canvas.createNewPaper(from:)(uint64_t a1)
{
  return closure #2 in Canvas.createNewPaper(from:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

uint64_t partial apply for closure #1 in closure #2 in Canvas.createNewPaper(from:)(uint64_t a1)
{
  return closure #1 in closure #2 in Canvas.createSubCanvasElement(from:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t _s8PaperKit13CRAssetOrDataOWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_20C791FC0()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

id partial apply for closure #1 in closure #3 in Canvas.pasteboardRepresentations(_:)(int a1)
{
  return closure #1 in closure #3 in Canvas.pasteboardRepresentations(_:)(a1, *(id *)(v1 + 16), *(double *)(v1 + 24), *(void **)(v1 + 40));
}

uint64_t sub_20C792010()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C792020()
{
  return objectdestroy_219Tm_0((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
}

uint64_t partial apply for closure #1 in Canvas.itemProvider(for:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Canvas.itemProvider(for:)(a1, a2, closure #1 in Canvas.itemProvider(for:));
}

uint64_t sub_20C792044()
{
  return objectdestroy_219Tm_0((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
}

uint64_t partial apply for closure #2 in Canvas.itemProvider(for:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Canvas.itemProvider(for:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #2 in Canvas.itemProvider(for:));
}

uint64_t partial apply for closure #1 in Canvas.itemProvider(for:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                 - 8);
  uint64_t v7 = v3 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a3(a1, a2, v7);
}

uint64_t sub_20C792100()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> ()(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_20C792140()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in Canvas.itemProvider(for:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in Canvas.itemProvider(for:)(a1, v6, v7, v8, v10, v11);
}

uint64_t partial apply for closure #1 in Canvas.transformStrokes(_:)()
{
  return closure #1 in Canvas.transformStrokes(_:)(*(void **)(v0 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in Canvas.transformStrokes(_:)(void *a1)
{
  return closure #1 in closure #1 in Canvas.transformStrokes(_:)(a1, *(void *)(v1 + 32), *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in Canvas.mergeUndoable<A>(_:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[5];
  unsigned __int8 v5 = 3;
  return AnyCanvas.merge<A>(_:from:)(v3, &v5, v1, v2);
}

void partial apply for closure #1 in Canvas.startCheckingForOldEraserStrokes()(uint64_t a1)
{
  closure #1 in Canvas.startCheckingForOldEraserStrokes()(a1, *(void *)(v1 + 40));
}

uint64_t sub_20C7923D4()
{
  uint64_t v1 = type metadata accessor for PKDrawing();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #2 in Canvas.hide(strokes:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for PKDrawing() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #2 in Canvas.hide(strokes:)(a1, v5, v6, v7, v8, v9);
}

uint64_t partial apply for closure #1 in Canvas.hide(weakStrokes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Canvas.hide(weakStrokes:)(a1, *(void *)(v2 + 16), a2);
}

void partial apply for closure #1 in Canvas.addWords(_:layout:)()
{
  closure #1 in Canvas.addWords(_:layout:)(*(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in Canvas.addWords(_:layout:)(void *a1)
{
  return closure #1 in closure #1 in Canvas.addWords(_:layout:)(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in Canvas.addWords(_:layout:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in Canvas.addWords(_:layout:)(a1, *(void *)(v1 + 16));
}

uint64_t _s8PaperKit5ImageVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in Canvas.showOrHideContent(below:)(uint64_t a1)
{
  return partial apply for closure #1 in Canvas.showOrHideContent(below:)(a1, (uint64_t (*)(uint64_t, void, void, void, double, double))closure #1 in Canvas.showOrHideContent(below:));
}

uint64_t partial apply for closure #2 in Canvas.showOrHideContent(below:)(uint64_t a1)
{
  return partial apply for closure #1 in Canvas.showOrHideContent(below:)(a1, (uint64_t (*)(uint64_t, void, void, void, double, double))closure #2 in Canvas.showOrHideContent(below:));
}

uint64_t partial apply for closure #1 in Canvas.showOrHideContent(below:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, double, double))
{
  return a2(a1, *(void *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + 40));
}

uint64_t partial apply for closure #1 in closure #2 in Canvas.showOrHideContent(below:)(uint64_t a1)
{
  return closure #1 in closure #2 in Canvas.showOrHideContent(below:)(*(double *)(v1 + 40), *(CGFloat *)(v1 + 48), a1, *(void *)(v1 + 32), *(char **)(v1 + 56));
}

void partial apply for closure #1 in closure #1 in Canvas.showOrHideContent(below:)(uint64_t a1)
{
  closure #1 in closure #1 in Canvas.showOrHideContent(below:)(*(double *)(v1 + 40), *(CGFloat *)(v1 + 48), a1, *(void *)(v1 + 32), *(unsigned char **)(v1 + 56));
}

uint64_t sub_20C792748()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C792780()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #3 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)()
{
  return closure #3 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)(*(void **)(v0 + 16));
}

uint64_t partial apply for closure #1 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)()
{
  return closure #1 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)();
}

void sub_20C7927BC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(double *)a3 = (*(double (**)(void))(*(void *)(*(void *)(a2 + a1 - 8) + 8) + 8))(*(void *)(a2 + a1 - 40));
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v6;
}

uint64_t sub_20C792810(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, double, double, double, double))(*(void *)(a4 + a3 - 8) + 16))(*(void *)(a4 + a3 - 40), *(void *)(a4 + a3 - 8), *a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_20C792860()
{
  return 48;
}

__n128 sub_20C79286C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

void sub_20C792880(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  *a3 = (*(double (**)(void))(*(void *)(a2 + a1 - 8) + 32))(*(void *)(a2 + a1 - 40));
}

uint64_t sub_20C7928CC(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, double))(*(void *)(a4 + a3 - 8) + 40))(*(void *)(a4 + a3 - 40), *(void *)(a4 + a3 - 8), *a1);
}

uint64_t sub_20C792918()
{
  return 48;
}

__n128 sub_20C792924(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_20C792938()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in Canvas.applyUndo(_:selection:)()
{
  closure #1 in Canvas.applyUndo(_:selection:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in Canvas.addFlags(_:strokeFlags:to:)(uint64_t *a1)
{
  return closure #1 in Canvas.addFlags(_:strokeFlags:to:)(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in Canvas.addFlags(_:strokeFlags:to:)(uint64_t a1)
{
  return closure #1 in closure #1 in Canvas.addFlags(_:strokeFlags:to:)(a1, *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_20C792994()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in Canvas.removeImageBackground(for:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in Canvas.removeImageBackground(for:)(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_20C792BF0()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #2 in Canvas.removeImageBackground(for:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #2 in Canvas.removeImageBackground(for:)(a1, v4, v5, v6);
}

void partial apply for closure #1 in closure #1 in Canvas.removeImageBackground(for:)(uint64_t a1)
{
}

uint64_t partial apply for closure #2 in closure #1 in Canvas.removeImageBackground(for:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(CGImage **)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  long long v6 = *(_OWORD *)(v1 + 72);
  long long v9 = *(_OWORD *)(v1 + 56);
  long long v10 = v6;
  return closure #2 in closure #1 in Canvas.removeImageBackground(for:)(a1, v2, v3, v4, v5, (double *)&v8);
}

uint64_t sub_20C792D2C()
{
  return objectdestroy_219Tm_0(&demangling cache variable for type metadata for CheckedContinuation<(CGImageRef?, CGRect), Error>);
}

uint64_t objectdestroy_219Tm_0(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return MEMORY[0x270FA0238](v1, v6, v7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in Canvas.removeImageBackground(for:)(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(CGImageRef?, CGRect), Error>);
  return closure #1 in closure #1 in closure #1 in Canvas.removeImageBackground(for:)(a1, a2);
}

uint64_t sub_20C792E78()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 49, 7);
}

uint64_t partial apply for closure #1 in Canvas.selectedShapes.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Canvas.selectedShapes.getter(*(void **)(v1 + 16), a1);
}

uint64_t _s8PaperKit13CRAssetOrDataOWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void partial apply for closure #1 in Canvas.canvasDescription.setter()
{
  closure #1 in Canvas.addWords(_:layout:)(*(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in Canvas.canvasDescription.setter(uint64_t a1)
{
  return closure #1 in closure #1 in Canvas.canvasDescription.setter(a1, *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t partial apply for closure #1 in Canvas.align(members:to:)(uint64_t a1)
{
  return closure #1 in Canvas.align(members:to:)(a1, *(void *)(v1 + 32), *(CGFloat *)(v1 + 64), *(CGFloat *)(v1 + 72), *(CGFloat *)(v1 + 80), *(CGFloat *)(v1 + 88), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #1 in closure #1 in Canvas.align(members:to:)(CGFloat *a1@<X0>, CGFloat *a2@<X8>)
{
}

uint64_t partial apply for closure #1 in Canvas.transformStrokes(_:with:concat:)(void *a1)
{
  return static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(*(void *)(v1 + 32), *(CGFloat **)(v1 + 40), *(unsigned __int8 *)(v1 + 48), a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in PaperTextAttachmentView.endLiveResize(discard:)()
{
  return closure #1 in closure #1 in PaperTextAttachmentView.endLiveResize(discard:)();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSay8PaperKit0D18DocumentFindResultVG_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSay8PaperKit0D18DocumentFindResultVG_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSay8PaperKit0D18DocumentFindResultVG_TG5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in closure #1 in Canvas.undoablyAdd(_:to:)(uint64_t a1)
{
  return closure #1 in closure #1 in Canvas.undoablyAdd(_:to:)(a1, *(void *)(v1 + 32));
}

void partial apply for closure #1 in Canvas.liveStreamMessenger.didset(uint64_t a1)
{
  closure #1 in Canvas.liveStreamMessenger.didset(a1, v1[5], v1[2], v1[3]);
}

unsigned char *storeEnumTagSinglePayload for Canvas.CanvasHarmonizationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C7931F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Canvas<A>.CanvasHarmonizationError()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in closure #2 in Canvas.createSubCanvasElement(from:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in Canvas.createNewPaper(from:)(a1) & 1;
}

uint64_t closure #1 in CalculateResultAttributionHandler.init()(uint64_t a1)
{
  v1[2] = a1;
  type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[4] = v3;
  v1[5] = v2;
  return MEMORY[0x270FA2498](closure #1 in CalculateResultAttributionHandler.init(), v3, v2);
}

uint64_t closure #1 in CalculateResultAttributionHandler.init()()
{
  type metadata accessor for StocksKitCurrencyCache();
  *(void *)(v0 + 48) = static StocksKitCurrencyCache.shared.getter();
  uint64_t v3 = (uint64_t (*)(void))((int)*MEMORY[0x263F2FC98] + MEMORY[0x263F2FC98]);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  void *v1 = v0;
  v1[1] = closure #1 in CalculateResultAttributionHandler.init();
  return v3();
}

{
  uint64_t v0;
  char v1;
  unsigned char *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(unsigned char *)(v0 + 64);
  uint64_t v2 = *(unsigned char **)(v0 + 16);
  swift_release();
  void *v2 = v1;
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t closure #1 in CalculateResultAttributionHandler.init()(char a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 48);
  *(unsigned char *)(*v1 + 64) = a1;
  swift_task_dealloc();

  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = *(void *)(v2 + 32);
  return MEMORY[0x270FA2498](closure #1 in CalculateResultAttributionHandler.init(), v5, v4);
}

uint64_t type metadata accessor for CalculateResultAttributionHandler()
{
  return self;
}

uint64_t key path setter for EnvironmentValues.colorScheme : EnvironmentValues, serialized(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  double v3 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues.colorScheme.setter();
}

uint64_t specialized CalculateResultAttributionHandler.lightModeImage()()
{
  v1[2] = v0;
  v1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
  v1[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for ColorScheme();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v1[8] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StocksKitCurrencyCache.Provider?);
  v1[11] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[12] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[13] = v4;
  v1[14] = v3;
  return MEMORY[0x270FA2498](specialized CalculateResultAttributionHandler.lightModeImage(), v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(void *)(v0[2] + 16))
  {
    swift_release();
    uint64_t v1 = *(void *)(v0[2] + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
    return v2(v1);
  }
  else
  {
    type metadata accessor for StocksKitCurrencyCache();
    v0[15] = static StocksKitCurrencyCache.shared.getter();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[16] = v4;
    *uint64_t v4 = v0;
    v4[1] = specialized CalculateResultAttributionHandler.lightModeImage();
    uint64_t v5 = v0[11];
    return MEMORY[0x270F13598](v5);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 120);
  swift_task_dealloc();

  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v4 = *(void *)(v1 + 104);
  return MEMORY[0x270FA2498](specialized CalculateResultAttributionHandler.lightModeImage(), v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t KeyPath;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v1 = v0[11];
  swift_release();
  uint64_t v2 = type metadata accessor for StocksKitCurrencyCache.Provider();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v5 = v0[11];
  if (v4 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0[11], &demangling cache variable for type metadata for StocksKitCurrencyCache.Provider?);
  }
  else
  {
    uint64_t v6 = StocksKitCurrencyCache.Provider.logo.getter();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)v0[10];
      uint64_t v8 = v0[7];
      long long v9 = v0[8];
      long long v10 = v0[5];
      uint64_t v11 = v0[6];
      uint64_t v12 = v0[3];
      uint64_t v13 = (uint64_t *)v0[4];
      unint64_t v21 = v0[9];
      uint64_t v22 = v0[2];
      (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v8, *MEMORY[0x263F18508], v10);
      uint64_t KeyPath = swift_getKeyPath();
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v13 + *(int *)(v12 + 28), v8, v10);
      void *v13 = KeyPath;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v13, (uint64_t)v7 + *(int *)(v9 + 36), &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
      *uint64_t v7 = v6;
      swift_retain();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, v21, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageRenderer<ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>>);
      swift_allocObject();
      ImageRenderer.init(content:)();
      uint64_t v15 = objc_msgSend(self, sel_mainScreen);
      objc_msgSend(v15, sel_scale);

      ImageRenderer.scale.setter();
      uint64_t v16 = ImageRenderer.uiImage.getter();
      swift_release();
      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>);
      uint64_t v17 = *(void **)(v22 + 16);
      *(void *)(v22 + 16) = v16;
    }
  }
  uint64_t v18 = *(void *)(v0[2] + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(uint64_t))v0[1];
  return v19(v18);
}

uint64_t specialized CalculateResultAttributionHandler.darkModeImage()()
{
  v1[2] = v0;
  v1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
  v1[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for ColorScheme();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v1[8] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StocksKitCurrencyCache.Provider?);
  v1[11] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[12] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[13] = v4;
  v1[14] = v3;
  return MEMORY[0x270FA2498](specialized CalculateResultAttributionHandler.darkModeImage(), v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(void *)(v0[2] + 24))
  {
    swift_release();
    uint64_t v1 = *(void *)(v0[2] + 24);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
    return v2(v1);
  }
  else
  {
    type metadata accessor for StocksKitCurrencyCache();
    v0[15] = static StocksKitCurrencyCache.shared.getter();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[16] = v4;
    *uint64_t v4 = v0;
    v4[1] = specialized CalculateResultAttributionHandler.darkModeImage();
    uint64_t v5 = v0[11];
    return MEMORY[0x270F13598](v5);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 120);
  swift_task_dealloc();

  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v4 = *(void *)(v1 + 104);
  return MEMORY[0x270FA2498](specialized CalculateResultAttributionHandler.darkModeImage(), v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t KeyPath;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v1 = v0[11];
  swift_release();
  uint64_t v2 = type metadata accessor for StocksKitCurrencyCache.Provider();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v5 = v0[11];
  if (v4 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0[11], &demangling cache variable for type metadata for StocksKitCurrencyCache.Provider?);
  }
  else
  {
    uint64_t v6 = StocksKitCurrencyCache.Provider.logo.getter();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)v0[10];
      uint64_t v8 = v0[7];
      long long v9 = v0[8];
      long long v10 = v0[5];
      uint64_t v11 = v0[6];
      uint64_t v12 = v0[3];
      uint64_t v13 = (uint64_t *)v0[4];
      unint64_t v21 = v0[9];
      uint64_t v22 = v0[2];
      (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v8, *MEMORY[0x263F184F8], v10);
      uint64_t KeyPath = swift_getKeyPath();
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v13 + *(int *)(v12 + 28), v8, v10);
      void *v13 = KeyPath;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v13, (uint64_t)v7 + *(int *)(v9 + 36), &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
      *uint64_t v7 = v6;
      swift_retain();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, v21, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageRenderer<ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>>);
      swift_allocObject();
      ImageRenderer.init(content:)();
      uint64_t v15 = objc_msgSend(self, sel_mainScreen);
      objc_msgSend(v15, sel_scale);

      ImageRenderer.scale.setter();
      uint64_t v16 = ImageRenderer.uiImage.getter();
      swift_release();
      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>);
      uint64_t v17 = *(void **)(v22 + 24);
      *(void *)(v22 + 24) = v16;
    }
  }
  uint64_t v18 = *(void *)(v0[2] + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(uint64_t))v0[1];
  return v19(v18);
}

uint64_t sub_20C794638()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_20C794660()
{
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in CalculateResultAttributionHandler.init()(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in CalculateResultAttributionHandler.init()(a1);
}

uint64_t closure #1 in SynapseLinkingEngine.fetchLinkableItems(limit:excluding:completion:)(unint64_t a1, id a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  unint64_t v8 = a1;
  if (a2)
  {
    id v10 = a2;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)logger);
    id v12 = a2;
    id v13 = a2;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      unint64_t v47 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_getErrorValue();
      uint64_t v18 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, (uint64_t *)&v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v14, v15, "%s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v17, -1, -1);
      int64_t v20 = v16;
      unint64_t v8 = a1;
      MEMORY[0x210550270](v20, -1, -1);
    }
    else
    {
    }
  }
  unint64_t v21 = MEMORY[0x263F8EE78];
  if (!v8) {
    goto LABEL_17;
  }
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = a1;
    unint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    if (v22) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v22 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v22)
    {
LABEL_10:
      unint64_t v47 = v21;
      double v23 = (uint64_t *)&v47;
      specialized ContiguousArray.reserveCapacity(_:)();
      if ((v22 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      uint64_t v43 = a3;
      long long v44 = a5;
      double v24 = self;
      uint64_t v25 = 0;
      unint64_t v26 = v8 & 0xC000000000000001;
      uint64_t v27 = *MEMORY[0x263F7C250];
      do
      {
        if (v26) {
          id v28 = (id)MEMORY[0x21054E050](v25, v8);
        }
        else {
          id v28 = *(id *)(v8 + 8 * v25 + 32);
        }
        long long v29 = v28;
        ++v25;
        long long v30 = (objc_class *)type metadata accessor for SynapseLinkItem();
        id v31 = (char *)objc_allocWithZone(v30);
        *(void *)&v31[OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate + 8] = 0;
        swift_unknownObjectWeakInit();
        *(void *)&v31[OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem] = v29;
        v46.receiver = v31;
        v46.super_class = v30;
        id v32 = v29;
        id v33 = objc_msgSendSuper2(&v46, sel_init);
        id v34 = objc_msgSend(v24, sel_defaultCenter);
        objc_msgSend(v34, sel_addObserver_selector_name_object_, v33, sel_linkPreviewDidFinishLoadingWithNotification_, v27, v32);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        unint64_t v8 = a1;
      }
      while (v22 != v25);
      unint64_t v21 = v47;
      swift_bridgeObjectRelease();
      a3 = v43;
      a5 = v44;
LABEL_17:
      if ((a4 & 1) == 0) {
        goto LABEL_18;
      }
LABEL_29:
      uint64_t v41 = specialized _arrayForceCast<A, B>(_:)(v21);
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRelease();
  if (a4) {
    goto LABEL_29;
  }
LABEL_18:
  double v23 = (uint64_t *)specialized Collection.prefix(_:)(a3, v21, (void (*)(void))type metadata accessor for SynapseLinkItem);
  a3 = v35;
  a4 = v36;
  unint64_t v22 = v37;
  swift_bridgeObjectRelease();
  if (v22)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v39 = swift_dynamicCastClass();
    if (!v39)
    {
      swift_unknownObjectRelease();
      uint64_t v39 = MEMORY[0x263F8EE78];
    }
    uint64_t v40 = *(void *)(v39 + 16);
    swift_release();
    if (!__OFSUB__(v22 >> 1, a4))
    {
      if (v40 == (v22 >> 1) - a4)
      {
        unint64_t v38 = swift_dynamicCastClass();
        if (!v38)
        {
          swift_unknownObjectRelease();
          unint64_t v38 = MEMORY[0x263F8EE78];
        }
        goto LABEL_26;
      }
      goto LABEL_33;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    swift_unknownObjectRelease();
  }
  unint64_t v38 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v23, a3, a4, v22);
LABEL_26:
  swift_unknownObjectRelease();
  uint64_t v41 = specialized _arrayForceCast<A, B>(_:)(v38);
  swift_release();
LABEL_30:
  a5(v41);
  return swift_bridgeObjectRelease();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [SYContentItem]?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SynapseLinkingEngine()
{
  return self;
}

uint64_t protocol witness for LinkingEngine.delegate.setter in conformance SynapseLinkingEngine(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + OBJC_IVAR____TtC8PaperKit20SynapseLinkingEngine_delegate + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void protocol witness for LinkingEngine.fetchLinkableItems(limit:excluding:completion:) in conformance SynapseLinkingEngine(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = *(void **)(v5 + OBJC_IVAR____TtC8PaperKit20SynapseLinkingEngine_engine);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUserActivity);
  isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(unsigned char *)(v12 + 24) = a2 & 1;
  *(void *)(v12 + 32) = a4;
  *(void *)(v12 + 40) = a5;
  void v14[4] = partial apply for closure #1 in SynapseLinkingEngine.fetchLinkableItems(limit:excluding:completion:);
  v14[5] = v12;
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 1107296256;
  void v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed [SYContentItem]?, @guaranteed Error?) -> ();
  v14[3] = &block_descriptor_66;
  id v13 = _Block_copy(v14);
  swift_retain();
  swift_release();
  objc_msgSend(v10, sel_fetchLinkableContentItemsExcludingActivities_completion_, isa, v13);
  _Block_release(v13);
}

uint64_t sub_20C795098()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in SynapseLinkingEngine.fetchLinkableItems(limit:excluding:completion:)(unint64_t a1, void *a2)
{
  return closure #1 in SynapseLinkingEngine.fetchLinkableItems(limit:excluding:completion:)(a1, a2, *(void *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), *(void (**)(void))(v2 + 32));
}

uint64_t block_copy_helper_66(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_66()
{
  return swift_release();
}

uint64_t specialized Collection.prefix(_:)(uint64_t a1, unint64_t a2)
{
  return specialized Collection.prefix(_:)(a1, a2, (void (*)(void))type metadata accessor for ReflowElement);
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, unint64_t a2, void (*a3)(void))
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = a3;
    unint64_t v3 = a2;
    uint64_t v4 = result;
    unint64_t v6 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  __n128 result = swift_bridgeObjectRelease();
LABEL_4:
  if (v7 >= v4) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v7 < 0) {
    uint64_t v8 = v4;
  }
  if (v4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    __n128 result = swift_bridgeObjectRelease();
    if (v11 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    __n128 result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 < v9)
  {
    __break(1u);
    goto LABEL_28;
  }
  if ((v3 & 0xC000000000000001) != 0 && v9)
  {
    v5(0);
    Swift::Int v12 = 0;
    do
    {
      Swift::Int v13 = v12 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v12);
      Swift::Int v12 = v13;
    }
    while (v9 != v13);
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v14;
}

uint64_t NoLinkingEngine.__deallocating_deinit()
{
  outlined destroy of weak AnyContainerCanvasElementView?(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NoLinkingEngine()
{
  return self;
}

uint64_t protocol witness for LinkingEngine.delegate.setter in conformance NoLinkingEngine(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for LinkingEngine.fetchLinkableItems(limit:excluding:completion:) in conformance NoLinkingEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4(MEMORY[0x263F8EE78]);
}

Swift::Void __swiftcall TextToolListViewController.viewDidLoad()()
{
  uint64_t v1 = v0;
  v35.receiver = v0;
  v35.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v35, sel_viewDidLoad);
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_stackView];
  objc_msgSend(v2, sel_setAxis_, 1);
  objc_msgSend(v2, sel_setDistribution_, 0);
  objc_msgSend(v2, sel_setAlignment_, 0);
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v3 = objc_msgSend(v1, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = v3;
  objc_msgSend(v3, sel_addSubview_, v2);

  id v5 = objc_msgSend(v2, sel_bottomAnchor);
  id v6 = objc_msgSend(v1, sel_view);
  if (!v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v7 = v6;
  id v8 = objc_msgSend(v6, sel_safeAreaLayoutGuide);

  id v9 = objc_msgSend(v8, sel_bottomAnchor);
  id v10 = objc_msgSend(v5, sel_constraintEqualToAnchor_, v9);

  LODWORD(v11) = 1144750080;
  objc_msgSend(v10, sel_setPriority_, v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_20C8344C0;
  id v13 = objc_msgSend(v2, sel_topAnchor);
  id v14 = objc_msgSend(v1, sel_view);
  if (!v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  os_log_type_t v15 = v14;
  id v16 = objc_msgSend(v14, sel_safeAreaLayoutGuide);

  id v17 = objc_msgSend(v16, sel_topAnchor);
  id v18 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v17);

  *(void *)(v12 + 32) = v18;
  *(void *)(v12 + 40) = v10;
  id v19 = v10;
  id v20 = objc_msgSend(v2, sel_leadingAnchor);
  id v21 = objc_msgSend(v1, sel_view);
  if (!v21)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v22 = v21;
  id v23 = objc_msgSend(v21, sel_safeAreaLayoutGuide);

  id v24 = objc_msgSend(v23, sel_leadingAnchor);
  id v25 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v24);

  *(void *)(v12 + 48) = v25;
  id v26 = objc_msgSend(v2, sel_trailingAnchor);
  id v27 = objc_msgSend(v1, sel_view);
  if (v27)
  {
    id v28 = v27;
    long long v29 = self;
    id v30 = objc_msgSend(v28, sel_safeAreaLayoutGuide);

    id v31 = objc_msgSend(v30, sel_trailingAnchor);
    id v32 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v31);

    *(void *)(v12 + 56) = v32;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_activateConstraints_, isa);

    TextToolListViewController.updateUI()();
    id v34 = objc_msgSend(self, sel_defaultCenter);
    objc_msgSend(v34, sel_addObserver_selector_name_object_, v1, sel_updatePreferredContentSize, *MEMORY[0x263F83428], 0);

    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t TextToolListViewController.listItemViews.getter()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___listItemViews))
  {
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___listItemViews);
  }
  else
  {
    uint64_t v1 = MEMORY[0x263F8EE78];
    *(void *)(v0 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___listItemViews) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TextToolListViewController.configuredListItemViews()()
{
  uint64_t v1 = v0;
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController_descriptionItemVisible) == 1)
  {
    TextToolListViewController.addTextBoxListItemView.getter(&OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___descriptionListItemView, (uint64_t *)&selRef_didTapDescriptionListItemView_forEvent_, (uint64_t (*)(void *, uint64_t))specialized static TextToolListItemView.newDescriptionListItemView(_:action:));
    MEMORY[0x21054D330]();
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addStickerListItemVisible) == 1)
  {
    id v2 = (id)MGCopyAnswer();
    char v3 = [v2 BOOLValue];

    if ((v3 & 1) == 0)
    {
      TextToolListViewController.addTextBoxListItemView.getter(&OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addStickerListItemView, (uint64_t *)&selRef_didTapAddStickerListItemView_forEvent_, (uint64_t (*)(void *, uint64_t))specialized static TextToolListItemView.newAddStickerListItemView(_:action:));
      MEMORY[0x21054D330]();
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  TextToolListViewController.addTextBoxListItemView.getter(&OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addTextBoxListItemView, (uint64_t *)&selRef_didTapAddTextBoxListItemView_forEvent_, (uint64_t (*)(void *, uint64_t))specialized static TextToolListItemView.newAddTextBoxListItemView(_:action:));
  MEMORY[0x21054D330]();
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController_autoFillFormListItemVisible) == 1)
  {
    TextToolListViewController.addTextBoxListItemView.getter(&OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___autoFillFormListItemView, (uint64_t *)&selRef_didTapAutoFillFormListItemView_forEvent_, (uint64_t (*)(void *, uint64_t))specialized static TextToolListItemView.newAutoFillFormListItemView(_:action:));
    MEMORY[0x21054D330]();
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  TextToolListViewController.addTextBoxListItemView.getter(&OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addSignatureListItemView, (uint64_t *)&selRef_didTapAddSignatureListItemView_forEvent_, (uint64_t (*)(void *, uint64_t))specialized static TextToolListItemView.newAddSignatureListItemView(_:action:));
  MEMORY[0x21054D330]();
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addShapeListItemVisible) == 1)
  {
    TextToolListViewController.addTextBoxListItemView.getter(&OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addShapeListItemView, (uint64_t *)&selRef_didTapAddShapeListItemView_forEvent_, (uint64_t (*)(void *, uint64_t))specialized static TextToolListItemView.newAddShapeListItemView(_:action:));
    MEMORY[0x21054D330]();
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible) == 1)
  {
    TextToolListViewController.addTextBoxListItemView.getter(&OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___opacityListItemView, (uint64_t *)&selRef_didTapOpacityListItemView_forEvent_, (uint64_t (*)(void *, uint64_t))specialized static TextToolListItemView.newOpacityListItemView(_:action:));
    MEMORY[0x21054D330]();
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  return v5;
}

id TextToolListViewController.addTextBoxListItemView.getter(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(void *, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void **)&v3[*a1];
  if (v5)
  {
    id v6 = *(id *)&v3[*a1];
  }
  else
  {
    v15[3] = swift_getObjectType();
    v15[0] = v3;
    uint64_t v9 = *a2;
    id v10 = v3;
    double v11 = (void *)a3(v15, v9);
    outlined destroy of Any?((uint64_t)v15);
    uint64_t v12 = *(void **)&v3[v4];
    *(void *)&v3[v4] = v11;
    id v6 = v11;

    uint64_t v5 = 0;
  }
  id v13 = v5;
  return v6;
}

uint64_t @objc TextToolListViewController.didTapAddSignatureListItemView(_:forEvent:)(char *a1, uint64_t a2, void *a3, void *a4, void (*a5)(void))
{
  uint64_t result = MEMORY[0x210550400](&a1[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_delegate]);
  if (result)
  {
    id v10 = a3;
    id v11 = a4;
    uint64_t v12 = a1;
    a5();

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t @objc TextToolListViewController.didTapDescriptionListItemView(_:forEvent:)(char *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = MEMORY[0x210550400](&a1[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_delegate]);
  if (result)
  {
    uint64_t v13 = result;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v13;
    v19[4] = a6;
    v19[5] = v14;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 1107296256;
    v19[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v19[3] = a7;
    os_log_type_t v15 = _Block_copy(v19);
    id v16 = a3;
    id v17 = a4;
    id v18 = a1;
    swift_unknownObjectRetain();
    swift_release();
    objc_msgSend(v18, sel_dismissViewControllerAnimated_completion_, 1, v15);
    _Block_release(v15);

    return swift_unknownObjectRelease();
  }
  return result;
}

id TextToolListViewController.init(coder:)(void *a1)
{
  id v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit26TextToolListViewController_stackView;
  id v6 = objc_allocWithZone(MEMORY[0x263F82BF8]);
  uint64_t v7 = v2;
  *(void *)&v2[v5] = objc_msgSend(v6, sel_init);
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_minimumItemHeight] = 0x4046000000000000;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_minimumPreferredContentSizeWidth] = 0x406DC00000000000;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_autoFillFormListItemVisible] = 0;
  v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addStickerListItemVisible] = 0;
  v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addShapeListItemVisible] = 0;
  v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible] = 0;
  v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_descriptionItemVisible] = 0;
  v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_graphItemVisible] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___listItemViews] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addTextBoxListItemView] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___autoFillFormListItemView] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addSignatureListItemView] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addStickerListItemView] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___opacityListItemView] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___descriptionListItemView] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addShapeListItemView] = 0;

  v10.receiver = v7;
  v10.super_class = ObjectType;
  id v8 = objc_msgSendSuper2(&v10, sel_initWithCoder_, a1);

  return v8;
}

uint64_t sub_20C7965A8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddGraphWithEvent:)()
{
  return closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddGraphWithEvent:)(*(void *)(v0 + 16));
}

uint64_t block_copy_helper_67(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_67()
{
  return swift_release();
}

void partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectDescriptionWithEvent:)()
{
}

Swift::Void __swiftcall AnalyticsEvent.send()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  if (((*(uint64_t (**)(void))(v1 + 24))() & 1) == 0) {
    (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v3, v2);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v3, v2);
  uint64_t v5 = (void *)MEMORY[0x21054D080](v4);
  swift_bridgeObjectRelease();
  if (AnalyticsEvent.caEventPayload.getter())
  {
    type metadata accessor for NSObject();
    isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    isCGFloat a = 0;
  }
  AnalyticsSendEvent();
}

double protocol witness for AnalyticsEvent.undoEvent() in conformance MagicPaperUsageAutoRefineEvent@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  return result;
}

uint64_t one-time initialization function for $currentAnalyticsEvents()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskLocal<[AnalyticsEvent]>);
  swift_allocObject();
  uint64_t result = TaskLocal.init(wrappedValue:)();
  $currentAnalyticsEvents = result;
  return result;
}

uint64_t AnalyticsEvent.caEventPayload.getter()
{
  type metadata accessor for AnalyticsEventEncoder();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v1);
  *(unsigned char *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9A0]), sel_init);
  uint64_t v2 = specialized AnalyticsEventEncoder.encode<A>(_:)();
  swift_bridgeObjectRetain();
  swift_release();
  return v2;
}

uint64_t one-time initialization function for analytics()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.analytics);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.analytics);
  return Logger.init(subsystem:category:)();
}

void *LinkLayout.createView<A>(in:canvas:parent:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v39[0] = a4;
  v39[1] = a5;
  id v41 = a3;
  id v42 = a2;
  v39[2] = a1;
  uint64_t v6 = type metadata accessor for CRKeyPath();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Link>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v40 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x270FA5388](v17);
  id v20 = (char *)v39 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v5, v6, v18);
  uint64_t v21 = type metadata accessor for Link();
  uint64_t v22 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_12(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<Link> and conformance Ref<A>();
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  CGFloat v45 = &protocol witness table for Link;
  swift_getKeyPath();
  id v23 = v41;
  id v24 = v41;
  id v25 = v42;
  id v26 = v42;
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat x = v46.origin.x;
  CGFloat y = v46.origin.y;
  CGFloat width = v46.size.width;
  CGFloat height = v46.size.height;
  double MinX = CGRectGetMinX(v46);
  v47.origin.CGFloat x = x;
  v47.origin.CGFloat y = y;
  v47.size.CGFloat width = width;
  v47.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v47);
  v48.origin.CGFloat x = x;
  v48.origin.CGFloat y = y;
  v48.size.CGFloat width = width;
  v48.size.CGFloat height = height;
  double v33 = CGRectGetWidth(v48);
  v49.origin.CGFloat x = x;
  v49.origin.CGFloat y = y;
  v49.size.CGFloat width = width;
  v49.size.CGFloat height = height;
  double v34 = CGRectGetHeight(v49);
  uint64_t v35 = (uint64_t)v40;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v20, v14);
  id v36 = objc_allocWithZone((Class)type metadata accessor for LinkCanvasElementView());
  unint64_t v37 = LinkCanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(v35, v25, v23, MinX, MinY, v33, v34);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  return v37;
}

uint64_t closure #1 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, uint64_t a7, void (*a8)(char *), uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  v40[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>?);
  MEMORY[0x270FA5388](v25 - 8);
  id v27 = (char *)v40 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    goto LABEL_6;
  }
  self;
  id v28 = (void *)swift_dynamicCastObjCClass();
  if (!v28) {
    goto LABEL_6;
  }
  v40[0] = 0;
  id v29 = objc_msgSend(v28, sel_dataRepresentationWithError_, v40);
  id v30 = v40[0];
  if (!v29)
  {
    uint64_t v35 = v30;
    id v36 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_6:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v27, 1, 1, v37);
    a8(v27);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for Capsule<Link>?);
  }
  HIDWORD(v39) = a14 & 1;
  uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v33 = v32;

  LOBYTE(v40[0]) = a11;
  static LinkLayout.load(_:canvasFrame:frame:rotation:anchor:offset:)(v31, v33, a10, (unsigned __int8 *)v40, *(double *)&a12, *(double *)&a13, SBYTE4(v39), (uint64_t)v27, a2, a3, a4, a5, a6);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v27, 0, 1, v34);
  a8(v27);
  outlined consume of Data._Representation(v31, v33);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for Capsule<Link>?);
}

uint64_t static LinkLayout.load(_:canvasFrame:frame:rotation:anchor:offset:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, double a5@<X4>, double a6@<X5>, char a7@<W6>, uint64_t a8@<X8>, CGFloat a9@<D0>, CGFloat a10@<D1>, CGFloat a11@<D2>, CGFloat a12@<D3>, double a13@<D4>)
{
  double v49 = a5;
  uint64_t v57 = a8;
  outlined init with take of CGRect?(a3, (uint64_t)v60);
  double v24 = *(double *)v60;
  double v25 = *(double *)&v60[1];
  uint64_t v26 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v26 - 8);
  long long v56 = (char *)&v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  uint64_t v53 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v52 = (char *)&v48 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v50 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  id v30 = (char *)&v48 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&uint64_t v31 = COERCE_DOUBLE(type metadata accessor for Link());
  MEMORY[0x270FA5388](v31);
  uint64_t v55 = (uint64_t)&v48 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)&v48 - v34;
  int v36 = *a4;
  outlined init with take of CGRect?(a3, (uint64_t)v61);
  double y = 0.0;
  if (v61[32])
  {
    double v24 = 0.0;
    double v25 = 0.0;
  }
  if (one-time initialization token for linkSize != -1) {
    swift_once();
  }
  double x = 0.0;
  if ((~*(void *)&v24 & 0x7FF0000000000000) != 0)
  {
    if ((*(void *)&v25 & 0x7FF0000000000000) == 0x7FF0000000000000) {
      double y = 0.0;
    }
    else {
      double y = v25;
    }
    if ((*(void *)&v25 & 0x7FF0000000000000) == 0x7FF0000000000000) {
      double x = 0.0;
    }
    else {
      double x = v24;
    }
  }
  CGFloat height = *((double *)&static UIConstants.linkSize + 1);
  CGFloat width = *(double *)&static UIConstants.linkSize;
  if (v36 != 9)
  {
    LOBYTE(v58) = v36;
    v62.origin.double x = a9;
    v62.origin.double y = a10;
    v62.size.CGFloat width = a11;
    v62.size.CGFloat height = a12;
    __C::CGRect v63 = CGRect.position(in:anchor:)(v62, (PaperKit::LayoutAnchor)&v58);
    double x = v63.origin.x;
    double y = v63.origin.y;
    CGFloat width = v63.size.width;
    CGFloat height = v63.size.height;
  }
  double v41 = v49;
  double v42 = a6;
  if (a7) {
    double v42 = -0.0;
  }
  double v43 = v42 + y;
  if (a7) {
    double v41 = -0.0;
  }
  double v44 = v41 + x;
  long long v59 = 0u;
  long long v58 = 0u;
  outlined copy of Data._Representation(a1, a2);
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_12((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  uint64_t v48 = a1;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v58 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  CGFloat v45 = &v35[*(int *)(v31 + 24)];
  long long v58 = xmmword_20C8352B0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type Data? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  double v49 = *(double *)&v31;
  *(void *)&v35[*(int *)(v31 + 28)] = MEMORY[0x263F8EE80];
  *(double *)&long long v58 = v44;
  *((double *)&v58 + 1) = v43;
  *(CGFloat *)&long long v59 = width;
  *((CGFloat *)&v59 + 1) = height;
  CRRegister.init(_:)();
  (*(void (**)(char *, char *, uint64_t))(v50 + 40))(v35, v30, v51);
  *(void *)&long long v58 = v48;
  *((void *)&v58 + 1) = a2;
  CGRect v46 = v52;
  CRRegister.init(_:)();
  (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v45, v46, v54);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  if (*(double *)&v58 != a13)
  {
    *(double *)&long long v58 = a13;
    CRRegister.wrappedValue.setter();
  }
  outlined init with copy of Link((uint64_t)v35, v55);
  static CRKeyPath.unique.getter();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_12(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  Capsule<>.init(_:id:)();
  return outlined destroy of Link((uint64_t)v35);
}

uint64_t closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, uint64_t a7, void (*a8)(char *), uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, char a14)
{
  double v42 = *(double *)&a12;
  double v43 = *(double *)&a13;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>?);
  MEMORY[0x270FA5388](v23 - 8);
  double v25 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)&v42 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for URL();
  uint64_t v30 = *(void *)(v29 - 8);
  double v31 = MEMORY[0x270FA5388](v29);
  uint64_t v33 = (char *)&v42 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v30 + 56))(v28, 1, 1, v29, v31);
    goto LABEL_6;
  }
  uint64_t v45 = a1;
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSItemProviderReading);
  int v34 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v28, v34 ^ 1u, 1, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
  {
LABEL_6:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for URL?);
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v33, v28, v29);
  uint64_t v35 = specialized static Link.synapseDataRepresentation(from:)();
  if (v36 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v29);
LABEL_7:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v25, 1, 1, v37);
    a8(v25);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for Capsule<Link>?);
  }
  uint64_t v39 = v35;
  unint64_t v40 = v36;
  unsigned __int8 v44 = a11;
  static LinkLayout.load(_:canvasFrame:frame:rotation:anchor:offset:)(v35, v36, a10, &v44, v42, v43, a14 & 1, (uint64_t)v25, a2, a3, a4, a5, a6);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v25, 0, 1, v41);
  a8(v25);
  outlined consume of Data?(v39, v40);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for Capsule<Link>?);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v33, v29);
}

uint64_t closure #1 in static LinkLayout.addLinkItem(_:in:completion:)(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, void, void, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x263F8EED0] & *a1)
                                                                                                + 0x490);
  uint64_t v6 = type metadata accessor for Link();
  uint64_t v7 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_12(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  uint64_t result = v5(a2, 0, 0, 0, v6, v7, &protocol witness table for Link);
  if (a3) {
    return a3(result);
  }
  return result;
}

uint64_t specialized static LinkLayout.canHandle(itemProvider:)(void *a1)
{
  uint64_t v2 = type metadata accessor for UTType();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, *MEMORY[0x263F7C260], v4)) {
    return 1;
  }
  type metadata accessor for SYContentItem();
  if (objc_msgSend(a1, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata())) {
    return 1;
  }
  static UTType.url.getter();
  uint64_t v8 = UTType.identifier.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v11 = (void *)MEMORY[0x21054D080](v8, v10);
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v11);

  return (uint64_t)v7;
}

uint64_t outlined destroy of Link(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Link();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C797D7C);
}

uint64_t sub_20C797D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for LinkLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C797DFC);
}

uint64_t sub_20C797DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for LinkLayout()
{
  uint64_t result = type metadata singleton initialization cache for LinkLayout;
  if (!type metadata singleton initialization cache for LinkLayout) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t associated type witness table accessor for LayoutItemProvider.Model : CRDT in LinkLayout()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_12(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
}

_UNKNOWN **associated type witness table accessor for LayoutItemProvider.Model : CanvasElement in LinkLayout()
{
  return &protocol witness table for Link;
}

unint64_t lazy protocol witness table accessor for type Ref<Link> and conformance Ref<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Ref<Link> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<Link> and conformance Ref<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<Link>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<Link> and conformance Ref<A>);
  }
  return result;
}

uint64_t sub_20C797F70()
{
  return 24;
}

__n128 sub_20C797F7C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t GenerativeModelAvailabilityObserver.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  long long v56 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for GenerativeModelsAvailability.Availability();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for GenerativeModelsAvailability.Parameters();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for GenerativeModelsAvailability();
  uint64_t v49 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v54 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v48 - v16;
  uint64_t v53 = v18;
  MEMORY[0x270FA5388](v15);
  id v20 = (char *)&v48 - v19;
  *(void *)(v1 + 16) = 3;
  GenerativeModelsAvailability.Parameters.init(useCaseIdentifier:)();
  static GenerativeModelsAvailability.current(parameters:)();
  uint64_t v21 = v11;
  uint64_t v22 = v20;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v21, v8);
  GenerativeModelsAvailability.availability.getter();
  uint64_t v23 = specialized GenerativeModelAvailabilityObserver.statusFromAvailability(_:)((uint64_t)v7);
  uint64_t v51 = v24;
  unint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v57 = v1;
  *(void *)(v1 + 16) = v23;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)generativeLogger);
  uint64_t v28 = v49;
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  uint64_t v55 = v22;
  uint64_t v52 = v29;
  v29(v17, v22, v12);
  swift_bridgeObjectRetain();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v59 = v33;
    *(_DWORD *)uint64_t v32 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v51, v26, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 12) = 1024;
    BOOL v34 = GenerativeModelsAvailability.shouldShowEnrollmentScreen()();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v28 + 8);
    uint64_t v50 = (v28 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v51 = v35;
    v35(v17, v12);
    LODWORD(v58) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v30, v31, "Generation Model Availability initialized to %s for this device. Show enrollment screen: %{BOOL}d", (uint8_t *)v32, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v33, -1, -1);
    MEMORY[0x210550270](v32, -1, -1);
  }
  else
  {
    unint64_t v36 = *(void (**)(char *, uint64_t))(v28 + 8);
    uint64_t v50 = (v28 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v51 = v36;
    v36(v17, v12);

    swift_bridgeObjectRelease_n();
  }
  uint64_t v37 = v12;
  uint64_t v38 = type metadata accessor for TaskPriority();
  uint64_t v39 = (uint64_t)v56;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v56, 1, 1, v38);
  uint64_t v40 = swift_allocObject();
  uint64_t v41 = v57;
  swift_weakInit();
  double v42 = v54;
  double v43 = v55;
  v52(v54, v55, v37);
  unint64_t v44 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  unint64_t v45 = (v53 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = 0;
  *(void *)(v46 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v46 + v44, v42, v37);
  *(void *)(v46 + v45) = v40;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v39, (uint64_t)&async function pointer to partial apply for closure #1 in GenerativeModelAvailabilityObserver.init(), v46);
  swift_release();
  v51(v43, v37);
  return v41;
}

uint64_t closure #1 in GenerativeModelAvailabilityObserver.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  uint64_t v6 = type metadata accessor for GenerativeModelsAvailability.Availability();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeModelsAvailability.Availability?);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GenerativeModelsAvailability.ChangeSequence();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for GenerativeModelsAvailability.ChangeSequence.Iterator();
  v5[15] = v8;
  v5[16] = *(void *)(v8 - 8);
  v5[17] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in GenerativeModelAvailabilityObserver.init(), 0, 0);
}

uint64_t closure #1 in GenerativeModelAvailabilityObserver.init()()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  GenerativeModelsAvailability.changes.getter();
  GenerativeModelsAvailability.ChangeSequence.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess();
  uint64_t v4 = lazy protocol witness table accessor for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel(&lazy protocol witness table cache variable for type GenerativeModelsAvailability.ChangeSequence.Iterator and conformance GenerativeModelsAvailability.ChangeSequence.Iterator, MEMORY[0x263F41180]);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[18] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in GenerativeModelAvailabilityObserver.init();
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[11];
  return MEMORY[0x270FA1E80](v7, v6, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in GenerativeModelAvailabilityObserver.init();
  }
  else {
    uint64_t v2 = closure #1 in GenerativeModelAvailabilityObserver.init();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(void);
  uint64_t v10;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[10], v1, v2);
    Strong = swift_weakLoadStrong();
    v0[20] = Strong;
    if (Strong)
    {
      uint64_t v5 = (void *)swift_task_alloc();
      v0[21] = v5;
      *uint64_t v5 = v0;
      v5[1] = closure #1 in GenerativeModelAvailabilityObserver.init();
      uint64_t v6 = v0[10];
      uint64_t v7 = v0[6];
      return GenerativeModelAvailabilityObserver.update(to:for:)(v6, v7);
    }
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  }
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 40) = *(void *)(v0 + 152);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x263F8E628];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x263F8E658];
  return MEMORY[0x270FA0678](v2, v1, v3);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in GenerativeModelAvailabilityObserver.init(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = lazy protocol witness table accessor for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel(&lazy protocol witness table cache variable for type GenerativeModelsAvailability.ChangeSequence.Iterator and conformance GenerativeModelsAvailability.ChangeSequence.Iterator, MEMORY[0x263F41180]);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[18] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in GenerativeModelAvailabilityObserver.init();
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[11];
  return MEMORY[0x270FA1E80](v7, v6, v4);
}

uint64_t GenerativeModelAvailabilityObserver.update(to:for:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for GenerativeModelsAvailability();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](GenerativeModelAvailabilityObserver.update(to:for:), 0, 0);
}

uint64_t GenerativeModelAvailabilityObserver.update(to:for:)()
{
  uint64_t v26 = v0;
  uint64_t v1 = specialized GenerativeModelAvailabilityObserver.statusFromAvailability(_:)(*(void *)(v0 + 24));
  uint64_t v24 = v2;
  unint64_t v4 = v3;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 32);
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)generativeLogger);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v8, v7);
  swift_bridgeObjectRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v14 = *(void *)(v0 + 56);
  uint64_t v13 = *(void *)(v0 + 64);
  uint64_t v15 = *(void *)(v0 + 48);
  if (v12)
  {
    uint64_t v23 = v1;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v25 = v22;
    *(_DWORD *)uint64_t v16 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v4, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 12) = 1024;
    BOOL v17 = GenerativeModelsAvailability.shouldShowEnrollmentScreen()();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    *(_DWORD *)(v0 + 72) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v10, v11, "Generation Model Availability changed to %s for this device. Should show enrollment screen: %{BOOL}d", (uint8_t *)v16, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v22, -1, -1);
    uint64_t v18 = v16;
    uint64_t v1 = v23;
    MEMORY[0x210550270](v18, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v14 + 8))(*(void *)(v0 + 64), *(void *)(v0 + 48));
    swift_bridgeObjectRelease_n();
  }

  *(void *)(*(void *)(v0 + 40) + 16) = v1;
  id v19 = objc_msgSend(self, sel_sharedInstance);
  objc_msgSend(v19, sel_handleAvailabilityChange_, v1);

  swift_task_dealloc();
  id v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t GenerativeModelAvailabilityObserver.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GenerativeModelAvailabilityObserver()
{
  return self;
}

uint64_t type metadata accessor for EnrollmentViewController(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for EnrollmentViewController);
}

uint64_t type metadata completion function for EnrollmentViewController()
{
  return swift_initClassMetadata2();
}

void *one-time initialization function for generativeModelAvailabilityObserver()
{
  type metadata accessor for GenerativeModelAvailabilityObserver();
  swift_allocObject();
  __n128 result = (void *)GenerativeModelAvailabilityObserver.init()();
  generativeModelAvailabilityObserver = result;
  return result;
}

uint64_t EnrollmentViewController.ViewModel.options.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel((unint64_t *)&lazy protocol witness table cache variable for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel, (void (*)(uint64_t))type metadata accessor for EnrollmentViewController.ViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtCC8PaperKitP33_54D3ACA847AFA52EC5CA5D25834A254524EnrollmentViewController9ViewModel__options;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for EnrollmentViewOptions();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t key path getter for EnrollmentViewController.ViewModel.options : EnrollmentViewController.ViewModel@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel((unint64_t *)&lazy protocol witness table cache variable for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel, (void (*)(uint64_t))type metadata accessor for EnrollmentViewController.ViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtCC8PaperKitP33_54D3ACA847AFA52EC5CA5D25834A254524EnrollmentViewController9ViewModel__options;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for EnrollmentViewOptions();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t key path setter for EnrollmentViewController.ViewModel.options : EnrollmentViewController.ViewModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for EnrollmentViewOptions();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v6);
  uint64_t v9 = *a2;
  swift_getKeyPath();
  uint64_t v12 = v9;
  uint64_t v13 = v8;
  uint64_t v14 = v9;
  lazy protocol witness table accessor for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel((unint64_t *)&lazy protocol witness table cache variable for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel, (void (*)(uint64_t))type metadata accessor for EnrollmentViewController.ViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t closure #1 in EnrollmentViewController.ViewModel.options.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtCC8PaperKitP33_54D3ACA847AFA52EC5CA5D25834A254524EnrollmentViewController9ViewModel__options;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for EnrollmentViewOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess();
}

uint64_t EnrollmentViewController.ViewModel.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC8PaperKitP33_54D3ACA847AFA52EC5CA5D25834A254524EnrollmentViewController9ViewModel__options;
  uint64_t v2 = type metadata accessor for EnrollmentViewOptions();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCC8PaperKitP33_54D3ACA847AFA52EC5CA5D25834A254524EnrollmentViewController9ViewModel___observationRegistrar;
  uint64_t v4 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance();
}

uint64_t EnrollmentViewController.EnrollmentView.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EnrollmentViewOptions();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = a1;
  v11[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<EnrollmentViewController.ViewModel>);
  State.wrappedValue.getter();
  uint64_t v8 = v11[3];
  swift_getKeyPath();
  v11[0] = v8;
  lazy protocol witness table accessor for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel((unint64_t *)&lazy protocol witness table cache variable for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel, (void (*)(uint64_t))type metadata accessor for EnrollmentViewController.ViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v9 = v8 + OBJC_IVAR____TtCC8PaperKitP33_54D3ACA847AFA52EC5CA5D25834A254524EnrollmentViewController9ViewModel__options;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  swift_release();
  return EnrollmentView.init(useCaseIdentifier:options:)();
}

uint64_t protocol witness for View.body.getter in conformance EnrollmentViewController.EnrollmentView()
{
  return EnrollmentViewController.EnrollmentView.body.getter(*v0, v0[1]);
}

void @objc EnrollmentViewController.init(coder:)(char *a1, uint64_t a2, void *a3)
{
  *(void *)&a1[direct field offset for EnrollmentViewController.viewModel] = 0;
  id v4 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t EnrollmentViewController.__ivar_destroyer()
{
  return swift_release();
}

uint64_t @objc EnrollmentViewController.__ivar_destroyer()
{
  return swift_release();
}

void vtable thunk for UIHostingController.__allocating_init(rootView:) dispatching to EnrollmentViewController.__allocating_init(rootView:)()
{
}

void vtable thunk for UIHostingController.__allocating_init(coder:rootView:) dispatching to EnrollmentViewController.__allocating_init(coder:rootView:)()
{
}

uint64_t ObjC metadata update function for EnrollmentViewController()
{
  return type metadata accessor for EnrollmentViewController(0);
}

uint64_t ObjC metadata update function for EnrollmentViewController.ViewModel()
{
  return type metadata accessor for EnrollmentViewController.ViewModel(0);
}

uint64_t type metadata accessor for EnrollmentViewController.ViewModel(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for EnrollmentViewController.ViewModel);
}

uint64_t type metadata completion function for EnrollmentViewController.ViewModel()
{
  uint64_t result = type metadata accessor for EnrollmentViewOptions();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ObservationRegistrar();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

char *EnrollmentContainerViewController.init(enrollmentViewController:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = type metadata accessor for EnrollmentViewOptions();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR____TtC8PaperKitP33_54D3ACA847AFA52EC5CA5D25834A254533EnrollmentContainerViewController_enrollmentViewController] = a1;
  v21.receiver = v1;
  v21.super_class = ObjectType;
  id v8 = a1;
  uint64_t v9 = (char *)objc_msgSendSuper2(&v21, sel_initWithNibName_bundle_, 0, 0);
  uint64_t v10 = *(char **)&v9[OBJC_IVAR____TtC8PaperKitP33_54D3ACA847AFA52EC5CA5D25834A254533EnrollmentContainerViewController_enrollmentViewController];
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = *(void *)&v10[direct field offset for EnrollmentViewController.viewModel];
  if (v12)
  {
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = partial apply for closure #1 in EnrollmentContainerViewController.init(enrollmentViewController:);
    *(void *)(v13 + 24) = v11;
    id v19 = v10;
    swift_retain_n();
    uint64_t v18 = v9;
    swift_retain();
    EnrollmentViewOptions.init(onDismissal:)();
    uint64_t KeyPath = swift_getKeyPath();
    id v17 = v8;
    MEMORY[0x270FA5388](KeyPath);
    *(&v16 - 2) = v12;
    *(&v16 - 1) = (uint64_t)v7;
    uint64_t v20 = v12;
    lazy protocol witness table accessor for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel((unint64_t *)&lazy protocol witness table cache variable for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel, (void (*)(uint64_t))type metadata accessor for EnrollmentViewController.ViewModel);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

    swift_release_n();
    swift_release();
  }
  else
  {
    swift_release();
  }
  return v9;
}

void closure #1 in EnrollmentContainerViewController.init(enrollmentViewController:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  unint64_t v2 = (void *)MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    objc_msgSend(v2, sel_dismissViewControllerAnimated_completion_, 1, 0);
  }
}

void EnrollmentContainerViewController.viewDidLoad()()
{
  uint64_t v1 = v0;
  v44.receiver = v0;
  v44.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v44, sel_viewDidLoad);
  uint64_t v2 = OBJC_IVAR____TtC8PaperKitP33_54D3ACA847AFA52EC5CA5D25834A254533EnrollmentContainerViewController_enrollmentViewController;
  objc_msgSend(v0, sel_addChildViewController_, *(void *)&v0[OBJC_IVAR____TtC8PaperKitP33_54D3ACA847AFA52EC5CA5D25834A254533EnrollmentContainerViewController_enrollmentViewController]);
  id v3 = objc_msgSend(v0, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = v3;
  id v5 = objc_msgSend(*(id *)&v1[v2], sel_view);
  if (!v5)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = v5;
  objc_msgSend(v4, sel_addSubview_, v5);

  id v7 = objc_msgSend(*(id *)&v1[v2], sel_view);
  if (!v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v8 = v7;
  objc_msgSend(v7, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_20C8344C0;
  id v10 = objc_msgSend(*(id *)&v1[v2], sel_view);
  if (!v10)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v11 = v10;
  id v12 = objc_msgSend(v10, sel_topAnchor);

  id v13 = objc_msgSend(v1, sel_view);
  if (!v13)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v14 = v13;
  id v15 = objc_msgSend(v13, sel_topAnchor);

  id v16 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v15);
  *(void *)(v9 + 32) = v16;
  id v17 = objc_msgSend(*(id *)&v1[v2], sel_view);
  if (!v17)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v18 = v17;
  id v19 = objc_msgSend(v17, sel_leadingAnchor);

  id v20 = objc_msgSend(v1, sel_view);
  if (!v20)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  objc_super v21 = v20;
  id v22 = objc_msgSend(v20, sel_leadingAnchor);

  id v23 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v22);
  *(void *)(v9 + 40) = v23;
  id v24 = objc_msgSend(*(id *)&v1[v2], sel_view);
  if (!v24)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v25 = v24;
  id v26 = objc_msgSend(v24, sel_trailingAnchor);

  id v27 = objc_msgSend(v1, sel_view);
  if (!v27)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v28 = v27;
  id v29 = objc_msgSend(v27, sel_trailingAnchor);

  id v30 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v29);
  *(void *)(v9 + 48) = v30;
  id v31 = objc_msgSend(*(id *)&v1[v2], sel_view);
  if (!v31)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v32 = v31;
  id v33 = objc_msgSend(v31, sel_bottomAnchor);

  id v34 = objc_msgSend(v1, sel_view);
  if (!v34)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v35 = v34;
  unint64_t v36 = self;
  id v37 = objc_msgSend(v35, sel_bottomAnchor);

  id v38 = objc_msgSend(v33, sel_constraintEqualToAnchor_, v37);
  *(void *)(v9 + 56) = v38;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v36, sel_activateConstraints_, isa);

  objc_msgSend(*(id *)&v1[v2], sel_didMoveToParentViewController_, v1);
  id v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82A20]), sel_initWithDelegate_, v1);
  id v41 = objc_msgSend(v1, sel_view);
  if (v41)
  {
    double v42 = v41;
    objc_msgSend(v41, sel_addInteraction_, v40);

    id v43 = objc_msgSend(self, sel_defaultCenter);
    objc_msgSend(v43, sel_addObserver_selector_name_object_, v1, sel_toolPickerWillShow_, *MEMORY[0x263F14D08], 0);

    return;
  }
LABEL_25:
  __break(1u);
}

void EnrollmentContainerViewController.viewDidAppear(_:)(char a1)
{
  v7.receiver = v1;
  v7.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v7, sel_viewDidAppear_, a1 & 1);
  id v3 = objc_msgSend(v1, sel_viewIfLoaded);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = objc_msgSend(v3, sel_window);

    if (v5)
    {
      id v6 = objc_msgSend(self, sel_activeToolPickerForWindow_, v5);

      if (v6)
      {
        if (objc_msgSend(v6, sel_isVisible)) {
          objc_msgSend(v1, sel_becomeFirstResponder);
        }
      }
    }
  }
}

void EnrollmentContainerViewController.viewDidDisappear(_:)(char a1)
{
  v7.receiver = v1;
  v7.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v7, sel_viewDidDisappear_, a1 & 1);
  if (objc_msgSend(v1, sel_isBeingDismissed))
  {
    id v3 = objc_msgSend(v1, sel_viewIfLoaded);
    if (v3)
    {
      uint64_t v4 = v3;
      id v5 = objc_msgSend(v3, sel_window);

      if (v5)
      {
        id v6 = objc_msgSend(self, sel_activeToolPickerForWindow_, v5);

        if (v6)
        {
          objc_msgSend(v6, sel_setKeyboardSceneDelegateVisibilityObserver_, 0);
        }
      }
    }
  }
}

void EnrollmentContainerViewController.toolPickerWillShow(_:)()
{
  uint64_t v1 = v0;
  Notification.object.getter();
  if (v10)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKToolPicker);
    if (swift_dynamicCast()) {
      uint64_t v2 = v8;
    }
    else {
      uint64_t v2 = 0;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
    uint64_t v2 = 0;
  }
  id v3 = objc_msgSend(v0, sel_viewIfLoaded);
  id v4 = v3;
  if (!v3)
  {
LABEL_9:
    if (v2) {
      goto LABEL_10;
    }
LABEL_14:
    if (v4)
    {

      return;
    }
    goto LABEL_16;
  }
  id v5 = objc_msgSend(v3, sel_window);

  if (v5)
  {
    id v4 = objc_msgSend(self, sel_activeToolPickerForWindow_, v5);

    goto LABEL_9;
  }
  id v4 = 0;
  if (!v2) {
    goto LABEL_14;
  }
LABEL_10:
  if (!v4)
  {

    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKToolPicker);
  id v6 = v2;
  char v7 = static NSObject.== infix(_:_:)();

  if (v7) {
LABEL_16:
  }
    objc_msgSend(v1, sel_dismissViewControllerAnimated_completion_, 1, 0);
}

uint64_t type metadata accessor for EnrollmentContainerViewController()
{
  return self;
}

BOOL @objc static PKGenerationModelAvailabilityController.shouldShowEnrollmentScreen()()
{
  return specialized static PKGenerationModelAvailabilityController.shouldShowEnrollmentScreen()();
}

char *static PKGenerationModelAvailabilityController.enrollmentScreenViewController()()
{
  if (!objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_shouldShowEnrollmentScreen)) {
    return 0;
  }
  uint64_t v0 = (char *)objc_allocWithZone((Class)type metadata accessor for EnrollmentViewController(0));
  *(void *)&v0[direct field offset for EnrollmentViewController.viewModel] = 0;
  type metadata accessor for EnrollmentViewController.ViewModel(0);
  uint64_t v1 = swift_allocObject();
  EnrollmentViewOptions.init(onDismissal:)();
  ObservationRegistrar.init()();
  swift_retain();
  State.init(wrappedValue:)();
  uint64_t v2 = (char *)UIHostingController.init(rootView:)();
  *(void *)&v2[direct field offset for EnrollmentViewController.viewModel] = v1;
  swift_release();
  id v3 = objc_allocWithZone((Class)type metadata accessor for EnrollmentContainerViewController());
  return EnrollmentContainerViewController.init(enrollmentViewController:)(v2);
}

char *@objc static PKGenerationModelAvailabilityController.enrollmentScreenViewController()()
{
  swift_getObjCClassMetadata();
  uint64_t v0 = static PKGenerationModelAvailabilityController.enrollmentScreenViewController()();
  return v0;
}

void *type metadata accessor for EnrollmentViewController.EnrollmentView()
{
  return &unk_26C162280;
}

uint64_t associated type witness table accessor for View.Body : View in EnrollmentViewController.EnrollmentView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in EnrollmentViewController.ViewModel.options.setter()
{
  return closure #1 in EnrollmentViewController.ViewModel.options.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t @objc closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()()
{
  if (one-time initialization token for generativeModelAvailabilityObserver != -1) {
    swift_once();
  }
  uint64_t v1 = *(void (***)(void, void))(v0 + 16);
  v1[2](v1, *((void *)generativeModelAvailabilityObserver + 2));
  _Block_release(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_20C79AB58()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C79AB98()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t specialized GenerativeModelAvailabilityObserver.statusFromAvailability(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GenerativeModelsAvailability.Availability.RestrictedInfo();
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  MEMORY[0x270FA5388](v2);
  id v31 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo();
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v38 = v4;
  MEMORY[0x270FA5388](v4);
  unint64_t v36 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for GenerativeModelsAvailability.Availability();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v35 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  id v12 = (char *)&v31 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v31 - v13;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v40 = a1;
  v39((char *)&v31 - v13, a1, v6);
  id v15 = *(uint64_t (**)(char *, uint64_t))(v7 + 88);
  int v16 = v15(v14, v6);
  int v17 = *MEMORY[0x263F41150];
  id v34 = *(void (**)(char *, uint64_t))(v7 + 8);
  v34(v14, v6);
  if (v16 == v17) {
    return 0;
  }
  id v20 = v39;
  uint64_t v19 = v40;
  v39(v12, v40, v6);
  if (v15(v12, v6) == *MEMORY[0x263F40FA8])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v12, v6);
    id v22 = v36;
    uint64_t v21 = v37;
    uint64_t v23 = v38;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v36, v12, v38);
    strcpy((char *)v41, "unavailable ");
    BYTE1(v41[3]) = 0;
    HIWORD(v41[3]) = -5120;
    lazy protocol witness table accessor for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel((unint64_t *)&lazy protocol witness table cache variable for type GenerativeModelsAvailability.Availability.UnavailableInfo and conformance GenerativeModelsAvailability.Availability.UnavailableInfo, MEMORY[0x263F41110]);
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v23);
    return 1;
  }
  else
  {
    uint64_t v25 = v34;
    v34(v12, v6);
    id v26 = v35;
    v20(v35, v19, v6);
    if (v15(v26, v6) == *MEMORY[0x263F40F98])
    {
      (*(void (**)(char *, uint64_t))(v7 + 96))(v26, v6);
      uint64_t v28 = v31;
      uint64_t v27 = v32;
      uint64_t v29 = v33;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v31, v26, v33);
      strcpy((char *)v41, "restricted ");
      v41[3] = -352321536;
      lazy protocol witness table accessor for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel((unint64_t *)&lazy protocol witness table cache variable for type GenerativeModelsAvailability.Availability.RestrictedInfo and conformance GenerativeModelsAvailability.Availability.RestrictedInfo, MEMORY[0x263F41000]);
      v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
      return 2;
    }
    else
    {
      v25(v26, v6);
      return 3;
    }
  }
}

uint64_t sub_20C79B0DC()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C79B114()
{
  uint64_t v1 = type metadata accessor for GenerativeModelsAvailability();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in GenerativeModelAvailabilityObserver.init()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for GenerativeModelsAvailability() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in GenerativeModelAvailabilityObserver.init()(a1, v6, v7, v8, v9);
}

uint64_t lazy protocol witness table accessor for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20C79B368()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in EnrollmentContainerViewController.init(enrollmentViewController:)()
{
  closure #1 in EnrollmentContainerViewController.init(enrollmentViewController:)(v0);
}

BOOL specialized static PKGenerationModelAvailabilityController.shouldShowEnrollmentScreen()()
{
  uint64_t v0 = type metadata accessor for GenerativeModelsAvailability.Parameters();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for GenerativeModelsAvailability();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v9 = (void *)MEMORY[0x21054D080](0xD00000000000002CLL, 0x800000020C85F5A0);
  unsigned __int8 v10 = objc_msgSend(v8, sel_BOOLForKey_, v9);

  if (v10)
  {
    return 1;
  }
  else
  {
    GenerativeModelsAvailability.Parameters.init(useCaseIdentifier:)();
    static GenerativeModelsAvailability.current(parameters:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    Swift::Bool v11 = GenerativeModelsAvailability.shouldShowEnrollmentScreen()();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v11;
}

uint64_t sub_20C79B5B8()
{
  return lazy protocol witness table accessor for type EnrollmentViewController.ViewModel and conformance EnrollmentViewController.ViewModel((unint64_t *)&lazy protocol witness table cache variable for type EnrollmentView and conformance EnrollmentView, MEMORY[0x263F408E0]);
}

uint64_t closure #1 in EnrollmentViewController.ViewModel.options.setterpartial apply()
{
  return partial apply for closure #1 in EnrollmentViewController.ViewModel.options.setter();
}

uint64_t specialized Sequence.flatMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2)
{
  void (*v46)(uint64_t *__return_ptr, char *);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  uint64_t v46 = a1;
  CGRect v47 = a2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v3 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  unint64_t v45 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  Swift::Bool v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v38 = *(void *)(v12 - 8);
  double v13 = MEMORY[0x270FA5388](v12);
  id v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, v49, v8, v13);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v16 = v39;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v17 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v48 = v15;
  uint64_t v49 = v12;
  uint64_t v44 = v17;
  dispatch thunk of IteratorProtocol.next()();
  double v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  uint64_t v43 = v3 + 48;
  if (v42(v7, 1, v16) == 1)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
LABEL_3:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v48, v49);
    return (uint64_t)v18;
  }
  id v20 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  uint64_t v19 = v3 + 32;
  uint64_t v40 = v20;
  id v41 = (void (**)(char *, uint64_t))(v19 - 24);
  uint64_t v18 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    id v22 = v45;
    v40(v45, v7, v16);
    v46(&v50, v22);
    if (v2)
    {
      (*v41)(v22, v16);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v48, v49);
      swift_bridgeObjectRelease();
      return (uint64_t)v18;
    }
    uint64_t v23 = v19;
    uint64_t v24 = v16;
    (*v41)(v22, v16);
    uint64_t v25 = v50;
    uint64_t v26 = *(void *)(v50 + 16);
    int64_t v27 = v18[2];
    int64_t v28 = v27 + v26;
    if (__OFADD__(v27, v26)) {
      break;
    }
    char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v28 <= v18[3] >> 1)
    {
      if (*(void *)(v25 + 16)) {
        goto LABEL_17;
      }
    }
    else
    {
      if (v27 <= v28) {
        int64_t v30 = v27 + v26;
      }
      else {
        int64_t v30 = v27;
      }
      uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v30, 1, v18);
      if (*(void *)(v25 + 16))
      {
LABEL_17:
        uint64_t v31 = v18[2];
        if ((v18[3] >> 1) - v31 < v26) {
          goto LABEL_30;
        }
        unint64_t v32 = (unint64_t)&v18[4 * v31 + 4];
        if (v25 + 32 < v32 + 32 * v26 && v32 < v25 + 32 + 32 * v26) {
          goto LABEL_32;
        }
        swift_arrayInitWithCopy();
        if (v26)
        {
          uint64_t v34 = v18[2];
          BOOL v35 = __OFADD__(v34, v26);
          uint64_t v36 = v34 + v26;
          if (v35) {
            goto LABEL_31;
          }
          v18[2] = v36;
        }
        goto LABEL_6;
      }
    }
    if (v26) {
      goto LABEL_29;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v16 = v24;
    unsigned int v21 = v42(v7, 1, v24);
    uint64_t v19 = v23;
    if (v21 == 1) {
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, char *, uint64_t);
  void (**v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(uint64_t *__return_ptr, char *);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v31 = a1;
  unint64_t v32 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  int64_t v27 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  int64_t v28 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v34, v9, v14);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v17 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v33 = v16;
  uint64_t v34 = v13;
  int64_t v30 = v17;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v18 = v27;
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v29(v8, 1, v3) == 1)
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
LABEL_7:
    (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v34);
  }
  else
  {
    id v22 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    id v20 = v18 + 32;
    unsigned int v21 = v22;
    uint64_t v23 = (void (**)(char *, uint64_t))(v20 - 24);
    while (1)
    {
      uint64_t v24 = v20;
      v21(v5, v8, v3);
      uint64_t v19 = v32;
      v31(&v35, v5);
      (*v23)(v5, v3);
      if (v2) {
        break;
      }
      specialized Array.append<A>(contentsOf:)(v35);
      dispatch thunk of IteratorProtocol.next()();
      id v20 = v24;
      if (v29(v8, 1, v3) == 1)
      {
        uint64_t v19 = v36;
        goto LABEL_7;
      }
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v34);
    swift_bridgeObjectRelease();
  }
  return v19;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  unsigned int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  int64_t v28;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  void (**v41)(char *, uint64_t);
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(uint64_t *__return_ptr, char *);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  uint64_t v46 = a1;
  CGRect v47 = a2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v3 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  unint64_t v45 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  Swift::Bool v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  uint64_t v38 = *(void *)(v12 - 8);
  double v13 = MEMORY[0x270FA5388](v12);
  id v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, v49, v8, v13);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v16 = v39;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v17 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  uint64_t v48 = v15;
  uint64_t v49 = v12;
  uint64_t v44 = v17;
  dispatch thunk of IteratorProtocol.next()();
  double v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  uint64_t v43 = v3 + 48;
  if (v42(v7, 1, v16) == 1)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
LABEL_3:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v48, v49);
    return (uint64_t)v18;
  }
  id v20 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  uint64_t v19 = v3 + 32;
  uint64_t v40 = v20;
  id v41 = (void (**)(char *, uint64_t))(v19 - 24);
  uint64_t v18 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    id v22 = v45;
    v40(v45, v7, v16);
    v46(&v50, v22);
    if (v2)
    {
      (*v41)(v22, v16);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v48, v49);
      swift_bridgeObjectRelease();
      return (uint64_t)v18;
    }
    uint64_t v23 = v19;
    uint64_t v24 = v16;
    (*v41)(v22, v16);
    uint64_t v25 = v50;
    uint64_t v26 = *(void *)(v50 + 16);
    int64_t v27 = v18[2];
    int64_t v28 = v27 + v26;
    if (__OFADD__(v27, v26)) {
      break;
    }
    char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v28 <= v18[3] >> 1)
    {
      if (*(void *)(v25 + 16)) {
        goto LABEL_17;
      }
    }
    else
    {
      if (v27 <= v28) {
        int64_t v30 = v27 + v26;
      }
      else {
        int64_t v30 = v27;
      }
      uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v30, 1, v18);
      if (*(void *)(v25 + 16))
      {
LABEL_17:
        uint64_t v31 = v18[2];
        if ((v18[3] >> 1) - v31 < v26) {
          goto LABEL_30;
        }
        unint64_t v32 = (unint64_t)&v18[4 * v31 + 4];
        if (v25 + 32 < v32 + 32 * v26 && v32 < v25 + 32 + 32 * v26) {
          goto LABEL_32;
        }
        swift_arrayInitWithCopy();
        if (v26)
        {
          uint64_t v34 = v18[2];
          BOOL v35 = __OFADD__(v34, v26);
          uint64_t v36 = v34 + v26;
          if (v35) {
            goto LABEL_31;
          }
          v18[2] = v36;
        }
        goto LABEL_6;
      }
    }
    if (v26) {
      goto LABEL_29;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v16 = v24;
    unsigned int v21 = v42(v7, 1, v24);
    uint64_t v19 = v23;
    if (v21 == 1) {
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for CanvasElement.indexableTextContent<A>(in:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ContainerCanvasElement.indexableTextContent<A>(in:)(a1, a4, a2, (uint64_t)&protocol witness table for PaperDocumentPage, a3);
}

uint64_t ContainerCanvasElement.indexableTextContent<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = ContainerCanvasElement.drawingIndexableTextContent<A>(in:)(a1, a2, a3, a4, a5);
  uint64_t v11 = ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)(a1, a2, a3, a4, a5);
  specialized Array.append<A>(contentsOf:)(v11);
  return v10;
}

uint64_t protocol witness for PaperPage.search<A>(query:fullWordsOnly:caseMatchingOnly:in:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  void *v16 = v8;
  v16[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  return ContainerCanvasElement.search<A>(query:fullWordsOnly:caseMatchingOnly:in:)(a1, a2, a3, a4, a5, a8, a6, (uint64_t)&protocol witness table for PaperDocumentPage);
}

uint64_t ContainerCanvasElement.search<A>(query:fullWordsOnly:caseMatchingOnly:in:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  *uint64_t v17 = v8;
  v17[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  return ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

PaperKit::IndexableTextContent __swiftcall IndexableTextContent.init(_:)(Swift::String a1)
{
  Swift::String *v1 = a1;
  v1[1] = a1;
  uint64_t v2 = swift_bridgeObjectRetain();
  result.presentableText._object = v5;
  result.presentableText._countAndFlagsBits = v4;
  result.indexableText._object = v3;
  result.indexableText._countAndFlagsBits = v2;
  return result;
}

uint64_t protocol witness for CanvasElement.indexableTextContent<A>(in:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ContainerCanvasElement.indexableTextContent<A>(in:)(a1, a4, a2, (uint64_t)&protocol witness table for Image, a3);
}

uint64_t protocol witness for PaperPage.search<A>(query:fullWordsOnly:caseMatchingOnly:in:) in conformance Image(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  void *v16 = v8;
  v16[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  return ContainerCanvasElement.search<A>(query:fullWordsOnly:caseMatchingOnly:in:)(a1, a2, a3, a4, a5, a8, a6, (uint64_t)&protocol witness table for Image);
}

uint64_t protocol witness for CanvasElement.indexableTextContent<A>(in:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ContainerCanvasElement.indexableTextContent<A>(in:)(a1, a4, a2, (uint64_t)&protocol witness table for Paper, a3);
}

uint64_t protocol witness for PaperPage.search<A>(query:fullWordsOnly:caseMatchingOnly:in:) in conformance Paper(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  void *v16 = v8;
  v16[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return ContainerCanvasElement.search<A>(query:fullWordsOnly:caseMatchingOnly:in:)(a1, a2, a3, a4, a5, a8, a6, (uint64_t)&protocol witness table for Paper);
}

uint64_t Capsule<>.search(query:fullWordsOnly:caseMatchingOnly:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(v5 + 80) = a2;
  *(void *)(v5 + 88) = v4;
  *(unsigned char *)(v5 + 277) = a4;
  *(unsigned char *)(v5 + 276) = a3;
  *(void *)(v5 + 72) = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>));
  *(void *)(v5 + 96) = v6;
  *(void *)(v5 + 104) = *(void *)(v6 - 8);
  *(void *)(v5 + 112) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  *(void *)(v5 + 120) = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  *(void *)(v5 + 128) = v7;
  *(void *)(v5 + 136) = *(void *)(v7 - 8);
  *(void *)(v5 + 144) = swift_task_alloc();
  *(void *)(v5 + 152) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
  *(void *)(v5 + 160) = swift_task_alloc();
  *(void *)(v5 + 168) = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  *(void *)(v5 + 176) = v8;
  *(void *)(v5 + 184) = *(void *)(v8 - 8);
  *(void *)(v5 + 192) = swift_task_alloc();
  *(void *)(v5 + 200) = type metadata accessor for PaperDocument(0);
  *(void *)(v5 + 208) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>);
  *(void *)(v5 + 216) = swift_task_alloc();
  *(void *)(v5 + 224) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  *(void *)(v5 + 232) = swift_task_alloc();
  return MEMORY[0x270FA2498](Capsule<>.search(query:fullWordsOnly:caseMatchingOnly:), 0, 0);
}

uint64_t Capsule<>.search(query:fullWordsOnly:caseMatchingOnly:)()
{
  *(void *)(v0 + 56) = MEMORY[0x263F8EE78];
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v44 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 176);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  *(void *)(v0 + 240) = _s8PaperKit0A8DocumentVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.root.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  _s8PaperKit0A8DocumentVWOhTm_1(v3, type metadata accessor for PaperDocument);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v7(v2, v4, v6);
  v7(v4, v2, v6);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v8 = *(int *)(v44 + 36);
  *(_DWORD *)(v0 + 272) = v8;
  *(void *)(v1 + v8) = 0;
  uint64_t v9 = *(void *)(v0 + 128);
  uint64_t v10 = *(void *)(v0 + 136);
  uint64_t v11 = *(void *)(v0 + 120);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) == 1)
  {
    uint64_t v12 = *(void *)(v0 + 160);
    uint64_t v13 = *(void *)(v0 + 96);
    uint64_t v14 = *(void *)(v0 + 104);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 120), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  }
  else
  {
    uint64_t v15 = *(int *)(v0 + 272);
    uint64_t v16 = *(void *)(v0 + 232);
    uint64_t v17 = *(void *)(v0 + 152);
    uint64_t v18 = *(void *)(v0 + 128);
    uint64_t v19 = *(void *)(v0 + 112);
    uint64_t v20 = *(void *)(v0 + 96);
    unsigned int v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 136) + 32);
    v21(v17, *(void *)(v0 + 120), v18);
    uint64_t v22 = v19 + *(int *)(v20 + 48);
    uint64_t v23 = *(void *)(v16 + v15);
    uint64_t result = v21(v22, v17, v18);
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v25 = *(void **)(v0 + 160);
    uint64_t v26 = *(void *)(v0 + 128);
    uint64_t v27 = *(void *)(v0 + 96);
    uint64_t v28 = *(void *)(v0 + 104);
    *(void *)(*(void *)(v0 + 232) + *(int *)(v0 + 272)) = v23 + 1;
    uint64_t v29 = (char *)v25 + *(int *)(v27 + 48);
    *uint64_t v25 = v23;
    v21((uint64_t)v29, v22, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = *(void *)(v0 + 168);
  uint64_t v31 = *(void *)(v0 + 96);
  uint64_t v32 = *(void *)(v0 + 104);
  outlined init with take of (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?(*(void *)(v0 + 160), v30);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) != 1)
  {
    uint64_t v34 = *(char **)(v0 + 168);
    uint64_t v35 = *(void *)(v0 + 136);
    uint64_t v36 = *(void *)(v0 + 144);
    uint64_t v37 = *(void *)(v0 + 128);
    uint64_t v38 = *(void *)(v0 + 96);
    *(void *)(v0 + 248) = *(void *)v34;
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v36, &v34[*(int *)(v38 + 48)], v37);
    _s8PaperKit0A8DocumentVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    SharedTagged_3.subscript.getter();
    uint64_t v39 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v42 = *(void *)(v39 + 192) + **(int **)(v39 + 192);
    uint64_t v40 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v40;
    *uint64_t v40 = v0;
    v40[1] = Capsule<>.search(query:fullWordsOnly:caseMatchingOnly:);
    __asm { BRAA            X9, X16 }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 232), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  uint64_t v41 = specialized _arrayForceCast<A, B>(_:)(*(void *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v33(v41);
}

{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  long long *v7;
  long long v8;
  long long v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  long long v49;
  uint64_t v50;
  long long v51;
  uint64_t v52;
  uint64_t v53;

  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(v0 + 64);
    *(void *)(v0 + 64) = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v5 = *(void *)(v4 + 16);
    uint64_t v6 = 40 * v5;
    uint64_t v7 = (long long *)(v1 + 48);
    do
    {
      uint64_t v8 = *(v7 - 1);
      uint64_t v9 = *v7;
      void *v3 = v4;
      uint64_t v10 = *(void *)(v4 + 24);
      uint64_t v11 = v5 + 1;
      if (v5 >= v10 >> 1)
      {
        uint64_t v49 = v9;
        uint64_t v51 = v8;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v5 + 1, 1);
        uint64_t v9 = v49;
        uint64_t v8 = v51;
        uint64_t v4 = *v3;
      }
      uint64_t v12 = *(void *)(v0 + 248);
      *(void *)(v4 + 16) = v11;
      uint64_t v13 = v4 + v6;
      *(void *)(v13 + 32) = v12;
      *(_OWORD *)(v13 + 40) = v8;
      *(_OWORD *)(v13 + 56) = v9;
      v6 += 40;
      v7 += 2;
      uint64_t v5 = v11;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = MEMORY[0x263F8EE78];
  }
  uint64_t v15 = *(void *)(v0 + 136);
  uint64_t v14 = *(void *)(v0 + 144);
  uint64_t v16 = *(void *)(v0 + 128);
  specialized Array.append<A>(contentsOf:)(v4);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v17 = *(void *)(v0 + 128);
  uint64_t v18 = *(void *)(v0 + 136);
  uint64_t v19 = *(void *)(v0 + 120);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v19, 1, v17) == 1)
  {
    uint64_t v20 = *(void *)(v0 + 160);
    unsigned int v21 = *(void *)(v0 + 96);
    uint64_t v22 = *(void *)(v0 + 104);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 120), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v21);
  }
  else
  {
    uint64_t v23 = *(int *)(v0 + 272);
    uint64_t v24 = *(void *)(v0 + 232);
    uint64_t v25 = *(void *)(v0 + 152);
    uint64_t v26 = *(void *)(v0 + 128);
    uint64_t v27 = *(void *)(v0 + 112);
    uint64_t v28 = *(void *)(v0 + 96);
    uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 136) + 32);
    v29(v25, *(void *)(v0 + 120), v26);
    uint64_t v30 = v27 + *(int *)(v28 + 48);
    uint64_t v31 = *(void *)(v24 + v23);
    uint64_t result = v29(v30, v25, v26);
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v33 = *(void **)(v0 + 160);
    uint64_t v34 = *(void *)(v0 + 128);
    uint64_t v35 = *(void *)(v0 + 96);
    uint64_t v36 = *(void *)(v0 + 104);
    *(void *)(*(void *)(v0 + 232) + *(int *)(v0 + 272)) = v31 + 1;
    uint64_t v37 = (char *)v33 + *(int *)(v35 + 48);
    *uint64_t v33 = v31;
    v29((uint64_t)v37, v30, v34);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  uint64_t v38 = *(void *)(v0 + 168);
  uint64_t v39 = *(void *)(v0 + 96);
  uint64_t v40 = *(void *)(v0 + 104);
  outlined init with take of (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?(*(void *)(v0 + 160), v38);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39) != 1)
  {
    uint64_t v42 = *(char **)(v0 + 168);
    uint64_t v43 = *(void *)(v0 + 136);
    uint64_t v44 = *(void *)(v0 + 144);
    unint64_t v45 = *(void *)(v0 + 128);
    uint64_t v46 = *(void *)(v0 + 96);
    *(void *)(v0 + 248) = *(void *)v42;
    (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v44, &v42[*(int *)(v46 + 48)], v45);
    _s8PaperKit0A8DocumentVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    SharedTagged_3.subscript.getter();
    CGRect v47 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v50 = *(void *)(v47 + 192) + **(int **)(v47 + 192);
    uint64_t v48 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v48;
    *uint64_t v48 = v0;
    v48[1] = Capsule<>.search(query:fullWordsOnly:caseMatchingOnly:);
    __asm { BRAA            X9, X16 }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 232), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  uint64_t v53 = specialized _arrayForceCast<A, B>(_:)(*(void *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v41 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v41(v53);
}

uint64_t Capsule<>.search(query:fullWordsOnly:caseMatchingOnly:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 264) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](Capsule<>.search(query:fullWordsOnly:caseMatchingOnly:), 0, 0);
}

uint64_t specialized ContainerCanvasElement.drawingIndexableTextContent<A>(in:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    return MEMORY[0x263F8EE78];
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  Capsule.encapsulateTransient<A>(_:)();
  uint64_t v11 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  id v12 = objc_allocWithZone(v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 16))((uint64_t)v12 + OBJC_IVAR___PKDrawingCoherence_model, v3, v0);
  v30.receiver = v12;
  v30.super_class = v11;
  id v13 = objc_msgSendSuper2(&v30, sel_init);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v13, sel_setRecognitionEnabled_, 1);
  id v14 = objc_msgSend(v13, sel_indexableContent);
  if (!v14)
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return MEMORY[0x263F8EE78];
  }
  uint64_t v15 = v14;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexableTextContent>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_20C832C20;
  id v17 = objc_msgSend(v15, sel_indexableTextRepresentation);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;
  }
  else
  {
    uint64_t v29 = 0;
    unint64_t v20 = 0xE000000000000000;
  }
  unsigned int v21 = v10;
  id v22 = objc_msgSend(v15, sel_presentableTextRepresentation);
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;
  }
  else
  {
    uint64_t v24 = 0;
    unint64_t v26 = 0xE000000000000000;
  }
  *(void *)(v16 + 32) = v29;
  *(void *)(v16 + 40) = v20;
  *(void *)(v16 + 48) = v24;
  *(void *)(v16 + 56) = v26;

  (*(void (**)(char *, uint64_t))(v8 + 8))(v21, v7);
  return v16;
}

uint64_t ContainerCanvasElement.drawingIndexableTextContent<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v35[1] = a5;
  v35[2] = a3;
  uint64_t v36 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v11 - 8);
  id v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 48))(a2, a4, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    return MEMORY[0x263F8EE78];
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v13, v14);
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  Capsule.encapsulateTransient<A>(_:)();
  unint64_t v19 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  id v20 = objc_allocWithZone(v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))((uint64_t)v20 + OBJC_IVAR___PKDrawingCoherence_model, v10, v7);
  v37.receiver = v20;
  v37.super_class = v19;
  id v21 = objc_msgSendSuper2(&v37, sel_init);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  objc_msgSend(v21, sel_setRecognitionEnabled_, 1);
  id v22 = objc_msgSend(v21, sel_indexableContent);
  if (!v22)
  {

    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    return MEMORY[0x263F8EE78];
  }
  uint64_t v23 = v22;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexableTextContent>);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_20C832C20;
  id v25 = objc_msgSend(v23, sel_indexableTextRepresentation);
  if (v25)
  {
    unint64_t v26 = v25;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;
  }
  else
  {
    uint64_t v36 = 0;
    unint64_t v28 = 0xE000000000000000;
  }
  id v29 = objc_msgSend(v23, sel_presentableTextRepresentation);
  if (v29)
  {
    objc_super v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;
  }
  else
  {
    uint64_t v31 = 0;
    unint64_t v33 = 0xE000000000000000;
  }
  *(void *)(v24 + 32) = v36;
  *(void *)(v24 + 40) = v28;
  *(void *)(v24 + 48) = v31;
  *(void *)(v24 + 56) = v33;

  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  return v24;
}

uint64_t ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 72))(a2, a4, v12);
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a1;
  uint64_t v15 = specialized Sequence.flatMap<A>(_:)((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:), (uint64_t)v17);
  (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v14, v10);
  return v15;
}

PaperKit::IndexableTextContent __swiftcall IndexableTextContent.init(indexableText:presentableText:)(Swift::String indexableText, Swift::String presentableText)
{
  Swift::String *v2 = indexableText;
  v2[1] = presentableText;
  result.presentableText = presentableText;
  result.indexableText = indexableText;
  return result;
}

uint64_t closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X5>, void *a4@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  SharedTagged_9.subscript.getter();
  uint64_t v8 = v12;
  uint64_t v9 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  *a4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 120))(a1, a2, a3, v8, v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 88) = v14;
  *(void *)(v9 + 96) = v8;
  *(void *)(v9 + 72) = a7;
  *(void *)(v9 + 80) = a8;
  *(void *)(v9 + 56) = a5;
  *(void *)(v9 + 64) = a6;
  *(unsigned char *)(v9 + 185) = a4;
  *(unsigned char *)(v9 + 184) = a3;
  *(void *)(v9 + 40) = a1;
  *(void *)(v9 + 48) = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  *(void *)(v9 + 104) = v10;
  *(void *)(v9 + 112) = *(void *)(v10 - 8);
  *(void *)(v9 + 120) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(void *)(v9 + 128) = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  *(void *)(v9 + 136) = v11;
  *(void *)(v9 + 144) = *(void *)(v11 - 8);
  *(void *)(v9 + 152) = swift_task_alloc();
  return MEMORY[0x270FA2498](ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:), 0, 0);
}

uint64_t ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  (*(void (**)(void))(*(void *)(v0 + 80) + 48))(*(void *)(v0 + 64));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 128), &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v5 = MEMORY[0x263F8EE78];
    return v4(v5);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 112);
    uint64_t v7 = *(void *)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 104);
    char v18 = *(unsigned char *)(v0 + 184);
    char v19 = *(unsigned char *)(v0 + 185);
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v10 = *(void *)(v0 + 40);
    (*(void (**)(void, void, void))(*(void *)(v0 + 144) + 32))(*(void *)(v0 + 152), *(void *)(v0 + 128), *(void *)(v0 + 136));
    type metadata accessor for Capsule();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
    Capsule.encapsulateTransient<A>(_:)();
    uint64_t v11 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
    id v12 = objc_allocWithZone(v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))((uint64_t)v12 + OBJC_IVAR___PKDrawingCoherence_model, v7, v9);
    *(void *)(v0 + 16) = v12;
    *(void *)(v0 + 24) = v11;
    id v13 = objc_msgSendSuper2((objc_super *)(v0 + 16), sel_init);
    *(void *)(v0 + 160) = v13;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    objc_msgSend(v13, sel_setRecognitionEnabled_, 1);
    uint64_t v14 = swift_task_alloc();
    *(void *)(v0 + 168) = v14;
    *(void *)(v14 + 16) = v13;
    *(void *)(v14 + 24) = v10;
    *(void *)(v14 + 32) = v17;
    *(unsigned char *)(v14 + 40) = v18;
    *(unsigned char *)(v14 + 41) = v19;
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v15;
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchQueryResult]);
    *uint64_t v15 = v0;
    v15[1] = ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:);
    return MEMORY[0x270FA2318](v0 + 32, 0, 0, 0xD000000000000037, 0x800000020C85F6B0, partial apply for closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:), v14, v16);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = *(void *)(v0 + 32);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

uint64_t outlined init with take of (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SearchQueryResult], Never>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  double v15 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (void *)MEMORY[0x21054D080](a3, a4, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  aBlock[4] = partial apply for closure #1 in closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [PKSearchQueryItem]) -> ();
  aBlock[3] = &block_descriptor_68;
  char v19 = _Block_copy(aBlock);
  id v20 = a2;
  swift_release();
  objc_msgSend(v20, sel_performSearchQuery_fullWordsOnly_caseMatchingOnly_withBlock_, v16, a5 & 1, a6 & 1, v19);
  _Block_release(v19);
}

uint64_t closure #1 in closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v2)
  {
LABEL_12:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SearchQueryResult], Never>);
    return CheckedContinuation.resume(returning:)();
  }
  uint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x21054E050](v4, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      objc_msgSend(v5, sel_bounds);
      uint64_t v8 = v7;
      uint64_t v10 = v9;
      uint64_t v12 = v11;
      uint64_t v14 = v13;

      unint64_t v16 = *(void *)(v18 + 16);
      unint64_t v15 = *(void *)(v18 + 24);
      if (v16 >= v15 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      }
      ++v4;
      *(void *)(v18 + 16) = v16 + 1;
      unint64_t v17 = (void *)(v18 + 32 * v16);
      v17[4] = v8;
      v17[5] = v10;
      v17[6] = v12;
      v17[7] = v14;
    }
    while (v2 != v4);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [PKSearchQueryItem]) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for PKSearchQueryItem();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t Capsule<>.search(query:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Paper();
  uint64_t v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  _s8PaperKit0A8DocumentVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule<>.root.getter();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 16))(v8, &v12[*(int *)(v10 + 52)], v5);
  _s8PaperKit0A8DocumentVWOhTm_1((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Paper);
  uint64_t v16 = v2;
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  uint64_t v13 = specialized Sequence.flatMap<A>(_:)((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in Capsule<>.search(query:), (uint64_t)v15);
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  return v13;
}

uint64_t closure #1 in Capsule<>.search(query:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v33 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v4 = type metadata accessor for Paper();
  _s8PaperKit0A8DocumentVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  SharedTagged_9.subscript.getter();
  uint64_t v5 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  _s8PaperKit0A8DocumentVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v7 = v6(a1, v4);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = v7;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v10 = v9 + 40;
    uint64_t v11 = (void *)MEMORY[0x263F8EE78];
    do
    {
      long long v26 = *(_OWORD *)(v10 - 8);
      if (StringProtocol.localizedCaseInsensitiveContains<A>(_:)())
      {
        uint64_t v14 = v29;
        uint64_t v13 = v30;
        __swift_project_boxed_opaque_existential_1(v28, v29);
        swift_getKeyPath();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
        Capsule<>.subscript.getter();
        swift_release();
        v31[0] = v26;
        v31[1] = v27;
        char v32 = 0;
        double v15 = (*(double (**)(_OWORD *, uint64_t, uint64_t))(v13 + 112))(v31, v14, v13);
        uint64_t v17 = v16;
        uint64_t v19 = v18;
        uint64_t v21 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
        }
        unint64_t v23 = v11[2];
        unint64_t v22 = v11[3];
        if (v23 >= v22 >> 1) {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v11);
        }
        v11[2] = v23 + 1;
        uint64_t v12 = (double *)&v11[4 * v23];
        v12[4] = v15;
        *((void *)v12 + 5) = v17;
        *((void *)v12 + 6) = v19;
        *((void *)v12 + 7) = v21;
      }
      v10 += 32;
      --v8;
    }
    while (v8);
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  *a3 = v11;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

uint64_t Capsule<>.indexableTextContent.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for Paper();
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  _s8PaperKit0A8DocumentVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule<>.root.getter();
  uint64_t v9 = specialized ContainerCanvasElement.drawingIndexableTextContent<A>(in:)();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v2 + 16))(v4, &v8[*(int *)(v6 + 52)], v1);
  uint64_t v14 = v0;
  uint64_t v10 = specialized Sequence.flatMap<A>(_:)((void (*)(uint64_t *__return_ptr, char *))partial apply for specialized closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:), (uint64_t)v13);
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v15 = v9;
  specialized Array.append<A>(contentsOf:)(v10);
  uint64_t v11 = v15;
  _s8PaperKit0A8DocumentVWOhTm_1((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Paper);
  return v11;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  uint64_t v8;
  unsigned char v10[16];
  uint64_t v11;

  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for PaperDocument(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  _s8PaperKit0A8DocumentVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.root.getter();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v2 + 16))(v4, v7, v1);
  _s8PaperKit0A8DocumentVWOhTm_1((uint64_t)v7, type metadata accessor for PaperDocument);
  uint64_t v11 = v0;
  uint64_t v8 = specialized Sequence.flatMap<A>(_:)((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in Capsule<>.indexableTextContent.getter, (uint64_t)v10);
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  return v8;
}

uint64_t closure #1 in Capsule<>.indexableTextContent.getter@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v4 = type metadata accessor for PaperDocument(0);
  _s8PaperKit0A8DocumentVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  SharedTagged_3.subscript.getter();
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 184);
  uint64_t v8 = _s8PaperKit0A8DocumentVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  *a2 = v7(a1, v4, v8, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t Array<A>.indexableTextContentString.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v6 = *(v2 - 1);
      uint64_t v5 = *v2;
      uint64_t v7 = HIBYTE(*v2) & 0xF;
      if ((*v2 & 0x2000000000000000) == 0) {
        uint64_t v7 = v6 & 0xFFFFFFFFFFFFLL;
      }
      if (v7)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v9 = v3[2];
        unint64_t v8 = v3[3];
        if (v9 >= v8 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v3);
        }
        v3[2] = v9 + 1;
        uint64_t v4 = &v3[2 * v9];
        v4[4] = v6;
        v4[5] = v5;
      }
      v2 += 4;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  uint64_t v10 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t Array<A>.presentableTextContentString.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v6 = *(v2 - 1);
      uint64_t v5 = *v2;
      uint64_t v7 = HIBYTE(*v2) & 0xF;
      if ((*v2 & 0x2000000000000000) == 0) {
        uint64_t v7 = v6 & 0xFFFFFFFFFFFFLL;
      }
      if (v7)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v9 = v3[2];
        unint64_t v8 = v3[3];
        if (v9 >= v8 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v3);
        }
        v3[2] = v9 + 1;
        uint64_t v4 = &v3[2 * v9];
        v4[4] = v6;
        v4[5] = v5;
      }
      v2 += 4;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  uint64_t v10 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t IndexableTextContent.indexableText.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IndexableTextContent.presentableText.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _s8PaperKit0A8DocumentVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in Capsule<>.search(query:)@<X0>(void *a1@<X8>)
{
  return closure #1 in Capsule<>.search(query:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t specialized closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v4 = type metadata accessor for Paper();
  _s8PaperKit0A8DocumentVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  SharedTagged_9.subscript.getter();
  uint64_t v5 = v12;
  uint64_t v6 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 120);
  uint64_t v8 = _s8PaperKit0A8DocumentVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v9 = v7(a1, v4, v8, v5, v6);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  *a2 = v9;
  return result;
}

uint64_t partial apply for specialized closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)@<X0>(uint64_t *a1@<X8>)
{
  return specialized closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)(*(void *)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in Capsule<>.indexableTextContent.getter@<X0>(void *a1@<X8>)
{
  return closure #1 in Capsule<>.indexableTextContent.getter(*(void *)(v1 + 16), a1);
}

uint64_t specialized static IndexableTextContent.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

void *initializeWithCopy for IndexableTextContent(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IndexableTextContent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for IndexableTextContent(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexableTextContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IndexableTextContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IndexableTextContent()
{
  return &type metadata for IndexableTextContent;
}

uint64_t _s8PaperKit0A8DocumentVAC9Coherence4CRDTAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(uint64_t a1)
{
  closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40), *(unsigned char *)(v1 + 41));
}

uint64_t sub_20C79FDA0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SearchQueryResult], Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(unint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SearchQueryResult], Never>);
  return closure #1 in closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(a1);
}

uint64_t block_copy_helper_68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_68()
{
  return swift_release();
}

unint64_t type metadata accessor for PKSearchQueryItem()
{
  unint64_t result = lazy cache variable for type metadata for PKSearchQueryItem;
  if (!lazy cache variable for type metadata for PKSearchQueryItem)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PKSearchQueryItem);
  }
  return result;
}

uint64_t partial apply for closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)@<X0>(void *a1@<X8>)
{
  return closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)(v1[6], v1[3], v1[5], a1);
}

uint64_t type metadata completion function for CanvasEditMenuDelegate()
{
  return swift_initClassMetadata2();
}

void CanvasEditMenuDelegate.canvas.getter()
{
}

uint64_t CanvasEditMenuDelegate.editMenuIsPresented.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for CanvasEditMenuDelegate.editMenuIsPresented);
}

uint64_t CanvasEditMenuDelegate.editMenuIsPresented.setter(uint64_t result)
{
  *(unsigned char *)(v1 + direct field offset for CanvasEditMenuDelegate.editMenuIsPresented) = result;
  return result;
}

void closure #3 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x210550400](v4);
  if (v5)
  {
    uint64_t v6 = (char *)v5;
    objc_msgSend(a3, sel_sourcePoint);
    double v8 = v7;
    double v10 = v9;
    id v11 = Canvas.editingView.getter();
    objc_msgSend(v6, sel_convertPoint_toCoordinateSpace_, v11, v8, v10);
    CGFloat v13 = v12;
    CGFloat v15 = v14;

    id v16 = Canvas.editingView.getter();
    AnyCanvasElementView.paperBoundsTransform()(&v26);
    CGAffineTransform v25 = v26;
    CGAffineTransformInvert(&v24, &v25);
    CGAffineTransform v25 = v24;
    v27.double x = v13;
    v27.double y = v15;
    CGPoint v17 = CGPointApplyAffineTransform(v27, &v25);

    uint64_t v18 = *(void *)&v6[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
    if (v18)
    {
      uint64_t v19 = v18 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
      uint64_t v20 = *(void *)v19;
      uint64_t v21 = *(void **)(v19 + 8);
      unint64_t v22 = *(const char **)(v19 + 16);
      char v23 = *(unsigned char *)(v19 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AnyCanvas.performSelectionAction(_:_:at:)(2, v20, v21, v22, v23, *(uint64_t *)&v17.x, *(uint64_t *)&v17.y, 0);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

void closure #4 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = (void *)MEMORY[0x210550400](v4);
  if (v5)
  {
    uint64_t v6 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v5) + 0x320);
    double v7 = v5;
    double v8 = (void *)v6();

    if (v8)
    {
      objc_msgSend(a3, sel_sourcePoint);
      objc_msgSend(v7, sel_convertPoint_toCoordinateSpace_, v8);
      objc_msgSend(v8, sel_insertSpaceAtLocation_);

      double v7 = v8;
    }
  }
}

void closure #2 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v7 = a2 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x210550400](v7);
  if (v8)
  {
    double v9 = (void *)v8;
    a6();
  }
}

void closure #6 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = (void *)MEMORY[0x210550400](v4);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v5) + 0x320))();

    if (v7)
    {
      objc_msgSend(v7, sel__getAllHandwritingTranscription_, a3);
    }
  }
}

void closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x210550400](v4);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    objc_msgSend(a3, sel_sourcePoint);
    Canvas.showOrHideContent(below:)((CGPoint)__PAIR128__(v8, v7));
  }
}

Class @objc CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  Class v9 = specialized CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(v7);

  return v9;
}

void @objc CanvasEditMenuDelegate.editMenuInteraction(_:willPresentMenuFor:animator:)()
{
}

void closure #1 in CanvasEditMenuDelegate.editMenuInteraction(_:willDismissMenuFor:animator:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (unsigned char *)MEMORY[0x210550400](v1);
  if (v2)
  {
    v2[direct field offset for CanvasEditMenuDelegate.editMenuIsPresented] = 0;
  }
}

void @objc CanvasEditMenuDelegate.editMenuInteraction(_:willDismissMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  swift_unknownObjectRetain();
  id v10 = a1;
  specialized CanvasEditMenuDelegate.editMenuInteraction(_:willDismissMenuFor:animator:)(a5);

  swift_unknownObjectRelease();
}

void @objc CanvasEditMenuDelegate.init()()
{
}

id CanvasEditMenuDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasEditMenuDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc CanvasEditMenuDelegate.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata accessor for CanvasEditMenuDelegate()
{
  return __swift_instantiateGenericMetadata();
}

id specialized CanvasEditMenuDelegate.init(canvas:)()
{
  swift_unknownObjectWeakInit();
  v0[direct field offset for CanvasEditMenuDelegate.editMenuIsPresented] = 0;
  swift_unknownObjectWeakAssign();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasEditMenuDelegate();
  return objc_msgSendSuper2(&v2, sel_init);
}

id specialized CanvasEditMenuDelegate.__allocating_init(canvas:)()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for CanvasEditMenuDelegate());
  return specialized CanvasEditMenuDelegate.init(canvas:)();
}

Class specialized CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(void *a1)
{
  objc_super v2 = (void *)MEMORY[0x263F8EED0];
  uint64_t v3 = (void *)(*MEMORY[0x263F8EED0] & *v1);
  uint64_t v4 = MEMORY[0x210550400]((char *)v1 + direct field offset for CanvasEditMenuDelegate.canvas);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (void *)v4;
  id v6 = &selRef_allowsFingerDrawing;
  id v122 = self;
  id v7 = objc_msgSend(v122, sel_generalPasteboard);
  id v8 = objc_msgSend(v7, sel_pasteboardTypes);

  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = *(void *)(v9 + 16);
  unint64_t v124 = v3;
  if (!v10)
  {
    swift_bridgeObjectRelease();
LABEL_22:
    id v18 = [v122 v6[505]];
    id v19 = objc_msgSend(v18, sel_itemProviders);

    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
    initeCGFloat d = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (inited >> 62)
    {
LABEL_39:
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v21)
      {
LABEL_24:
        unint64_t v22 = 0;
        while (1)
        {
          if ((inited & 0xC000000000000001) != 0)
          {
            id v23 = (id)MEMORY[0x21054E050](v22, inited);
          }
          else
          {
            if (v22 >= *(void *)((inited & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_95;
            }
            id v23 = *(id *)(inited + 32 + 8 * v22);
          }
          CGAffineTransform v24 = v23;
          if (__OFADD__(v22++, 1))
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v3 = v2;
          CGAffineTransform v26 = v5;
          uint64_t v27 = AnyCanvas.acceptedDropLayouts.getter();

          uint64_t v28 = *(void *)(v27 + 16);
          if (v28) {
            break;
          }
LABEL_25:

          swift_bridgeObjectRelease();
          objc_super v2 = v3;
          if (v22 == v21)
          {
            swift_bridgeObjectRelease();
            int v17 = 0;
            uint64_t v3 = v124;
            goto LABEL_41;
          }
        }
        uint64_t v29 = v27 + 40;
        while (((*(uint64_t (**)(void *))(*(void *)v29 + 32))(v24) & 1) == 0)
        {
          v29 += 16;
          if (!--v28) {
            goto LABEL_25;
          }
        }
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        int v17 = 1;
        objc_super v2 = v3;
        uint64_t v3 = v124;
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v21 = *(void *)((inited & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v21) {
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease();
    int v17 = 0;
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  id v11 = (char **)(v9 + 40);
  while (1)
  {
    uint64_t v12 = (uint64_t)*(v11 - 1);
    CGFloat v13 = *v11;
    BOOL v14 = v12 == 0x6C7070612E6D6F63 && v13 == (char *)0xEF72657061702E65;
    if (v14
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v12 == 0xD000000000000017 && v13 == (char *)0x800000020C84EE40)
    {
      break;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      break;
    }
    BOOL v15 = qword_26C14EFA0 == v12 && off_26C14EFA8 == v13;
    if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    v11 += 2;
    swift_arrayDestroy();
    if (!--v10)
    {
      swift_bridgeObjectRelease_n();
      objc_super v2 = (void *)MEMORY[0x263F8EED0];
      id v6 = &selRef_allowsFingerDrawing;
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease_n();
  int v17 = 1;
  objc_super v2 = (void *)MEMORY[0x263F8EED0];
LABEL_41:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIMenuElement?>);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C837460;
  (*(void (**)(UIMenuElementSize *__return_ptr))((*v2 & *v5) + 0x2C8))(&v125);
  if (v125 != UIMenuElementSizeMedium)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v127._countAndFlagsBits = 0xD000000000000025;
    v127._object = (void *)0x800000020C85F730;
    v31._countAndFlagsBits = 0x41207463656C6553;
    v31._object = (void *)0xEA00000000006C6CLL;
    v32.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v32.value._object = (void *)0xEB00000000656C62;
    v33._countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v31, v32, paperKitBundle, v33, v127);
    uint64_t v34 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = *((_OWORD *)v3 + 5);
    *(void *)(v35 + 32) = v3[12];
    *(void *)(v35 + 40) = v34;
    UIMenuElementSize preferredElementSize = UIMenuElementSizeSmall;
    v121._rawValue = 0;
    *(void *)(inited + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    if (!v17) {
      goto LABEL_43;
    }
LABEL_47:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v128._countAndFlagsBits = 0xD000000000000020;
    v128._object = (void *)0x800000020C85F8C0;
    v36._countAndFlagsBits = 0x6574736150;
    v36._object = (void *)0xE500000000000000;
    v37.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v37.value._object = (void *)0xEB00000000656C62;
    v38._countAndFlagsBits = 0;
    v38._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v36, v37, paperKitBundle, v38, v128);
    uint64_t v39 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = *((_OWORD *)v3 + 5);
    *(void *)(v40 + 32) = v3[12];
    *(void *)(v40 + 40) = v39;
    *(void *)(v40 + 48) = a1;
    id v41 = a1;
    UIMenuElementSize preferredElementSize = UIMenuElementSizeSmall;
    v121._rawValue = 0;
    uint64_t v30 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    goto LABEL_50;
  }
  *(void *)(inited + 32) = 0;
  if (v17) {
    goto LABEL_47;
  }
LABEL_43:
  uint64_t v30 = 0;
LABEL_50:
  *(void *)(inited + 40) = v30;
  uint64_t v42 = *(uint64_t (**)(void *))((*v2 & *v5) + 0x320);
  objc_super v2 = v5;
  uint64_t v43 = (void *)v42(v2);

  if (v43 && (unsigned int v44 = objc_msgSend(v43, sel_insertSpaceEnabled), v43, v44))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    uint64_t v3 = v124;
    if (one-time initialization token for paperKitBundle != -1) {
LABEL_95:
    }
      swift_once();
    v129._countAndFlagsBits = 0xD000000000000027;
    v129._object = (void *)0x800000020C85F890;
    v45._countAndFlagsBits = 0x5320747265736E49;
    v45._object = (void *)0xEC00000065636170;
    v46.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v46.value._object = (void *)0xEB00000000656C62;
    v47._countAndFlagsBits = 0;
    v47._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v45, v46, paperKitBundle, v47, v129);
    uint64_t v48 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = *((_OWORD *)v3 + 5);
    *(void *)(v49 + 32) = v3[12];
    *(void *)(v49 + 40) = v48;
    *(void *)(v49 + 48) = a1;
    id v50 = a1;
    UIMenuElementSize preferredElementSize = UIMenuElementSizeSmall;
    v121._rawValue = 0;
    uint64_t v51 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  }
  else
  {
    uint64_t v51 = 0;
  }
  *(void *)(inited + 48) = v51;
  uint64_t v52 = self;
  id v53 = objc_msgSend(v52, sel_standardUserDefaults);
  uint64_t v54 = (void *)MEMORY[0x21054D080](0xD000000000000026, 0x800000020C85F760);
  unsigned int v55 = objc_msgSend(v53, sel_BOOLForKey_, v54);

  if (v55)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v130._countAndFlagsBits = 0xD000000000000023;
    v130._object = (void *)0x800000020C85F860;
    v56._countAndFlagsBits = 0x6C6C412079706F43;
    v56._object = (void *)0xE800000000000000;
    v57.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v57.value._object = (void *)0xEB00000000656C62;
    v58._countAndFlagsBits = 0;
    v58._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v56, v57, paperKitBundle, v58, v130);
    uint64_t v59 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v60 = swift_allocObject();
    *(_OWORD *)(v60 + 16) = *((_OWORD *)v124 + 5);
    *(void *)(v60 + 32) = v124[12];
    *(void *)(v60 + 40) = v59;
    UIMenuElementSize preferredElementSize = UIMenuElementSizeSmall;
    v121._rawValue = 0;
    uint64_t v61 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  }
  else
  {
    uint64_t v61 = 0;
  }
  *(void *)(inited + 56) = v61;
  id v62 = objc_msgSend(v52, sel_standardUserDefaults, preferredElementSize);
  __C::CGRect v63 = (void *)MEMORY[0x21054D080](0xD00000000000003ELL, 0x800000020C85F790);
  unsigned int v64 = objc_msgSend(v62, sel_BOOLForKey_, v63);

  if (v64)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v65._countAndFlagsBits = 0xD000000000000016;
    v131._countAndFlagsBits = 0xD000000000000031;
    v131._object = (void *)0x800000020C85F820;
    v65._object = (void *)0x800000020C85F800;
    v66.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v66.value._object = (void *)0xEB00000000656C62;
    v67._countAndFlagsBits = 0;
    v67._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v65, v66, paperKitBundle, v67, v131);
    uint64_t v68 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v69 = swift_allocObject();
    *(_OWORD *)(v69 + 16) = *((_OWORD *)v124 + 5);
    *(void *)(v69 + 32) = v124[12];
    *(void *)(v69 + 40) = v68;
    *(void *)(v69 + 48) = a1;
    id v70 = a1;
    preferredElementSizeCGFloat a = UIMenuElementSizeSmall;
    v121._rawValue = 0;
    uint64_t v71 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  }
  else
  {
    uint64_t v71 = 0;
  }
  *(void *)(inited + 64) = v71;
  id v72 = objc_msgSend(v52, sel_standardUserDefaults, preferredElementSizea);
  uint64_t v73 = (void *)MEMORY[0x21054D080](0xD00000000000002ELL, 0x800000020C85F7D0);
  unsigned int v74 = objc_msgSend(v72, sel_BOOLForKey_, v73);

  if (v74)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    uint64_t v75 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v76 = swift_allocObject();
    *(_OWORD *)(v76 + 16) = *((_OWORD *)v124 + 5);
    *(void *)(v76 + 32) = v124[12];
    *(void *)(v76 + 40) = v75;
    *(void *)(v76 + 48) = a1;
    id v77 = a1;
    v121._rawValue = 0;
    uint64_t v78 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  }
  else
  {
    uint64_t v78 = 0;
  }
  *(void *)(inited + 72) = v78;
  UIMenuElementSize v125 = inited;
  specialized Array._endMutation()();
  unint64_t v79 = (void *)v125;
  UIMenuElementSize v125 = MEMORY[0x263F8EE78];
  id v80 = (void *)v79[4];
  if (v80)
  {
    id v81 = v80;
    MEMORY[0x21054D330](v81, v82, v83, v84, v85);
    if (*(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  double v86 = (void *)v79[5];
  if (v86)
  {
    id v87 = v86;
    MEMORY[0x21054D330](v87, v88, v89, v90, v91);
    if (*(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  int v92 = (void *)v79[6];
  if (v92)
  {
    id v93 = v92;
    MEMORY[0x21054D330](v93, v94, v95, v96, v97);
    if (*(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v98 = (void *)v79[7];
  if (v98)
  {
    id v99 = v98;
    MEMORY[0x21054D330](v99, v100, v101, v102, v103);
    if (*(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v104 = (void *)v79[8];
  if (v104)
  {
    id v105 = v104;
    MEMORY[0x21054D330](v105, v106, v107, v108, v109);
    if (*(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v110 = (void *)v79[9];
  if (v110)
  {
    id v111 = v110;
    MEMORY[0x21054D330](v111, v112, v113, v114, v115);
    if (*(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  UIMenuElementSize v116 = v125;
  swift_bridgeObjectRelease();
  v117._countAndFlagsBits = 0;
  v117._object = (void *)0xE000000000000000;
  v126.value.super.isCGFloat a = 0;
  v126.is_nil = 0;
  isCGFloat a = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v117, (Swift::String_optional)0, v126, 0, 0xFFFFFFFFFFFFFFFFLL, v116, v121).super.super.isa;

  return isa;
}

void specialized CanvasEditMenuDelegate.editMenuInteraction(_:willPresentMenuFor:animator:)()
{
  *(unsigned char *)(v0 + direct field offset for CanvasEditMenuDelegate.editMenuIsPresented) = 1;
}

void specialized CanvasEditMenuDelegate.editMenuInteraction(_:willDismissMenuFor:animator:)(void *a1)
{
  uint64_t v3 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v3 + 80);
  *(void *)(v5 + 32) = *(void *)(v3 + 96);
  *(void *)(v5 + 40) = v4;
  v7[4] = partial apply for closure #1 in CanvasEditMenuDelegate.editMenuInteraction(_:willDismissMenuFor:animator:);
  v7[5] = v5;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v7[3] = &block_descriptor_69;
  id v6 = _Block_copy(v7);
  swift_release();
  objc_msgSend(a1, sel_addCompletion_, v6);
  _Block_release(v6);
}

void specialized CanvasEditMenuDelegate.init()()
{
}

uint64_t sub_20C7A1994()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in CanvasEditMenuDelegate.editMenuInteraction(_:willDismissMenuFor:animator:)()
{
  closure #1 in CanvasEditMenuDelegate.editMenuInteraction(_:willDismissMenuFor:animator:)(*(void *)(v0 + 40));
}

uint64_t block_copy_helper_69(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_69()
{
  return swift_release();
}

void partial apply for closure #2 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  closure #2 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(a1, v1[5], v1[2], v1[3], v1[4], Canvas.selectAll());
}

uint64_t partial apply for closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  return partial apply for closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:));
}

uint64_t partial apply for closure #6 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  return partial apply for closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #6 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:));
}

uint64_t sub_20C7A1A5C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #5 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  closure #2 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(a1, v1[5], v1[2], v1[3], v1[4], Canvas._copyAll());
}

uint64_t partial apply for closure #4 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  return partial apply for closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #4 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:));
}

uint64_t objectdestroy_13Tm()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #3 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  return partial apply for closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #3 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:));
}

uint64_t partial apply for closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[5], v2[6], v2[2], v2[3], v2[4]);
}

uint64_t *initializeBufferWithCopyOfBuffer for MiniMagicButtons(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_weakCopyInit();
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for MiniMagicButtons(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_weakDestroy();
  return swift_release();
}

uint64_t initializeWithCopy for MiniMagicButtons(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  swift_weakCopyInit();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MiniMagicButtons(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  swift_weakCopyAssign();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for MiniMagicButtons(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  swift_weakTakeInit();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for MiniMagicButtons(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  swift_weakTakeAssign();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniMagicButtons(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C7A1F38);
}

uint64_t sub_20C7A1F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for MiniMagicButtons(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C7A2010);
}

uint64_t sub_20C7A2010(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for MiniMagicButtons()
{
  uint64_t result = type metadata singleton initialization cache for MiniMagicButtons;
  if (!type metadata singleton initialization cache for MiniMagicButtons) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for MiniMagicButtons()
{
  type metadata accessor for Bindable<MiniMenuState>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Bindable<MiniMenuState>()
{
  if (!lazy cache variable for type metadata for Bindable<MiniMenuState>)
  {
    type metadata accessor for MiniMenuState();
    unint64_t v0 = type metadata accessor for Bindable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Bindable<MiniMenuState>);
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in MiniMagicButtons()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t MiniMagicButtons.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v142 = a1;
  uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>.Storage);
  MEMORY[0x270FA5388](v128);
  Swift::String v130 = (char *)&v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v131 = *(void *)(v132 - 8);
  MEMORY[0x270FA5388](v132);
  Swift::String v127 = (char *)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  Swift::String v129 = (char *)&v102 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v139 = (uint64_t)&v102 - v11;
  uint64_t v121 = type metadata accessor for LiftHoverEffect();
  uint64_t v120 = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121);
  uint64_t v119 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for PlainButtonStyle();
  uint64_t v135 = *(void *)(v138 - 8);
  MEMORY[0x270FA5388](v138);
  uint64_t v134 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for MenuOrder();
  uint64_t v107 = *(void *)(v109 - 8);
  MEMORY[0x270FA5388](v109);
  id v105 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Menu<<<opaque return type of View.labelStyle<A>(_:)>>.0, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>>);
  uint64_t v104 = *(void *)(v106 - 8);
  MEMORY[0x270FA5388](v106);
  id v16 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.menuOrder(_:)>>.0);
  uint64_t v110 = *(void *)(v111 - 8);
  MEMORY[0x270FA5388](v111);
  uint64_t v108 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v113 = *(void *)(v114 - 8);
  MEMORY[0x270FA5388](v114);
  uint64_t v112 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0);
  uint64_t v117 = *(void *)(v118 - 8);
  MEMORY[0x270FA5388](v118);
  UIMenuElementSize v116 = (char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>);
  uint64_t v20 = *(void *)(v133 - 8);
  MEMORY[0x270FA5388](v133);
  uint64_t v115 = (char *)&v102 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v122 = *(void *)(v124 - 8);
  MEMORY[0x270FA5388](v124);
  v123 = (char *)&v102 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  CGAffineTransform v25 = (char *)&v102 - v24;
  uint64_t v26 = type metadata accessor for MiniMagicButtons();
  uint64_t v125 = *(void *)(v26 - 8);
  uint64_t v27 = *(void *)(v125 + 64);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v126 = (uint64_t)&v102 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v102 - v29;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>?);
  MEMORY[0x270FA5388](v31 - 8);
  uint64_t v137 = (uint64_t)&v102 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v136 = (uint64_t)&v102 - v34;
  has_internal_uuint64_t i = os_variant_has_internal_ui();
  *((void *)&v148 + 1) = &type metadata for FeedbackFeatures;
  *(void *)&long long v149 = lazy protocol witness table accessor for type FeedbackFeatures and conformance FeedbackFeatures();
  char v36 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
  uint64_t v141 = v2;
  outlined init with copy of MiniMagicButtons(v2, (uint64_t)v30);
  uint64_t v140 = v9;
  if ((v36 & 1) == 0)
  {
    outlined destroy of MiniMagicButtons((uint64_t)v30);
    uint64_t v38 = v142;
    goto LABEL_7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  Bindable.wrappedValue.getter();
  uint64_t v37 = v147;
  swift_getKeyPath();
  *(void *)&long long v147 = v37;
  _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t v38 = v142;
  swift_release();
  unsigned int v39 = *(_DWORD *)(v37 + 40);
  swift_release();
  outlined destroy of MiniMagicButtons((uint64_t)v30);
  if ((*(_DWORD *)&has_internal_ui & (v39 >> 18) & 1) == 0)
  {
LABEL_7:
    uint64_t v68 = v136;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v136, 1, 1, v133);
    goto LABEL_8;
  }
  uint64_t v40 = *(void (**)(char *, void, uint64_t))(v122 + 104);
  uint64_t v41 = v124;
  v40(v25, *MEMORY[0x263F3C200], v124);
  uint64_t v42 = v123;
  uint64_t v43 = ((uint64_t (*)(char *, void, uint64_t))v40)(v123, *MEMORY[0x263F3C1D8], v41);
  uint64_t v102 = (uint64_t)&v102;
  MEMORY[0x270FA5388](v43);
  *(&v102 - 4) = v141;
  *(&v102 - 3) = (uint64_t)v25;
  uint64_t v103 = v25;
  *(&v102 - 2) = (uint64_t)v42;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.labelStyle<A>(_:)>>.0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Label<Text, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>>>);
  uint64_t v45 = type metadata accessor for IconOnlyLabelStyle();
  uint64_t v46 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Label<Text, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>>> and conformance Label<A, B>, &demangling cache variable for type metadata for Label<Text, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>>>);
  uint64_t v47 = _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_1(&lazy protocol witness table cache variable for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, MEMORY[0x263F197E0]);
  *(void *)&long long v147 = v44;
  *((void *)&v147 + 1) = v45;
  *(void *)&long long v148 = v46;
  *((void *)&v148 + 1) = v47;
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>);
  Menu.init(content:label:)();
  uint64_t v48 = v105;
  static MenuOrder.fixed.getter();
  uint64_t v49 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Menu<<<opaque return type of View.labelStyle<A>(_:)>>.0, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>> and conformance Menu<A, B>, &demangling cache variable for type metadata for Menu<<<opaque return type of View.labelStyle<A>(_:)>>.0, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>>);
  id v50 = v108;
  uint64_t v51 = v106;
  View.menuOrder(_:)();
  (*(void (**)(char *, uint64_t))(v107 + 8))(v48, v109);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v16, v51);
  uint64_t v52 = v134;
  PlainButtonStyle.init()();
  *(void *)&long long v147 = v51;
  *((void *)&v147 + 1) = v49;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v54 = _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
  unsigned int v55 = v112;
  uint64_t v56 = v111;
  uint64_t v57 = v138;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v135 + 8))(v52, v57);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v50, v56);
  Swift::String v58 = v119;
  static CustomHoverEffect<>.lift.getter();
  *(void *)&long long v147 = v56;
  *((void *)&v147 + 1) = v57;
  *(void *)&long long v148 = OpaqueTypeConformance2;
  *((void *)&v148 + 1) = v54;
  swift_getOpaqueTypeConformance2();
  _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_1(&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect, MEMORY[0x263F18DF8]);
  uint64_t v59 = v116;
  uint64_t v60 = v114;
  uint64_t v61 = v121;
  View.hoverEffect<A>(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v120 + 8))(v58, v61);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v55, v60);
  if (one-time initialization token for buttonSize != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v62 = v117;
  uint64_t v63 = (uint64_t)v115;
  uint64_t v64 = v118;
  (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v115, v59, v118);
  uint64_t v65 = v133;
  Swift::String_optional v66 = (_OWORD *)(v63 + *(int *)(v133 + 36));
  long long v67 = v148;
  *Swift::String_optional v66 = v147;
  v66[1] = v67;
  v66[2] = v149;
  (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v64);
  uint64_t v68 = v136;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v63, v136, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v68, 0, 1, v65);
  uint64_t v69 = *(void (**)(char *, uint64_t))(v122 + 8);
  uint64_t v70 = v124;
  v69(v123, v124);
  v69(v103, v70);
  uint64_t v38 = v142;
LABEL_8:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  uint64_t v71 = v141;
  Bindable.wrappedValue.getter();
  id v72 = v143;
  swift_getKeyPath();
  Swift::Int v143 = v72;
  _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v73 = *((void *)v72 + 5);
  swift_release();
  if ((v73 & 0x40) != 0)
  {
    uint64_t v79 = v126;
    outlined init with copy of MiniMagicButtons(v71, v126);
    unint64_t v80 = (*(unsigned __int8 *)(v125 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80);
    uint64_t v81 = swift_allocObject();
    outlined init with take of MiniMagicButtons(v79, v81 + v80);
    uint64_t v82 = (void *)swift_allocObject();
    v82[2] = partial apply for closure #3 in MiniMagicButtons.body.getter;
    v82[3] = v81;
    v82[4] = 0xD000000000000016;
    v82[5] = 0x800000020C8517D0;
    Swift::Int v143 = (uint64_t (*)@<X0>(uint64_t@<X8>))closure #1 in miniButton(systemName:_:)partial apply;
    v144 = v82;
    uint64_t v83 = v134;
    PlainButtonStyle.init()();
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>);
    uint64_t v85 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0> and conformance MiniButton<A>, &demangling cache variable for type metadata for MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>);
    uint64_t v86 = _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
    id v87 = v127;
    uint64_t v88 = v138;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v135 + 8))(v83, v88);
    swift_release();
    uint64_t v89 = v131;
    uint64_t v90 = v129;
    uint64_t v91 = v132;
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v129, v87, v132);
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v130, v90, v91);
LABEL_13:
    swift_storeEnumTagMultiPayload();
    Swift::Int v143 = (uint64_t (*)@<X0>(uint64_t@<X8>))v84;
    v144 = (void *)v88;
    uint64_t v145 = v85;
    uint64_t v146 = v86;
    swift_getOpaqueTypeConformance2();
    uint64_t v78 = (uint64_t)v140;
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v91);
    uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v78, 0, 1, v98);
    uint64_t v77 = v139;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v78, v139, &demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?);
    goto LABEL_14;
  }
  Bindable.wrappedValue.getter();
  unsigned int v74 = v143;
  swift_getKeyPath();
  Swift::Int v143 = v74;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v75 = *((void *)v74 + 5);
  swift_release();
  if ((v75 & 0x20) != 0)
  {
    uint64_t v92 = v126;
    outlined init with copy of MiniMagicButtons(v71, v126);
    unint64_t v93 = (*(unsigned __int8 *)(v125 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80);
    uint64_t v94 = swift_allocObject();
    outlined init with take of MiniMagicButtons(v92, v94 + v93);
    uint64_t v95 = (void *)swift_allocObject();
    v95[2] = partial apply for closure #4 in MiniMagicButtons.body.getter;
    uint64_t v95[3] = v94;
    v95[4] = 0xD000000000000016;
    v95[5] = 0x800000020C8517D0;
    Swift::Int v143 = partial apply for closure #1 in miniButton(systemName:_:);
    v144 = v95;
    uint64_t v96 = v134;
    PlainButtonStyle.init()();
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>);
    uint64_t v85 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0> and conformance MiniButton<A>, &demangling cache variable for type metadata for MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>);
    uint64_t v86 = _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
    uint64_t v97 = v127;
    uint64_t v88 = v138;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v135 + 8))(v96, v88);
    swift_release();
    uint64_t v89 = v131;
    uint64_t v90 = v129;
    uint64_t v91 = v132;
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v129, v97, v132);
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v130, v90, v91);
    goto LABEL_13;
  }
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>);
  uint64_t v77 = v139;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v139, 1, 1, v76);
  uint64_t v78 = (uint64_t)v140;
LABEL_14:
  uint64_t v99 = v137;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v68, v137, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v77, v78, &demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v99, v38, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>?);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>?, _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?, MiniDivider));
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v78, v38 + *(int *)(v100 + 48), &demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v77, &demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v68, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v78, &demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v99, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>?);
}

uint64_t closure #1 in MiniMagicButtons.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v97 = a3;
  uint64_t v102 = a4;
  uint64_t v105 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v6 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105);
  uint64_t v98 = v7;
  uint64_t v103 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MiniMagicButtons();
  uint64_t v93 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v93 + 64);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Label<Text, Image>>);
  uint64_t v106 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v101 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v100 = (char *)&v80 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v96 = (char *)&v80 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v99 = (char *)&v80 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v95 = (char *)&v80 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v104 = (char *)&v80 - v22;
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v109._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  v110._uint64_t object = (void *)0x800000020C85F920;
  v23._uint64_t countAndFlagsBits = 0x6F4720736B6F6F4CLL;
  v23._uint64_t object = (void *)0xEA0000000000646FLL;
  v24.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v24.value._uint64_t object = (void *)0xEB00000000656C62;
  v25._uint64_t countAndFlagsBits = 0;
  v25._uint64_t object = (void *)0xE000000000000000;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, paperKitBundle, v25, v109);
  uint64_t countAndFlagsBits = v26._countAndFlagsBits;
  uint64_t object = (uint64_t)v26._object;
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  Bindable.wrappedValue.getter();
  uint64_t v27 = v107;
  swift_getKeyPath();
  uint64_t v107 = v27;
  uint64_t v92 = _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v29 = *(void *)(v27 + 240);
  uint64_t v28 = *(void *)(v27 + 248);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v30 = FBKSEvaluation.Action.rawValue.getter();
  if (v28)
  {
    if (v29 == v30 && v28 == v31) {
      char v32 = 1;
    }
    else {
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v32 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v33 = specialized FeedbackManager.feedbackImageName(action:hasResponse:)(a2, v32 & 1);
  uint64_t v35 = v34;
  outlined init with copy of MiniMagicButtons(a1, (uint64_t)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v84 = a1;
  uint64_t v36 = a2;
  uint64_t v37 = v103;
  uint64_t v38 = v105;
  uint64_t v91 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v80 = v6 + 16;
  v91(v103, v36, v105);
  uint64_t v39 = *(unsigned __int8 *)(v93 + 80);
  uint64_t v40 = (v39 + 16) & ~v39;
  uint64_t v41 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v42 = (v9 + v41 + v40) & ~v41;
  uint64_t v88 = v39 | v41 | 7;
  uint64_t v89 = v42 + v98;
  uint64_t v43 = swift_allocObject();
  uint64_t v90 = v40;
  uint64_t v81 = v10;
  outlined init with take of MiniMagicButtons((uint64_t)v10, v43 + v40);
  uint64_t v93 = v42;
  uint64_t v44 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32);
  uint64_t v98 = v6 + 32;
  id v87 = v44;
  uint64_t v45 = v44(v43 + v42, v37, v38);
  uint64_t v107 = countAndFlagsBits;
  uint64_t v108 = object;
  MEMORY[0x270FA5388](v45);
  *(&v80 - 4) = (uint64_t)&v107;
  *(&v80 - 3) = v33;
  v110._uint64_t object = v35;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Label<Text, Image>);
  uint64_t v47 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, &demangling cache variable for type metadata for Label<Text, Image>);
  uint64_t v48 = v95;
  uint64_t countAndFlagsBits = v46;
  uint64_t object = v47;
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v95 = *(char **)(v106 + 32);
  ((void (*)(char *, char *, uint64_t))v95)(v104, v48, v11);
  v110._uint64_t countAndFlagsBits = 0xD000000000000032;
  v110._uint64_t object = (void *)0x800000020C85F970;
  v49._uint64_t object = (void *)0x800000020C85F950;
  v49._uint64_t countAndFlagsBits = 0xD000000000000015;
  v50.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v50.value._uint64_t object = (void *)0xEB00000000656C62;
  v51._uint64_t countAndFlagsBits = 0;
  v51._uint64_t object = (void *)0xE000000000000000;
  Swift::String v52 = NSLocalizedString(_:tableName:bundle:value:comment:)(v49, v50, paperKitBundle, v51, v110);
  uint64_t v83 = v52._countAndFlagsBits;
  uint64_t v82 = v52._object;
  uint64_t v53 = v84;
  Bindable.wrappedValue.getter();
  uint64_t v54 = v107;
  swift_getKeyPath();
  uint64_t v107 = v54;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v55 = *(void *)(v54 + 240);
  uint64_t v56 = *(void *)(v54 + 248);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v57 = v97;
  uint64_t v58 = FBKSEvaluation.Action.rawValue.getter();
  if (v56)
  {
    if (v55 == v58 && v56 == v59) {
      char v60 = 1;
    }
    else {
      char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v61 = (uint64_t)v81;
    swift_bridgeObjectRelease();
  }
  else
  {
    char v60 = 0;
    uint64_t v61 = (uint64_t)v81;
  }
  swift_bridgeObjectRelease();
  uint64_t v62 = specialized FeedbackManager.feedbackImageName(action:hasResponse:)(v57, v60 & 1);
  uint64_t v64 = v63;
  outlined init with copy of MiniMagicButtons(v53, v61);
  uint64_t v65 = v103;
  uint64_t v66 = v105;
  v91(v103, v57, v105);
  uint64_t v67 = swift_allocObject();
  outlined init with take of MiniMagicButtons(v61, v67 + v90);
  uint64_t v68 = v87(v67 + v93, v65, v66);
  uint64_t v107 = v83;
  uint64_t v108 = (uint64_t)v82;
  MEMORY[0x270FA5388](v68);
  *(&v80 - 4) = (uint64_t)&v107;
  *(&v80 - 3) = v62;
  v110._uint64_t object = v64;
  uint64_t v69 = v96;
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v70 = v99;
  ((void (*)(char *, char *, uint64_t))v95)(v99, v69, v11);
  uint64_t v71 = v106;
  id v72 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
  uint64_t v73 = v100;
  unsigned int v74 = v104;
  v72(v100, v104, v11);
  uint64_t v75 = v101;
  v72(v101, v70, v11);
  uint64_t v76 = v102;
  v72(v102, v73, v11);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Button<Label<Text, Image>>, Button<Label<Text, Image>>));
  v72(&v76[*(int *)(v77 + 48)], v75, v11);
  uint64_t v78 = *(void (**)(char *, uint64_t))(v71 + 8);
  v78(v70, v11);
  v78(v74, v11);
  v78(v75, v11);
  return ((uint64_t (*)(char *, uint64_t))v78)(v73, v11);
}

uint64_t closure #1 in closure #1 in MiniMagicButtons.body.getter(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  Bindable.wrappedValue.getter();
  FBKSEvaluation.Action.rawValue.getter();
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for MiniMagicButtons();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = MEMORY[0x210550400](result + 32);
    uint64_t v6 = *(void *)(v4 + 40);
    uint64_t result = swift_release();
    if (v5)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 96))(a2, ObjectType, v6);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #2 in closure #1 in MiniMagicButtons.body.getter(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  Bindable.wrappedValue.getter();
  FBKSEvaluation.Action.rawValue.getter();
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for MiniMagicButtons();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = MEMORY[0x210550400](result + 32);
    uint64_t v6 = *(void *)(v4 + 40);
    uint64_t result = swift_release();
    if (v5)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 96))(a2, ObjectType, v6);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #2 in MiniMagicButtons.body.getter()
{
  uint64_t v0 = type metadata accessor for IconOnlyLabelStyle();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Label<Text, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>>>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
  Label.init(title:icon:)();
  IconOnlyLabelStyle.init()();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Label<Text, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>>> and conformance Label<A, B>, &demangling cache variable for type metadata for Label<Text, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>>>);
  _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_1(&lazy protocol witness table cache variable for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, MEMORY[0x263F197E0]);
  View.labelStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t closure #1 in closure #2 in MiniMagicButtons.body.getter@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t closure #2 in closure #2 in MiniMagicButtons.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
  MEMORY[0x270FA5388](v2);
  char v4 = (uint64_t *)((char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for Image.Scale();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MiniMenuController();
  ObjCClassFromMetadatCGFloat a = swift_getObjCClassFromMetadata();
  id v13 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v14 = Image.init(_:bundle:)();
  if (one-time initialization token for buttonFontSize != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v11, 1, 1, v15);
  uint64_t v16 = static Font.system(size:weight:design:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Font.Design?);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F1B530], v5);
  uint64_t v18 = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v4 + *(int *)(v2 + 28), v8, v5);
  *char v4 = v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v4, (uint64_t)a1 + *(int *)(v19 + 36), &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
  *a1 = v14;
  a1[1] = KeyPath;
  a1[2] = v16;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #3 in MiniMagicButtons.body.getter()
{
  type metadata accessor for MiniMagicButtons();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 80))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #4 in MiniMagicButtons.body.getter()
{
  type metadata accessor for MiniMagicButtons();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 88))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t outlined init with copy of MiniMagicButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MiniMagicButtons();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MiniMagicButtons(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MiniMagicButtons();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of MiniMagicButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MiniMagicButtons();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #4 in MiniMagicButtons.body.getter()
{
  return partial apply for closure #4 in MiniMagicButtons.body.getter((uint64_t (*)(uint64_t))closure #4 in MiniMagicButtons.body.getter);
}

uint64_t objectdestroyTm_9()
{
  uint64_t v1 = *(void *)(type metadata accessor for MiniMagicButtons() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_weakDestroy();
  swift_release();
  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t partial apply for closure #3 in MiniMagicButtons.body.getter()
{
  return partial apply for closure #4 in MiniMagicButtons.body.getter((uint64_t (*)(uint64_t))closure #3 in MiniMagicButtons.body.getter);
}

uint64_t partial apply for closure #4 in MiniMagicButtons.body.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for MiniMagicButtons() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  return a1(v3);
}

uint64_t objectdestroy_3Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in MiniMagicButtons.body.getter@<X0>(char *a1@<X8>)
{
  return closure #1 in MiniMagicButtons.body.getter(v1[2], v1[3], v1[4], a1);
}

uint64_t _s8PaperKit13MiniMenuStateCAC11Observation10ObservableAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_20C7A4F44()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t key path setter for EnvironmentValues.imageScale : EnvironmentValues, serialized(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Image.Scale();
  double v3 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues.imageScale.setter();
}

uint64_t partial apply for closure #1 in closure #1 in MiniMagicButtons.body.getter()
{
  return partial apply for closure #1 in closure #1 in MiniMagicButtons.body.getter((uint64_t (*)(unint64_t, uint64_t))closure #1 in closure #1 in MiniMagicButtons.body.getter);
}

uint64_t partial apply for specialized closure #1 in Button<>.init<A>(_:systemImage:action:)()
{
  return specialized closure #1 in Button<>.init<A>(_:systemImage:action:)(v0[2], v0[3], v0[4]);
}

uint64_t objectdestroy_28Tm()
{
  uint64_t v1 = *(void *)(type metadata accessor for MiniMagicButtons() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v2 | v7 | 7;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v0 + v3, v11);
  swift_weakDestroy();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v5);
  return MEMORY[0x270FA0238](v0, v9, v10);
}

uint64_t partial apply for closure #2 in closure #1 in MiniMagicButtons.body.getter()
{
  return partial apply for closure #1 in closure #1 in MiniMagicButtons.body.getter((uint64_t (*)(unint64_t, uint64_t))closure #2 in closure #1 in MiniMagicButtons.body.getter);
}

uint64_t partial apply for closure #1 in closure #1 in MiniMagicButtons.body.getter(uint64_t (*a1)(unint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for MiniMagicButtons() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for FBKSEvaluation.Action() - 8);
  uint64_t v6 = v1 + ((v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1(v1 + v3, v6);
}

uint64_t partial apply for closure #1 in MiniMenuState.feedbackAction.setter()
{
  return closure #1 in MiniMenuState.feedbackAction.setter(v0[2], v0[3], v0[4]);
}

uint64_t sub_20C7A5304()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>?, _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?, MiniDivider)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>?, _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?, MiniDivider)>);
}

uint64_t closure #1 in MiniMenuState.feedbackAction.setterpartial apply()
{
  return partial apply for closure #1 in MiniMenuState.feedbackAction.setter();
}

id PaperTextAttachmentCanvasView.__allocating_init(frame:paperIdentifier:paperURL:coherenceContextURL:encryptionDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  id v19 = objc_allocWithZone(v9);
  return PaperTextAttachmentCanvasView.init(frame:paperIdentifier:paperURL:coherenceContextURL:encryptionDelegate:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t PaperTextAttachmentCanvasView.liveStreamMessenger.setter(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(char **)(v2 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v3)
  {
    uint64_t v5 = result;
    uint64_t v6 = (uint64_t *)&v3[direct field offset for Canvas.liveStreamMessenger];
    swift_beginAccess();
    *uint64_t v6 = v5;
    v6[1] = a2;
    uint64_t v7 = v3;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    specialized Canvas.liveStreamMessenger.didset();

    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void PaperTextAttachmentCanvasView.paperBounds.getter()
{
  uint64_t v1 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v1 - 8);
  unint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v8)
  {
    uint64_t v9 = *(void *)&v8[direct field offset for Canvas.paperView]
       + *(void *)((*MEMORY[0x263F8EED0] & **(void **)&v8[direct field offset for Canvas.paperView]) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (void (*)(uint64_t))type metadata accessor for Paper);
    uint64_t v10 = v8;
    Capsule<>.root.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    _s8PaperKit0A0VWOhTm_4((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for Paper);
  }
  else
  {
    __break(1u);
  }
}

void PaperTextAttachmentCanvasView.setLinedPaper(horizontalLineSpacing:verticalLineSpacing:horizontalInset:)(double a1, double a2, double a3)
{
  if (a1 > 0.0 || a2 > 0.0) {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14B60]), sel_initWithLineSpacing_horizontalInset_, a1, a2, a3);
  }
  else {
    id v4 = 0;
  }
  uint64_t v5 = *(char **)(v3 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v5)
  {
    uint64_t v6 = *(void **)&v5[direct field offset for PaperTextAttachmentView.linedPaper];
    *(void *)&v5[direct field offset for PaperTextAttachmentView.linedPaper] = v4;
    uint64_t v7 = v5;
    id v8 = v4;

    objc_msgSend(v7, sel_setNeedsLayout);
  }
  else
  {

    __break(1u);
  }
}

void PaperTextAttachmentCanvasView.setMathDocument(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v70 = (char *)v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v66 = *(void (***)(char *, uint64_t))(v69 - 8);
  MEMORY[0x270FA5388](v69);
  uint64_t v68 = (char *)v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for mathLogger != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)mathLogger);
  swift_retain();
  unint64_t v71 = v8;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134217984;
    swift_beginAccess();
    uint64_t v72 = *(void *)(*(void *)(a1 + 56) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_20C2D7000, v9, v10, "setMathDocument, num expressions: %ld", v11, 0xCu);
    MEMORY[0x210550270](v11, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v12 = (void *)CanvasCalculateDocumentProxy.calculateDocumentProvider.getter();
  uint64_t v13 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView;
  uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (!v14) {
    goto LABEL_16;
  }
  uint64_t v15 = *(void **)(v14 + direct field offset for Canvas._editingView);
  if (v15)
  {
    uint64_t v16 = *(_UNKNOWN ***)(v14 + direct field offset for Canvas._editingView + 8);
    id v17 = *(id *)(v14 + direct field offset for Canvas._editingView);
  }
  else
  {
    id v17 = *(id *)(v14 + direct field offset for Canvas.paperView);
    uint64_t v16 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  uint64_t ObjectType = swift_getObjectType();
  id v19 = (uint64_t (*)(uint64_t, _UNKNOWN **))v16[2];
  id v20 = v15;
  uint64_t v21 = (void *)v19(ObjectType, v16);

  if (v21)
  {
    id v22 = objc_msgSend(v21, sel_recognitionController);

    objc_msgSend(v22, sel_setCalculateDocumentProvider_, v12);
  }
  Swift::String v23 = *(char **)(v2 + v13);
  if (!v23)
  {
LABEL_16:
    swift_unknownObjectRelease();
    return;
  }
  v64[1] = v12;
  uint64_t v24 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_previousMathDocument;
  uint64_t v25 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_previousMathDocument);
  if (v25 && *(void *)&v23[direct field offset for PaperNoTextViewTextAttachmentView.hostDocument])
  {
    Swift::String v26 = v23;
    swift_retain();
    swift_retain();
    specialized CanvasCalculateDocument.updateSubDocument(from:to:)(v25, a1);
    uint64_t v27 = CanvasCalculateDocumentProxy.copy()();
    swift_release();
    swift_release();
  }
  else
  {
    *(void *)&v23[direct field offset for PaperNoTextViewTextAttachmentView.hostDocument] = a1;
    swift_retain();
    uint64_t v28 = v23;
    swift_release();
    uint64_t v27 = CanvasCalculateDocumentProxy.copy()();
  }
  *(void *)(v2 + v24) = v27;
  swift_release();
  uint64_t v29 = *(void *)&v23[direct field offset for PaperNoTextViewTextAttachmentView.hostDocument];
  if (v29)
  {
    swift_retain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      char v32 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v32 = 134217984;
      swift_beginAccess();
      uint64_t v72 = *(void *)(*(void *)(v29 + 56) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v30, v31, "Host document updated: %ld", v32, 0xCu);
      MEMORY[0x210550270](v32, -1, -1);
      swift_release();
    }
    else
    {

      swift_release();
    }
  }
  uint64_t v33 = &v23[direct field offset for Canvas._editingView];
  uint64_t v34 = *(void **)&v23[direct field offset for Canvas._editingView];
  if (v34)
  {
    uint64_t v35 = (_UNKNOWN **)*((void *)v33 + 1);
    id v36 = *(id *)v33;
  }
  else
  {
    id v36 = *(id *)&v23[direct field offset for Canvas.paperView];
    uint64_t v35 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  uint64_t v37 = swift_getObjectType();
  uint64_t v38 = (uint64_t (*)(uint64_t, _UNKNOWN **))v35[2];
  id v39 = v34;
  uint64_t v40 = (void *)v38(v37, v35);

  if (v40)
  {
    CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
  }
  id v41 = *(id *)v33;
  if (*(void *)v33)
  {
    uint64_t v42 = (_UNKNOWN **)*((void *)v33 + 1);
    id v43 = *(id *)v33;
  }
  else
  {
    id v43 = *(id *)&v23[direct field offset for Canvas.paperView];
    uint64_t v42 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  uint64_t v44 = swift_getObjectType();
  uint64_t v45 = (uint64_t (*)(uint64_t, _UNKNOWN **))v42[7];
  id v46 = v41;
  unint64_t v47 = v45(v44, v42);

  if (!(v47 >> 62))
  {
    uint64_t v48 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v48) {
      goto LABEL_32;
    }
LABEL_44:
    swift_unknownObjectRelease();

LABEL_45:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v48) {
    goto LABEL_44;
  }
LABEL_32:
  if (v48 >= 1)
  {
    v64[0] = v23;
    uint64_t v49 = 0;
    unint64_t v71 = v47 & 0xC000000000000001;
    Swift::String_optional v50 = (void (**)(char *, char *, uint64_t))(v66 + 2);
    ++v66;
    uint64_t v67 = v50;
    Swift::String v51 = (void *)MEMORY[0x263F8EED0];
    uint64_t v65 = v48;
    Swift::String v52 = v68;
    uint64_t v53 = v69;
    uint64_t v54 = (uint64_t)v70;
    do
    {
      if (v71) {
        id v56 = (id)MEMORY[0x21054E050](v49, v47);
      }
      else {
        id v56 = *(id *)(v47 + 8 * v49 + 32);
      }
      uint64_t v57 = v56;
      type metadata accessor for GraphCanvasElementView(0);
      uint64_t v58 = swift_dynamicCastClass();
      if (v58)
      {
        uint64_t v59 = (void *)v58;
        id v60 = v57;
        specialized CanvasElementView.updateGestures()();
        specialized CanvasElementView.updateFrame()();
        uint64_t v61 = (void *)MEMORY[0x210550400]((char *)v59 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
        if (v61)
        {
          uint64_t v63 = v61;
          (*(void (**)(void *, uint64_t))((*v51 & *v61) + 0x680))(v61, v62);
        }
        uint64_t v55 = (char *)v59 + *(void *)((*v51 & *v59) + 0x380);
        swift_beginAccess();
        (*v67)(v52, v55, v53);
        _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_4(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, 255, (void (*)(uint64_t))type metadata accessor for GraphElement);
        Capsule<>.root.getter();
        (*v66)(v52, v53);
        _s8PaperKit0A0VWOhTm_4(v54, (uint64_t (*)(void))type metadata accessor for GraphElement);
        GraphCanvasElementView.cachedGraphableExpressionsState.getter();
        GraphableExpressionsState.update()();
        swift_release();
        GraphCanvasElementView.updateGraphView()();

        uint64_t v48 = v65;
      }
      ++v49;
    }
    while (v48 != v49);
    swift_unknownObjectRelease();

    goto LABEL_45;
  }
  __break(1u);
}

void PaperTextAttachmentCanvasView.setMathResult(_:expressionUUID:)(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v3)
  {
    uint64_t v6 = *(void **)(v3 + direct field offset for Canvas._editingView);
    if (v6)
    {
      uint64_t v7 = *(_UNKNOWN ***)(v3 + direct field offset for Canvas._editingView + 8);
      id v8 = *(id *)(v3 + direct field offset for Canvas._editingView);
    }
    else
    {
      id v8 = *(id *)(v3 + direct field offset for Canvas.paperView);
      uint64_t v7 = &protocol witness table for ContainerCanvasElementView<A>;
    }
    uint64_t ObjectType = swift_getObjectType();
    os_log_type_t v10 = (uint64_t (*)(uint64_t, _UNKNOWN **))v7[2];
    id v11 = v6;
    id v17 = (char *)v10(ObjectType, v7);

    uint64_t v12 = v17;
    if (v17)
    {
      uint64_t v13 = *(void *)&v17[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
      if (v13)
      {
        uint64_t v14 = *(void **)(v13 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
        if (v14)
        {
          id v15 = v14;
          if (a2) {
            a2 = (void *)MEMORY[0x21054D080](a1, a2);
          }
          isCGFloat a = UUID._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v14, sel_mathResult_itemUUID_, a2, isa);

          uint64_t v12 = v17;
        }
      }
    }
  }
}

Swift::Void __swiftcall PaperTextAttachmentCanvasView.setupMathIfNecessary()()
{
  uint64_t v1 = v0;
  uint64_t v27 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v28 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v26[0] = 5;
  char v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  if ((v2 & 1) == 0) {
    return;
  }
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (!v4)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v5 = (void *)(v4 + direct field offset for PaperTextAttachmentView.calculateDocument);
  swift_beginAccess();
  if (*v5) {
    return;
  }
  if (one-time initialization token for mathLogger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)mathLogger);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_20C2D7000, v7, v8, "Creating CanvasCalculateDocumentProxy", v9, 2u);
    MEMORY[0x210550270](v9, -1, -1);
  }

  os_log_type_t v10 = *(void **)(v1 + v3);
  if (!v10)
  {
LABEL_18:
    __break(1u);
    return;
  }
  type metadata accessor for CanvasCalculateDocumentProxy();
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = 0;
  uint64_t v12 = v10;
  uint64_t v13 = MEMORY[0x263F8EE78];
  *(void *)(v11 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(v13);
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 32) = v14;
  *(void *)(v11 + 56) = specialized Dictionary.init(dictionaryLiteral:)(v13);
  *(void *)(v11 + 64) = 0;
  id v15 = (uint64_t *)&v12[direct field offset for PaperTextAttachmentView.calculateDocument];
  swift_beginAccess();
  *id v15 = v11;
  v15[1] = (uint64_t)&protocol witness table for CanvasCalculateDocumentProxy;
  swift_retain();
  swift_unknownObjectRelease();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_20C2D7000, v16, v17, "setupCanvasMathIfNecessary", v18, 2u);
    MEMORY[0x210550270](v18, -1, -1);
  }

  uint64_t v19 = direct field offset for Canvas.paperView;
  id v20 = *(void **)&v12[direct field offset for Canvas.paperView];
  uint64_t v21 = (void *)MEMORY[0x263F8EED0];
  id v22 = *(void **)((char *)v20 + *(void *)((*MEMORY[0x263F8EED0] & *v20) + 0x4C0));
  if (v22)
  {
    id v23 = v22;
    CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();

    id v20 = *(void **)&v12[v19];
  }
  uint64_t v24 = (void *)MEMORY[0x210550400]((char *)v20 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v24)
  {
    uint64_t v25 = v24;
    (*(void (**)(void))((*v21 & *v24) + 0x770))();

    swift_release();
  }
  else
  {

    swift_release();
  }
}

uint64_t PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = v4;
  *(unsigned char *)(v5 + 145) = a4;
  *(unsigned char *)(v5 + 144) = a3;
  *(void *)(v5 + 24) = a1;
  uint64_t v6 = type metadata accessor for PKDrawing();
  *(void *)(v5 + 48) = v6;
  *(void *)(v5 + 56) = *(void *)(v6 - 8);
  *(void *)(v5 + 64) = swift_task_alloc();
  *(void *)(v5 + 72) = type metadata accessor for MainActor();
  *(void *)(v5 + 80) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 88) = v8;
  *(void *)(v5 + 96) = v7;
  return MEMORY[0x270FA2498](PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:), v8, v7);
}

uint64_t PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (!v1) {
    goto LABEL_9;
  }
  char v2 = *(void **)(v1 + direct field offset for Canvas._editingView);
  if (v2)
  {
    uint64_t v3 = *(_UNKNOWN ***)(v1 + direct field offset for Canvas._editingView + 8);
    id v4 = *(id *)(v1 + direct field offset for Canvas._editingView);
  }
  else
  {
    id v4 = *(id *)(v1 + direct field offset for Canvas.paperView);
    uint64_t v3 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (uint64_t (*)(uint64_t, _UNKNOWN **))v3[2];
  id v7 = v2;
  uint64_t v8 = (void *)v6(ObjectType, v3);
  *(void *)(v0 + 104) = v8;

  if (v8)
  {
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v28 = *(void *)(v0 + 40);
    char v11 = *(unsigned char *)(v0 + 145);
    char v12 = *(unsigned char *)(v0 + 144);
    uint64_t v13 = *(void *)(v0 + 24);
    id v14 = objc_msgSend(v8, sel_drawing);
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    id v15 = objc_allocWithZone((Class)type metadata accessor for PKDrawingCoherence(0));
    PKDrawing._bridgeToObjectiveC()(v16);
    uint64_t v18 = v17;
    id v19 = objc_msgSend(v15, sel_initWithDrawing_, v17);
    *(void *)(v0 + 112) = v19;

    objc_msgSend(v19, sel_setRecognitionEnabled_, 1);
    uint64_t v20 = static MainActor.shared.getter();
    *(void *)(v0 + 120) = v20;
    uint64_t v21 = swift_task_alloc();
    *(void *)(v0 + 128) = v21;
    *(void *)(v21 + 16) = v19;
    *(void *)(v21 + 24) = v13;
    *(void *)(v21 + 32) = v10;
    *(unsigned char *)(v21 + 40) = v11;
    *(unsigned char *)(v21 + 41) = v12;
    *(void *)(v21 + 48) = v28;
    *(void *)(v21 + 56) = v8;
    *(void *)(v21 + 64) = v9;
    id v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v22;
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DrawingFindResult]);
    *id v22 = v0;
    v22[1] = PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:);
    uint64_t v24 = MEMORY[0x263F8F500];
    return MEMORY[0x270FA2318](v0 + 16, v20, v24, 0xD000000000000035, 0x800000020C85F9B0, partial apply for closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:), v21, v23);
  }
  else
  {
LABEL_9:
    swift_release();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v26 = MEMORY[0x263F8EE78];
    return v25(v26);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  char v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return MEMORY[0x270FA2498](PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:), v3, v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  uint64_t v1 = *(void **)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 56);
  char v2 = *(void *)(v0 + 64);
  id v4 = *(void *)(v0 + 48);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v0 + 16);
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v6(v5);
}

__n128 DrawingFindResult.frames(in:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
  uint64_t v1 = swift_allocObject();
  long long v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = xmmword_20C832C20;
  *(_OWORD *)(v1 + 32) = v2;
  __n128 result = *(__n128 *)(v0 + 40);
  *(__n128 *)(v1 + 48) = result;
  return result;
}

uint64_t DrawingFindResult.draw(for:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v6 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIGraphicsImageRendererFormat();
  id v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_preferredFormat);
  objc_msgSend(v9, sel_setScale_, 1.0);
  objc_msgSend(v9, sel_setPreferredRange_, 2);
  uint64_t v10 = *((void *)v1 + 5);
  uint64_t v11 = *((void *)v1 + 6);
  id v12 = v9;
  objc_msgSend(v12, sel_scale);
  uint64_t v14 = v13;
  type metadata accessor for ImageRenderer();
  id v15 = (void *)swift_allocObject();
  v15[2] = v10;
  v15[3] = v11;
  void v15[4] = v14;
  uint64_t v16 = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v15);
  id v32 = v12;

  dispatch_semaphore_t v17 = dispatch_semaphore_create(0);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = 0;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v16 + 72) = 0;
  uint64_t v20 = *(void *)(a1 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v20)
  {
    uint64_t v21 = *(void *)(v20 + direct field offset for Canvas.paperView)
        + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v20 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    uint64_t v22 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v21, v33);
    double v23 = v1[7];
    double v24 = v1[8];
    double v25 = v1[9];
    double v26 = v1[10];
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v18;
    *(void *)(v27 + 24) = v17;
    _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (void (*)(uint64_t))type metadata accessor for Paper);
    swift_retain();
    uint64_t v28 = v17;
    Capsule<>.root.getter();
    specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)((uint64_t)v5, (uint64_t)v8, (uint64_t)partial apply for closure #1 in DrawingFindResult.draw(for:), v27, v23, v24, v25, v26);
    _s8PaperKit0A0VWOhTm_4((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Paper);
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v22);
    OS_dispatch_semaphore.wait()();
    swift_release();

    swift_beginAccess();
    uint64_t v29 = *(void **)(v18 + 16);
    id v30 = v29;
    swift_release();
    return (uint64_t)v29;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v46 = a3;
  uint64_t v47 = a4;
  uint64_t v44 = a2;
  uint64_t v42 = a1;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v12 = *(void *)(v43 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v43);
  uint64_t v14 = type metadata accessor for Paper();
  uint64_t v41 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v41 + 64);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = &v37[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v17 - 8);
  id v19 = &v37[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v39 = v19;
  uint64_t v20 = self;
  id v21 = objc_msgSend(v20, sel_currentTraitCollection);
  id v22 = objc_msgSend(v21, sel_layoutDirection);

  BOOL v40 = v22 == (id)1;
  id v23 = objc_msgSend(v20, sel_currentTraitCollection);
  id v24 = objc_msgSend(v23, sel_userInterfaceStyle);

  BOOL v38 = v24 == (id)2;
  uint64_t v25 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v19, 1, 1, v25);
  outlined init with copy of Paper(v42, (uint64_t)v16);
  double v26 = &v37[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v27 = v43;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v26, v44, v43);
  unint64_t v28 = (*(unsigned __int8 *)(v41 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  unint64_t v29 = (v15 + *(unsigned __int8 *)(v12 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v30 = (v13 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = (char *)swift_allocObject();
  *((void *)v31 + 2) = 0;
  *((void *)v31 + 3) = 0;
  *((void *)v31 + 4) = v45;
  outlined init with take of Paper((uint64_t)v16, (uint64_t)&v31[v28]);
  (*(void (**)(char *, unsigned char *, uint64_t))(v12 + 32))(&v31[v29], v26, v27);
  id v32 = (double *)&v31[v30];
  *id v32 = a5;
  v32[1] = a6;
  v32[2] = a7;
  v32[3] = a8;
  *((unsigned char *)v32 + 32) = v38;
  *((unsigned char *)v32 + 33) = v40;
  uint64_t v33 = &v31[(v30 + 41) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v34 = v47;
  *(void *)uint64_t v33 = v46;
  *((void *)v33 + 1) = v34;
  swift_retain();
  swift_retain();
  uint64_t v35 = (uint64_t)v39;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v39, (uint64_t)&async function pointer to partial apply for specialized closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:), (uint64_t)v31);
  swift_release();
  return outlined destroy of StocksKitCurrencyCache.Provider?(v35, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t specialized closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  *(void *)(v12 + 152) = v15;
  *(void *)(v12 + 160) = v16;
  *(unsigned char *)(v12 + 193) = a12;
  *(unsigned char *)(v12 + 192) = a11;
  *(double *)(v12 + 136) = a3;
  *(double *)(v12 + 144) = a4;
  *(double *)(v12 + 120) = a1;
  *(double *)(v12 + 128) = a2;
  *(void *)(v12 + 104) = a9;
  *(void *)(v12 + 112) = a10;
  *(void *)(v12 + 96) = a8;
  *(void *)(v12 + 168) = type metadata accessor for RendererOutput();
  *(void *)(v12 + 176) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:), 0, 0);
}

uint64_t specialized closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)()
{
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v1;
  void *v1 = v0;
  v1[1] = specialized closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 193);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 192);
  v5.n128_u64[0] = *(void *)(v0 + 136);
  v6.n128_u64[0] = *(void *)(v0 + 144);
  v7.n128_u64[0] = *(void *)(v0 + 120);
  v8.n128_u64[0] = *(void *)(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 104);
  uint64_t v10 = *(void *)(v0 + 112);
  return v12(v0 + 16, v9, v10, v4, v3, v2, v7, v8, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  swift_task_dealloc();
  _s8PaperKit0A0VWOhTm_4(v1, (uint64_t (*)(void))type metadata accessor for RendererOutput);
  return MEMORY[0x270FA2498](specialized closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void (*v4)(void);
  id v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)(v0 + 2), (uint64_t)(v0 + 7), &demangling cache variable for type metadata for RendererContext?);
  uint64_t v1 = v0[10];
  if (v1)
  {
    uint64_t v2 = v0[11];
    __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
    if (v3)
    {
      uint64_t v4 = (void (*)(void))v0[19];
      __n128 v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_, v3);
      v4();

      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)(v0 + 7), &demangling cache variable for type metadata for RendererContext?);
  }
  ((void (*)(void))v0[19])(0);
LABEL_6:
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for RendererContext?);
  swift_task_dealloc();
  __n128 v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t specialized CanvasCalculateDocument.updateSubDocument(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v295 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
  MEMORY[0x270FA5388](v295);
  v293 = (char *)&v266 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  v292 = (uint64_t *)((char *)&v266 - v8);
  MEMORY[0x270FA5388](v9);
  v291 = (void (**)(uint64_t, uint64_t))((char *)&v266 - v10);
  MEMORY[0x270FA5388](v11);
  uint64_t v290 = (uint64_t)&v266 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v299 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v298 = (uint64_t)&v266 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  v276 = (char *)&v266 - v16;
  MEMORY[0x270FA5388](v17);
  id v19 = (char *)&v266 - v18;
  MEMORY[0x270FA5388](v20);
  v269 = (char *)&v266 - v21;
  MEMORY[0x270FA5388](v22);
  unint64_t v272 = (unint64_t)&v266 - v23;
  MEMORY[0x270FA5388](v24);
  double v26 = (char *)&v266 - v25;
  MEMORY[0x270FA5388](v27);
  *(void *)&long long v270 = (char *)&v266 - v28;
  MEMORY[0x270FA5388](v29);
  v275 = (uint64_t *)((char *)&v266 - v30);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v31 - 8);
  uint64_t v33 = (char *)&v266 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  v285 = (char *)&v266 - v35;
  MEMORY[0x270FA5388](v36);
  os_log_t v278 = (os_log_t)((char *)&v266 - v37);
  BOOL v38 = (uint64_t *)(a1 + 56);
  swift_beginAccess();
  int64_t v39 = *(void *)(a1 + 56);
  int64_t v40 = *(void *)(v39 + 16);
  uint64_t v273 = v3;
  uint64_t v300 = v13;
  v271 = v19;
  v284 = v33;
  v274 = (uint64_t *)(a1 + 56);
  int64_t v294 = (int64_t)v26;
  if (v40)
  {
    uint64_t v267 = a2;
    uint64_t v303 = MEMORY[0x263F8EE78];
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v279 = v40;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
    unint64_t v41 = specialized Dictionary.startIndex.getter(v39);
    if ((v41 & 0x8000000000000000) == 0)
    {
      int64_t v43 = v39;
      if ((uint64_t)v41 < 1 << *(unsigned char *)(v39 + 32))
      {
        uint64_t v44 = 0;
        uint64_t v45 = (void *)(v39 + 64);
        int64_t v282 = v299 + 16;
        uint64_t v277 = v42;
        uint64_t v268 = v39 + 88;
        int64_t v283 = v39;
        v280 = (void *)(v39 + 64);
        id v281 = (id)(v299 + 32);
        uint64_t v46 = v290;
        while (1)
        {
          if ((v45[v41 >> 6] & (1 << v41)) == 0) {
            goto LABEL_187;
          }
          if (*(_DWORD *)(v43 + 36) != v42) {
            goto LABEL_188;
          }
          uint64_t v288 = 1 << v41;
          v287 = v42;
          uint64_t v289 = v41 >> 6;
          v286 = v44;
          uint64_t v47 = v295;
          uint64_t v48 = (void *)(v46 + *(int *)(v295 + 48));
          uint64_t v49 = *(void *)(v43 + 48);
          uint64_t v50 = v299;
          unint64_t v296 = *(void *)(v299 + 72);
          Swift::String v51 = *(void (**)(uint64_t, unint64_t, uint64_t))(v299 + 16);
          unint64_t v52 = v41;
          v51(v46, v49 + v296 * v41, v13);
          uint64_t v53 = *(void *)(v43 + 56);
          uint64_t v297 = v52;
          uint64_t v54 = v53 + 40 * v52;
          id v56 = *(void **)v54;
          uint64_t v55 = *(void *)(v54 + 8);
          uint64_t v57 = *(void *)(v54 + 16);
          uint64_t v59 = *(void *)(v54 + 24);
          uint64_t v58 = *(void *)(v54 + 32);
          *uint64_t v48 = *(void *)v54;
          v48[1] = v55;
          v48[2] = v57;
          v48[3] = v59;
          v48[4] = v58;
          uint64_t v60 = (uint64_t)v291;
          v51((uint64_t)v291, v46, v300);
          uint64_t v61 = (void *)(v60 + *(int *)(v47 + 48));
          *uint64_t v61 = v56;
          v61[1] = v55;
          v61[2] = v57;
          v61[3] = v59;
          v61[4] = v58;
          uint64_t v62 = (void (*)(void, void, void, void))v292;
          outlined init with take of (key: UUID, value: SortableCalculateExpression)(v60, (uint64_t)v292);
          id v63 = v56;
          uint64_t v13 = v300;
          id v64 = v63;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          id v65 = v64;
          outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
          uint64_t v66 = v293;
          v51((uint64_t)v293, (unint64_t)v62, v13);
          uint64_t v67 = *(void (**)(uint64_t, char *, uint64_t))(v50 + 32);
          v67(v298, v66, v13);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v62, &demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
          uint64_t v68 = v303;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v68 + 16) + 1, 1);
            uint64_t v68 = v303;
          }
          unint64_t v70 = *(void *)(v68 + 16);
          unint64_t v69 = *(void *)(v68 + 24);
          double v26 = (char *)v294;
          if (v70 >= v69 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
            uint64_t v68 = v303;
          }
          *(void *)(v68 + 16) = v70 + 1;
          v67(v68+ ((*(unsigned __int8 *)(v299 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v299 + 80))+ v70 * v296, (char *)v298, v13);
          uint64_t v303 = v68;
          int64_t v43 = v283;
          uint64_t v71 = 1 << *(unsigned char *)(v283 + 32);
          if (v297 >= v71) {
            goto LABEL_189;
          }
          uint64_t v45 = v280;
          uint64_t v72 = v289;
          uint64_t v73 = v280[v289];
          if ((v73 & v288) == 0) {
            goto LABEL_190;
          }
          if (*(_DWORD *)(v283 + 36) != v287) {
            goto LABEL_191;
          }
          unint64_t v74 = v73 & (-2 << (v297 & 0x3F));
          if (v74)
          {
            unint64_t v41 = __clz(__rbit64(v74)) | v297 & 0xFFFFFFFFFFFFFFC0;
            goto LABEL_25;
          }
          uint64_t v75 = v289 + 1;
          unint64_t v76 = (unint64_t)(v71 + 63) >> 6;
          if (v289 + 1 < v76)
          {
            unint64_t v77 = v280[v75];
            if (v77) {
              goto LABEL_18;
            }
            uint64_t v75 = v289 + 2;
            if (v289 + 2 < v76)
            {
              unint64_t v77 = v280[v75];
              if (v77)
              {
LABEL_18:
                unint64_t v41 = __clz(__rbit64(v77)) + (v75 << 6);
                goto LABEL_25;
              }
              while (v76 - 3 != v72)
              {
                unint64_t v77 = *(void *)(v268 + 8 * v72++);
                if (v77)
                {
                  uint64_t v75 = v72 + 2;
                  goto LABEL_18;
                }
              }
            }
          }
          unint64_t v41 = 1 << *(unsigned char *)(v283 + 32);
LABEL_25:
          uint64_t v44 = (void *)((char *)v286 + 1);
          if ((void *)((char *)v286 + 1) == (void *)v279)
          {
            swift_bridgeObjectRelease();
            uint64_t v33 = v284;
            BOOL v38 = v274;
            a2 = v267;
            goto LABEL_31;
          }
          if ((v41 & 0x8000000000000000) == 0)
          {
            uint64_t v42 = (uint64_t *)v277;
            if ((uint64_t)v41 < v71) {
              continue;
            }
          }
          break;
        }
      }
    }
    __break(1u);
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
    goto LABEL_204;
  }
  swift_retain();
  uint64_t v68 = MEMORY[0x263F8EE78];
LABEL_31:
  uint64_t v267 = specialized Set.init<A>(_:)(v68);
  swift_bridgeObjectRelease();
  v286 = (void *)(a2 + 56);
  swift_beginAccess();
  int64_t v78 = *(void *)(a2 + 56);
  int64_t v79 = *(void *)(v78 + 16);
  uint64_t v80 = MEMORY[0x263F8EE78];
  if (!v79) {
    goto LABEL_60;
  }
  uint64_t v302 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79, 0);
  unint64_t v81 = specialized Dictionary.startIndex.getter(v78);
  if ((v81 & 0x8000000000000000) != 0 || (uint64_t)v81 >= 1 << *(unsigned char *)(v78 + 32)) {
    goto LABEL_192;
  }
  uint64_t v83 = 0;
  uint64_t v84 = (void *)(v78 + 64);
  int64_t v282 = v299 + 16;
  uint64_t v277 = v82;
  uint64_t v268 = v78 + 88;
  int64_t v283 = v78;
  uint64_t v279 = v79;
  v280 = (void *)(v78 + 64);
  id v281 = (id)(v299 + 32);
  while (1)
  {
    if ((v84[v81 >> 6] & (1 << v81)) == 0) {
      goto LABEL_193;
    }
    if (*(_DWORD *)(v78 + 36) != v82) {
      goto LABEL_194;
    }
    uint64_t v289 = 1 << v81;
    uint64_t v288 = v82;
    unint64_t v296 = v81 >> 6;
    v287 = v83;
    uint64_t v85 = v295;
    uint64_t v86 = v290;
    id v87 = (void *)(v290 + *(int *)(v295 + 48));
    uint64_t v88 = *(void *)(v78 + 48);
    uint64_t v89 = v299;
    uint64_t v297 = *(void *)(v299 + 72);
    uint64_t v90 = *(void (**)(uint64_t, unint64_t, uint64_t))(v299 + 16);
    unint64_t v91 = v81;
    v90(v290, v88 + v297 * v81, v13);
    uint64_t v92 = *(void *)(v78 + 56);
    uint64_t v298 = v91;
    uint64_t v93 = v92 + 40 * v91;
    uint64_t v95 = *(void **)v93;
    uint64_t v94 = *(void *)(v93 + 8);
    uint64_t v96 = *(void *)(v93 + 16);
    uint64_t v97 = *(void *)(v93 + 24);
    uint64_t v98 = *(void *)(v93 + 32);
    *id v87 = *(void *)v93;
    v87[1] = v94;
    v87[2] = v96;
    v87[3] = v97;
    v87[4] = v98;
    uint64_t v99 = (uint64_t)v291;
    v90((uint64_t)v291, v86, v300);
    uint64_t v100 = (void *)(v99 + *(int *)(v85 + 48));
    void *v100 = v95;
    v100[1] = v94;
    v100[2] = v96;
    v100[3] = v97;
    v100[4] = v98;
    uint64_t v101 = (void (*)(void, void, void, void))v292;
    outlined init with take of (key: UUID, value: SortableCalculateExpression)(v99, (uint64_t)v292);
    id v102 = v95;
    uint64_t v13 = v300;
    id v103 = v102;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    id v104 = v103;
    outlined destroy of StocksKitCurrencyCache.Provider?(v86, &demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
    uint64_t v105 = v293;
    v90((uint64_t)v293, (unint64_t)v101, v13);
    uint64_t v106 = *(void (**)(char *, char *, uint64_t))(v89 + 32);
    uint64_t v107 = v276;
    v106(v276, v105, v13);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v101, &demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
    uint64_t v80 = v302;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v80 + 16) + 1, 1);
      uint64_t v80 = v302;
    }
    unint64_t v109 = *(void *)(v80 + 16);
    unint64_t v108 = *(void *)(v80 + 24);
    int64_t v78 = v283;
    if (v109 >= v108 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v108 > 1, v109 + 1, 1);
      uint64_t v80 = v302;
    }
    *(void *)(v80 + 16) = v109 + 1;
    v106((char *)(v80+ ((*(unsigned __int8 *)(v299 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v299 + 80))+ v109 * v297), v107, v13);
    uint64_t v302 = v80;
    uint64_t v110 = 1 << *(unsigned char *)(v78 + 32);
    if (v298 >= v110) {
      goto LABEL_195;
    }
    uint64_t v84 = v280;
    unint64_t v111 = v296;
    uint64_t v112 = v280[v296];
    if ((v112 & v289) == 0) {
      goto LABEL_196;
    }
    if (*(_DWORD *)(v78 + 36) != v288) {
      goto LABEL_197;
    }
    unint64_t v113 = v112 & (-2 << (v298 & 0x3F));
    if (v113)
    {
      unint64_t v81 = __clz(__rbit64(v113)) | v298 & 0xFFFFFFFFFFFFFFC0;
      uint64_t v33 = v284;
      double v26 = (char *)v294;
      uint64_t v114 = (uint64_t *)v279;
      uint64_t v115 = (char *)v287;
      goto LABEL_55;
    }
    unint64_t v116 = v296 + 1;
    unint64_t v117 = (unint64_t)(v110 + 63) >> 6;
    uint64_t v33 = v284;
    double v26 = (char *)v294;
    uint64_t v114 = (uint64_t *)v279;
    uint64_t v115 = (char *)v287;
    if (v296 + 1 < v117)
    {
      unint64_t v118 = v280[v116];
      if (v118) {
        goto LABEL_48;
      }
      unint64_t v116 = v296 + 2;
      if (v296 + 2 < v117)
      {
        unint64_t v118 = v280[v116];
        if (v118)
        {
LABEL_48:
          unint64_t v81 = __clz(__rbit64(v118)) + (v116 << 6);
          goto LABEL_55;
        }
        while (v117 - 3 != v111)
        {
          unint64_t v118 = *(void *)(v268 + 8 * v111++);
          if (v118)
          {
            unint64_t v116 = v111 + 2;
            goto LABEL_48;
          }
        }
      }
    }
    unint64_t v81 = 1 << *(unsigned char *)(v78 + 32);
LABEL_55:
    uint64_t v83 = (uint64_t *)(v115 + 1);
    if (v83 == v114) {
      break;
    }
    if ((v81 & 0x8000000000000000) == 0)
    {
      uint64_t v82 = v277;
      if ((uint64_t)v81 < v110) {
        continue;
      }
    }
    goto LABEL_192;
  }
  swift_bridgeObjectRelease();
  BOOL v38 = v274;
LABEL_60:
  uint64_t v119 = specialized Set.init<A>(_:)(v80);
  swift_bridgeObjectRelease();
  uint64_t v120 = v267;
  if (*(void *)(v119 + 16) <= *(void *)(v267 + 16) >> 3)
  {
    uint64_t v302 = v267;
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v119);
    uint64_t v120 = v267;
    uint64_t v290 = v302;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v290 = specialized _NativeSet.subtracting<A>(_:)(v119, v120);
  }
  if (*(void *)(v120 + 16) <= *(void *)(v119 + 16) >> 3)
  {
    uint64_t v302 = v119;
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v120);
    uint64_t v289 = v302;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v289 = specialized _NativeSet.subtracting<A>(_:)(v120, v119);
  }
  uint64_t v121 = v285;
  uint64_t v288 = specialized _NativeSet.intersection(_:)(v119, v120);
  swift_bridgeObjectRelease();
  uint64_t v122 = 0;
  uint64_t v123 = *(void *)(v290 + 56);
  int64_t v282 = v290 + 56;
  uint64_t v124 = 1 << *(unsigned char *)(v290 + 32);
  uint64_t v125 = -1;
  if (v124 < 64) {
    uint64_t v125 = ~(-1 << v124);
  }
  uint64_t v126 = v125 & v123;
  v287 = (uint64_t *)(v273 + 56);
  int64_t v283 = (unint64_t)(v124 + 63) >> 6;
  uint64_t v297 = v299 + 56;
  uint64_t v298 = v299 + 16;
  uint64_t v295 = v299 + 32;
  unint64_t v296 = v299 + 48;
  Swift::String v127 = (void (**)(uint64_t, uint64_t))(v299 + 8);
  v291 = (void (**)(uint64_t, uint64_t))(v299 + 8);
  while (2)
  {
    if (v126)
    {
      uint64_t v128 = v33;
      Swift::String v129 = v26;
      v292 = (void *)((v126 - 1) & v126);
      v293 = v122;
LABEL_89:
      uint64_t v136 = v299;
      uint64_t v132 = v300;
      uint64_t v137 = *(void *)(v299 + 72);
      os_log_t v138 = v278;
      (*(void (**)(void))(v299 + 16))();
      uint64_t v139 = *(void (**)(os_log_t, uint64_t, uint64_t, uint64_t))(v136 + 56);
      v139(v138, 0, 1, v132);
      if ((*(unsigned int (**)(os_log_t, uint64_t, uint64_t))(v136 + 48))(v138, 1, v132) == 1)
      {
        swift_release();
        v162 = v139;
        uint64_t v131 = (uint64_t)v271;
        double v26 = v129;
        uint64_t v33 = v128;
        goto LABEL_99;
      }
      uint64_t v140 = (uint64_t)v275;
      (*(void (**)(uint64_t *, os_log_t, uint64_t))v295)(v275, v138, v132);
      swift_beginAccess();
      uint64_t v141 = *v38;
      double v26 = v129;
      if (*(void *)(*v38 + 16) && (unint64_t v142 = specialized __RawDictionaryStorage.find<A>(_:)(v140), (v143 & 1) != 0))
      {
        uint64_t v144 = *(void *)(v141 + 56) + 40 * v142;
        uint64_t v145 = v140;
        uint64_t v146 = *(void **)v144;
        long long v147 = *(void **)(v144 + 8);
        uint64_t v148 = *(void *)(v144 + 32);
        swift_endAccess();
        long long v149 = *v127;
        id v281 = v146;
        swift_retain();
        swift_bridgeObjectRetain();
        v149(v145, v300);
        uint64_t v150 = v270;
        v280 = v147;
        CalculateExpression.id.getter();
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v279 = specialized __RawDictionaryStorage.find<A>(_:)(v150);
        LOBYTE(v147) = v151;
        swift_bridgeObjectRelease();
        v152 = 0;
        uint64_t v153 = 0;
        if (v147)
        {
          uint64_t v277 = v148;
          v154 = v287;
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v156 = *v154;
          v301 = (void *)*v154;
          uint64_t *v154 = 0x8000000000000000;
          if (!isUniquelyReferenced_nonNull_native)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v156 = (uint64_t)v301;
          }
          int64_t v157 = v279;
          Swift::String v127 = v291;
          v149(*(void *)(v156 + 48) + v279 * v137, v300);
          uint64_t v158 = (uint64_t)v301;
          uint64_t v159 = v301[7] + 40 * v157;
          uint64_t v153 = *(void *)(v159 + 8);
          int64_t v160 = v157;
          v152 = *(void **)v159;
          specialized _NativeDictionary._delete(at:)(v160, (uint64_t)v301);
          uint64_t *v154 = v158;
          swift_bridgeObjectRelease();
        }
        v149(v270, v300);
        swift_endAccess();
        outlined consume of SortableCalculateExpression?(v152, v153);
        *(unsigned char *)(v273 + 16) = 1;
        swift_bridgeObjectRelease();
        swift_release();

        uint64_t v33 = v284;
        BOOL v38 = v274;
        double v26 = (char *)v294;
        uint64_t v121 = v285;
      }
      else
      {
        swift_endAccess();
        (*v127)(v140, v300);
        uint64_t v121 = v285;
        uint64_t v33 = v128;
      }
      uint64_t v126 = (uint64_t)v292;
      uint64_t v122 = v293;
      continue;
    }
    break;
  }
  int64_t v130 = (int64_t)(v122 + 1);
  if (__OFADD__(v122, 1)) {
    goto LABEL_198;
  }
  uint64_t v131 = (uint64_t)v271;
  uint64_t v132 = v300;
  if (v130 < v283)
  {
    uint64_t v133 = *(void *)(v282 + 8 * v130);
    int64_t v134 = (int64_t)(v122 + 1);
    if (!v133)
    {
      int64_t v134 = (int64_t)(v122 + 2);
      if ((uint64_t)(v122 + 2) >= v283) {
        goto LABEL_98;
      }
      uint64_t v133 = *(void *)(v282 + 8 * v134);
      if (!v133)
      {
        int64_t v134 = (int64_t)(v122 + 3);
        if ((uint64_t)(v122 + 3) >= v283) {
          goto LABEL_98;
        }
        uint64_t v133 = *(void *)(v282 + 8 * v134);
        if (!v133)
        {
          int64_t v134 = (int64_t)(v122 + 4);
          if ((uint64_t)(v122 + 4) >= v283) {
            goto LABEL_98;
          }
          uint64_t v133 = *(void *)(v282 + 8 * v134);
          if (!v133)
          {
            uint64_t v135 = v122 + 5;
            if ((uint64_t)(v122 + 5) >= v283) {
              goto LABEL_98;
            }
            uint64_t v133 = *(void *)(v282 + 8 * (void)v135);
            if (!v133)
            {
              while (1)
              {
                int64_t v134 = (int64_t)(v135 + 1);
                if (__OFADD__(v135, 1)) {
                  goto LABEL_203;
                }
                if (v134 >= v283) {
                  goto LABEL_98;
                }
                uint64_t v133 = *(void *)(v282 + 8 * v134);
                ++v135;
                if (v133) {
                  goto LABEL_88;
                }
              }
            }
            int64_t v134 = (int64_t)(v122 + 5);
          }
        }
      }
    }
LABEL_88:
    uint64_t v128 = v33;
    Swift::String v129 = v26;
    v292 = (void *)((v133 - 1) & v133);
    v293 = (char *)v134;
    goto LABEL_89;
  }
LABEL_98:
  v162 = *(void (**)(os_log_t, uint64_t, uint64_t, uint64_t))v297;
  (*(void (**)(os_log_t, uint64_t, uint64_t, uint64_t))v297)(v278, 1, 1, v300);
  swift_release();
LABEL_99:
  v163 = 0;
  uint64_t v164 = *(void *)(v289 + 56);
  id v281 = (id)(v289 + 56);
  uint64_t v165 = 1 << *(unsigned char *)(v289 + 32);
  uint64_t v166 = -1;
  if (v165 < 64) {
    uint64_t v166 = ~(-1 << v165);
  }
  unint64_t v167 = v166 & v164;
  int64_t v282 = (unint64_t)(v165 + 63) >> 6;
  v275 = &v302;
  *(void *)&long long v161 = 136315394;
  long long v270 = v161;
  uint64_t v268 = MEMORY[0x263F8EE58] + 8;
  v292 = v162;
  while (2)
  {
    if (v167)
    {
      unint64_t v168 = __clz(__rbit64(v167));
      v167 &= v167 - 1;
      v293 = v163;
      unint64_t v169 = v168 | ((void)v163 << 6);
LABEL_122:
      uint64_t v174 = v299;
      uint64_t v175 = *(void *)(v299 + 72);
      v176 = *(void (**)(char *, unint64_t, uint64_t))(v299 + 16);
      v176(v121, *(void *)(v289 + 48) + v175 * v169, v132);
      ((void (*)(char *, void, uint64_t, uint64_t))v292)(v121, 0, 1, v132);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48))(v121, 1, v132) == 1)
      {
        swift_release();
        Swift::String v127 = v291;
        v226 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v292;
        goto LABEL_147;
      }
      (*(void (**)(char *, char *, uint64_t))v295)(v26, v121, v132);
      v177 = v286;
      swift_beginAccess();
      uint64_t v178 = *v177;
      if (*(void *)(*v177 + 16)
        && (unint64_t v179 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v26), (v180 & 1) != 0))
      {
        uint64_t v181 = *(void *)(v178 + 56) + 40 * v179;
        v182 = *(void **)v181;
        uint64_t v183 = *(void *)(v181 + 8);
        uint64_t v184 = *(void *)(v181 + 16);
        unint64_t v185 = *(void *)(v181 + 32);
        uint64_t v290 = *(void *)(v181 + 24);
        swift_endAccess();
        v186 = *v291;
        swift_retain();
        swift_bridgeObjectRetain();
        v280 = v182;
        int64_t v283 = (int64_t)v186;
        v186((uint64_t)v26, v132);
        uint64_t v187 = v272;
        CalculateExpression.id.getter();
        v188 = v287;
        swift_beginAccess();
        swift_retain();
        int v189 = swift_isUniquelyReferenced_nonNull_native();
        v301 = (void *)*v188;
        uint64_t v190 = (uint64_t)v301;
        uint64_t *v188 = 0x8000000000000000;
        unint64_t v192 = specialized __RawDictionaryStorage.find<A>(_:)(v187);
        uint64_t v193 = *(void *)(v190 + 16);
        BOOL v194 = (v191 & 1) == 0;
        uint64_t v195 = v193 + v194;
        if (__OFADD__(v193, v194)) {
          goto LABEL_201;
        }
        char v196 = v191;
        if (*(void *)(v190 + 24) >= v195)
        {
          if ((v189 & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v195, v189);
          unint64_t v197 = specialized __RawDictionaryStorage.find<A>(_:)(v272);
          if ((v196 & 1) != (v198 & 1)) {
            goto LABEL_206;
          }
          unint64_t v192 = v197;
        }
        double v26 = (char *)v294;
        v199 = v301;
        if (v196)
        {
          uint64_t v200 = v301[7] + 40 * v192;
          v201 = *(void **)v200;
          swift_bridgeObjectRelease();
          swift_release();

          *(void *)uint64_t v200 = 0;
          *(void *)(v200 + 8) = v183;
          *(void *)(v200 + 16) = v184;
          *(void *)(v200 + 24) = 0;
          *(void *)(v200 + 32) = 0xE000000000000000;
          uint64_t v132 = v300;
        }
        else
        {
          v301[(v192 >> 6) + 8] |= 1 << v192;
          v176((char *)(v199[6] + v192 * v175), v272, v132);
          v202 = (void *)(v199[7] + 40 * v192);
          void *v202 = 0;
          v202[1] = v183;
          v202[2] = v184;
          v202[3] = 0;
          v202[4] = 0xE000000000000000;
          uint64_t v203 = v199[2];
          BOOL v204 = __OFADD__(v203, 1);
          uint64_t v205 = v203 + 1;
          if (v204) {
            goto LABEL_202;
          }
          v199[2] = v205;
        }
        uint64_t v206 = v273;
        *(void *)(v273 + 56) = v199;
        swift_bridgeObjectRelease();
        Swift::String v127 = v291;
        v207 = (void (*)(uint64_t, uint64_t))v283;
        ((void (*)(unint64_t, uint64_t))v283)(v272, v132);
        swift_endAccess();
        *(unsigned char *)(v206 + 16) = 1;
        uint64_t v208 = HIBYTE(v185) & 0xF;
        if ((v185 & 0x2000000000000000) == 0) {
          uint64_t v208 = v290 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v209 = (uint64_t)v269;
        if (v208)
        {
          uint64_t v210 = one-time initialization token for mathLogger;
          swift_retain();
          if (v210 != -1) {
            swift_once();
          }
          uint64_t v211 = type metadata accessor for Logger();
          __swift_project_value_buffer(v211, (uint64_t)mathLogger);
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          v212 = v280;
          v213 = Logger.logObject.getter();
          os_log_type_t v214 = static os_log_type_t.default.getter();
          int v215 = v214;
          if (os_log_type_enabled(v213, v214))
          {
            uint64_t v216 = swift_slowAlloc();
            os_log_t v278 = v213;
            uint64_t v217 = v216;
            uint64_t v279 = swift_slowAlloc();
            uint64_t v302 = v279;
            *(_DWORD *)uint64_t v217 = v270;
            LODWORD(v277) = v215;
            swift_bridgeObjectRetain();
            v301 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v290, v185, &v302);
            v280 = v212;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v217 + 12) = 2080;
            v276 = (char *)(v217 + 14);
            CalculateExpression.id.getter();
            uint64_t v218 = UUID.uuidString.getter();
            unint64_t v220 = v219;
            ((void (*)(char *, uint64_t))v283)(v269, v132);
            v301 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v218, v220, &v302);
            v212 = v280;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_release_n();

            uint64_t v209 = (uint64_t)v269;
            swift_bridgeObjectRelease();
            os_log_t v221 = v278;
            _os_log_impl(&dword_20C2D7000, v278, (os_log_type_t)v277, "CalculateDocumentController.updateSubDocument: graphableIdentifier: %s, for: %s", (uint8_t *)v217, 0x16u);
            uint64_t v222 = v279;
            swift_arrayDestroy();
            uint64_t v223 = v222;
            v207 = (void (*)(uint64_t, uint64_t))v283;
            MEMORY[0x210550270](v223, -1, -1);
            uint64_t v224 = v217;
            v225 = (void *)v290;
            MEMORY[0x210550270](v224, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_release_n();
            v225 = (void *)v290;
          }
          CalculateExpression.id.getter();
          CanvasCalculateDocumentProxy.setGraphableIdentifier(_:for:)(v225, (void *)v185, v209);
          swift_bridgeObjectRelease();
          swift_release();

          swift_release();
          v207(v209, v132);
          uint64_t v131 = (uint64_t)v271;
          uint64_t v33 = v284;
          BOOL v38 = v274;
          double v26 = (char *)v294;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();

          uint64_t v131 = (uint64_t)v271;
          uint64_t v33 = v284;
          BOOL v38 = v274;
        }
      }
      else
      {
        swift_endAccess();
        Swift::String v127 = v291;
        (*v291)((uint64_t)v26, v132);
      }
      uint64_t v121 = v285;
      v163 = v293;
      continue;
    }
    break;
  }
  int64_t v170 = (int64_t)(v163 + 1);
  if (__OFADD__(v163, 1)) {
    goto LABEL_199;
  }
  if (v170 < v282)
  {
    unint64_t v171 = *((void *)v281 + v170);
    int64_t v172 = (int64_t)(v163 + 1);
    if (!v171)
    {
      int64_t v172 = (int64_t)(v163 + 2);
      if ((uint64_t)(v163 + 2) >= v282) {
        goto LABEL_146;
      }
      unint64_t v171 = *((void *)v281 + v172);
      if (!v171)
      {
        int64_t v172 = (int64_t)(v163 + 3);
        if ((uint64_t)(v163 + 3) >= v282) {
          goto LABEL_146;
        }
        unint64_t v171 = *((void *)v281 + v172);
        if (!v171)
        {
          int64_t v172 = (int64_t)(v163 + 4);
          if ((uint64_t)(v163 + 4) >= v282) {
            goto LABEL_146;
          }
          unint64_t v171 = *((void *)v281 + v172);
          if (!v171)
          {
            v173 = v163 + 5;
            if ((uint64_t)(v163 + 5) >= v282) {
              goto LABEL_146;
            }
            unint64_t v171 = *((void *)v281 + (void)v173);
            if (!v171)
            {
              while (1)
              {
                int64_t v172 = (int64_t)(v173 + 1);
                if (__OFADD__(v173, 1)) {
                  break;
                }
                if (v172 >= v282) {
                  goto LABEL_146;
                }
                unint64_t v171 = *((void *)v281 + v172);
                ++v173;
                if (v171) {
                  goto LABEL_121;
                }
              }
LABEL_204:
              __break(1u);
              goto LABEL_205;
            }
            int64_t v172 = (int64_t)(v163 + 5);
          }
        }
      }
    }
LABEL_121:
    unint64_t v167 = (v171 - 1) & v171;
    v293 = (char *)v172;
    unint64_t v169 = __clz(__rbit64(v171)) + (v172 << 6);
    goto LABEL_122;
  }
LABEL_146:
  v227 = v121;
  v226 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v292;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v292)(v227, 1, 1, v132);
  swift_release();
LABEL_147:
  uint64_t v228 = 0;
  uint64_t v229 = v288 + 56;
  uint64_t v230 = 1 << *(unsigned char *)(v288 + 32);
  uint64_t v231 = -1;
  if (v230 < 64) {
    uint64_t v231 = ~(-1 << v230);
  }
  unint64_t v232 = v231 & *(void *)(v288 + 56);
  int64_t v294 = (unint64_t)(v230 + 63) >> 6;
  uint64_t v289 = v288 + 56;
  while (2)
  {
    if (v232)
    {
      unint64_t v233 = __clz(__rbit64(v232));
      v232 &= v232 - 1;
      unint64_t v234 = v233 | (v228 << 6);
      goto LABEL_169;
    }
    int64_t v235 = v228 + 1;
    if (__OFADD__(v228, 1)) {
      goto LABEL_200;
    }
    if (v235 >= v294)
    {
LABEL_184:
      v226(v33, 1, 1, v132);
LABEL_185:
      swift_release();
      return swift_release();
    }
    unint64_t v236 = *(void *)(v229 + 8 * v235);
    ++v228;
    if (v236) {
      goto LABEL_168;
    }
    uint64_t v228 = v235 + 1;
    if (v235 + 1 >= v294) {
      goto LABEL_184;
    }
    unint64_t v236 = *(void *)(v229 + 8 * v228);
    if (v236) {
      goto LABEL_168;
    }
    uint64_t v228 = v235 + 2;
    if (v235 + 2 >= v294) {
      goto LABEL_184;
    }
    unint64_t v236 = *(void *)(v229 + 8 * v228);
    if (v236) {
      goto LABEL_168;
    }
    uint64_t v228 = v235 + 3;
    if (v235 + 3 >= v294) {
      goto LABEL_184;
    }
    unint64_t v236 = *(void *)(v229 + 8 * v228);
    if (v236)
    {
LABEL_168:
      unint64_t v232 = (v236 - 1) & v236;
      unint64_t v234 = __clz(__rbit64(v236)) + (v228 << 6);
LABEL_169:
      uint64_t v238 = v299;
      (*(void (**)(char *, unint64_t, uint64_t))(v299 + 16))(v33, *(void *)(v288 + 48) + *(void *)(v299 + 72) * v234, v132);
      v226(v33, 0, 1, v132);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v238 + 48))(v33, 1, v132) == 1) {
        goto LABEL_185;
      }
      v239 = v226;
      (*(void (**)(uint64_t, char *, uint64_t))v295)(v131, v33, v132);
      swift_beginAccess();
      uint64_t v240 = *v38;
      if (!*(void *)(*v38 + 16) || (unint64_t v241 = specialized __RawDictionaryStorage.find<A>(_:)(v131), (v242 & 1) == 0))
      {
        swift_endAccess();
        (*v127)(v131, v132);
        v226 = v239;
        continue;
      }
      uint64_t v290 = v228;
      uint64_t v243 = *(void *)(v240 + 56) + 40 * v241;
      v244 = *(void **)v243;
      double v245 = *(double *)(v243 + 16);
      v246 = *(char **)(v243 + 32);
      swift_endAccess();
      v247 = v286;
      swift_beginAccess();
      uint64_t v248 = *v247;
      uint64_t v249 = *(void *)(v248 + 16);
      id v250 = v244;
      swift_retain();
      v293 = v246;
      swift_bridgeObjectRetain();
      if (!v249 || (unint64_t v251 = specialized __RawDictionaryStorage.find<A>(_:)(v131), (v252 & 1) == 0))
      {
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_release();

        Swift::String v127 = v291;
        uint64_t v132 = v300;
        (*v291)(v131, v300);
        BOOL v38 = v274;
        v226 = v239;
        uint64_t v229 = v289;
        uint64_t v228 = v290;
        continue;
      }
      v287 = (uint64_t *)v250;
      uint64_t v253 = *(void *)(v248 + 56) + 40 * v251;
      v254 = *(void **)v253;
      uint64_t v255 = *(void *)(v253 + 8);
      double v256 = *(double *)(v253 + 16);
      int64_t v257 = *(void *)(v253 + 32);
      swift_endAccess();
      v285 = v254;
      swift_retain();
      int64_t v283 = v257;
      swift_bridgeObjectRetain();
      uint64_t v258 = CalculateExpression.expression.getter();
      uint64_t v260 = v259;
      uint64_t v261 = v255;
      uint64_t v262 = CalculateExpression.expression.getter();
      uint64_t v132 = v300;
      uint64_t v228 = v290;
      if (v258 == v262 && v260 == v263)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v229 = v289;
        Swift::String v127 = v291;
        if (v245 != v256)
        {
LABEL_182:
          CanvasCalculateDocumentProxy.move(_:sortIndex:)(v261, v256);
          swift_bridgeObjectRelease();
          swift_release();

          swift_bridgeObjectRelease();
          swift_release();

          uint64_t v131 = (uint64_t)v271;
          (*v127)((uint64_t)v271, v132);
          goto LABEL_183;
        }
      }
      else
      {
        char v264 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v229 = v289;
        Swift::String v127 = v291;
        if ((v264 & 1) == 0 || v245 != v256) {
          goto LABEL_182;
        }
      }
      uint64_t v131 = (uint64_t)v271;
      (*v127)((uint64_t)v271, v132);
      swift_bridgeObjectRelease();
      swift_release();

      swift_bridgeObjectRelease();
      swift_release();

LABEL_183:
      uint64_t v33 = v284;
      BOOL v38 = v274;
      v226 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v292;
      continue;
    }
    break;
  }
  int64_t v237 = v235 + 4;
  if (v237 >= v294) {
    goto LABEL_184;
  }
  unint64_t v236 = *(void *)(v229 + 8 * v237);
  if (v236)
  {
    uint64_t v228 = v237;
    goto LABEL_168;
  }
  while (1)
  {
    uint64_t v228 = v237 + 1;
    if (__OFADD__(v237, 1)) {
      break;
    }
    if (v228 >= v294) {
      goto LABEL_184;
    }
    unint64_t v236 = *(void *)(v229 + 8 * v228);
    ++v237;
    if (v236) {
      goto LABEL_168;
    }
  }
LABEL_205:
  __break(1u);
LABEL_206:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized Canvas.liveStreamMessenger.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRMulticastSyncManagerCatchupBehavior();
  uint64_t v3 = *(void **)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  __n128 v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CRKeyPath();
  uint64_t v61 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v60 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)((char *)v1 + direct field offset for Canvas.liveStreamMessenger);
  swift_beginAccess();
  id v64 = v12;
  uint64_t v13 = *v12;
  if (*v12)
  {
    uint64_t v58 = v6;
    uint64_t v59 = v5;
    uint64_t v63 = v64[1];
    uint64_t v14 = one-time initialization token for multipeerLogger;
    swift_unknownObjectRetain();
    if (v14 != -1) {
      swift_once();
    }
    uint64_t v57 = v10;
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)multipeerLogger);
    swift_unknownObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v56 = v3;
      uint64_t v18 = swift_slowAlloc();
      uint64_t ObjectType = v2;
      id v19 = (uint8_t *)v18;
      uint64_t v20 = swift_slowAlloc();
      v66[0] = v20;
      uint64_t v54 = v9;
      *(_DWORD *)id v19 = 136315138;
      uint64_t v21 = ObjectIdentifier.debugDescription.getter();
      uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v66);
      uint64_t v3 = v56;
      uint64_t v9 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v16, v17, "New session for %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v20, -1, -1);
      uint64_t v2 = ObjectType;
      MEMORY[0x210550270](v19, -1, -1);
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    uint64_t ObjectType = swift_getObjectType();
    id v56 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_context);
    uint64_t v31 = (void *)MEMORY[0x263F8EED0];
    uint64_t v32 = (uint64_t)v60;
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x930))();
    uint64_t v33 = *(void *)((char *)v1 + direct field offset for Canvas.paperView)
        + *(void *)((*v31 & **(void **)((char *)v1 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v55 = v13;
    uint64_t v35 = v58;
    v34(v9, v33, v58);
    uint64_t v36 = (void (**)(uint64_t, uint64_t))v3;
    uint64_t v37 = (uint64_t)v59;
    (*((void (**)(char *, void, uint64_t))v3 + 13))(v59, *MEMORY[0x263F32FA8], v2);
    uint64_t v38 = type metadata accessor for Paper();
    uint64_t v39 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (void (*)(uint64_t))type metadata accessor for Paper);
    int64_t v40 = (uint64_t *)PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(v56, v32, (uint64_t)v9, v37, 0x7265706150, 0xE500000000000000, ObjectType, v38, v63, v39);
    v36[1](v37, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v35);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v32, v57);
    uint64_t v41 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Canvas<Paper>);
    PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(v40, (uint64_t)v1, 0x7265706150, 0xE500000000000000, (uint64_t)partial apply for specialized closure #1 in Canvas.liveStreamMessenger.didset, v41, ObjectType, v42, v63, (uint64_t)&protocol witness table for AnyCanvas);
    swift_release_n();
    *(void *)((char *)v1 + direct field offset for Canvas.multipeerConnection) = v40;
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    if (one-time initialization token for multipeerLogger != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)multipeerLogger);
    uint64_t v24 = v1;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v66[0] = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v29 = ObjectIdentifier.debugDescription.getter();
      uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v25, v26, "Ended session for %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v28, -1, -1);
      MEMORY[0x210550270](v27, -1, -1);
    }
    else
    {
    }
    *(void *)((char *)v24 + direct field offset for Canvas.multipeerConnection) = 0;
    swift_release();
  }
  BOOL v43 = *v64 != 0;
  uint64_t v44 = (unsigned __int8 *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings;
  uint64_t v45 = swift_beginAccess();
  *uint64_t v44 = v43;
  uint64_t v46 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v1) + 0x320))(v45);
  if (v46)
  {
    uint64_t v47 = v46;
    id v48 = objc_msgSend(v46, sel_canvasView);

    if (v48)
    {
      objc_msgSend(v48, sel_setGenerateLiveDrawing_, *v44);
    }
  }
  uint64_t v49 = v64[1];
  uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v1) + 0x208);
  uint64_t v51 = swift_unknownObjectRetain();
  return v50(v51, v49);
}

{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  BOOL v49;
  void *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t ObjectType;
  char *v75;
  uint64_t v76;
  uint64_t v77[3];

  uint64_t v1 = type metadata accessor for CRMulticastSyncManagerCatchupBehavior();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  unint64_t v70 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v72 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CRKeyPath();
  uint64_t v71 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v69 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = v0;
  uint64_t v9 = &v0[direct field offset for Canvas.liveStreamMessenger];
  swift_beginAccess();
  uint64_t v10 = (void *)MEMORY[0x263F8EED0];
  if (*(void *)v9)
  {
    uint64_t v11 = *(void *)v9;
    uint64_t v67 = v1;
    uint64_t v63 = *((void *)v9 + 1);
    uint64_t v12 = one-time initialization token for multipeerLogger;
    swift_unknownObjectRetain();
    if (v12 != -1) {
      swift_once();
    }
    id v64 = v7;
    uint64_t v65 = v4;
    uint64_t v66 = v2;
    uint64_t v68 = v9;
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)multipeerLogger);
    swift_unknownObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    uint64_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t ObjectType = v5;
      os_log_type_t v17 = (uint8_t *)v16;
      uint64_t v18 = swift_slowAlloc();
      v77[0] = v18;
      *(_DWORD *)os_log_type_t v17 = 136315138;
      id v19 = ObjectIdentifier.debugDescription.getter();
      unint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v14, v15, "New session for %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v18, -1, -1);
      uint64_t v21 = v17;
      __n128 v5 = ObjectType;
      MEMORY[0x210550270](v21, -1, -1);
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    uint64_t v73 = v11;
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v30 = v75;
    uint64_t v62 = *(void **)&v75[OBJC_IVAR____TtC8PaperKit9AnyCanvas_context];
    uint64_t v31 = direct field offset for Canvas.paperView;
    uint64_t v32 = *(void *)&v75[direct field offset for Canvas.paperView]
        + *(void *)((*MEMORY[0x263F8EED0] & **(void **)&v75[direct field offset for Canvas.paperView]) + 0x380);
    swift_beginAccess();
    uint64_t v33 = v70;
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
    uint64_t v35 = (uint64_t)v72;
    v34(v72, v32, v5);
    uint64_t v36 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_4(&lazy protocol witness table cache variable for type Image and conformance Image, 255, (void (*)(uint64_t))type metadata accessor for Image);
    uint64_t v37 = (uint64_t)v69;
    Capsule<>.rootID.getter();
    unint64_t v70 = *(void *)(v33 + 8);
    ((void (*)(uint64_t, uint64_t))v70)(v35, v5);
    uint64_t v38 = *(void *)&v30[v31] + *(void *)((*MEMORY[0x263F8EED0] & **(void **)&v30[v31]) + 0x380);
    swift_beginAccess();
    v34((char *)v35, v38, v5);
    uint64_t v39 = v66;
    int64_t v40 = (uint64_t)v65;
    uint64_t v41 = v67;
    (*(void (**)(char *, void, uint64_t))(v66 + 104))(v65, *MEMORY[0x263F32FA8], v67);
    uint64_t v42 = type metadata accessor for Image();
    BOOL v43 = v63;
    uint64_t v44 = (uint64_t *)PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(v62, v37, v35, v40, 0x7265706150, 0xE500000000000000, ObjectType, v42, v63, v36);
    uint64_t v45 = v40;
    uint64_t v10 = (void *)MEMORY[0x263F8EED0];
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v45, v41);
    ((void (*)(uint64_t, uint64_t))v70)(v35, v5);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v37, v64);
    uint64_t v46 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Canvas<Image>);
    uint64_t v60 = v43;
    id v48 = v75;
    PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(v44, (uint64_t)v75, 0x7265706150, 0xE500000000000000, (uint64_t)partial apply for specialized closure #1 in Canvas.liveStreamMessenger.didset, v46, ObjectType, v47, v60, (uint64_t)&protocol witness table for AnyCanvas);
    swift_release_n();
    *(void *)&v48[direct field offset for Canvas.multipeerConnection] = v44;
    swift_unknownObjectRelease();
    uint64_t v9 = v68;
  }
  else
  {
    if (one-time initialization token for multipeerLogger != -1) {
      swift_once();
    }
    unint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)multipeerLogger);
    uint64_t v23 = v75;
    uint64_t v24 = Logger.logObject.getter();
    uint64_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      v77[0] = v27;
      *(_DWORD *)os_log_type_t v26 = 136315138;
      uint64_t v28 = ObjectIdentifier.debugDescription.getter();
      unint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v77);
      uint64_t v10 = (void *)MEMORY[0x263F8EED0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v24, v25, "Ended session for %s", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v27, -1, -1);
      MEMORY[0x210550270](v26, -1, -1);
    }
    else
    {
    }
    *(void *)&v23[direct field offset for Canvas.multipeerConnection] = 0;
  }
  swift_release();
  uint64_t v49 = *(void *)v9 != 0;
  uint64_t v50 = v75;
  uint64_t v51 = (unsigned __int8 *)&v75[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings];
  unint64_t v52 = swift_beginAccess();
  *uint64_t v51 = v49;
  uint64_t v53 = (void *)(*(uint64_t (**)(uint64_t))((*v10 & *v50) + 0x320))(v52);
  if (v53)
  {
    uint64_t v54 = v53;
    uint64_t v55 = objc_msgSend(v53, sel_canvasView);

    if (v55)
    {
      objc_msgSend(v55, sel_setGenerateLiveDrawing_, *v51);
    }
  }
  id v56 = *((void *)v9 + 1);
  uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t))((*v10 & *(void *)v75) + 0x208);
  uint64_t v58 = swift_unknownObjectRetain();
  return v57(v58, v56);
}

void specialized closure #1 in Canvas.liveStreamMessenger.didset(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x210550400](v3);
  if (v4)
  {
    __n128 v5 = v4;
    char v10 = 3;
    uint64_t v6 = (void *)MEMORY[0x263F8EED0];
    uint64_t v7 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v4) + 0x550);
    uint64_t v8 = type metadata accessor for Paper();
    uint64_t v9 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_4(&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (void (*)(uint64_t))type metadata accessor for Paper);
    v7(a1, &v10, v8, v9);
    char v10 = 3;
    (*(void (**)(char *))((*v6 & *v5) + 0x530))(&v10);
  }
}

{
  uint64_t v3;
  void *v4;
  void *v5;
  void (*v6)(uint64_t, char *, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char v9;

  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x210550400](v3);
  if (v4)
  {
    __n128 v5 = v4;
    uint64_t v9 = 3;
    uint64_t v6 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v4) + 0x550);
    uint64_t v7 = type metadata accessor for Image();
    uint64_t v8 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_4(&lazy protocol witness table cache variable for type Image and conformance Image, 255, (void (*)(uint64_t))type metadata accessor for Image);
    v6(a1, &v9, v7, v8);
    uint64_t v9 = 3;
    AnyCanvas.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)&v9);
  }
}

uint64_t PaperTextAttachmentCanvasView.liveStreamMessenger.getter()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView))
  {
    swift_beginAccess();
    return swift_unknownObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *key path getter for PaperTextAttachmentCanvasView.liveStreamMessenger : PaperTextAttachmentCanvasView@<X0>(void *result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(*result + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v3)
  {
    uint64_t v4 = (_OWORD *)(v3 + direct field offset for Canvas.liveStreamMessenger);
    swift_beginAccess();
    *a2 = *v4;
    return (void *)swift_unknownObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *key path setter for PaperTextAttachmentCanvasView.liveStreamMessenger : PaperTextAttachmentCanvasView(uint64_t *result, void *a2)
{
  uint64_t v2 = *(char **)(*a2 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v2)
  {
    uint64_t v3 = *result;
    uint64_t v4 = result[1];
    __n128 v5 = &v2[direct field offset for Canvas.liveStreamMessenger];
    swift_beginAccess();
    *(void *)__n128 v5 = v3;
    *((void *)v5 + 1) = v4;
    swift_unknownObjectRetain_n();
    uint64_t v6 = v2;
    swift_unknownObjectRelease();
    specialized Canvas.liveStreamMessenger.didset();

    return (uint64_t *)swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*PaperTextAttachmentCanvasView.liveStreamMessenger.modify(void (**a1)(uint64_t a1, char a2)))(uint64_t a1, char a2)
{
  uint64_t result = (void (*)(uint64_t, char))malloc(0x68uLL);
  *a1 = result;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView;
  *((void *)result + 11) = v1;
  *((void *)result + 12) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  if (v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = (_OWORD *)(v5 + direct field offset for Canvas.liveStreamMessenger);
    swift_beginAccess();
    *(_OWORD *)((char *)v6 + 72) = *v7;
    swift_unknownObjectRetain();
    return PaperTextAttachmentCanvasView.liveStreamMessenger.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void PaperTextAttachmentCanvasView.liveStreamMessenger.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(char **)(*(void *)(*(void *)a1 + 88) + *(void *)(*(void *)a1 + 96));
  if ((a2 & 1) == 0)
  {
    if (v3)
    {
      uint64_t v8 = v2[9];
      uint64_t v9 = v2[10];
      char v10 = &v3[direct field offset for Canvas.liveStreamMessenger];
      swift_beginAccess();
      *(void *)char v10 = v8;
      *((void *)v10 + 1) = v9;
      uint64_t v11 = v3;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      specialized Canvas.liveStreamMessenger.didset();
      swift_unknownObjectRelease();

      goto LABEL_6;
    }
LABEL_10:
    __break(1u);
    return;
  }
  if (!v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = v2[9];
  uint64_t v5 = v2[10];
  uint64_t v6 = &v3[direct field offset for Canvas.liveStreamMessenger];
  swift_beginAccess();
  *(void *)uint64_t v6 = v4;
  *((void *)v6 + 1) = v5;
  swift_unknownObjectRetain_n();
  uint64_t v7 = v3;
  swift_unknownObjectRelease();
  specialized Canvas.liveStreamMessenger.didset();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
LABEL_6:
  free(v2);
}

id PaperTextAttachmentCanvasView.init(frame:paperIdentifier:paperURL:coherenceContextURL:encryptionDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  char v10 = v9;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasViewDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasTiledView] = 0;
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView] = 0;
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_previousMathDocument] = 0;
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_contentView] = 0;
  uint64_t v21 = (uint64_t)&v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_encryptionDelegate];
  *(_OWORD *)uint64_t v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(void *)(v21 + 32) = 0;
  unint64_t v22 = &v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_paperIdentifier];
  *(void *)unint64_t v22 = a1;
  *((void *)v22 + 1) = a2;
  uint64_t v23 = &v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_paperURL];
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v25 = *(void *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v23, a3, v24);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a4, (uint64_t)&v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_coherenceContextURL], &demangling cache variable for type metadata for URL?);
  swift_beginAccess();
  os_log_type_t v26 = v10;
  outlined assign with copy of EncryptionDelegate?(a5, v21);
  swift_endAccess();

  v29.receiver = v26;
  v29.super_class = ObjectType;
  id v27 = objc_msgSendSuper2(&v29, sel_initWithFrame_, a6, a7, a8, a9);
  PaperTextAttachmentCanvasView.setupViews()();

  outlined destroy of StocksKitCurrencyCache.Provider?(a5, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  outlined destroy of StocksKitCurrencyCache.Provider?(a4, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(a3, v24);
  return v27;
}

Swift::Void __swiftcall PaperTextAttachmentCanvasView.setupViews()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v59 - v6;
  MEMORY[0x270FA5388](v8);
  char v10 = (char *)&v59 - v9;
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v59 - v13;
  objc_msgSend(v1, sel_frame, v12);
  double v16 = v15;
  double v18 = v17;
  objc_msgSend(v1, sel_setMinimumZoomScale_, 1.0);
  objc_msgSend(v1, sel_setMaximumZoomScale_, 1.0);
  objc_msgSend(v1, sel_setAlwaysBounceVertical_, 0);
  objc_msgSend(v1, sel_setAlwaysBounceHorizontal_, 0);
  objc_msgSend(v1, sel_setDelaysContentTouches_, 1);
  objc_msgSend(v1, sel_setContentInsetAdjustmentBehavior_, 2);
  id v19 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v20 = (void *)MEMORY[0x21054D080](0xD000000000000036, 0x800000020C85FBD0);
  unsigned int v59 = objc_msgSend(v19, sel_BOOLForKey_, v20);

  uint64_t v21 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_paperIdentifier];
  uint64_t v22 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_paperIdentifier + 8];
  uint64_t v23 = &v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_paperURL];
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v25 = *(void *)(v24 - 8);
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v14, v23, v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v14, 0, 1, v24);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_coherenceContextURL], (uint64_t)v10, &demangling cache variable for type metadata for URL?);
  uint64_t v26 = (uint64_t)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_encryptionDelegate];
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v26, (uint64_t)v62, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  id v27 = (char *)objc_allocWithZone((Class)type metadata accessor for PaperNoTextViewTextAttachmentView(0));
  swift_unknownObjectUnownedInit();
  *(void *)&v27[direct field offset for PaperNoTextViewTextAttachmentView.hostDocument] = 0;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v14, (uint64_t)v7, &demangling cache variable for type metadata for URL?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v62, (uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  unsigned __int8 v60 = 0;
  swift_bridgeObjectRetain();
  uint64_t v28 = PaperTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(v21, v22, (uint64_t)v7, 0, (uint64_t)v4, (uint64_t)v61, &v60, 0);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v62, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for URL?);
  uint64_t v29 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView;
  unint64_t v30 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView];
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView] = v28;

  uint64_t v31 = *(void **)&v1[v29];
  if (!v31)
  {
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v31, sel_setFrame_, 0.0, 0.0, v16, v18);
  uint64_t v32 = *(void *)&v1[v29];
  if (!v32)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *(void *)(v32 + direct field offset for PaperTextAttachmentView.paperViewDelegate + 8) = &protocol witness table for PaperTextAttachmentCanvasView;
  swift_unknownObjectWeakAssign();
  id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_initWithFrame_, 0.0, 0.0, v16, v18);
  uint64_t v34 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_contentView;
  uint64_t v35 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_contentView];
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_contentView] = v33;

  uint64_t v36 = *(void **)&v1[v34];
  if (!v36)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  objc_msgSend(v36, sel_setOpaque_, 1);
  uint64_t v37 = *(void **)&v1[v34];
  if (!v37)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v38 = self;
  id v39 = v37;
  id v40 = objc_msgSend(v38, sel_systemBackgroundColor);
  objc_msgSend(v39, sel_setBackgroundColor_, v40);

  uint64_t v41 = *(void **)&v1[v34];
  if (!v41)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!*(void *)&v1[v29])
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v42 = v59 ^ 1;
  objc_msgSend(v41, sel_addSubview_);
  BOOL v43 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  uint64_t v63 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v44 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  unint64_t v64 = v44;
  v62[0] = 3;
  char v45 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  id v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14BF8]), sel_initInScrollView_sixChannelBlending_defaultDrawingClass_readOnly_, v1, v42, swift_getObjCClassFromMetadata(), (v45 & 1) == 0);
  id v47 = objc_msgSend(v46, sel_canvasView);
  if (v47)
  {
    id v48 = v47;
    id v49 = objc_msgSend(objc_allocWithZone(v43), sel_init);
    objc_msgSend(v48, sel_setDrawing_, v49);
  }
  id v50 = objc_msgSend(v46, sel_canvasView);
  if (v50)
  {
    uint64_t v51 = v50;
    id v52 = objc_msgSend(v50, sel_drawingGestureRecognizer);

    uint64_t v63 = &type metadata for PencilAndPaperFeatureFlags;
    unint64_t v64 = v44;
    v62[0] = 3;
    char v53 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    objc_msgSend(v52, sel_setEnabled_, v53 & 1);
  }
  objc_msgSend(v46, sel_setDrawingPolicy_, 0);
  id v54 = objc_msgSend(v46, sel_canvasView);
  if (v54)
  {
    uint64_t v55 = v54;
    objc_msgSend(v54, sel_setOpaque_, 0);
  }
  if ((v59 & 1) == 0) {
    objc_msgSend(v46, sel_setContentSnapshottingView_, v1);
  }
  id v56 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasTiledView];
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasTiledView] = v46;
  id v57 = v46;

  if (!*(void *)&v1[v29]) {
    goto LABEL_24;
  }
  swift_unknownObjectUnownedAssign();
  objc_msgSend(v57, sel_setAttachmentContainerView_, *(void *)&v1[v34]);
  uint64_t v58 = *(void *)&v1[v34];
  if (v58)
  {
    objc_msgSend(v1, sel_insertSubview_atIndex_, v58, 0);
    objc_msgSend(v57, sel__layoutSubviews);

    return;
  }
LABEL_25:
  __break(1u);
}

uint64_t PaperNoTextViewTextAttachmentView.__allocating_init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, int a8)
{
  id v17 = objc_allocWithZone(v8);
  return PaperNoTextViewTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

Swift::Void __swiftcall PaperTextAttachmentCanvasView.layoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_layoutSubviews);
  objc_msgSend(v0, sel_bounds);
  PaperTextAttachmentCanvasView.updateSubviews(bounds:)(v2);
}

Swift::Void __swiftcall PaperTextAttachmentCanvasView.updateSubviews(bounds:)(__C::CGRect bounds)
{
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_contentView;
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_contentView);
  if (!v4)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  double height = bounds.size.height;
  double width = bounds.size.width;
  double y = bounds.origin.y;
  double x = bounds.origin.x;
  objc_msgSend(v4, sel_frame);
  v28.origin.double x = x;
  v28.origin.double y = y;
  v28.size.double width = width;
  v28.size.double height = height;
  if (CGRectEqualToRect(v26, v28)) {
    return;
  }
  uint64_t v9 = *(void **)(v2 + v3);
  if (!v9) {
    goto LABEL_15;
  }
  objc_msgSend(v9, sel_setFrame_, x, y, width, height);
  uint64_t v10 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasTiledView;
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasTiledView);
  if (!v11)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v11, sel_setFrame_, x, y, width, height);
  double v12 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (!v12)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id v13 = v12;
  objc_msgSend(v13, sel_frame);
  double v15 = v14;
  double v17 = v16;
  objc_msgSend(v13, sel_frame);
  CGFloat v19 = v18;
  uint64_t v20 = (UIView_optional *)objc_msgSend(v13, sel_superview);
  CGSize v21 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v20);

  Swift::Bool v22 = v21.height != v17 || v21.width != v15;
  v27.origin.double x = 0.0;
  v27.origin.double y = v19;
  v27.size.double width = v21.width;
  v27.size.double height = v21.height;
  PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v27, 0, v22, 1);

  uint64_t v23 = *(void **)(v2 + v10);
  if (!v23) {
    goto LABEL_18;
  }
  objc_msgSend(v23, sel__layoutSubviews);
  uint64_t v24 = *(void **)(v2 + v10);
  if (!v24)
  {
LABEL_19:
    __break(1u);
    return;
  }
  objc_msgSend(v24, sel_updateTilesForVisibleRect);
}

id PaperTextAttachmentCanvasView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void PaperTextAttachmentCanvasView.init(frame:)()
{
}

id PaperTextAttachmentCanvasView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL static DrawingFindResult.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) < *(void *)(a2 + 16);
}

BOOL static DrawingFindResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

Swift::Int closure #1 in DrawingFindResult.draw(for:)(void *a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = a1;
  id v5 = a1;

  return OS_dispatch_semaphore.signal()();
}

uint64_t DrawingFindResult.deinit()
{
  return v0;
}

uint64_t DrawingFindResult.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

__n128 protocol witness for FindResult.frames(in:) in conformance DrawingFindResult()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
  uint64_t v2 = swift_allocObject();
  long long v3 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(v2 + 16) = xmmword_20C832C20;
  *(_OWORD *)(v2 + 32) = v3;
  __n128 result = *(__n128 *)(v1 + 40);
  *(__n128 *)(v2 + 48) = result;
  return result;
}

uint64_t protocol witness for FindResult.draw(for:) in conformance DrawingFindResult(uint64_t *a1)
{
  return DrawingFindResult.draw(for:)(*a1);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance DrawingFindResult(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a1 + 16) < *(void *)(*(void *)a2 + 16);
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance DrawingFindResult(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a2 + 16) >= *(void *)(*(void *)a1 + 16);
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance DrawingFindResult(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a1 + 16) >= *(void *)(*(void *)a2 + 16);
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance DrawingFindResult(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a2 + 16) < *(void *)(*(void *)a1 + 16);
}

void closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, int a6, void *a7, void *a8, uint64_t a9)
{
  id v40 = a8;
  uint64_t v37 = a2;
  uint64_t v38 = a7;
  int v41 = a6;
  int v42 = a5;
  uint64_t v35 = a1;
  uint64_t v36 = a9;
  uint64_t v11 = type metadata accessor for PKDrawing();
  uint64_t v33 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v11);
  uint64_t v34 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[DrawingFindResult], Never>);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  double v17 = MEMORY[0x270FA5388](v14);
  double v18 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x21054D080](a3, a4, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v35, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v11);
  unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v20 = (v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (*(unsigned __int8 *)(v12 + 80) + v21 + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v37;
  *(void *)(v23 + 16) = v37;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v23 + v19, v18, v14);
  uint64_t v25 = v38;
  *(void *)(v23 + v20) = v38;
  CGRect v26 = v40;
  *(void *)(v23 + v21) = v40;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v23 + v22, v34, v33);
  aBlock[4] = partial apply for closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:);
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [PKSearchQueryItem]) -> ();
  aBlock[3] = &block_descriptor_70;
  __C::CGRect v27 = _Block_copy(aBlock);
  id v28 = v24;
  id v29 = v25;
  id v30 = v26;
  swift_release();
  uint64_t v31 = (void *)v39;
  objc_msgSend(v28, sel_performSearchQuery_fullWordsOnly_caseMatchingOnly_withBlock_, v39, v42 & 1, (v41 & 1) == 0, v27);
  _Block_release(v27);
}

uint64_t closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)()
{
  unint64_t v0 = swift_bridgeObjectRetain();
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo17PKSearchQueryItemCGG_8PaperKit17DrawingFindResultCs5NeverOTg508_sSiSo17fgh2C8i5Kit17klm32CIgygo_Si6offset_AB7elementtAEs5N11OIegnrzr_TRSiAiNIgygo_Tf1cn_nTf4ng_n(v0, (void (*)(unint64_t, id))partial apply for closure #1 in closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:));
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[DrawingFindResult], Never>);
  return CheckedContinuation.resume(returning:)();
}

CGFloat *closure #1 in closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1, id a2, void *a3, uint64_t a4)
{
  objc_msgSend(a2, sel_bounds);
  objc_msgSend(a3, sel_convertRect_fromCoordinateSpace_, a4);
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  PKDrawing.bounds.getter();
  CGFloat Width = CGRectGetWidth(v22);
  CGAffineTransformMakeScale(&v21, Width / *MEMORY[0x263F14CE0], Width / *MEMORY[0x263F14CE0]);
  v23.origin.CGFloat x = v8;
  v23.origin.CGFloat y = v10;
  v23.size.double width = v12;
  v23.size.CGFloat height = v14;
  CGRect v24 = CGRectApplyAffineTransform(v23, &v21);
  CGRect v25 = CGRectInset(v24, -8.0, -8.0);
  CGFloat x = v25.origin.x;
  CGFloat y = v25.origin.y;
  CGFloat v18 = v25.size.width;
  CGFloat height = v25.size.height;
  type metadata accessor for DrawingFindResult();
  __n128 result = (CGFloat *)swift_allocObject();
  *((void *)result + 2) = a1;
  result[3] = x;
  result[4] = y;
  result[5] = v18;
  result[6] = height;
  result[7] = v8;
  result[8] = v10;
  result[9] = v12;
  result[10] = v14;
  return result;
}

uint64_t protocol witness for FindResultProvider.performTextSearch(queryString:ignoreCase:wholeWords:) in conformance PaperTextAttachmentCanvasView(uint64_t a1, uint64_t a2, char a3, char a4)
{
  double v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *double v9 = v4;
  v9[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(a1, a2, a3, a4);
}

uint64_t PaperNoTextViewTextAttachmentView.tiledView.getter()
{
  return swift_unknownObjectUnownedLoadStrong();
}

uint64_t PaperNoTextViewTextAttachmentView.calculateDocumentForGraphing.getter()
{
  return swift_retain();
}

uint64_t (*PaperNoTextViewTextAttachmentView.calculateDocumentExpressionSolvingBehavior.modify(unsigned char *a1))(void, void)
{
  *a1 = 3;
  return UnknownCanvasElementView.flags.modify;
}

id @objc PaperNoTextViewTextAttachmentView.init(coder:)(char *a1, uint64_t a2, uint64_t a3)
{
  swift_unknownObjectUnownedInit();
  *(void *)&a1[direct field offset for PaperNoTextViewTextAttachmentView.hostDocument] = 0;
  v6.receiver = a1;
  v6.super_class = (Class)type metadata accessor for PaperNoTextViewTextAttachmentView(0);
  return objc_msgSendSuper2(&v6, sel_initWithCoder_, a3);
}

uint64_t PaperNoTextViewTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, int a8)
{
  int v25 = a8;
  uint64_t v23 = a2;
  CGRect v24 = a4;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (char *)&v23 - v18;
  unsigned __int8 v20 = *a7;
  swift_unknownObjectUnownedInit();
  *(void *)(v8 + direct field offset for PaperNoTextViewTextAttachmentView.hostDocument) = 0;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a3, (uint64_t)v19, &demangling cache variable for type metadata for URL?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a5, (uint64_t)v16, &demangling cache variable for type metadata for URL?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a6, (uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  unsigned __int8 v26 = v20;
  uint64_t v21 = PaperTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(a1, v23, (uint64_t)v19, v24, (uint64_t)v16, (uint64_t)v27, &v26, v25);
  outlined destroy of StocksKitCurrencyCache.Provider?(a6, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  outlined destroy of StocksKitCurrencyCache.Provider?(a5, &demangling cache variable for type metadata for URL?);
  outlined destroy of StocksKitCurrencyCache.Provider?(a3, &demangling cache variable for type metadata for URL?);
  return v21;
}

uint64_t PaperNoTextViewTextAttachmentView.__ivar_destroyer()
{
  swift_unknownObjectUnownedDestroy();
  return swift_release();
}

id PaperNoTextViewTextAttachmentView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperNoTextViewTextAttachmentView(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc PaperNoTextViewTextAttachmentView.__ivar_destroyer()
{
  swift_unknownObjectUnownedDestroy();
  return swift_release();
}

void partial apply for closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1)
{
  closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(unsigned __int8 *)(v1 + 41), *(void **)(v1 + 48), *(void **)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t specialized CanvasElementImageRenderer.__allocating_init(renderer:)(uint64_t a1)
{
  v6[3] = type metadata accessor for ImageRenderer();
  v6[4] = &protocol witness table for ImageRenderer;
  v6[0] = a1;
  type metadata accessor for CanvasElementImageRenderer();
  uint64_t v2 = swift_allocObject();
  outlined init with copy of FindResult((uint64_t)v6, (uint64_t)v5);
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(unsigned char *)(v2 + 72) = PKIsSixChannelBlendEnabledInPaper();
  outlined init with copy of FindResult((uint64_t)v5, v2 + 16);
  unsigned __int8 v3 = objc_msgSend(self, sel_isMainThread);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  *(unsigned char *)(v2 + 73) = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v2;
}

uint64_t sub_20C7AC6CC()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C7AC704()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

Swift::Int partial apply for closure #1 in DrawingFindResult.draw(for:)(void *a1)
{
  return closure #1 in DrawingFindResult.draw(for:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined assign with copy of EncryptionDelegate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for FindResult.Provider : FindResultProvider in DrawingFindResult()
{
  return _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_4(&lazy protocol witness table cache variable for type PaperTextAttachmentCanvasView and conformance PaperTextAttachmentCanvasView, 255, (void (*)(uint64_t))type metadata accessor for PaperTextAttachmentCanvasView);
}

uint64_t _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for PaperTextAttachmentCanvasView(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PaperTextAttachmentCanvasView);
}

uint64_t instantiation function for generic protocol witness table for DrawingFindResult(uint64_t a1, uint64_t a2)
{
  uint64_t result = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_4(&lazy protocol witness table cache variable for type DrawingFindResult and conformance DrawingFindResult, a2, (void (*)(uint64_t))type metadata accessor for DrawingFindResult);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for DrawingFindResult()
{
  return self;
}

uint64_t base witness table accessor for Equatable in DrawingFindResult(uint64_t a1, uint64_t a2)
{
  return _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_4(&lazy protocol witness table cache variable for type DrawingFindResult and conformance DrawingFindResult, a2, (void (*)(uint64_t))type metadata accessor for DrawingFindResult);
}

uint64_t associated type witness table accessor for FindResultProvider.Result : FindResult in PaperTextAttachmentCanvasView(uint64_t a1, uint64_t a2)
{
  return _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_4(&lazy protocol witness table cache variable for type DrawingFindResult and conformance DrawingFindResult, a2, (void (*)(uint64_t))type metadata accessor for DrawingFindResult);
}

uint64_t ObjC metadata update function for PaperTextAttachmentCanvasView()
{
  return type metadata accessor for PaperTextAttachmentCanvasView(0);
}

void type metadata completion function for PaperTextAttachmentCanvasView()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for PaperTextAttachmentCanvasView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PaperTextAttachmentCanvasView);
}

uint64_t dispatch thunk of PaperTextAttachmentCanvasView.__allocating_init(frame:paperIdentifier:paperURL:coherenceContextURL:encryptionDelegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

void type metadata accessor for URL?()
{
  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
    }
  }
}

uint64_t method lookup function for DrawingFindResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DrawingFindResult);
}

uint64_t type metadata accessor for PaperNoTextViewTextAttachmentView(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PaperNoTextViewTextAttachmentView);
}

uint64_t type metadata completion function for PaperNoTextViewTextAttachmentView()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for PaperNoTextViewTextAttachmentView()
{
  return type metadata accessor for PaperNoTextViewTextAttachmentView(0);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo17PKSearchQueryItemCGG_8PaperKit17DrawingFindResultCs5NeverOTg508_sSiSo17fgh2C8i5Kit17klm32CIgygo_Si6offset_AB7elementtAEs5N11OIegnrzr_TRSiAiNIgygo_Tf1cn_nTf4ng_n(unint64_t a1, void (*a2)(unint64_t, id))
{
  uint64_t v10 = MEMORY[0x263F8EE78];
  specialized ContiguousArray.reserveCapacity(_:)();
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)MEMORY[0x21054E050](v4, a1);
LABEL_7:
        objc_super v6 = v5;
        unint64_t v7 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_12;
        }
        a2(v4, v5);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v4;
        if (v7 == v3) {
          goto LABEL_14;
        }
      }
      if (v4 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_14;
      }
    }
    id v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return v10;
}

void specialized PaperTextAttachmentCanvasView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasViewDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasTiledView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_previousMathDocument] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_contentView] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_encryptionDelegate];
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined init with take of (key: UUID, value: SortableCalculateExpression)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C7ACE10()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for specialized closure #1 in Canvas.liveStreamMessenger.didset(uint64_t a1)
{
  specialized closure #1 in Canvas.liveStreamMessenger.didset(a1, v1);
}

{
  uint64_t v1;

  specialized closure #1 in Canvas.liveStreamMessenger.didset(a1, v1);
}

uint64_t outlined init with copy of Paper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Paper();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C7ACEB4()
{
  uint64_t v1 = (int *)(type metadata accessor for Paper() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v7) & ~v7;
  unint64_t v25 = ((((*(void *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 41) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v26 = v2 | v7 | 7;
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v9 = v0 + v3;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v9 + v1[7], v10);
  uint64_t v12 = v9 + v1[8];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  uint64_t v14 = v9 + v1[9];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  uint64_t v16 = v9 + v1[10];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  uint64_t v18 = v9 + v1[11];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  uint64_t v20 = v9 + v1[12];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  uint64_t v22 = v9 + v1[13];
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v5);
  swift_release();
  return MEMORY[0x270FA0238](v0, v25, v26);
}

uint64_t partial apply for specialized closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Paper() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                 - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v12 = (uint64_t)v1 + v7;
  double v13 = *(double *)((char *)v1 + v8);
  double v14 = *(double *)((char *)v1 + v8 + 8);
  double v15 = *(double *)((char *)v1 + v8 + 16);
  double v16 = *(double *)((char *)v1 + v8 + 24);
  char v17 = *((unsigned char *)v1 + v8 + 32);
  char v18 = *((unsigned char *)v1 + v8 + 33);
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v19;
  *uint64_t v19 = v2;
  v19[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return specialized closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(v13, v14, v15, v16, a1, v9, v10, v11, (uint64_t)v1 + v4, v12, v17, v18);
}

uint64_t _s8PaperKit0A0VWOhTm_4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_20C7AD470()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[DrawingFindResult], Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = type metadata accessor for PKDrawing();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v6 + v9 + 8) & ~v9;
  uint64_t v13 = v10 + *(void *)(v8 + 64);
  uint64_t v11 = v3 | v9 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v10, v7);
  return MEMORY[0x270FA0238](v0, v13, v11);
}

uint64_t partial apply for closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[DrawingFindResult], Never>);
  type metadata accessor for PKDrawing();
  return closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)();
}

uint64_t block_copy_helper_70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_70()
{
  return swift_release();
}

CGFloat *partial apply for closure #1 in closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1, void *a2)
{
  return closure #1 in closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t destroy for MiniLineEndsButton()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MiniLineEndsButton(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MiniLineEndsButton(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MiniLineEndsButton(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniLineEndsButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 58)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MiniLineEndsButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 58) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MiniLineEndsButton()
{
  return &type metadata for MiniLineEndsButton;
}

uint64_t associated type witness table accessor for View.Body : View in MiniLineEndsButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t MiniLineEndsButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  long long v14 = *v1;
  long long v15 = v3;
  v16[0] = v1[2];
  *(_OWORD *)((char *)v16 + 10) = *(long long *)((char *)v1 + 42);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  long long v4 = (_OWORD *)swift_allocObject();
  long long v5 = v15;
  v4[1] = v14;
  v4[2] = v5;
  v4[3] = v16[0];
  *(_OWORD *)((char *)v4 + 58) = *(_OWORD *)((char *)v16 + 10);
  outlined retain of MiniLineEndsButton((uint64_t)&v14);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CGSize?);
  State.init(wrappedValue:)();
  type metadata accessor for MiniPopoverState();
  lazy protocol witness table accessor for type MiniPopoverState and conformance MiniPopoverState((unint64_t *)&lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState, (void (*)(uint64_t))type metadata accessor for MiniPopoverState);
  uint64_t v6 = EnvironmentObject.init()();
  uint64_t v8 = v7;
  uint64_t result = static VerticalAlignment.firstTextBaseline.getter();
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v12;
  *(_DWORD *)(a1 + 17) = v10;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)((char *)&v10 + 3);
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(unsigned char *)(a1 + 48) = v12;
  *(_DWORD *)(a1 + 49) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = closure #1 in MiniLineEndsButton.body.getter;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = partial apply for closure #2 in MiniLineEndsButton.body.getter;
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = result;
  *(void *)(a1 + 112) = closure #1 in MiniDivider.body.getter;
  *(void *)(a1 + 120) = 0;
  return result;
}

uint64_t closure #1 in MiniLineEndsButton.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v2 - 8);
  long long v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = Image.init(systemName:)();
  id v6 = objc_msgSend(self, sel_labelColor);
  uint64_t v7 = MEMORY[0x21054A5D0](v6);
  uint64_t KeyPath = swift_getKeyPath();
  if (one-time initialization token for buttonFontSize != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = static Font.system(size:weight:design:)();
  outlined destroy of Font.Design?((uint64_t)v4);
  uint64_t result = swift_getKeyPath();
  *a1 = v5;
  a1[1] = KeyPath;
  a1[2] = v7;
  a1[3] = result;
  a1[4] = v10;
  return result;
}

uint64_t closure #2 in MiniLineEndsButton.body.getter()
{
  uint64_t v0 = type metadata accessor for PresentationAdaptation();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v16[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = static HorizontalAlignment.leading.getter();
  closure #1 in closure #2 in MiniLineEndsButton.body.getter((uint64_t)v17);
  v18[352] = 0;
  memcpy(&v18[7], v17, 0x152uLL);
  char v5 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  v18[360] = 0;
  v16[0] = v4;
  v16[1] = 0x4020000000000000;
  LOBYTE(v16[2]) = 0;
  memcpy((char *)&v16[2] + 1, v18, 0x159uLL);
  LOBYTE(v16[46]) = v5;
  v16[47] = v7;
  v16[48] = v9;
  v16[49] = v11;
  v16[50] = v13;
  LOBYTE(v16[51]) = 0;
  static PresentationAdaptation.popover.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout>);
  lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
  View.presentationCompactAdaptation(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  memcpy(v19, v16, 0x199uLL);
  return outlined release of ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout>((uint64_t)v19);
}

uint64_t closure #1 in closure #2 in MiniLineEndsButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v33._uint64_t object = (void *)0x800000020C85FC10;
  v2._uint64_t countAndFlagsBits = 0x646E4520656E694CLL;
  v2._uint64_t object = (void *)0xE900000000000073;
  v3.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._uint64_t object = (void *)0xEB00000000656C62;
  v4._uint64_t countAndFlagsBits = 0;
  v4._uint64_t object = (void *)0xE000000000000000;
  v33._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v33);
  String.uppercased()();
  swift_bridgeObjectRelease();
  static Font.caption.getter();
  uint64_t v5 = Text.font(_:)();
  uint64_t v7 = v6;
  char v9 = v8;
  swift_bridgeObjectRelease();
  swift_release();
  char v10 = v9 & 1;
  static Font.Weight.bold.getter();
  uint64_t v11 = Text.fontWeight(_:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  outlined consume of Text.Storage(v5, v7, v10);
  swift_bridgeObjectRelease();
  static Color.secondary.getter();
  uint64_t v16 = Text.foregroundColor(_:)();
  uint64_t v18 = v17;
  char v20 = v19;
  uint64_t v22 = v21;
  swift_release();
  outlined consume of Text.Storage(v11, v13, v15);
  swift_bridgeObjectRelease();
  uint64_t v23 = static VerticalAlignment.center.getter();
  closure #1 in closure #1 in closure #2 in MiniLineEndsButton.body.getter((uint64_t)__src);
  v27[296] = 0;
  memcpy(&v27[7], __src, 0x11AuLL);
  v28[0] = v23;
  v28[1] = 0x4000000000000000;
  LOBYTE(v28[2]) = 0;
  memcpy((char *)&v28[2] + 1, v27, 0x121uLL);
  char v29 = v20 & 1;
  memcpy((void *)(a1 + 32), v28, 0x132uLL);
  char v24 = v29;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 16) = v24;
  *(void *)(a1 + 24) = v22;
  v30[0] = v23;
  v30[1] = 0x4000000000000000;
  char v31 = 0;
  memcpy(v32, v27, sizeof(v32));
  outlined copy of Text.Storage(v16, v18, v20 & 1);
  swift_bridgeObjectRetain();
  outlined retain of HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>((uint64_t)v28);
  outlined release of HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>((uint64_t)v30);
  outlined consume of Text.Storage(v16, v18, v20 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in closure #2 in MiniLineEndsButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = Image.init(systemName:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>);
  Binding.projectedValue.getter();
  uint64_t v4 = Image.init(systemName:)();
  Binding.projectedValue.getter();
  uint64_t v2 = Image.init(systemName:)();
  Binding.projectedValue.getter();
  *(void *)a1 = v5;
  *(_OWORD *)(a1 + 8) = xmmword_20C849FE0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v9;
  *(unsigned char *)(a1 + 88) = v10;
  *(unsigned char *)(a1 + 89) = v11;
  *(void *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 104) = xmmword_20C834980;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 160) = v7;
  *(unsigned char *)(a1 + 168) = v8;
  *(void *)(a1 + 176) = v9;
  *(unsigned char *)(a1 + 184) = v10;
  *(unsigned char *)(a1 + 185) = v11;
  *(void *)(a1 + 192) = v2;
  *(_OWORD *)(a1 + 200) = xmmword_20C849FF0;
  *(unsigned char *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 1;
  *(unsigned char *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = v6;
  *(void *)(a1 + 256) = v7;
  *(unsigned char *)(a1 + 264) = v8;
  *(void *)(a1 + 272) = v9;
  *(unsigned char *)(a1 + 280) = v10;
  *(unsigned char *)(a1 + 281) = v11;
  swift_retain();
  swift_retain();
  swift_release();
  return swift_release();
}

uint64_t sub_20C7AE44C()
{
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 74, 7);
}

uint64_t partial apply for closure #2 in MiniLineEndsButton.body.getter()
{
  return closure #2 in MiniLineEndsButton.body.getter();
}

uint64_t outlined retain of MiniLineEndsButton(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>(uint64_t a1)
{
  return a1;
}

uint64_t closure #1 in ToggleLineEndsButton.body.getter(_OWORD *a1)
{
  long long v2 = a1[4];
  long long v5 = a1[3];
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 10) = *(_OWORD *)((char *)a1 + 74);
  outlined retain of ToggleLineEndsButton((uint64_t)a1);
  outlined retain of Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>((uint64_t)&v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>);
  MEMORY[0x21054A870](v4);
  Binding.wrappedValue.setter();
  outlined release of Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>((uint64_t)&v5);
  return outlined release of ToggleLineEndsButton((uint64_t)a1);
}

uint64_t closure #2 in ToggleLineEndsButton.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  swift_retain();
  uint64_t v5 = static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(54.0, 0, 0.0, 1, 54.0, 0, 36.0, 0, (uint64_t)v33, 0.0, 1, 36.0, 0, v5, v6, v4);
  swift_release();
  uint64_t v22 = v33[1];
  uint64_t v23 = v33[0];
  char v21 = v34;
  uint64_t v20 = v35;
  char v7 = v36;
  char v8 = v38;
  uint64_t v30 = v39;
  uint64_t v31 = v37;
  char v29 = v40;
  uint64_t v28 = v41;
  char v27 = v42;
  char v9 = v44;
  uint64_t v25 = v45;
  uint64_t v26 = v43;
  uint64_t v24 = v46;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>);
  MEMORY[0x21054A870](&v32, v10);
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  if ((static CRExtensible.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v12 = v22;
    uint64_t v11 = v23;
    char v13 = v21;
    uint64_t v14 = v20;
    goto LABEL_5;
  }
  uint64_t v12 = v22;
  uint64_t v11 = v23;
  char v13 = v21;
  uint64_t v14 = v20;
  if ((static CRExtensible.== infix(_:_:)() & 1) == 0)
  {
LABEL_5:
    id v16 = objc_msgSend(self, sel_secondarySystemBackgroundColor);
    uint64_t v15 = MEMORY[0x21054A6C0](v16);
    goto LABEL_6;
  }
  uint64_t v15 = static Color.accentColor.getter();
LABEL_6:
  uint64_t v17 = v15;
  uint64_t result = static Edge.Set.all.getter();
  LOBYTE(v32) = v7;
  uint64_t v19 = a1[1];
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v12;
  *(unsigned char *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v14;
  *(unsigned char *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v31;
  *(unsigned char *)(a2 + 48) = v8;
  *(void *)(a2 + 56) = v30;
  *(unsigned char *)(a2 + 64) = v29;
  *(void *)(a2 + 72) = v28;
  *(unsigned char *)(a2 + 80) = v27;
  *(void *)(a2 + 88) = v26;
  *(unsigned char *)(a2 + 96) = v9;
  *(void *)(a2 + 104) = v25;
  *(void *)(a2 + 112) = v24;
  *(void *)(a2 + 120) = v17;
  *(unsigned char *)(a2 + 128) = result;
  *(void *)(a2 + 136) = 0x4014000000000000;
  *(void *)(a2 + 144) = v19;
  *(_WORD *)(a2 + 152) = 256;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance ToggleLineEndsButton()
{
  uint64_t v1 = type metadata accessor for PlainButtonStyle();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v9 = v0[3];
  v17[2] = v0[2];
  void v17[3] = v9;
  v18[0] = v0[4];
  *(_OWORD *)((char *)v18 + 10) = *(_OWORD *)((char *)v0 + 74);
  long long v10 = v0[1];
  v17[0] = *v0;
  v17[1] = v10;
  uint64_t v11 = (_OWORD *)swift_allocObject();
  long long v12 = v0[3];
  void v11[3] = v0[2];
  void v11[4] = v12;
  v11[5] = v0[4];
  *(_OWORD *)((char *)v11 + 90) = *(_OWORD *)((char *)v0 + 74);
  long long v13 = v0[1];
  v11[1] = *v0;
  v11[2] = v13;
  id v16 = v17;
  outlined retain of ToggleLineEndsButton((uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  lazy protocol witness table accessor for type MiniPopoverState and conformance MiniPopoverState((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
  View.buttonStyle<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t destroy for ToggleLineEndsButton()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ToggleLineEndsButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ToggleLineEndsButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  return a1;
}

__n128 __swift_memcpy90_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ToggleLineEndsButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToggleLineEndsButton(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 90)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToggleLineEndsButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 90) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 90) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToggleLineEndsButton()
{
  return &type metadata for ToggleLineEndsButton;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type MiniPopoverButton<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0> and conformance MiniPopoverButton<A, B>, &demangling cache variable for type metadata for MiniPopoverButton<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>);
    lazy protocol witness table accessor for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ToggleLineEndsButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_20C7AF184()
{
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 106, 7);
}

uint64_t partial apply for closure #1 in ToggleLineEndsButton.body.getter()
{
  return closure #1 in ToggleLineEndsButton.body.getter((_OWORD *)(v0 + 16));
}

uint64_t partial apply for closure #2 in ToggleLineEndsButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in ToggleLineEndsButton.body.getter(*(uint64_t **)(v1 + 16), a1);
}

uint64_t outlined retain of ToggleLineEndsButton(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type MiniPopoverState and conformance MiniPopoverState(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ToggleLineEndsButton(uint64_t a1)
{
  return a1;
}

uint64_t sub_20C7AF324()
{
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  lazy protocol witness table accessor for type MiniPopoverState and conformance MiniPopoverState((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for CanvasScribbleDelegate()
{
  return swift_initClassMetadata2();
}

uint64_t specialized Sequence.reversed()(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0) {
    goto LABEL_39;
  }
  uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  uint64_t v18 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    unint64_t v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    swift_retain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v17 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1) {
      __break(1u);
    }
    unint64_t v4 = v17 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3) {
      return v2;
    }
    unint64_t v5 = 0;
    while (1)
    {
      unint64_t v7 = v5 + 1;
      unint64_t v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1)) {
        break;
      }
      if (v5 != v1)
      {
        uint64_t v8 = v18;
        if ((v18 & 0xC000000000000001) != 0)
        {
          uint64_t v11 = MEMORY[0x21054E050](v5, v18);
          id v12 = (id)MEMORY[0x21054E050](v3 - (v5 + 1), v18);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
          unint64_t v9 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v9) {
            goto LABEL_34;
          }
          id v10 = *(id *)(v18 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0) {
            goto LABEL_35;
          }
          if (v1 >= v9) {
            goto LABEL_37;
          }
          uint64_t v11 = (uint64_t)v10;
          id v12 = *(id *)(v18 + 32 + 8 * v1);
        }
        id v13 = v12;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v18 < 0
          || (v18 & 0x4000000000000000) != 0)
        {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          uint64_t v18 = v8;
        }
        uint64_t v14 = (v8 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(void *)(v14 + 32) = v13;
        specialized Array._endMutation()();
        uint64_t v15 = v18;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v18 < 0
          || (v18 & 0x4000000000000000) != 0)
        {
          uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          uint64_t v18 = v15;
        }
        if ((v1 & 0x8000000000000000) != 0) {
          goto LABEL_36;
        }
        if (v1 >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_38;
        }
        uint64_t v6 = (v15 & 0xFFFFFFFFFFFFFF8) + 8 * v1;

        *(void *)(v6 + 32) = v11;
        specialized Array._endMutation()();
      }
      unint64_t v5 = v7;
      if (v4 == v7) {
        return v18;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    uint64_t v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v1);
    uint64_t v18 = v2;
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
  }
}

uint64_t specialized Sequence.reversed()(uint64_t result)
{
  unint64_t v1 = (void *)result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < 2) {
    return (uint64_t)v1;
  }
  unint64_t v3 = 0;
  unint64_t v4 = v2 >> 1;
  unint64_t v5 = v2 - 1;
  uint64_t v6 = 4 * v2;
  uint64_t v7 = 7;
  while (1)
  {
    if (v3 == v5) {
      goto LABEL_5;
    }
    unint64_t v10 = v1[2];
    if (v3 >= v10) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_12;
    }
    long long v14 = *(_OWORD *)&v1[v7 - 1];
    long long v15 = *(_OWORD *)&v1[v7 - 3];
    uint64_t v11 = v1[v6];
    long long v13 = *(_OWORD *)&v1[v6 + 1];
    uint64_t v12 = v1[v6 + 3];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      unint64_t v1 = (void *)result;
    }
    uint64_t v8 = &v1[v7];
    *(v8 - 3) = v11;
    *((_OWORD *)v8 - 1) = v13;
    *uint64_t v8 = v12;
    unint64_t v9 = &v1[v6];
    *unint64_t v9 = v15;
    v9[1] = v14;
LABEL_5:
    ++v3;
    v7 += 4;
    --v5;
    v6 -= 4;
    if (v4 == v3) {
      return (uint64_t)v1;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

void specialized Sequence.reversed()(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v2);
  uint64_t v25 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6.n128_f64[0] = MEMORY[0x270FA5388](v4);
  uint64_t v24 = (char *)v19 - v7;
  unint64_t v8 = *(void *)(a1 + 16);
  if (v8 < 2) {
    return;
  }
  unint64_t v9 = 0;
  unint64_t v10 = v8 >> 1;
  unint64_t v11 = v8 - 1;
  unint64_t v20 = v8 >> 1;
  uint64_t v21 = v5;
  v19[1] = v5 + 16;
  uint64_t v22 = (void (**)(unint64_t, char *, uint64_t))(v5 + 40);
  while (1)
  {
    if (v9 == v11) {
      goto LABEL_4;
    }
    unint64_t v12 = *(void *)(a1 + 16);
    if (v9 >= v12) {
      break;
    }
    unint64_t v23 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    unint64_t v13 = a1 + v23;
    uint64_t v14 = v2;
    uint64_t v15 = *(void *)(v5 + 72);
    id v16 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    v16(v24, a1 + v23 + v15 * v9, v14, v6);
    if (v11 >= v12) {
      goto LABEL_14;
    }
    ((void (*)(char *, unint64_t, uint64_t))v16)(v25, v13 + v15 * v11, v14);
    uint64_t v2 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a1 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
    }
    if (v9 >= *(void *)(a1 + 16)) {
      goto LABEL_15;
    }
    unint64_t v17 = a1 + v23;
    uint64_t v18 = *v22;
    (*v22)(a1 + v23 + v15 * v9, v25, v14);
    if (v11 >= *(void *)(a1 + 16)) {
      goto LABEL_16;
    }
    v18(v17 + v15 * v11, v24, v14);
    unint64_t v10 = v20;
    uint64_t v5 = v21;
LABEL_4:
    ++v9;
    --v11;
    if (v10 == v9) {
      return;
    }
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
}

void CanvasScribbleDelegate.canvas.getter()
{
}

uint64_t @objc CanvasScribbleDelegate.scribbleInteraction(_:shouldBeginAt:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  LOBYTE(a1) = specialized CanvasScribbleDelegate.scribbleInteraction(_:shouldBeginAt:)();

  return a1 & 1;
}

void CanvasScribbleDelegate.textboxCreatedForScribble.getter()
{
}

uint64_t CanvasScribbleDelegate.textBoxForScribble(elementIdentifier:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CRKeyPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  __n128 v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  CRKeyPath.init(_:)();
  char v7 = static CRKeyPath.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    uint64_t v9 = MEMORY[0x210550400](v1 + direct field offset for CanvasScribbleDelegate.canvas);
    if (v9)
    {
      unint64_t v10 = (void *)v9;
      id v11 = Canvas.editingView.getter();
      uint64_t v13 = v12;

      uint64_t ObjectType = swift_getObjectType();
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(ObjectType, v13);

      if (*(void *)(v15 + 16))
      {
        unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
        if (v17)
        {
          uint64_t v18 = *(id *)(*(void *)(v15 + 56) + 8 * v16);
          uint64_t v19 = swift_bridgeObjectRelease();
          uint64_t v8 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v18) + 0x2D0))(v19);

          return v8;
        }
      }
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  return MEMORY[0x210550400](v1 + direct field offset for CanvasScribbleDelegate.textboxCreatedForScribble);
}

void @objc CanvasScribbleDelegate.init()()
{
}

id CanvasScribbleDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasScribbleDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc CanvasScribbleDelegate.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata accessor for CanvasScribbleDelegate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for UIIndirectScribbleInteractionDelegate.ElementIdentifier : Hashable in CanvasScribbleDelegate<A>()
{
  return _s9Coherence9CRKeyPathVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
}

uint64_t protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:requestElementsIn:completion:) in conformance CanvasScribbleDelegate<A>(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t (*a6)(void), uint64_t a7)
{
  return specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:requestElementsIn:completion:)(a6, a7, a1, a2, a3, a4);
}

uint64_t protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:requestElementsIn:) in conformance CanvasScribbleDelegate<A>(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  uint64_t v15 = type metadata accessor for CanvasScribbleDelegate();
  void *v14 = v7;
  v14[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  v16.n128_f64[0] = a2;
  v17.n128_f64[0] = a3;
  v18.n128_f64[0] = a4;
  v19.n128_f64[0] = a5;
  return MEMORY[0x270F823B0](a1, v15, a7, v16, v17, v18, v19);
}

uint64_t protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:isElementFocused:) in conformance CanvasScribbleDelegate<A>(uint64_t a1, uint64_t a2)
{
  return specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:isElementFocused:)(a2);
}

double protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:frameForElement:) in conformance CanvasScribbleDelegate<A>(uint64_t a1, uint64_t a2)
{
  return specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:frameForElement:)(a2);
}

void protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:focusElementIfNeeded:referencePoint:completion:) in conformance CanvasScribbleDelegate<A>(CGFloat a1, CGFloat a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
}

uint64_t protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:focusElementIfNeeded:referencePoint:) in conformance CanvasScribbleDelegate<A>(uint64_t a1, uint64_t a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for CanvasScribbleDelegate();
  *uint64_t v12 = v6;
  v12[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  v14.n128_f64[0] = a3;
  v15.n128_f64[0] = a4;
  return MEMORY[0x270F823B8](a1, a2, v13, a6, v14, v15);
}

uint64_t protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:shouldDelayFocusForElement:) in conformance CanvasScribbleDelegate<A>()
{
  uint64_t v0 = type metadata accessor for CRKeyPath();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  CRKeyPath.init(_:)();
  char v4 = static CRKeyPath.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

void protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:willBeginWritingInElement:) in conformance CanvasScribbleDelegate<A>(uint64_t a1, uint64_t a2)
{
}

void protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:didFinishWritingInElement:) in conformance CanvasScribbleDelegate<A>(uint64_t a1, uint64_t a2)
{
}

id specialized CanvasScribbleDelegate.init(canvas:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasScribbleDelegate();
  return objc_msgSendSuper2(&v2, sel_init);
}

id specialized CanvasScribbleDelegate.__allocating_init(canvas:)()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for CanvasScribbleDelegate());
  return specialized CanvasScribbleDelegate.init(canvas:)();
}

uint64_t specialized CanvasScribbleDelegate.scribbleInteraction(_:shouldBeginAt:)()
{
  uint64_t v1 = type metadata accessor for PKInk();
  uint64_t v2 = *(void *)(v1 - 8);
  double v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)MEMORY[0x210550400](v0 + direct field offset for CanvasScribbleDelegate.canvas, v3);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  uint64_t v8 = (objc_class *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x320))();
  isCGFloat a = v8;
  if (v8)
  {
    id v10 = [(objc_class *)v8 ink];

    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
    isCGFloat a = PKInk._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  id v11 = isa;
  uint64_t v12 = [(objc_class *)v11 _isHandwritingInk];

  return v12;
}

uint64_t specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:requestElementsIn:completion:)(uint64_t (*a1)(void), uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v13 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105);
  id v104 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for CRKeyPath();
  int64_t v108 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v100 = (char *)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  unint64_t v109 = (char *)&v98 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (uint64_t)&v98 - v23;
  double v26 = MEMORY[0x270FA5388](v25);
  uint64_t v28 = (uint64_t)&v98 - v27;
  char v29 = (void *)MEMORY[0x210550400](v6 + direct field offset for CanvasScribbleDelegate.canvas, v26);
  if (!v29) {
    return a1(MEMORY[0x263F8EE78]);
  }
  id v30 = v29;
  AnyCanvas.selectedCanvasElementIds.getter();
  int64_t v32 = v31;

  unint64_t v33 = *(void *)(v32 + 16);
  swift_bridgeObjectRelease();
  id v107 = v30;
  if (v33 != 1)
  {
LABEL_17:
    uint64_t v45 = Canvas.editingView.getter();
    uint64_t v49 = v48;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 64))(ObjectType, v49);

    if ((unint64_t)v28 >> 62)
    {
      if (v28 < 0) {
        uint64_t v45 = (void *)v28;
      }
      else {
        uint64_t v45 = (void *)(v28 & 0xFFFFFFFFFFFFFF8);
      }
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      int64_t v53 = v108;
      if (v24) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v52 = v28 & 0xFFFFFFFFFFFFFF8;
      uint64_t v24 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      int64_t v53 = v108;
      if (v24)
      {
LABEL_19:
        if (v24 >= 1)
        {
          uint64_t v106 = v18;
          uint64_t v98 = a2;
          uint64_t v99 = a1;
          uint64_t v54 = 0;
          unint64_t v55 = v28 & 0xC000000000000001;
          int64_t v102 = v53 + 32;
          id v103 = (void (**)(char *, uint64_t))(v13 + 8);
          unint64_t v110 = MEMORY[0x263F8EE78];
          id v56 = (void *)MEMORY[0x263F8EED0];
          uint64_t v101 = v24;
          do
          {
            if (v55) {
              uint64_t v58 = (void *)MEMORY[0x21054E050](v54, v28);
            }
            else {
              uint64_t v58 = *(id *)(v28 + 8 * v54 + 32);
            }
            unsigned int v59 = v58;
            unsigned __int8 v60 = (void *)(*(uint64_t (**)(void))((*v56 & *v58) + 0x2D0))();
            if (v60)
            {
              uint64_t v61 = v60;
              objc_msgSend(v60, sel_frame);
              double v63 = v62;
              double v65 = v64;
              double v67 = v66;
              double v69 = v68;
              id v70 = Canvas.editingView.getter();
              objc_msgSend(v61, sel_convertRect_toCoordinateSpace_, v70, v63, v65, v67, v69);
              CGFloat v72 = v71;
              CGFloat v74 = v73;
              CGFloat v76 = v75;
              CGFloat v78 = v77;

              v111.origin.CGFloat x = v72;
              v111.origin.CGFloat y = v74;
              v111.size.double width = v76;
              v111.size.CGFloat height = v78;
              v112.origin.CGFloat x = a3;
              v112.origin.CGFloat y = a4;
              v112.size.double width = a5;
              v112.size.CGFloat height = a6;
              if (CGRectIntersectsRect(v111, v112))
              {
                uint64_t v79 = v28;
                unint64_t v80 = v55;
                unint64_t v81 = v56;
                uint64_t v82 = *(void (**)(void))((*v56 & *v59) + 0xE8);
                uint64_t v83 = v104;
                v82();
                uint64_t v84 = v105;
                MEMORY[0x21054BDF0](v105);
                (*v103)(v83, v84);
                if (swift_isUniquelyReferenced_nonNull_native()) {
                  unint64_t v85 = v110;
                }
                else {
                  unint64_t v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v110 + 16) + 1, 1, v110);
                }
                unint64_t v87 = *(void *)(v85 + 16);
                unint64_t v86 = *(void *)(v85 + 24);
                id v56 = v81;
                if (v87 >= v86 >> 1) {
                  unint64_t v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1, v87 + 1, 1, v85);
                }
                unint64_t v55 = v80;
                *(void *)(v85 + 16) = v87 + 1;
                unint64_t v57 = (*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
                unint64_t v110 = v85;
                (*(void (**)(unint64_t, char *, uint64_t))(v108 + 32))(v85 + v57 + *(void *)(v108 + 72) * v87, v109, v106);
                uint64_t v28 = v79;
                uint64_t v24 = v101;
              }
            }
            ++v54;
          }
          while (v24 != v54);
          swift_bridgeObjectRelease();
          a1 = v99;
          uint64_t v18 = v106;
          int64_t v53 = v108;
          unint64_t v88 = v110;
          goto LABEL_42;
        }
        __break(1u);
        goto LABEL_49;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v88 = MEMORY[0x263F8EE78];
    goto LABEL_42;
  }
  id v34 = v30;
  AnyCanvas.selectedCanvasElementIds.getter();
  unint64_t v33 = v35;

  int64_t v32 = v108;
  if (*(void *)(v33 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v108 + 16))(v17, v33 + ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80)), v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v17, 0, 1, v18);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56))(v17, 1, 1, v18);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v17, 1, v18) == 1)
  {
    outlined destroy of CRKeyPath?((uint64_t)v17);
    goto LABEL_17;
  }
  int64_t v32 = *(void *)(v32 + 32);
  uint64_t v106 = v18;
  ((void (*)(uint64_t, char *))v32)(v28, v17);
  id v37 = Canvas.editingView.getter();
  unint64_t v33 = v38;
  uint64_t v39 = swift_getObjectType();
  uint64_t v40 = (*(uint64_t (**)(uint64_t, unint64_t))(v33 + 32))(v39, v33);

  if (!*(void *)(v40 + 16) || (unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v28), (v42 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v43 = *(id *)(*(void *)(v40 + 56) + 8 * v41);
  uint64_t v44 = swift_bridgeObjectRelease();
  unint64_t v33 = MEMORY[0x263F8EED0];
  uint64_t v45 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v43) + 0x2D0))(v44);

  if (!v45)
  {
LABEL_16:
    uint64_t v18 = v106;
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v28, v106);
    goto LABEL_17;
  }
  char v46 = (*(uint64_t (**)(void))((*(void *)v33 & *v45) + 0x98))();
  int64_t v47 = v108;
  if (v46 & 1) == 0 || ((*(uint64_t (**)(void))((*(void *)v33 & *v45) + 0xA0))())
  {
    uint64_t v18 = v106;
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v28, v106);

    goto LABEL_17;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v24, v28, v106);
  unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v33 = *(void *)(v51 + 16);
  unint64_t v52 = *(void *)(v51 + 24);
  int64_t v53 = v33 + 1;
  if (v33 >= v52 >> 1) {
LABEL_49:
  }
    unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53, 1, v51);
  *(void *)(v51 + 16) = v53;
  int64_t v53 = v108;
  unint64_t v89 = v51
      + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))
      + *(void *)(v108 + 72) * v33;
  uint64_t v90 = v24;
  uint64_t v91 = v106;
  unint64_t v88 = v51;
  ((void (*)(unint64_t, uint64_t, uint64_t))v32)(v89, v90, v106);
  uint64_t v18 = v91;

  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v28, v91);
LABEL_42:
  uint64_t v92 = v100;
  CRKeyPath.init(_:)();
  if (swift_isUniquelyReferenced_nonNull_native()) {
    unint64_t v93 = v88;
  }
  else {
    unint64_t v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v88 + 16) + 1, 1, v88);
  }
  unint64_t v95 = *(void *)(v93 + 16);
  unint64_t v94 = *(void *)(v93 + 24);
  if (v95 >= v94 >> 1) {
    unint64_t v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v94 > 1, v95 + 1, 1, v93);
  }
  *(void *)(v93 + 16) = v95 + 1;
  unint64_t v96 = v93;
  (*(void (**)(unint64_t, char *, uint64_t))(v53 + 32))(v93+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v95, v92, v18);
  specialized Sequence.reversed()(v96);

  uint64_t v97 = swift_bridgeObjectRetain();
  a1(v97);
  return swift_bridgeObjectRelease_n();
}

double specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:frameForElement:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CRKeyPath();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x210550400](v1 + direct field offset for CanvasScribbleDelegate.canvas, v5);
  double v9 = 0.0;
  if (v8)
  {
    id v10 = (void *)v8;
    CRKeyPath.init(_:)();
    char v11 = static CRKeyPath.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v12 = Canvas.editingView.getter();
    uint64_t v14 = v12;
    if (v11)
    {
      objc_msgSend(v12, sel_bounds);
      double v9 = v15;
    }
    else
    {
      uint64_t v16 = v13;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(ObjectType, v16);

      if (!*(void *)(v18 + 16) || (unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v20 & 1) == 0))
      {

        swift_bridgeObjectRelease();
        return v9;
      }
      uint64_t v21 = *(id *)(*(void *)(v18 + 56) + 8 * v19);
      uint64_t v22 = swift_bridgeObjectRelease();
      uint64_t v23 = (void *)MEMORY[0x263F8EED0];
      uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v21) + 0x2D0))(v22);
      if (!v24)
      {

        return v9;
      }
      uint64_t v14 = v24;
      if (((*(uint64_t (**)(void))((*v23 & *v24) + 0x98))() & 1) != 0
        && ((*(uint64_t (**)(void))((*v23 & *v14) + 0xA0))() & 1) == 0)
      {
        id v38 = Canvas.editingView.getter();
        objc_msgSend(v38, sel_bounds);
        double v9 = v39;

        return v9;
      }
      objc_msgSend(v21, sel_bounds);
      double v26 = v25;
      double v28 = v27;
      double v30 = v29;
      double v32 = v31;
      id v33 = objc_msgSend(v10, sel_traitCollection);
      id v34 = objc_msgSend(v33, sel_layoutDirection);

      if (v34 == (id)1)
      {
        if (one-time initialization token for scribbleHitToleranceInsetsRTL != -1) {
          swift_once();
        }
        unint64_t v35 = (double *)&static UIConstants.scribbleHitToleranceInsetsRTL;
      }
      else
      {
        if (one-time initialization token for scribbleHitToleranceInsetsLTR != -1) {
          swift_once();
        }
        unint64_t v35 = (double *)&static UIConstants.scribbleHitToleranceInsetsLTR;
      }
      objc_msgSend(v10, sel_convertRect_fromCoordinateSpace_, v21, UIEdgeInsetsInsetRect(v26, v28, v30, v32, *v35, v35[1]));
      double v9 = v37;
    }
  }
  return v9;
}

uint64_t specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:isElementFocused:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CRKeyPath();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x210550400](v1 + direct field offset for CanvasScribbleDelegate.canvas, v5);
  if (!v8) {
    goto LABEL_8;
  }
  double v9 = (void *)v8;
  CRKeyPath.init(_:)();
  _s9Coherence9CRKeyPathVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if (v10)
  {

LABEL_8:
    char v20 = 0;
    return v20 & 1;
  }
  id v11 = Canvas.editingView.getter();
  uint64_t v13 = v12;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(ObjectType, v13);

  if (!*(void *)(v15 + 16) || (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v17 & 1) == 0))
  {

    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v18 = *(id *)(*(void *)(v15 + 56) + 8 * v16);
  uint64_t v19 = swift_bridgeObjectRelease();
  char v20 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v18) + 0x100))(v19);

  return v20 & 1;
}

void specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:focusElementIfNeeded:referencePoint:completion:)(uint64_t a1, void (*a2)(void), uint64_t a3, CGFloat a4, CGFloat a5)
{
  void (*v44)(void *__return_ptr);
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  CGPoint v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  double v55;
  double v56;
  double a;
  double b;
  char *v59;
  id v60;
  void *v61;
  Class isa;
  id v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(void);
  uint64_t v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t);
  void *v74;
  id v75;
  char isEscapingClosureAtFileLocation;
  char *v77;
  CGColorSpace *v78;
  CGColorSpace *v79;
  char *v80;
  CGColorRef v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t ObjectType;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  void *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  void (*v105)(void);
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  id v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(void);
  uint64_t v126;
  char *v127;
  char *v128;
  void (*v129)(char *, char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  void (*v140)(char *, uint64_t);
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  void (*v147)(void);
  void *v148;
  uint64_t v149[6];
  uint64_t v150;
  uint64_t v151[5];
  CGFloat v152[4];
  void v153[7];
  void v154[7];
  CGAffineTransform v155;
  char v156;
  void v157[6];
  char v158;
  CGPoint v159;

  long long v147 = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v136 = *(void *)(v10 - 8);
  uint64_t v137 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v135 = (char *)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x270FA5388](v15 - 8);
  os_log_t v138 = (char *)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v17);
  uint64_t v133 = (uint64_t)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  int64_t v134 = (uint64_t)&v119 - v20;
  uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  char v143 = *(void *)(v146 - 8);
  MEMORY[0x270FA5388](v146);
  uint64_t v139 = (char *)&v119 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v144 = (char *)&v119 - v23;
  MEMORY[0x270FA5388](v24);
  unint64_t v142 = (char *)&v119 - v25;
  uint64_t v26 = type metadata accessor for CRKeyPath();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  double v29 = (char *)&v119 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v31 = MEMORY[0x270FA5388](v30);
  id v33 = (char *)&v119 - v32;
  uint64_t v131 = v5;
  uint64_t v148 = (void *)MEMORY[0x210550400](v5 + direct field offset for CanvasScribbleDelegate.canvas, v31);
  if (!v148)
  {
    v147();
    return;
  }
  uint64_t v132 = a3;
  id v34 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v145 = v33;
  v34(v33, a1, v26);
  CRKeyPath.init(_:)();
  char v35 = static CRKeyPath.== infix(_:_:)();
  uint64_t v140 = *(void (**)(char *, uint64_t))(v27 + 8);
  uint64_t v141 = v27 + 8;
  v140(v29, v26);
  if ((v35 & 1) == 0) {
    goto LABEL_26;
  }
  Swift::String v127 = v29;
  uint64_t v128 = v14;
  uint64_t v123 = v27;
  uint64_t v124 = v17;
  int64_t v130 = v26;
  char v36 = (void *)MEMORY[0x263F8EED0];
  double v37 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v148) + 0x308);
  id v38 = v148;
  double v39 = (void *)v37();
  if (v39)
  {
    uint64_t v40 = v39;
    objc_msgSend(v39, sel_zoomScale);
    double v42 = v41;
  }
  else
  {
    double v42 = 1.0;
  }
  uint64_t v43 = v144;
  uint64_t v44 = *(void (**)(void *__return_ptr))((*v36 & *v38) + 0x5D0);
  v44(v153);
  outlined init with take of CGAffineTransform?((uint64_t)v153, (uint64_t)v157);
  if (v158)
  {

    uint64_t v45 = 1.0;
  }
  else
  {
    char v46 = *(double *)v157;
    int64_t v47 = *(double *)&v157[1];

    uint64_t v45 = sqrt(v46 * v46 + v47 * v47);
  }
  uint64_t v48 = v42 * v45;
  uint64_t v49 = 1.0;
  CGAffineTransformMakeScale(&v155, 1.0 / v48, 1.0 / v48);
  v159.CGFloat x = a4;
  v159.CGFloat y = a5;
  id v50 = CGPointApplyAffineTransform(v159, &v155);
  if (one-time initialization token for defaultTextBoxAttributes != -1) {
    swift_once();
  }
  unint64_t v51 = v38;
  unint64_t v52 = swift_bridgeObjectRetain();
  int64_t v53 = (void *)((uint64_t (*)(uint64_t))v37)(v52);
  if (v53)
  {
    uint64_t v54 = v53;
    objc_msgSend(v53, sel_zoomScale);
    uint64_t v49 = v55;
  }
  v44(v154);
  outlined init with take of CGAffineTransform?((uint64_t)v154, (uint64_t)&v155);
  if (v156)
  {

    id v56 = 1.0;
  }
  else
  {
    CGFloat a = v155.a;
    CGFloat b = v155.b;

    id v56 = sqrt(a * a + b * b);
  }
  unsigned int v59 = v139;
  uint64_t v122 = v51;
  unsigned __int8 v60 = objc_allocWithZone(MEMORY[0x263F086A0]);
  uint64_t v61 = (void *)MEMORY[0x21054D080](32, 0xE100000000000000);
  type metadata accessor for NSAttributedStringKey(0);
  _s9Coherence9CRKeyPathVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  double v63 = objc_msgSend(v60, sel_initWithString_attributes_, v61, isa);

  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  uint64_t v139 = (char *)v63;
  CRAttributedString.init(_:)();
  double v64 = v143;
  double v65 = v146;
  Swift::String v129 = *(void (**)(char *, char *, uint64_t))(v143 + 32);
  v129(v43, v59, v146);
  double v66 = *(void (**)(void))(v64 + 16);
  ((void (*)(char *, char *, uint64_t))v66)(v59, v43, v65);
  double v67 = CRAttributedString.count.getter();
  double v68 = v43;
  double v69 = *(void (**)(char *, uint64_t))(v64 + 8);
  v69(v59, v65);
  uint64_t v120 = v69;
  uint64_t v121 = v64 + 8;
  uint64_t v125 = v66;
  uint64_t v126 = v64 + 16;
  if (v67 < 1)
  {

    double v73 = 0;
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v66)(v59, v68, v65);
    id v70 = CRAttributedString.count.getter();
    v69(v59, v65);
    double v71 = swift_allocObject();
    *(double *)(v71 + 16) = 1.0 / (v49 * v56);
    *(void *)(v71 + 24) = v68;
    CGFloat v72 = swift_allocObject();
    double v73 = partial apply for closure #1 in CRAttributedString<>.init(nsAttributedString:scale:);
    *(void *)(v72 + 16) = partial apply for closure #1 in CRAttributedString<>.init(nsAttributedString:scale:);
    *(void *)(v72 + 24) = v71;
    v149[4] = (uint64_t)partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    v149[5] = v72;
    v149[0] = MEMORY[0x263EF8330];
    v149[1] = 1107296256;
    v149[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    v149[3] = (uint64_t)&block_descriptor_71;
    CGFloat v74 = _Block_copy(v149);
    swift_retain();
    swift_release();
    double v75 = v139;
    objc_msgSend(v139, sel_enumerateAttributesInRange_options_usingBlock_, 0, v70, 0, v74);

    _Block_release(v74);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
      goto LABEL_34;
    }
    double v65 = v146;
  }
  v129(v142, v144, v65);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v73);
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  double v77 = v138;
  TaggedValue_9.init(_:)();
  memset(v152, 0, sizeof(v152));
  CGFloat v78 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (!v78)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v79 = v78;
  unint64_t v80 = v127;
  unint64_t v81 = CGColorCreate(v78, v152);

  uint64_t v26 = v130;
  if (!v81)
  {
LABEL_35:
    __break(1u);
    return;
  }
  v149[0] = (uint64_t)v81;
  v151[0] = 0;
  uint64_t v82 = v142;
  uint64_t v83 = (uint64_t)v128;
  uint64_t v84 = v146;
  v125();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v143 + 56))(v83, 0, 1, v84);
  unint64_t v85 = unk_26C14EFD8;
  if ((unk_26C14EFD8 & ~qword_26C14EFD0) == 0) {
    unint64_t v85 = 0;
  }
  uint64_t v150 = v85 | qword_26C14EFD0;
  unint64_t v86 = v134;
  Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v77, v149, v151, v83, &v150, v134, v50.x + -0.5, v50.y + -0.5, 1.0, 1.0, 5.0);
  outlined init with copy of Shape(v86, v133);
  unint64_t v87 = v80;
  static CRKeyPath.unique.getter();
  unint64_t v88 = _s9Coherence9CRKeyPathVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  unint64_t v89 = (uint64_t)v135;
  uint64_t v90 = v124;
  Capsule<>.init(_:id:)();
  Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)(v89, 0, 0, 0, v90, v88, &protocol witness table for Shape);
  uint64_t v91 = v137;
  Capsule<>.rootID.getter();
  (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v89, v91);
  outlined destroy of Shape(v86);
  v120(v82, v84);
  uint64_t v92 = (uint64_t)v145;
  v140(v145, v26);
  (*(void (**)(uint64_t, char *, uint64_t))(v123 + 32))(v92, v87, v26);
LABEL_26:
  unint64_t v93 = Canvas.editingView.getter();
  unint64_t v95 = v94;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v97 = (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 32))(ObjectType, v95);

  uint64_t v98 = (uint64_t)v145;
  if (*(void *)(v97 + 16) && (uint64_t v99 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v145), (v100 & 1) != 0))
  {
    int64_t v130 = v26;
    uint64_t v101 = *(id *)(*(void *)(v97 + 56) + 8 * v99);
    int64_t v102 = swift_bridgeObjectRelease();
    id v103 = (void *)MEMORY[0x263F8EED0];
    id v104 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v101) + 0x2D0))(v102);
    uint64_t v105 = v147;
    if (v104)
    {
      uint64_t v106 = v104;
      (*(void (**)(void))((*v103 & *v104) + 0x128))(0);
      (*(void (**)(uint64_t))((*v103 & *v106) + 0xC8))(1);
      swift_unknownObjectWeakAssign();
      id v107 = *(void **)((char *)v106 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
      int64_t v108 = v148;
      unint64_t v109 = v101;
      unint64_t v110 = v107;
      CGRect v111 = specialized CanvasMembers.init(_:)(v109);
      unint64_t v113 = v112;
      uint64_t v115 = v114;
      unint64_t v117 = v116;

      AnyCanvas.selection.setter(v111, v113, v115, v117 & 1);
      v140(v145, v130);
    }
    else
    {
      v140(v145, v130);

      id v107 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v140((char *)v98, v26);

    id v107 = 0;
    uint64_t v105 = v147;
  }
  unint64_t v118 = v107;
  ((void (*)(void *))v105)(v107);
}

void specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:willBeginWritingInElement:)(uint64_t a1)
{
  uint64_t v3 = (unsigned char *)MEMORY[0x210550400](v1 + direct field offset for CanvasScribbleDelegate.canvas);
  if (v3)
  {
    v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isScribbling] = 1;
  }
  uint64_t v4 = (void *)CanvasScribbleDelegate.textBoxForScribble(elementIdentifier:)(a1);
  if (v4)
  {
    id v5 = v4;
    (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v4) + 0xC8))(1);
  }
}

void specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:didFinishWritingInElement:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (unsigned char *)MEMORY[0x210550400](v2 + direct field offset for CanvasScribbleDelegate.canvas);
  if (v4)
  {
    v4[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isScribbling] = 0;
  }
  id v5 = (void *)CanvasScribbleDelegate.textBoxForScribble(elementIdentifier:)(a1);
  if (v5)
  {
    uint64_t v6 = v5;
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v5) + 0xC8))(0);
  }
  swift_unknownObjectWeakAssign();
  uint64_t v7 = MEMORY[0x210550400](v2 + direct field offset for CanvasScribbleDelegate.canvas);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    double v9 = *(unsigned char **)(v7 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (v9)
    {
      uint64_t v10 = MEMORY[0x210550400](&v9[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
      if (v10)
      {
        uint64_t v17 = (void *)v10;
        if (*(void *)&v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController])
        {
          uint64_t v11 = *(void *)&v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
          uint64_t v12 = *(void *)&v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
          uint64_t v13 = *(void *)&v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
          char v14 = v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
          uint64_t v15 = v9;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          MiniMenuState.update(from:in:)(v11, v12, v13, v14, v17);

          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
        }
        uint64_t v16 = v17;
      }
      else
      {
        uint64_t v16 = v8;
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_20C7B23C8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7B23D8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_71(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_71()
{
  return swift_release();
}

uint64_t _s9Coherence9CRKeyPathVACSHAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void specialized CanvasScribbleDelegate.init()()
{
}

id StandinGraphView.init(frame:)(double a1, double a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC8PaperKit16StandinGraphView_label] = 0;
  *(void *)&v4[OBJC_IVAR____TtC8PaperKit16StandinGraphView_expressions] = MEMORY[0x263F8EE78];
  double v9 = &v4[OBJC_IVAR____TtC8PaperKit16StandinGraphView_range];
  *double v9 = 0u;
  v9[1] = 0u;
  v4[OBJC_IVAR____TtC8PaperKit16StandinGraphView_isSelected] = 0;
  v16.receiver = v4;
  v16.super_class = (Class)type metadata accessor for StandinGraphView();
  id v10 = objc_msgSendSuper2(&v16, sel_initWithFrame_, a1, a2, a3, a4);
  uint64_t v11 = self;
  id v12 = v10;
  id v13 = objc_msgSend(v11, sel_redColor);
  objc_msgSend(v12, sel_setBackgroundColor_, v13);

  id v14 = objc_msgSend(v12, sel_layer);
  if (one-time initialization token for resizeCornerRadius != -1) {
    swift_once();
  }
  objc_msgSend(v14, sel_setCornerRadius_, *(double *)&static UIConstants.resizeCornerRadius);

  return v12;
}

Swift::Void __swiftcall StandinGraphView.layoutSubviews()()
{
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for StandinGraphView();
  objc_msgSendSuper2(&v12, sel_layoutSubviews);
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit16StandinGraphView_label];
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v2, sel_intrinsicContentSize);
    double v4 = v3;
    double v6 = v5;
    objc_msgSend(v0, sel_bounds);
    CGFloat x = v13.origin.x;
    CGFloat y = v13.origin.y;
    CGFloat width = v13.size.width;
    CGFloat height = v13.size.height;
    double MidX = CGRectGetMidX(v13);
    v14.origin.CGFloat x = x;
    v14.origin.CGFloat y = y;
    v14.size.CGFloat width = width;
    v14.size.CGFloat height = height;
    objc_msgSend(v2, sel_setFrame_, MidX - v4 * 0.5, CGRectGetMidY(v14) - v6 * 0.5, v4, v6);
  }
}

id StandinGraphView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StandinGraphView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for StandinGraphView()
{
  return self;
}

void PaperDocumentPageView.ScrollViewObserver.attachment.getter()
{
}

double PaperDocumentPageView.ScrollViewObserver.lastZoomScale.getter()
{
  return *(double *)(v0 + direct field offset for PaperDocumentPageView.ScrollViewObserver.lastZoomScale);
}

void PaperDocumentPageView.ScrollViewObserver.lastZoomScale.setter(double a1)
{
  *(double *)(v1 + direct field offset for PaperDocumentPageView.ScrollViewObserver.lastZoomScale) = a1;
}

Swift::Void __swiftcall PaperDocumentPageView.ScrollViewObserver._observeScrollViewDidScroll(_:)(UIScrollView *a1)
{
  [(UIScrollView *)a1 zoomScale];
  double v4 = v3;
  double v5 = *(double *)(v1 + direct field offset for PaperDocumentPageView.ScrollViewObserver.lastZoomScale);
  uint64_t v6 = MEMORY[0x210550400](v1 + direct field offset for PaperDocumentPageView.ScrollViewObserver.attachment);
  if (v4 == v5)
  {
    if (v6)
    {
      id v8 = (id)v6;
      specialized PaperDocumentPageView.didScroll(in:)();
    }
  }
  else
  {
    if (v6)
    {
      id v9 = (id)v6;
      specialized PaperDocumentPageView.didZoom(in:)();
    }
    [(UIScrollView *)a1 zoomScale];
    *(void *)(v1 + direct field offset for PaperDocumentPageView.ScrollViewObserver.lastZoomScale) = v7;
  }
}

void @objc PaperDocumentPageView.ScrollViewObserver._observeScrollViewDidScroll(_:)(void *a1, uint64_t a2, void *a3)
{
  double v4 = a3;
  id v5 = a1;
  PaperDocumentPageView.ScrollViewObserver._observeScrollViewDidScroll(_:)(v4);
}

id PaperDocumentPageView.ScrollViewObserver.init()()
{
  swift_unknownObjectWeakInit();
  *(void *)&v0[direct field offset for PaperDocumentPageView.ScrollViewObserver.lastZoomScale] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperDocumentPageView.ScrollViewObserver();
  return objc_msgSendSuper2(&v2, sel_init);
}

id @objc PaperDocumentPageView.ScrollViewObserver.init()()
{
  return PaperDocumentPageView.ScrollViewObserver.init()();
}

id PaperDocumentPageView.ScrollViewObserver.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperDocumentPageView.ScrollViewObserver();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc PaperDocumentPageView.ScrollViewObserver.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

void PaperDocumentPageView._scrollView.getter()
{
}

void PaperDocumentPageView._tiledView.getter()
{
}

void PaperDocumentPageView._pdfPage.getter()
{
}

void PaperDocumentPageView.overlayView.didset(void *a1)
{
  objc_msgSend(a1, sel_removeFromSuperview);
  objc_super v2 = *(void **)&v1[direct field offset for PaperDocumentPageView.overlayView];
  if (v2)
  {
    id v3 = v2;
    objc_msgSend(v1, sel_addSubview_, v3);
    objc_msgSend(v1, sel_setNeedsLayout);
  }
}

void PaperDocumentPageView.overlayView.setter(void *a1)
{
  objc_super v2 = *(void **)(v1 + direct field offset for PaperDocumentPageView.overlayView);
  *(void *)(v1 + direct field offset for PaperDocumentPageView.overlayView) = a1;
  id v3 = a1;
  PaperDocumentPageView.overlayView.didset(v2);
}

void PaperDocumentPageView.documentView.getter()
{
}

uint64_t PaperDocumentPageView.sharedPaperPage.getter()
{
  uint64_t v0 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = type metadata accessor for Capsule();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  double v4 = &v6[-v3];
  type metadata accessor for Paper();
  if (swift_dynamicCastMetatype())
  {
    v6[13] = 0;
    Canvas.updatablePaper2.getter((uint64_t)v4);
    Capsule<>.rootID.getter();
    (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    return SharedTagged_3.init(_:id:)();
  }
  type metadata accessor for Image();
  if (swift_dynamicCastMetatype())
  {
    v6[14] = 1;
    Canvas.updatablePaper2.getter((uint64_t)v4);
    Capsule<>.rootID.getter();
    (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    return SharedTagged_3.init(_:id:)();
  }
  type metadata accessor for PaperDocumentPage();
  if (swift_dynamicCastMetatype())
  {
    v6[15] = 2;
    Canvas.updatablePaper2.getter((uint64_t)v4);
    Capsule<>.rootID.getter();
    (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    return SharedTagged_3.init(_:id:)();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PaperDocumentPageView.canvasUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  double v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x210550400](v1 + direct field offset for PaperDocumentPageView.documentView, v4);
  if (!v7)
  {
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 1, 1, v10);
LABEL_5:
    uint64_t v12 = v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas__canvasUUID;
    type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a1, v12, v10);
    return outlined destroy of UUID?((uint64_t)v6);
  }
  id v8 = (void *)v7;
  uint64_t v9 = v7 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewUUID;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v6, v9, v10);

  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1) {
    goto LABEL_5;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v6, v10);
}

void PaperDocumentPageView.canvasStateLiveStreamMessenger.didset()
{
  uint64_t v1 = Canvas.canvasStateLiveStreamMessenger.getter();
  if (v1) {
    swift_unknownObjectRelease();
  }
  BOOL v2 = v1 != 0;
  uint64_t v3 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings);
  swift_beginAccess();
  unsigned __int8 *v3 = v2;
  double v4 = (void *)MEMORY[0x210550400](v0 + direct field offset for PaperDocumentPageView._tiledView);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = objc_msgSend(v4, sel_canvasView);

    if (v6)
    {
      objc_msgSend(v6, sel_setGenerateLiveDrawing_, *v3);
    }
  }
}

uint64_t PaperDocumentPageView.canvasStateLiveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentPageView.canvasStateLiveStreamMessenger.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void PaperDocumentPageView.editingMode.setter(unsigned __int8 *a1)
{
  unsigned __int8 v1 = *a1;
  Canvas.editingMode.setter(&v1);
  PaperDocumentPageView.updateToolPicker()();
}

void (*PaperDocumentPageView.editingMode.modify(void *a1))(void *a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = Canvas.editingMode.modify(v3);
  return PaperDocumentPageView.editingMode.modify;
}

void PaperDocumentPageView.editingMode.modify(void *a1, char a2)
{
  uint64_t v3 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  if ((a2 & 1) == 0) {
    PaperDocumentPageView.updateToolPicker()();
  }
  free(v3);
}

uint64_t PaperDocumentPageView.scrollViewForAvoidingKeyboard.getter()
{
  uint64_t result = MEMORY[0x210550400](v0 + direct field offset for PaperDocumentPageView.documentView);
  if (result)
  {
    BOOL v2 = (void *)result;
    id v3 = PaperDocumentView.scrollViewForAvoidingKeyboard.getter();

    return (uint64_t)v3;
  }
  return result;
}

uint64_t PaperDocumentPageView.pencilKitAttachmentViews()()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for PaperDocumentPageView.overlayView);
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = UIView.getPencilKitAttachmentViews()();
    double v4 = Canvas.editingView.getter();
    unint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x298))();

    specialized Array.append<A>(contentsOf:)(v5);
    return v3;
  }
  else
  {
    uint64_t v7 = Canvas.editingView.getter();
    uint64_t v8 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x298))();

    return v8;
  }
}

uint64_t UIView.getPencilKitAttachmentViews()()
{
  uint64_t v1 = v0;
  unsigned __int8 v2 = objc_msgSend(v0, sel_isHidden);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2) {
    return v3;
  }
  type metadata accessor for AnyCanvas();
  unint64_t v5 = (void *)swift_dynamicCastClass();
  if (v5)
  {
    id v6 = (void *)MEMORY[0x263F8EED0];
    uint64_t v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v5) + 0x2F8))();
    uint64_t v8 = *(uint64_t (**)(void))((*v6 & *v7) + 0x298);
    id v9 = v1;
    uint64_t v10 = v8();

    return v10;
  }
  id v11 = objc_msgSend(v1, sel_subviews);
  type metadata accessor for UIView();
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = v3;
  if (v12 >> 62) {
    goto LABEL_20;
  }
  unint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v13)
  {
LABEL_21:
    swift_bridgeObjectRelease_n();
    return MEMORY[0x263F8EE78];
  }
  while (!__OFSUB__(v13--, 1))
  {
    if ((v12 & 0xC000000000000001) != 0)
    {
      id v14 = (id)MEMORY[0x21054E050](v13, v12);
LABEL_10:
      uint64_t v15 = v14;
      unint64_t v16 = UIView.getPencilKitAttachmentViews()();

      specialized Array.append<A>(contentsOf:)(v16);
      if (!v13) {
        goto LABEL_17;
      }
    }
    else
    {
      if ((v13 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v13 < *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v14 = *(id *)(v12 + 32 + 8 * v13);
        goto LABEL_10;
      }
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain();
      unint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      if (!v13) {
        goto LABEL_21;
      }
    }
  }
  __break(1u);
LABEL_17:
  swift_bridgeObjectRelease_n();
  return v18;
}

uint64_t PaperDocumentPageView.paperCanvases()()
{
  uint64_t v1 = v0;
  unsigned __int8 v2 = *(void **)&v0[direct field offset for PaperDocumentPageView.overlayView];
  if (v2)
  {
    id v3 = v2;
    uint64_t v10 = UIView.getPaperCanvases()();
    double v4 = v0;
    uint64_t v5 = swift_bridgeObjectRetain();
    MEMORY[0x21054D330](v5);
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v6 = v10;

    swift_bridgeObjectRelease();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_20C835790;
    *(void *)(v7 + 32) = v0;
    uint64_t v11 = v7;
    specialized Array._endMutation()();
    uint64_t v6 = v11;
    id v8 = v1;
  }
  return v6;
}

uint64_t UIView.getPaperCanvases()()
{
  uint64_t v1 = v0;
  unsigned __int8 v2 = objc_msgSend(v0, sel_isHidden);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2) {
    return v3;
  }
  type metadata accessor for AnyCanvas();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_20C835790;
    *(void *)(v6 + 32) = v5;
    uint64_t v16 = v6;
    specialized Array._endMutation()();
    uint64_t v3 = v16;
    id v7 = v1;
    return v3;
  }
  id v9 = objc_msgSend(v1, sel_subviews);
  type metadata accessor for UIView();
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = v3;
  if (v10 >> 62) {
    goto LABEL_19;
  }
  unint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v11)
  {
LABEL_20:
    swift_bridgeObjectRelease_n();
    return MEMORY[0x263F8EE78];
  }
  while (!__OFSUB__(v11--, 1))
  {
    if ((v10 & 0xC000000000000001) != 0)
    {
      id v12 = (id)MEMORY[0x21054E050](v11, v10);
LABEL_9:
      unint64_t v13 = v12;
      unint64_t v14 = UIView.getPaperCanvases()();

      specialized Array.append<A>(contentsOf:)(v14);
      if (!v11) {
        goto LABEL_16;
      }
    }
    else
    {
      if ((v11 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v11 < *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v12 = *(id *)(v10 + 32 + 8 * v11);
        goto LABEL_9;
      }
      __break(1u);
LABEL_19:
      swift_bridgeObjectRetain();
      unint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      if (!v11) {
        goto LABEL_20;
      }
    }
  }
  __break(1u);
LABEL_16:
  swift_bridgeObjectRelease_n();
  return v17;
}

uint64_t PaperDocumentPageView.__allocating_init(context:frame:paper:documentView:)(void *a1, ValueMetadata *a2, char *a3, double a4, double a5, double a6, double a7)
{
  specialized PaperDocumentPageView.__allocating_init(context:frame:paper:documentView:pdfPage:)(a1, a2, a3, 0, a4, a5, a6, a7);
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for Capsule();
  (*(void (**)(ValueMetadata *, uint64_t))(*(void *)(v10 - 8) + 8))(a2, v10);
  return v9;
}

void @objc PaperDocumentPageView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized PaperDocumentPageView.init(coder:)();
}

uint64_t @objc PaperDocumentPageView.isHidden.getter(void *a1)
{
  id v1 = a1;
  unsigned __int8 v2 = PaperDocumentPageView.isHidden.getter();

  return v2 & 1;
}

id PaperDocumentPageView.isHidden.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperDocumentPageView();
  return objc_msgSendSuper2(&v2, sel_isHidden);
}

void @objc PaperDocumentPageView.isHidden.setter(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  PaperDocumentPageView.isHidden.setter(a3);
}

void PaperDocumentPageView.isHidden.setter(char a1)
{
  id v3 = (objc_class *)type metadata accessor for PaperDocumentPageView();
  v6.receiver = v1;
  v6.super_class = v3;
  char v4 = objc_msgSendSuper2(&v6, sel_isHidden);
  v5.receiver = v1;
  v5.super_class = v3;
  objc_msgSendSuper2(&v5, sel_setHidden_, a1 & 1);
  PaperDocumentPageView.isHidden.didset(v4);
}

void PaperDocumentPageView.isHidden.didset(char a1)
{
  if (objc_msgSend(v1, sel_isHidden) != (a1 & 1))
  {
    uint64_t v2 = AnyCanvas.overlays.getter();
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      char v4 = (void **)(v2 + 32);
      do
      {
        objc_super v5 = *v4;
        v4 += 2;
        id v6 = v5;
        objc_msgSend(v6, sel_setHidden_, objc_msgSend(v1, sel_isHidden));

        --v3;
      }
      while (v3);
    }
    swift_bridgeObjectRelease();
    if ((objc_msgSend(v1, sel_isHidden) & 1) == 0)
    {
      id v7 = (void *)MEMORY[0x210550400](&v1[direct field offset for PaperDocumentPageView._tiledView]);
      if (v7)
      {
        id v8 = v7;
        objc_msgSend(v7, sel_layoutSubviews);
      }
    }
  }
}

Swift::Void __swiftcall PaperDocumentPageView.updateToolPicker()()
{
  Canvas.editingMode.getter(&v3);
  id v1 = *(void **)(v0 + direct field offset for PaperDocumentPageView.toolPicker);
  if (v1)
  {
    BOOL v2 = v3 == 3;
    objc_msgSend(v1, sel_setVisible_forFirstResponder_, v2, v0);
  }
}

Swift::Void __swiftcall PaperDocumentPageView.removeFromSuperview()()
{
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for PaperDocumentPageView();
  objc_msgSendSuper2(&v7, sel_removeFromSuperview);
  uint64_t v1 = AnyCanvas.overlays.getter();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    char v3 = (void **)(v1 + 32);
    do
    {
      char v4 = *v3;
      v3 += 2;
      objc_msgSend(v4, sel_removeFromSuperview);
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  objc_super v5 = (void *)MEMORY[0x210550400](&v0[direct field offset for PaperDocumentPageView._scrollView]);
  if (v5)
  {
    id v6 = v5;
    objc_msgSend(v5, sel__removeScrollViewScrollObserver_, *(void *)&v0[direct field offset for PaperDocumentPageView.scrollViewObserver]);
  }
}

void @objc PaperDocumentPageView.removeFromSuperview()(void *a1)
{
  id v1 = a1;
  PaperDocumentPageView.removeFromSuperview()();
}

Swift::Void __swiftcall PaperDocumentPageView.layoutSubviews()()
{
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for PaperDocumentPageView();
  objc_msgSendSuper2(&v6, sel_layoutSubviews);
  id v1 = (id)specialized Canvas.paperView.getter();
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setFrame_);

  uint64_t v2 = *(void **)&v0[direct field offset for PaperDocumentPageView.overlayView];
  if (v2)
  {
    id v3 = v2;
    objc_msgSend(v0, sel_bounds);
    objc_msgSend(v3, sel_setFrame_);
  }
  char v4 = *(void **)&v0[direct field offset for PaperDocumentPageView.linedPaperView];
  if (v4)
  {
    id v5 = v4;
    objc_msgSend(v0, sel_bounds);
    drawingTransform.CGFloat a = 1.0;
    drawingTransform.CGFloat b = 0.0;
    drawingTransform.CGFloat c = 0.0;
    drawingTransform.CGFloat d = 1.0;
    drawingTransform.tCGFloat x = 0.0;
    drawingTransform.tCGFloat y = 0.0;
    LinedPaperView.update(bounds:drawingTransform:shouldClip:)(v8, &drawingTransform, 1);
  }
}

void @objc PaperDocumentPageView.layoutSubviews()(void *a1)
{
  id v1 = a1;
  PaperDocumentPageView.layoutSubviews()();
}

uint64_t PaperDocumentPageView.hitChromeForCanvasElementView(_:location:isStylus:)(double a1, double a2, uint64_t a3, char a4)
{
  id v5 = *(void **)(v4 + direct field offset for PaperDocumentPageView.overlayView);
  if (v5)
  {
    uint64_t result = (uint64_t)objc_msgSend(v5, sel_hitTest_withEvent_, 0);
    if (result)
    {

      return 1;
    }
  }
  else
  {
    return specialized Canvas.hitChromeForCanvasElementView(_:location:isStylus:)(a4 & 1, a1, a2);
  }
  return result;
}

uint64_t PaperDocumentPageView.allowsDropInteraction.getter()
{
  if (Canvas.allowsDropInteraction.getter()
    && (uint64_t v1 = MEMORY[0x210550400](v0 + direct field offset for PaperDocumentPageView.documentView)) != 0)
  {
    uint64_t v2 = (char *)v1;
    uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    if (MEMORY[0x210550400](v3))
    {
      uint64_t v4 = *(void *)(v3 + 8);
      uint64_t ObjectType = swift_getObjectType();
      char v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 24))(v2, ObjectType, v4);

      swift_unknownObjectRelease();
    }
    else
    {
      __C::CGRect v8 = &v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
      swift_beginAccess();
      LODWORD(v8) = *v8;

      char v6 = v8 != 0;
    }
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

void __swiftcall PaperDocumentPageView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  uint64_t v4 = v3;
  isCGFloat a = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  uint64_t v8 = type metadata accessor for PKInk();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  id v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = (void *)MEMORY[0x210550400](&v3[direct field offset for PaperDocumentPageView._pdfPage], v10);

  if (!v13)
  {
    uint64_t v48 = (objc_class *)type metadata accessor for PaperDocumentPageView();
    v60.receiver = v4;
    v60.super_class = v48;
    id v47 = -[UIView_optional hitTest:withEvent:](&v60, sel_hitTest_withEvent_, isa, x, y);
    goto LABEL_23;
  }
  unint64_t v14 = *(void **)&v4[direct field offset for PaperDocumentPageView.overlayView];
  if (!v14
    || (id v15 = v14,
        objc_msgSend(v15, sel_convertPoint_fromCoordinateSpace_, v4, x, y),
        id v16 = objc_msgSend(v15, sel_hitTest_withEvent_, isa),
        v15,
        !v16))
  {
    LODWORD(v17) = 0;
    if ((PaperDocumentPageView.allowsDropInteraction.getter() & 1) != 0 && isa)
    {
      uint64_t v18 = isa;
      uint64_t v19 = (NSString *)MEMORY[0x21054D080](0x7645676172444955, 0xEB00000000746E65);
      Class v17 = NSClassFromString(v19);

      if (v17) {
        LODWORD(v17) = [(objc_class *)v18 isKindOfClass:v17];
      }
    }
    uint64_t v20 = (objc_class *)MEMORY[0x210550400](&v4[direct field offset for PaperDocumentPageView._tiledView]);
    Class v21 = v20;
    if (v20)
    {
      id v22 = [(objc_class *)v20 ink];

      static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
      Class v21 = PKInk._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    uint64_t v23 = v21;
    int v24 = [(objc_class *)v23 _isHandwritingInk];

    if (!v24) {
      goto LABEL_45;
    }
    id v25 = Canvas.editingView.getter();
    id v26 = Canvas.editingView.getter();
    objc_msgSend(v26, sel_convertPoint_fromCoordinateSpace_, v4, x, y);
    double v28 = v27;
    double v30 = v29;

    id v31 = objc_msgSend(v25, sel_hitTest_withEvent_, isa, v28, v30);
    if (!v31)
    {
LABEL_45:
      id v32 = Canvas.editingView.getter();
      uint64_t v34 = v33;
      uint64_t ObjectType = swift_getObjectType();
      char v36 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v34 + 144))(ObjectType, v34);

      if (!v36
        || (id v37 = Canvas.editingView.getter(),
            objc_msgSend(v37, sel_convertPoint_fromCoordinateSpace_, v4, x, y),
            double v39 = v38,
            double v41 = v40,
            v37,
            id v42 = objc_msgSend(v36, sel_hitTest_withEvent_, isa, v39, v41),
            v36,
            !v42))
      {
        uint64_t v43 = (unsigned __int8 *)MEMORY[0x210550400](&v4[direct field offset for PaperDocumentPageView.documentView]);
        if (!v43
          || (int v44 = v43[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_nonDrawingToolMode], v43, v44)
          || ((Canvas.editingMode.getter(&v61), v61 == 1) ? (int v45 = 1) : (int v45 = (int)v17), v45 == 1))
        {
          char v46 = (objc_class *)type metadata accessor for PaperDocumentPageView();
          v62.receiver = v4;
          v62.super_class = v46;
          id v47 = -[UIView_optional hitTest:withEvent:](&v62, sel_hitTest_withEvent_, isa, x, y);
LABEL_23:
          v47;
          return;
        }
        id v49 = Canvas.editingView.getter();
        uint64_t v51 = v50;
        uint64_t v52 = swift_getObjectType();
        unint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 56))(v52, v51);

        if (v53 >> 62) {
          goto LABEL_41;
        }
        unint64_t v54 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
        while (v54)
        {
          uint64_t v59 = v53 & 0xFFFFFFFFFFFFFF8;
          while (!__OFSUB__(v54--, 1))
          {
            if ((v53 & 0xC000000000000001) != 0)
            {
              id v56 = (id)MEMORY[0x21054E050](v54, v53);
            }
            else
            {
              if ((v54 & 0x8000000000000000) != 0) {
                goto LABEL_39;
              }
              if (v54 >= *(void *)(v59 + 16)) {
                goto LABEL_40;
              }
              id v56 = *(id *)(v53 + 32 + 8 * v54);
            }
            unint64_t v57 = v56;
            objc_msgSend(v56, sel_convertPoint_fromCoordinateSpace_, v4, x, y, v59);
            id v58 = objc_msgSend(v57, sel_hitTest_withEvent_, isa);

            if (v58 || !v54) {
              goto LABEL_36;
            }
          }
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          swift_bridgeObjectRetain();
          unint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
LABEL_36:
        swift_bridgeObjectRelease();
      }
    }
  }
}

id @objc PaperDocumentPageView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  v16.value.super.isCGFloat a = (Class)a5;
  PaperDocumentPageView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v16);
  unint64_t v13 = v12;

  return v13;
}

UIContextMenuConfiguration_optional __swiftcall PaperDocumentPageView.customContextMenuInteraction(canvasElementViews:suggestedActions:)(Swift::OpaquePointer canvasElementViews, Swift::OpaquePointer suggestedActions)
{
  uint64_t v3 = v2;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v6 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x210550400](v3 + direct field offset for PaperDocumentPageView.documentView, v11);
  if (!v14) {
    goto LABEL_17;
  }
  id v15 = (void *)v14;
  uint64_t v16 = v14 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  swift_beginAccess();
  uint64_t v17 = MEMORY[0x210550400](v16);
  if (!v17)
  {

LABEL_17:
    UIContextMenuConfiguration_optional v20 = AnyCanvas.customContextMenuInteraction(canvasElementViews:suggestedActions:)(canvasElementViews, suggestedActions);
    isCGFloat a = v20.value.super.isa;
    goto LABEL_18;
  }
  double v38 = v15;
  double v39 = v13;
  uint64_t v37 = *(void *)(v16 + 8);
  unint64_t rawValue = (unint64_t)canvasElementViews._rawValue;
  if ((unint64_t)canvasElementViews._rawValue >> 62)
  {
    uint64_t v31 = v17;
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v17 = v31;
  }
  else
  {
    uint64_t v18 = *(void *)(((unint64_t)canvasElementViews._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v19 = MEMORY[0x263F8EE78];
  if (v18)
  {
    uint64_t v36 = v17;
    uint64_t v42 = MEMORY[0x263F8EE78];
    v20.value.super.isCGFloat a = (Class)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 & ~(v18 >> 63), 0);
    if (v18 < 0)
    {
      __break(1u);
      return v20;
    }
    uint64_t v32 = v10;
    uint64_t v33 = v9;
    uint64_t v34 = v3;
    char v35 = suggestedActions._rawValue;
    uint64_t v21 = 0;
    uint64_t v19 = v42;
    unint64_t v22 = rawValue & 0xC000000000000001;
    do
    {
      if (v22) {
        uint64_t v23 = (void *)MEMORY[0x21054E050](v21, rawValue);
      }
      else {
        uint64_t v23 = *(id *)(rawValue + 8 * v21 + 32);
      }
      int v24 = v23;
      (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v23) + 0xE8))();

      uint64_t v42 = v19;
      unint64_t v26 = *(void *)(v19 + 16);
      unint64_t v25 = *(void *)(v19 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        uint64_t v19 = v42;
      }
      ++v21;
      *(void *)(v19 + 16) = v26 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v19+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v26, v8, v41);
    }
    while (v18 != v21);
    suggestedActions._unint64_t rawValue = v35;
    uint64_t v10 = v32;
    uint64_t v9 = v33;
  }
  uint64_t ObjectType = swift_getObjectType();
  double v28 = v39;
  PaperDocumentPageView.sharedPaperPage.getter();
  double v29 = v38;
  isCGFloat a = (objc_class *)(*(uint64_t (**)(void *, uint64_t, char *, void *, uint64_t))(v37 + 8))(v38, v19, v28, suggestedActions._rawValue, ObjectType);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v10 + 8))(v28, v9);
LABEL_18:
  v20.value.super.isCGFloat a = isa;
  return v20;
}

uint64_t PaperDocumentPageView.mergeToSelf<A>(_:from:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = *a2;
  char v9 = Canvas.mergeToSelf<A>(_:from:)();
  if (((v9 & 1) != 0 || (v8 - 3) <= 1) && !AnyCanvas.isLiveEditing()())
  {
    uint64_t v10 = MEMORY[0x210550400](v2 + direct field offset for PaperDocumentPageView.documentView);
    if (v10)
    {
      double v11 = (void *)v10;
      PaperDocumentPageView.sharedPaperPage.getter();
      PaperDocumentView.didChange(page:)((uint64_t)v7);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  return v9 & 1;
}

uint64_t PaperDocumentPageView.canvasCalculateDocument.getter()
{
  uint64_t v1 = MEMORY[0x210550400](v0 + direct field offset for PaperDocumentPageView.documentView);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (void *)v1;
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocument);
  swift_beginAccess();
  uint64_t v4 = *v3;
  swift_unknownObjectRetain();

  return v4;
}

void PaperDocumentPageView.canvasCalculateDocumentExpressionSolvingBehavior.getter(char *a1@<X8>)
{
  uint64_t v3 = MEMORY[0x210550400](v1 + direct field offset for PaperDocumentPageView.documentView);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    uint64_t v5 = (char *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior);
    swift_beginAccess();
    char v6 = *v5;
  }
  else
  {
    char v6 = 2;
  }
  *a1 = v6;
}

void PaperDocumentPageView.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();

  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  uint64_t v1 = *(void **)(v0 + direct field offset for PaperDocumentPageView.toolPicker);
}

id PaperDocumentPageView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperDocumentPageView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc PaperDocumentPageView.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();

  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  objc_super v2 = *(void **)(a1 + direct field offset for PaperDocumentPageView.toolPicker);
}

void *protocol witness for PageOverlayView.overlayView.getter in conformance PaperDocumentPageView<A>()
{
  uint64_t v0 = (void *)specialized PaperDocumentPageView.overlayView.getter();
  id v1 = v0;
  return v0;
}

void protocol witness for PageOverlayView.editingMode.setter in conformance PaperDocumentPageView<A>(unsigned __int8 *a1)
{
  unsigned __int8 v1 = *a1;
  PaperDocumentPageView.editingMode.setter(&v1);
}

void protocol witness for PageOverlayView.toolPicker.setter in conformance PaperDocumentPageView<A>(void *a1)
{
  specialized PaperDocumentPageView.toolPicker.setter(a1);
}

uint64_t specialized PaperDocumentPageView.overlayView.getter()
{
  return *(void *)(v0 + direct field offset for PaperDocumentPageView.overlayView);
}

void specialized PaperDocumentPageView.canvasStateLiveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  specialized Canvas.canvasStateLiveStreamMessenger.setter(a1, a2);
  PaperDocumentPageView.canvasStateLiveStreamMessenger.didset();
}

void specialized PaperDocumentPageView.toolPicker.setter(void *a1)
{
  objc_super v2 = *(void **)(v1 + direct field offset for PaperDocumentPageView.toolPicker);
  *(void *)(v1 + direct field offset for PaperDocumentPageView.toolPicker) = a1;
  id v3 = a1;

  PaperDocumentPageView.updateToolPicker()();
}

void specialized PaperDocumentPageView.init(context:frame:paper:documentView:pdfPage:)(void *a1, ValueMetadata *a2, char *a3, void *a4, double a5, double a6, double a7, double a8)
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v8[direct field offset for PaperDocumentPageView.linedPaperView] = 0;
  *(void *)&v8[direct field offset for PaperDocumentPageView.cancellables] = MEMORY[0x263F8EE88];
  *(void *)&v8[direct field offset for PaperDocumentPageView.overlayView] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v8[direct field offset for PaperDocumentPageView.toolPicker] = 0;
  id v15 = (void **)&a3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  uint64_t v16 = *v15;
  if (!v16)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v17 = v8;
  id v18 = objc_msgSend(v16, sel_documentScrollView);
  if (!v18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v19 = *(void **)&a3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView];
  if (!v19)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  UIContextMenuConfiguration_optional v20 = v18;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  uint64_t v21 = (objc_class *)type metadata accessor for PaperDocumentPageView.ScrollViewObserver();
  id v22 = v19;
  id v23 = objc_msgSend(objc_allocWithZone(v21), sel_init);
  *(void *)&v17[direct field offset for PaperDocumentPageView.scrollViewObserver] = v23;
  swift_unknownObjectWeakAssign();

  int v24 = (unsigned __int8 *)&a3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
  swift_beginAccess();
  v43[0] = *v24;
  id v25 = a1;
  specialized Canvas.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:)(v25, a2, v43, 1, 1, a5, a6, a7, a8);
  uint64_t v27 = *(void *)&v26[OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView];
  double v28 = v26;
  objc_msgSend(v20, sel_addSubview_, v27);
  id v29 = objc_allocWithZone((Class)type metadata accessor for CanvasElementResizeView());
  double v30 = v28;
  uint64_t v31 = CanvasElementResizeView.init(frame:canvas:)(v30, a5, a6, a7, a8);
  uint64_t v32 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  uint64_t v33 = *(void **)&v30[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  *(void *)&v30[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView] = v31;

  if (!*(void *)&v30[v32])
  {
LABEL_11:
    __break(1u);
    return;
  }
  objc_msgSend(v20, sel_addSubview_);
  int v44 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v45 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v43[0] = 1;
  char v34 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  if (v34)
  {
    id v35 = objc_allocWithZone((Class)type metadata accessor for HandwritingReflowView());
    uint64_t v36 = v30;
    uint64_t v37 = HandwritingReflowView.init(frame:canvas:)((uint64_t)v36, a5, a6, a7, a8);
    objc_msgSend(v20, sel_addSubview_, v37);
    double v38 = *(void **)&v36[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
    *(void *)&v36[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView] = v37;
  }
  uint64_t v39 = direct field offset for PaperDocumentPageView.scrollViewObserver;
  swift_unknownObjectWeakAssign();
  id v40 = *(id *)&v30[v39];
  objc_msgSend(v20, sel__addScrollViewScrollObserver_, v40);
}

void specialized PaperDocumentPageView.__allocating_init(context:frame:paper:documentView:pdfPage:)(void *a1, ValueMetadata *a2, char *a3, void *a4, double a5, double a6, double a7, double a8)
{
  id v16 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentPageView());
  specialized PaperDocumentPageView.init(context:frame:paper:documentView:pdfPage:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t type metadata accessor for PaperDocumentPageView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized PaperDocumentPageView.didZoom(in:)()
{
  uint64_t v1 = v0;
  objc_super v2 = (void *)specialized Canvas.paperView.getter();
  id v3 = *(void (**)(void *))((*MEMORY[0x263F8EED0] & *v2) + 0x280);
  uint64_t v4 = v2;
  v3(v1);

  objc_msgSend(v1, sel_layoutSubviews);
  uint64_t v5 = AnyCanvas.overlays.getter();
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = (void **)(v5 + 32);
    do
    {
      int v8 = *v7;
      v7 += 2;
      objc_msgSend(v8, sel_layoutSubviews);
      --v6;
    }
    while (v6);
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized PaperDocumentPageView.didScroll(in:)()
{
  uint64_t v1 = v0;
  id v2 = (id)specialized Canvas.paperView.getter();
  ContainerCanvasElementView.didScroll(in:)((uint64_t)v1);

  objc_msgSend(v1, sel_layoutSubviews);
  uint64_t v3 = AnyCanvas.overlays.getter();
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = (void **)(v3 + 32);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      objc_msgSend(v6, sel_layoutSubviews);
      --v4;
    }
    while (v4);
  }
  return swift_bridgeObjectRelease();
}

uint64_t type metadata completion function for PaperDocumentPageView()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for PaperDocumentPageView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PaperDocumentPageView);
}

uint64_t type metadata completion function for PaperDocumentPageView.ScrollViewObserver()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for PaperDocumentPageView.ScrollViewObserver()
{
  return __swift_instantiateGenericMetadata();
}

void specialized PaperDocumentPageView.init(coder:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v0[direct field offset for PaperDocumentPageView.linedPaperView] = 0;
  *(void *)&v0[direct field offset for PaperDocumentPageView.cancellables] = MEMORY[0x263F8EE88];
  *(void *)&v0[direct field offset for PaperDocumentPageView.overlayView] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[direct field offset for PaperDocumentPageView.toolPicker] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CompactShapeOpacityController.viewDidLoad()()
{
  uint64_t v1 = v0;
  v35.receiver = v0;
  v35.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v35, sel_viewDidLoad);
  id v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_slider];
  if (v2)
  {
    id v3 = v2;
    objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v4 = objc_msgSend(v0, sel_view);
    if (v4)
    {
      uint64_t v5 = v4;
      objc_msgSend(v4, sel_addSubview_, v3);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_20C8344C0;
      id v7 = objc_msgSend(v3, sel_topAnchor);
      id v8 = objc_msgSend(v1, sel_view);
      if (v8)
      {
        char v9 = v8;
        id v10 = objc_msgSend(v8, sel_safeAreaLayoutGuide);

        id v11 = objc_msgSend(v10, sel_topAnchor);
        double v12 = *(double *)&v1[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_contentViewMargin];
        id v13 = objc_msgSend(v7, sel_constraintEqualToAnchor_constant_, v11, v12);

        *(void *)(v6 + 32) = v13;
        id v14 = objc_msgSend(v3, sel_leadingAnchor);
        id v15 = objc_msgSend(v1, sel_view);
        if (v15)
        {
          id v16 = v15;
          id v17 = objc_msgSend(v15, sel_safeAreaLayoutGuide);

          id v18 = objc_msgSend(v17, sel_leadingAnchor);
          id v19 = objc_msgSend(v14, sel_constraintEqualToAnchor_constant_, v18, v12);

          *(void *)(v6 + 40) = v19;
          id v20 = objc_msgSend(v3, sel_bottomAnchor);
          id v21 = objc_msgSend(v1, sel_view);
          if (v21)
          {
            id v22 = v21;
            id v23 = objc_msgSend(v21, sel_safeAreaLayoutGuide);

            id v24 = objc_msgSend(v23, sel_bottomAnchor);
            double v25 = -v12;
            id v26 = objc_msgSend(v20, sel_constraintEqualToAnchor_constant_, v24, v25);

            *(void *)(v6 + 48) = v26;
            id v27 = objc_msgSend(v3, sel_trailingAnchor);
            id v28 = objc_msgSend(v1, sel_view);
            if (v28)
            {
              id v29 = v28;
              double v30 = self;
              id v31 = objc_msgSend(v29, sel_safeAreaLayoutGuide);

              id v32 = objc_msgSend(v31, sel_trailingAnchor);
              id v33 = objc_msgSend(v27, sel_constraintEqualToAnchor_constant_, v32, v25);

              *(void *)(v6 + 56) = v33;
              specialized Array._endMutation()();
              type metadata accessor for NSLayoutConstraint();
              isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              objc_msgSend(v30, sel_activateConstraints_, isa);

              objc_msgSend(v1, sel_setPreferredContentSize_, *(double *)&v1[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_preferredPopoverSize], *(double *)&v1[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_preferredPopoverSize + 8]);
              return;
            }
LABEL_13:
            __break(1u);
            return;
          }
LABEL_12:
          __break(1u);
          goto LABEL_13;
        }
LABEL_11:
        __break(1u);
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
}

id CompactShapeOpacityController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_slider] = 0;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_contentViewMargin] = 0x4030000000000000;
  *(_OWORD *)&v3[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_preferredPopoverSize] = xmmword_20C837350;
  if (a2)
  {
    id v8 = (void *)MEMORY[0x21054D080](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v8 = 0;
  }
  v11.receiver = v3;
  v11.super_class = ObjectType;
  id v9 = objc_msgSendSuper2(&v11, sel_initWithNibName_bundle_, v8, a3);

  return v9;
}

id CompactShapeOpacityController.init(coder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_slider] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_contentViewMargin] = 0x4030000000000000;
  *(_OWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_preferredPopoverSize] = xmmword_20C837350;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  id v4 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);

  return v4;
}

uint64_t type metadata accessor for CompactShapeOpacityController()
{
  return self;
}

char *CompactSignatureStrokeWidthControl.init(width:unit:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl_strokePreviewWidth] = 0x4036000000000000;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl_strokePreviewRotationAngle] = 0xBFE921FB54442D18;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl____lazy_storage___strokeWidthPreview] = 0;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl_width] = a1;
  id v8 = &v3[OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl_unit];
  *(void *)id v8 = a2;
  *((void *)v8 + 1) = a3;
  v31.receiver = v3;
  v31.super_class = ObjectType;
  id v9 = objc_msgSendSuper2(&v31, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v10 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  objc_msgSend(v10, sel_setUserInteractionEnabled_, 0);

  objc_super v11 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  objc_msgSend(v11, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  double v12 = (char *)v9;
  id v13 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  objc_msgSend(v12, sel_addSubview_, v13);

  id v14 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_20C837410;
  id v16 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  id v17 = objc_msgSend(v16, sel_widthAnchor);

  id v18 = objc_msgSend(v17, sel_constraintEqualToConstant_, *(double *)&v12[OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl_strokePreviewWidth]);
  *(void *)(v15 + 32) = v18;
  id v19 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  id v20 = objc_msgSend(v19, sel_centerXAnchor);

  id v21 = objc_msgSend(v12, sel_centerXAnchor);
  id v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(void *)(v15 + 40) = v22;
  id v23 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  id v24 = objc_msgSend(v23, sel_centerYAnchor);

  id v25 = objc_msgSend(v12, sel_centerYAnchor);
  id v26 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v25);

  *(void *)(v15 + 48) = v26;
  *(void *)&v30.CGFloat a = v15;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_activateConstraints_, isa);

  id v28 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  CGAffineTransformMakeRotation(&v30, *(CGFloat *)&v12[OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl_strokePreviewRotationAngle]);
  objc_msgSend(v28, sel_setTransform_, &v30);

  CompactSignatureStrokeWidthControl.updateUI()();
  return v12;
}

char *CompactSignatureStrokeWidthControl.strokeWidthPreview.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl____lazy_storage___strokeWidthPreview;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl____lazy_storage___strokeWidthPreview);
  if (v2)
  {
    id v3 = *(char **)(v0
                  + OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl____lazy_storage___strokeWidthPreview);
  }
  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl_width);
    id v6 = objc_allocWithZone((Class)type metadata accessor for SignatureStrokeWidthPreview());
    id v7 = SignatureStrokeWidthPreview.init(width:)(v5);
    id v8 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v7;
    id v3 = v7;

    id v2 = 0;
  }
  id v9 = v2;
  return v3;
}

void CompactSignatureStrokeWidthControl.updateUI()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v15.receiver = v0;
  v15.super_class = ObjectType;
  id v2 = &selRef_quaternarySystemFillColor;
  if (objc_msgSendSuper2(&v15, sel_isEnabled))
  {
    v11.receiver = v0;
    v11.super_class = ObjectType;
    id v2 = &selRef_systemBlueColor;
    if ((objc_msgSendSuper2(&v11, sel_isSelected) & 1) == 0)
    {
      v10.receiver = v0;
      v10.super_class = ObjectType;
      if (!objc_msgSendSuper2(&v10, sel_isHighlighted)) {
        id v2 = &selRef_quaternarySystemFillColor;
      }
    }
  }
  id v3 = [self *v2];
  objc_msgSend(v0, sel_setBackgroundColor_, v3);

  uint64_t v4 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  v14.receiver = v0;
  v14.super_class = ObjectType;
  if (objc_msgSendSuper2(&v14, sel_isEnabled))
  {
    v13.receiver = v0;
    v13.super_class = ObjectType;
    uint64_t v5 = &selRef_systemBackgroundColor;
    if ((objc_msgSendSuper2(&v13, sel_isSelected) & 1) == 0)
    {
      v12.receiver = v0;
      v12.super_class = ObjectType;
      if (!objc_msgSendSuper2(&v12, sel_isHighlighted)) {
        uint64_t v5 = &selRef_labelColor;
      }
    }
  }
  else
  {
    uint64_t v5 = &selRef_tertiaryLabelColor;
  }
  id v6 = [self *v5];
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor;
  id v8 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor];
  *(void *)&v4[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor] = v6;
  id v9 = v6;

  objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokePreview], sel_setBackgroundColor_, *(void *)&v4[v7]);
}

void @objc CompactSignatureStrokeWidthControl.isSelected.setter(void *a1, uint64_t a2, uint64_t a3, const char **a4)
{
  v8.receiver = a1;
  v8.super_class = (Class)swift_getObjectType();
  id v6 = *a4;
  id v7 = v8.receiver;
  objc_msgSendSuper2(&v8, v6, a3);
  CompactSignatureStrokeWidthControl.updateUI()();
}

uint64_t type metadata accessor for CompactSignatureStrokeWidthControl()
{
  return self;
}

uint64_t getEnumTagSinglePayload for PaperDocumentPageLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C7B6824);
}

uint64_t sub_20C7B6824(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PaperDocumentPageLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C7B68A4);
}

uint64_t sub_20C7B68A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PaperDocumentPageLayout()
{
  uint64_t result = type metadata singleton initialization cache for PaperDocumentPageLayout;
  if (!type metadata singleton initialization cache for PaperDocumentPageLayout) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t associated type witness table accessor for LayoutItemProvider.Model : CRDT in PaperDocumentPageLayout()
{
  return _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
}

void *PaperDocumentPageLayout.createView<A>(in:canvas:parent:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  v26[1] = a4;
  v26[2] = a5;
  v26[3] = a1;
  uint64_t v9 = type metadata accessor for CRKeyPath();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  objc_super v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PaperDocumentPage>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  id v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocumentPage>);
  double v18 = MEMORY[0x270FA5388](v17 - 8);
  id v20 = (char *)v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v6, v9, v18);
  type metadata accessor for PaperDocumentPage();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<PaperDocumentPage> and conformance Ref<A>();
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  id v21 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElementView<PaperDocumentPage>));
  id v22 = a3;
  id v23 = a2;
  id v24 = specialized ContainerCanvasElementView.init(canvasElement:canvas:parentCanvasElement:)((uint64_t)v20, a2, a3);

  return v24;
}

unint64_t lazy protocol witness table accessor for type Ref<PaperDocumentPage> and conformance Ref<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Ref<PaperDocumentPage> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<PaperDocumentPage> and conformance Ref<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Ref<PaperDocumentPage>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<PaperDocumentPage> and conformance Ref<A>);
  }
  return result;
}

void *specialized ContainerCanvasElementView.init(canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)MEMORY[0x263F8EED0];
  *(void *)((char *)v3 + *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0x4C0)) = 0;
  *(void *)((char *)v3 + *(void *)((*v11 & *v3) + 0x4C8)) = 0;
  *(void *)((char *)v3 + *(void *)((*v11 & *v3) + 0x4D0)) = 0;
  *(void *)((char *)v3 + *(void *)((*v11 & *v3) + 0x4D8)) = MEMORY[0x263F8EE80];
  *(void *)((char *)v3 + *(void *)((*v11 & *v3) + 0x4E0)) = 0;
  *((unsigned char *)v3 + *(void *)((*v11 & *v3) + 0x4E8)) = 0;
  *((unsigned char *)v3 + *(void *)((*v11 & *v3) + 0x4F0)) = 0;
  *((unsigned char *)v3 + *(void *)((*v11 & *v3) + 0x4F8)) = 0;
  v18[0] = type metadata accessor for Image();
  v18[1] = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_3(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  _OWORD v18[2] = &protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  double v12 = *(double *)&v18[4];
  double v13 = *(double *)&v18[5];
  double v14 = *(double *)&v18[6];
  double v15 = *(double *)&v18[7];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  id v16 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v10, a2, a3, v12, v13, v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v16;
}

{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void v18[8];

  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)MEMORY[0x263F8EED0];
  *(void *)((char *)v3 + *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0x4C0)) = 0;
  *(void *)((char *)v3 + *(void *)((*v11 & *v3) + 0x4C8)) = 0;
  *(void *)((char *)v3 + *(void *)((*v11 & *v3) + 0x4D0)) = 0;
  *(void *)((char *)v3 + *(void *)((*v11 & *v3) + 0x4D8)) = MEMORY[0x263F8EE80];
  *(void *)((char *)v3 + *(void *)((*v11 & *v3) + 0x4E0)) = 0;
  *((unsigned char *)v3 + *(void *)((*v11 & *v3) + 0x4E8)) = 0;
  *((unsigned char *)v3 + *(void *)((*v11 & *v3) + 0x4F0)) = 0;
  *((unsigned char *)v3 + *(void *)((*v11 & *v3) + 0x4F8)) = 0;
  v18[0] = type metadata accessor for Paper();
  v18[1] = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  _OWORD v18[2] = &protocol witness table for Paper;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  double v12 = *(double *)&v18[4];
  double v13 = *(double *)&v18[5];
  double v14 = *(double *)&v18[6];
  double v15 = *(double *)&v18[7];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  id v16 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v10, a2, a3, v12, v13, v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v16;
}

{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void v18[8];

  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocumentPage>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)MEMORY[0x263F8EED0];
  *(void *)((char *)v3 + *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0x4C0)) = 0;
  *(void *)((char *)v3 + *(void *)((*v11 & *v3) + 0x4C8)) = 0;
  *(void *)((char *)v3 + *(void *)((*v11 & *v3) + 0x4D0)) = 0;
  *(void *)((char *)v3 + *(void *)((*v11 & *v3) + 0x4D8)) = MEMORY[0x263F8EE80];
  *(void *)((char *)v3 + *(void *)((*v11 & *v3) + 0x4E0)) = 0;
  *((unsigned char *)v3 + *(void *)((*v11 & *v3) + 0x4E8)) = 0;
  *((unsigned char *)v3 + *(void *)((*v11 & *v3) + 0x4F0)) = 0;
  *((unsigned char *)v3 + *(void *)((*v11 & *v3) + 0x4F8)) = 0;
  v18[0] = type metadata accessor for PaperDocumentPage();
  v18[1] = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  _OWORD v18[2] = &protocol witness table for PaperDocumentPage;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  double v12 = *(double *)&v18[4];
  double v13 = *(double *)&v18[5];
  double v14 = *(double *)&v18[6];
  double v15 = *(double *)&v18[7];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  id v16 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v10, a2, a3, v12, v13, v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v16;
}

uint64_t sub_20C7B757C()
{
  return 24;
}

__n128 sub_20C7B7588(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C7B75A4()
{
  return 24;
}

__n128 sub_20C7B75B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL specialized TaskLocal.appendingValues<A, B>(_:operation:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::OpaquePointer a4)
{
  TaskLocal.get()();
  uint64_t v6 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v6);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnalyticsEvent]);
  swift_task_localValuePush();
  swift_beginAccess();
  uint64_t v7 = (void *)MEMORY[0x210550400](a3 + 16);
  if (v7)
  {
    HandwritingReflowView.pasteElements(_:)(a4);
  }
  swift_task_localValuePop();
  swift_bridgeObjectRelease();
  return v7 == 0;
}

Swift::Void __swiftcall FontAttributeStylingControl.updateTintColor()()
{
  if (v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_useCompactStyle] == 1)
  {
    uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27FontAttributeStylingControl_titleLabelTintColor];
    objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabel], sel_setTextColor_, v1);
    id v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_imageView];
    id v3 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27FontAttributeStylingControl_overrideImageViewTintColor];
    if (v3)
    {
      id v5 = *(id *)&v0[OBJC_IVAR____TtC8PaperKit27FontAttributeStylingControl_overrideImageViewTintColor];
    }
    else
    {
      id v5 = v1;
      id v3 = 0;
    }
    id v4 = v3;
    objc_msgSend(v2, sel_setTintColor_, v5);
  }
  else
  {
    objc_msgSend(v0, sel_setTintColor_, 0);
  }
}

UIColor_optional __swiftcall FontAttributeStylingControl.resolvedBackgroundColor()()
{
  int v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_useCompactStyle);
  id v2 = self;
  id v3 = &selRef_quaternarySystemFillColor;
  if (!v1) {
    id v3 = &selRef_tertiarySystemFillColor;
  }
  id v4 = [v2 *v3];
  id v5 = (objc_class *)v4;
  result.value.super.isCGFloat a = v5;
  result.is_nil = v6;
  return result;
}

id FontAttributeStylingControl.init(coder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit27FontAttributeStylingControl_titleLabelTintColor;
  id v5 = self;
  Swift::Bool v6 = v1;
  *(void *)&v1[v4] = objc_msgSend(v5, sel_labelColor);
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit27FontAttributeStylingControl_overrideImageViewTintColor] = 0;

  v9.receiver = v6;
  v9.super_class = ObjectType;
  id v7 = objc_msgSendSuper2(&v9, sel_initWithCoder_, a1);

  return v7;
}

void FontAttributeStylingControl.__ivar_destroyer()
{
  int v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit27FontAttributeStylingControl_overrideImageViewTintColor);
}

uint64_t type metadata accessor for FontAttributeStylingControl()
{
  return self;
}

Swift::Void __swiftcall TextStyleViewController.viewDidLoad()()
{
  int v1 = v0;
  v34.receiver = v0;
  v34.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v34, sel_viewDidLoad);
  id v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit23TextStyleViewController_textStyleView];
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v3 = objc_msgSend(v0, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = v3;
  objc_msgSend(v3, sel_addSubview_, v2);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20C8344C0;
  id v6 = objc_msgSend(v2, sel_topAnchor);
  id v7 = objc_msgSend(v1, sel_view);
  if (!v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel_safeAreaLayoutGuide);

  id v10 = objc_msgSend(v9, sel_topAnchor);
  double v11 = *(double *)&v1[OBJC_IVAR____TtC8PaperKit23TextStyleViewController_contentViewMargin];
  id v12 = objc_msgSend(v6, sel_constraintEqualToAnchor_constant_, v10, v11);

  *(void *)(v5 + 32) = v12;
  id v13 = objc_msgSend(v2, sel_leadingAnchor);
  id v14 = objc_msgSend(v1, sel_view);
  if (!v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  double v15 = v14;
  id v16 = objc_msgSend(v14, sel_safeAreaLayoutGuide);

  id v17 = objc_msgSend(v16, sel_leadingAnchor);
  id v18 = objc_msgSend(v13, sel_constraintEqualToAnchor_constant_, v17, v11);

  *(void *)(v5 + 40) = v18;
  id v19 = objc_msgSend(v2, sel_bottomAnchor);
  id v20 = objc_msgSend(v1, sel_view);
  if (!v20)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v21 = v20;
  id v22 = objc_msgSend(v20, sel_safeAreaLayoutGuide);

  id v23 = objc_msgSend(v22, sel_bottomAnchor);
  double v24 = -v11;
  id v25 = objc_msgSend(v19, sel_constraintEqualToAnchor_constant_, v23, v24);

  *(void *)(v5 + 48) = v25;
  id v26 = objc_msgSend(v2, sel_trailingAnchor);
  id v27 = objc_msgSend(v1, sel_view);
  if (v27)
  {
    id v28 = v27;
    id v29 = self;
    id v30 = objc_msgSend(v28, sel_safeAreaLayoutGuide);

    id v31 = objc_msgSend(v30, sel_trailingAnchor);
    id v32 = objc_msgSend(v26, sel_constraintEqualToAnchor_constant_, v31, v24);

    *(void *)(v5 + 56) = v32;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_activateConstraints_, isa);

    objc_msgSend(v1, sel_setPreferredContentSize_, *(double *)&v1[OBJC_IVAR____TtC8PaperKit23TextStyleViewController_preferredPopoverSize], *(double *)&v1[OBJC_IVAR____TtC8PaperKit23TextStyleViewController_preferredPopoverSize + 8]);
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t type metadata accessor for TextStyleViewController()
{
  return self;
}

void one-time initialization function for isMacIdiom()
{
  id v0 = objc_msgSend(self, sel_currentDevice);
  id v1 = objc_msgSend(v0, sel_userInterfaceIdiom);

  static UIConstants.isMacIdiom = v1 == (id)5;
}

void one-time initialization function for isIPhoneIdiom()
{
  id v0 = objc_msgSend(self, sel_currentDevice);
  id v1 = objc_msgSend(v0, sel_userInterfaceIdiom);

  static UIConstants.isIPhoneIdiom = v1 == 0;
}

void one-time initialization function for supportsPencil()
{
  id v0 = objc_msgSend(self, sel_currentDevice);
  unsigned __int8 v1 = objc_msgSend(v0, sel__supportsPencil);

  static UIConstants.supportsPencil = v1;
}

void one-time initialization function for pinchVelocityThresholdToNormalizeScale()
{
  static UIConstants.pinchVelocityThresholdToNormalizeScale = 0xC020000000000000;
}

void one-time initialization function for translationThresholdToUnsnapCentering()
{
  static UIConstants.translationThresholdToUnsnapCentering = 0x4059000000000000;
}

void one-time initialization function for translationThresholdToResnapCentering()
{
  static UIConstants.translationThresholdToResnapCentering = 0x4049000000000000;
}

void one-time initialization function for unsnappedScrollInset()
{
  static UIConstants.unsnappedScrollInset = 0x4059000000000000;
}

void one-time initialization function for maximumPaperZoomScale()
{
  static UIConstants.maximumPaperZoomScale = 0x4020000000000000;
}

void one-time initialization function for canvasElementDefaultDimension()
{
  static UIConstants.canvasElementDefaultDimension = 0x406E000000000000;
}

double one-time initialization function for canvasElementDefaultSize()
{
  if (one-time initialization token for canvasElementDefaultDimension != -1) {
    swift_once();
  }
  double result = *(double *)&static UIConstants.canvasElementDefaultDimension;
  static UIConstants.canvasElementDefaultSize = static UIConstants.canvasElementDefaultDimension;
  *(void *)algn_2676E93F0 = static UIConstants.canvasElementDefaultDimension;
  return result;
}

int64x2_t one-time initialization function for stickerTapToInsertSize()
{
  int64x2_t result = vdupq_n_s64(0x4064000000000000uLL);
  static UIConstants.stickerTapToInsertSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for emojiTapToInsertSize()
{
  int64x2_t result = vdupq_n_s64(0x4058000000000000uLL);
  static UIConstants.emojiTapToInsertSize = (__int128)result;
  return result;
}

void one-time initialization function for maxCanvasSizeBeforeScalingNewElements()
{
  static UIConstants.maxCanvasSizeBeforeScalingNewElements = 0x4090000000000000;
}

void one-time initialization function for maxTextureSize()
{
  static UIConstants.maxTextureSize = 0x40A0000000000000;
}

__n128 one-time initialization function for canvasElementPasteOffset()
{
  __asm { FMOV            V0.2D, #20.0 }
  static UIConstants.canvasElementPasteOffset = (__int128)result;
  return result;
}

void one-time initialization function for copyImageMaxDimension()
{
  static UIConstants.copyImageMaxDimension = 0x4090000000000000;
}

void one-time initialization function for copyImageScale()
{
  static UIConstants.copyImageScale = 0x4000000000000000;
}

id one-time initialization function for backboardColor()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithWhite_alpha_, 0.9, 1.0);
  static UIConstants.backboardColor = (uint64_t)result;
  return result;
}

void one-time initialization function for maximumDropCanvasElementDimension()
{
  static UIConstants.maximumDropCanvasElementDimension = 0x407E000000000000;
}

int64x2_t one-time initialization function for dropItemSpacing()
{
  int64x2_t result = vdupq_n_s64(0x4040000000000000uLL);
  static UIConstants.dropItemSpacing = (__int128)result;
  return result;
}

uint64_t one-time initialization function for resizeHandleSize()
{
  if (one-time initialization token for isMacIdiom != -1) {
    uint64_t result = swift_once();
  }
  double v0 = 16.0;
  if (static UIConstants.isMacIdiom) {
    double v0 = 10.0;
  }
  static UIConstants.resizeHandleSize = *(void *)&v0;
  return result;
}

uint64_t one-time initialization function for resizeHandleInset()
{
  if (one-time initialization token for isMacIdiom != -1) {
    uint64_t result = swift_once();
  }
  double v0 = 3.0;
  if (static UIConstants.isMacIdiom) {
    double v0 = 1.0;
  }
  static UIConstants.resizeHandleInset = *(void *)&v0;
  return result;
}

void one-time initialization function for resizeHandleObscureInset()
{
  static UIConstants.resizeHandleObscureInset = 0x4008000000000000;
}

uint64_t one-time initialization function for resizeHandleEdgeWidth()
{
  if (one-time initialization token for isMacIdiom != -1) {
    uint64_t result = swift_once();
  }
  double v0 = 2.0;
  if (static UIConstants.isMacIdiom) {
    double v0 = 1.0;
  }
  static UIConstants.resizeHandleEdgeCGFloat Width = *(void *)&v0;
  return result;
}

void one-time initialization function for resizeHandleFingerHitTestSize()
{
  static UIConstants.resizeHandleFingerHitTestSize = 0x4046000000000000;
}

id one-time initialization function for resizeHandleColor(uint64_t a1)
{
  return one-time initialization function for resizeHandleColor(a1, (SEL *)&selRef_systemBlueColor, &static UIConstants.resizeHandleColor);
}

id one-time initialization function for resizeHandleColorControl(uint64_t a1)
{
  return one-time initialization function for resizeHandleColor(a1, (SEL *)&selRef_systemGreenColor, &static UIConstants.resizeHandleColorControl);
}

id one-time initialization function for resizeHandleColorCrop(uint64_t a1)
{
  return one-time initialization function for resizeHandleColor(a1, (SEL *)&selRef_blackColor, &static UIConstants.resizeHandleColorCrop);
}

id one-time initialization function for resizeHandleColorReflow(uint64_t a1)
{
  return one-time initialization function for resizeHandleColor(a1, (SEL *)&selRef_purpleColor, &static UIConstants.resizeHandleColorReflow);
}

id one-time initialization function for resizeHandleColorDisabled()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithWhite_alpha_, 0.9, 1.0);
  static UIConstants.resizeHandleColorDisableCGFloat d = (uint64_t)result;
  return result;
}

void one-time initialization function for resizeCornerRadius()
{
  static UIConstants.resizeCornerRadius = 0x4030000000000000;
}

void one-time initialization function for resizeMoreButtonSize()
{
  static UIConstants.resizeMoreButtonSize = 0x4036000000000000;
}

void one-time initialization function for resizeMiddleHandlesMinSelectionSize()
{
  static UIConstants.resizeMiddleHandlesMinSelectionSize = 0x4044000000000000;
}

CGColorRef one-time initialization function for resizeInvisibleShapeBorderColor()
{
  CGColorRef result = CGColorCreateGenericGray(0.8, 1.0);
  static UIConstants.resizeInvisibleShapeBorderColor = (uint64_t)result;
  return result;
}

void one-time initialization function for resizeNudgeSmallJumpDistance()
{
  static UIConstants.resizeNudgeSmallJumpDistance = 0x3FF0000000000000;
}

void one-time initialization function for resizeNudgeLargeJumpDistance()
{
  static UIConstants.resizeNudgeLargeJumpDistance = 0x4024000000000000;
}

void one-time initialization function for resizeLineSnapToStraightThreshold()
{
  static UIConstants.resizeLineSnapToStraightThresholCGFloat d = 0x4034000000000000;
}

void one-time initialization function for resizeLineSnapToAngleThreshold()
{
  static UIConstants.resizeLineSnapToAngleThresholCGFloat d = 0x4034000000000000;
}

void one-time initialization function for resizeLineSnapToAngleStep()
{
  static UIConstants.resizeLineSnapToAngleStep = 0x3FE921FB54442D18;
}

void one-time initialization function for resizeRotateTwoFingerDefaultSnapRadius()
{
  static UIConstants.resizeRotateTwoFingerDefaultSnapRadius = 0x4072C00000000000;
}

void one-time initialization function for resizeRotateSnapToAngleStep()
{
  static UIConstants.resizeRotateSnapToAngleStep = 0x3FE921FB54442D18;
}

void one-time initialization function for resizeRotateSnapToAngleThreshold()
{
  static UIConstants.resizeRotateSnapToAngleThresholCGFloat d = 0x4014000000000000;
}

void one-time initialization function for resizeRotateMaximumSnapAngle()
{
  static UIConstants.resizeRotateMaximumSnapAngle = 0x3FB657184AE74487;
}

void one-time initialization function for resizeRotateMinimumSnapAngle()
{
  static UIConstants.resizeRotateMinimumSnapAngle = 0x3FA1DF46A2529D39;
}

void one-time initialization function for resizeDragConstraintLimit()
{
  static UIConstants.resizeDragConstraintLimit = 0x4062C00000000000;
}

double one-time initialization function for textBoxTextContainerInset()
{
  double result = 0.0;
  static UIConstants.textBoxTextContainerInset = 0u;
  *(_OWORD *)&qword_26ACC4578 = 0u;
  return result;
}

uint64_t one-time initialization function for textBoxDefaultPointSize()
{
  if (one-time initialization token for isIPhoneIdiom != -1) {
    uint64_t result = swift_once();
  }
  double v0 = 60.0;
  if (!static UIConstants.isIPhoneIdiom) {
    double v0 = 24.0;
  }
  static UIConstants.textBoxDefaultPointSize = *(void *)&v0;
  return result;
}

uint64_t one-time initialization function for textBoxFontUnitString()
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v5._uint64_t object = (void *)0x800000020C860020;
  v0._uint64_t countAndFlagsBits = 29808;
  v0._uint64_t object = (void *)0xE200000000000000;
  v1.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v1.value._uint64_t object = (void *)0xEB00000000656C62;
  v2._uint64_t countAndFlagsBits = 0;
  v2._uint64_t object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0xD000000000000031;
  Swift::String v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, v1, paperKitBundle, v2, v5);
  uint64_t result = v4._countAndFlagsBits;
  static UIConstants.textBoxFontUnitString = (__int128)v4;
  return result;
}

void one-time initialization function for textBoxDefaultFont()
{
  if (one-time initialization token for textBoxDefaultPointSize != -1) {
    swift_once();
  }
  double v0 = *(double *)&static UIConstants.textBoxDefaultPointSize;
  Swift::String_optional v1 = (void *)MEMORY[0x21054D080](0x63697465766C6548, 0xE900000000000061);
  id v2 = objc_msgSend(self, sel_fontWithName_size_, v1, v0);

  if (v2) {
    static UIConstants.textBoxDefaultFont = (uint64_t)v2;
  }
  else {
    __break(1u);
  }
}

id one-time initialization function for textBoxDefaultTextColor(uint64_t a1)
{
  return one-time initialization function for resizeHandleColor(a1, (SEL *)&selRef_blackColor, &static UIConstants.textBoxDefaultTextColor);
}

unint64_t one-time initialization function for defaultTextBoxAttributes()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C837A90;
  Swift::String_optional v1 = (void *)*MEMORY[0x263F814F0];
  *(void *)(inited + 32) = *MEMORY[0x263F814F0];
  uint64_t v2 = one-time initialization token for textBoxDefaultFont;
  id v3 = v1;
  if (v2 != -1) {
    swift_once();
  }
  Swift::String v4 = (void *)static UIConstants.textBoxDefaultFont;
  uint64_t v5 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  *(void *)(inited + 40) = v4;
  id v6 = (void *)*MEMORY[0x263F81540];
  *(void *)(inited + 64) = v5;
  *(void *)(inited + 72) = v6;
  id v7 = objc_allocWithZone(MEMORY[0x263F81650]);
  id v8 = v4;
  id v9 = v6;
  id v10 = objc_msgSend(v7, sel_init);
  objc_msgSend(v10, sel_setAlignment_, 1);
  uint64_t v11 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
  id v12 = (void **)MEMORY[0x263F81500];
  *(void *)(inited + 80) = v10;
  id v13 = *v12;
  *(void *)(inited + 104) = v11;
  *(void *)(inited + 112) = v13;
  uint64_t v14 = one-time initialization token for textBoxDefaultTextColor;
  id v15 = v13;
  if (v14 != -1) {
    swift_once();
  }
  id v16 = (void *)static UIConstants.textBoxDefaultTextColor;
  *(void *)(inited + 144) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  *(void *)(inited + 120) = v16;
  id v17 = v16;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static UIConstants.defaultTextBoxAttributes = result;
  return result;
}

void one-time initialization function for shapeStrokeMiterLimit()
{
  static UIConstants.shapeStrokeMiterLimit = 0x4024000000000000;
}

void one-time initialization function for shapeDefaultStrokeWidth()
{
  static UIConstants.shapeDefaultStrokeCGFloat Width = 0x4014000000000000;
}

uint64_t one-time initialization function for shapeStrokeWidthUnitString()
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v5._uint64_t object = (void *)0x800000020C8600F0;
  v0._uint64_t countAndFlagsBits = 29808;
  v0._uint64_t object = (void *)0xE200000000000000;
  v1.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v1.value._uint64_t object = (void *)0xEB00000000656C62;
  v2._uint64_t countAndFlagsBits = 0;
  v2._uint64_t object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0xD000000000000034;
  Swift::String v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, v1, paperKitBundle, v2, v5);
  uint64_t result = v4._countAndFlagsBits;
  static UIConstants.shapeStrokeWidthUnitString = (__int128)v4;
  return result;
}

void one-time initialization function for shapePreviewCornerRadius()
{
  static UIConstants.shapePreviewCornerRadius = 0x4034000000000000;
}

id one-time initialization function for imageMissingBackgroundColor(uint64_t a1)
{
  return one-time initialization function for resizeHandleColor(a1, (SEL *)&selRef_systemGray5Color, &static UIConstants.imageMissingBackgroundColor);
}

id one-time initialization function for imageMissingIconColor(uint64_t a1)
{
  return one-time initialization function for resizeHandleColor(a1, (SEL *)&selRef_systemGrayColor, &static UIConstants.imageMissingIconColor);
}

id one-time initialization function for resizeHandleColor(uint64_t a1, SEL *a2, void *a3)
{
  id result = [self *a2];
  *a3 = result;
  return result;
}

void one-time initialization function for imageCornerRadius()
{
  static UIConstants.imageCornerRadius = 0x4010000000000000;
}

double one-time initialization function for linkSize()
{
  double result = 327.0;
  static UIConstants.linkSize = xmmword_20C84A430;
  return result;
}

double one-time initialization function for minimumWindowSizeToShowLinkPreviewsOnPad()
{
  double result = 300.0;
  static UIConstants.minimumWindowSizeToShowLinkPreviewsOnPaCGFloat d = xmmword_20C84A440;
  return result;
}

uint64_t one-time initialization function for signatureInstructionString()
{
  if (one-time initialization token for supportsPencil != -1) {
    swift_once();
  }
  if (static UIConstants.supportsPencil == 1)
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    isCGFloat a = paperKitBundle.super.isa;
    unint64_t v8 = 0x800000020C860090;
    unint64_t v1 = 0x800000020C8600C0;
    unint64_t v2 = 0xD00000000000002ALL;
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    isCGFloat a = paperKitBundle.super.isa;
    unint64_t v2 = 0xD000000000000020;
    unint64_t v8 = 0x800000020C860090;
    unint64_t v1 = 0x800000020C860060;
  }
  v3.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._uint64_t object = (void *)0xEB00000000656C62;
  v4._uint64_t countAndFlagsBits = 0;
  v4._uint64_t object = (void *)0xE000000000000000;
  unint64_t v5 = 0xD00000000000002ALL;
  Swift::String v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v2, v3, (NSBundle)isa, v4, *(Swift::String *)(&v8 - 1));
  uint64_t result = v7._countAndFlagsBits;
  static UIConstants.signatureInstructionString = (__int128)v7;
  return result;
}

double one-time initialization function for scribbleHitToleranceInsetsLTR()
{
  static UIConstants.scribbleHitToleranceInsetsLTR = 0;
  *(void *)algn_2676E9598 = 0;
  double result = -50.0;
  xmmword_2676E95A0 = xmmword_20C84A450;
  return result;
}

double one-time initialization function for scribbleHitToleranceInsetsRTL()
{
  double result = 0.0;
  static UIConstants.scribbleHitToleranceInsetsRTL = xmmword_20C84A460;
  *(_OWORD *)&qword_2676E95C0 = xmmword_20C84A470;
  return result;
}

int64x2_t one-time initialization function for defaultGraphSize()
{
  int64x2_t result = vdupq_n_s64(0x4072C00000000000uLL);
  static UIConstants.defaultGraphSize = (__int128)result;
  return result;
}

void one-time initialization function for maxGraphElementDistance()
{
  static UIConstants.maxGraphElementDistance = 0x4080000000000000;
}

int64x2_t one-time initialization function for defaultLineShapeSize()
{
  int64x2_t result = vdupq_n_s64(0x4062C00000000000uLL);
  static UIConstants.defaultLineShapeSize = (__int128)result;
  return result;
}

void one-time initialization function for defaultShapeTopOffsetInAttachment()
{
  static UIConstants.defaultShapeTopOffsetInAttachment = 0x4024000000000000;
}

int64x2_t one-time initialization function for defaultRegularPolygonShapeSize()
{
  int64x2_t result = vdupq_n_s64(0x4065400000000000uLL);
  static UIConstants.defaultRegularPolygonShapeSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for defaultStarShapeSize()
{
  int64x2_t result = vdupq_n_s64(0x4066800000000000uLL);
  static UIConstants.defaultStarShapeSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for defaultArrowShapeSize()
{
  int64x2_t result = vdupq_n_s64(0x4062C00000000000uLL);
  static UIConstants.defaultArrowShapeSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for defaultEllipseShapeSize()
{
  int64x2_t result = vdupq_n_s64(0x4062C00000000000uLL);
  static UIConstants.defaultEllipseShapeSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for defaultRectangleShapeSize()
{
  int64x2_t result = vdupq_n_s64(0x4062C00000000000uLL);
  static UIConstants.defaultRectangleShapeSize = (__int128)result;
  return result;
}

double one-time initialization function for defaultChatBubbleShapeSize()
{
  double result = 165.0;
  static UIConstants.defaultChatBubbleShapeSize = xmmword_20C84A480;
  return result;
}

void one-time initialization function for defaultMiterLimit()
{
  static UIConstants.defaultMiterLimit = 0x4024000000000000;
}

void one-time initialization function for defaultRoundedRect()
{
  static UIConstants.defaultRoundedRect = 0x3FB999999999999ALL;
}

double one-time initialization function for defaultLine()
{
  __asm { FMOV            V1.2D, #0.5 }
  static UIConstants.defaultLine = xmmword_20C835600;
  *(_OWORD *)algn_2676E9690 = _Q1;
  double result = 0.0;
  xmmword_2676E96A0 = xmmword_20C8356C0;
  return result;
}

double one-time initialization function for defaultStar()
{
  if (one-time initialization token for defaultInnerRadius != -1) {
    swift_once();
  }
  double result = *(double *)&static Star.defaultInnerRadius;
  static UIConstants.defaultStar = 5;
  qword_2676E96B8 = static Star.defaultInnerRadius;
  return result;
}

double one-time initialization function for defaultShadowOffset()
{
  double result = 0.0;
  static UIConstants.defaultShadowOffset = xmmword_20C84A490;
  return result;
}

void one-time initialization function for defaultShadowColor()
{
}

void one-time initialization function for initialHeightOfInsertedTextAttachment()
{
  static UIConstants.initialHeightOfInsertedTextAttachment = 0x406E000000000000;
}

void one-time initialization function for defaultTextAttachmentHeight()
{
  static UIConstants.defaultTextAttachmentdouble Height = 0x4078000000000000;
}

void one-time initialization function for minimumTextAttachmentHeight()
{
  static UIConstants.minimumTextAttachmentdouble Height = 0x4050000000000000;
}

double one-time initialization function for maxTextAttachmentHeightForCheckingInvalidBounds()
{
  if (one-time initialization token for minimumTextAttachmentHeight != -1) {
    swift_once();
  }
  double result = *(double *)&static UIConstants.minimumTextAttachmentHeight + 65.0;
  *(double *)&static UIConstants.maxTextAttachmentHeightForCheckingInvalidBounds = *(double *)&static UIConstants.minimumTextAttachmentHeight
                                                                                 + 65.0;
  return result;
}

void one-time initialization function for selectionAllowableMovementForFingerDrawingTap()
{
  static UIConstants.selectionAllowableMovementForFingerDrawingTap = 0x4008000000000000;
}

void one-time initialization function for imageMarkupMaxDimensionBounds()
{
  static UIConstants.imageMarkupMaxDimensionBounds = 0x4090000000000000;
}

void one-time initialization function for imageMarkupOldMaxArea()
{
  static UIConstants.imageMarkupOldMaxAreCGFloat a = 0x41493BF600000000;
}

double one-time initialization function for defaultPageSize()
{
  double result = 612.0;
  static UIConstants.defaultPageSize = xmmword_20C84A4A0;
  return result;
}

double one-time initialization function for defaultPageBounds()
{
  if (one-time initialization token for defaultPageSize != -1) {
    swift_once();
  }
  static UIConstants.defaultPageBounds = 0;
  *(void *)algn_2676E9718 = 0;
  double result = *(double *)&static UIConstants.defaultPageSize;
  xmmword_2676E9720 = static UIConstants.defaultPageSize;
  return result;
}

void one-time initialization function for formFieldFont()
{
  Swift::String v0 = (void *)MEMORY[0x21054D080](0x63697465766C6548, 0xE900000000000061);
  id v1 = objc_msgSend(self, sel_fontWithName_size_, v0, 14.0);

  if (v1) {
    static UIConstants.formFieldFont = (uint64_t)v1;
  }
  else {
    __break(1u);
  }
}

void one-time initialization function for formFieldBackgroundColor()
{
  id v0 = objc_msgSend(self, sel_systemBlueColor);
  id v1 = objc_msgSend(v0, sel_colorWithAlphaComponent_, 0.12);

  static UIConstants.formFieldBackgroundColor = (uint64_t)v1;
}

void one-time initialization function for pageLabelViewTopOffset()
{
  static UIConstants.pageLabelViewTopOffset = 0x4030000000000000;
}

void one-time initialization function for pageLabelViewLeftOffset()
{
  static UIConstants.pageLabelViewLeftOffset = 0x4034000000000000;
}

uint64_t one-time initialization function for largeThumbnailViewWidth()
{
  Swift::String v4 = &type metadata for MobileQuickLookFeatureFlags;
  unint64_t v5 = lazy protocol witness table accessor for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags();
  v3[0] = 0;
  char v0 = isFeatureEnabled(_:)();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  double v2 = 81.0;
  if (v0) {
    double v2 = 160.0;
  }
  static UIConstants.largeThumbnailViewCGFloat Width = *(void *)&v2;
  return result;
}

void one-time initialization function for handwritingReflowInset()
{
  static UIConstants.handwritingReflowInset = 0x4024000000000000;
}

id one-time initialization function for handwritingReflowNonActiveBorderColor()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithWhite_alpha_, 0.75, 0.4);
  static UIConstants.handwritingReflowNonActiveBorderColor = (uint64_t)result;
  return result;
}

void one-time initialization function for handwritingReflowMinimumWidth()
{
  static UIConstants.handwritingReflowMinimumCGFloat Width = 0x4054000000000000;
}

void one-time initialization function for handwritingReflowVerticalOverflow()
{
  static UIConstants.handwritingReflowVerticalOverflow = 0x402E000000000000;
}

void one-time initialization function for handwritingReflowMinimumSpaceWidth()
{
  static UIConstants.handwritingReflowMinimumSpaceCGFloat Width = 0x402E000000000000;
}

void one-time initialization function for handwritingReflowFrameHitTestOutset()
{
  static UIConstants.handwritingReflowFrameHitTestOutset = 0x4024000000000000;
}

void one-time initialization function for handwritingReflowAnimationDuration()
{
  static UIConstants.handwritingReflowAnimationDuration = 0x3FB1111111111111;
}

void one-time initialization function for handwritingReflowInsertSpaceMinDistanceForAdjustment()
{
  static UIConstants.handwritingReflowInsertSpaceMinDistanceForAdjustment = 0x4034000000000000;
}

void one-time initialization function for handwritingReflowDefaultTextSize()
{
  static UIConstants.handwritingReflowDefaultTextSize = 0x402C000000000000;
}

void one-time initialization function for handwritingReflowPasteAnimationDuration()
{
  static UIConstants.handwritingReflowPasteAnimationDuration = 0x3FF0000000000000;
}

int64x2_t one-time initialization function for defaultGeneratedImageSize()
{
  int64x2_t result = vdupq_n_s64(0x4074000000000000uLL);
  static UIConstants.defaultGeneratedImageSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for minGenerationAreaSize()
{
  int64x2_t result = vdupq_n_s64(0x4050000000000000uLL);
  static UIConstants.minGenerationAreaSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for minGeneratedImageSize()
{
  int64x2_t result = vdupq_n_s64(0x4074000000000000uLL);
  static UIConstants.minGeneratedImageSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for maxGeneratedImageSize()
{
  int64x2_t result = vdupq_n_s64(0x4089000000000000uLL);
  static UIConstants.maxGeneratedImageSize = (__int128)result;
  return result;
}

void one-time initialization function for imageGenerationParameterResolution()
{
  static UIConstants.imageGenerationParameterResolution = 0x4080000000000000;
}

void one-time initialization function for topPaddingForMagicGenerativeVC()
{
  static UIConstants.topPaddingForMagicGenerativeVC = 0x402E000000000000;
}

void one-time initialization function for bottomPaddingForMagicGenerativeVC()
{
  static UIConstants.bottomPaddingForMagicGenerativeVC = 0x4034000000000000;
}

void one-time initialization function for bottomPaddingForBackgroundView()
{
  static UIConstants.bottomPaddingForBackgroundView = 0x4069000000000000;
}

void one-time initialization function for minimumHeightForMagicGenerativeVC()
{
  static UIConstants.minimumHeightForMagicGenerativeVC = 0x4080900000000000;
}

void one-time initialization function for estimatedMaxPopoverHeight()
{
  static UIConstants.estimatedMaxPopoverdouble Height = 0x406B800000000000;
}

void one-time initialization function for estimatedMaxPopoverWidth()
{
  static UIConstants.estimatedMaxPopoverCGFloat Width = 0x4073400000000000;
}

double one-time initialization function for estimatedPopoverSize()
{
  if (one-time initialization token for estimatedMaxPopoverWidth != -1) {
    swift_once();
  }
  uint64_t v0 = static UIConstants.estimatedMaxPopoverWidth;
  if (one-time initialization token for estimatedMaxPopoverHeight != -1) {
    swift_once();
  }
  double result = *(double *)&static UIConstants.estimatedMaxPopoverHeight;
  static UIConstants.estimatedPopoverSize = v0;
  qword_2676E9830 = static UIConstants.estimatedMaxPopoverHeight;
  return result;
}

uint64_t type metadata completion function for CanvasElementView()
{
  uint64_t v0 = type metadata accessor for Capsule();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      initeCGFloat d = swift_initClassMetadata2();
      if (inited) {
        return inited;
      }
      else {
        return 0;
      }
    }
  }
  return v0;
}

Swift::Void __swiftcall CanvasElementView.updateUI()()
{
  unint64_t v1 = v0;
  unint64_t v2 = (void *)MEMORY[0x263F8EED0];
  uint64_t v3 = *MEMORY[0x263F8EED0] & *v0;
  uint64_t v4 = *(void *)(v3 + 0x368);
  uint64_t v16 = *(void *)(v4 - 8);
  ((void (*)())MEMORY[0x270FA5388])();
  id v6 = (char *)&v16 - v5;
  uint64_t v7 = type metadata accessor for Capsule();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = (*(uint64_t (**)(double))(v3 + 1152))(v9);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))((*v2 & *v0) + 0x288))(v12);
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))((*v2 & *v0) + 0x88))(v13);
  if (v14)
  {
    id v15 = v14;
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v14) + 0x680))();
  }
  CanvasElementView.canvasElement.getter((uint64_t)v11);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v3 + 888) + 64))(&v17, v4);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v4);
  if ((v17 & 2) != 0) {
    objc_msgSend(v1, sel_setUserInteractionEnabled_, 0);
  }
}

uint64_t CanvasElementView.identity.getter()
{
  uint64_t v0 = type metadata accessor for Capsule();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v5 - v2;
  CanvasElementView.canvasElement.getter((uint64_t)&v5 - v2);
  Capsule<>.rootID.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t CanvasElementView.isFixedWidth.getter()
{
  return CanvasElementView.isFixedWidth.getter(Capsule<>.isFixedWidth.getter);
}

uint64_t CanvasElementView.isTextBox.getter()
{
  return CanvasElementView.isFixedWidth.getter(Capsule<>.isTextBox.getter);
}

uint64_t CanvasElementView.isFormField.getter()
{
  return CanvasElementView.isFixedWidth.getter(Capsule<>.isFormField.getter);
}

uint64_t CanvasElementView.isFixedWidth.getter(uint64_t (*a1)(uint64_t, uint64_t, void))
{
  uint64_t v3 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v4 = *(void *)(v3 + 0x370);
  uint64_t v5 = type metadata accessor for Capsule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - v7;
  CanvasElementView.canvasElement.getter((uint64_t)&v10 - v7);
  LOBYTE(a1) = a1(v5, v4, *(void *)(v3 + 888));
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return a1 & 1;
}

void CanvasElementView.merge<A>(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  swift_beginAccess();
  type metadata accessor for Capsule();
  char v3 = Capsule.merge<A>(_:)();
  uint64_t v4 = (void *)swift_endAccess();
  if ((v3 & 1) != 0
    || (uint64_t v4 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) == 0)
  {
    (*(void (**)(void *))((*v2 & *v1) + 0x488))(v4);
  }
  else
  {
  }
}

double CanvasElementView.modelBounds.getter()
{
  uint64_t v1 = (void *)(*MEMORY[0x263F8EED0] & *v0);
  uint64_t v2 = v1[109];
  uint64_t v3 = v1[110];
  uint64_t v4 = type metadata accessor for Capsule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v9 - v6;
  CanvasElementView.canvasElement.getter((uint64_t)v9 - v6);
  v9[0] = v2;
  v9[1] = v3;
  _OWORD v9[2] = v1[111];
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return 0.0;
}

double CanvasElementView.modelRotation.getter()
{
  uint64_t v1 = (void *)(*MEMORY[0x263F8EED0] & *v0);
  uint64_t v2 = v1[109];
  uint64_t v3 = v1[110];
  uint64_t v4 = type metadata accessor for Capsule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v9 - v6;
  CanvasElementView.canvasElement.getter((uint64_t)v9 - v6);
  v9[0] = v2;
  v9[1] = v3;
  _OWORD v9[2] = v1[111];
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return *(double *)&v9[3];
}

double CanvasElementView.uneditedModelFrame.getter()
{
  return CanvasElementView.uneditedModelFrame.getter((void (*)(double))CanvasElementView.uneditedCanvasElement.getter);
}

double CanvasElementView.modelFrame.getter()
{
  return CanvasElementView.uneditedModelFrame.getter((void (*)(double))CanvasElementView.canvasElement.getter);
}

double CanvasElementView.uneditedModelFrame.getter(void (*a1)(double))
{
  uint64_t v3 = (void *)(*MEMORY[0x263F8EED0] & *v1);
  uint64_t v4 = v3[109];
  uint64_t v5 = v3[110];
  uint64_t v6 = type metadata accessor for Capsule();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v12 - v9;
  a1(v8);
  v12[0] = v4;
  v12[1] = v5;
  v12[2] = v3[111];
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return *(double *)&v12[4];
}

uint64_t CanvasElementView.modelFrame.setter()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  swift_beginAccess();
  type metadata accessor for Capsule();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  CanvasElementView.commitWithoutStateChange()();
  return (*(uint64_t (**)(void))((*v1 & *v0) + 0x288))();
}

double CanvasElementView.uneditedModelCoordinateSpace.getter@<D0>(_OWORD *a1@<X8>)
{
  return CanvasElementView.uneditedModelCoordinateSpace.getter((void (*)(double))CanvasElementView.uneditedCanvasElement.getter, a1);
}

double CanvasElementView.modelCoordinateSpace.getter@<D0>(_OWORD *a1@<X8>)
{
  return CanvasElementView.uneditedModelCoordinateSpace.getter((void (*)(double))CanvasElementView.canvasElement.getter, a1);
}

double CanvasElementView.uneditedModelCoordinateSpace.getter@<D0>(void (*a1)(double)@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = (void *)(*MEMORY[0x263F8EED0] & *v2);
  uint64_t v6 = v5[109];
  uint64_t v7 = v5[110];
  uint64_t v8 = type metadata accessor for Capsule();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v16 - v11;
  a1(v10);
  v16[0] = v6;
  v16[1] = v7;
  _OWORD v16[2] = v5[111];
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  double result = *(double *)&v17;
  long long v14 = v18;
  long long v15 = v19;
  *a2 = v17;
  a2[1] = v14;
  a2[2] = v15;
  return result;
}

id CanvasElementView.modelCoordinateSpace.setter()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  swift_beginAccess();
  type metadata accessor for Capsule();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  CanvasElementView.commitWithoutStateChange()();
  (*(void (**)(void))((*v1 & *v0) + 0x288))();
  return objc_msgSend(v0, sel_setNeedsLayout);
}

void (*CanvasElementView.modelCoordinateSpace.modify(void *a1))(_OWORD **a1, char a2)
{
  uint64_t v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  CanvasElementView.modelCoordinateSpace.getter((_OWORD *)v3 + 6);
  return CanvasElementView.modelCoordinateSpace.modify;
}

void CanvasElementView.modelCoordinateSpace.modify(_OWORD **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2) {
    uint64_t v3 = *a1;
  }
  else {
    uint64_t v3 = *a1 + 3;
  }
  long long v4 = v2[7];
  _OWORD *v3 = v2[6];
  v3[1] = v4;
  v3[2] = v2[8];
  CanvasElementView.modelCoordinateSpace.setter();
  free(v2);
}

Swift::Void __swiftcall CanvasElementView.tapped(location:modifierFlags:allowShowingEditMenu:)(CGPoint location, __C::UIKeyModifierFlags_optional modifierFlags, Swift::Bool allowShowingEditMenu)
{
  Swift::Bool is_nil = modifierFlags.is_nil;
  Swift::Int rawValue = modifierFlags.value.rawValue;
  double y = location.y;
  double x = location.x;
  uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  uint64_t v10 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x88))();
  if (v10)
  {
    uint64_t v12 = (void *)v10;
    uint64_t v11 = (void *)MEMORY[0x210550400]((char *)v3 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
    if (!v11
      || (v11, (AnyCanvasElementView.isEditingCanvasElement.getter() & 1) != 0)
      || ((*(void (**)(char *__return_ptr))((*v9 & *v3) + 0x200))((char *)&v13 + 1), (v13 & 0x200) != 0))
    {
      objc_msgSend(v12, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
      (*(void (**)(void, Swift::Bool))((*v9 & *v12) + 0x4D0))(0, allowShowingEditMenu);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))((*v9 & *v12) + 0x2C8))(&v13);
      if (v13 == 3) {
        (*(void (**)(void *, Swift::Int, Swift::Bool))((*v9 & *v12) + 0x4E0))(v3, rawValue, is_nil);
      }
    }
  }
}

uint64_t CanvasElementView.uneditedModelHitTestPath.getter()
{
  uint64_t v1 = *(void **)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x3A8));
  if (v1)
  {
    uint64_t v2 = *(void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x3A8));
  }
  else
  {
    uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
    uint64_t v1 = 0;
  }
  id v3 = v1;
  return v2;
}

CGPathRef CanvasElementView.modelHitTestPath.getter()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  (*(void (**)(CGAffineTransform *__return_ptr))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))(&transform);
  v4.origin.double x = 0.0;
  v4.origin.double y = 0.0;
  v4.size.CGFloat width = 1.0;
  v4.size.CGFloat height = 1.0;
  return CGPathCreateWithRect(v4, &transform);
}

BOOL CanvasElementView.isInLiveEdit.getter()
{
  uint64_t v0 = type metadata accessor for Capsule();
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  CGRect v4 = (char *)&v7 - v3;
  CanvasElementView.snapshotCanvasElement.getter((uint64_t)&v7 - v3);
  BOOL v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v0 - 8) + 48))(v4, 1, v0) != 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v5;
}

Swift::Void __swiftcall CanvasElementView.beginLiveEdit()()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t v2 = type metadata accessor for Capsule();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v17 - v8;
  CanvasElementView.snapshotCanvasElement.getter((uint64_t)&v17 - v8);
  uint64_t v10 = *(void *)(v2 - 8);
  int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v2);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v9, v3);
  if (v11 == 1)
  {
    CanvasElementView.canvasElement.getter((uint64_t)v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v2);
    specialized CanvasElementView.snapshotCanvasElement.setter((uint64_t)v6);
    uint64_t v13 = ((uint64_t (*)(char *, uint64_t))v12)(v6, v3);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))((*v1 & *v0) + 0x1D8))(v13);
    uint64_t v15 = *(void *)((*v1 & *v0) + 0x3A8);
    uint64_t v16 = *(void **)((char *)v0 + v15);
    *(void *)((char *)v0 + v15) = v14;
  }
}

Swift::Void __swiftcall CanvasElementView.endLiveEdit(undoable:discard:)(Swift::Bool undoable, Swift::Bool discard)
{
  uint64_t v3 = v2;
  BOOL v43 = undoable;
  BOOL v44 = discard;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v4 - 8);
  double v38 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v39 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for CapsuleUndoAction();
  uint64_t v40 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v42 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Capsule();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v18 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v19);
  id v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  double v24 = (char *)&v37 - v23;
  CanvasElementView.snapshotCanvasElement.getter((uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v17, v10);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v14, 1, 1, v10);
    specialized CanvasElementView.snapshotCanvasElement.setter((uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    id v25 = (void *)MEMORY[0x263F8EED0];
    uint64_t v26 = *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x3A8);
    id v27 = *(void **)((char *)v2 + v26);
    *(void *)((char *)v2 + v26) = 0;

    BOOL v29 = v44;
    if (v44 || v43)
    {
      uint64_t v28 = (*(uint64_t (**)(void))((*v25 & *v2) + 0x88))();
      if (v28)
      {
        id v30 = (void *)v28;
        CanvasElementView.canvasElement.getter((uint64_t)v21);
        id v31 = v39;
        Capsule.actionUndoingDifference(from:)();
        uint64_t v32 = (uint64_t)v31;
        (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v10);
        uint64_t v34 = v40;
        uint64_t v33 = v41;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v32, 1, v41) == 1)
        {

          uint64_t v28 = outlined destroy of CapsuleUndoAction?(v32);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v42, v32, v33);
          if (v29)
          {
            uint64_t v35 = (uint64_t)v38;
            (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v38, v42, v33);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v33);
            swift_beginAccess();
            Capsule.apply(_:)();
            outlined destroy of CapsuleUndoAction?(v35);
            swift_endAccess();

            uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v42, v33);
          }
          else
          {
            uint64_t v36 = v42;
            (*(void (**)(char *, void, void, void, void, void))((*v25 & *v30) + 0x468))(v42, 0, 0, 0, 0, MEMORY[0x263F8EE78]);

            uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v36, v33);
          }
        }
      }
    }
    (*(void (**)(uint64_t))((*v25 & *v3) + 0x288))(v28);
    CanvasElementView.commitWithoutStateChange()();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v10);
  }
}

uint64_t CanvasElementView.isReadOnly.getter(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v3 = *(void *)(v2 + 0x368);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v12 - v5;
  uint64_t v7 = type metadata accessor for Capsule();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v12 - v9;
  CanvasElementView.canvasElement.getter((uint64_t)&v12 - v9);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)(v2 + 888) + 64))(&v13, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (v13 >> 1) & 1;
}

id CanvasElementView.isSelected.setter(char a1)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) = a1;
  return CanvasElementView.isSelected.didset();
}

Swift::Void __swiftcall CanvasElementView.updateFrame()()
{
  uint64_t v1 = v0;
  uint64_t v2 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  double v3 = 1.0;
  if (v2)
  {
    uint64_t v4 = (void *)v2;
    AnyCanvasElementView.paperBoundsTransform()(&v34);

    double a = v34.a;
    CGFloat b = v34.b;
    CGFloat c = v34.c;
    double d = v34.d;
    tCGFloat x = v34.tx;
    tCGFloat y = v34.ty;
  }
  else
  {
    tCGFloat y = 0.0;
    tCGFloat x = 0.0;
    double d = 1.0;
    CGFloat c = 0.0;
    CGFloat b = 0.0;
    double a = 1.0;
  }
  id v11 = objc_msgSend(v1, sel_window);
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = objc_msgSend(v11, sel_screen);

    objc_msgSend(v13, sel_scale);
    double v3 = v14;
  }
  uint64_t v15 = (void *)MEMORY[0x263F8EED0];
  uint64_t v16 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x88))();
  double v17 = 1.0;
  if (v16)
  {
    uint64_t v18 = v16;
    uint64_t v19 = (void *)(*(uint64_t (**)(void))((*v15 & *v16) + 0x308))();

    if (v19)
    {
      objc_msgSend(v19, sel_zoomScale);
      double v17 = v20;
    }
  }
  v35.origin.CGFloat x = CanvasElementView.modelFrame.getter();
  v33.double a = a;
  v33.CGFloat b = b;
  v33.CGFloat c = c;
  v33.double d = d;
  v33.tCGFloat x = tx;
  v33.tCGFloat y = ty;
  CGRect v36 = CGRectApplyAffineTransform(v35, &v33);
  v37.origin.CGFloat x = CGRect.rounded(scale:)(v3 * v17, v36.origin.x, v36.origin.y, v36.size.width, v36.size.height);
  CGFloat x = v37.origin.x;
  CGFloat y = v37.origin.y;
  CGFloat width = v37.size.width;
  CGFloat height = v37.size.height;
  double MinX = CGRectGetMinX(v37);
  v38.origin.CGFloat x = x;
  v38.origin.CGFloat y = y;
  v38.size.CGFloat width = width;
  v38.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v38);
  v39.origin.CGFloat x = x;
  v39.origin.CGFloat y = y;
  v39.size.CGFloat width = width;
  v39.size.CGFloat height = height;
  double v27 = CGRectGetWidth(v39);
  v40.origin.CGFloat x = x;
  v40.origin.CGFloat y = y;
  v40.size.CGFloat width = width;
  v40.size.CGFloat height = height;
  double v28 = CGRectGetHeight(v40);
  if (CGRect.isFinite.getter(MinX, MinY, v27, v28))
  {
    objc_msgSend(v1, sel_setFrame_, MinX, MinY, v27, v28);
    objc_msgSend(v1, sel_setNeedsLayout);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)logger);
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_20C2D7000, v30, v31, "Shape has non finite frame.", v32, 2u);
      MEMORY[0x210550270](v32, -1, -1);
    }
  }
}

uint64_t CanvasElementView.canvasElement.getter@<X0>(uint64_t a1@<X8>)
{
  double v3 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Capsule();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t (*CanvasElementView.canvasElement.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

uint64_t CanvasElementView.snapshotCanvasElement.getter@<X0>(uint64_t a1@<X8>)
{
  double v3 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x388);
  swift_beginAccess();
  type metadata accessor for Capsule();
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

BOOL CanvasElementView.isSelectable.getter()
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x263F8EED0] & *v0) + 0x200))(&v2);
  return (v2 & 2) == 0;
}

uint64_t CanvasElementView.tapGestureRecognizer.setter(uint64_t a1)
{
  *(void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x390)) = a1;
  return MEMORY[0x270F9A758]();
}

uint64_t CanvasElementView.dragGestureRecognizer.setter(uint64_t a1)
{
  *(void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x398)) = a1;
  return MEMORY[0x270F9A758]();
}

uint64_t CanvasElementView.contextMenuInteraction.setter(uint64_t a1)
{
  *(void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x3A0)) = a1;
  return MEMORY[0x270F9A758]();
}

Swift::Void __swiftcall CanvasElementView.tapped(_:)(UITapGestureRecognizer *a1)
{
  [(UITapGestureRecognizer *)a1 locationInView:v1];
  unint64_t v4 = v3;
  unint64_t v6 = v5;
  v7.value.Swift::Int rawValue = (Swift::Int)[(UITapGestureRecognizer *)a1 modifierFlags];
  v7.Swift::Bool is_nil = 0;
  CanvasElementView.tapped(location:modifierFlags:allowShowingEditMenu:)((CGPoint)__PAIR128__(v6, v4), v7, 1);
}

uint64_t CanvasElementView.uneditedCanvasElement.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Capsule();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v9 - v5;
  CanvasElementView.snapshotCanvasElement.getter((uint64_t)&v9 - v5);
  uint64_t v7 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v2) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v6, v2);
  }
  CanvasElementView.canvasElement.getter(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t CanvasElementView._uneditedModelHitTestPath.setter(uint64_t a1)
{
  *(void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x3A8)) = a1;
  return MEMORY[0x270F9A758]();
}

Swift::Void __swiftcall CanvasElementView.commitWithoutStateChange()()
{
  uint64_t v1 = *MEMORY[0x263F8EED0] & *v0;
  uint64_t v2 = *(void *)(v1 + 0x368);
  uint64_t v3 = *(void *)(*(void *)(v1 + 0x370) + 16);
  uint64_t v4 = type metadata accessor for Capsule();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = (*(uint64_t (**)(double))(v1 + 136))(v6);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    CanvasElementView.canvasElement.getter((uint64_t)v8);
    unsigned __int8 v12 = 4;
    AnyCanvas.merge<A>(_:from:)((uint64_t)v8, &v12, v2, v3);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

Swift::Void __swiftcall CanvasElementView.dragMoved(_:)(UIPanGestureRecognizer *a1)
{
  void *(*v18)(uint64_t *__return_ptr);
  void *v19;
  char **v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  unint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  unsigned char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  BOOL v67;
  uint64_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  void *v80;
  id v81;
  void *v82;
  id v83;
  char v84;
  void *v85;
  id v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  unsigned char *v91;
  uint64_t v92;
  void (*v93)(uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  UIPanGestureRecognizer *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint64_t v105;
  char v106;
  uint64_t vars8;

  uint64_t i = (uint64_t)v1;
  uint64_t v99 = a1;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v96 = v3;
  uint64_t v97 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v98 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)MEMORY[0x263F8EED0];
  double v17 = (char *)(*(uint64_t (**)(double))((*MEMORY[0x263F8EED0] & *v1) + 0x88))(v13);
  if (v17)
  {
    uint64_t v18 = *(void *(**)(uint64_t *__return_ptr))((*v16 & *(void *)v17) + 0x2C8);
    uint64_t v100 = v17;
    uint64_t v19 = v18(&v101);
    if (v101 == 3)
    {
      (*(void (**)(uint64_t *__return_ptr, void *))((*v16 & *v1) + 0x200))(&v101, v19);
      double v20 = &selRef_strokeUUID;
      if ((v101 & 2) != 0)
      {
        id v25 = v100;
        goto LABEL_13;
      }
      if ([(UIPanGestureRecognizer *)v99 state] != (id)1)
      {
        id v25 = v100;
        goto LABEL_13;
      }
      uint64_t v92 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
      id v21 = *(void *)&v100[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
      if (!v21) {
        goto LABEL_77;
      }
      uint64_t v22 = (uint64_t *)(v21 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
      uint64_t v23 = v22[1];
      unint64_t v94 = *v22;
      unint64_t v95 = v23;
      unint64_t v93 = *(void (**)(uint64_t))((*v16 & *(void *)i) + 0xE8);
      swift_bridgeObjectRetain();
      double v24 = swift_bridgeObjectRetain();
      v93(v24);
      SharedTagged_9.tag.getter();
      uint64_t v105 = v101;
      uint64_t v106 = v102;
      MEMORY[0x21054BDF0](v7);
      lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
      WeakTagged_9.init(_:id:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      LOBYTE(v23) = specialized Set.contains(_:)((uint64_t)v15, v94);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v23)
      {
LABEL_7:
        id v25 = v100;
        double v20 = &selRef_strokeUUID;
        goto LABEL_13;
      }
      uint64_t v41 = v92;
      uint64_t v42 = *(void *)&v100[v92];
      if (!v42) {
        goto LABEL_78;
      }
      *(unsigned char *)(v42 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_suppressMiniMenu) = 1;
      if (([(UIPanGestureRecognizer *)v99 modifierFlags] & 0x20000) == 0)
      {
        BOOL v43 = (id)i;
        BOOL v44 = specialized CanvasMembers.init(_:)(v43);
        char v46 = v45;
        uint64_t v48 = v47;
        uint64_t i = v49;

        AnyCanvas.selection.setter(v44, v46, v48, i & 1);
        double v20 = &selRef_strokeUUID;
        id v25 = v100;
        while (1)
        {
LABEL_13:
          double v27 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
          double v28 = *(void **)&v25[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
          if (!v28)
          {
            __break(1u);
            goto LABEL_76;
          }
          uint64_t v29 = v28;
          uint64_t i = (uint64_t)v99;
          id v30 = ((unint64_t)[v99 v20[101]] >> 17) & 1;
          os_log_type_t v31 = v29;
          uint64_t v32 = (id)i;
          specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(v32, (void *)1, v31, v32, v31, v30);

          if (objc_msgSend(v32, sel_state) != (id)3)
          {
            if (objc_msgSend(v32, sel_state) != (id)4) {
              goto LABEL_69;
            }
LABEL_68:
            *((unsigned char *)v31 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis) = 0;
LABEL_69:

            uint64_t v90 = *(void **)&v100[v27];
            if (v90)
            {
              uint64_t v91 = v90;

              v91[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_suppressMiniMenu] = 0;
              return;
            }
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
            goto LABEL_80;
          }
          uint64_t i = v31;
          CGAffineTransform v33 = swift_bridgeObjectRetain();
          CGAffineTransform v34 = specialized Sequence.compactMap<A>(_:)(v33, i);
          swift_bridgeObjectRelease();

          uint64_t v98 = (char *)v27;
          if (v34 >> 62)
          {
            swift_bridgeObjectRetain();
            CGRect v35 = _CocoaArrayWrapper.endIndex.getter();
            if (!v35) {
              goto LABEL_67;
            }
          }
          else
          {
            CGRect v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v35) {
              goto LABEL_67;
            }
          }
          if (v35 >= 1)
          {
            for (uint64_t i = 0; i != v35; ++i)
            {
              if ((v34 & 0xC000000000000001) != 0) {
                CGRect v36 = (void *)MEMORY[0x21054E050](i, v34);
              }
              else {
                CGRect v36 = *(id *)(v34 + 8 * i + 32);
              }
              CGRect v37 = v36;
              CGRect v38 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v36) + 0x2D0))();
              if (v38)
              {
                CGRect v39 = (void *)v38;
                CGRect v40 = *(void *)(v38 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
                swift_retain();

                *(unsigned char *)(v40 + 51) = 1;
                FormTextFieldAnalytics.recordEvent()();

                swift_release();
              }
              else
              {
              }
            }
LABEL_67:
            swift_bridgeObjectRelease_n();
            double v27 = (uint64_t)v98;
            goto LABEL_68;
          }
          __break(1u);
LABEL_73:
          swift_once();
LABEL_40:
          objc_super v62 = v96;
          double v63 = __swift_project_value_buffer(v96, (uint64_t)miniMenuLogger);
          double v64 = v97;
          (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v98, v63, v62);
          uint64_t i = v100;
          double v65 = Logger.logObject.getter();
          double v66 = static os_log_type_t.info.getter();
          double v67 = os_log_type_enabled(v65, v66);
          double v68 = v92;
          if (v67)
          {
            double v69 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)double v69 = 134217984;
            id v70 = *(void *)&v100[v68];
            if (!v70) {
              goto LABEL_82;
            }
            double v71 = *(void *)(*(void *)(v70 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);

            uint64_t v101 = v71;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl(&dword_20C2D7000, v65, v66, "Changing selection to have %ld elements", v69, 0xCu);
            MEMORY[0x210550270](v69, -1, -1);
            double v64 = v97;
          }
          else
          {

            double v65 = i;
          }

          CGFloat v72 = (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v98, v62);
          MEMORY[0x270FA5388](v72);
          *(&v92 - 2) = i;
          AnyCanvas.updateCanvasState(_:)();
          if ((objc_msgSend((id)i, sel_isFirstResponder) & 1) == 0)
          {
            double v73 = *(void **)&v100[v68];
            if (!v73) {
              goto LABEL_83;
            }
            CGFloat v74 = v73;
            double v75 = swift_bridgeObjectRetain();
            CGFloat v76 = specialized Sequence.compactMap<A>(_:)(v75, (uint64_t)v74);

            swift_bridgeObjectRelease();
            if (v76 >> 62)
            {
              swift_bridgeObjectRetain();
              double v77 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              double v77 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            os_log_type_t v31 = (void *)MEMORY[0x263F8EED0];
            swift_bridgeObjectRelease();
            if (v77) {
              break;
            }
          }
LABEL_60:
          unint64_t v85 = *(void **)(i + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
          if (v85)
          {
            unint64_t v86 = v85;
            HandwritingReflowView.updateForNewSelection()();
          }
          (*(void (**)(void))((*v31 & *(void *)i) + 0x3A8))();
          id v25 = v100;
          unint64_t v87 = *(void *)&v100[v68];
          if (!v87) {
            goto LABEL_81;
          }
          unint64_t v88 = (void *)(v87 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
          double v20 = &selRef_strokeUUID;
          if (!*(void *)(*v88 + 16) && !*(void *)(v88[1] + 16))
          {
            double v20 = &selRef_strokeUUID;
            unint64_t v89 = (void *)(*(uint64_t (**)(void))((*v31 & *(void *)i) + 0x320))();
            objc_msgSend(v89, sel__clearSelectionIfNecessary);

            id v25 = v100;
          }
        }
        CGFloat v78 = (id)i;
        uint64_t v79 = objc_msgSend(v78, sel_window);
        if (v79)
        {
          unint64_t v80 = v79;
          unint64_t v81 = objc_msgSend(self, sel_activeToolPickerForWindow_, v79);
          if (v81)
          {
            uint64_t v82 = v81;
            uint64_t v83 = objc_msgSend(v81, sel__visibilityUpdatesEnabled);
            objc_msgSend(v82, sel__setVisibilityUpdatesEnabled_, 0);
            objc_msgSend(v78, sel_becomeFirstResponder);
            objc_msgSend(v82, sel__setVisibilityUpdatesEnabled_, v83);

            CGFloat v78 = v82;
            os_log_type_t v31 = (void *)MEMORY[0x263F8EED0];
LABEL_59:

            goto LABEL_60;
          }
        }
        objc_msgSend(v78, sel_becomeFirstResponder, v92);
        goto LABEL_59;
      }
      uint64_t v50 = *(unsigned char **)&v100[v41];
      if (!v50) {
        goto LABEL_79;
      }
      uint64_t v51 = *(void *)&v50[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
      uint64_t v52 = *(void *)&v50[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
      unint64_t v53 = *(void *)&v50[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
      unint64_t v54 = v50[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
      uint64_t v101 = v51;
      int64_t v102 = v52;
      id v103 = v53;
      id v104 = v54;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v55 = v50;
      CanvasMembers.insert(_:)((void *)i);
      CanvasElementResizeView.selection.setter(v101, v102, v103, v104);

      id v56 = *(void *)&v100[v41];
      os_log_type_t v31 = (void *)MEMORY[0x263F8EED0];
      if (v56)
      {
        unint64_t v57 = v56 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
        id v58 = *(void *)v57;
        uint64_t v59 = *(void *)(v57 + 8);
        objc_super v60 = *(void *)(v57 + 16);
        char v61 = *(unsigned char *)(v57 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (specialized static Set.== infix(_:_:)(v51, v58))
        {
          uint64_t i = specialized static Set.== infix(_:_:)(v52, v59);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (i)
          {
            if (v54)
            {
              if (v61) {
                goto LABEL_7;
              }
            }
            else
            {
              if (v53 == v60) {
                uint64_t v84 = v61;
              }
              else {
                uint64_t v84 = 1;
              }
              if ((v84 & 1) == 0) {
                goto LABEL_7;
              }
            }
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (one-time initialization token for miniMenuLogger != -1) {
          goto LABEL_73;
        }
        goto LABEL_40;
      }
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:

      __break(1u);
LABEL_83:
      __break(1u);
    }
    else
    {
      uint64_t v26 = v100;
    }
  }
}

Swift::Void __swiftcall CanvasElementView.updateGestures()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) != 0
    || (uint64_t v3 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) != 0
    && (uint64_t v4 = (void *)v3, v5 = AnyCanvasElementView.isEditingCanvasElement.getter(), v4, (v5 & 1) != 0))
  {
    if (((*(uint64_t (**)(void))((*v2 & *v1) + 0x3E0))() & 1) != 0
      && !*(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x390)))
    {
      v49[0] = v1;
      id v24 = objc_allocWithZone(MEMORY[0x263F82CB0]);
      type metadata accessor for CanvasElementView();
      id v25 = objc_msgSend(v24, sel_initWithTarget_action_, _bridgeAnythingToObjectiveC<A>(_:)(), sel_tapped_);
      swift_unknownObjectRelease();
      uint64_t v26 = *(void *)((*v2 & *v1) + 0x390);
      double v27 = *(void **)((char *)v1 + v26);
      *(void *)((char *)v1 + v26) = v25;

      double v28 = *(void **)((char *)v1 + *(void *)((*v2 & *v1) + 0x390));
      if (v28) {
        objc_msgSend(v28, sel_setDelegate_, v1);
      }
      v49[3] = &type metadata for PencilAndPaperFeatureFlags;
      v49[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
      LOBYTE(v49[0]) = 0;
      char v29 = isFeatureEnabled(_:)();
      uint64_t v30 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      if (v29)
      {
        if (!*(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x390)))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        objc_msgSend(v1, sel_addGestureRecognizer_);
        os_log_type_t v31 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
        if (v31)
        {

          if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) == 0)
          {
            char v32 = (*(uint64_t (**)(void))((*v2 & *v1) + 0x308))();
            CGAffineTransform v33 = (objc_class *)type metadata accessor for PrecisePanGestureRecognizer();
            CGAffineTransform v34 = objc_allocWithZone(v33);
            *(void *)&v34[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
            v34[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
            swift_unknownObjectWeakInit();
            *(void *)&v34[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
            *(void *)&v34[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
            v48.receiver = v34;
            v48.super_class = v33;
            CGRect v35 = v1;
            CGRect v36 = objc_msgSendSuper2(&v48, sel_initWithTarget_action_, 0, 0);
            v36[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = v32 & 1;
            swift_unknownObjectWeakAssign();

            uint64_t v37 = *(void *)((*v2 & *v35) + 0x398);
            CGRect v38 = *(void **)((char *)v35 + v37);
            *(void *)((char *)v35 + v37) = v36;

            uint64_t v39 = *v2 & *v35;
            CGRect v40 = *(void **)((char *)v35 + *(void *)(v39 + 0x398));
            if (v40)
            {
              objc_msgSend(v40, sel_setDelegate_, v35);
              uint64_t v39 = *v2 & *v35;
            }
            uint64_t v41 = *(void **)((char *)v35 + *(void *)(v39 + 920));
            if (v41)
            {
              objc_msgSend(v41, sel_addTarget_action_, v35, sel_dragMoved_);
              uint64_t v39 = *v2 & *v35;
            }
            if (!*(void *)((char *)v35 + *(void *)(v39 + 920))) {
              goto LABEL_43;
            }
            objc_msgSend(v35, sel_addGestureRecognizer_);
          }
        }
      }
      else
      {
        uint64_t v42 = (void *)(*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0x88))(v30);
        if (v42)
        {
          BOOL v43 = v42;
          BOOL v44 = (void *)(*(uint64_t (**)(void))((*v2 & *v42) + 0x320))();

          if (v44)
          {
            id v45 = objc_msgSend(v44, sel_canvasView);

            if (v45)
            {
              id v46 = objc_msgSend(v45, sel_drawingGestureRecognizer);

              id v47 = objc_msgSend(v46, sel_view);
              if (v47)
              {
                if (!*(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x390)))
                {
LABEL_44:
                  __break(1u);
                  return;
                }
                objc_msgSend(v47, sel_addGestureRecognizer_);
              }
            }
          }
        }
      }
      goto LABEL_15;
    }
    if ((*(uint64_t (**)(void))((*v2 & *v1) + 0x3E0))()) {
      goto LABEL_15;
    }
    int v6 = 1;
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = *v2 & *v1;
  uint64_t v8 = *(void **)((char *)v1 + *(void *)(v7 + 0x390));
  if (v8)
  {
    id v9 = v8;
    objc_msgSend(v1, sel_removeGestureRecognizer_, v9);
    uint64_t v10 = *(void *)((*v2 & *v1) + 0x390);
    uint64_t v11 = *(void **)((char *)v1 + v10);
    *(void *)((char *)v1 + v10) = 0;

    uint64_t v7 = *v2 & *v1;
  }
  uint64_t v12 = *(void **)((char *)v1 + *(void *)(v7 + 920));
  if (!v12)
  {
    if (!v6) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  id v13 = v12;
  objc_msgSend(v1, sel_removeGestureRecognizer_, v13);
  uint64_t v14 = *(void *)((*v2 & *v1) + 0x398);
  uint64_t v15 = *(void **)((char *)v1 + v14);
  *(void *)((char *)v1 + v14) = 0;

  if (v6)
  {
LABEL_15:
    uint64_t v16 = *(uint64_t (**)(void))((*v2 & *v1) + 0x3E8);
    if ((v16() & 1) == 0 || *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x3A0)))
    {
      if (v16()) {
        return;
      }
      goto LABEL_18;
    }
    id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82628]), sel_initWithDelegate_, v1);
    uint64_t v22 = *(void *)((*v2 & *v1) + 0x3A0);
    uint64_t v23 = *(void **)((char *)v1 + v22);
    *(void *)((char *)v1 + v22) = v21;

    if (*(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x3A0)))
    {
      objc_msgSend(v1, sel_addInteraction_);
      return;
    }
    __break(1u);
    goto LABEL_42;
  }
LABEL_18:
  double v17 = *(void **)((char *)v1 + *(void *)((*v2 & *v1) + 0x3A0));
  if (v17)
  {
    id v18 = v17;
    objc_msgSend(v1, sel_removeInteraction_, v18);
    uint64_t v19 = *(void *)((*v2 & *v1) + 0x3A0);
    double v20 = *(void **)((char *)v1 + v19);
    *(void *)((char *)v1 + v19) = 0;
  }
}

Swift::String_optional __swiftcall CanvasElementView.accessibilityDescription()()
{
  uint64_t v0 = specialized CanvasElementView.accessibilityDescriptionForAttribute(_:)(2);
  uint64_t v2 = v1;
  uint64_t v3 = specialized CanvasElementView.accessibilityDescriptionForAttribute(_:)(1);
  char v5 = v4;
  uint64_t v6 = specialized CanvasElementView.accessibilityDescriptionForAttribute(_:)(0);
  uint64_t v8 = v7;
  v9._uint64_t countAndFlagsBits = 8236;
  v9._uint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = v3;
  v10._uint64_t object = v5;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 8236;
  v11._uint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = v6;
  v12._uint64_t object = v8;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = v0;
  uint64_t v14 = v2;
  result.value._uint64_t object = v14;
  result.value._uint64_t countAndFlagsBits = v13;
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (_s10Foundation4UUIDVACSHAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]), uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    Swift::String v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      _s10Foundation4UUIDVACSHAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16) {
    && (lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>), uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  }
  {
    char v15 = ~v8;
    uint64_t v16 = a2;
    uint64_t v11 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    Swift::String v12 = *(void *)(v4 + 72);
    do
    {
      v11(v6, *(void *)(v16 + 48) + v12 * v9, v3);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
      uint64_t v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if (v13) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v15;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    uint64_t v13 = 0;
  }
  return v13 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16) {
    && (lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>), uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  }
  {
    char v15 = ~v8;
    uint64_t v16 = a2;
    uint64_t v11 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    Swift::String v12 = *(void *)(v4 + 72);
    do
    {
      v11(v6, *(void *)(v16 + 48) + v12 * v9, v3);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      uint64_t v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if (v13) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v15;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    uint64_t v13 = 0;
  }
  return v13 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  uint64_t v13;
  void (**v14)(char *, uint64_t);
  char v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v3 = type metadata accessor for CRKeyPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (_s10Foundation4UUIDVACSHAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]), uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    Swift::String v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      _s10Foundation4UUIDVACSHAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t specialized Set.contains(_:)(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v3 = a1;
    char v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (Swift::Int v6 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v7 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v8 = v6 & ~v7,
        uint64_t v9 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }
  type metadata accessor for NSObject();
  id v10 = *(id *)(*(void *)(a2 + 48) + 8 * v8);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v14 = (v8 + 1) & v13;
    if ((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      do
      {
        id v15 = *(id *)(*(void *)(a2 + 48) + 8 * v14);
        char v12 = static NSObject.== infix(_:_:)();

        if (v12) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v13;
      }
      while (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  char v12 = 1;
  return v12 & 1;
}

uint64_t CanvasElementView.sharedCanvasElement.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v4 = type metadata accessor for Capsule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v9 - v6;
  CanvasElementView.canvasElement.getter((uint64_t)&v9 - v6);
  Capsule<>.sharedCanvasElement.getter(v4, *(void *)(v3 + 888), a1);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t CanvasElementView.flags.getter()
{
  uint64_t v1 = (void *)(*MEMORY[0x263F8EED0] & *v0);
  uint64_t v2 = v1[109];
  uint64_t v3 = v1[110];
  uint64_t v4 = type metadata accessor for Capsule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v9 - v6;
  CanvasElementView.canvasElement.getter((uint64_t)v9 - v6);
  v9[0] = v2;
  v9[1] = v3;
  _OWORD v9[2] = v1[111];
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t CanvasElementView.flags.setter()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  swift_beginAccess();
  type metadata accessor for Capsule();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  CanvasElementView.commitWithoutStateChange()();
  return (*(uint64_t (**)(void))((*v1 & *v0) + 0x488))();
}

uint64_t (*CanvasElementView.flags.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  CanvasElementView.flags.getter();
  return CanvasElementView.flags.modify;
}

uint64_t CanvasElementView.flags.modify()
{
  return CanvasElementView.flags.setter();
}

void CanvasElementView.snapshotCanvasElement.didset()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
  if (v1)
  {
    id v2 = (id)v1;
    specialized LiveEditable.didChangeLiveEditing()();
  }
}

void @objc CanvasElementView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized CanvasElementView.init(coder:)();
}

void __swiftcall CanvasElementView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  uint64_t v4 = v3;
  isCGFloat a = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v8 = *MEMORY[0x263F8EED0] & *v3;
  uint64_t v55 = type metadata accessor for CGPathFillRule();
  uint64_t v54 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  id v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v8 + 872);
  uint64_t v12 = *(void *)(v8 + 880);
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v46 - v15;
  if (((*(uint64_t (**)(double, double))(v8 + 192))(x, y) & 1) == 0
    || (BOOL v17 = (objc_class *)type metadata accessor for CanvasElementView(),
        v56.receiver = v3,
        v56.super_class = v17,
        !-[UIView_optional hitTest:withEvent:](&v56, sel_hitTest_withEvent_, isa, x, y)))
  {
    objc_msgSend(v3, sel_bounds);
    double v19 = v18;
    double v21 = v20;
    double v23 = v22;
    double v25 = v24;
    uint64_t v26 = CanvasElementView.canvasElement.getter((uint64_t)v16);
    MEMORY[0x270FA5388](v26);
    *((void *)&v46 - 4) = v11;
    *((void *)&v46 - 3) = v12;
    *((void *)&v46 - 2) = *(void *)(v8 + 888);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    CGFloat v27 = v58;
    CGFloat v51 = v19 - v23 * 0.0;
    CGFloat v50 = v21 - v25 * 0.0;
    v62.origin.double x = v19;
    v62.origin.double y = v21;
    v62.size.CGFloat width = v23;
    CGFloat v48 = v23;
    v62.size.CGFloat height = v25;
    CGFloat v49 = v25;
    double MidX = CGRectGetMidX(v62);
    v63.origin.double x = v19;
    v63.origin.double y = v21;
    v63.size.CGFloat width = v23;
    v63.size.CGFloat height = v25;
    double MidY = CGRectGetMidY(v63);
    CGAffineTransformMakeRotation(&t1, v27);
    long long v47 = *(_OWORD *)&t1.a;
    long long v46 = *(_OWORD *)&t1.c;
    CGFloat v30 = -MidY;
    tdouble x = t1.tx;
    tdouble y = t1.ty;
    CGAffineTransformMakeTranslation(&t1, -MidX, v30);
    CGFloat a = t1.a;
    CGFloat b = t1.b;
    double v53 = y;
    double v52 = x;
    CGFloat c = t1.c;
    CGFloat d = t1.d;
    CGFloat v37 = t1.tx;
    CGFloat v38 = t1.ty;
    *(_OWORD *)&t2.CGFloat a = v47;
    *(_OWORD *)&t2.CGFloat c = v46;
    t2.tdouble x = tx;
    t2.tdouble y = ty;
    CGAffineTransformConcat(&v57, &t1, &t2);
    long long v47 = *(_OWORD *)&v57.a;
    long long v46 = *(_OWORD *)&v57.c;
    CGFloat v39 = v57.tx;
    CGFloat v40 = v57.ty;
    t1.CGFloat a = a;
    t1.CGFloat b = b;
    t1.CGFloat c = c;
    t1.CGFloat d = d;
    t1.tdouble x = v37;
    t1.tdouble y = v38;
    CGAffineTransformInvert(&t2, &t1);
    *(_OWORD *)&t1.CGFloat a = v47;
    *(_OWORD *)&t1.CGFloat c = v46;
    t1.tdouble x = v39;
    t1.tdouble y = v40;
    CGAffineTransformConcat(&v57, &t1, &t2);
    t1.CGFloat a = v48;
    t1.CGFloat b = 0.0;
    t1.CGFloat c = 0.0;
    t1.CGFloat d = v49;
    t1.tdouble x = v51;
    t1.tdouble y = v50;
    CGAffineTransform t2 = v57;
    CGAffineTransformConcat(&v57, &t1, &t2);
    CGAffineTransform t2 = v57;
    v64.origin.double x = 0.0;
    v64.origin.double y = 0.0;
    v64.size.CGFloat width = 1.0;
    v64.size.CGFloat height = 1.0;
    CGPathRef v41 = CGPathCreateWithRect(v64, &t2);
    uint64_t v42 = v54;
    uint64_t v43 = v55;
    (*(void (**)(char *, void, uint64_t))(v54 + 104))(v10, *MEMORY[0x263F00040], v55);
    t1.CGFloat a = 1.0;
    t1.CGFloat b = 0.0;
    t1.CGFloat c = 0.0;
    t1.CGFloat d = 1.0;
    t1.tdouble x = 0.0;
    t1.tdouble y = 0.0;
    char v44 = CGPathRef.contains(_:using:transform:)();

    (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v43);
    if (v44) {
      id v45 = v4;
    }
  }
}

id @objc CanvasElementView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  v16.value.super.isCGFloat a = (Class)a5;
  CanvasElementView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v16);
  uint64_t v13 = v12;

  return v13;
}

void @objc CanvasElementView.tapped(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  id v5 = a1;
  CanvasElementView.tapped(_:)(v4);
}

uint64_t @objc CanvasElementView.gestureRecognizerShouldBegin(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  LOBYTE(a1) = specialized CanvasElementView.gestureRecognizerShouldBegin(_:)();

  return a1 & 1;
}

uint64_t closure #1 in CanvasElementView.modelFrame.setter()
{
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #1 in CanvasElementView.modelCoordinateSpace.setter()
{
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #1 in CanvasElementView.flags.setter()
{
  return Capsule.Ref<>.subscript.setter();
}

void @objc CanvasElementView.dragMoved(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  CanvasElementView.dragMoved(_:)(v4);
}

UIContextMenuConfiguration_optional __swiftcall CanvasElementView.contextMenuInteraction(_:configurationForMenuAtLocation:)(UIContextMenuInteraction _, CGPoint configurationForMenuAtLocation)
{
  double y = configurationForMenuAtLocation.y;
  double x = configurationForMenuAtLocation.x;
  uint64_t v6 = (void *)MEMORY[0x263F8EED0];
  uint64_t v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x88))();
  if (!v7) {
    goto LABEL_6;
  }
  id v9 = v7;
  id v10 = (*(void *(**)(uint64_t *__return_ptr))((*v6 & *v7) + 0x2C8))(&v22);
  if (v22 != 3 || ((*(uint64_t (**)(void *))((*v6 & *v2) + 0x228))(v10) & 1) == 0)
  {

LABEL_6:
    double v21 = 0;
    goto LABEL_7;
  }
  uint64_t v11 = v2;
  uint64_t v12 = specialized CanvasMembers.init(_:)(v11);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  char v18 = v17;

  AnyCanvas.contextMenuInteraction(_:members:configurationForMenuAtLocation:)((uint64_t)_.super.isa, v12, v14, v16, v18 & 1, x, y);
  double v20 = v19;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double v21 = v20;
LABEL_7:
  result.value.super.isCGFloat a = v21;
  result.Swift::Bool is_nil = v8;
  return result;
}

id @objc CanvasElementView.contextMenuInteraction(_:configurationForMenuAtLocation:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  id v9 = a1;
  id v10 = (void *)CanvasElementView.contextMenuInteraction(_:configurationForMenuAtLocation:)((UIContextMenuInteraction)v8, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));

  return v10;
}

void CanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v27 = *(void *)(v12 - 8);
  uint64_t v28 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)MEMORY[0x263F8EED0];
  uint64_t v16 = (objc_class *)type metadata accessor for CanvasElementView();
  v33.receiver = v3;
  v33.super_class = v16;
  id v17 = objc_msgSendSuper2(&v33, sel_contextMenuInteraction_willDisplayMenuForConfiguration_animator_, a1, a2, a3);
  uint64_t v18 = (*(uint64_t (**)(id))((*v15 & *v3) + 0x88))(v17);
  if (v18)
  {
    double v19 = (void *)v18;
    uint64_t v26 = v9;
    uint64_t v20 = *(void *)(v18 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (v20)
    {
      uint64_t v21 = *(void *)(v20 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
      uint64_t v22 = *(void (**)(uint64_t))((*v15 & *v3) + 0xE8);
      swift_bridgeObjectRetain();
      uint64_t v23 = swift_bridgeObjectRetain();
      v22(v23);
      SharedTagged_9.tag.getter();
      uint64_t v29 = v31;
      char v30 = v32;
      MEMORY[0x21054BDF0](v8);
      lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
      WeakTagged_9.init(_:id:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v8);
      char v24 = specialized Set.contains(_:)((uint64_t)v14, v21);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0) {
        AnyCanvas.selectedCanvasElementIds.setter(MEMORY[0x263F8EE78]);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void @objc CanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
}

id CanvasElementView.contextMenuInteraction(_:willEndFor:animator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for CanvasElementView();
  return objc_msgSendSuper2(&v8, sel_contextMenuInteraction_willEndForConfiguration_animator_, a1, a2, a3);
}

void @objc CanvasElementView.contextMenuInteraction(_:willEndFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
}

void @objc CanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id, id, uint64_t))
{
  id v10 = a3;
  id v11 = a4;
  swift_unknownObjectRetain();
  id v12 = a1;
  a6(v10, v11, a5);

  swift_unknownObjectRelease();
}

uint64_t closure #3 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t (*a2)(double))
{
  return a2(15.0) & 1;
}

uint64_t closure #4 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t (*a2)(double))
{
  return a2(-15.0) & 1;
}

uint64_t closure #5 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t (*a2)(double))
{
  return a2(1.1) & 1;
}

uint64_t closure #6 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t (*a2)(double))
{
  return a2(0.9) & 1;
}

id CanvasElementView.isSelected.didset()
{
  char v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x228))();
  uint64_t v2 = *MEMORY[0x263F832A8];
  unint64_t v3 = (unint64_t)objc_msgSend(v0, sel_accessibilityTraits);
  if ((v3 & v2) == v2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v2;
  }
  unint64_t v5 = v4 | v3;
  uint64_t v6 = -1;
  if ((v3 & v2) != 0) {
    uint64_t v6 = ~v2;
  }
  unint64_t v7 = v6 & v3;
  if (v1) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v7;
  }
  return objc_msgSend(v0, sel_setAccessibilityTraits_, v8);
}

void CanvasElementView.__ivar_destroyer()
{
  char v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t v2 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  uint64_t v3 = type metadata accessor for Capsule();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = (char *)v0 + *(void *)((*v1 & *v0) + 0x388);
  uint64_t v5 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  uint64_t v6 = *(void **)((char *)v0 + *(void *)((*v1 & *v0) + 0x3A8));
}

id CanvasElementView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasElementView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc CanvasElementView.__ivar_destroyer(void *a1)
{
  objc_super v2 = (void *)MEMORY[0x263F8EED0];
  uint64_t v3 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  uint64_t v4 = type metadata accessor for Capsule();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = (char *)a1 + *(void *)((*v2 & *a1) + 0x388);
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  unint64_t v7 = *(void **)((char *)a1 + *(void *)((*v2 & *a1) + 0x3A8));
}

uint64_t type metadata accessor for CanvasElementView()
{
  return __swift_instantiateGenericMetadata();
}

void specialized CanvasElementView.snapshotCanvasElement.setter(uint64_t a1)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x388);
  swift_beginAccess();
  type metadata accessor for Capsule();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(v3, a1, v4);
  swift_endAccess();
  CanvasElementView.snapshotCanvasElement.didset();
}

void specialized CanvasElementView.init(coder:)()
{
  char v1 = (void *)MEMORY[0x263F8EED0];
  objc_super v2 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x388);
  uint64_t v3 = type metadata accessor for Capsule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x390)) = 0;
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x398)) = 0;
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x3A0)) = 0;
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x3A8)) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

BOOL specialized CanvasElementView.gestureRecognizerShouldBegin(_:)()
{
  char v1 = (void *)MEMORY[0x263F8EED0];
  objc_super v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
  BOOL result = 0;
  if (v2)
  {
    uint64_t v3 = v2;
    (*(void (**)(uint64_t *__return_ptr))((*v1 & *v2) + 0x2C8))(&v5);

    if ((_BYTE)v5) {
      return 1;
    }
  }
  return result;
}

void sub_20C7BFB00(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  *a3 = (*(double (**)(void))(*(void *)(a2 + a1 - 8) + 32))(*(void *)(a2 + a1 - 24));
}

uint64_t sub_20C7BFB4C(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, double))(*(void *)(a4 + a3 - 8) + 40))(*(void *)(a4 + a3 - 24), *(void *)(a4 + a3 - 8), *a1);
}

uint64_t sub_20C7BFB98()
{
  return 24;
}

__n128 sub_20C7BFBA4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in CanvasElementView.flags.setter()
{
  return closure #1 in CanvasElementView.flags.setter();
}

uint64_t sub_20C7BFBE0()
{
  return 24;
}

__n128 sub_20C7BFBEC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of CapsuleUndoAction?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CanvasElementView.modelCoordinateSpace.setter()
{
  return closure #1 in CanvasElementView.modelCoordinateSpace.setter();
}

uint64_t sub_20C7BFCD0()
{
  return 24;
}

__n128 sub_20C7BFCDC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in CanvasElementView.modelFrame.setter()
{
  return closure #1 in CanvasElementView.modelFrame.setter();
}

uint64_t sub_20C7BFD1C()
{
  return 24;
}

__n128 sub_20C7BFD28(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

CGSize __swiftcall NSItemProvider.preferredSizeForCanvasElement()()
{
  objc_msgSend(v0, sel_preferredPresentationSize);
  if (v2 != 0.0 || (v3 = 0.0, BOOL v4 = v1 == 0.0, v5 = 0.0, !v4))
  {
    objc_msgSend(v0, sel_preferredPresentationSize);
    double v8 = v7;
    if (v7 >= 64.0)
    {
      double v9 = v6;
    }
    else
    {
      if (one-time initialization token for canvasElementDefaultSize != -1) {
        swift_once();
      }
      double v8 = *(double *)&static UIConstants.canvasElementDefaultSize;
      double v9 = *(double *)algn_2676E93F0;
    }
    if (v8 > v9) {
      double v10 = v8;
    }
    else {
      double v10 = v9;
    }
    if (one-time initialization token for maximumDropCanvasElementDimension != -1) {
      swift_once();
    }
    double v11 = fmin(*(double *)&static UIConstants.maximumDropCanvasElementDimension / v10, 1.0);
    double v3 = v8 * v11;
    double v5 = v9 * v11;
  }
  result.CGFloat height = v5;
  result.CGFloat width = v3;
  return result;
}

void __swiftcall CanvasElementResizeView.hitTestMiniMenu(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  BOOL v4 = v3;
  isCGFloat a = with.value.super.isa;
  CGFloat y = _.y;
  CGFloat x = _.x;
  if (objc_msgSend(v4, sel_isHidden)) {
    return;
  }
  if (!*(void *)&v4[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController]) {
    return;
  }
  swift_retain();
  v25.value.super.isCGFloat a = isa;
  v25.Swift::Bool is_nil = (char)v4;
  MiniMenuController.hitTestMenu(_:with:sendingView:)(v9, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v25, v8);
  uint64_t v11 = v10;
  swift_release();
  if (!v11) {
    return;
  }
  id v12 = v4;
  uint64_t v13 = swift_bridgeObjectRetain();
  unint64_t v14 = specialized Sequence.compactMap<A>(_:)(v13, (uint64_t)v12);
  swift_bridgeObjectRelease();

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      goto LABEL_22;
    }
  }
  if ((v14 & 0xC000000000000001) != 0)
  {
    uint64_t v16 = (void *)MEMORY[0x21054E050](0, v14);
  }
  else
  {
    if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_21;
    }
    uint64_t v16 = *(id *)(v14 + 32);
  }
  id v17 = v16;
  uint64_t v18 = swift_bridgeObjectRelease();
  char v19 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v17) + 0x100))(v18);

  if ((v19 & 1) == 0) {
    return;
  }
  uint64_t v20 = v12;
  uint64_t v21 = swift_bridgeObjectRetain();
  unint64_t v15 = specialized Sequence.compactMap<A>(_:)(v21, (uint64_t)v20);
  swift_bridgeObjectRelease();

  if (v15 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_12;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_22;
  }
LABEL_12:
  if ((v15 & 0xC000000000000001) != 0)
  {
    id v22 = (id)MEMORY[0x21054E050](0, v15);
    goto LABEL_15;
  }
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v22 = *(id *)(v15 + 32);
LABEL_15:
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    objc_msgSend(v23, sel_resignFirstResponder);

    return;
  }
  __break(1u);
}

uint64_t protocol witness for MiniMenuControllerDelegate.miniMenuCut() in conformance CanvasElementResizeView()
{
  return CanvasElementResizeView.miniMenuCut()(0);
}

uint64_t protocol witness for MiniMenuControllerDelegate.miniMenuCopy() in conformance CanvasElementResizeView()
{
  return CanvasElementResizeView.miniMenuCut()(1);
}

uint64_t protocol witness for MiniMenuControllerDelegate.miniMenuPaste() in conformance CanvasElementResizeView()
{
  return CanvasElementResizeView.miniMenuCut()(2);
}

uint64_t protocol witness for MiniMenuControllerDelegate.miniMenuDuplicate() in conformance CanvasElementResizeView()
{
  return CanvasElementResizeView.miniMenuCut()(3);
}

uint64_t protocol witness for MiniMenuControllerDelegate.miniMenuDelete() in conformance CanvasElementResizeView()
{
  return CanvasElementResizeView.miniMenuCut()(4);
}

uint64_t protocol witness for MiniMenuControllerDelegate.miniMenuConvertTextToHandwriting() in conformance CanvasElementResizeView()
{
  return CanvasElementResizeView.miniMenuCut()(5);
}

uint64_t CanvasElementResizeView.miniMenuCut()(char a1)
{
  uint64_t result = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (result)
  {
    BOOL v4 = (void *)result;
    uint64_t v5 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    double v7 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
    double v8 = *(const char **)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16);
    char v9 = *(unsigned char *)(v5 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    AnyCanvas.performSelectionAction(_:_:at:)(a1, v6, v7, v8, v9, 0, 0, 1);

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *protocol witness for MiniMenuControllerDelegate.miniMenuRemoveBackground() in conformance CanvasElementResizeView()
{
  uint64_t result = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (result)
  {
    double v2 = result;
    uint64_t v3 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
    uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16);
    uint64_t v7 = *(unsigned __int8 *)(v3 + 24);
    double v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *result) + 0x448);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8(v4, v5, v6, v7);

    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)generativeLogger);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    double v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v8 = 0;
    _os_log_impl(&dword_20C2D7000, v6, v7, "miniMenuRegenerateMagicGenerativePlayground", v8, 2u);
    MEMORY[0x210550270](v8, -1, -1);
  }

  id v9 = objc_msgSend(v1, sel_window);
  if (!v9
    || (uint64_t v10 = v9,
        id v11 = objc_msgSend(self, sel_sharedInstance),
        unsigned __int8 v12 = objc_msgSend(v11, sel_presentGreymatterAvailabilityAlertControllerInWindow_, v10),
        v11,
        v10,
        (v12 & 1) == 0))
  {
    uint64_t v13 = (void *)MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
    if (v13)
    {
      unint64_t v14 = v13;
      uint64_t v15 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v13) + 0x320))();
      if (v15)
      {
        uint64_t v16 = (char *)v15;
        type metadata accessor for TiledTextView();
        if (swift_dynamicCastClass())
        {
          id v17 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
          uint64_t v18 = *(void *)&v17[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
          if (v18)
          {
            id v19 = objc_retain(*(id *)(v18
                                    + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool));

            uint64_t v20 = type metadata accessor for TaskPriority();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v4, 1, 1, v20);
            type metadata accessor for MainActor();
            id v21 = v19;
            id v22 = v14;
            uint64_t v23 = static MainActor.shared.getter();
            uint64_t v24 = (void *)swift_allocObject();
            uint64_t v25 = MEMORY[0x263F8F500];
            v24[2] = v23;
            v24[3] = v25;
            v24[4] = v21;
            v24[5] = v22;
            _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground(), (uint64_t)v24);

            swift_release();
            return;
          }

          unint64_t v14 = v16;
        }
        else
        {
          id v17 = v16;
        }

        unint64_t v14 = v17;
      }
    }
    os_log_t v30 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_20C2D7000, v30, v26, "miniMenuRegenerateMagicGenerativePlayground: (returning (canvas/tiledView not set)", v27, 2u);
      MEMORY[0x210550270](v27, -1, -1);
    }
    os_log_t v28 = v30;
  }
}

Swift::Void __swiftcall CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)generativeLogger);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    double v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v8 = 0;
    _os_log_impl(&dword_20C2D7000, v6, v7, "miniMenuGenerateMagicGenerativePlaygroundForSelection", v8, 2u);
    MEMORY[0x210550270](v8, -1, -1);
  }

  id v9 = objc_msgSend(v1, sel_window);
  if (!v9
    || (uint64_t v10 = v9,
        id v11 = objc_msgSend(self, sel_sharedInstance),
        unsigned __int8 v12 = objc_msgSend(v11, sel_presentGreymatterAvailabilityAlertControllerInWindow_, v10),
        v11,
        v10,
        (v12 & 1) == 0))
  {
    uint64_t v13 = (void *)MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
    if (v13)
    {
      unint64_t v14 = v13;
      uint64_t v15 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v13) + 0x320))();
      if (v15)
      {
        uint64_t v16 = (char *)v15;
        type metadata accessor for TiledTextView();
        if (swift_dynamicCastClass())
        {
          id v17 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
          uint64_t v18 = *(void *)&v17[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
          if (v18)
          {
            id v19 = objc_retain(*(id *)(v18
                                    + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool));

            uint64_t v20 = type metadata accessor for TaskPriority();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v4, 1, 1, v20);
            type metadata accessor for MainActor();
            id v21 = v19;
            id v22 = v1;
            id v23 = v14;
            uint64_t v24 = static MainActor.shared.getter();
            uint64_t v25 = (void *)swift_allocObject();
            uint64_t v26 = MEMORY[0x263F8F500];
            void v25[2] = v24;
            void v25[3] = v26;
            void v25[4] = v21;
            v25[5] = v22;
            v25[6] = v23;
            _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection(), (uint64_t)v25);

            swift_release();
            return;
          }

          unint64_t v14 = v16;
        }
        else
        {
          id v17 = v16;
        }

        unint64_t v14 = v17;
      }
    }
    os_log_t v31 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v27))
    {
      os_log_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_t v28 = 0;
      _os_log_impl(&dword_20C2D7000, v31, v27, "miniMenuGenerateMagicGenerativePlaygroundForSelection: (returning (canvas/tiledView not set)", v28, 2u);
      MEMORY[0x210550270](v28, -1, -1);
    }
    os_log_t v29 = v31;
  }
}

void CanvasElementResizeView.miniMenuSendFeedback(action:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  os_log_type_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  unsigned __int8 v12 = __swift_project_value_buffer(v11, (uint64_t)generativeLogger);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    os_log_t v40 = v12;
    uint64_t v16 = v10;
    id v17 = v7;
    uint64_t v18 = v4;
    uint64_t v19 = v5;
    uint64_t v20 = a1;
    id v21 = v15;
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_20C2D7000, v13, v14, "miniMenuSendFeedback", v15, 2u);
    id v22 = v21;
    a1 = v20;
    uint64_t v5 = v19;
    uint64_t v4 = v18;
    os_log_type_t v7 = v17;
    uint64_t v10 = v16;
    MEMORY[0x210550270](v22, -1, -1);
  }

  id v23 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v23) + 0x320))();
    if (v25)
    {
      uint64_t v26 = (char *)v25;
      type metadata accessor for TiledTextView();
      if (swift_dynamicCastClass())
      {
        os_log_type_t v27 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
        uint64_t v28 = *(void *)&v27[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
        if (v28)
        {
          id v29 = *(id *)(v28 + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool);

          uint64_t v30 = type metadata accessor for TaskPriority();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v10, 1, 1, v30);
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
          type metadata accessor for MainActor();
          id v31 = v29;
          uint64_t v32 = static MainActor.shared.getter();
          unint64_t v33 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
          CGAffineTransform v34 = (char *)swift_allocObject();
          uint64_t v35 = MEMORY[0x263F8F500];
          *((void *)v34 + 2) = v32;
          *((void *)v34 + 3) = v35;
          *((void *)v34 + 4) = v31;
          (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v34[v33], v7, v4);
          _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasElementResizeView.miniMenuSendFeedback(action:), (uint64_t)v34);

          swift_release();
          return;
        }

        uint64_t v24 = v26;
      }
      else
      {
        os_log_type_t v27 = v26;
      }

      uint64_t v24 = v27;
    }
  }
  os_log_t v40 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v36))
  {
    CGFloat v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)CGFloat v37 = 0;
    _os_log_impl(&dword_20C2D7000, v40, v36, "miniMenuSendFeedback: (returning (canvas/tiledView not set)", v37, 2u);
    MEMORY[0x210550270](v37, -1, -1);
  }
  os_log_t v38 = v40;
}

void *protocol witness for MiniMenuControllerDelegate.miniMenuDebug() in conformance CanvasElementResizeView()
{
  uint64_t result = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
    uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16);
    uint64_t v7 = *(unsigned __int8 *)(v3 + 24);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *result) + 0x450);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8(v4, v5, v6, v7);

    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

void protocol witness for MiniMenuControllerDelegate.miniMenuDebugReadOnly() in conformance CanvasElementResizeView()
{
}

void protocol witness for MiniMenuControllerDelegate.miniMenuDebugSetSyntheticStrokes() in conformance CanvasElementResizeView()
{
}

void CanvasElementResizeView.miniMenuDebugReadOnly()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v13 = a1;
    uint64_t v7 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    uint64_t v8 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    uint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
    uint64_t v10 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16);
    uint64_t v11 = *(unsigned __int8 *)(v7 + 24);
    unsigned __int8 v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v5)
                                                                                        + 0x458);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(&v13, a2, v8, v9, v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void *CanvasElementResizeView.viewControllerForPresentingMiniMenu.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas;
  uint64_t v2 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (!v2
    || (uint64_t v3 = (void *)v2,
        uint64_t v4 = (void **)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI),
        swift_beginAccess(),
        uint64_t v5 = *v4,
        id v6 = v5,
        v3,
        !v5))
  {
    uint64_t v7 = (void *)MEMORY[0x210550400](v1);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x620))();
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

char *CanvasElementResizeView.viewForContainingMiniMenu.getter()
{
  uint64_t v1 = MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (!v1) {
    return v0;
  }
  uint64_t v2 = (void *)v1;
  uint64_t v3 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI);
  swift_beginAccess();
  id v4 = *v3;
  id v5 = *v3;

  if (!v4) {
    return v0;
  }
  id v6 = objc_msgSend(v5, sel_viewForOverlay);

  return (char *)v6;
}

uint64_t CanvasElementResizeView.shouldShowMiniMenu.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    if ((*(void *)(*(void *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16)
       || (uint64_t v4 = *(void *)(CanvasElementResizeView.resizingStrokes.getter() + 16), swift_bridgeObjectRelease(), v4))
      && !*(void *)(v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle))
    {
      char v5 = AnyCanvas.isEditingTextBox.getter();

      if ((v5 & 1) == 0)
      {
        char v6 = *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_suppressMiniMenu) ^ 1;
        return v6 & 1;
      }
    }
    else
    {
    }
  }
  char v6 = 0;
  return v6 & 1;
}

double CanvasElementResizeView.miniMenuAttachedBounds.getter()
{
  CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace.getter(v20);
  long long v15 = v20[1];
  long long v16 = v20[0];
  CGFloat v1 = v21;
  CGFloat v2 = v22;
  ResizeView.modelToViewTransform.getter((long long *)&v23);
  *(_OWORD *)&t1.CGFloat a = v16;
  *(_OWORD *)&t1.CGFloat c = v15;
  t1.tdouble x = v1;
  t1.tdouble y = v2;
  CGAffineTransform t2 = v23;
  CGAffineTransformConcat(&v17, &t1, &t2);
  CGAffineTransform t1 = v17;
  v24.origin.double x = 0.0;
  v24.origin.double y = 0.0;
  v24.size.double width = 1.0;
  v24.size.double height = 1.0;
  CGRect v25 = CGRectApplyAffineTransform(v24, &t1);
  double x = v25.origin.x;
  double y = v25.origin.y;
  double width = v25.size.width;
  double height = v25.size.height;
  uint64_t v7 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = (id *)(v7 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI);
    swift_beginAccess();
    id v10 = *v9;
    id v11 = *v9;

    if (v10)
    {
      id v12 = objc_msgSend(v11, sel_viewForOverlay);
      objc_msgSend(v12, sel_convertRect_fromCoordinateSpace_, v0, x, y, width, height);
      double x = v13;
    }
  }
  return x;
}

void CanvasElementResizeView.miniMenuVisibleBounds.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas;
  CGFloat v2 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  uint64_t v3 = (void *)MEMORY[0x263F8EED0];
  if (!v2
    || (uint64_t v4 = v2,
        (*(void (**)(void *__return_ptr))((*MEMORY[0x263F8EED0] & *v2) + 0x340))(v15),
        v4,
        outlined init with take of CGRect?((uint64_t)v15, (uint64_t)&v17),
        (v18 & 1) != 0))
  {
    char v5 = (void *)MEMORY[0x210550400](v1);
    if (v5)
    {
      char v6 = v5;
      CGFloat v7 = (*(double (**)(void))((*v3 & *v5) + 0x350))();
      CGFloat v9 = v8;
      CGFloat v11 = v10;
      CGFloat v13 = v12;

      ResizeView.modelToViewTransform.getter((long long *)&v16);
      CGAffineTransform v14 = v16;
      v19.origin.double x = v7;
      v19.origin.double y = v9;
      v19.size.double width = v11;
      v19.size.double height = v13;
      CGRectApplyAffineTransform(v19, &v14);
    }
  }
}

Swift::Void __swiftcall CanvasElementResizeView.miniMenuOpenLink()()
{
  uint64_t v1 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (!v1) {
    return;
  }
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  double v10 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v3 = specialized Sequence.compactMap<A>(_:)(v2, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (!(v3 >> 62))
  {
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
    {
LABEL_4:
      if ((v3 & 0xC000000000000001) != 0)
      {
        id v4 = (id)MEMORY[0x21054E050](0, v3);
      }
      else
      {
        if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v4 = *(id *)(v3 + 32);
      }
      char v5 = v4;
      swift_bridgeObjectRelease();
      type metadata accessor for LinkCanvasElementView();
      if (swift_dynamicCastClass())
      {
        CGFloat v9 = LinkCanvasElementView.linkView.getter();
        (*(void (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v9) + 0x88))(0);

        char v6 = v9;
LABEL_18:

        return;
      }

LABEL_17:
      char v6 = (char *)v10;
      goto LABEL_18;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v7 != 1) {
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v8) {
    goto LABEL_4;
  }

  swift_bridgeObjectRelease();
}

uint64_t closure #1 in CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a1;
  v5[3] = type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  uint64_t v7 = (void *)swift_task_alloc();
  v5[5] = v7;
  *uint64_t v7 = v5;
  v7[1] = closure #1 in CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground();
  return CanvasGenerationTool.recreateMagicGenerativePlayground(invocation:canvas:)(3, a5);
}

uint64_t closure #1 in CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground()()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {

    uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v4 = v3;
    char v5 = closure #1 in CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground();
  }
  else
  {
    uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v4 = v6;
    char v5 = closure #1 in CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground();
  }
  return MEMORY[0x270FA2498](v5, v2, v4);
}

{
  void *v0;
  uint64_t v1;
  BOOL *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[6];
  uint64_t v2 = (BOOL *)v0[2];
  swift_release();
  void *v2 = v1 != 0;
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  void v6[5] = a6;
  _OWORD v6[2] = a1;
  v6[3] = a4;
  type metadata accessor for MainActor();
  v6[6] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[7] = v8;
  v6[8] = v7;
  return MEMORY[0x270FA2498](closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection(), v8, v7);
}

uint64_t closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection()()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[4] + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  uint64_t v3 = *(void *)v2;
  v0[9] = *(void *)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  v0[10] = v4;
  uint64_t v5 = *(void *)(v2 + 16);
  char v6 = *(unsigned char *)(v2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[11] = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection();
  return CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:)(v3, v4, v5, v6, v1);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
  {

    uint64_t v3 = *(void *)(v2 + 56);
    uint64_t v4 = *(void *)(v2 + 64);
    uint64_t v5 = closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection();
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 56);
    uint64_t v4 = *(void *)(v2 + 64);
    uint64_t v5 = closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection();
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  BOOL *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[12];
  uint64_t v2 = (BOOL *)v0[2];
  swift_release();
  void *v2 = v1 != 0;
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t closure #1 in CanvasElementResizeView.miniMenuSendFeedback(action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = type metadata accessor for MainActor();
  v5[3] = static MainActor.shared.getter();
  uint64_t v7 = (void *)swift_task_alloc();
  v5[4] = v7;
  *uint64_t v7 = v5;
  v7[1] = closure #2 in FeedbackManager.sendFeedback(action:feedbackInput:);
  return CanvasGenerationTool.sendFeedback(action:)(a5);
}

uint64_t sub_20C7C2018()
{
  uint64_t v1 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in CanvasElementResizeView.miniMenuSendFeedback(action:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for FBKSEvaluation.Action() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in CanvasElementResizeView.miniMenuSendFeedback(action:)(a1, v5, v6, v7, v8);
}

uint64_t sub_20C7C21E8()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection()(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_20C7C2300()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground()(a1, v4, v5, v7, v6);
}

uint64_t SignatureTableViewCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentLeadingInset] = 0x403E000000000000;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentEditLeadingInset] = 0x402E000000000000;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentTrailingInset] = 0x403E000000000000;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentVerticalInset] = 0x4024000000000000;
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView;
  id v8 = objc_allocWithZone(MEMORY[0x263F82828]);
  uint64_t v9 = v3;
  *(void *)&v3[v7] = objc_msgSend(v8, sel_init);
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature] = 0;
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewLeadingConstraint] = 0;
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewTrailingConstraint] = 0;

  if (a3)
  {
    uint64_t v10 = (void *)MEMORY[0x21054D080](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  v45.receiver = v9;
  v45.super_class = (Class)type metadata accessor for SignatureTableViewCell();
  uint64_t v11 = (char *)objc_msgSendSuper2(&v45, sel_initWithStyle_reuseIdentifier_, a1, v10);

  uint64_t v12 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView;
  CGFloat v13 = *(void **)&v11[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView];
  CGAffineTransform v14 = v11;
  objc_msgSend(v13, sel_setContentMode_, 4);
  objc_msgSend(v13, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v15 = objc_msgSend(v14, sel_contentView);
  objc_msgSend(v15, sel_addSubview_, v13);

  id v16 = objc_msgSend(*(id *)&v11[v12], sel_leadingAnchor);
  id v17 = objc_msgSend(v14, sel_contentView);
  id v18 = objc_msgSend(v17, sel_leadingAnchor);

  id v19 = objc_msgSend(v16, sel_constraintEqualToAnchor_constant_, v18, 30.0);
  uint64_t v20 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewLeadingConstraint;
  double v21 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewLeadingConstraint];
  *(void *)&v14[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewLeadingConstraint] = v19;

  id v22 = objc_msgSend(*(id *)&v11[v12], sel_trailingAnchor);
  id v23 = objc_msgSend(v14, sel_contentView);
  id v24 = objc_msgSend(v23, sel_trailingAnchor);

  id v25 = objc_msgSend(v22, sel_constraintEqualToAnchor_constant_, v24, -30.0);
  uint64_t v26 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewTrailingConstraint;
  os_log_type_t v27 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewTrailingConstraint];
  *(void *)&v14[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewTrailingConstraint] = v25;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_20C8344C0;
  id v29 = *(void **)&v14[v20];
  if (v29)
  {
    uint64_t v30 = (void *)result;
    *(void *)(result + 32) = v29;
    id v31 = *(void **)&v14[v26];
    if (v31)
    {
      uint64_t v32 = self;
      v30[5] = v31;
      unint64_t v33 = *(void **)&v11[v12];
      id v34 = v29;
      id v35 = v31;
      id v36 = objc_msgSend(v33, sel_topAnchor);
      id v37 = objc_msgSend(v14, sel_contentView);
      id v38 = objc_msgSend(v37, sel_topAnchor);

      id v39 = objc_msgSend(v36, sel_constraintEqualToAnchor_constant_, v38, 10.0);
      v30[6] = v39;
      id v40 = objc_msgSend(*(id *)&v11[v12], sel_bottomAnchor);
      id v41 = objc_msgSend(v14, sel_contentView);
      id v42 = objc_msgSend(v41, sel_bottomAnchor);

      id v43 = objc_msgSend(v40, sel_constraintEqualToAnchor_constant_, v42, -10.0);
      v30[7] = v43;
      specialized Array._endMutation()();
      type metadata accessor for NSLayoutConstraint();
      isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v32, sel_activateConstraints_, isa);

      return (uint64_t)v14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall SignatureTableViewCell.layoutSubviews()()
{
  uint64_t v1 = self;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in SignatureTableViewCell.layoutSubviews();
  *(void *)(v3 + 24) = v2;
  v7[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v7[5] = v3;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed () -> ();
  v7[3] = &block_descriptor_72;
  uint64_t v4 = _Block_copy(v7);
  uint64_t v5 = v0;
  swift_retain();
  swift_release();
  objc_msgSend((id)v1, sel_performWithoutAnimation_, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t v6 = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v5) + 0xE8))(v6);
    swift_release();
  }
}

void closure #1 in SignatureTableViewCell.layoutSubviews()(void *a1)
{
  v3.receiver = a1;
  v3.super_class = (Class)type metadata accessor for SignatureTableViewCell();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  id v2 = objc_msgSend(a1, sel_contentView);
  objc_msgSend(v2, sel_layoutSubviews);
}

Swift::Void __swiftcall SignatureTableViewCell.updateSignature()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView);
  objc_msgSend(v1, sel_bounds);
  if (!CGRectIsEmpty(v11))
  {
    id v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature);
    if (v2)
    {
      id v3 = v2;
      objc_msgSend(v1, sel_bounds);
      v9.value.super.isCGFloat a = 0;
      v9.Swift::Bool is_nil = 0;
      v10.value = 1;
      v10.Swift::Bool is_nil = 0;
      id v7 = (id)SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)((CGSize)__PAIR128__(v6, v5), v9, v10, v4);
    }
    else
    {
      id v7 = 0;
    }
    objc_msgSend(v1, sel_setImage_, v7);
  }
}

id SignatureTableViewCell.__deallocating_deinit()
{
  return SignatureTableViewCell.__deallocating_deinit(type metadata accessor for SignatureTableViewCell);
}

uint64_t type metadata accessor for SignatureTableViewCell()
{
  return self;
}

char *SignatureAndDescriptionTableViewCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionFont;
  id v8 = self;
  uint64_t v9 = *MEMORY[0x263F83588];
  Swift::Int_optional v10 = v3;
  *(void *)&v3[v7] = objc_msgSend(v8, sel_preferredFontForTextStyle_, v9);
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionColor;
  *(void *)&v10[v11] = objc_msgSend(self, sel_secondaryLabelColor);
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionFraction] = 0x3FD49BA5E353F7CFLL;
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionLabel;
  *(void *)&v10[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);

  if (a3)
  {
    CGFloat v13 = (void *)MEMORY[0x21054D080](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    CGFloat v13 = 0;
  }
  v57.receiver = v10;
  v57.super_class = (Class)type metadata accessor for SignatureAndDescriptionTableViewCell();
  CGAffineTransform v14 = (char *)objc_msgSendSuper2(&v57, sel_initWithStyle_reuseIdentifier_, a1, v13);

  uint64_t v15 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView;
  id v16 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView];
  id v17 = v14;
  id v18 = v16;
  if (objc_msgSend(v17, sel_effectiveUserInterfaceLayoutDirection) == (id)1) {
    uint64_t v19 = 8;
  }
  else {
    uint64_t v19 = 7;
  }
  objc_msgSend(v18, sel_setContentMode_, v19);

  uint64_t v20 = OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionLabel;
  double v21 = *(void **)&v17[OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionLabel];
  objc_msgSend(v21, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v21, sel_setFont_, *(void *)&v17[OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionFont]);
  objc_msgSend(v21, sel_setTextColor_, *(void *)&v17[OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionColor]);
  id v22 = v21;
  objc_msgSend(v22, sel_setTextAlignment_, 2 * (objc_msgSend(v17, sel_effectiveUserInterfaceLayoutDirection) != (id)1));

  id v23 = *(void **)&v17[v20];
  objc_msgSend(v23, sel_setNumberOfLines_, 0);
  id v24 = objc_msgSend(v17, sel_contentView);
  objc_msgSend(v24, sel_addSubview_, v23);

  uint64_t result = (char *)objc_msgSend(v17, sel_contentView);
  uint64_t v26 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewTrailingConstraint;
  if (*(void *)&v17[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewTrailingConstraint])
  {
    os_log_type_t v27 = result;
    objc_msgSend(result, sel_removeConstraint_);

    uint64_t v28 = *(void **)&v14[v15];
    id v29 = v17;
    id v30 = objc_msgSend(v28, sel_trailingAnchor);
    id v31 = objc_msgSend(*(id *)&v17[v20], sel_leadingAnchor);
    id v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v31);

    unint64_t v33 = *(void **)&v17[v26];
    *(void *)&v17[v26] = v32;

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t result = (char *)swift_allocObject();
    *((_OWORD *)result + 1) = xmmword_20C835790;
    id v34 = *(void **)&v17[v26];
    if (v34)
    {
      id v35 = result;
      id v56 = self;
      *((void *)v35 + 4) = v34;
      specialized Array._endMutation()();
      type metadata accessor for NSLayoutConstraint();
      id v36 = v34;
      isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v56, sel_activateConstraints_, isa);

      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_20C8344C0;
      id v39 = objc_msgSend(*(id *)&v17[v20], sel_widthAnchor);
      id v40 = objc_msgSend(v29, sel_contentView);
      id v41 = objc_msgSend(v40, sel_widthAnchor);

      id v42 = objc_msgSend(v39, sel_constraintEqualToAnchor_multiplier_, v41, 0.322);
      *(void *)(v38 + 32) = v42;
      id v43 = objc_msgSend(*(id *)&v17[v20], sel_trailingAnchor);
      id v44 = objc_msgSend(v29, sel_contentView);
      id v45 = objc_msgSend(v44, sel_trailingAnchor);

      id v46 = objc_msgSend(v43, sel_constraintEqualToAnchor_constant_, v45, -30.0);
      *(void *)(v38 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v46;
      id v47 = objc_msgSend(*(id *)&v17[v20], sel_topAnchor);
      id v48 = objc_msgSend(v29, (SEL)&_OBJC_LABEL_PROTOCOL___PKDrawingUUID);
      id v49 = objc_msgSend(v48, sel_topAnchor);

      id v50 = objc_msgSend(v47, sel_constraintEqualToAnchor_constant_, v49, 10.0);
      *(void *)(v38 + 48) = v50;
      id v51 = objc_msgSend(*(id *)&v17[v20], sel_bottomAnchor);
      id v52 = objc_msgSend(v29, (SEL)&_OBJC_LABEL_PROTOCOL___PKDrawingUUID);
      id v53 = objc_msgSend(v52, sel_bottomAnchor);

      id v54 = objc_msgSend(v51, sel_constraintEqualToAnchor_constant_, v53, -10.0);
      *(void *)(v38 + 56) = v54;
      specialized Array._endMutation()();
      Class v55 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v56, sel_activateConstraints_, v55);

      return v29;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t @objc SignatureTableViewCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (a4)
  {
    a4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = 0;
  }
  return a5(a3, a4, v8);
}

Swift::Void __swiftcall SignatureAndDescriptionTableViewCell.updateSignature()()
{
  uint64_t v1 = v0;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView);
  objc_msgSend(v2, sel_bounds);
  if (!CGRectIsEmpty(v20))
  {
    id v3 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature);
    if (v3)
    {
      id v4 = v3;
      objc_msgSend(v2, sel_bounds);
      v18.value.super.isCGFloat a = 0;
      v18.Swift::Bool is_nil = 0;
      v19.value = 1;
      v19.Swift::Bool is_nil = 0;
      uint64_t v8 = (void *)SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)((CGSize)__PAIR128__(v7, v6), v18, v19, v5);
    }
    else
    {
      uint64_t v8 = 0;
    }
    objc_msgSend(v2, sel_setImage_, v8);
  }
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionLabel);
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature);
  if (v10)
  {
    uint64_t v11 = (uint64_t *)(v10 + OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription);
    uint64_t v13 = *v11;
    uint64_t countAndFlagsBits = v11[1];
    if ((unint64_t)(countAndFlagsBits - 1) >= 5)
    {
      if (countAndFlagsBits)
      {
        uint64_t object = (void *)v11[1];
        swift_bridgeObjectRetain();
        uint64_t countAndFlagsBits = v13;
      }
      else
      {
        uint64_t object = (void *)0xE000000000000000;
      }
    }
    else
    {
      Swift::String v14 = SignatureDescription.localizedTitle()();
      uint64_t countAndFlagsBits = v14._countAndFlagsBits;
      uint64_t object = v14._object;
    }
    id v16 = (id)MEMORY[0x21054D080](countAndFlagsBits, object);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v16 = 0;
  }
  objc_msgSend(v9, sel_setText_, v16);
}

void SignatureAndDescriptionTableViewCell.__ivar_destroyer()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionLabel);
}

id SignatureAndDescriptionTableViewCell.__deallocating_deinit()
{
  return SignatureTableViewCell.__deallocating_deinit(type metadata accessor for SignatureAndDescriptionTableViewCell);
}

id SignatureTableViewCell.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for SignatureAndDescriptionTableViewCell()
{
  return self;
}

void specialized SignatureTableViewCell.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentLeadingInset] = 0x403E000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentEditLeadingInset] = 0x402E000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentTrailingInset] = 0x403E000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentVerticalInset] = 0x4024000000000000;
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewLeadingConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewTrailingConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized SignatureAndDescriptionTableViewCell.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionFont;
  *(void *)&v0[v1] = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x263F83588]);
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionColor;
  *(void *)&v0[v2] = objc_msgSend(self, sel_secondaryLabelColor);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionFraction] = 0x3FD49BA5E353F7CFLL;
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionLabel;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_20C7C383C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in SignatureTableViewCell.layoutSubviews()()
{
  closure #1 in SignatureTableViewCell.layoutSubviews()(*(void **)(v0 + 16));
}

uint64_t sub_20C7C387C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_72(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_72()
{
  return swift_release();
}

uint64_t ImageRenderer.Context.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

CGImageRef protocol witness for RendererContext.currentImage.getter in conformance ImageRenderer.Context()
{
  return CGBitmapContextCreateImage(*(CGContextRef *)(*(void *)v0 + 32));
}

CGContextRef_optional __swiftcall ImageRenderer.createCGContext()()
{
  uint64_t v1 = 0;
  double v2 = v0[2];
  uint64_t v3 = (*(void *)&v2 >> 52) & 0x7FFLL;
  if (!v3) {
    return (CGContextRef_optional)v1;
  }
  if (v3 == 2047) {
    return (CGContextRef_optional)v1;
  }
  uint64_t v1 = 0;
  double v4 = v0[3];
  uint64_t v5 = (*(void *)&v4 >> 52) & 0x7FFLL;
  if (!v5 || v5 == 2047) {
    return (CGContextRef_optional)v1;
  }
  result.CGContextRef value = CGColorSpaceCreateDeviceRGB();
  double v7 = v0[4];
  double v8 = v2 * v7;
  if (v2 * v7 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  double v9 = v4 * v7;
  if ((*(void *)&v8 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (COERCE_UNSIGNED_INT64(v4 * v7) & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_24;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  CGContextRef value = result.value;
  size_t v12 = (uint64_t)v8;
  if ((uint64_t)v8 < 1 || (uint64_t)v9 <= 0)
  {

    return 0;
  }
  if ((v12 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (!__OFADD__(4 * v12, 64))
  {
    uint64_t v1 = CGBitmapContextCreate(0, v12, (uint64_t)v9, 8uLL, (4 * v12 + 63) & 0xFFFFFFFFFFFFFFC0, result.value, 0x4002u);
    if (v1)
    {
      CGAffineTransformMakeScale(&transform, v7, v7);
      CGContextConcatCTM(v1, &transform);
      v18.origin.double x = 0.0;
      v18.origin.double y = 0.0;
      v18.size.double width = v2;
      v18.size.double height = v4;
      double MinY = CGRectGetMinY(v18);
      v19.origin.double x = 0.0;
      v19.origin.double y = 0.0;
      v19.size.double width = v2;
      v19.size.double height = v4;
      CGFloat MaxY = CGRectGetMaxY(v19);
      transform.CGFloat a = 1.0;
      transform.CGFloat b = 0.0;
      transform.CGFloat c = 0.0;
      transform.CGFloat d = 1.0;
      transform.tdouble x = 0.0;
      transform.tdouble y = 0.0;
      t2.CGFloat b = 0.0;
      t2.CGFloat c = 0.0;
      t2.CGFloat a = 1.0;
      *(_OWORD *)&t2.CGFloat d = xmmword_20C8340F0;
      t2.tdouble y = MinY + MaxY;
      CGAffineTransformConcat(&v15, &transform, &t2);
      CGAffineTransform transform = v15;
      CGContextConcatCTM(v1, &transform);
    }

    return (CGContextRef_optional)v1;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t ImageRenderer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ImageRenderer()
{
  return self;
}

uint64_t type metadata accessor for ImageRenderer.Context()
{
  return self;
}

double protocol witness for Renderer.size.getter in conformance ImageRenderer()
{
  return *(double *)(*(void *)v0 + 16);
}

CGContextRef_optional protocol witness for Renderer.createContext(output:) in conformance ImageRenderer@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  result.CGContextRef value = ImageRenderer.createCGContext()().value;
  if (result.value)
  {
    CGContextRef value = result.value;
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v7 = *(void *)(v3 + 24);
    uint64_t v8 = type metadata accessor for ImageRenderer.Context();
    result.CGContextRef value = (CGContextRef)swift_allocObject();
    *((void *)result.value + 2) = v6;
    *((void *)result.value + 3) = v7;
    *((void *)result.value + 4) = value;
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = &protocol witness table for ImageRenderer.Context;
    *(CGContextRef_optional *)a1 = result;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for RendererOutput(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    double v9 = *a2;
    *(void *)a1 = *a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = *a2;
      *(void *)a1 = *a2;
      uint64_t v11 = v10;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void destroy for RendererOutput(void **a1)
{
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    int v5 = *a1;
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v3 = type metadata accessor for URL();
    double v4 = *(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8);
    v4(a1, v3);
  }
}

void **initializeWithCopy for RendererOutput(void **a1, void **a2, uint64_t a3)
{
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    id v9 = v8;
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void **assignWithCopy for RendererOutput(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of RendererOutput((uint64_t)a1);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = *a2;
      *a1 = *a2;
      id v9 = v8;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t outlined destroy of RendererOutput(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RendererOutput();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for RendererOutput()
{
  uint64_t result = type metadata singleton initialization cache for RendererOutput;
  if (!type metadata singleton initialization cache for RendererOutput) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *initializeWithTake for RendererOutput(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for RendererOutput(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of RendererOutput((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for RendererOutput()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t PaperAttachmentTextualContext.title.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PaperAttachmentTextualContext.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PaperAttachmentTextualContext.title.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PaperAttachmentTextualContext.precedingParagraph.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PaperAttachmentTextualContext.precedingParagraph.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PaperAttachmentTextualContext.precedingParagraph.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PaperAttachmentTextualContext.followingParagraph.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PaperAttachmentTextualContext.followingParagraph.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = a2;
  return result;
}

uint64_t (*PaperAttachmentTextualContext.followingParagraph.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

void __swiftcall PaperAttachmentTextualContext.init(title:precedingParagraph:followingParagraph:)(PaperKit::PaperAttachmentTextualContext *__return_ptr retstr, Swift::String title, Swift::String precedingParagraph, Swift::String followingParagraph)
{
  retstr->title = title;
  retstr->precedingParagraph = precedingParagraph;
  retstr->followingParagraph = followingParagraph;
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.liveStreamMessenger.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.liveStreamMessenger.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.liveStreamMessenger.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.participantDetailsDataSource.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.participantDetailsDataSource.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.participantDetailsDidChange()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.showParticipantCursors.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.showParticipantCursors.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.showParticipantCursors.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of PaperKitAttachment.textualContextProvider.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PaperKitAttachment.textualContextProvider.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of PaperKitAttachment.textualContextProvider.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PaperKitAttachment.viewControllerForPresentingUI.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PaperKitAttachment.viewControllerForPresentingUI.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PaperKitAttachment.viewControllerForPresentingUI.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t destroy for PaperAttachmentTextualContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PaperAttachmentTextualContext(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PaperAttachmentTextualContext(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for PaperAttachmentTextualContext(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperAttachmentTextualContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PaperAttachmentTextualContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PaperAttachmentTextualContext()
{
  return &type metadata for PaperAttachmentTextualContext;
}

uint64_t dispatch thunk of PaperAttachmentTextualContextProvider.textualContext(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

void destroy for TextBoxViewAttributes(uint64_t a1)
{
  swift_bridgeObjectRelease();

  unint64_t v2 = *(void **)(a1 + 72);
}

uint64_t initializeWithCopy for TextBoxViewAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void **)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v6 = *(void **)(a2 + 72);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  id v7 = v5;
  id v8 = v6;
  return a1;
}

uint64_t assignWithCopy for TextBoxViewAttributes(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  id v6 = v5;

  uint64_t v7 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v7;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  id v8 = *(void **)(a2 + 72);
  id v9 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v8;
  id v10 = v8;

  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for TextBoxViewAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  id v6 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);

  return a1;
}

uint64_t getEnumTagSinglePayload for TextBoxViewAttributes(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextBoxViewAttributes(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextBoxViewAttributes()
{
  return &type metadata for TextBoxViewAttributes;
}

uint64_t specialized Sequence<>.uniqueElements()(unint64_t a1)
{
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v2 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v2 = MEMORY[0x263F8EE88];
  }
  unint64_t v8 = v2;
  if (!(a1 >> 62))
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_5;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return v2;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    goto LABEL_15;
  }
LABEL_5:
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x21054E050](i, a1);
      }
      else
      {
        uint64_t v6 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      specialized Set._Variant.insert(_:)(&v7, v6);
      swift_release();
    }
    swift_bridgeObjectRelease();
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.uniqueElements()()
{
  void (*v37)(Swift::Int *__return_ptr, char *);
  char *v38;
  uint64_t v39;
  Swift::Int v40;
  Swift::Int v41;
  char *v42;
  uint64_t v43;
  void (*v44)(Swift::Int *__return_ptr, Swift::Int *);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  Swift::Int v55;
  Swift::Int v56;
  Swift::Int v57;
  Swift::Int v58;
  uint64_t v59;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  id v47 = *(void *)(v0 - 8);
  id v48 = v0;
  MEMORY[0x270FA5388](v0);
  id v50 = (char *)&v46 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v53 = (char *)&v46 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>)
      - 8;
  MEMORY[0x270FA5388](v51);
  size_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>);
  uint64_t v14 = v13 - 8;
  MEMORY[0x270FA5388](v13);
  id v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v49 = (char *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>, String>)
               - 8);
  MEMORY[0x270FA5388](v49);
  CGRect v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>, String>.Iterator);
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  id v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = MEMORY[0x263F8EE88];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v54, (uint64_t)v18, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>, String>);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v18, (uint64_t)v16, &demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v16, (uint64_t)v12, &demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v12, v7);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs);
  id v52 = v7;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v23 = *(int *)(v51 + 52);
  id v24 = &v22[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>.Iterator)
                    + 44)];
  *(_OWORD *)id v24 = *(_OWORD *)&v12[v23];
  uint64_t v25 = *(int *)(v14 + 44);
  uint64_t v26 = (uint64_t (**)(Swift::Int *))&v22[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>.Iterator)
                                                           + 36)];
  long long v27 = *(_OWORD *)&v16[v25];
  uint64_t v29 = v48;
  uint64_t v28 = v49;
  *(_OWORD *)uint64_t v26 = v27;
  uint64_t v30 = *((int *)v28 + 13);
  uint64_t v31 = *(int *)(v20 + 52);
  id v54 = v22;
  long long v32 = *(_OWORD *)&v18[v30];
  id v49 = &v22[v31];
  *(_OWORD *)id v49 = v32;
  id v51 = lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs);
  unint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  id v34 = (void (**)(char *, char *, uint64_t))(v47 + 32);
  id v35 = (void (**)(char *))(v47 + 8);
  while (1)
  {
    uint64_t v36 = (uint64_t)v53;
    dispatch thunk of IteratorProtocol.next()();
    id v37 = *(void (**)(Swift::Int *__return_ptr, char *))v24;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v36, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
    if ((*v33)(v4, 1, v29) == 1) {
      break;
    }
    uint64_t v38 = v50;
    (*v34)(v50, v4, v29);
    v37(&v55, v38);
    id v39 = v29;
    id v40 = v55;
    id v41 = v56;
    id v42 = v38;
    id v43 = v39;
    (*v35)(v42);
    objc_super v57 = v40;
    double v58 = v41;
    if ((*v26)(&v57))
    {
      id v44 = *(void (**)(Swift::Int *__return_ptr, Swift::Int *))v49;
      objc_super v57 = v40;
      double v58 = v41;
      v44(&v55, &v57);
      swift_bridgeObjectRelease();
      specialized Set._Variant.insert(_:)(&v57, v55, v56);
    }
    swift_bridgeObjectRelease();
    uint64_t v29 = v43;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v54, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>, String>.Iterator);
  return v59;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  long long v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  long long v30;
  unsigned int (**v31)(char *, uint64_t, uint64_t);
  void (**v32)(char *, char *, uint64_t);
  void (**v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  void (*v36)(uint64_t *__return_ptr, char *);
  int v37;
  char v38;
  void (*v39)(uint64_t *__return_ptr, int *);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  id v42 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  id v44 = (char *)&v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v48 = (char *)&v41 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v47 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>);
  uint64_t v11 = v10 - 8;
  MEMORY[0x270FA5388](v10);
  id v46 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>)
      - 8;
  MEMORY[0x270FA5388](v45);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>)
      - 8;
  MEMORY[0x270FA5388](v43);
  id v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>.Iterator);
  CGRect v18 = v17 - 8;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v53 = MEMORY[0x263F8EE88];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v49, (uint64_t)v16, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>);
  id v41 = v14;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v16, (uint64_t)v14, &demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>);
  uint64_t v21 = (uint64_t)v14;
  id v22 = v46;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v21, (uint64_t)v46, &demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>);
  (*(void (**)(char *, _OWORD *, uint64_t))(v8 + 32))(v47, v22, v7);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs);
  id v47 = (char *)v7;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v23 = *(int *)(v11 + 52);
  id v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>.Iterator);
  uint64_t v25 = *(_OWORD *)((char *)v22 + v23);
  id v46 = &v20[*(int *)(v24 + 44)];
  *(_OWORD *)id v46 = v25;
  uint64_t v26 = *(int *)(v45 + 44);
  long long v27 = &v20[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>.Iterator)
                    + 36)];
  *(_OWORD *)long long v27 = *(_OWORD *)&v41[v26];
  uint64_t v28 = *(int *)(v43 + 52);
  uint64_t v29 = *(int *)(v18 + 52);
  id v49 = v20;
  uint64_t v30 = *(_OWORD *)&v16[v28];
  id v43 = (uint64_t)&v20[v29];
  *(_OWORD *)id v43 = v30;
  id v45 = lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs);
  uint64_t v31 = (unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  long long v32 = (void (**)(char *, char *, uint64_t))(v42 + 32);
  unint64_t v33 = (void (**)(char *, uint64_t))(v42 + 8);
  id v34 = v44;
  while (1)
  {
    id v35 = (uint64_t)v48;
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v36 = *(void (**)(uint64_t *__return_ptr, char *))v46;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v35, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
    if ((*v31)(v4, 1, v0) == 1) {
      break;
    }
    (*v32)(v34, v4, v0);
    v36(&v50, v34);
    id v37 = v50;
    uint64_t v38 = BYTE4(v50);
    (*v33)(v34, v0);
    id v51 = v37;
    id v52 = v38;
    if ((*(uint64_t (**)(int *))v27)(&v51))
    {
      id v39 = *(void (**)(uint64_t *__return_ptr, int *))v43;
      id v51 = v37;
      id v52 = v38;
      v39(&v50, &v51);
      specialized Set._Variant.insert(_:)((float *)&v51, *(float *)&v50);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v49, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>.Iterator);
  return v53;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int (**v23)(char *, uint64_t, uint64_t);
  void (**v24)(char *, char *, uint64_t);
  void (**v25)(char *, uint64_t);
  uint64_t v26;
  void (*v27)(Swift::UInt *__return_ptr, char *);
  Swift::UInt v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  Swift::UInt v36;
  uint64_t v37;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  uint64_t v31 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v34 = (char *)&v30 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, NSTextAlignment>);
  uint64_t v13 = v12 - 8;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, NSTextAlignment>.Iterator);
  uint64_t v17 = v16 - 8;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v37 = MEMORY[0x263F8EE88];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v35, (uint64_t)v15, &demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, NSTextAlignment>);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs);
  unint64_t v33 = v8;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v20 = *(int *)(v13 + 52);
  uint64_t v21 = *(int *)(v17 + 52);
  id v35 = v19;
  id v22 = &v19[v21];
  *(_OWORD *)&v19[v21] = *(_OWORD *)&v15[v20];
  long long v32 = lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs);
  uint64_t v23 = (unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  id v24 = (void (**)(char *, char *, uint64_t))(v31 + 32);
  uint64_t v25 = (void (**)(char *, uint64_t))(v31 + 8);
  uint64_t v26 = (uint64_t)v34;
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    long long v27 = *(void (**)(Swift::UInt *__return_ptr, char *))v22;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v26, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
    if ((*v23)(v5, 1, v0) == 1) {
      break;
    }
    (*v24)(v2, v5, v0);
    v27(&v36, v2);
    uint64_t v28 = v36;
    (*v25)(v2, v0);
    specialized Set._Variant.insert(_:)(&v36, v28);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, &demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, NSTextAlignment>.Iterator);
  return v37;
}

{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  long long v28;
  unsigned int (**v29)(char *, uint64_t, uint64_t);
  void (**v30)(char *, char *, uint64_t);
  void (**v31)(char *, uint64_t);
  uint64_t v32;
  void (*v33)(char *__return_ptr, char *);
  uint64_t v34;
  char v35;
  void (*v36)(char *__return_ptr, char *);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;

  id v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  id v39 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v1 = (char *)&v38 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v43 = (char *)&v38 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v42 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>);
  uint64_t v11 = v10 - 8;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>)
      - 8;
  MEMORY[0x270FA5388](v41);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>)
      - 8;
  MEMORY[0x270FA5388](v40);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRect v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>.Iterator);
  uint64_t v19 = v18 - 8;
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v51 = MEMORY[0x263F8EE88];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v44, (uint64_t)v17, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
  uint64_t v38 = v15;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v17, (uint64_t)v15, &demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v15, (uint64_t)v13, &demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v42, v13, v7);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs);
  id v42 = (char *)v7;
  dispatch thunk of Sequence.makeIterator()();
  id v22 = *(int *)(v11 + 52);
  uint64_t v23 = &v21[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>.Iterator)
                    + 44)];
  *(_OWORD *)uint64_t v23 = *(_OWORD *)&v13[v22];
  id v24 = *(int *)(v41 + 44);
  uint64_t v25 = &v21[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>.Iterator)
                    + 36)];
  *(_OWORD *)uint64_t v25 = *(_OWORD *)&v38[v24];
  uint64_t v26 = *(int *)(v40 + 52);
  long long v27 = *(int *)(v19 + 52);
  id v44 = v21;
  uint64_t v28 = *(_OWORD *)&v17[v26];
  id v40 = (uint64_t)&v21[v27];
  *(_OWORD *)id v40 = v28;
  id v41 = lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs);
  uint64_t v29 = (unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  uint64_t v30 = (void (**)(char *, char *, uint64_t))(v39 + 32);
  uint64_t v31 = (void (**)(char *, uint64_t))(v39 + 8);
  while (1)
  {
    long long v32 = (uint64_t)v43;
    dispatch thunk of IteratorProtocol.next()();
    unint64_t v33 = *(void (**)(char *__return_ptr, char *))v23;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v32, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
    if ((*v29)(v4, 1, v45) == 1) {
      break;
    }
    id v34 = v45;
    (*v30)(v1, v4, v45);
    v33(&v49, v1);
    id v35 = v49;
    (*v31)(v1, v34);
    id v50 = v35;
    if ((*(uint64_t (**)(char *))v25)(&v50))
    {
      uint64_t v36 = *(void (**)(char *__return_ptr, char *))v40;
      id v48 = v35;
      v36(&v47, &v48);
      specialized Set._Variant.insert(_:)(&v46, v47);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v44, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>.Iterator);
  return v51;
}

{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t (**v24)(id *);
  uint64_t v25;
  uint64_t v26;
  long long v27;
  unsigned int (**v28)(char *, uint64_t, uint64_t);
  void (**v29)(char *, char *, uint64_t);
  void (**v30)(char *, uint64_t);
  uint64_t v31;
  void (*v32)(void **__return_ptr, char *);
  uint64_t v33;
  void *v34;
  void (*v35)(void **__return_ptr, id *);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void *v46;
  id v47;
  uint64_t v48;

  id v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  id v39 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v1 = (char *)&v37 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v44 = (char *)&v37 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v38 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v42 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>);
  id v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  size_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>)
      - 8;
  MEMORY[0x270FA5388](v41);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>)
      - 8;
  MEMORY[0x270FA5388](v40);
  id v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>.Iterator);
  CGRect v18 = v17 - 8;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v48 = MEMORY[0x263F8EE88];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v45, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v16, (uint64_t)v14, &demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>);
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v42, v12, v7);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs);
  id v42 = (char *)v7;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v21 = *(int *)(v10 + 52);
  id v22 = &v20[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>.Iterator)
                    + 44)];
  *(_OWORD *)id v22 = *(_OWORD *)&v12[v21];
  uint64_t v23 = *(int *)(v41 + 44);
  id v24 = (uint64_t (**)(id *))&v20[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>.Iterator)
                                                   + 36)];
  *(_OWORD *)id v24 = *(_OWORD *)&v14[v23];
  uint64_t v25 = *(int *)(v40 + 52);
  uint64_t v26 = *(int *)(v18 + 52);
  id v45 = v20;
  long long v27 = *(_OWORD *)&v16[v25];
  id v40 = (uint64_t)&v20[v26];
  *(_OWORD *)id v40 = v27;
  id v41 = lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs);
  uint64_t v28 = (unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  uint64_t v29 = (void (**)(char *, char *, uint64_t))(v39 + 32);
  uint64_t v30 = (void (**)(char *, uint64_t))(v39 + 8);
  while (1)
  {
    uint64_t v31 = (uint64_t)v44;
    dispatch thunk of IteratorProtocol.next()();
    long long v32 = *(void (**)(void **__return_ptr, char *))v22;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v31, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
    unint64_t v33 = v43;
    if ((*v28)(v4, 1, v43) == 1) {
      break;
    }
    (*v29)(v1, v4, v33);
    v32(&v46, v1);
    id v34 = v46;
    (*v30)(v1, v33);
    id v47 = v34;
    if ((*v24)(&v47))
    {
      id v35 = *(void (**)(void **__return_ptr, id *))v40;
      id v47 = v34;
      v35(&v46, &v47);

      specialized Set._Variant.insert(_:)(&v47, v46);
    }
    else
    {
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v45, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>.Iterator);
  return v48;
}

void Array<A>.displayAttributes.getter(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  unint64_t v88 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  uint64_t v92 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v5 = *(CGColor **)(v91 - 8);
  MEMORY[0x270FA5388](v91);
  unint64_t v96 = (void (*)(uint64_t, char *, uint64_t))((char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (uint64_t)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
  MEMORY[0x270FA5388](v10);
  unint64_t v85 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  unint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  CGRect v18 = (char *)&v83 - v17;
  unint64_t v89 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v19 = *(void *)(v89 - 8);
  MEMORY[0x270FA5388](v89);
  uint64_t v84 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  closure #1 in variable initialization expression of TextBoxViewAttributes.fontButtonImage();
  unint64_t v21 = a1;
  uint64_t v86 = v22;
  BOOL v105 = 0;
  char v104 = 1;
  uint64_t v23 = a1 >> 62;
  uint64_t v95 = v21;
  if (v23) {
    goto LABEL_66;
  }
  uint64_t v24 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  unint64_t v87 = a2;
  uint64_t v90 = v10;
  if (!v24)
  {
    uint64_t v29 = MEMORY[0x263F8EE78];
    uint64_t v5 = (CGColor *)MEMORY[0x263F8EE78];
LABEL_29:
    uint64_t v42 = Array<A>.fontName.getter((uint64_t)v5);
    uint64_t v93 = v43;
    swift_bridgeObjectRelease();
    uint64_t v92 = (char *)Array<A>.fontSize.getter((uint64_t)v5);
    BOOL v105 = Array<A>.hasMultipleFontSizes.getter((uint64_t)v5);
    uint64_t v98 = (CGColor *)v29;
    uint64_t v44 = *((void *)v5 + 2);
    if (v44)
    {
      uint64_t v91 = v42;
      id v46 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 16);
      unint64_t v45 = v13 + 16;
      id v47 = (char *)v5 + ((*(unsigned __int8 *)(v45 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 64));
      uint64_t v95 = *(void *)(v45 + 56);
      unint64_t v96 = v46;
      uint64_t v15 = v85;
      uint64_t v94 = v45 - 8;
      swift_bridgeObjectRetain();
      do
      {
        id v48 = v96;
        v96((uint64_t)v18, v47, v12);
        v48(v9, v18, v12);
        v48((uint64_t)v15, (char *)v9, v12);
        id v49 = (id (**)@<X0>(uint64_t *@<X8>))&v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>)
                                                                   + 44)];
        *id v49 = closure #1 in CRAttributedString.Runs<>.fontColors.getter;
        v49[1] = 0;
        id v50 = &v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>)
                          + 36)];
        *(void *)id v50 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
        *((void *)v50 + 1) = 0;
        id v51 = &v15[*(int *)(v90 + 44)];
        *(void *)id v51 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
        *((void *)v51 + 1) = 0;
        outlined destroy of StocksKitCurrencyCache.Provider?(v9, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
        uint64_t v52 = specialized Sequence<>.uniqueElements()();
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
        (*(void (**)(char *, uint64_t))v94)(v18, v12);
        specialized Array.append<A>(contentsOf:)(v52);
        v47 += v95;
        --v44;
      }
      while (v44);
      swift_bridgeObjectRelease();
      uint64_t v29 = (uint64_t)v98;
      uint64_t v42 = v91;
    }
    uint64_t v19 = specialized Set.init<A>(_:)(v29);
    swift_bridgeObjectRelease();
    uint64_t v53 = specialized Set.startIndex.getter(v19);
    uint64_t v9 = (uint64_t)v92;
    unint64_t v13 = v93;
    if (v55)
    {
      __break(1u);
      goto LABEL_73;
    }
    if (*(_DWORD *)(v19 + 36) == v54)
    {
      if (v53 == 1 << *(unsigned char *)(v19 + 32))
      {
        swift_bridgeObjectRelease();
        id v56 = 0;
      }
      else
      {
        specialized Set.subscript.getter(v53, v54, v19, &v98);
        swift_bridgeObjectRelease();
        id v56 = v98;
      }
      uint64_t v57 = Array<A>.textAlignment.getter((uint64_t)v5);
      char v104 = v58 & 1;
      unint64_t v59 = Array<A>.textStyles.getter((uint64_t)v5);
      uint64_t v60 = Array<A>.allowedTextStyles.getter((uint64_t)v5);
      swift_bridgeObjectRelease();
      BOOL v61 = v105;
      char v62 = v104;
    }
    else
    {
      __break(1u);
      while (1)
      {
        __break(1u);
LABEL_69:
        uint64_t v25 = (void *)MEMORY[0x21054E050](0, v19);
LABEL_10:
        uint64_t v26 = v25;
        uint64_t v27 = swift_bridgeObjectRelease();
        (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v26) + 0x90))(v27);
        if (!v28) {
          break;
        }

LABEL_15:
        uint64_t v24 = v94;
LABEL_16:
        uint64_t v98 = (CGColor *)MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24 & ~(v24 >> 63), 0);
        if ((v94 & 0x8000000000000000) == 0)
        {
          uint64_t v83 = v18;
          uint64_t v84 = (char *)v9;
          uint64_t v19 = 0;
          uint64_t v30 = (id *)v95;
          a2 = (uint64_t *)((char *)v5 + 8);
          CGRect v18 = (char *)(v88 + 8);
          unint64_t v88 = v13 + 32;
          unint64_t v89 = v95 & 0xC000000000000001;
          uint64_t v9 = v12;
          while (1)
          {
            uint64_t v31 = v89 ? (CGColor *)MEMORY[0x21054E050](v19) : (CGColor *)v30[v19 + 4];
            uint64_t v5 = v31;
            long long v32 = (void *)MEMORY[0x263F8EED0];
            uint64_t v33 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v31) + 0x88))();
            uint64_t v23 = (*(uint64_t (**)(uint64_t))((*v32 & *(void *)v5) + 0x90))(v33);
            uint64_t v10 = v34;
            if (v23 == NSNotFound.getter()) {
              break;
            }
            if (__OFADD__(v23, v10)) {
              goto LABEL_65;
            }
            uint64_t v35 = v91;
            uint64_t v36 = v92;
            id v37 = (char *)v96;
            CRAttributedString.subscript.getter();
            ((void (*)(char *, uint64_t))*a2)(v37, v35);
            uint64_t v38 = v93;
            CRAttributedString.Substring.runs.getter();
            (*(void (**)(char *, uint64_t))v18)(v36, v38);

            uint64_t v5 = v98;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1);
              uint64_t v5 = v98;
            }
            unint64_t v40 = *((void *)v5 + 2);
            unint64_t v39 = *((void *)v5 + 3);
            if (v40 >= v39 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
              uint64_t v5 = v98;
            }
            ++v19;
            *((void *)v5 + 2) = v40 + 1;
            unint64_t v41 = (unint64_t)v5
                + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
                + *(void *)(v13 + 72) * v40;
            uint64_t v12 = v9;
            (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v41, v15, v9);
            uint64_t v30 = (id *)v95;
            if (v94 == v19)
            {
              uint64_t v9 = (uint64_t)v84;
              CGRect v18 = v83;
              uint64_t v29 = MEMORY[0x263F8EE78];
              goto LABEL_29;
            }
          }
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          uint64_t v83 = (char *)v19;
          swift_bridgeObjectRetain();
          uint64_t v19 = (uint64_t)v83;
          uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          uint64_t v24 = v94;
          goto LABEL_3;
        }
      }
      double v65 = *(void **)((char *)v26 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
      if (v65)
      {
        unint64_t v96 = (void (*)(uint64_t, char *, uint64_t))v26;
        uint64_t v15 = v65;
        id v66 = objc_msgSend(v15, sel_typingAttributes);
        type metadata accessor for NSAttributedStringKey(0);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
        uint64_t v67 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(v67, 0);
        swift_getKeyPath();
        lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
        CRAttributedString.Attributes.subscript.getter();
        swift_release();
        uint64_t v68 = v99;
        if (v99 == 1)
        {
          uint64_t v91 = 0x63697465766C6548;
          unint64_t v13 = 0xE900000000000061;
        }
        else
        {
          uint64_t v70 = v100;
          unint64_t v69 = v101;
          uint64_t v71 = (uint64_t)v98;
          swift_bridgeObjectRetain();
          outlined consume of Font?(v71, v68);
          uint64_t v72 = 0x63697465766C6548;
          if (v69) {
            uint64_t v72 = v70;
          }
          uint64_t v91 = v72;
          if (v69) {
            unint64_t v13 = v69;
          }
          else {
            unint64_t v13 = 0xE900000000000061;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v9 = (uint64_t)CRAttributedString.Attributes<>.fontSize.getter();
        swift_getKeyPath();
        lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
        CRAttributedString.Attributes.subscript.getter();
        swift_release();
        id v56 = v98;
        if (v98) {
          goto LABEL_53;
        }
        if (one-time initialization token for textBoxDefaultTextColor == -1) {
          goto LABEL_52;
        }
        goto LABEL_71;
      }
      uint64_t v42 = 0x63697465766C6548;

      BOOL v61 = 0;
      id v56 = 0;
      uint64_t v57 = 0;
      unint64_t v59 = 0;
      uint64_t v60 = 0;
      char v62 = 1;
      unint64_t v13 = 0xE900000000000061;
      uint64_t v9 = 5;
    }
    uint64_t v63 = v86;
LABEL_40:
    CGRect v64 = v87;
    *unint64_t v87 = v42;
    v64[1] = v13;
    id v64[2] = v9;
    *((unsigned char *)v64 + 24) = v61;
    v64[4] = (uint64_t)v56;
    v64[5] = v57;
    *((unsigned char *)v64 + 48) = v62;
    v64[7] = v59;
    v64[8] = v60;
    v64[9] = v63;
    return;
  }
  uint64_t v94 = v24;
  if (v24 != 1) {
    goto LABEL_16;
  }
  uint64_t v83 = (char *)v19;
  if (v23)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    if (v19) {
      goto LABEL_7;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t v19 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v19) {
    goto LABEL_14;
  }
LABEL_7:
  uint64_t v19 = v95;
  if ((v95 & 0xC000000000000001) != 0) {
    goto LABEL_69;
  }
  if (*(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v25 = *(id *)(v95 + 32);
    goto LABEL_10;
  }
  __break(1u);
LABEL_71:
  swift_once();
LABEL_52:
  id v73 = (id)static UIConstants.textBoxDefaultTextColor;
  Color.init(cgColor:)((CGColor *)objc_msgSend(v73, sel_CGColor), &v97);

  id v56 = v97;
  if (v97)
  {
LABEL_53:
    swift_getKeyPath();
    lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    if ((_BYTE)v99) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = (uint64_t)v98;
    }
    unint64_t v59 = CRAttributedString.Attributes<>.textStyles.getter();
    swift_getKeyPath();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    uint64_t v74 = v99;
    if (v99 == 1)
    {

      uint64_t v60 = 15;
    }
    else
    {
      int v75 = v102;
      uint64_t v76 = v103;
      uint64_t v92 = (char *)v9;
      uint64_t v93 = v13;
      uint64_t v78 = v100;
      unint64_t v77 = v101;
      uint64_t v95 = (uint64_t)v15;
      uint64_t v79 = (uint64_t)v98;
      char v80 = Font.supportsBold.getter();
      uint64_t v81 = 14;
      uint64_t v98 = (CGColor *)v79;
      uint64_t v99 = v74;
      if (v80) {
        uint64_t v81 = 15;
      }
      uint64_t v94 = v81;
      uint64_t v100 = v78;
      unint64_t v101 = v77;
      LODWORD(v102) = v75;
      uint64_t v103 = v76;
      char v82 = Font.supportsItalic.getter();
      uint64_t v9 = (uint64_t)v92;
      unint64_t v13 = v93;
      outlined consume of Font?(v79, v74);

      if (v82) {
        uint64_t v60 = v94;
      }
      else {
        uint64_t v60 = v94 & 0xD;
      }
    }
    uint64_t v63 = v86;
    uint64_t v42 = v91;
    (*((void (**)(char *, unint64_t))v83 + 1))(v84, v89);
    char v62 = 0;
    BOOL v61 = 0;
    goto LABEL_40;
  }
LABEL_73:
  __break(1u);
}

void closure #1 in variable initialization expression of TextBoxViewAttributes.fontButtonImage()
{
  uint64_t v0 = *MEMORY[0x263F83570];
  double v1 = *MEMORY[0x263F81840];
  uint64_t v2 = (void *)*MEMORY[0x263F83470];
  uint64_t v3 = self;
  id v4 = v2;
  id v5 = objc_msgSend(v3, sel_traitCollectionWithPreferredContentSizeCategory_, v4);
  id v6 = objc_msgSend(self, sel__preferredFontForTextStyle_weight_, v0, v1);
  if (!v6)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v7 = v6;
  id v8 = objc_msgSend(v6, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v5);

  if (!v8)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  id v9 = objc_msgSend(self, sel_configurationWithFont_scale_, v8, 2);

  id v10 = v9;
  uint64_t v11 = (void *)MEMORY[0x21054D080](0x6D726F6674786574, 0xEA00000000007461);
  id v12 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v11, v10);

  if (v12)
  {
    objc_msgSend(v12, sel_imageWithRenderingMode_, 2);

    return;
  }
LABEL_7:
  __break(1u);
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(void *a1)
{
  return *a1 != 0;
}

id specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = *a1;
  if (result)
  {
    *a2 = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void one-time initialization function for maximumLinkViewSizeHeightToFit()
{
  maximumLinkViewSizeHeightToFit = 0x4079000000000000;
}

id SynapseLinkView.linkPresentationView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___linkPresentationView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___linkPresentationView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___linkPresentationView);
  }
  else
  {
    id v4 = (objc_class *)MEMORY[0x263F103E0];
    id v5 = objc_retain(*(id *)(*(void *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink)
                           + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem));
    id v6 = (void *)[[v4 alloc] _initWithSynapseContentItem:v5];

    id v7 = v6;
    id v8 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v7;
    id v3 = v7;

    uint64_t v2 = 0;
  }
  id v9 = v2;
  return v3;
}

uint64_t SynapseLinkView.analytics.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___analytics;
  if (*(void *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___analytics))
  {
    initeCGFloat d = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___analytics);
  }
  else
  {
    type metadata accessor for Analytics();
    initeCGFloat d = swift_initStaticObject();
    *(void *)(v0 + v1) = inited;
    swift_release();
  }
  swift_retain();
  return inited;
}

char *SynapseLinkView.init(canvas:synapseItem:)(void *a1, void *a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v5 - 8);
  id v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  id v10 = (char *)&v44 - v9;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___linkPresentationView] = 0;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___analytics] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize;
  uint64_t v12 = one-time initialization token for linkSize;
  unint64_t v13 = v2;
  if (v12 != -1) {
    swift_once();
  }
  *(_OWORD *)&v2[v11] = static UIConstants.linkSize;
  uint64_t v14 = &v13[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewScaleTransform];
  CGAffineTransformMakeScale(&v45, 1.0, 1.0);
  long long v15 = *(_OWORD *)&v45.c;
  long long v16 = *(_OWORD *)&v45.tx;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)&v45.a;
  *((_OWORD *)v14 + 1) = v15;
  *((_OWORD *)v14 + 2) = v16;
  v13[OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___hasUserActivityWithLinkContextInfo] = 2;
  id v17 = objc_allocWithZone((Class)type metadata accessor for SynapseLinkItem());
  id v18 = a2;
  *(void *)&v13[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink] = SynapseLinkItem.init(synapseItem:)(v18);

  uint64_t v19 = (objc_class *)type metadata accessor for SynapseLinkView();
  v44.receiver = v13;
  v44.super_class = v19;
  uint64_t v20 = (char *)objc_msgSendSuper2(&v44, sel_init);
  uint64_t v21 = *(void *)&v20[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink]
      + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  swift_beginAccess();
  *(void *)(v21 + 8) = &protocol witness table for SynapseLinkView;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  uint64_t v22 = v20;
  id v23 = objc_msgSend(v18, sel_itemURL);
  if (v23)
  {
    uint64_t v24 = v23;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v25 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 0, 1, v25);
  }
  else
  {
    uint64_t v25 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 1, 1, v25);
  }
  outlined init with take of URL?((uint64_t)v7, (uint64_t)v10);
  type metadata accessor for URL();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v10, 1, v25) == 1)
  {
    outlined destroy of URL?((uint64_t)v10);
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v28 = URL.absoluteString.getter();
    uint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v25);
    uint64_t v27 = (void *)MEMORY[0x21054D080](v28, v30);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v22, sel_setAccessibilityLabel_, v27);

  objc_msgSend(v22, sel_setClipsToBounds_, 1);
  uint64_t v31 = v22;
  id v32 = SynapseLinkView.linkPresentationView.getter();
  objc_msgSend(v31, sel_addSubview_, v32);

  id v33 = SynapseLinkView.linkPresentationView.getter();
  objc_msgSend(v31, sel_bounds);
  CGFloat x = v46.origin.x;
  CGFloat y = v46.origin.y;
  CGFloat width = v46.size.width;
  CGFloat height = v46.size.height;
  double MidX = CGRectGetMidX(v46);
  v47.origin.CGFloat x = x;
  v47.origin.CGFloat y = y;
  v47.size.CGFloat width = width;
  v47.size.CGFloat height = height;
  objc_msgSend(v33, sel_setFrame_, MidX - *(double *)&v31[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize] * 0.5, CGRectGetMidY(v47) - *(double *)&v31[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize + 8] * 0.5);

  id v39 = SynapseLinkView.linkPresentationView.getter();
  if (SynapseLinkView.hasUserActivityWithLinkContextInfo.getter()) {
    uint64_t v40 = 9;
  }
  else {
    uint64_t v40 = 8;
  }
  objc_msgSend(v39, sel__setPreferredSizeClass_, v40);

  id v41 = SynapseLinkView.linkPresentationView.getter();
  uint64_t v42 = v31;
  objc_msgSend(v41, sel_setDelegate_, v42);

  return v42;
}

Swift::Void __swiftcall SynapseLinkView.layoutSubviews()()
{
  v26.receiver = v0;
  v26.super_class = (Class)type metadata accessor for SynapseLinkView();
  objc_msgSendSuper2(&v26, sel_layoutSubviews);
  id v1 = SynapseLinkView.linkPresentationView.getter();
  v25.CGFloat a = 1.0;
  v25.CGFloat b = 0.0;
  v25.CGFloat c = 0.0;
  v25.CGFloat d = 1.0;
  v25.tCGFloat x = 0.0;
  v25.tCGFloat y = 0.0;
  objc_msgSend(v1, sel_setTransform_, &v25);

  id v2 = SynapseLinkView.linkPresentationView.getter();
  objc_msgSend(v0, sel_bounds);
  CGFloat x = v27.origin.x;
  CGFloat y = v27.origin.y;
  CGFloat width = v27.size.width;
  CGFloat height = v27.size.height;
  double MidX = CGRectGetMidX(v27);
  v28.origin.CGFloat x = x;
  v28.origin.CGFloat y = y;
  v28.size.CGFloat width = width;
  v28.size.CGFloat height = height;
  CGFloat MidY = CGRectGetMidY(v28);
  uint64_t v9 = (double *)&v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize];
  objc_msgSend(v2, sel_setFrame_, MidX - *(double *)&v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize] * 0.5, MidY - *(double *)&v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize + 8] * 0.5);

  double v10 = *v9;
  double v11 = v9[1];
  objc_msgSend(v0, sel_bounds);
  if (v10 != v13 || v11 != v12)
  {
    objc_msgSend(v0, sel_bounds);
    double v15 = v9[1];
    CGFloat v17 = v16 / *v9;
    v25.CGFloat a = 1.0;
    v25.CGFloat b = 0.0;
    v25.CGFloat c = 0.0;
    v25.CGFloat d = 1.0;
    v25.tCGFloat x = 0.0;
    v25.tCGFloat y = 0.0;
    CGAffineTransformScale(&v24, &v25, v17, v18 / v15);
    long long v19 = *(_OWORD *)&v24.c;
    long long v20 = *(_OWORD *)&v24.tx;
    uint64_t v21 = &v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewScaleTransform];
    *(_OWORD *)uint64_t v21 = *(_OWORD *)&v24.a;
    *((_OWORD *)v21 + 1) = v19;
    *((_OWORD *)v21 + 2) = v20;
    id v22 = SynapseLinkView.linkPresentationView.getter();
    long long v23 = *((_OWORD *)v21 + 1);
    *(_OWORD *)&v25.CGFloat a = *(_OWORD *)v21;
    *(_OWORD *)&v25.CGFloat c = v23;
    *(_OWORD *)&v25.tCGFloat x = *((_OWORD *)v21 + 2);
    objc_msgSend(v22, sel_setTransform_, &v25);
  }
}

Swift::Void __swiftcall SynapseLinkView.tapped(_:)(UITapGestureRecognizer_optional *a1)
{
  v91[1] = *MEMORY[0x263EF8340];
  uint64_t v88 = type metadata accessor for URL();
  id v2 = *(NSObject **)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  id v4 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v7 = (char *)&v76 - v6;
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v86);
  uint64_t v84 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  double v11 = (char *)&v76 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v76 - v13;
  MEMORY[0x270FA5388](v15);
  CGFloat v17 = (char *)&v76 - v16;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)logger);
  long long v20 = v1;
  uint64_t v83 = v19;
  uint64_t v21 = Logger.logObject.getter();
  LODWORD(v85) = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, (os_log_type_t)v85))
  {
    uint64_t v76 = v17;
    os_log_t v79 = v21;
    char v80 = v11;
    uint64_t v81 = v4;
    char v82 = v7;
    unint64_t v87 = v2;
    uint64_t v22 = swift_slowAlloc();
    long long v23 = (void *)swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    v90[0] = v78;
    *(_DWORD *)uint64_t v22 = 138412803;
    v91[0] = (uint64_t)v20;
    CGAffineTransform v24 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v77 = v23;
    *long long v23 = v20;

    *(_WORD *)(v22 + 12) = 2081;
    uint64_t v25 = *(void *)&v24[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink];
    uint64_t v26 = OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem;
    id v27 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v25
                                                                + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_itemURL));
    if (v27)
    {
      CGRect v28 = v27;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v29 = 1;
    }
    uint64_t v32 = (uint64_t)v76;
    uint64_t v31 = v88;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v87[7].isa)(v14, v29, 1, v88);
    outlined init with take of URL?((uint64_t)v14, v32);
    uint64_t v33 = String.init<A>(describing:)();
    v91[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2081;
    uint64_t v30 = &selRef_allowsFingerDrawing;
    v91[0] = (uint64_t)objc_msgSend(*(id *)(v25 + v26), sel_userActivity);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSUserActivity?);
    uint64_t v35 = String.init<A>(describing:)();
    v91[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    os_log_t v37 = v79;
    _os_log_impl(&dword_20C2D7000, v79, (os_log_type_t)v85, "Tapped on link: %@, targetURL: %{private}s, userActivity: %{private}s", (uint8_t *)v22, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    uint64_t v38 = v77;
    swift_arrayDestroy();
    MEMORY[0x210550270](v38, -1, -1);
    uint64_t v39 = v78;
    swift_arrayDestroy();
    MEMORY[0x210550270](v39, -1, -1);
    uint64_t v40 = v22;
    id v2 = v87;
    MEMORY[0x210550270](v40, -1, -1);

    id v4 = v81;
    id v7 = v82;
    double v11 = v80;
  }
  else
  {

    uint64_t v30 = &selRef_allowsFingerDrawing;
    uint64_t v31 = v88;
  }
  uint64_t v41 = *(void *)&v20[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink];
  uint64_t v42 = OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem;
  id v43 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v41
                                                              + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), v30[343]));

  if (v43)
  {
    SynapseLinkView.openLink()();
    return;
  }
  id v44 = objc_msgSend(*(id *)(v41 + v42), sel_itemURL);
  if (v44)
  {
    CGAffineTransform v45 = v44;
    uint64_t v46 = (uint64_t)v84;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v47 = 1;
    uint64_t v46 = (uint64_t)v84;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v2[7].isa)(v46, v47, 1, v31);
  outlined init with take of URL?(v46, (uint64_t)v11);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v2[6].isa)(v11, 1, v31) == 1)
  {
    outlined destroy of URL?((uint64_t)v11);
    id v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v48, v49))
    {
      id v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v50 = 0;
      _os_log_impl(&dword_20C2D7000, v48, v49, "Unable to open link", v50, 2u);
      MEMORY[0x210550270](v50, -1, -1);
    }

    return;
  }
  ((void (*)(char *, char *, uint64_t))v2[4].isa)(v7, v11, v31);
  id v51 = &v20[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_canvas];
  uint64_t v52 = (void *)MEMORY[0x210550400](&v20[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_canvas]);
  if (v52)
  {
    uint64_t v53 = v52;
    int v54 = v4;
    uint64_t v55 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v52) + 0x88))();
    if (v55)
    {
      id v56 = (void *)v55;
      uint64_t v57 = v55 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
      swift_beginAccess();
      if (MEMORY[0x210550400](v57))
      {
        uint64_t v58 = *(void *)(v57 + 8);
        uint64_t ObjectType = swift_getObjectType();
        LOBYTE(v58) = (*(uint64_t (**)(void *, char *, uint64_t, uint64_t))(v58 + 48))(v56, v7, ObjectType, v58);

        swift_unknownObjectRelease();
        if ((v58 & 1) == 0)
        {

          id v4 = v54;
          goto LABEL_23;
        }
      }
      else
      {
      }
    }
    SynapseLinkView.openLink()();

    ((void (*)(char *, uint64_t))v2[1].isa)(v7, v31);
    return;
  }
LABEL_23:
  ((void (*)(char *, char *, uint64_t))v2[2].isa)(v4, v7, v31);
  uint64_t v60 = v20;
  BOOL v61 = Logger.logObject.getter();
  char v62 = v7;
  os_log_type_t v63 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v61, v63))
  {
    unint64_t v87 = v61;
    char v82 = v62;
    CGRect v64 = v4;
    uint64_t v65 = swift_slowAlloc();
    unint64_t v85 = (void *)swift_slowAlloc();
    uint64_t v86 = swift_slowAlloc();
    v91[0] = v86;
    *(_DWORD *)uint64_t v65 = 136380931;
    lazy protocol witness table accessor for type URL and conformance URL();
    uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v67 = v31;
    uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v68, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    isCGFloat a = (void (*)(char *, uint64_t))v2[1].isa;
    isa(v64, v67);
    *(_WORD *)(v65 + 12) = 2112;
    uint64_t v70 = MEMORY[0x210550400](v51);
    uint64_t v71 = v70;
    if (v70) {
      uint64_t v89 = v70;
    }
    else {
      uint64_t v89 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v73 = v87;
    uint64_t v74 = v85;
    *unint64_t v85 = v71;

    _os_log_impl(&dword_20C2D7000, v73, v63, "Refused to open link with targetURL: %{private}s, canvas: %@", (uint8_t *)v65, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x210550270](v74, -1, -1);
    uint64_t v75 = v86;
    swift_arrayDestroy();
    MEMORY[0x210550270](v75, -1, -1);
    MEMORY[0x210550270](v65, -1, -1);

    isa(v82, v88);
  }
  else
  {

    uint64_t v72 = (void (*)(char *, uint64_t))v2[1].isa;
    v72(v4, v31);
    v72(v62, v31);
  }
}

void SynapseLinkView.openLink()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v29 - v5;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)logger);
  id v8 = v0;
  uint64_t v9 = Logger.logObject.getter();
  int v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, (os_log_type_t)v10))
  {
    v29[1] = v1;
    int v31 = v10;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    id v33 = v8;
    aBlock[0] = v32;
    *(_DWORD *)uint64_t v11 = 138412803;
    uint64_t v13 = (char *)v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v30 = v12;
    *uint64_t v12 = v8;

    *(_WORD *)(v11 + 12) = 2081;
    uint64_t v14 = *(void *)&v13[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink];
    uint64_t v15 = OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem;
    id v16 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v14
                                                                + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_itemURL));
    if (v16)
    {
      CGFloat v17 = v16;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v18 = type metadata accessor for URL();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v3, 0, 1, v18);
    }
    else
    {
      uint64_t v19 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v3, 1, 1, v19);
    }
    outlined init with take of URL?((uint64_t)v3, (uint64_t)v6);
    uint64_t v20 = String.init<A>(describing:)();
    id v33 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2081;
    id v33 = objc_msgSend(*(id *)(v14 + v15), sel_userActivity);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSUserActivity?);
    uint64_t v22 = String.init<A>(describing:)();
    id v33 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v9, (os_log_type_t)v31, "Opening link: %@, targetURL: %{private}s, userActivity: %{private}s", (uint8_t *)v11, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    CGAffineTransform v24 = v30;
    swift_arrayDestroy();
    MEMORY[0x210550270](v24, -1, -1);
    uint64_t v25 = v32;
    swift_arrayDestroy();
    MEMORY[0x210550270](v25, -1, -1);
    MEMORY[0x210550270](v11, -1, -1);
  }
  else
  {
  }
  id v26 = SynapseLinkView.linkPresentationView.getter();
  objc_msgSend(v26, sel__openURL);

  SynapseLinkView.analytics.getter();
  id v27 = (void *)MEMORY[0x21054D080](0xD00000000000001ELL, 0x800000020C84E230);
  aBlock[4] = (uint64_t)specialized closure #1 in Analytics.sendEventLazy(key:payload:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_30_2;
  CGRect v28 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);
  swift_release();
}

void SynapseLinkView.isSelected.setter(char a1)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit8LinkView_isSelected) = a1;
  if (a1)
  {
    SynapseLinkView.analytics.getter();
    uint64_t v2 = (void *)MEMORY[0x21054D080](0xD000000000000020, 0x800000020C84E260);
    void v4[4] = specialized closure #1 in Analytics.sendEventLazy(key:payload:);
    v4[5] = 0;
    v4[0] = MEMORY[0x263EF8330];
    v4[1] = 1107296256;
    v4[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    v4[3] = &block_descriptor_73;
    uint64_t v3 = _Block_copy(v4);
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v3);
    swift_release();
  }
}

Swift::OpaquePointer_optional __swiftcall SynapseLinkView.pasteboardRepresentation()()
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for UTType();
  uint64_t v48 = *(void *)(v1 - 8);
  uint64_t v49 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v46 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v47 = (char *)&v45 - v11;
  unint64_t v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v13 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink);
  uint64_t v14 = OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem;
  uint64_t v15 = *(void **)(v13 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem);
  *(void *)&long long v52 = 0;
  id v16 = objc_msgSend(v15, sel_dataRepresentationWithError_, &v52);
  id v17 = (id)v52;
  if (v16)
  {
    uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    unint64_t v21 = v12;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v13;
    unint64_t v23 = v5;
    uint64_t v24 = v6;
    uint64_t v25 = v9;
    uint64_t v26 = v7;
    uint64_t v28 = v27;
    uint64_t v53 = MEMORY[0x263F06F78];
    *(void *)&long long v52 = v18;
    *((void *)&v52 + 1) = v20;
    outlined init with take of Any(&v52, v51);
    outlined copy of Data._Representation(v18, v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v50 = v21;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v51, v22, v28, isUniquelyReferenced_nonNull_native);
    unint64_t v12 = v50;
    uint64_t v7 = v26;
    uint64_t v9 = v25;
    uint64_t v6 = v24;
    uint64_t v5 = v23;
    uint64_t v13 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v18, v20);
  }
  else
  {
    uint64_t v30 = v17;
    int v31 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  id v32 = objc_msgSend(*(id *)(v13 + v14), sel_itemURL);
  if (!v32)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    goto LABEL_8;
  }
  id v33 = v32;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v34 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v34(v5, v9, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
LABEL_8:
    outlined destroy of URL?((uint64_t)v5);
    goto LABEL_9;
  }
  uint64_t v35 = v47;
  v34(v47, v5, v6);
  unint64_t v36 = v46;
  static UTType.url.getter();
  uint64_t v37 = UTType.identifier.getter();
  unint64_t v38 = v12;
  uint64_t v40 = v39;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v36, v49);
  uint64_t v53 = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v52);
  (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(boxed_opaque_existential_1, v35, v6);
  outlined init with take of Any(&v52, v51);
  char v42 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v50 = v38;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v51, v37, v40, v42);
  unint64_t v12 = v50;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v35, v6);
LABEL_9:
  id v44 = (void *)v12;
  result.value._Swift::Int rawValue = v44;
  result.Swift::Bool is_nil = v43;
  return result;
}

uint64_t SynapseLinkView.hasUserActivityWithLinkContextInfo.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___hasUserActivityWithLinkContextInfo;
  int v2 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___hasUserActivityWithLinkContextInfo);
  if (v2 != 2) {
    return v2 & 1;
  }
  uint64_t result = (uint64_t)objc_msgSend(*(id *)(*(void *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink)+ OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_userActivity);
  if (result)
  {
    uint64_t v4 = (void *)result;
    id v5 = objc_msgSend((id)result, sel__linkContextInfo);

    if (v5)
    {

      uint64_t result = 1;
    }
    else
    {
      uint64_t result = 0;
    }
  }
  *(unsigned char *)(v0 + v1) = result;
  return result;
}

Swift::Void __swiftcall SynapseLinkView.linkViewNeedsResize(_:)(LPLinkView *a1)
{
  if (one-time initialization token for linkSize != -1) {
    swift_once();
  }
  double v3 = *(double *)&static UIConstants.linkSize;
  if (one-time initialization token for maximumLinkViewSizeHeightToFit != -1) {
    swift_once();
  }
  -[LPLinkView sizeThatFits:](a1, sel_sizeThatFits_, v3, *(double *)&maximumLinkViewSizeHeightToFit);
  long long v5 = static UIConstants.linkSize;
  if (*((double *)&static UIConstants.linkSize + 1) > v4) {
    double v6 = *((double *)&static UIConstants.linkSize + 1);
  }
  else {
    double v6 = v4;
  }
  uint64_t v7 = v1 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize;
  *(void *)uint64_t v7 = static UIConstants.linkSize;
  *(double *)(v7 + 8) = v6;
  uint64_t v8 = v1 + OBJC_IVAR____TtC8PaperKit8LinkView_delegate;
  if (MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit8LinkView_delegate))
  {
    uint64_t v9 = *(void *)(v8 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(v9 + 16))(v1, ObjectType, v9, *(double *)&v5, v6);
    swift_unknownObjectRelease();
  }
}

uint64_t SynapseLinkView.__ivar_destroyer()
{
  swift_release();
  return swift_unknownObjectWeakDestroy();
}

id SynapseLinkView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SynapseLinkView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SynapseLinkView()
{
  return self;
}

void protocol witness for LinkItemDelegate.linkItemDidUpdatePreview(_:) in conformance SynapseLinkView()
{
  type metadata accessor for SynapseLinkItem();
  uint64_t v0 = swift_dynamicCastClass();
  if (v0)
  {
    uint64_t v1 = v0;
    swift_unknownObjectRetain();
    id v2 = SynapseLinkView.linkPresentationView.getter();
    id v3 = objc_retainAutoreleasedReturnValue(LPLinkMetadataWithSynapseContentItem(*(void **)(v1
                                                                                          + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem)));
    objc_msgSend(v2, sel_setMetadata_, v3);
    swift_unknownObjectRelease();
  }
}

id LPLinkMetadataWithSynapseContentItem(void *a1)
{
  uint64_t v1 = (objc_class *)MEMORY[0x263F103D8];
  id v2 = a1;
  id v3 = (void *)[[v1 alloc] _initWithSynapseContentItem:v2];

  return v3;
}

uint64_t block_copy_helper_73(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_73()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

void specialized SynapseLinkView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___linkPresentationView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___analytics] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize;
  if (one-time initialization token for linkSize != -1) {
    swift_once();
  }
  *(_OWORD *)&v0[v1] = static UIConstants.linkSize;
  uint64_t v2 = &v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewScaleTransform];
  CGAffineTransformMakeScale(&v5, 1.0, 1.0);
  long long v3 = *(_OWORD *)&v5.c;
  long long v4 = *(_OWORD *)&v5.tx;
  _OWORD *v2 = *(_OWORD *)&v5.a;
  v2[1] = v3;
  v2[2] = v4;
  v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___hasUserActivityWithLinkContextInfo] = 2;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

BOOL specialized SynapseLinkView._wantsContextMenuPreview(for:)()
{
  id v1 = objc_msgSend(v0, sel_traitCollection);
  id v2 = objc_msgSend(v1, sel_userInterfaceIdiom);

  if (v2 != (id)1) {
    return 1;
  }
  id v3 = objc_msgSend(v0, sel_window);
  if (!v3) {
    return 1;
  }
  long long v4 = v3;
  objc_msgSend(v3, sel_bounds);
  double v6 = v5;
  double v8 = v7;

  if (one-time initialization token for minimumWindowSizeToShowLinkPreviewsOnPad != -1) {
    swift_once();
  }
  return *((double *)&static UIConstants.minimumWindowSizeToShowLinkPreviewsOnPad + 1) <= v8
      && *(double *)&static UIConstants.minimumWindowSizeToShowLinkPreviewsOnPad <= v6;
}

uint64_t CGPathRef.endPoints.getter()
{
  v8[0] = 0;
  v8[1] = 0;
  char v9 = 1;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v8;
  *(void *)(v1 + 24) = v7;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in CGPathRef.endPoints.getter;
  *(void *)(v2 + 24) = v1;
  aBlock[4] = thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()partial apply;
  aBlock[5] = v2;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  aBlock[3] = &block_descriptor_109;
  id v3 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v0, v3);
  _Block_release(v3);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return swift_release();
  }
  __break(1u);
  return result;
}

CGPathRef __swiftcall CGPathRef.lineSubtractingFromStart(_:)(CGPathRef a1)
{
  uint64_t v2 = type metadata accessor for CGPathFillRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v56 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v7 = (char *)&v48 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v48 - v9;
  CGPathRef v11 = CGPathRef.openPath()();
  unint64_t v12 = *(void (**)(char *))(v3 + 104);
  LODWORD(v59) = *MEMORY[0x263F00040];
  v12(v10);
  LODWORD(v54) = *MEMORY[0x263F00038];
  v12(v7);
  unint64_t v13 = lazy protocol witness table accessor for type CGPathFillRule and conformance CGPathFillRule();
  dispatch thunk of RawRepresentable.rawValue.getter();
  unint64_t v55 = v13;
  dispatch thunk of RawRepresentable.rawValue.getter();
  BOOL v14 = aBlock == *(void *)&v68.a;
  uint64_t v15 = *(uint64_t (***)(uint64_t, uint64_t))(v3 + 8);
  ((void (*)(char *, uint64_t))v15)(v7, v2);
  unint64_t v50 = v11;
  CGPathRef v57 = a1;
  CGPathRef result = CGPathCreateCopyOfLineBySubtractingPath(v11, a1, v14);
  if (!result)
  {
    __break(1u);
LABEL_45:
    __break(1u);
    return result;
  }
  id v17 = result;
  uint64_t v58 = v15;
  ((void (*)(char *, uint64_t))v15)(v10, v2);
  v68.CGFloat a = 0.0;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = &v68;
  CFMutableDataRef Mutable = (const CGPath *)swift_allocObject();
  *((void *)Mutable + 2) = partial apply for closure #1 in CGPathRef.subpathCount.getter;
  *((void *)Mutable + 3) = v18;
  id v73 = thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()partial apply;
  uint64_t v74 = Mutable;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v70 = 1107296256;
  uint64_t v71 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  uint64_t v72 = (uint64_t)&block_descriptor_77_0;
  unint64_t v20 = _Block_copy(&aBlock);
  uint64_t v21 = (uint64_t)v74;
  swift_retain();
  swift_release();
  uint64_t v49 = v17;
  CGPathApplyWithBlock(v17, v20);
  _Block_release(v20);
  LOBYTE(v2CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v20) {
    goto LABEL_37;
  }
  CGFloat a = v68.a;
  swift_release();
  unint64_t v23 = v50;
  uint64_t v24 = v57;
  if (*(uint64_t *)&a > 1) {
    goto LABEL_5;
  }
  CGPathRef.endPoints.getter();
  ((void (*)(char *, void, uint64_t))v12)(v7, v59, v2);
  uint64_t aBlock = 0x3FF0000000000000;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0x3FF0000000000000;
  id v73 = 0;
  uint64_t v74 = 0;
  char v25 = CGPathRef.contains(_:using:transform:)();
  ((void (*)(char *, uint64_t))v58)(v7, v2);
  if (v25)
  {
LABEL_5:
    uint64_t v26 = v56;
    ((void (*)(char *, void, uint64_t))v12)(v56, v59, v2);
    ((void (*)(char *, void, uint64_t))v12)(v7, v54, v2);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    BOOL v27 = *(void *)&v68.a == *(void *)&transform.a;
    uint64_t v28 = v58;
    ((void (*)(char *, uint64_t))v58)(v7, v2);
    CGPathRef result = CGPathCreateCopyOfLineByIntersectingPath(v23, v24, v27);
    if (result)
    {
      CGPathRef v29 = result;
      ((void (*)(char *, uint64_t))v28)(v26, v2);
      uint64_t v21 = CGPathRef.subpaths.getter();
      unint64_t v55 = CGPathRef.subpaths.getter();
      CFMutableDataRef Mutable = CGPathCreateMutable();
      CGPathRef v48 = v29;
      if ((unint64_t)v21 >> 62) {
        goto LABEL_38;
      }
      uint64_t v30 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (1)
      {
        if (!v30)
        {
LABEL_30:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v23 = v49;
          goto LABEL_32;
        }
        uint64_t v31 = v55;
        if (v55 >> 62)
        {
LABEL_43:
          uint64_t v53 = v31 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          uint64_t v31 = v55;
          uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v53 = v55 & 0xFFFFFFFFFFFFFF8;
          uint64_t v59 = *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        unint64_t v32 = 0;
        unint64_t v33 = v21 & 0xC000000000000001;
        uint64_t v58 = &v62;
        unint64_t v54 = v31 & 0xC000000000000001;
        p_CGFloat b = &transform.b;
        p_tCGFloat x = &transform.tx;
        CGPathRef v57 = (CGPathRef)v21;
        id v56 = (char *)v30;
        while (1)
        {
          unint64_t v36 = v32;
          if (v33) {
            uint64_t v37 = (const CGPath *)MEMORY[0x21054E050](v32, v21);
          }
          else {
            uint64_t v37 = (const CGPath *)*(id *)(v21 + 8 * v32 + 32);
          }
          unint64_t v38 = v37;
          if (CGPathIsEmpty(Mutable))
          {
            v68.CGFloat b = 0.0;
            v68.CGFloat c = 0.0;
            v68.CGFloat a = 1.0;
            v68.CGFloat d = 1.0;
            v68.tCGFloat x = 0.0;
            v68.tCGFloat y = 0.0;
            CGMutablePathRef.addPath(_:transform:)(v38, &v68);

            goto LABEL_21;
          }
          char v66 = 1;
          uint64_t v39 = swift_allocObject();
          *(void *)(v39 + 16) = &v66;
          *(void *)(v39 + 24) = Mutable;
          uint64_t v21 = swift_allocObject();
          *(void *)(v21 + 16) = closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)partial apply;
          *(void *)(v21 + 24) = v39;
          CGRect v64 = thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()partial apply;
          uint64_t v65 = v21;
          uint64_t v60 = MEMORY[0x263EF8330];
          uint64_t v61 = 1107296256;
          char v62 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
          os_log_type_t v63 = &block_descriptor_88;
          uint64_t v40 = _Block_copy(&v60);
          uint64_t v41 = Mutable;
          swift_retain();
          swift_release();
          CGPathApplyWithBlock(v38, v40);
          _Block_release(v40);
          char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();

          swift_release();
          swift_release();
          if (isEscapingClosureAtFileLocation) {
            break;
          }
          uint64_t v21 = (uint64_t)v57;
          uint64_t v30 = (uint64_t)v56;
LABEL_21:
          unint64_t v32 = v36 + 1;
          if ((uint64_t)(v36 + 1) < v59)
          {
            if (v54)
            {
              Swift::Bool v43 = (const CGPath *)MEMORY[0x21054E050](v36 + 1, v55);
            }
            else
            {
              if ((v32 & 0x8000000000000000) != 0) {
                goto LABEL_34;
              }
              if (v32 >= *(void *)(v53 + 16)) {
                goto LABEL_35;
              }
              Swift::Bool v43 = (const CGPath *)*(id *)(v55 + 8 * v36 + 40);
            }
            id v44 = v43;
            if (CGPathIsEmpty(Mutable))
            {
              unint64_t v34 = p_b;
              *p_CGFloat b = 0.0;
              v34[1] = 0.0;
              transform.CGFloat a = 1.0;
              transform.CGFloat d = 1.0;
              uint64_t v35 = p_tx;
              *p_tCGFloat x = 0.0;
              v35[1] = 0.0;
              CGMutablePathRef.addPath(_:transform:)(v44, &transform);
            }
            else
            {
              char v66 = 1;
              uint64_t v45 = swift_allocObject();
              *(void *)(v45 + 16) = &v66;
              *(void *)(v45 + 24) = Mutable;
              uint64_t v21 = swift_allocObject();
              *(void *)(v21 + 16) = closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)partial apply;
              *(void *)(v21 + 24) = v45;
              CGRect v64 = thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()partial apply;
              uint64_t v65 = v21;
              uint64_t v60 = MEMORY[0x263EF8330];
              uint64_t v61 = 1107296256;
              char v62 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
              os_log_type_t v63 = &block_descriptor_99;
              uint64_t v46 = _Block_copy(&v60);
              uint64_t v47 = Mutable;
              swift_retain();
              swift_release();
              CGPathApplyWithBlock(v44, v46);
              _Block_release(v46);
              LOBYTE(v46) = swift_isEscapingClosureAtFileLocation();

              swift_release();
              swift_release();
              if (v46) {
                goto LABEL_36;
              }
              uint64_t v21 = (uint64_t)v57;
              uint64_t v30 = (uint64_t)v56;
            }
          }
          if (v30 == v32) {
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        if (v21 < 0) {
          uint64_t v31 = v21;
        }
        else {
          uint64_t v31 = v21 & 0xFFFFFFFFFFFFFF8;
        }
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v30 < 0)
        {
          __break(1u);
          goto LABEL_43;
        }
      }
    }
    goto LABEL_45;
  }
  CFMutableDataRef Mutable = v49;
LABEL_32:

  return Mutable;
}

CGPathRef __swiftcall CGPathRef.lineSubtractingFromEnd(_:)(CGPathRef a1)
{
  uint64_t v2 = type metadata accessor for CGPathFillRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v73 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v7 = (char *)&v60 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v60 - v9;
  CGPathRef v11 = CGPathRef.openPath()();
  unint64_t v13 = v3 + 104;
  unint64_t v12 = *(uint64_t (***)(uint64_t, uint64_t))(v3 + 104);
  LODWORD(v77) = *MEMORY[0x263F00040];
  ((void (*)(char *))v12)(v10);
  LODWORD(v71) = *MEMORY[0x263F00038];
  uint64_t v75 = v12;
  ((void (*)(char *))v12)(v7);
  unint64_t v14 = lazy protocol witness table accessor for type CGPathFillRule and conformance CGPathFillRule();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v72 = v14;
  dispatch thunk of RawRepresentable.rawValue.getter();
  LOBYTE(v12) = aBlock == *(void *)&transform.a;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v15(v7, v2);
  CGRect v64 = v11;
  unint64_t v76 = (unint64_t)a1;
  CGPathRef result = CGPathCreateCopyOfLineBySubtractingPath(v11, a1, (BOOL)v12);
  if (!result)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  id v17 = result;
  uint64_t v74 = (uint64_t)v15;
  v15(v10, v2);
  transform.CGFloat a = 0.0;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = &transform;
  unint64_t v19 = (void *)swift_allocObject();
  void v19[2] = partial apply for closure #1 in CGPathRef.subpathCount.getter;
  v19[3] = v18;
  uint64_t v97 = partial apply for thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  uint64_t v98 = v19;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v94 = 1107296256;
  uint64_t v95 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  uint64_t v96 = (uint64_t)&block_descriptor_74;
  unint64_t v20 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  os_log_type_t v63 = v17;
  CGPathApplyWithBlock(v17, v20);
  _Block_release(v20);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    goto LABEL_59;
  }
  CGFloat a = transform.a;
  swift_release();
  BOOL v23 = *(void *)&a <= 1;
  char v25 = v75;
  uint64_t v24 = (const CGPath *)v76;
  uint64_t v26 = (void (*)(char *, uint64_t))v74;
  if (v23)
  {
    CGPathRef.endPoints.getter();
    ((void (*)(char *, void, uint64_t))v25)(v7, v77, v2);
    uint64_t aBlock = 0x3FF0000000000000;
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    uint64_t v96 = 0x3FF0000000000000;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    char v27 = CGPathRef.contains(_:using:transform:)();
    v26(v7, v2);
    if ((v27 & 1) == 0)
    {
      unint64_t v32 = v63;
      uint64_t v59 = v64;
LABEL_50:

      return v32;
    }
  }
  uint64_t v28 = v73;
  ((void (*)(char *, void, uint64_t))v25)(v73, v77, v2);
  ((void (*)(char *, void, uint64_t))v25)(v7, v71, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  BOOL v29 = *(void *)&transform.a == v89;
  v26(v7, v2);
  CGPathRef result = CGPathCreateCopyOfLineByIntersectingPath(v64, v24, v29);
  if (result)
  {
    unint64_t v19 = result;
    v26(v28, v2);
    unint64_t v13 = CGPathRef.subpaths.getter();
    unint64_t v30 = CGPathRef.subpaths.getter();
    uint64_t isEscapingClosureAtFileLocation = v30;
    if (v30 >> 62) {
      goto LABEL_60;
    }
    uint64_t v77 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_9:
    id v60 = v19;
    uint64_t v74 = isEscapingClosureAtFileLocation;
    if (!(v13 >> 62))
    {
      uint64_t v31 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      CGPathRef result = CGPathCreateMutable();
LABEL_11:
      unint64_t v32 = result;
      if (v31)
      {
        unint64_t v33 = 0;
        uint64_t v75 = &v80;
        unint64_t v76 = v13 & 0xC000000000000001;
        p_tCGFloat x = &transform.tx;
        p_CGFloat b = &transform.b;
        uint64_t v72 = v74 & 0xFFFFFFFFFFFFFF8;
        id v73 = (char *)(v74 & 0xC000000000000001);
        uint64_t v61 = &v91;
        char v62 = v90;
        uint64_t v67 = &v88.tx;
        CGAffineTransform v68 = &v88.b;
        uint64_t v65 = &v87;
        char v66 = v86;
        unint64_t v71 = v13;
        do
        {
          uint64_t v37 = v33 + 1;
          if (v31 >= v77)
          {
            if (v76) {
              id v41 = (id)MEMORY[0x21054E050](v33, v13);
            }
            else {
              id v41 = *(id *)(v13 + 8 * v33 + 32);
            }
            uint64_t isEscapingClosureAtFileLocation = (uint64_t)v41;
            if (CGPathIsEmpty(v32))
            {
              char v42 = p_b;
              *p_CGFloat b = 0.0;
              v42[1] = 0.0;
              transform.CGFloat a = 1.0;
              transform.CGFloat d = 1.0;
              Swift::Bool v43 = p_tx;
              *p_tCGFloat x = 0.0;
              v43[1] = 0.0;
              CGMutablePathRef.addPath(_:transform:)((CGPathRef)isEscapingClosureAtFileLocation, &transform);
            }
            else
            {
              char v84 = 1;
              unint64_t v19 = (void *)swift_allocObject();
              void v19[2] = &v84;
              v19[3] = v32;
              unint64_t v13 = swift_allocObject();
              *(void *)(v13 + 16) = partial apply for closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:);
              *(void *)(v13 + 24) = v19;
              char v82 = thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()partial apply;
              unint64_t v83 = v13;
              uint64_t v78 = MEMORY[0x263EF8330];
              uint64_t v79 = 1107296256;
              char v80 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
              uint64_t v81 = &block_descriptor_13_2;
              id v44 = _Block_copy(&v78);
              uint64_t v45 = v32;
              swift_retain();
              swift_release();
              CGPathApplyWithBlock((CGPathRef)isEscapingClosureAtFileLocation, v44);
              _Block_release(v44);
              LOBYTE(v44) = swift_isEscapingClosureAtFileLocation();

              swift_release();
              swift_release();
              if (v44) {
                goto LABEL_53;
              }
              unint64_t v13 = v71;
            }
            if (v37 < v77)
            {
              if (v73)
              {
                id v46 = (id)MEMORY[0x21054E050](v33, v74);
              }
              else
              {
                if ((v33 & 0x8000000000000000) != 0) {
                  goto LABEL_54;
                }
                if (v33 >= *(void *)(v72 + 16)) {
                  goto LABEL_57;
                }
                id v46 = *(id *)(v74 + 8 * v33 + 32);
              }
              uint64_t isEscapingClosureAtFileLocation = (uint64_t)v46;
              if (CGPathIsEmpty(v32))
              {
                uint64_t v47 = v62;
                *char v62 = 0;
                v47[1] = 0;
                uint64_t v89 = 0x3FF0000000000000;
                v90[2] = 0x3FF0000000000000;
                CGPathRef v48 = v61;
                *uint64_t v61 = 0;
                v48[1] = 0;
                uint64_t v49 = &v89;
LABEL_41:
                CGMutablePathRef.addPath(_:transform:)((CGPathRef)isEscapingClosureAtFileLocation, (CGAffineTransform *)v49);

                goto LABEL_14;
              }
              char v84 = 1;
              unint64_t v19 = (void *)swift_allocObject();
              void v19[2] = &v84;
              v19[3] = v32;
              uint64_t v56 = swift_allocObject();
              *(void *)(v56 + 16) = closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)partial apply;
              *(void *)(v56 + 24) = v19;
              char v82 = thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()partial apply;
              unint64_t v83 = v56;
              uint64_t v78 = MEMORY[0x263EF8330];
              uint64_t v79 = 1107296256;
              char v80 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
              uint64_t v81 = &block_descriptor_24_1;
              CGPathRef v57 = _Block_copy(&v78);
              uint64_t v58 = v32;
              swift_retain();
              swift_release();
              CGPathApplyWithBlock((CGPathRef)isEscapingClosureAtFileLocation, v57);
              _Block_release(v57);
              LOBYTE(v57) = swift_isEscapingClosureAtFileLocation();

              swift_release();
              swift_release();
              if (v57) {
                goto LABEL_58;
              }
            }
          }
          else
          {
            if (v73)
            {
              id v38 = (id)MEMORY[0x21054E050](v33, v74);
            }
            else
            {
              if ((v33 & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_52:
                __break(1u);
LABEL_53:
                __break(1u);
LABEL_54:
                __break(1u);
LABEL_55:
                __break(1u);
LABEL_56:
                __break(1u);
LABEL_57:
                __break(1u);
LABEL_58:
                __break(1u);
LABEL_59:
                __break(1u);
LABEL_60:
                uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
                goto LABEL_9;
              }
              if (v33 >= *(void *)(v72 + 16)) {
                goto LABEL_52;
              }
              id v38 = *(id *)(v74 + 8 * v33 + 32);
            }
            uint64_t isEscapingClosureAtFileLocation = (uint64_t)v38;
            if (CGPathIsEmpty(v32))
            {
              uint64_t v39 = v68;
              CGFloat *v68 = 0.0;
              v39[1] = 0.0;
              v88.CGFloat a = 1.0;
              v88.CGFloat d = 1.0;
              uint64_t v40 = v67;
              CGFloat *v67 = 0.0;
              v40[1] = 0.0;
              CGMutablePathRef.addPath(_:transform:)((CGPathRef)isEscapingClosureAtFileLocation, &v88);
            }
            else
            {
              char v84 = 1;
              unint64_t v19 = (void *)swift_allocObject();
              void v19[2] = &v84;
              v19[3] = v32;
              unint64_t v13 = swift_allocObject();
              *(void *)(v13 + 16) = closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)partial apply;
              *(void *)(v13 + 24) = v19;
              char v82 = thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()partial apply;
              unint64_t v83 = v13;
              uint64_t v78 = MEMORY[0x263EF8330];
              uint64_t v79 = 1107296256;
              char v80 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
              uint64_t v81 = &block_descriptor_35_2;
              unint64_t v50 = _Block_copy(&v78);
              id v51 = v32;
              swift_retain();
              swift_release();
              CGPathApplyWithBlock((CGPathRef)isEscapingClosureAtFileLocation, v50);
              _Block_release(v50);
              char v52 = swift_isEscapingClosureAtFileLocation();

              swift_release();
              swift_release();
              if (v52) {
                goto LABEL_55;
              }
              unint64_t v13 = v71;
            }
            if (v76) {
              id v53 = (id)MEMORY[0x21054E050](v33, v13);
            }
            else {
              id v53 = *(id *)(v13 + 8 * v33 + 32);
            }
            uint64_t isEscapingClosureAtFileLocation = (uint64_t)v53;
            if (CGPathIsEmpty(v32))
            {
              unint64_t v54 = v66;
              *char v66 = 0;
              v54[1] = 0;
              uint64_t v85 = 0x3FF0000000000000;
              v86[2] = 0x3FF0000000000000;
              unint64_t v55 = v65;
              *uint64_t v65 = 0;
              v55[1] = 0;
              uint64_t v49 = &v85;
              goto LABEL_41;
            }
            char v84 = 1;
            unint64_t v19 = (void *)swift_allocObject();
            void v19[2] = &v84;
            v19[3] = v32;
            uint64_t v34 = swift_allocObject();
            *(void *)(v34 + 16) = closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)partial apply;
            *(void *)(v34 + 24) = v19;
            char v82 = thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()partial apply;
            unint64_t v83 = v34;
            uint64_t v78 = MEMORY[0x263EF8330];
            uint64_t v79 = 1107296256;
            char v80 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
            uint64_t v81 = &block_descriptor_46;
            uint64_t v35 = _Block_copy(&v78);
            unint64_t v36 = v32;
            swift_retain();
            swift_release();
            CGPathApplyWithBlock((CGPathRef)isEscapingClosureAtFileLocation, v35);
            _Block_release(v35);
            LOBYTE(v35) = swift_isEscapingClosureAtFileLocation();

            swift_release();
            swift_release();
            if (v35) {
              goto LABEL_56;
            }
          }
LABEL_14:
          ++v33;
        }
        while (v31 != v37);
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v59 = v63;
      goto LABEL_50;
    }
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    CGPathRef result = CGPathCreateMutable();
    if ((v31 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_63;
  }
LABEL_64:
  __break(1u);
  return result;
}

uint64_t closure #1 in CGPathRef.endPoints.getter(uint64_t result, uint64_t a2, uint64_t *a3)
{
  switch(*(_DWORD *)result)
  {
    case 0:
      if (*(unsigned char *)(a2 + 16) == 1)
      {
        uint64_t v3 = *(uint64_t **)(result + 8);
        uint64_t v4 = *v3;
        uint64_t v5 = v3[1];
        *a3 = *v3;
        a3[1] = v5;
        *(void *)a2 = v4;
        *(void *)(a2 + 8) = v5;
        *(unsigned char *)(a2 + 16) = 0;
      }
      return result;
    case 1:
      long long v6 = *(_OWORD *)*(void *)(result + 8);
      goto LABEL_7;
    case 2:
      long long v6 = *(_OWORD *)(*(void *)(result + 8) + 16);
      goto LABEL_7;
    case 3:
      long long v6 = *(_OWORD *)(*(void *)(result + 8) + 32);
LABEL_7:
      *(_OWORD *)a3 = v6;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t CGPathRef.subpaths.getter()
{
  unint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = &v9;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in CGPathRef.subpaths.getter;
  *(void *)(v2 + 24) = v1;
  aBlock[4] = thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()partial apply;
  aBlock[5] = v2;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  aBlock[3] = &block_descriptor_56_1;
  uint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v0, v3);
  _Block_release(v3);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v5 = v9;
  if (v9 >> 62)
  {
LABEL_6:
    type metadata accessor for CGPathRef(0);
    swift_bridgeObjectRetain();
    uint64_t v6 = _bridgeCocoaArray<A>(_:)();
    goto LABEL_4;
  }
  swift_bridgeObjectRetain_n();
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  type metadata accessor for CGPathRef(0);
  uint64_t v6 = v5;
LABEL_4:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v6;
}

void closure #1 in CGPathRef.subpaths.getter(uint64_t a1, unint64_t *a2)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      CGPathCreateMutable();
      MEMORY[0x21054D330]();
      if (*(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      unint64_t v4 = *a2;
      if (!(v4 >> 62))
      {
        uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v5) {
          goto LABEL_46;
        }
LABEL_6:
        unint64_t v6 = v5 - 1;
        if (__OFSUB__(v5, 1))
        {
          __break(1u);
        }
        else if ((v4 & 0xC000000000000001) == 0)
        {
          if ((v6 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v6 < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v7 = *(id *)(v4 + 8 * v6 + 32);
LABEL_11:
            id v32 = v7;
            swift_bridgeObjectRelease();
            uint64_t v8 = *(unint64_t **)(a1 + 8);
            unint64_t v9 = *v8;
            unint64_t v10 = v8[1];
            transform.CGFloat a = 1.0;
            transform.CGFloat b = 0.0;
            transform.CGFloat c = 0.0;
            transform.CGFloat d = 1.0;
            transform.tCGFloat x = 0.0;
            transform.tCGFloat y = 0.0;
            CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(v10, v9), &transform);
            goto LABEL_36;
          }
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          id v12 = (id)MEMORY[0x21054E050](v6, v4);
LABEL_19:
          id v32 = v12;
          swift_bridgeObjectRelease();
          unint64_t v13 = *(unint64_t **)(a1 + 8);
          unint64_t v14 = *v13;
          unint64_t v15 = v13[1];
          transform.CGFloat a = 1.0;
          transform.CGFloat b = 0.0;
          transform.CGFloat c = 0.0;
          transform.CGFloat d = 1.0;
          transform.tCGFloat x = 0.0;
          transform.tCGFloat y = 0.0;
          CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(v15, v14), &transform);
          goto LABEL_36;
        }
        id v7 = (id)MEMORY[0x21054E050](v6, v4);
        goto LABEL_11;
      }
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (v5) {
        goto LABEL_6;
      }
      goto LABEL_46;
    case 1:
      unint64_t v4 = *a2;
      if (*a2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        if (!v11) {
          goto LABEL_46;
        }
      }
      else
      {
        uint64_t v11 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v11) {
          goto LABEL_46;
        }
      }
      unint64_t v6 = v11 - 1;
      if (__OFSUB__(v11, 1)) {
        goto LABEL_53;
      }
      if ((v4 & 0xC000000000000001) != 0) {
        goto LABEL_54;
      }
      if ((v6 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v6 < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v12 = *(id *)(v4 + 8 * v6 + 32);
        goto LABEL_19;
      }
      __break(1u);
      goto LABEL_57;
    case 2:
      unint64_t v4 = *a2;
      if (!(*a2 >> 62))
      {
        uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v16) {
          goto LABEL_46;
        }
LABEL_22:
        unint64_t v6 = v16 - 1;
        if (__OFSUB__(v16, 1))
        {
LABEL_57:
          __break(1u);
        }
        else if ((v4 & 0xC000000000000001) == 0)
        {
          if ((v6 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v6 < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v17 = *(id *)(v4 + 8 * v6 + 32);
LABEL_27:
            id v32 = v17;
            swift_bridgeObjectRelease();
            uint64_t v18 = *(unint64_t **)(a1 + 8);
            unint64_t v19 = v18[2];
            unint64_t v20 = v18[3];
            unint64_t v21 = *v18;
            unint64_t v22 = v18[1];
            transform.CGFloat a = 1.0;
            transform.CGFloat b = 0.0;
            transform.CGFloat c = 0.0;
            transform.CGFloat d = 1.0;
            transform.tCGFloat x = 0.0;
            transform.tCGFloat y = 0.0;
            CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(v20, v19), (CGPoint)__PAIR128__(v22, v21), &transform);
            goto LABEL_36;
          }
          __break(1u);
          goto LABEL_61;
        }
        id v17 = (id)MEMORY[0x21054E050](v6, v4);
        goto LABEL_27;
      }
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      if (v16) {
        goto LABEL_22;
      }
      goto LABEL_46;
    case 3:
      unint64_t v4 = *a2;
      if (*a2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        if (v23)
        {
LABEL_30:
          unint64_t v6 = v23 - 1;
          if (!__OFSUB__(v23, 1))
          {
            if ((v4 & 0xC000000000000001) == 0)
            {
              if ((v6 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v6 < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                id v24 = *(id *)(v4 + 8 * v6 + 32);
LABEL_35:
                id v32 = v24;
                swift_bridgeObjectRelease();
                char v25 = *(unint64_t **)(a1 + 8);
                unint64_t v26 = v25[4];
                unint64_t v27 = v25[5];
                unint64_t v28 = *v25;
                unint64_t v29 = v25[1];
                unint64_t v30 = v25[2];
                unint64_t v31 = v25[3];
                transform.CGFloat a = 1.0;
                transform.CGFloat b = 0.0;
                transform.CGFloat c = 0.0;
                transform.CGFloat d = 1.0;
                transform.tCGFloat x = 0.0;
                transform.tCGFloat y = 0.0;
                CGMutablePathRef.addCurve(to:control1:control2:transform:)((CGPoint)__PAIR128__(v27, v26), (CGPoint)__PAIR128__(v29, v28), (CGPoint)__PAIR128__(v31, v30), &transform);
LABEL_36:

                return;
              }
              __break(1u);
              JUMPOUT(0x20C7CB784);
            }
LABEL_62:
            id v24 = (id)MEMORY[0x21054E050](v6, v4);
            goto LABEL_35;
          }
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v23 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v23) {
          goto LABEL_30;
        }
      }
LABEL_46:
      swift_bridgeObjectRelease();
      return;
    default:
      return;
  }
}

CGPathRef __swiftcall CGPathRef.openPath()()
{
  CGMutablePathRef Mutable = CGPathCreateMutable();
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v9;
  *(void *)(v2 + 24) = Mutable;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in CGPathRef.openPath();
  *(void *)(v3 + 24) = v2;
  v8[4] = thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()partial apply;
  v8[5] = v3;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1107296256;
  void v8[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  v8[3] = &block_descriptor_66;
  unint64_t v4 = _Block_copy(v8);
  uint64_t v5 = Mutable;
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v0, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  CGPathRef result = (CGPathRef)swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return v5;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type CGPathFillRule and conformance CGPathFillRule()
{
  unint64_t result = lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule;
  if (!lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule)
  {
    type metadata accessor for CGPathFillRule();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule);
  }
  return result;
}

uint64_t sub_20C7CB94C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C7CB960()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_74()
{
  return swift_release();
}

void closure #1 in CGPathRef.openPath()(uint64_t a1, double *a2, CGPathRef path)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      unint64_t v4 = *(double **)(a1 + 8);
      double v5 = *v4;
      unint64_t v6 = *((void *)v4 + 1);
      *a2 = *v4;
      *((void *)a2 + 1) = v6;
      v23.CGFloat a = 1.0;
      v23.CGFloat b = 0.0;
      v23.CGFloat c = 0.0;
      v23.CGFloat d = 1.0;
      v23.tCGFloat x = 0.0;
      v23.tCGFloat y = 0.0;
      CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(v6, *(unint64_t *)&v5), &v23);
      break;
    case 1:
      unint64_t v10 = *(double **)(a1 + 8);
      double v8 = *v10;
      double v9 = v10[1];
      goto LABEL_7;
    case 2:
      uint64_t v11 = *(unint64_t **)(a1 + 8);
      unint64_t v12 = v11[2];
      unint64_t v13 = v11[3];
      unint64_t v14 = *v11;
      unint64_t v15 = v11[1];
      v23.CGFloat a = 1.0;
      v23.CGFloat b = 0.0;
      v23.CGFloat c = 0.0;
      v23.CGFloat d = 1.0;
      v23.tCGFloat x = 0.0;
      v23.tCGFloat y = 0.0;
      CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(v13, v12), (CGPoint)__PAIR128__(v15, v14), &v23);
      break;
    case 3:
      uint64_t v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v16[5];
      unint64_t v19 = *v16;
      unint64_t v20 = v16[1];
      unint64_t v21 = v16[2];
      unint64_t v22 = v16[3];
      v23.CGFloat a = 1.0;
      v23.CGFloat b = 0.0;
      v23.CGFloat c = 0.0;
      v23.CGFloat d = 1.0;
      v23.tCGFloat x = 0.0;
      v23.tCGFloat y = 0.0;
      CGMutablePathRef.addCurve(to:control1:control2:transform:)((CGPoint)__PAIR128__(v18, v17), (CGPoint)__PAIR128__(v20, v19), (CGPoint)__PAIR128__(v22, v21), &v23);
      break;
    case 4:
      CGPoint CurrentPoint = CGPathGetCurrentPoint(path);
      double v8 = *a2;
      double v9 = a2[1];
      if (vabdd_f64(CurrentPoint.x, *a2) >= 0.001 || vabdd_f64(CurrentPoint.y, v9) >= 0.001)
      {
LABEL_7:
        v23.CGFloat a = 1.0;
        v23.CGFloat b = 0.0;
        v23.CGFloat c = 0.0;
        v23.CGFloat d = 1.0;
        v23.tCGFloat x = 0.0;
        v23.tCGFloat y = 0.0;
        CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v9, *(unint64_t *)&v8), &v23);
      }
      break;
    default:
      return;
  }
}

void closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)(uint64_t a1, unsigned char *a2, CGPathRef path)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      if (*a2 != 1
        || ((double v5 = *(double **)(a1 + 8),
             double v6 = *v5,
             double v7 = v5[1],
             CGPoint CurrentPoint = CGPathGetCurrentPoint(path),
             v6 == CurrentPoint.x)
          ? (BOOL v9 = v7 == CurrentPoint.y)
          : (BOOL v9 = 0),
            !v9))
      {
        unint64_t v10 = *(unint64_t **)(a1 + 8);
        unint64_t v11 = *v10;
        unint64_t v12 = v10[1];
        v28.CGFloat a = 1.0;
        v28.CGFloat b = 0.0;
        v28.CGFloat c = 0.0;
        v28.CGFloat d = 1.0;
        v28.tCGFloat x = 0.0;
        v28.tCGFloat y = 0.0;
        CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(v12, v11), &v28);
      }
      *a2 = 0;
      break;
    case 1:
      char v25 = *(unint64_t **)(a1 + 8);
      unint64_t v26 = *v25;
      unint64_t v27 = v25[1];
      v28.CGFloat a = 1.0;
      v28.CGFloat b = 0.0;
      v28.CGFloat c = 0.0;
      v28.CGFloat d = 1.0;
      v28.tCGFloat x = 0.0;
      v28.tCGFloat y = 0.0;
      CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(v27, v26), &v28);
      break;
    case 2:
      unint64_t v13 = *(unint64_t **)(a1 + 8);
      unint64_t v14 = v13[2];
      unint64_t v15 = v13[3];
      unint64_t v16 = *v13;
      unint64_t v17 = v13[1];
      v28.CGFloat a = 1.0;
      v28.CGFloat b = 0.0;
      v28.CGFloat c = 0.0;
      v28.CGFloat d = 1.0;
      v28.tCGFloat x = 0.0;
      v28.tCGFloat y = 0.0;
      CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(v15, v14), (CGPoint)__PAIR128__(v17, v16), &v28);
      break;
    case 3:
      unint64_t v18 = *(unint64_t **)(a1 + 8);
      unint64_t v19 = v18[4];
      unint64_t v20 = v18[5];
      unint64_t v21 = *v18;
      unint64_t v22 = v18[1];
      unint64_t v23 = v18[2];
      unint64_t v24 = v18[3];
      v28.CGFloat a = 1.0;
      v28.CGFloat b = 0.0;
      v28.CGFloat c = 0.0;
      v28.CGFloat d = 1.0;
      v28.tCGFloat x = 0.0;
      v28.tCGFloat y = 0.0;
      CGMutablePathRef.addCurve(to:control1:control2:transform:)((CGPoint)__PAIR128__(v20, v19), (CGPoint)__PAIR128__(v22, v21), (CGPoint)__PAIR128__(v24, v23), &v28);
      break;
    default:
      return;
  }
}

void partial apply for closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)(uint64_t a1)
{
  closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)(a1, *(unsigned char **)(v1 + 16), *(CGPathRef *)(v1 + 24));
}

uint64_t sub_20C7CBC10()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7CBC20()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7CBC58()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7CBC68()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7CBC78()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7CBC88()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in CGPathRef.subpaths.getter(uint64_t a1)
{
  closure #1 in CGPathRef.subpaths.getter(a1, *(unint64_t **)(v1 + 16));
}

uint64_t sub_20C7CBCA0()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in CGPathRef.openPath()(uint64_t a1)
{
  closure #1 in CGPathRef.openPath()(a1, *(double **)(v1 + 16), *(CGPathRef *)(v1 + 24));
}

uint64_t sub_20C7CBCB8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7CBCC8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

_DWORD *partial apply for closure #1 in CGPathRef.subpathCount.getter(_DWORD *result)
{
  if (!*result)
  {
    uint64_t v2 = *(void **)(v1 + 16);
    if (__OFADD__(*v2, 1)) {
      __break(1u);
    }
    else {
      ++*v2;
    }
  }
  return result;
}

uint64_t sub_20C7CBD00()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7CBD10()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7CBD20()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7CBD30()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in CGPathRef.endPoints.getter(uint64_t a1)
{
  return closure #1 in CGPathRef.endPoints.getter(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_20C7CBD48()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

void *PaperDocumentFindResult.frames(in:)(char *a1)
{
  id v3 = *(void **)v1;
  uint64_t v4 = *(uint64_t *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(uint64_t *)(v1 + 24);
  double v7 = *(void **)(v1 + 32);
  char v8 = *(unsigned char *)(v1 + 40);
  if ((v8 & 1) == 0)
  {
    id v19 = v3;
    id v20 = objc_msgSend(v19, sel_pages);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFPage);
    unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    outlined copy of PaperDocumentFindResult.Content(v3, v4, v5, v6, v7, 0);
    unint64_t v22 = a1;
    uint64_t ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n = (uint64_t)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7PDFPageCG_So6CGRectVs5NeverOTg5050_s8PaperKit0A18DocumentFindResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n(v21, v19, v22);

    outlined consume of PaperDocumentFindResult.Content(v3, v4, v5, v6, v7, 0);
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
  uint64_t ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n = swift_allocObject();
  *(_OWORD *)(ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n + 16) = xmmword_20C832C20;
  id v10 = v7;
  objc_msgSend(v10, sel_boundsForBox_, 0);
  double v12 = v11;
  unint64_t v13 = &a1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  unint64_t result = *(void **)v13;
  if (*(void *)v13)
  {
    objc_msgSend(result, sel_convertRect_fromPage_, v10, *(double *)&v3, v12 - *(double *)&v6 - *(double *)&v4, *(double *)&v5);
    objc_msgSend(a1, sel_convertRect_fromView_, *(void *)v13);
    *(void *)(ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n + 32) = v15;
    *(void *)(ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v16;
    *(void *)(ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n + 48) = v17;
    *(void *)(ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n + 56) = v18;
LABEL_5:
    outlined consume of PaperDocumentFindResult.Content(v3, v4, v5, v6, v7, v8);
    return (void *)ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n;
  }
  __break(1u);
  return result;
}

void PaperDocumentFindResult.scrollToVisible(in:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  double v7 = *(void **)(v1 + 32);
  if (*(unsigned char *)(v1 + 40))
  {
    char v8 = (id *)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    if (*v8)
    {
      objc_msgSend(*v8, sel_goToRect_onPage_, v7, *(double *)&v4, *(double *)&v3, *(double *)&v5, *(double *)&v6);
      return;
    }
    __break(1u);
    goto LABEL_14;
  }
  id v9 = v4;
  id v10 = objc_msgSend(v9, sel_firstPage);
  if (v10)
  {
    double v11 = v10;
    objc_msgSend(v9, sel_boundsForPage_, v10);
    double v13 = v12;
    double v15 = v14;
    double v17 = v16;
    double v19 = v18;
    id v20 = (id *)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    if (*v20)
    {
      if (!objc_msgSend(*v20, sel_isRectVisible_onPage_, v11, v13, v15, v17, v19))
      {
        if (!*v20)
        {
LABEL_15:
          __break(1u);
          return;
        }
        objc_msgSend(*v20, sel_goToRect_onPage_, v11, v13, v15, v17, v19);
      }

      outlined consume of PaperDocumentFindResult.Content(v4, v3, v5, v6, v7, 0);
      return;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  outlined consume of PaperDocumentFindResult.Content(v4, v3, v5, v6, v7, 0);
}

void PaperDocumentFindResult.draw(for:)(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 40)) {
    return;
  }
  id v3 = *(id *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  id v6 = *(id *)(v1 + 24);
  uint64_t isEscapingClosureAtFileLocation = *(void *)(v1 + 32);
  char v8 = *(id *)v1;
  id v9 = objc_msgSend(v8, sel_pages);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFPage);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62) {
    goto LABEL_10;
  }
  if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    outlined consume of PaperDocumentFindResult.Content(v3, v4, v5, (uint64_t)v6, (void *)isEscapingClosureAtFileLocation, 0);
    return;
  }
  while ((v10 & 0xC000000000000001) != 0)
  {
    id v11 = (id)MEMORY[0x21054E050](0, v10);
LABEL_7:
    double v12 = v11;
    uint64_t v22 = (uint64_t)v6;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_boundsForPage_, v12);
    CGRect v25 = CGRectInset(v24, -4.0, -2.0);
    double x = v25.origin.x;
    double y = v25.origin.y;
    double width = v25.size.width;
    double height = v25.size.height;
    double v17 = (id *)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    if (!*v17) {
      goto LABEL_15;
    }
    objc_msgSend(*v17, sel_convertRect_fromPage_, v12, x, y, width, height);
    double v19 = v18 / width;
    unint64_t v10 = (unint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x263F827A0]), sel_initWithSize_, width, height);
    a1 = swift_allocObject();
    *(void *)(a1 + 16) = v12;
    *(double *)(a1 + 24) = x;
    *(double *)(a1 + 32) = y;
    *(double *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = width;
    *(double *)(a1 + 48) = height;
    *(double *)(a1 + 56) = v19;
    char v8 = (void *)swift_allocObject();
    void v8[2] = partial apply for closure #1 in PaperDocumentFindResult.draw(for:);
    v8[3] = a1;
    aBlock[4] = partial apply for closure #1 in Canvas.registerUndo(_:);
    aBlock[5] = v8;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
    aBlock[3] = &block_descriptor_75;
    id v20 = _Block_copy(aBlock);
    id v6 = v12;
    swift_retain();
    swift_release();
    objc_msgSend((id)v10, sel_imageWithActions_, v20);

    outlined consume of PaperDocumentFindResult.Content(v3, v4, v5, v22, (void *)isEscapingClosureAtFileLocation, 0);
    _Block_release(v20);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v21) {
      goto LABEL_11;
    }
  }
  if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v11 = *(id *)(v10 + 32);
    goto LABEL_7;
  }
  __break(1u);
LABEL_15:
  __break(1u);
}

id PaperDocumentFindResult.Content.pageIndex.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void **)(v0 + 32);
  char v6 = *(unsigned char *)(v0 + 40);
  if (v6)
  {
    id v7 = v5;
    id result = objc_msgSend(v7, sel_document);
    if (result)
    {
      id v9 = result;
      id v10 = objc_msgSend(result, sel_indexForPage_, v7);
LABEL_6:

      outlined consume of PaperDocumentFindResult.Content(v1, v2, v3, v4, v5, v6);
      return v10;
    }
    __break(1u);
  }
  else
  {
    id v11 = v1;
    id v12 = objc_msgSend(v11, sel_document);
    id result = objc_msgSend(v11, sel_firstPage);
    if (result)
    {
      id v9 = result;
      id v10 = objc_msgSend(v12, sel_indexForPage_, result);

      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

void one-time initialization function for verticalComparisonLineTolerance()
{
  static PaperDocumentFindResult.Content.verticalComparisonLineTolerance = 0x4024000000000000;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance PaperDocumentFindResult.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  long long v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  uint64_t v13 = v2;
  char v14 = v3;
  long long v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  uint64_t v10 = v4;
  char v11 = v5;
  return (specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)v9, (uint64_t)v12) & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance PaperDocumentFindResult.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  long long v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  uint64_t v13 = v2;
  char v14 = v3;
  long long v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  uint64_t v10 = v4;
  char v11 = v5;
  return (specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)v12, (uint64_t)v9) & 1) == 0;
}

unint64_t protocol witness for static Comparable.> infix(_:_:) in conformance PaperDocumentFindResult.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  long long v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  uint64_t v13 = v2;
  char v14 = v3;
  long long v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  uint64_t v10 = v4;
  char v11 = v5;
  return (unint64_t)specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)v9, (uint64_t)v12) & 1;
}

void closure #1 in PaperDocumentFindResult.draw(for:)(void *a1, id a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7)
{
  objc_msgSend(a2, sel_boundsForBox_, 0);
  CGAffineTransformMakeTranslation(&t1, v13 - a3, v14 - a4);
  long long v29 = *(_OWORD *)&t1.c;
  long long v32 = *(_OWORD *)&t1.a;
  tdouble x = t1.tx;
  tdouble y = t1.ty;
  CGAffineTransformMake(&t1, 1.0, 0.0, 0.0, -1.0, 0.0, a6);
  long long v17 = *(_OWORD *)&t1.a;
  long long v18 = *(_OWORD *)&t1.c;
  long long v19 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.CGFloat a = v32;
  *(_OWORD *)&t1.CGFloat c = v29;
  t1.tdouble x = tx;
  t1.tdouble y = ty;
  *(_OWORD *)&t2.CGFloat a = v17;
  *(_OWORD *)&t2.CGFloat c = v18;
  *(_OWORD *)&t2.tdouble x = v19;
  CGAffineTransformConcat(&v35, &t1, &t2);
  long long v30 = *(_OWORD *)&v35.c;
  long long v33 = *(_OWORD *)&v35.a;
  CGFloat v20 = v35.tx;
  CGFloat v21 = v35.ty;
  CGAffineTransformMakeScale(&t1, a7, a7);
  long long v22 = *(_OWORD *)&t1.a;
  long long v23 = *(_OWORD *)&t1.c;
  long long v24 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.CGFloat a = v33;
  *(_OWORD *)&t1.CGFloat c = v30;
  t1.tdouble x = v20;
  t1.tdouble y = v21;
  *(_OWORD *)&t2.CGFloat a = v22;
  *(_OWORD *)&t2.CGFloat c = v23;
  *(_OWORD *)&t2.tdouble x = v24;
  CGAffineTransformConcat(&v35, &t1, &t2);
  long long v31 = *(_OWORD *)&v35.c;
  long long v34 = *(_OWORD *)&v35.a;
  CGFloat v25 = v35.tx;
  CGFloat v26 = v35.ty;
  unint64_t v27 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  *(_OWORD *)&t1.CGFloat a = v34;
  *(_OWORD *)&t1.CGFloat c = v31;
  t1.tdouble x = v25;
  t1.tdouble y = v26;
  CGContextConcatCTM(v27, &t1);

  id v28 = objc_msgSend(a1, sel_CGContext);
  objc_msgSend(a2, sel_drawWithBox_toContext_, 0, v28);
}

uint64_t static PaperDocumentFindResult.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static PaperDocumentFindResult.< infix(_:_:)(a1, a2, (uint64_t (*)(_OWORD *, _OWORD *))specialized static PaperDocumentFindResult.Content.< infix(_:_:));
}

uint64_t static PaperDocumentFindResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static PaperDocumentFindResult.< infix(_:_:)(a1, a2, (uint64_t (*)(_OWORD *, _OWORD *))specialized static PaperDocumentFindResult.Content.== infix(_:_:));
}

uint64_t static PaperDocumentFindResult.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *, _OWORD *))
{
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  long long v7 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v7;
  uint64_t v14 = v3;
  char v15 = v4;
  long long v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  uint64_t v11 = v5;
  char v12 = v6;
  return a3(v13, v10) & 1;
}

uint64_t PaperDocumentFindResult.debugDescription.getter()
{
  _StringGuts.grow(_:)(23);
  v0._uint64_t object = (void *)0x800000020C860510;
  v0._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 62;
  v1._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

void *protocol witness for FindResult.frames(in:) in conformance PaperDocumentFindResult(char **a1)
{
  return PaperDocumentFindResult.frames(in:)(*a1);
}

void protocol witness for FindResult.scrollToVisible(in:) in conformance PaperDocumentFindResult(uint64_t *a1)
{
}

void protocol witness for FindResult.draw(for:) in conformance PaperDocumentFindResult(uint64_t *a1)
{
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance PaperDocumentFindResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance PaperDocumentFindResult(a1, a2, a3, a4, (uint64_t (*)(_OWORD *, _OWORD *))specialized static PaperDocumentFindResult.Content.< infix(_:_:));
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance PaperDocumentFindResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v6;
  uint64_t v13 = v4;
  char v14 = v5;
  long long v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  uint64_t v10 = v2;
  char v11 = v3;
  return (specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)v12, (uint64_t)v9) & 1) == 0;
}

unint64_t protocol witness for static Comparable.> infix(_:_:) in conformance PaperDocumentFindResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v6;
  uint64_t v13 = v4;
  char v14 = v5;
  long long v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  uint64_t v10 = v2;
  char v11 = v3;
  return (unint64_t)specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)v12, (uint64_t)v9) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PaperDocumentFindResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance PaperDocumentFindResult(a1, a2, a3, a4, (uint64_t (*)(_OWORD *, _OWORD *))specialized static PaperDocumentFindResult.Content.== infix(_:_:));
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance PaperDocumentFindResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_OWORD *, _OWORD *))
{
  uint64_t v5 = *(void *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 40);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  long long v9 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v9;
  uint64_t v16 = v5;
  char v17 = v6;
  long long v10 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v10;
  uint64_t v13 = v7;
  char v14 = v8;
  return a5(v15, v12) & 1;
}

BOOL specialized static PaperDocumentFindResult.Content.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)a2;
  CGFloat v4 = *(double *)(a2 + 8);
  CGFloat v7 = *(double *)(a2 + 16);
  CGFloat v6 = *(double *)(a2 + 24);
  char v8 = *(void **)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 40);
  long long v30 = *(void **)a1;
  CGFloat v26 = *(double *)(a1 + 8);
  CGFloat v29 = *(double *)(a1 + 16);
  char v27 = *(unsigned char *)(a1 + 40);
  id v10 = PaperDocumentFindResult.Content.pageIndex.getter();
  if (v10 != PaperDocumentFindResult.Content.pageIndex.getter())
  {
    CGFloat v24 = *(double *)&v2;
    CGFloat v25 = v3;
    if (v27)
    {
      if (v9)
      {
        outlined copy of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
        outlined copy of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, 1);
        outlined copy of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
        outlined copy of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, 1);
        id v12 = objc_msgSend(v3, sel_document);
        if (v12)
        {
          id v28 = v12;
          id v13 = objc_msgSend(v8, sel_document);
          if (v13)
          {
            char v14 = v13;
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            long long v23 = v14;
            if (static NSObject.== infix(_:_:)())
            {
              *(void *)&v31.origin.double x = v30;
              v31.origin.double y = v26;
              v31.size.double width = v29;
              v31.size.double height = v24;
              *(void *)&v32.origin.double x = v5;
              v32.origin.double y = v4;
              v32.size.double width = v7;
              v32.size.double height = v6;
              BOOL v11 = CGRectEqualToRect(v31, v32);

              outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
              outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, *(uint64_t *)&v24, v3, 1);
              outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, *(uint64_t *)&v24, v3, 1);
              outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
              return v11;
            }
            outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
            outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, *(uint64_t *)&v24, v3, 1);
            outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, *(uint64_t *)&v24, v3, 1);
            outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
          }
          else
          {
            outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
            outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, 1);
            outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, 1);
            outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
          }
          return 0;
        }
        outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
        outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, 1);
        outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, 1);
        char v15 = v5;
        uint64_t v16 = *(void *)&v4;
        uint64_t v17 = *(void *)&v7;
        uint64_t v18 = *(void *)&v6;
        long long v19 = v8;
        char v20 = 1;
LABEL_11:
        outlined consume of PaperDocumentFindResult.Content(v15, v16, v17, v18, v19, v20);
        return 0;
      }
    }
    else if ((v9 & 1) == 0)
    {
      outlined copy of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 0);
      outlined copy of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, 0);
      id v21 = objc_msgSend(v30, sel_compare_, v5);
      outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v25, 0);
      outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 0);
      return v21 == 0;
    }
    outlined copy of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, v9);
    outlined copy of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, v27);
    outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, v27);
    char v15 = v5;
    uint64_t v16 = *(void *)&v4;
    uint64_t v17 = *(void *)&v7;
    uint64_t v18 = *(void *)&v6;
    long long v19 = v8;
    char v20 = v9;
    goto LABEL_11;
  }
  return 1;
}

id specialized static PaperDocumentFindResult.Content.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(uint64_t *)(a1 + 24);
  uint64_t v76 = *(uint64_t *)(a1 + 8);
  uint64_t v77 = *(void *)(a1 + 16);
  CGFloat v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v78 = *(void *)(a2 + 16);
  char v8 = *(void **)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 40);
  id v75 = v4;
  char v74 = *(unsigned char *)(a1 + 40);
  if (v74)
  {
    id result = objc_msgSend(v4, sel_document);
    if (!result)
    {
      __break(1u);
      goto LABEL_44;
    }
    id v11 = result;
    outlined consume of PaperDocumentFindResult.Content(v2, v76, v77, v3, v4, 1);
    if ((v9 & 1) == 0)
    {
LABEL_4:
      id v12 = v5;
      uint64_t v13 = v6;
      uint64_t v14 = v7;
      char v15 = v8;
      uint64_t v16 = v12;
      id v17 = objc_msgSend(v12, sel_document);
      goto LABEL_8;
    }
  }
  else
  {
    id v11 = objc_msgSend(v2, sel_document);
    if ((v9 & 1) == 0) {
      goto LABEL_4;
    }
  }
  id result = objc_msgSend(v8, sel_document);
  if (!result)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  id v17 = result;
  uint64_t v16 = v5;
  uint64_t v18 = v5;
  uint64_t v13 = v6;
  uint64_t v19 = v6;
  uint64_t v14 = v7;
  uint64_t v20 = v7;
  char v15 = v8;
  outlined consume of PaperDocumentFindResult.Content(v18, v19, v78, v20, v8, v9);
LABEL_8:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  char v21 = static NSObject.== infix(_:_:)();

  if ((v21 & 1) == 0) {
    return 0;
  }
  uint64_t v73 = v3;
  id v22 = PaperDocumentFindResult.Content.pageIndex.getter();
  if (v22 != PaperDocumentFindResult.Content.pageIndex.getter())
  {
    id v33 = PaperDocumentFindResult.Content.pageIndex.getter();
    return (id)((uint64_t)v33 < (uint64_t)PaperDocumentFindResult.Content.pageIndex.getter());
  }
  uint64_t v70 = v15;
  unint64_t v71 = v16;
  uint64_t v72 = v14;
  char v69 = v9;
  if ((v74 & 1) == 0)
  {
    if ((v9 & 1) == 0)
    {
      outlined copy of PaperDocumentFindResult.Content(v2, v76, v77, v3, v75, 0);
      outlined copy of PaperDocumentFindResult.Content(v16, v13, v78, v14, v15, 0);
      id v51 = objc_msgSend(v2, sel_compare_, v16);
      outlined consume of PaperDocumentFindResult.Content(v2, v76, v77, v73, v75, 0);
      outlined consume of PaperDocumentFindResult.Content(v16, v13, v78, v14, v15, 0);
      return (id)(v51 == (id)-1);
    }
    outlined copy of PaperDocumentFindResult.Content(v2, v76, v77, v3, v75, 0);
    uint64_t v32 = v76;
    outlined copy of PaperDocumentFindResult.Content(v16, v13, v78, v14, v15, 1);
    outlined consume of PaperDocumentFindResult.Content(v2, v76, v77, v73, v75, 0);
    outlined consume of PaperDocumentFindResult.Content(v16, v13, v78, v14, v15, 1);
    outlined copy of PaperDocumentFindResult.Content(v2, v76, v77, v73, v75, 0);
    id v34 = v2;
    id result = objc_msgSend(v34, sel_firstPage);
    if (result)
    {
      CGAffineTransform v35 = result;
      uint64_t v29 = v73;
      objc_msgSend(v34, sel_boundsForPage_, result);
      double v31 = v36;

      outlined consume of PaperDocumentFindResult.Content(v2, v76, v77, v73, v75, 0);
      uint64_t v27 = v77;
      outlined consume of PaperDocumentFindResult.Content(v2, v76, v77, v73, v75, 0);
      long long v23 = v15;
      uint64_t v26 = v13;
      goto LABEL_18;
    }
    goto LABEL_45;
  }
  outlined copy of PaperDocumentFindResult.Content(v2, v76, v77, v3, v75, 1);
  long long v23 = v15;
  outlined copy of PaperDocumentFindResult.Content(v16, v13, v78, v14, v15, v9);
  CGFloat v24 = v16;
  char v25 = v9;
  uint64_t v26 = v13;
  uint64_t v27 = v77;
  outlined consume of PaperDocumentFindResult.Content(v2, v76, v77, v3, v75, 1);
  uint64_t v28 = v14;
  uint64_t v29 = v3;
  outlined consume of PaperDocumentFindResult.Content(v24, v13, v78, v28, v70, v25);
  objc_msgSend(v75, sel_boundsForBox_, 0);
  double v31 = v30 - *(double *)&v3 - *(double *)&v76;
  if (v25)
  {
    uint64_t v32 = v76;
LABEL_18:
    objc_msgSend(v23, sel_boundsForBox_, 0);
    double v38 = v37 - *(double *)&v72 - *(double *)&v26;
    char v39 = v74;
    uint64_t v40 = v27;
    goto LABEL_21;
  }
  outlined copy of PaperDocumentFindResult.Content(v71, v13, v78, v72, v70, 0);
  id v41 = v71;
  id result = objc_msgSend(v41, sel_firstPage);
  if (!result)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  char v42 = result;
  objc_msgSend(v41, sel_boundsForPage_, result);
  double v38 = v43;

  outlined consume of PaperDocumentFindResult.Content(v71, v13, v78, v72, v70, 0);
  outlined consume of PaperDocumentFindResult.Content(v71, v13, v78, v72, v70, 0);
  long long v23 = v70;
  uint64_t v32 = v76;
  uint64_t v40 = v77;
  char v39 = v74;
LABEL_21:
  double v44 = vabdd_f64(v31, v38);
  if (one-time initialization token for verticalComparisonLineTolerance != -1) {
    swift_once();
  }
  if (*(double *)&static PaperDocumentFindResult.Content.verticalComparisonLineTolerance < v44)
  {
    if (v39)
    {
      objc_msgSend(v75, sel_boundsForBox_, 0, *(double *)&static PaperDocumentFindResult.Content.verticalComparisonLineTolerance);
      double v46 = v45 - *(double *)&v29 - *(double *)&v32;
      if (v69)
      {
LABEL_26:
        objc_msgSend(v23, sel_boundsForBox_, 0);
        return (id)(v47 - *(double *)&v72 - *(double *)&v26 < v46);
      }
LABEL_33:
      outlined copy of PaperDocumentFindResult.Content(v71, v26, v78, v72, v23, v69);
      id v55 = v71;
      id result = objc_msgSend(v55, sel_firstPage);
      if (result)
      {
        uint64_t v56 = v26;
        CGPathRef v57 = v23;
        uint64_t v58 = result;
        objc_msgSend(v55, sel_boundsForPage_, result);
        double v60 = v59;

        outlined consume of PaperDocumentFindResult.Content(v71, v56, v78, v72, v57, v69);
        outlined consume of PaperDocumentFindResult.Content(v71, v56, v78, v72, v57, v69);
        return (id)(v60 < v46);
      }
      goto LABEL_48;
    }
    outlined copy of PaperDocumentFindResult.Content(v2, v32, v40, v29, v75, 0);
    id v52 = v2;
    id result = objc_msgSend(v52, sel_firstPage);
    if (result)
    {
      id v53 = result;
      objc_msgSend(v52, sel_boundsForPage_, result);
      double v46 = v54;

      outlined consume of PaperDocumentFindResult.Content(v2, v32, v40, v29, v75, 0);
      outlined consume of PaperDocumentFindResult.Content(v2, v32, v40, v29, v75, 0);
      long long v23 = v70;
      if (v69) {
        goto LABEL_26;
      }
      goto LABEL_33;
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v39)
  {
    double v49 = *(double *)&v2;
    objc_msgSend(v75, sel_boundsForBox_, 0, *(double *)&static PaperDocumentFindResult.Content.verticalComparisonLineTolerance);
    if (v69)
    {
LABEL_29:
      double v50 = *(double *)&v71;
      objc_msgSend(v23, sel_boundsForBox_, 0);
      return (id)(v49 < v50);
    }
  }
  else
  {
    outlined copy of PaperDocumentFindResult.Content(v2, v32, v40, v29, v75, 0);
    id v61 = v2;
    id result = objc_msgSend(v61, sel_firstPage);
    if (!result)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    char v62 = result;
    objc_msgSend(v61, sel_boundsForPage_, result);
    double v49 = v63;

    outlined consume of PaperDocumentFindResult.Content(v2, v32, v40, v29, v75, 0);
    outlined consume of PaperDocumentFindResult.Content(v2, v32, v40, v29, v75, 0);
    long long v23 = v70;
    if (v69) {
      goto LABEL_29;
    }
  }
  outlined copy of PaperDocumentFindResult.Content(v71, v26, v78, v72, v23, v69);
  id v64 = v71;
  id result = objc_msgSend(v64, sel_firstPage);
  if (!result)
  {
LABEL_50:
    __break(1u);
    return result;
  }
  uint64_t v65 = v26;
  char v66 = v23;
  uint64_t v67 = result;
  objc_msgSend(v64, sel_boundsForPage_, result);
  double v50 = v68;

  outlined consume of PaperDocumentFindResult.Content(v71, v65, v78, v72, v66, v69);
  outlined consume of PaperDocumentFindResult.Content(v71, v65, v78, v72, v66, v69);
  return (id)(v49 < v50);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7PDFPageCG_So6CGRectVs5NeverOTg5050_s8PaperKit0A18DocumentFindResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n(unint64_t a1, void *a2, char *a3)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v6 = MEMORY[0x263F8EE78];
    if (!v5) {
      return (void *)v6;
    }
    uint64_t v24 = MEMORY[0x263F8EE78];
    id result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0) {
      break;
    }
    uint64_t v6 = v24;
    char v8 = &a3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    uint64_t v9 = 0;
    while (v5 != v9)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v10 = (id)MEMORY[0x21054E050](v9, a1);
      }
      else {
        id v10 = *(id *)(a1 + 8 * v9 + 32);
      }
      id v11 = v10;
      objc_msgSend(a2, sel_boundsForPage_, v10);
      id result = *(void **)v8;
      if (!*(void *)v8) {
        goto LABEL_18;
      }
      objc_msgSend(result, sel_convertRect_fromPage_, v11);
      objc_msgSend(a3, sel_convertRect_fromView_, *(void *)v8);
      uint64_t v13 = v12;
      uint64_t v15 = v14;
      uint64_t v17 = v16;
      uint64_t v19 = v18;

      unint64_t v21 = *(void *)(v24 + 16);
      unint64_t v20 = *(void *)(v24 + 24);
      if (v21 >= v20 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      }
      ++v9;
      *(void *)(v24 + 16) = v21 + 1;
      id v22 = (void *)(v24 + 32 * v21);
      v22[4] = v13;
      v22[5] = v15;
      v22[6] = v17;
      v22[7] = v19;
      if (v5 == v9) {
        return (void *)v6;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_20C7CDD48()
{
  return MEMORY[0x270FA0238](v0, 64, 7);
}

void partial apply for closure #1 in PaperDocumentFindResult.draw(for:)(void *a1)
{
  closure #1 in PaperDocumentFindResult.draw(for:)(a1, *(id *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), *(CGFloat *)(v1 + 48), *(CGFloat *)(v1 + 56));
}

uint64_t sub_20C7CDD94()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_75(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_75()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type PaperDocumentView and conformance PaperDocumentView()
{
  unint64_t result = lazy protocol witness table cache variable for type PaperDocumentView and conformance PaperDocumentView;
  if (!lazy protocol witness table cache variable for type PaperDocumentView and conformance PaperDocumentView)
  {
    type metadata accessor for PaperDocumentView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentView and conformance PaperDocumentView);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PaperDocumentFindResult(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PaperDocumentFindResult and conformance PaperDocumentFindResult();
  *(void *)(a1 + 8) = result;
  return result;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PaperDocumentFindResult()
{
  return &type metadata for PaperDocumentFindResult;
}

void destroy for PaperDocumentFindResult(uint64_t a1)
{
}

uint64_t initializeWithCopy for PaperDocumentFindResult(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void **)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined copy of PaperDocumentFindResult.Content(*(void **)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v8;
  return a1;
}

uint64_t assignWithCopy for PaperDocumentFindResult(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void **)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined copy of PaperDocumentFindResult.Content(*(void **)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void **)(a1 + 32);
  char v14 = *(unsigned char *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v8;
  outlined consume of PaperDocumentFindResult.Content(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for PaperDocumentFindResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void **)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 40);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v4;
  outlined consume of PaperDocumentFindResult.Content(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperDocumentFindResult(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PaperDocumentFindResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PaperDocumentFindResult.Content(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t destructiveInjectEnumTag for PaperDocumentFindResult.Content(uint64_t result, char a2)
{
  *(unsigned char *)(result + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = a2 & 1;
  return result;
}

void *type metadata accessor for PaperDocumentFindResult.Content()
{
  return &unk_26C163840;
}

unint64_t lazy protocol witness table accessor for type PaperDocumentFindResult.Content and conformance PaperDocumentFindResult.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type PaperDocumentFindResult.Content and conformance PaperDocumentFindResult.Content;
  if (!lazy protocol witness table cache variable for type PaperDocumentFindResult.Content and conformance PaperDocumentFindResult.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentFindResult.Content and conformance PaperDocumentFindResult.Content);
  }
  return result;
}

uint64_t PaperKitPDFPage.encodePaperPage<A, B>(_:_:id:capsule:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v111 = a8;
  uint64_t v106 = a6;
  uint64_t v91 = a4;
  uint64_t v99 = a1;
  uint64_t v100 = a3;
  uint64_t v113 = a5;
  uint64_t v90 = *(void *)(a5 - 8);
  uint64_t v104 = a10;
  uint64_t v94 = a9;
  MEMORY[0x270FA5388](a1);
  uint64_t v89 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = v12;
  uint64_t v88 = type metadata accessor for Ref();
  uint64_t v87 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v86 = (char *)&v79 - v13;
  uint64_t v14 = type metadata accessor for CRCodableVersion();
  uint64_t v97 = *(void *)(v14 - 8);
  uint64_t v98 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v95 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for CRKeyPath();
  uint64_t v84 = *(void *)(v85 - 8);
  MEMORY[0x270FA5388](v85);
  unint64_t v83 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v93 = (char *)&v79 - v18;
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_3<TaggedPaperPage>>>);
  uint64_t v101 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105);
  uint64_t v103 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Signature>?);
  MEMORY[0x270FA5388](v20 - 8);
  id v22 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v108 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  char v25 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)&v79 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = (void *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  unint64_t v109 = *(v115 - 1);
  MEMORY[0x270FA5388](v115);
  double v30 = (char *)&v79 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v31 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v32 = *(v31 - 1);
  MEMORY[0x270FA5388](v31);
  id v34 = (char *)&v79 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v36 = MEMORY[0x270FA5388](v35);
  double v38 = (char *)&v79 - v37;
  char v39 = *(void (**)(uint64_t, uint64_t))(v111 + 72);
  uint64_t v96 = a2;
  uint64_t v81 = v111 + 72;
  char v80 = v39;
  ((void (*)(uint64_t, double))v39)(v113, v36);
  uint64_t v112 = v32;
  uint64_t v40 = *(void (**)(char *, char *, void *))(v32 + 16);
  id v107 = v38;
  v40(v34, v38, v31);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v114 = v30;
  char v82 = v34;
  unint64_t v110 = v31;
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  id v41 = (uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 48);
  char v42 = (void (**)(char *, char *, uint64_t))(v108 + 32);
  double v43 = (void (**)(char *, uint64_t))(v108 + 8);
  do
  {
    dispatch thunk of IteratorProtocol.next()();
    int v44 = (*v41)(v28, 1, v23);
    if (v44 == 1) {
      break;
    }
    (*v42)(v25, v28, v23);
    SharedTagged_9.tagged7.getter();
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Signature>);
    int v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v22, 1, v45);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for Ref<Signature>?);
    (*v43)(v25, v23);
  }
  while (v46 == 1);
  (*(void (**)(char *, void *))(v109 + 8))(v114, v115);
  uint64_t v47 = v112 + 8;
  CGPathRef v48 = *(uint64_t (**)(char *, void *))(v112 + 8);
  uint64_t result = v48(v107, v110);
  if (v44 == 1)
  {
    uint64_t v115 = v48;
    uint64_t v112 = v47;
    uint64_t v50 = static CRKeyPath.unique.getter();
    MEMORY[0x270FA5388](v50);
    uint64_t v51 = v106;
    *(&v79 - 8) = v113;
    *(&v79 - 7) = v51;
    uint64_t v52 = v111;
    *(&v79 - 6) = v102;
    *(&v79 - 5) = v52;
    uint64_t v53 = v104;
    *(&v79 - 4) = v94;
    *(&v79 - 3) = v53;
    uint64_t v54 = v100;
    *(&v79 - 2) = v96;
    *(&v79 - 1) = v54;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_3<TaggedPaperPage>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_3<TaggedPaperPage>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_3<TaggedPaperPage>>);
    Capsule<>.init(id:initClosure:)();
    uint64_t v56 = v97;
    uint64_t v55 = v98;
    CGPathRef v57 = v95;
    (*(void (**)(char *, void, uint64_t))(v97 + 104))(v95, *MEMORY[0x263F32EB8], v98);
    uint64_t v58 = Capsule<>.serializedData(_:version:allowedAppFormats:)();
    unint64_t v60 = v59;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v55);
    isCGFloat a = Data._bridgeToObjectiveC()().super.isa;
    char v62 = (void *)MEMORY[0x21054D080](4935760, 0xE300000000000000);
    id v63 = v92;
    objc_msgSend(v92, sel_setApplicationData_withName_, isa, v62);

    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v83, v54, v85);
    uint64_t v114 = (char *)v58;
    id v64 = v86;
    uint64_t v65 = v113;
    Ref.init(id:)();
    char v66 = v89;
    uint64_t v67 = v91;
    unint64_t v109 = v60;
    uint64_t v68 = v88;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v87 + 8))(v64, v68);
    unint64_t v69 = (unint64_t)v82;
    v80(v65, v52);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v66, v65);
    uint64_t v70 = type metadata accessor for Capsule();
    uint64_t v71 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v73 = v110;
    uint64_t v74 = PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(4, v69, v67, v110, v70, v71, WitnessTable);
    unint64_t v76 = v75;
    ((void (*)(unint64_t, void *))v115)(v69, v73);
    Class v77 = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v74, v76);
    uint64_t v78 = (void *)MEMORY[0x21054D080](0x687361484B5050, 0xE700000000000000);
    objc_msgSend(v63, sel_setApplicationData_withName_, v77, v78);
    outlined consume of Data._Representation((uint64_t)v114, v109);

    return (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v103, v105);
  }
  return result;
}

uint64_t PaperKitPDFPage.decodePaperPage<A>(pageID:in:assetManager:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v132 = a1;
  uint64_t v131 = a4;
  uint64_t v130 = *a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v120 = (uint64_t)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v124 = *(void *)(v128 - 8);
  MEMORY[0x270FA5388](v128);
  uint64_t v123 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v122 = *(void *)(v126 - 8);
  MEMORY[0x270FA5388](v126);
  uint64_t v119 = (char *)&v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v125 = (char *)&v119 - v12;
  uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_3<TaggedPaperPage>>>);
  uint64_t v121 = *(void *)(v127 - 8);
  MEMORY[0x270FA5388](v127);
  Swift::String v129 = (char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v140 = (char *)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v141 = (char *)&v119 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  unint64_t v145 = (unint64_t)&v119 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v139 = (char *)&v119 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v144 = (char *)&v119 - v24;
  MEMORY[0x270FA5388](v25);
  os_log_t v138 = (char *)&v119 - v26;
  uint64_t v146 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for AnnotationImporter.ImportedElement();
  uint64_t v27 = *((void *)v146 - 1);
  MEMORY[0x270FA5388](v146);
  uint64_t v29 = (char *)&v119 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v31 = MEMORY[0x270FA5388](v30);
  uint64_t v33 = (char *)&v119 - v32;
  objc_msgSend(v4, sel_boundsForBox_, 0, v31);
  uint64_t v133 = (char *)v4;
  uint64_t v134 = a3;
  uint64_t v135 = a2;
  static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(v4, (uint64_t)a2, a3, 1.0, v34, v35, v36, v37);
  uint64_t v39 = *(void *)(v38 + 16);
  uint64_t v142 = v21;
  uint64_t v136 = v38;
  if (v39)
  {
    uint64_t v40 = v38 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    uint64_t v41 = *(void *)(v27 + 72);
    char v42 = (void (**)(uint64_t, char *, uint64_t))(v21 + 32);
    char v143 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
    double v43 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
    unint64_t v147 = MEMORY[0x263F8EE78];
    uint64_t v44 = (uint64_t)v141;
    uint64_t v137 = v43;
    do
    {
      _s8PaperKit18AnnotationImporterV15ImportedElementOWOcTm_0(v40, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
      _s8PaperKit18AnnotationImporterV15ImportedElementOWOcTm_0((uint64_t)v33, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*v143)(v44, 1, 1, v20);
        outlined destroy of AnnotationImporter.ImportedElement((uint64_t)v29);
      }
      else
      {
        (*v42)(v44, v29, v20);
        (*v143)(v44, 0, 1, v20);
      }
      uint64_t v45 = v145;
      outlined init with take of SharedTagged_9<TaggedCanvasElement>?(v44, v145);
      outlined destroy of AnnotationImporter.ImportedElement((uint64_t)v33);
      if ((*v43)(v45, 1, v20) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v45, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      }
      else
      {
        uint64_t v46 = v41;
        uint64_t v47 = *v42;
        CGPathRef v48 = v138;
        (*v42)((uint64_t)v138, (char *)v45, v20);
        v47((uint64_t)v144, v48, v20);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v49 = v147;
        }
        else {
          unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v147 + 16) + 1, 1, v147);
        }
        unint64_t v51 = *(void *)(v49 + 16);
        unint64_t v50 = *(void *)(v49 + 24);
        if (v51 >= v50 >> 1) {
          unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1, v49);
        }
        *(void *)(v49 + 16) = v51 + 1;
        unint64_t v52 = (*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80);
        unint64_t v147 = v49;
        v47(v49 + v52 + *(void *)(v142 + 72) * v51, v144, v20);
        uint64_t v44 = (uint64_t)v141;
        uint64_t v41 = v46;
        double v43 = v137;
      }
      v40 += v41;
      --v39;
    }
    while (v39);
  }
  else
  {
    unint64_t v147 = MEMORY[0x263F8EE78];
  }
  uint64_t v53 = *(void *)(v147 + 16);
  if (v53)
  {
    uint64_t v146 = *(void (**)(char *, uint64_t, uint64_t))(v142 + 16);
    uint64_t v54 = v147 + ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80));
    uint64_t v55 = (void (**)(char *, uint64_t))(v142 + 8);
    uint64_t v56 = *(void *)(v142 + 72);
    swift_bridgeObjectRetain();
    uint64_t v58 = v139;
    uint64_t v57 = (uint64_t)v140;
    while (1)
    {
      v146(v58, v54, v20);
      SharedTagged_9.unknown.getter();
      uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>);
      int v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 48))(v57, 1, v59);
      outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for Ref<UnknownCanvasElement>?);
      (*v55)(v58, v20);
      if (v60 != 1) {
        break;
      }
      v54 += v56;
      if (!--v53)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v91 = v131;
    char v62 = v133;
    goto LABEL_28;
  }
LABEL_21:
  id v61 = (void *)MEMORY[0x21054D080](4935760, 0xE300000000000000);
  char v62 = v133;
  id v63 = objc_msgSend(v133, sel_applicationDataWithName_, v61);

  if (!v63)
  {
    swift_bridgeObjectRelease();
    uint64_t v91 = v131;
LABEL_28:
    uint64_t v69 = v132;
    uint64_t v70 = (uint64_t)v135;
LABEL_38:
    static PaperDocumentPage.create<A>(pdfPage:pageID:in:assetManager:importedElements:)(v62, v69, v70, v136, v91);
    return swift_bridgeObjectRelease();
  }
  uint64_t v64 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v66 = v65;

  uint64_t v67 = (void *)MEMORY[0x21054D080](0x687361484B5050, 0xE700000000000000);
  id v68 = objc_msgSend(v62, sel_applicationDataWithName_, v67);

  uint64_t v69 = v132;
  uint64_t v70 = (uint64_t)v135;
  if (!v68)
  {
    swift_bridgeObjectRelease();
LABEL_32:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v92 = type metadata accessor for Logger();
    __swift_project_value_buffer(v92, (uint64_t)logger);
    uint64_t v93 = Logger.logObject.getter();
    os_log_type_t v94 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v93, v94))
    {
      uint64_t v95 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v95 = 0;
      _os_log_impl(&dword_20C2D7000, v93, v94, "Importing PaperKit page skipped due to hash difference.", v95, 2u);
      MEMORY[0x210550270](v95, -1, -1);

      outlined consume of Data._Representation(v64, v66);
    }
    else
    {
      outlined consume of Data._Representation(v64, v66);
    }
    goto LABEL_37;
  }
  uint64_t v71 = (void (*)(char *, uint64_t, uint64_t))static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v73 = v72;

  int v74 = Data.paperKitHashVersion.getter((uint64_t)v71, v73);
  if ((v74 & 0x100) != 0)
  {
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation((uint64_t)v71, v73);
    goto LABEL_32;
  }
  int v75 = v74;
  uint64_t v144 = (char *)v64;
  unint64_t v145 = v66;
  v148[0] = v147;
  uint64_t v149 = v70;
  unint64_t v76 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SharedTagged_9<TaggedCanvasElement>]);
  uint64_t v77 = v130 + *MEMORY[0x263F33088];
  uint64_t v78 = *(void *)(v77 + 8);
  char v143 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))v77;
  uint64_t v79 = type metadata accessor for Capsule.Ref();
  uint64_t v146 = v71;
  uint64_t v80 = v79;
  uint64_t v81 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [SharedTagged_9<TaggedCanvasElement>] and conformance [A], &demangling cache variable for type metadata for [SharedTagged_9<TaggedCanvasElement>]);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v83 = v80;
  uint64_t v84 = v146;
  uint64_t v85 = PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(v75, (unint64_t)v148, (uint64_t)&v149, v76, v83, v81, WitnessTable);
  unint64_t v87 = v86;
  swift_bridgeObjectRelease();
  unint64_t v88 = v73;
  char v89 = specialized static Data.== infix(_:_:)((uint64_t)v84, v73, v85, v87);
  outlined consume of Data._Representation(v85, v87);
  if ((v89 & 1) == 0)
  {
    outlined consume of Data._Representation((uint64_t)v84, v88);
    uint64_t v64 = (uint64_t)v144;
    unint64_t v66 = v145;
    goto LABEL_32;
  }
  unint64_t v147 = v88;
  outlined copy of Data._Representation((uint64_t)v144, v145);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_3<TaggedPaperPage>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v90 = v128;
  Capsule<>.init(serializedData:allowedAppFormats:)();
  Capsule.Ref.import<A>(_:)();
  uint64_t v97 = v123;
  Capsule<>.root.getter();
  uint64_t v98 = v125;
  CRRegister.value.getter();
  (*(void (**)(char *, uint64_t))(v124 + 8))(v97, v90);
  uint64_t v99 = v126;
  uint64_t v100 = (void (*)(void *, void))SharedTagged_3.subscript.modify();
  uint64_t v102 = *(void *)(v101 + 24);
  uint64_t v103 = *(void *)(v101 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v101, v102);
  uint64_t v104 = *(void (**)(uint64_t, uint64_t, void (**)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v103 + 104);
  uint64_t v105 = v103;
  uint64_t v106 = v98;
  v104(v136, v70, v143, v78, v102, v105);
  v100(v148, 0);
  id v107 = (void (*)(void *, void))SharedTagged_3.subscript.modify();
  uint64_t v109 = *(void *)(v108 + 24);
  uint64_t v110 = *(void *)(v108 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v108, v109);
  char v111 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 168))(v62, v69, v134, v109, v110);
  v107(v148, 0);
  if ((v111 & 1) == 0)
  {
    outlined consume of Data._Representation((uint64_t)v146, v147);
    outlined consume of Data._Representation((uint64_t)v144, v145);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v106, v99);
    (*(void (**)(char *, uint64_t))(v121 + 8))(v129, v127);
LABEL_37:
    uint64_t v91 = v131;
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();
  uint64_t v112 = v120;
  _s8PaperKit18AnnotationImporterV15ImportedElementOWOcTm_0(v69, v120, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  uint64_t v113 = type metadata accessor for PDFPageID();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56))(v112, 0, 1, v113);
  uint64_t v114 = type metadata accessor for PageId(0);
  uint64_t v115 = v112 + *(int *)(v114 + 20);
  uint64_t v116 = v122;
  (*(void (**)(char *, char *, uint64_t))(v122 + 16))(v119, v106, v99);
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  WeakTagged_3.init(_:)();
  uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v117 - 8) + 56))(v115, 0, 1, v117);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v114 - 8) + 56))(v112, 0, 1, v114);
  uint64_t v118 = (uint64_t)&v62[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  swift_beginAccess();
  outlined assign with take of PageId?(v112, v118);
  swift_endAccess();
  outlined consume of Data._Representation((uint64_t)v146, v147);
  outlined consume of Data._Representation((uint64_t)v144, v145);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v129, v127);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v116 + 32))(v131, v106, v99);
}

uint64_t PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(int a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v182 = a7;
  uint64_t v181 = a5;
  uint64_t v180 = a3;
  unint64_t v199 = a2;
  int v11 = a1;
  uint64_t v171 = 0;
  int v12 = a1;
  uint64_t v210 = *MEMORY[0x263EF8340];
  uint64_t v167 = type metadata accessor for SHA256Digest();
  uint64_t v164 = *(void *)(v167 - 8);
  MEMORY[0x270FA5388](v167);
  uint64_t v166 = (char *)&v157 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v197 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x270FA5388](v197);
  uint64_t v193 = (uint64_t)&v157 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v190 = (uint64_t)&v157 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v157 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v191 = (uint64_t)&v157 - v21;
  uint64_t v22 = type metadata accessor for CRKeyPath();
  unint64_t v192 = *(void (***)(void, void))(v22 - 8);
  MEMORY[0x270FA5388](v22);
  v188 = (char *)&v157 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  v201 = (char *)&v157 - v25;
  uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v185 = *(void *)(v172 - 8);
  MEMORY[0x270FA5388](v172);
  v173 = (char *)&v157 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v27 - 8);
  v186 = (char *)&v157 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v198 = (void (**)(char *, unint64_t, id))*(a4 - 1);
  MEMORY[0x270FA5388](v29);
  uint64_t v195 = (char *)&v157 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v196 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8);
  id v200 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v160 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v183 = (char *)&v157 - v31;
  uint64_t v170 = type metadata accessor for SHA256();
  uint64_t v163 = *(void *)(v170 - 8);
  MEMORY[0x270FA5388](v170);
  unint64_t v168 = (char *)&v157 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  double v35 = (char *)&v157 - v34;
  SHA256.init()();
  id v174 = v8;
  objc_msgSend(v8, sel_boundsForBox_, 0);
  unint64_t v169 = v35;
  if (v12 == 1)
  {
    uint64_t v40 = CGRect.rawValue.getter(v36, v37, v38, v39);
    uint64_t v42 = v40;
    unint64_t v43 = v41;
    uint64_t v44 = v172;
    switch(v41 >> 62)
    {
      case 1uLL:
        if (v40 >> 32 < (int)v40) {
          goto LABEL_87;
        }
        outlined copy of Data._Representation(v40, v41);
        uint64_t v46 = v171;
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v42, v42 >> 32);
        uint64_t v171 = v46;
        break;
      case 2uLL:
        uint64_t v47 = *(void *)(v40 + 16);
        uint64_t v48 = *(void *)(v40 + 24);
        outlined copy of Data._Representation(v40, v41);
        swift_retain();
        swift_retain();
        uint64_t v49 = v47;
        uint64_t v50 = v171;
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v49, v48);
        uint64_t v171 = v50;
        swift_release();
        swift_release();
        break;
      case 3uLL:
        lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
        *(void *)&long long aBlock = 0;
        *(void *)((char *)&aBlock + 6) = 0;
        goto LABEL_9;
      default:
        *(void *)&long long aBlock = v40;
        WORD4(aBlock) = v41;
        BYTE10(aBlock) = BYTE2(v41);
        BYTE11(aBlock) = BYTE3(v41);
        BYTE12(aBlock) = BYTE4(v41);
        BYTE13(aBlock) = BYTE5(v41);
        lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
LABEL_9:
        dispatch thunk of HashFunction.update(bufferPointer:)();
        break;
    }
    outlined consume of Data._Representation(v42, v43);
    outlined consume of Data._Representation(v42, v43);
    objc_msgSend(v174, sel_boundsForBox_, 1);
    uint64_t v55 = CGRect.rawValue.getter(v51, v52, v53, v54);
    uint64_t v57 = v55;
    unint64_t v58 = v56;
    uint64_t v45 = v22;
    switch(v56 >> 62)
    {
      case 1uLL:
        if (v55 >> 32 < (int)v55) {
          goto LABEL_88;
        }
        outlined copy of Data._Representation(v55, v56);
        uint64_t v59 = v171;
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v57, v57 >> 32);
        uint64_t v171 = v59;
        break;
      case 2uLL:
        uint64_t v60 = *(void *)(v55 + 16);
        uint64_t v61 = *(void *)(v55 + 24);
        outlined copy of Data._Representation(v55, v56);
        swift_retain();
        swift_retain();
        uint64_t v62 = v60;
        uint64_t v63 = v171;
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v62, v61);
        uint64_t v171 = v63;
        swift_release();
        swift_release();
        break;
      case 3uLL:
        lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
        *(void *)&long long aBlock = 0;
        *(void *)((char *)&aBlock + 6) = 0;
        goto LABEL_16;
      default:
        *(void *)&long long aBlock = v55;
        WORD4(aBlock) = v56;
        BYTE10(aBlock) = BYTE2(v56);
        BYTE11(aBlock) = BYTE3(v56);
        BYTE12(aBlock) = BYTE4(v56);
        BYTE13(aBlock) = BYTE5(v56);
        lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
LABEL_16:
        dispatch thunk of HashFunction.update(bufferPointer:)();
        break;
    }
    outlined consume of Data._Representation(v57, v58);
    outlined consume of Data._Representation(v57, v58);
  }
  else
  {
    CGRect.roundedHash(into:version:)((int)v35, v11);
    uint64_t v45 = v22;
    uint64_t v44 = v172;
  }
  uint64_t v203 = MEMORY[0x263F8EE78];
  id v64 = objc_msgSend(objc_allocWithZone(NSDictionary), sel_init);
  unint64_t v65 = (void *)CGDisplayListCreateWithRect();
  unint64_t v66 = (void *)CGDisplayListContextCreate();
  objc_msgSend(v174, sel_drawWithBox_inContext_withOptions_, 0, v66, 0);

  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = &v203;
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = partial apply for closure #1 in PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:);
  *(void *)(v68 + 24) = v67;
  uint64_t v208 = (uint64_t)partial apply for thunk for @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ();
  uint64_t v209 = v68;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v206 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ();
  v207 = &block_descriptor_76;
  uint64_t v69 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  CGDisplayListEnumerateEntriesWithOptions();
  _Block_release(v69);
  LOBYTE(v69) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v69)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
  }
  uint64_t v70 = v203;
  unint64_t v71 = *(void *)(v203 + 16);
  if (v71 >> 61) {
    goto LABEL_81;
  }
  uint64_t v161 = v67;
  uint64_t v72 = v203 + 32 + 4 * v71;
  swift_bridgeObjectRetain();
  uint64_t v73 = specialized Data.init<A>(_:)(v70 + 32, v72);
  unint64_t v75 = v74;
  swift_bridgeObjectRelease();
  uint64_t v76 = v191;
  id v162 = v65;
  switch(v75 >> 62)
  {
    case 1uLL:
      if (v73 >> 32 < (int)v73) {
        goto LABEL_82;
      }
      outlined copy of Data._Representation(v73, v75);
      uint64_t v76 = v191;
      uint64_t v77 = v171;
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v73, v73 >> 32);
      uint64_t v171 = v77;
      break;
    case 2uLL:
      uint64_t v78 = *(void *)(v73 + 16);
      uint64_t v79 = *(void *)(v73 + 24);
      outlined copy of Data._Representation(v73, v75);
      swift_retain();
      swift_retain();
      uint64_t v80 = v78;
      uint64_t v81 = v79;
      uint64_t v76 = v191;
      uint64_t v82 = v171;
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v80, v81);
      uint64_t v171 = v82;
      swift_release();
      swift_release();
      break;
    case 3uLL:
      lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
      *(void *)&long long aBlock = 0;
      *(void *)((char *)&aBlock + 6) = 0;
      goto LABEL_26;
    default:
      *(void *)&long long aBlock = v73;
      WORD4(aBlock) = v75;
      BYTE10(aBlock) = BYTE2(v75);
      BYTE11(aBlock) = BYTE3(v75);
      BYTE12(aBlock) = BYTE4(v75);
      BYTE13(aBlock) = BYTE5(v75);
      lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
LABEL_26:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  outlined consume of Data._Representation(v73, v75);
  outlined consume of Data._Representation(v73, v75);
  uint64_t v83 = v173;
  uint64_t v84 = v186;
  if (v11 >= 3u)
  {
    unsigned int v165 = v11;
    v198[2](v195, v199, v200);
    dispatch thunk of Sequence.makeIterator()();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v85 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v185 + 48);
    uint64_t v178 = v185 + 48;
    v177 = v85;
    if (v85(v84, 1, v44) == 1)
    {
LABEL_29:
      (*(void (**)(char *, uint64_t))(v160 + 8))(v183, AssociatedTypeWitness);
      LOBYTE(v11) = v165;
      goto LABEL_30;
    }
    v176 = *(void (**)(char *, char *, uint64_t))(v185 + 32);
    char v196 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v192 + 7);
    uint64_t v195 = (char *)(v192 + 2);
    BOOL v194 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v192 + 6);
    uint64_t v187 = (void (**)(char *, uint64_t, uint64_t))(v192 + 4);
    ++v192;
    uint64_t v159 = (void (**)(char *, uint64_t))(v164 + 8);
    uint64_t v158 = (void (**)(char *, uint64_t))(v163 + 8);
    v185 += 32;
    uint64_t v175 = (void (**)(char *, uint64_t))(v185 - 24);
    long long v157 = xmmword_20C835740;
    v176(v83, v84, v44);
    while (2)
    {
      SharedTagged_9.subscript.getter();
      uint64_t v99 = v83;
      uint64_t v100 = v207;
      uint64_t v101 = v208;
      __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v207);
      (*(void (**)(long long *__return_ptr, void *, uint64_t))(v101 + 64))(&v204, v100, v101);
      char v102 = v204;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
      if ((v102 & 0x80) == 0)
      {
        (*v175)(v99, v44);
        uint64_t v83 = v99;
LABEL_33:
        uint64_t v98 = v186;
        goto LABEL_34;
      }
      MEMORY[0x21054BDF0](v44);
      id v103 = objc_msgSend(v174, sel_annotations);
      type metadata accessor for PDFAnnotation();
      unint64_t v104 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v104 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v105 = (void (**)(char *, unint64_t, id))_CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v105 = *(void (***)(char *, unint64_t, id))((v104 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      uint64_t v106 = v193;
      if (!v105)
      {
LABEL_56:
        swift_bridgeObjectRelease_n();
        (*v192)(v201, v45);
        uint64_t v83 = v173;
        uint64_t v44 = v172;
        (*v175)(v173, v172);
        goto LABEL_33;
      }
      unint64_t v199 = v104;
      id v200 = (id)(v104 & 0xC000000000000001);
      uint64_t v107 = 4;
      char v198 = v105;
      while (1)
      {
        if (v200) {
          id v109 = (id)MEMORY[0x21054E050](v107 - 4, v104);
        }
        else {
          id v109 = *(id *)(v104 + 8 * v107);
        }
        uint64_t v110 = v109;
        char v111 = (void (**)(char *, unint64_t, id))(v107 - 3);
        if (__OFADD__(v107 - 4, 1))
        {
          __break(1u);
          goto LABEL_80;
        }
        type metadata accessor for CanvasElementPDFAnnotation();
        uint64_t v112 = swift_dynamicCastClass();
        if (v112)
        {
          uint64_t v113 = v112 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
          swift_beginAccess();
          outlined init with copy of CRKeyPath?(v113, v76);
          uint64_t v114 = (void (**)(char *, void, uint64_t, uint64_t))v196;
        }
        else
        {
          uint64_t v114 = (void (**)(char *, void, uint64_t, uint64_t))v196;
          (*v196)(v76, 1, 1, v45);
        }
        (*(void (**)(char *, char *, uint64_t))v195)(v19, v201, v45);
        (*v114)(v19, 0, 1, v45);
        uint64_t v115 = v106 + *(int *)(v197 + 48);
        outlined init with copy of CRKeyPath?(v76, v106);
        outlined init with copy of CRKeyPath?((uint64_t)v19, v115);
        uint64_t v116 = *v194;
        if ((*v194)(v106, 1, v45) == 1) {
          break;
        }
        uint64_t v117 = (uint64_t)v19;
        uint64_t v118 = v190;
        outlined init with copy of CRKeyPath?(v106, v190);
        if (v116(v115, 1, v45) == 1)
        {
          (*v192)(v118, v45);
          uint64_t v19 = (char *)v117;
          uint64_t v76 = v191;
          unint64_t v104 = v199;
LABEL_42:
          uint64_t v106 = v193;
          outlined destroy of StocksKitCurrencyCache.Provider?(v193, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
          outlined destroy of StocksKitCurrencyCache.Provider?(v76, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
          goto LABEL_43;
        }
        uint64_t v119 = v188;
        (*v187)(v188, v115, v45);
        lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
        LODWORD(v189) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v120 = (void (*)(char *, uint64_t))*v192;
        (*v192)(v118, v45);
        v120(v119, v45);
        outlined destroy of StocksKitCurrencyCache.Provider?(v106, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        uint64_t v19 = (char *)v117;
        outlined destroy of StocksKitCurrencyCache.Provider?(v117, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        uint64_t v76 = v191;
        outlined destroy of StocksKitCurrencyCache.Provider?(v191, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        unint64_t v104 = v199;
        if (v189) {
          goto LABEL_58;
        }
LABEL_43:

        ++v107;
        if (v111 == v198) {
          goto LABEL_56;
        }
      }
      unsigned int v108 = v116(v115, 1, v45);
      unint64_t v104 = v199;
      if (v108 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v193, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v76, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
LABEL_58:
        swift_bridgeObjectRelease_n();
        (*v192)(v201, v45);
        uint64_t v121 = v110;
        id v122 = objc_msgSend(v121, sel_dictionaryRef);
        if (!v122)
        {
          __break(1u);
          JUMPOUT(0x20C7D1CD8);
        }
        unsigned int v123 = v165;
        int v124 = v165;
        id v125 = v122;
        uint64_t v126 = (uint64_t)v168;
        SHA256.init()();
        uint64_t v202 = MEMORY[0x263F8EE88];
        id v200 = v125;
        NSDictionary.paperKitHashInto(_:version:includeAPPL:visited:)(v126, v123, 0, (uint64_t)&v202);
        swift_bridgeObjectRelease();
        uint64_t v127 = v166;
        SHA256.finalize()();
        lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x263F045C0]);
        uint64_t v128 = v167;
        uint64_t v129 = Digest.makeIterator()();
        uint64_t v131 = v130;
        (*v159)(v127, v128);
        uint64_t v132 = specialized _copySequenceToContiguousArray<A>(_:)(v129, v131);
        swift_bridgeObjectRelease();
        uint64_t v133 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
        v207 = v133;
        uint64_t v208 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
        *(void *)&long long aBlock = v132;
        uint64_t v134 = __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v133);
        uint64_t v135 = (unsigned char *)(*v134 + 32);
        uint64_t v136 = &v135[*(void *)(*v134 + 16)];
        swift_bridgeObjectRetain();
        uint64_t v137 = v136;
        uint64_t v138 = v171;
        closure #1 in Data.init<A>(_:)(v135, v137, &v204);
        uint64_t v171 = v138;
        swift_release();
        unint64_t v139 = *((void *)&v204 + 1);
        uint64_t v140 = v204;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
        if (v124 == 1)
        {
          uint64_t v44 = v172;
        }
        else
        {
          char v198 = v121;
          unint64_t v199 = v139;
          uint64_t v141 = v140;
          uint64_t v44 = v172;
          if (one-time initialization token for magicNumber != -1) {
            swift_once();
          }
          uint64_t v142 = static PaperKitPDFHash.magicNumber;
          unint64_t v143 = *(void *)algn_2676E9248;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          uint64_t v144 = swift_allocObject();
          *(_OWORD *)(v144 + 16) = v157;
          *(unsigned char *)(v144 + 32) = 0;
          *(unsigned char *)(v144 + 33) = v165;
          outlined copy of Data._Representation(v142, v143);
          uint64_t v145 = specialized Data.init<A>(_:)(v144);
          unint64_t v147 = v146;
          swift_bridgeObjectRelease();
          *(void *)&long long v204 = v142;
          *((void *)&v204 + 1) = v143;
          outlined copy of Data._Representation(v142, v143);
          specialized Data.append<A>(contentsOf:)(v145, v147);
          outlined consume of Data._Representation(v145, v147);
          outlined consume of Data._Representation(v142, v143);
          unint64_t v148 = *((void *)&v204 + 1);
          uint64_t v149 = v204;
          long long aBlock = v204;
          outlined copy of Data._Representation(v204, *((unint64_t *)&v204 + 1));
          unint64_t v150 = v199;
          outlined copy of Data._Representation(v141, v199);
          specialized Data.append<A>(contentsOf:)(v141, v150);
          outlined consume of Data._Representation(v141, v150);
          outlined consume of Data._Representation(v149, v148);
          uint64_t v140 = specialized Data.init<A>(_:)(aBlock, *((unint64_t *)&aBlock + 1));
          unint64_t v139 = v151;
          outlined consume of Data._Representation(v141, v150);
          uint64_t v121 = v198;
        }
        (*v158)(v168, v170);
        uint64_t v83 = v173;
        uint64_t v98 = v186;
        switch(v139 >> 62)
        {
          case 1uLL:
            if (v140 >> 32 < (int)v140) {
              goto LABEL_83;
            }
            unint64_t v199 = v139;
            outlined copy of Data._Representation(v140, v139);
            if (__DataStorage._bytes.getter() && __OFSUB__((int)v140, __DataStorage._offset.getter())) {
              goto LABEL_85;
            }
            id v153 = v200;
            __DataStorage._length.getter();
            lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
            dispatch thunk of HashFunction.update(bufferPointer:)();
            unint64_t v154 = v199;
            outlined consume of Data._Representation(v140, v199);

            break;
          case 2uLL:
            char v198 = v121;
            unint64_t v199 = v139;
            uint64_t v155 = *(void *)(v140 + 16);
            uint64_t v156 = *(void *)(v140 + 24);
            outlined copy of Data._Representation(v140, v139);
            uint64_t v189 = v140;
            swift_retain();
            swift_retain();
            if (__DataStorage._bytes.getter() && __OFSUB__(v155, __DataStorage._offset.getter())) {
              goto LABEL_86;
            }
            if (__OFSUB__(v156, v155)) {
              goto LABEL_84;
            }
            __DataStorage._length.getter();
            lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
            dispatch thunk of HashFunction.update(bufferPointer:)();
            swift_release();
            uint64_t v140 = v189;
            swift_release();
            unint64_t v154 = v199;
            outlined consume of Data._Representation(v140, v199);

            break;
          case 3uLL:
            lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
            *(void *)&long long aBlock = 0;
            *(void *)((char *)&aBlock + 6) = 0;
            unint64_t v152 = v139;
            goto LABEL_76;
          default:
            *(void *)&long long aBlock = v140;
            WORD4(aBlock) = v139;
            BYTE10(aBlock) = BYTE2(v139);
            BYTE11(aBlock) = BYTE3(v139);
            BYTE12(aBlock) = BYTE4(v139);
            BYTE13(aBlock) = BYTE5(v139);
            unint64_t v152 = v139;
            lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
LABEL_76:
            dispatch thunk of HashFunction.update(bufferPointer:)();
            unint64_t v154 = v152;
            outlined consume of Data._Representation(v140, v152);

            goto LABEL_77;
        }
        uint64_t v83 = v173;
        uint64_t v98 = v186;
LABEL_77:
        (*v175)(v83, v44);
        outlined consume of Data._Representation(v140, v154);
LABEL_34:
        dispatch thunk of IteratorProtocol.next()();
        if (v177(v98, 1, v44) == 1) {
          goto LABEL_29;
        }
        v176(v83, v98, v44);
        continue;
      }
      goto LABEL_42;
    }
  }
LABEL_30:
  unint64_t v86 = v166;
  unint64_t v87 = v169;
  SHA256.finalize()();
  lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x263F045C0]);
  uint64_t v88 = v167;
  uint64_t v89 = Digest.makeIterator()();
  uint64_t v91 = v90;
  (*(void (**)(char *, uint64_t))(v164 + 8))(v86, v88);
  uint64_t v92 = specialized _copySequenceToContiguousArray<A>(_:)(v89, v91);
  swift_bridgeObjectRelease();
  uint64_t v93 = specialized Data.init<A>(_:)(v92);
  unint64_t v95 = v94;
  swift_release();
  uint64_t v96 = specialized Data.init(paperKitHash:version:)(v93, v95, v11);

  (*(void (**)(char *, uint64_t))(v163 + 8))(v87, v170);
  swift_release();
  swift_bridgeObjectRelease();
  return v96;
}

uint64_t closure #2 in PaperKitPDFPage.encodePaperPage<A, B>(_:_:id:capsule:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v38 = a5;
  uint64_t v36 = a4;
  uint64_t v40 = a6;
  uint64_t v41 = a2;
  v33[1] = a1;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  MEMORY[0x270FA5388](v39);
  double v37 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  MEMORY[0x270FA5388](v9 - 8);
  double v35 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Ref();
  uint64_t v34 = *(void *)(v21 - 8);
  double v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)v33 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, a1, a3, v22);
  uint64_t v25 = type metadata accessor for CRKeyPath();
  uint64_t v26 = *(void *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v16, v41, v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v16, 0, 1, v25);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v13, 1, 1, v27);
  uint64_t v28 = (void (*)(unsigned char *, void))Ref.subscript.modify();
  uint64_t v29 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 56))(v13, a3, v36);
  v28(v42, 0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v30 = v35;
  CROrderedSet.init()();
  uint64_t v31 = (void (*)(unsigned char *, void))Ref.subscript.modify();
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 80))(v30, a3, v29);
  v31(v42, 0);
  (*(void (**)(uint64_t, uint64_t))(v38 + 160))(v41, a3);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  CRRegister.init(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v24, v21);
}

uint64_t closure #1 in PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int Type = CGDisplayListEntryGetType();
  uint64_t v5 = *a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v5;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1, (char *)v5);
    uint64_t v5 = result;
    *a3 = result;
  }
  unint64_t v8 = *(void *)(v5 + 16);
  unint64_t v7 = *(void *)(v5 + 24);
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, (char *)v5);
    uint64_t v5 = result;
  }
  *(void *)(v5 + 16) = v8 + 1;
  *(_DWORD *)(v5 + 4 * v8 + 32) = Type;
  *a3 = v5;
  return result;
}

uint64_t sub_20C7D22D8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C7D22E8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_76(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_76()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of AnnotationImporter.ImportedElement(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnnotationImporter.ImportedElement();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of SharedTagged_9<TaggedCanvasElement>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s8PaperKit18AnnotationImporterV15ImportedElementOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #2 in PaperKitPDFPage.encodePaperPage<A, B>(_:_:id:capsule:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in PaperKitPDFPage.encodePaperPage<A, B>(_:_:id:capsule:)(v1[8], v1[9], v1[2], v1[5], v1[6], a1);
}

void OpacitySliderView.Coordinator.didChange(_:)(void *a1)
{
  objc_msgSend(a1, sel_value);
  double v4 = v3;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtCV8PaperKit17OpacitySliderView11Coordinator__opacity);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtCV8PaperKit17OpacitySliderView11Coordinator__opacity + 8);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtCV8PaperKit17OpacitySliderView11Coordinator__opacity + 16);
  char v8 = *(unsigned char *)(v1 + OBJC_IVAR____TtCV8PaperKit17OpacitySliderView11Coordinator__opacity + 24);
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>);
  MEMORY[0x21054A870](&v12);
  LOBYTE(v11) = v8;
  LOBYTE(v1CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0;
  Binding.wrappedValue.setter();
  swift_release();
  swift_release();
  uint64_t v9 = (void *)ShapeOpacitySliderView.thumbImage(multiSelect:)(0);
  objc_msgSend(a1, sel_setThumbImage_forState_, v9, 0, *(void *)&v4, v10, v5, v6, v7, v11);
}

id OpacitySliderView.Coordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OpacitySliderView.Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for OpacitySliderView.Coordinator()
{
  return self;
}

uint64_t initializeWithCopy for MiniObjectPropertiesButton(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_WORD *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = *(_WORD *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MiniObjectPropertiesButton(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

__n128 __swift_memcpy42_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MiniObjectPropertiesButton(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniObjectPropertiesButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 42)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MiniObjectPropertiesButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 42) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MiniObjectPropertiesButton()
{
  return &type metadata for MiniObjectPropertiesButton;
}

uint64_t associated type witness table accessor for View.Body : View in MiniObjectPropertiesButton()
{
  return swift_getOpaqueTypeConformance2();
}

id OpacitySliderView.makeUIView(context:)(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  BOOL v5 = (a4 >> 8) & 1;
  id v6 = objc_allocWithZone((Class)type metadata accessor for ShapeOpacitySliderView());
  id v7 = ShapeOpacitySliderView.init(axis:)(0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>);
  MEMORY[0x21054A870](&v15, v8);
  HIDWORD(v9) = HIDWORD(v15);
  *(float *)&double v9 = v15;
  objc_msgSend(v7, sel_setValue_, v9);
  uint64_t v10 = self;
  id v11 = v7;
  id v12 = objc_msgSend(v10, sel_systemGray4Color);
  objc_msgSend(v11, sel_setTintColor_, v12);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIViewRepresentableContext<OpacitySliderView>);
  UIViewRepresentableContext.coordinator.getter();
  objc_msgSend(v11, sel_addTarget_action_forControlEvents_, a2, sel_didChange_, 4096);

  uint64_t v13 = (void *)ShapeOpacitySliderView.thumbImage(multiSelect:)(v5);
  objc_msgSend(v11, sel_setThumbImage_forState_, v13, 0);

  return v11;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance OpacitySliderView(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 25)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return OpacitySliderView.makeUIView(context:)(a1, *(void **)v1, *(void *)(v1 + 8), v2 | *(unsigned __int8 *)(v1 + 24));
}

uint64_t protocol witness for UIViewRepresentable._resetUIView(_:coordinator:destroy:) in conformance OpacitySliderView()
{
  return MEMORY[0x270F016E0]();
}

uint64_t protocol witness for static UIViewRepresentable.dismantleUIView(_:coordinator:) in conformance OpacitySliderView()
{
  return MEMORY[0x270F016F8]();
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance OpacitySliderView@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  char v5 = *((unsigned char *)v1 + 24);
  uint64_t v14 = *v1;
  uint64_t v15 = v3;
  uint64_t v16 = v4;
  char v17 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>);
  Binding.projectedValue.getter();
  uint64_t v6 = v19;
  uint64_t v7 = v20;
  char v8 = v21;
  double v9 = (objc_class *)type metadata accessor for OpacitySliderView.Coordinator();
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  id v11 = &v10[OBJC_IVAR____TtCV8PaperKit17OpacitySliderView11Coordinator__opacity];
  *(void *)id v11 = v18;
  *((void *)v11 + 1) = v6;
  *((void *)v11 + 2) = v7;
  v11[24] = v8;
  v13.receiver = v10;
  v13.super_class = v9;
  id result = objc_msgSendSuper2(&v13, sel_init);
  *a1 = result;
  return result;
}

uint64_t protocol witness for UIViewRepresentable._identifiedViewTree(in:) in conformance OpacitySliderView()
{
  return MEMORY[0x270F01738]();
}

uint64_t protocol witness for UIViewRepresentable.sizeThatFits(_:uiView:context:) in conformance OpacitySliderView()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t protocol witness for UIViewRepresentable._overrideSizeThatFits(_:in:uiView:) in conformance OpacitySliderView()
{
  return MEMORY[0x270F01758]();
}

uint64_t protocol witness for UIViewRepresentable._overrideLayoutTraits(_:for:) in conformance OpacitySliderView()
{
  return MEMORY[0x270F01748]();
}

uint64_t protocol witness for static UIViewRepresentable._modifyBridgedViewInputs(_:) in conformance OpacitySliderView()
{
  return MEMORY[0x270F01768]();
}

uint64_t protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance OpacitySliderView()
{
  return MEMORY[0x270F01728]();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance OpacitySliderView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type OpacitySliderView and conformance OpacitySliderView();
  return MEMORY[0x270F01780](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance OpacitySliderView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type OpacitySliderView and conformance OpacitySliderView();
  return MEMORY[0x270F01718](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance OpacitySliderView()
{
}

uint64_t MiniObjectPropertiesButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  uint64_t v4 = (_OWORD *)swift_allocObject();
  long long v5 = v2[1];
  v4[1] = *v2;
  v4[2] = v5;
  *(_OWORD *)((char *)v4 + 42) = *(_OWORD *)((char *)v2 + 26);
  outlined retain of MiniLineEndsButton((uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CGSize?);
  State.init(wrappedValue:)();
  type metadata accessor for MiniPopoverState();
  lazy protocol witness table accessor for type MiniPopoverState and conformance MiniPopoverState();
  uint64_t v6 = EnvironmentObject.init()();
  uint64_t v8 = v7;
  uint64_t result = static VerticalAlignment.firstTextBaseline.getter();
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v12;
  *(_DWORD *)(a1 + 17) = v10;
  *(_DWORD *)(a1 + 2CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = *(_DWORD *)((char *)&v10 + 3);
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v11;
  *(unsigned char *)(a1 + 48) = v12;
  *(_DWORD *)(a1 + 49) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = closure #1 in MiniObjectPropertiesButton.body.getter;
  *(void *)(a1 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0;
  *(void *)(a1 + 88) = partial apply for closure #2 in MiniObjectPropertiesButton.body.getter;
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = result;
  *(void *)(a1 + 112) = closure #1 in MiniDivider.body.getter;
  *(void *)(a1 + 12CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0;
  return result;
}

uint64_t closure #1 in MiniObjectPropertiesButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  v12[0] = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = Image.init(systemName:)();
  id v5 = objc_msgSend(self, sel_labelColor, v12[0]);
  uint64_t v6 = MEMORY[0x21054A5D0](v5);
  uint64_t KeyPath = swift_getKeyPath();
  if (one-time initialization token for buttonFontSize != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = static Font.system(size:weight:design:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, &demangling cache variable for type metadata for Font.Design?);
  uint64_t v10 = swift_getKeyPath();
  v12[1] = v4;
  _OWORD v12[2] = KeyPath;
  v12[3] = v6;
  v12[4] = v10;
  void v12[5] = v9;
  LocalizedStringKey.init(stringLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.accessibilityLabel(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in MiniObjectPropertiesButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v26[1] = a2;
  uint64_t v28 = type metadata accessor for PresentationAdaptation();
  uint64_t v27 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<<<opaque return type of View.allowsSecureDrawing()>>.0>);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<<<opaque return type of View.allowsSecureDrawing()>>.0>, _PaddingLayout>);
  MEMORY[0x270FA5388](v26[0]);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v7 = static HorizontalAlignment.center.getter();
  *((void *)v7 + 1) = 0;
  v7[16] = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, <<opaque return type of View.allowsSecureDrawing()>>.0>);
  *(_OWORD *)uint64_t v39 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v39[9] = *(_OWORD *)(a1 + 25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>);
  Binding.projectedValue.getter();
  uint64_t v10 = v29;
  uint64_t v11 = v30;
  uint64_t v12 = v31;
  char v13 = v32;
  char v14 = *(unsigned char *)(a1 + 41);
  if (one-time initialization token for shortSliderLength != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v29 = v10;
  uint64_t v30 = v11;
  uint64_t v31 = v12;
  char v32 = v13;
  char v33 = v14;
  uint64_t v34 = *(void *)v39;
  char v35 = v39[8];
  uint64_t v36 = *(void *)&v39[16];
  char v37 = v39[24];
  long long v38 = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<OpacitySliderView, _FrameLayout>);
  lazy protocol witness table accessor for type ModifiedContent<OpacitySliderView, _FrameLayout> and conformance <> ModifiedContent<A, B>();
  View.allowsSecureDrawing()();
  swift_release();
  swift_release();
  char v15 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  outlined init with copy of VStack<<<opaque return type of View.allowsSecureDrawing()>>.0>((uint64_t)v7, (uint64_t)v9);
  uint64_t v24 = &v9[*(int *)(v26[0] + 36)];
  *uint64_t v24 = v15;
  *((void *)v24 + 1) = v17;
  *((void *)v24 + 2) = v19;
  *((void *)v24 + 3) = v21;
  *((void *)v24 + 4) = v23;
  v24[40] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for VStack<<<opaque return type of View.allowsSecureDrawing()>>.0>);
  static PresentationAdaptation.popover.getter();
  lazy protocol witness table accessor for type ModifiedContent<VStack<<<opaque return type of View.allowsSecureDrawing()>>.0>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
  View.presentationCompactAdaptation(_:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v28);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for ModifiedContent<VStack<<<opaque return type of View.allowsSecureDrawing()>>.0>, _PaddingLayout>);
}

uint64_t protocol witness for View.body.getter in conformance MiniObjectPropertiesButton@<X0>(uint64_t a1@<X8>)
{
  return MiniObjectPropertiesButton.body.getter(a1);
}

uint64_t sub_20C7D3424()
{
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 58, 7);
}

uint64_t partial apply for closure #2 in MiniObjectPropertiesButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in MiniObjectPropertiesButton.body.getter(v1 + 16, a1);
}

unint64_t lazy protocol witness table accessor for type MiniPopoverState and conformance MiniPopoverState()
{
  unint64_t result = lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState;
  if (!lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState)
  {
    type metadata accessor for MiniPopoverState();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<OpacitySliderView, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<OpacitySliderView, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<OpacitySliderView, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<OpacitySliderView, _FrameLayout>);
    lazy protocol witness table accessor for type OpacitySliderView and conformance OpacitySliderView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<OpacitySliderView, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OpacitySliderView and conformance OpacitySliderView()
{
  unint64_t result = lazy protocol witness table cache variable for type OpacitySliderView and conformance OpacitySliderView;
  if (!lazy protocol witness table cache variable for type OpacitySliderView and conformance OpacitySliderView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpacitySliderView and conformance OpacitySliderView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpacitySliderView and conformance OpacitySliderView;
  if (!lazy protocol witness table cache variable for type OpacitySliderView and conformance OpacitySliderView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpacitySliderView and conformance OpacitySliderView);
  }
  return result;
}

uint64_t outlined init with copy of VStack<<<opaque return type of View.allowsSecureDrawing()>>.0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<<<opaque return type of View.allowsSecureDrawing()>>.0>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<<<opaque return type of View.allowsSecureDrawing()>>.0>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<<<opaque return type of View.allowsSecureDrawing()>>.0>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<<<opaque return type of View.allowsSecureDrawing()>>.0>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<<<opaque return type of View.allowsSecureDrawing()>>.0>, _PaddingLayout>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type VStack<<<opaque return type of View.allowsSecureDrawing()>>.0> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<<<opaque return type of View.allowsSecureDrawing()>>.0>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<<<opaque return type of View.allowsSecureDrawing()>>.0>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t initializeWithCopy for OpacitySliderView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OpacitySliderView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 1CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for OpacitySliderView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpacitySliderView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 26)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OpacitySliderView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 26) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OpacitySliderView()
{
  return &type metadata for OpacitySliderView;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0> and conformance MiniPopoverButton<A, B>, &demangling cache variable for type metadata for MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>);
    lazy protocol witness table accessor for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

id TextBoxTextView.init(textBoxView:frame:textContainer:)(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  swift_unknownObjectWeakInit();
  char v13 = &v6[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_formAutofillDelegate];
  *(_OWORD *)char v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((void *)v13 + 4) = 0;
  swift_unknownObjectWeakAssign();
  v42.receiver = v6;
  v42.super_class = (Class)type metadata accessor for TextBoxTextView();
  id v14 = objc_msgSendSuper2(&v42, sel_initWithFrame_textContainer_, a2, a3, a4, a5, a6);
  char v15 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0x108);
  id v16 = v14;
  if (v15())
  {
    uint64_t v17 = self;
    uint64_t v18 = (void *)MEMORY[0x21054D080](0x2E6E6F7276656863, 0xEA00000000007075);
    id v19 = objc_msgSend(v17, sel___systemImageNamedSwift_, v18);

    uint64_t v41 = a2;
    id v20 = objc_allocWithZone(MEMORY[0x263F824A8]);
    id v21 = v16;
    id v22 = objc_msgSend(v20, sel_initWithImage_style_target_action_, v19, 0, v21, sel_handleBackTabWithSender_);

    uint64_t v23 = (void *)MEMORY[0x21054D080](0x2E6E6F7276656863, 0xEC0000006E776F64);
    id v24 = objc_msgSend(v17, sel___systemImageNamedSwift_, v23);

    id v25 = objc_allocWithZone(MEMORY[0x263F824A8]);
    id v26 = v21;
    id v27 = objc_msgSend(v25, sel_initWithImage_style_target_action_, v24, 0, v26, sel_handleTabWithSender_);

    id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824A8]), sel_initWithBarButtonSystemItem_target_action_, 5, 0, 0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_20C837410;
    *(void *)(v29 + 32) = v22;
    *(void *)(v29 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v27;
    *(void *)(v29 + 48) = v28;
    specialized Array._endMutation()();
    id v30 = objc_allocWithZone(MEMORY[0x263F824B8]);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItem);
    id v40 = v22;
    id v31 = v27;
    id v32 = v28;
    isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v34 = objc_msgSend(v30, sel_initWithBarButtonItems_representativeItem_, isa, 0);

    id v35 = objc_msgSend(v26, sel_inputAssistantItem);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_20C835790;
    *(void *)(v36 + 32) = v34;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItemGroup);
    id v37 = v34;
    Class v38 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v35, sel_setLeadingBarButtonGroups_, v38);

    a2 = v41;
  }

  return v16;
}

id TextBoxTextView.undoManager.getter()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_nextResponder);
  if (!v2) {
    goto LABEL_3;
  }
  uint64_t v3 = v2;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIResponder);
  id v4 = v1;
  id v5 = v3;
  char v6 = static NSObject.== infix(_:_:)();

  id v7 = 0;
  if ((v6 & 1) == 0)
  {
LABEL_3:
    id v8 = objc_msgSend(v1, sel_nextResponder);
    id v7 = objc_msgSend(v8, sel_undoManager);
  }
  return v7;
}

Swift::Void __swiftcall TextBoxTextView.insertText(_:)(Swift::String a1)
{
  id v2 = (void *)MEMORY[0x21054D080](a1._countAndFlagsBits, a1._object);
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for TextBoxTextView();
  objc_msgSendSuper2(&v10, sel_insertText_, v2);

  uint64_t v3 = &v1[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView];
  uint64_t v4 = MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView]);
  if (v4)
  {
    id v5 = (void *)v4;
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
    swift_retain();

    *(unsigned char *)(v6 + 18) = 15;
    swift_release();
  }
  uint64_t v7 = MEMORY[0x210550400](v3);
  if (v7)
  {
    id v8 = (void *)v7;
    uint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
    swift_retain();

    *(unsigned char *)(v9 + 64) = 1;
    swift_release();
  }
}

void TextBoxTextView.insert(_:)(void *a1)
{
  if (!a1) {
    return;
  }
  id v2 = v1;
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (!v4) {
    return;
  }
  id v5 = (void *)v4;
  uint64_t v6 = (uint64_t)&v1[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_formAutofillDelegate];
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v6, (uint64_t)v46, (uint64_t *)&demangling cache variable for type metadata for FormAutofillDelegate?);
  if (v47)
  {
    outlined init with copy of FindResult((uint64_t)v46, (uint64_t)v45);
    id v7 = a1;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v46, (uint64_t *)&demangling cache variable for type metadata for FormAutofillDelegate?);
    __swift_project_boxed_opaque_existential_1(v45, v45[3]);
    id v8 = objc_msgSend(v5, sel_contents);
    type metadata accessor for UITextContentType(0);
    _s9Coherence9CRKeyPathVACSQAAWlTm_2(&lazy protocol witness table cache variable for type UITextContentType and conformance UITextContentType, type metadata accessor for UITextContentType);
    uint64_t v9 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    FormFillingView.populateTextFields(with:currentField:)(v9, (unint64_t)v2);
    char v11 = v10;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
    if ((v11 & 1) == 0)
    {
      id v12 = objc_msgSend(v5, sel_contents);
      uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v13 + 16))
      {
        id v14 = (id)*MEMORY[0x263F83A58];
        uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
        if (v16)
        {
          uint64_t v17 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v15);
          uint64_t v18 = *v17;
          unint64_t v19 = v17[1];

          swift_bridgeObjectRelease();
          uint64_t v20 = HIBYTE(v19) & 0xF;
          if ((v19 & 0x2000000000000000) == 0) {
            uint64_t v20 = v18 & 0xFFFFFFFFFFFFLL;
          }
          if (!v20) {
            goto LABEL_19;
          }
          id v21 = objc_msgSend(v5, sel_contents);
          uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (*(void *)(v22 + 16))
          {
            id v23 = v14;
            uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
            if (v25)
            {
              id v26 = (uint64_t *)(*(void *)(v22 + 56) + 16 * v24);
              uint64_t v27 = *v26;
              uint64_t v28 = v26[1];
              swift_bridgeObjectRetain();

              swift_bridgeObjectRelease();
              uint64_t v29 = (void *)MEMORY[0x21054D080](v27, v28);
              swift_bridgeObjectRelease();
LABEL_18:
              objc_msgSend(v2, sel_setText_, v29);

              goto LABEL_19;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v29 = 0;
          goto LABEL_18;
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    id v30 = a1;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v46, (uint64_t *)&demangling cache variable for type metadata for FormAutofillDelegate?);
  }
LABEL_19:
  id v31 = &v2[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView];
  uint64_t v32 = MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView]);
  if (v32)
  {
    char v33 = (void *)v32;
    uint64_t v34 = *(void *)(v32 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
    swift_retain();

    *(unsigned char *)(v34 + 18) = 14;
    swift_release();
  }
  uint64_t v35 = MEMORY[0x210550400](v31);
  if (v35)
  {
    uint64_t v36 = (void *)v35;
    uint64_t v37 = *(void *)(v35 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
    swift_retain();

    *(unsigned char *)(v37 + 19) = 1;
    swift_release();
  }
  uint64_t v38 = MEMORY[0x210550400](v31);
  if (v38)
  {
    uint64_t v39 = (void *)v38;
    uint64_t v40 = *(void *)(v38 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
    swift_retain();

    id v41 = objc_msgSend(v2, sel_textContentType);
    if (!v41)
    {
      __break(1u);
      return;
    }
    objc_super v42 = *(void **)(v40 + 32);
    *(void *)(v40 + 32) = v41;
    swift_release();
  }
  unint64_t v43 = (char *)MEMORY[0x210550400](v31);

  if (v43)
  {
    uint64_t v44 = *(void *)&v43[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics];
    swift_retain();

    *(unsigned char *)(v44 + 64) = 3;
    swift_release();
  }
}

Swift::Void __swiftcall TextBoxTextView.autoFillDidInsert(withExplicitInvocationMode:)(Swift::Bool withExplicitInvocationMode)
{
  uint64_t v3 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
    swift_retain();

    if (withExplicitInvocationMode) {
      char v6 = 2;
    }
    else {
      char v6 = 3;
    }
    *(unsigned char *)(v5 + 64) = v6;
    swift_release();
  }
}

uint64_t TextBoxTextView.keyCommands.getter()
{
  uint64_t v1 = v0;
  id v2 = (void *)MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView]);
  if (v2
    && (v3 = v2, char v4 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x108))(), v3, (v4 & 1) != 0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_20C8344D0;
    char v6 = (void *)MEMORY[0x21054D080](9, 0xE100000000000000);
    id v7 = self;
    id v8 = objc_msgSend(v7, sel_keyCommandWithInput_modifierFlags_action_, v6, 0, sel_handleTabWithSender_);

    *(void *)(v5 + 32) = v8;
    uint64_t v9 = (void *)MEMORY[0x21054D080](9, 0xE100000000000000);
    id v10 = objc_msgSend(v7, sel_keyCommandWithInput_modifierFlags_action_, v9, 0x20000, sel_handleBackTabWithSender_);

    *(void *)(v5 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v10;
    specialized Array._endMutation()();
    return v5;
  }
  else
  {
    v15.receiver = v1;
    v15.super_class = (Class)type metadata accessor for TextBoxTextView();
    id v12 = objc_msgSendSuper2(&v15, sel_keyCommands);
    if (v12)
    {
      uint64_t v13 = v12;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIKeyCommand);
      uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v11;
}

void @objc TextBoxTextView.handleTab(sender:)(char *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = (void *)MEMORY[0x210550400](&a1[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView]);
  if (v7)
  {
    id v8 = *(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v7) + 0x158);
    id v11 = v7;
    id v9 = a3;
    id v10 = a1;
    v8(a4);
  }
}

id TextBoxTextView.__deallocating_deinit()
{
  return TextBoxTextView.__deallocating_deinit(type metadata accessor for TextBoxTextView);
}

uint64_t type metadata accessor for TextBoxTextView()
{
  return self;
}

uint64_t type metadata completion function for TextBoxUndoSnapshot()
{
  type metadata accessor for Capsule();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t TextBoxUndoSnapshot.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  type metadata accessor for Capsule();
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TextBoxUndoSnapshot.__deallocating_deinit()
{
  TextBoxUndoSnapshot.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TextBoxUndoSnapshot()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TextBoxUndoSnapshot.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  TextBoxUndoSnapshot.init()();
  return v0;
}

uint64_t TextBoxUndoSnapshot.init()()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  uint64_t v2 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(void *)(v0 + *(void *)(*(void *)v0 + 112)) = MEMORY[0x263F8EE78];
  return v0;
}

id protocol witness for TextBoxViewDelegate.textBoxViewActiveTextBoxFrame(_:) in conformance AnyCanvasElementView(uint64_t a1)
{
  return objc_msgSend(v1, sel_textBoxViewActiveTextBoxFrame_, a1);
}

id protocol witness for TextBoxViewDelegate.textBoxViewUpdateViewFrame(_:viewFrame:) in conformance AnyCanvasElementView(uint64_t a1)
{
  return objc_msgSend(v1, sel_textBoxViewUpdateViewFrame_viewFrame_, a1);
}

id protocol witness for TextBoxViewDelegate.textBoxViewUpdateModelFrame(_:modelFrame:) in conformance AnyCanvasElementView(uint64_t a1)
{
  return objc_msgSend(v1, sel_textBoxViewUpdateModelFrame_modelFrame_, a1);
}

void AnyTextBoxView.liveAttributedString.getter()
{
}

void AnyTextBoxView.modificationRange.getter()
{
}

void AnyTextBoxView.isElementFirstResponder.getter()
{
}

void AnyTextBoxView.isCursorWeak.getter()
{
}

void AnyTextBoxView.selectionCoordinateSpace.getter()
{
}

uint64_t AnyTextBoxView.isScribbling.setter(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling) = result;
  return result;
}

void AnyTextBoxView.string.getter()
{
}

double AnyTextBoxView.canvasElementViewFrameInModelSpace.getter()
{
  return 0.0;
}

id AnyTextBoxView.__deallocating_deinit()
{
  return TextBoxTextView.__deallocating_deinit(type metadata accessor for AnyTextBoxView);
}

id TextBoxTextView.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for AnyTextBoxView()
{
  return self;
}

uint64_t type metadata completion function for TextBoxView()
{
  return swift_initClassMetadata2();
}

void TextBoxView.canvasElementView.getter()
{
}

uint64_t TextBoxView.delegate.getter()
{
  return MEMORY[0x210550400](v0 + direct field offset for TextBoxView.delegate);
}

uint64_t TextBoxView.currentUndoAction.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for TextBoxView.currentUndoAction) = a1;
  return swift_release();
}

void TextBoxView.isScribbling.willset(char a1)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling) == 1 && (a1 & 1) == 0)
  {
    TextBoxView._updateFrames()();
    TextBoxView.updateFrameAfterScribbling()();
  }
}

uint64_t TextBoxView.isScribbling.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling);
}

void TextBoxView.isScribbling.setter(char a1)
{
  TextBoxView.isScribbling.willset(a1);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling) = a1;
}

uint64_t TextBoxView.isFormField.getter()
{
  uint64_t v1 = *MEMORY[0x263F8EED0] & *v0;
  uint64_t v2 = *(void *)(v1 + 0x1C0);
  uint64_t v3 = type metadata accessor for Capsule();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v13 - v9;
  uint64_t v11 = MEMORY[0x210550400]((char *)v0 + direct field offset for TextBoxView.canvasElementView, v8);
  if (v11)
  {
    CanvasElementView.canvasElement.getter((uint64_t)v6);

    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v10, v6, v3);
    LOBYTE(v11) = Capsule<>.isFormField.getter(v3, v2, *(void *)(*(void *)(v1 + 456) + 8));
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
  }
  return v11 & 1;
}

void *key path getter for ShapeTextBox.textResizeBehavior : <A>A@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, void))(*(void *)(a2 + a1 - 8) + 40))(&v5, *(void *)(a2 + a1 - 24));
  *a3 = v5;
  return result;
}

uint64_t key path setter for ShapeTextBox.textResizeBehavior : <A>A(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 24);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = *a1;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 48))(&v7, v4);
}

uint64_t TextBoxView.shouldAddTextboxView.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for TextBoxView.shouldAddTextboxView);
}

uint64_t key path getter for ShapeTextBox.text : <A>A(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 16))(*(void *)(a3 + a2 - 24));
}

uint64_t key path setter for ShapeTextBox.text : <A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 24);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  double v8 = MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v11 + 16))(v10, a1, v8);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 24))(v10, v5, v6);
}

void *key path getter for ShapeTextBox.textContentType : <A>A@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, void))(*(void *)(a2 + a1 - 8) + 88))(&v5, *(void *)(a2 + a1 - 24));
  *a3 = v5;
  return result;
}

uint64_t key path setter for ShapeTextBox.textContentType : <A>A(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 24);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  char v7 = *a1;
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 96))(&v7, v4);
}

void @objc TextBoxView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized TextBoxView.init(coder:)();
}

void *TextBoxView.canvas.getter()
{
  uint64_t result = (void *)MEMORY[0x210550400](v0 + direct field offset for TextBoxView.canvasElementView);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *result) + 0x88))();

    return (void *)v3;
  }
  return result;
}

uint64_t TextBoxView.liveAttributedString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + direct field offset for TextBoxView.textStorage)
     + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
  swift_beginAccess();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

Swift::Void __swiftcall TextBoxView.didMoveToWindow()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for TextBoxView();
  objc_msgSendSuper2(&v1, sel_didMoveToWindow);
  TextBoxView.updateTextStorageDarkMode()();
}

void @objc TextBoxView.didMoveToWindow()(void *a1)
{
  id v1 = a1;
  TextBoxView.didMoveToWindow()();
}

Swift::Bool __swiftcall TextBoxView.becomeFirstResponder()()
{
  TextBoxView.addTextViewIfNeeded(shouldBecomeFirstResponder:)(1);
  uint64_t v0 = TextBoxView.canvas.getter();
  if (!v0) {
    return 1;
  }
  id v1 = v0;
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  id v3 = v2;

  if (v2)
  {
    objc_msgSend(v3, sel_setNeedsLayout);

    return 1;
  }
  __break(1u);
  return result;
}

uint64_t @objc TextBoxView.becomeFirstResponder()(void *a1)
{
  id v1 = a1;
  TextBoxView.becomeFirstResponder()();

  return 1;
}

Swift::Bool __swiftcall TextBoxView.resignFirstResponder()()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
  if (v2)
  {
    unsigned __int8 v3 = objc_msgSend(v2, sel_resignFirstResponder);
  }
  else
  {
    v12.receiver = v0;
    v12.super_class = (Class)type metadata accessor for TextBoxView();
    unsigned __int8 v3 = objc_msgSendSuper2(&v12, sel_resignFirstResponder);
  }
  Swift::Bool v4 = v3;
  TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(1);
  TextBoxView.unregisterForFirstResponderNotifications()();
  uint64_t v5 = *(void **)&v0[v1];
  if (v5)
  {
    objc_msgSend(v5, sel_removeFromSuperview);
    uint64_t v6 = *(void **)&v0[v1];
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(void *)&v0[v1] = 0;

  v0[direct field offset for TextBoxView.hideText] = 0;
  objc_msgSend(v0, sel_setNeedsDisplay);
  char v7 = TextBoxView.canvas.getter();
  if (!v7) {
    return v4;
  }
  double v8 = v7;
  uint64_t v9 = *(void **)((char *)v7 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  id v10 = v9;

  if (v9)
  {
    objc_msgSend(v10, sel_setNeedsLayout);

    return v4;
  }
  __break(1u);
  return result;
}

BOOL @objc TextBoxView.resignFirstResponder()(void *a1)
{
  id v1 = a1;
  Swift::Bool v2 = TextBoxView.resignFirstResponder()();

  return v2;
}

id TextBoxView.isElementFirstResponder.getter()
{
  id result = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  if (result) {
    return objc_msgSend(result, sel_isFirstResponder);
  }
  return result;
}

void __swiftcall TextBoxView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  Swift::Bool v4 = v3;
  isCGFloat a = with.value.super.isa;
  CGFloat y = _.y;
  CGFloat x = _.x;
  uint64_t v8 = type metadata accessor for PKInk();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  objc_super v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(v3, sel_bounds, v10);
  v30.CGFloat x = x;
  v30.CGFloat y = y;
  if (CGRectContainsPoint(v31, v30))
  {
    uint64_t v13 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView;
    id v14 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
    if (v14)
    {
      id v15 = v14;
      if (objc_msgSend(v15, sel_isFirstResponder)) {
        return;
      }
    }
    if (isa) {
      BOOL v16 = [(objc_class *)isa type] == (id)11;
    }
    else {
      BOOL v16 = 0;
    }
    uint64_t v17 = TextBoxView.canvas.getter();
    if (v17)
    {
      uint64_t v18 = v17;
      Class v19 = (Class)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v17) + 0x320))();

      if (v19)
      {
        id v20 = [(objc_class *)v19 ink];

        static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
        Class v19 = PKInk._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      }
    }
    else
    {
      Class v19 = 0;
    }
    id v21 = v19;
    char v22 = [(objc_class *)v21 _isHandwritingInk];

    if (v22)
    {
      if (!isa) {
        return;
      }
    }
    else
    {
      id v23 = TextBoxView.canvas.getter();
      uint64_t v24 = v23;
      if (!v23) {
        return;
      }
      (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x263F8EED0] & *v23) + 0x2C8))(&v29);

      if (!isa || v29 != 1) {
        return;
      }
    }
    char v25 = isa;
    if ([(objc_class *)v25 PK_isEventFromPencil] && !v16)
    {
      TextBoxView.addTextViewIfNeeded(shouldBecomeFirstResponder:)(1);

      id v26 = *(void **)&v4[v13];
      if (v26) {
        id v27 = v26;
      }
    }
    else
    {
    }
  }
}

id @objc TextBoxView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  v16.value.super.isCGFloat a = (Class)a5;
  TextBoxView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v16);
  uint64_t v13 = v12;

  return v13;
}

uint64_t TextBoxView.hideText.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for TextBoxView.hideText);
}

id TextBoxView.hideText.setter(char a1)
{
  v1[direct field offset for TextBoxView.hideText] = a1;
  return objc_msgSend(v1, sel_setNeedsDisplay);
}

uint64_t TextBoxView.string.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + direct field offset for TextBoxView.textStorage), sel_string);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

Swift::Void __swiftcall TextBoxView.setString(_:)(Swift::String a1)
{
  uint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  TextBoxView.addTextViewIfNeeded(shouldBecomeFirstResponder:)(0);
  Swift::Bool v4 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = (void *)MEMORY[0x21054D080](countAndFlagsBits, object);
    objc_msgSend(v5, sel_setText_, v6);
  }
  objc_msgSend(v1, sel_resignFirstResponder);
}

id TextBoxView.isCursorWeak.getter()
{
  id v1 = objc_msgSend(v0, sel_window);
  id v2 = v1;
  if (v1)
  {
    id v3 = objc_msgSend(v1, sel_windowScene);

    if (v3)
    {
      id v4 = objc_msgSend(self, sel_interactionForScene_, v3);
      if (v4)
      {
        id v5 = v4;
        id v2 = objc_msgSend(v4, sel_isCursorWeak);
      }
      else
      {
        id v2 = 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

id TextBoxView.modificationRange.getter()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  if (v1)
  {
    id v2 = v1;
    if (objc_msgSend(v2, sel_isFirstResponder)
      && (TextBoxView.isCursorWeak.getter() & 1) == 0)
    {
      id v3 = objc_msgSend(v2, sel_selectedRange);

      return v3;
    }
  }
  TextBoxView.string.getter();
  String.UTF16View.count.getter();
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Void __swiftcall TextBoxView.layoutSubviews()()
{
  id v1 = v0;
  id v2 = (void *)(*MEMORY[0x263F8EED0] & *(void *)v0);
  uint64_t v3 = v2[55];
  uint64_t v4 = v2[56];
  uint64_t v5 = type metadata accessor for Capsule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v12 = v2[57];
  uint64_t v13 = (objc_class *)type metadata accessor for TextBoxView();
  v30.receiver = v1;
  v30.super_class = v13;
  objc_msgSendSuper2(&v30, sel_layoutSubviews);
  uint64_t v14 = MEMORY[0x210550400](&v1[direct field offset for TextBoxView.canvasElementView]);
  if (v14)
  {
    id v15 = (void *)v14;
    uint64_t v28 = v8;
    TextBoxView._updateFrames()();
    TextBoxView._updateScaleFactor()();
    UIEvent_optional v16 = TextBoxView.canvas.getter();
    if (v16)
    {
      uint64_t v17 = v16;
      CanvasElementView.canvasElement.getter((uint64_t)v11);
      char v18 = Capsule<>.isFormField.getter(v5, v4, *(void *)(v12 + 8));
      id v27 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
      uint64_t v19 = v27(v11, v5);
      id v20 = v17;
      if ((v18 & 1) != 0
        && ((*(void (**)(double *__return_ptr, uint64_t))((*MEMORY[0x263F8EED0] & *v17) + 0x2C8))(&v29, v19),
            LOBYTE(v29) == 1)
        && !*(void *)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView])
      {
        uint64_t v22 = (uint64_t)v28;
        if (one-time initialization token for formFieldBackgroundColor != -1) {
          swift_once();
        }
        id v21 = (id)static UIConstants.formFieldBackgroundColor;
      }
      else
      {
        id v21 = objc_msgSend(self, sel_clearColor);
        uint64_t v22 = (uint64_t)v28;
      }
      objc_msgSend(v1, sel_setBackgroundColor_, v21);

      id v23 = objc_msgSend(v1, sel_layer);
      uint64_t v24 = CanvasElementView.canvasElement.getter(v22);
      MEMORY[0x270FA5388](v24);
      *(&v26 - 4) = v3;
      *(&v26 - 3) = v4;
      *(&v26 - 2) = v12;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v27((char *)v22, v5);
      HIDWORD(v25) = HIDWORD(v29);
      *(float *)&double v25 = v29;
      objc_msgSend(v23, sel_setOpacity_, v25);

      id v15 = v23;
    }
  }
}

void @objc TextBoxView.layoutSubviews()(void *a1)
{
  id v1 = a1;
  TextBoxView.layoutSubviews()();
}

void TextBoxView.updateTextStorageDarkMode()()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v22 - v7;
  uint64_t v22 = *(id *)&v1[direct field offset for TextBoxView.textStorage];
  id v9 = objc_msgSend(v1, sel_traitCollection);
  id v10 = objc_msgSend(v9, sel_userInterfaceStyle);

  BOOL v11 = v10 == (id)2;
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode;
  int v13 = v22[OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode];
  v22[OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode] = v11;
  if ((v11 ^ v13))
  {
    uint64_t v14 = &v22[OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString];
    swift_beginAccess();
    id v15 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v15(v8, v14, v2);
    UIEvent_optional v16 = *(void **)&v22[OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString];
    v15(v5, v14, v2);
    id v17 = v16;
    uint64_t v18 = CRAttributedString.count.getter();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v3 + 8);
    v19(v5, v2);
    if (v18 < 0)
    {
      __break(1u);
    }
    else
    {
      specialized static CRTextStorage.setAttributes(from:into:range:darkMode:)((uint64_t)v8, v17, 0, v18, v22[v12]);

      v19(v8, v2);
      id v20 = objc_msgSend(v22, sel_length);
      objc_msgSend(v22, sel_edited_range_changeInLength_, 1, 0, v20, 0);
    }
  }
  else
  {
    id v21 = v22;
  }
}

Swift::Void __swiftcall TextBoxView.updateCanvasElement(shouldRegisterUndo:)(Swift::Bool shouldRegisterUndo)
{
  BOOL v46 = shouldRegisterUndo;
  uint64_t v49 = *MEMORY[0x263F8EED0] & *(void *)v1;
  uint64_t v2 = v49;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v50 = *(void (***)(char *, uint64_t, uint64_t))(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v42 - v7;
  uint64_t v9 = *(void *)(v2 + 440);
  uint64_t v10 = *(void *)(v2 + 448);
  uint64_t v11 = type metadata accessor for Capsule();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x270FA5388](v11);
  id v15 = (char *)&v42 - v14;
  uint64_t v16 = MEMORY[0x210550400](&v1[direct field offset for TextBoxView.canvasElementView], v13);
  if (v16)
  {
    uint64_t v47 = (void *)v16;
    uint64_t v48 = v1;
    uint64_t v17 = CanvasElementView.canvasElement.getter((uint64_t)v15);
    MEMORY[0x270FA5388](v17);
    uint64_t v45 = v9;
    *(&v42 - 4) = v9;
    *(&v42 - 3) = v10;
    uint64_t v43 = *(void *)(v49 + 456);
    *(&v42 - 2) = v43;
    swift_getKeyPath();
    uint64_t v44 = v10;
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v19 = v12 + 8;
    uint64_t v18 = *(void (***)(char *, uint64_t, uint64_t))(v12 + 8);
    uint64_t v20 = v11;
    uint64_t v21 = v11;
    uint64_t v22 = v48;
    uint64_t v49 = v19;
    ((void (*)(char *, uint64_t))v18)(v15, v21);
    uint64_t v23 = *(void *)&v22[direct field offset for TextBoxView.textStorage]
        + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
    swift_beginAccess();
    uint64_t v24 = v50;
    v50[2](v5, v23, v3);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope> and conformance CRAttributedString<A>, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    LOBYTE(v23) = dispatch thunk of static Equatable.== infix(_:_:)();
    double v25 = v24[1];
    uint64_t v26 = v5;
    id v27 = v47;
    ((void (*)(char *, uint64_t))v25)(v26, v3);
    uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v25)(v8, v3);
    if ((v23 & 1) == 0)
    {
      uint64_t v50 = v18;
      MEMORY[0x270FA5388](v28);
      *(&v42 - 2) = (uint64_t)v22;
      double v29 = (void *)MEMORY[0x263F8EED0];
      swift_beginAccess();
      Capsule.callAsFunction<A>(_:)();
      uint64_t v30 = swift_endAccess();
      CGRect v31 = v27;
      if (((*(uint64_t (**)(uint64_t))((*v29 & *v27) + 0x1E0))(v30) & 1) == 0)
      {
        uint64_t v32 = TextBoxView.canvas.getter();
        if (v32)
        {
          char v33 = v32;
          uint64_t v34 = (void *)(*(uint64_t (**)(void))((*v29 & *v32) + 0x2F8))();
          uint64_t v36 = v35;

          uint64_t ObjectType = swift_getObjectType();
          CanvasElementView.canvasElement.getter((uint64_t)v15);
          (*(void (**)(char *, BOOL, uint64_t, uint64_t, void, uint64_t, uint64_t))(v36 + 200))(v15, v46, v45, v44, *(void *)(v43 + 8), ObjectType, v36);

          ((void (*)(char *, uint64_t))v50)(v15, v20);
        }
      }
      objc_msgSend(v22, sel_setNeedsLayout);
      uint64_t v38 = TextBoxView.canvas.getter();
      if (v38)
      {
        uint64_t v39 = v38;
        uint64_t v40 = *(void **)((char *)v38 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
        id v41 = v40;

        if (!v40)
        {
          __break(1u);
          return;
        }
        objc_msgSend(v41, sel_setNeedsLayout);
      }
      objc_msgSend(v22, sel_setNeedsDisplay);
      id v27 = v31;
    }
  }
}

uint64_t closure #1 in TextBoxView.updateCanvasElement(shouldRegisterUndo:)(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *MEMORY[0x263F8EED0] & *a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v9 = *(void *)((char *)a2 + direct field offset for TextBoxView.textStorage)
     + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  uint64_t v10 = (uint64_t (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  uint64_t v11 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, void))(*(void *)(v4 + 456) + 32))(v14, *(void *)(v3 + *MEMORY[0x263F33088]));
  CRAttributedString.merge(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  v11(v14, 0);
  return v10(v15, 0);
}

Swift::Void __swiftcall TextBoxView.addTextViewIfNeeded(shouldBecomeFirstResponder:)(Swift::Bool shouldBecomeFirstResponder)
{
  uint64_t v2 = v1;
  BOOL v3 = shouldBecomeFirstResponder;
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v152 = v5;
  uint64_t v6 = type metadata accessor for CRKeyPath();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v161 = (char *)&v140 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v140 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v12 - 8);
  id v153 = (char *)&v140 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  unint64_t v154 = *(unsigned int (***)(uint64_t, uint64_t, void (*)(void, void)))(v14 - 8);
  uint64_t v155 = (void (*)(void, void))v14;
  MEMORY[0x270FA5388](v14);
  unint64_t v151 = (char *)&v140 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v5 + 440);
  uint64_t v17 = *(void *)(v5 + 448);
  *(void *)&long long v158 = v16;
  uint64_t v18 = type metadata accessor for Capsule();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v159 = v18;
  uint64_t v160 = v19;
  MEMORY[0x270FA5388](v18);
  long long v157 = (uint64_t *)((char *)&v140 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v140 - v22;
  v25.n128_f64[0] = MEMORY[0x270FA5388](v24);
  uint64_t v156 = (uint64_t)&v140 - v26;
  id v27 = &lazy protocol witness table cache variable for type PaperDocumentView and conformance PaperDocumentView;
  if (*(void *)&v2[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView]
    || (uint64_t v147 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView,
        (uint64_t v44 = (void *)MEMORY[0x210550400](&v2[direct field offset for TextBoxView.canvasElementView], v25.n128_f64[0])) == 0))
  {
LABEL_2:
    if (v3) {
      goto LABEL_3;
    }
    return;
  }
  uint64_t v45 = v44;
  if (v2[direct field offset for TextBoxView.shouldAddTextboxView] != 1)
  {

    goto LABEL_2;
  }
  uint64_t v150 = v17;
  uint64_t v149 = v11;
  objc_msgSend(v2, sel_bounds);
  double v47 = v46;
  double v49 = v48;
  double v51 = v50;
  double v53 = v52;
  double v54 = *(void **)&v2[direct field offset for TextBoxView.textContainer];
  objc_allocWithZone((Class)type metadata accessor for TextBoxTextView());
  id v55 = v54;
  id v41 = v2;
  unint64_t v143 = (char *)TextBoxTextView.init(textBoxView:frame:textContainer:)(v41, v54, v47, v49, v51, v53);
  objc_msgSend(v143, sel_setDelegate_, v41);
  unint64_t v56 = TextBoxView.canvas.getter();
  uint64_t v144 = v41;
  if (v56)
  {
    uint64_t v57 = v56;
    unint64_t v58 = (void *)(*(uint64_t (**)(void))((*v4 & *v56) + 0x2F8))();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElementView<PaperDocumentPage>);
    uint64_t v59 = (void *)swift_dynamicCastClass();
    if (v59)
    {
      uint64_t v60 = v6;
      uint64_t v61 = *(void **)((char *)v59 + *(void *)((*v4 & *v59) + 0x4D0));
      if (v61)
      {
        *((void *)&v164 + 1) = type metadata accessor for FormFillingView();
        unsigned int v165 = &protocol witness table for FormFillingView;
        *(void *)&long long v163 = v61;
      }
      else
      {
        unsigned int v165 = 0;
        long long v163 = 0u;
        long long v164 = 0u;
      }
      unint64_t v75 = &v143[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_formAutofillDelegate];
      swift_beginAccess();
      id v76 = v61;
      outlined assign with take of FormAutofillDelegate?((uint64_t)&v163, (uint64_t)v75);
      swift_endAccess();

      uint64_t v6 = v60;
      id v41 = v144;
    }
    else
    {
    }
  }
  uint64_t v77 = TextBoxView.canvas.getter();
  if (v77)
  {
    uint64_t v78 = v77;
    uint64_t v79 = (void *)(*(uint64_t (**)(void))((*v4 & *v77) + 0x2F8))();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ContainerCanvasElementView<Image>);
    uint64_t v80 = (void *)swift_dynamicCastClass();
    if (v80)
    {
      uint64_t v81 = v6;
      uint64_t v82 = *(void **)((char *)v80 + *(void *)((*v4 & *v80) + 0x4D0));
      if (v82)
      {
        *((void *)&v164 + 1) = type metadata accessor for FormFillingView();
        unsigned int v165 = &protocol witness table for FormFillingView;
        *(void *)&long long v163 = v82;
      }
      else
      {
        unsigned int v165 = 0;
        long long v163 = 0u;
        long long v164 = 0u;
      }
      uint64_t v83 = &v143[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_formAutofillDelegate];
      swift_beginAccess();
      id v84 = v82;
      outlined assign with take of FormAutofillDelegate?((uint64_t)&v163, (uint64_t)v83);
      swift_endAccess();

      uint64_t v6 = v81;
      id v41 = v144;
    }
    else
    {
    }
  }
  BOOL v142 = v3;
  id v145 = v45;
  unint64_t v148 = (char *)v6;
  uint64_t v141 = v7;
  unint64_t v146 = v2;
  uint64_t v85 = self;
  unint64_t v86 = v143;
  id v87 = objc_msgSend(v85, sel_clearColor);
  objc_msgSend(v86, sel_setBackgroundColor_, v87);

  uint64_t v88 = one-time initialization token for textBoxTextContainerInset;
  unint64_t v65 = v86;
  if (v88 != -1) {
    goto LABEL_59;
  }
  while (1)
  {
    objc_msgSend(v65, sel_setTextContainerInset_, static UIConstants.textBoxTextContainerInset, *(double *)&qword_26ACC4578, unk_26ACC4580);

    objc_msgSend(v65, sel_setAllowsEditingTextAttributes_, 1);
    objc_msgSend(v65, sel_setScrollEnabled_, 0);
    uint64_t v89 = *(void **)((char *)v41 + direct field offset for TextBoxView.textStorage);
    uint64_t v90 = v65;
    id v91 = objc_msgSend(v89, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v92 = String.count.getter();
    swift_bridgeObjectRelease();
    objc_msgSend(v90, sel_setSelectedRange_, v92, 0);

    objc_msgSend(v90, sel_setClipsToBounds_, 0);
    uint64_t v93 = v156;
    uint64_t v94 = CanvasElementView.canvasElement.getter(v156);
    MEMORY[0x270FA5388](v94);
    uint64_t v95 = v150;
    *(&v140 - 4) = v158;
    *(&v140 - 3) = v95;
    uint64_t v96 = *(void *)(v152 + 456);
    *(&v140 - 2) = v96;
    swift_getKeyPath();
    uint64_t v97 = v90;
    uint64_t v98 = v159;
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v99 = *(void (**)(uint64_t, uint64_t))(v160 + 8);
    v99(v93, v98);
    uint64_t v100 = (void (*)(char *, uint64_t))v99;
    char v162 = v163;
    id v101 = (id)specialized FormContentType.uiTextContentType.getter();
    objc_msgSend(v97, sel_setTextContentType_, v101);

    unint64_t v143 = v97;
    uint64_t v102 = CanvasElementView.canvasElement.getter((uint64_t)v23);
    MEMORY[0x270FA5388](v102);
    *(&v140 - 4) = v158;
    *(&v140 - 3) = v95;
    uint64_t v152 = v96;
    *(&v140 - 2) = v96;
    swift_getKeyPath();
    uint64_t v103 = (uint64_t)v153;
    Capsule<>.subscript.getter();
    swift_release();
    v100(v23, v98);
    uint64_t v105 = v154;
    unint64_t v104 = v155;
    if (v154[6](v103, 1, v155) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v103, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      uint64_t v2 = v146;
      uint64_t v6 = (uint64_t)v148;
      id v106 = v144;
      id v107 = v143;
    }
    else
    {
      unsigned int v108 = v151;
      v105[4]((uint64_t)v151, v103, v104);
      id v109 = v143;
      uint64_t v110 = v143;
      id v111 = v144;
      id v112 = objc_msgSend(v144, sel_traitCollection);
      id v113 = objc_msgSend(v112, sel_userInterfaceStyle);

      CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v113 == (id)2);
      type metadata accessor for NSAttributedStringKey(0);
      _s9Coherence9CRKeyPathVACSQAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
      isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v110, sel_setTypingAttributes_, isa);

      ((void (*)(char *, void))v105[1])(v108, v104);
      uint64_t v2 = v146;
      uint64_t v6 = (uint64_t)v148;
      id v106 = v111;
      id v107 = v109;
    }
    objc_msgSend(v106, sel_addSubview_, v107);
    *((unsigned char *)v106 + direct field offset for TextBoxView.hideText) = 1;
    objc_msgSend(v106, sel_setNeedsDisplay);
    uint64_t v115 = *(void **)&v2[v147];
    *(void *)&v2[v147] = v107;
    id v116 = v107;
    uint64_t v155 = (void (*)(void, void))v116;

    id v117 = objc_msgSend(v116, sel_inputAssistantItem);
    uint64_t v118 = (void *)MEMORY[0x21054D080](0x6D726F6674786574, 0xEA00000000007461);
    id v119 = objc_msgSend(self, sel_systemImageNamed_, v118);

    *(void *)&long long v163 = v106;
    uint64_t v120 = v106;
    id v121 = objc_allocWithZone(MEMORY[0x263F824A8]);
    type metadata accessor for TextBoxView();
    id v122 = objc_msgSend(v121, sel_initWithImage_style_target_action_, v119, 0, _bridgeAnythingToObjectiveC<A>(_:)(), sel_textFormat_);
    swift_unknownObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v123 = swift_allocObject();
    long long v158 = xmmword_20C835790;
    *(_OWORD *)(v123 + 16) = xmmword_20C835790;
    uint64_t v124 = swift_allocObject();
    *(_OWORD *)(v124 + 16) = v158;
    *(void *)(v124 + 32) = v122;
    *(void *)&long long v163 = v124;
    specialized Array._endMutation()();
    id v125 = objc_allocWithZone(MEMORY[0x263F824B8]);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItem);
    id v126 = v122;
    Class v127 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v128 = objc_msgSend(v125, sel_initWithBarButtonItems_representativeItem_, v127, 0);

    *(void *)(v123 + 32) = v128;
    *(void *)&long long v163 = v123;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItemGroup);
    Class v129 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v117, sel_setTrailingBarButtonGroups_, v129);

    uint64_t v130 = v155;
    objc_msgSend(v120, sel_contentScaleFactor);
    specialized TextBoxView._applyScaleToView(scale:view:)(v130, v131);
    if (!v142)
    {

      id v132 = v145;
      goto LABEL_55;
    }
    TextBoxView.registerForFirstResponderNotifications()();

    id v27 = &lazy protocol witness table cache variable for type PaperDocumentView and conformance PaperDocumentView;
    uint64_t v7 = v141;
    uint64_t v11 = v149;
    uint64_t v17 = v150;
LABEL_3:
    uint64_t v28 = MEMORY[0x210550400](&v2[direct field offset for TextBoxView.canvasElementView], v25);
    if (!v28) {
      return;
    }
    double v29 = (unsigned int (**)(uint64_t, uint64_t, void (*)(void, void)))v28;
    uint64_t v150 = v17;
    uint64_t v30 = TextBoxView.canvas.getter();
    if (!v30) {
      goto LABEL_45;
    }
    CGRect v31 = v30;
    AnyCanvas.selectedCanvasElementIds.getter();
    char v33 = v32;

    uint64_t v34 = (void (*)(void, void, void))v157;
    CanvasElementView.canvasElement.getter((uint64_t)v157);
    uint64_t v35 = v159;
    Capsule<>.rootID.getter();
    uint64_t v36 = *(void (**)(void, void))(v160 + 8);
    uint64_t v37 = v35;
    uint64_t v38 = v33;
    v160 += 8;
    uint64_t v155 = v36;
    v36(v34, v37);
    *(void *)&long long v158 = *((void *)v33 + 2);
    if (!(void)v158)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
LABEL_24:
      swift_bridgeObjectRelease();
      uint64_t v70 = TextBoxView.canvas.getter();
      id v27 = &lazy protocol witness table cache variable for type PaperDocumentView and conformance PaperDocumentView;
      if (v70)
      {
        unint64_t v71 = v70;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRKeyPath>);
        uint64_t v72 = swift_allocObject();
        *(_OWORD *)(v72 + 16) = xmmword_20C832C20;
        uint64_t v73 = v156;
        CanvasElementView.canvasElement.getter(v156);
        uint64_t v74 = v159;
        Capsule<>.rootID.getter();
        v155(v73, v74);
        AnyCanvas.selectedCanvasElementIds.setter(v72);
      }
      goto LABEL_45;
    }
    unint64_t v154 = v29;
    unint64_t v146 = v2;
    unint64_t v39 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v40 = &v33[v39];
    id v41 = v161;
    long long v157 = *(void **)(v7 + 16);
    ((void (*)(char *, char *, uint64_t))v157)(v161, v40, v6);
    _s9Coherence9CRKeyPathVACSQAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
    swift_bridgeObjectRetain();
    uint64_t v149 = v11;
    char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v43 = *(void (**)(char *, uint64_t))(v7 + 8);
    v43((char *)v41, v6);
    if (v42) {
      break;
    }
    if ((void)v158 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v2 = v146;
      uint64_t v62 = v149;
      double v29 = v154;
LABEL_23:
      v43(v62, v6);
      goto LABEL_24;
    }
    uint64_t v152 = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    unint64_t v148 = (char *)v6;
    uint64_t v141 = v7;
    uint64_t v63 = *(void *)(v7 + 72);
    id v153 = v38;
    uint64_t v23 = &v38[v63 + v39];
    uint64_t v64 = 1;
    unint64_t v65 = v148;
    while (1)
    {
      ((void (*)(void *, char *, char *))v157)(v41, v23, v65);
      uint64_t v66 = v64 + 1;
      if (__OFADD__(v64, 1)) {
        break;
      }
      char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v68 = (char *)v41;
      char v69 = v67;
      v43(v68, (uint64_t)v65);
      if (v69)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = v146;
        uint64_t v6 = (uint64_t)v148;
        goto LABEL_44;
      }
      ++v64;
      v23 += v63;
      id v41 = v161;
      if (v66 == (void)v158)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = v146;
        uint64_t v6 = (uint64_t)v148;
        uint64_t v62 = v149;
        double v29 = v154;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_59:
    swift_once();
  }
  swift_bridgeObjectRelease();
  uint64_t v2 = v146;
LABEL_44:
  v43(v149, v6);
  swift_bridgeObjectRelease();
  id v27 = &lazy protocol witness table cache variable for type PaperDocumentView and conformance PaperDocumentView;
  double v29 = v154;
LABEL_45:
  uint64_t v133 = TextBoxView.canvas.getter();
  if (!v133) {
    goto LABEL_56;
  }
  id v132 = v133;
  uint64_t v134 = v2;
  id v135 = objc_msgSend(v132, sel_window);
  if (v135)
  {
    id v117 = v135;
    id v136 = objc_msgSend(self, sel_activeToolPickerForWindow_, v135);
    if (v136)
    {
      id v126 = v136;
      id v137 = objc_msgSend(v136, sel__visibilityUpdatesEnabled);
      objc_msgSend(v126, sel__setVisibilityUpdatesEnabled_, 0);
      uint64_t v138 = *(void **)&v134[v27[41]];
      if (v138) {
        objc_msgSend(v138, sel_becomeFirstResponder);
      }
      objc_msgSend(v126, sel__setVisibilityUpdatesEnabled_, v137);

      id v132 = v29;
      goto LABEL_55;
    }
  }
  unint64_t v139 = *(void **)&v134[v27[41]];
  if (v139) {
    objc_msgSend(v139, sel_becomeFirstResponder);
  }
  id v117 = v134;
  id v126 = v29;
LABEL_55:

  double v29 = (unsigned int (**)(uint64_t, uint64_t, void (*)(void, void)))v126;
LABEL_56:
}

uint64_t key path getter for ShapeTextBox.emptyStringAttributes : <A>A(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 112))(*(void *)(a3 + a2 - 24));
}

uint64_t key path setter for ShapeTextBox.emptyStringAttributes : <A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 24);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v9, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 120))(v9, v5, v6);
}

void TextBoxView.maxCanvasModelWidth.getter()
{
  uint64_t v0 = TextBoxView.canvas.getter();
  if (v0)
  {
    id v1 = v0;
    uint64_t v2 = (void *)MEMORY[0x263F8EED0];
    BOOL v3 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2F8))();
    CGFloat v4 = (*(double (**)(void))((*v2 & *v3) + 0x138))();
    CGFloat v6 = v5;
    CGFloat v8 = v7;
    CGFloat v10 = v9;

    v11.origin.CGFloat x = v4;
    v11.origin.CGFloat y = v6;
    v11.size.double width = v8;
    v11.size.double height = v10;
    CGRectGetWidth(v11);
  }
}

double TextBoxView.canvasElementViewFrameInModelSpace.getter()
{
  id v1 = (char *)MEMORY[0x210550400](v0 + direct field offset for TextBoxView.canvasElementView);
  if (!v1) {
    return 0.0;
  }
  uint64_t v2 = v1;
  objc_msgSend(v1, sel_frame);
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  uint64_t v11 = MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement]);
  if (v11)
  {
    uint64_t v12 = (void *)v11;
    AnyCanvasElementView.paperBoundsTransform()(&v20);

    long long v14 = *(_OWORD *)&v20.a;
    long long v13 = *(_OWORD *)&v20.c;
    long long v15 = *(_OWORD *)&v20.tx;
  }
  else
  {
    long long v13 = xmmword_20C8356C0;
    long long v14 = xmmword_20C835600;
    long long v15 = 0uLL;
  }
  *(_OWORD *)&v19.CGFloat a = v14;
  *(_OWORD *)&v19.CGFloat c = v13;
  *(_OWORD *)&v19.tCGFloat x = v15;
  CGAffineTransformInvert(&v18, &v19);
  CGAffineTransform v19 = v18;
  v21.origin.CGFloat x = v4;
  v21.origin.CGFloat y = v6;
  v21.size.double width = v8;
  v21.size.double height = v10;
  *(void *)&double v16 = (unint64_t)CGRectApplyAffineTransform(v21, &v19);

  return v16;
}

void TextBoxView.selectionCoordinateSpace.getter(double a1@<X8>)
{
  uint64_t v2 = v1;
  CGFloat v4 = (void *)MEMORY[0x263F8EED0];
  *(void *)&long long v104 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v5 = *(void *)(v104 + 448);
  *(void *)&long long v103 = *(void *)(v104 + 440);
  uint64_t v6 = type metadata accessor for Capsule();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  CGFloat v10 = (char *)&v94 - v9;
  uint64_t v11 = MEMORY[0x210550400]((char *)v1 + direct field offset for TextBoxView.canvasElementView, v8);
  if (!v11)
  {
    long long v15 = xmmword_20C8356C0;
    long long v16 = xmmword_20C835600;
    long long v17 = 0uLL;
LABEL_44:
    **(_OWORD **)&a1 = v16;
    *(_OWORD *)(*(void *)&a1 + 16) = v15;
    *(_OWORD *)(*(void *)&a1 + 32) = v17;
    return;
  }
  uint64_t v12 = (void *)v11;
  long long v13 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  if (v13)
  {
    id v14 = *(id *)((char *)v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  }
  else
  {
    objc_msgSend(v1, sel_bounds);
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82D60]), sel_initWithFrame_textContainer_, *(void *)((char *)v1 + direct field offset for TextBoxView.textContainer), v18, v19, v20, v21);
    long long v13 = 0;
  }
  *(void *)&long long v102 = v7;
  CGFloat v101 = a1;
  uint64_t v22 = one-time initialization token for textBoxTextContainerInset;
  id v23 = v13;
  if (v22 != -1) {
    swift_once();
  }
  id v24 = objc_msgSend(v14, sel_setTextContainerInset_, static UIConstants.textBoxTextContainerInset, *(double *)&qword_26ACC4578, unk_26ACC4580);
  __n128 v25 = *(double (**)(void))((*v4 & *v12) + 0x138);
  uint64_t v26 = ((uint64_t (*)(id))v25)(v24);
  double v28 = v27;
  char v29 = (*(uint64_t (**)(uint64_t))((*v4 & *v12) + 0x110))(v26);
  id v100 = v14;
  if ((v29 & 1) == 0)
  {
    TextBoxView.maxCanvasModelWidth.getter();
    objc_msgSend(v14, sel_sizeThatFits_);
    double v28 = v40;
    double Height = v41;
    goto LABEL_17;
  }
  id v30 = objc_msgSend(v14, sel_sizeThatFits_, v28, 1.79769313e308);
  double Height = v31;
  if (((*(uint64_t (**)(id))((*v4 & *v12) + 0x120))(v30) & 1) == 0) {
    goto LABEL_17;
  }
  v111.origin.CGFloat x = v25();
  if (Height < CGRectGetHeight(v111))
  {
LABEL_15:
    v112.origin.CGFloat x = ((double (*)(uint64_t))v25)(v33);
    double Height = CGRectGetHeight(v112);
    goto LABEL_17;
  }
  id v34 = objc_msgSend(v14, sel_text);
  if (v34)
  {
    uint64_t v35 = v34;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v37;

    uint64_t v33 = swift_bridgeObjectRelease();
    uint64_t v39 = HIBYTE(v38) & 0xF;
    if ((v38 & 0x2000000000000000) == 0) {
      uint64_t v39 = v36 & 0xFFFFFFFFFFFFLL;
    }
    if (!v39) {
      goto LABEL_15;
    }
LABEL_17:
    double v44 = CanvasElementView.modelFrame.getter();
    double MinY = v45;
    CGFloat v47 = v42;
    CGFloat v48 = v43;
    uint64_t v49 = v102;
    if (vabdd_f64(v42, v28) < 0.1 && vabdd_f64(v43, Height) < 0.1)
    {
      double v28 = v42;
      double Height = v43;
LABEL_20:
      a1 = v101;
LABEL_43:
      CGFloat v101 = v28;
      *(double *)&long long v102 = Height;
      uint64_t v79 = CanvasElementView.canvasElement.getter((uint64_t)v10);
      MEMORY[0x270FA5388](v79);
      *(&v94 - 4) = v103;
      *(&v94 - 3) = v5;
      *(&v94 - 2) = *(void *)(v104 + 456);
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v10, v6);
      CGFloat v80 = v107;
      *(double *)&long long v104 = v44 - v28 * 0.0;
      *(double *)&long long v103 = MinY - Height * 0.0;
      v118.origin.CGFloat x = v44;
      v118.origin.CGFloat y = MinY;
      v118.size.double width = v28;
      v118.size.double height = Height;
      double MidX = CGRectGetMidX(v118);
      v119.origin.CGFloat x = v44;
      v119.origin.CGFloat y = MinY;
      v119.size.double width = v28;
      v119.size.double height = Height;
      double MidY = CGRectGetMidY(v119);
      CGAffineTransformMakeRotation(&t1, v80);
      long long v99 = *(_OWORD *)&t1.a;
      long long v98 = *(_OWORD *)&t1.c;
      CGFloat v83 = -MidY;
      tCGFloat x = t1.tx;
      tCGFloat y = t1.ty;
      CGAffineTransformMakeTranslation(&t1, -MidX, v83);
      CGFloat a = t1.a;
      CGFloat b = t1.b;
      CGFloat c = t1.c;
      CGFloat d = t1.d;
      CGFloat v90 = t1.tx;
      CGFloat v91 = t1.ty;
      *(_OWORD *)&t2.CGFloat a = v99;
      *(_OWORD *)&t2.CGFloat c = v98;
      t2.tCGFloat x = tx;
      t2.tCGFloat y = ty;
      CGAffineTransformConcat(&v105, &t1, &t2);
      long long v99 = *(_OWORD *)&v105.a;
      long long v98 = *(_OWORD *)&v105.c;
      CGFloat v92 = v105.tx;
      CGFloat v93 = v105.ty;
      t1.CGFloat a = a;
      t1.CGFloat b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.tCGFloat x = v90;
      t1.tCGFloat y = v91;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.CGFloat a = v99;
      *(_OWORD *)&t1.CGFloat c = v98;
      t1.tCGFloat x = v92;
      t1.tCGFloat y = v93;
      CGAffineTransformConcat(&v105, &t1, &t2);
      t1.CGFloat a = v101;
      t1.CGFloat c = 0.0;
      t1.CGFloat b = 0.0;
      *(void *)&t1.CGFloat d = v102;
      *(void *)&t1.tCGFloat x = v104;
      *(void *)&t1.tCGFloat y = v103;
      CGAffineTransform t2 = v105;
      CGAffineTransformConcat(&v105, &t1, &t2);
      long long v104 = *(_OWORD *)&v105.a;
      long long v103 = *(_OWORD *)&v105.c;
      long long v102 = *(_OWORD *)&v105.tx;

      long long v17 = v102;
      long long v16 = v104;
      long long v15 = v103;
      goto LABEL_44;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    initeCGFloat d = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C835790;
    *(void *)(inited + 32) = v2;
    *(void *)&t1.CGFloat a = inited;
    specialized Array._endMutation()();
    unint64_t v51 = *(void *)&t1.a;
    id v52 = v2;
    Array<A>.displayAttributes.getter(v51, (uint64_t *)&t1);
    swift_bridgeObjectRelease();
    *(CGFloat *)&long long v99 = t1.tx;
    CGFloat v95 = t1.ty;
    int v96 = v109;
    double v53 = v110;
    uint64_t v54 = CanvasElementView.canvasElement.getter((uint64_t)v10);
    MEMORY[0x270FA5388](v54);
    *(&v94 - 4) = v103;
    *(&v94 - 3) = v5;
    *(&v94 - 2) = *(void *)(v104 + 456);
    swift_getKeyPath();
    uint64_t v97 = v5;
    Capsule<>.subscript.getter();
    swift_release();
    id v55 = *(void (**)(char *, uint64_t))(v49 + 8);
    *(void *)&long long v98 = v6;
    v55(v10, v6);
    if (!*(void *)&t1.a)
    {
      v113.origin.CGFloat x = v44;
      v113.origin.CGFloat y = MinY;
      v113.size.double width = v47;
      v113.size.double height = v48;
      double Width = CGRectGetWidth(v113);
      if (v28 >= Width) {
        double v28 = Width;
      }
      v114.origin.CGFloat x = v44;
      v114.origin.CGFloat y = MinY;
      v114.size.double width = v47;
      v114.size.double height = v48;
      double v64 = CGRectGetHeight(v114);
      if (Height >= v64) {
        double Height = v64;
      }
      v115.origin.CGFloat x = v44;
      v115.origin.CGFloat y = MinY;
      v115.size.double width = v47;
      v115.size.double height = v48;
      double v65 = CGRectGetMidX(v115);
      v116.origin.CGFloat x = v44;
      v116.origin.CGFloat y = MinY;
      v116.size.double width = v47;
      v116.size.double height = v48;
      double v66 = CGRectGetMidY(v116);

      swift_bridgeObjectRelease();
      double v44 = v65 - v28 * 0.5;
      double MinY = v66 - Height * 0.5;
      a1 = v101;
      uint64_t v6 = v98;
      uint64_t v5 = v97;
      goto LABEL_43;
    }
    if (*((unsigned char *)v52 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling) == 1)
    {
      double v44 = TextBoxView.canvasElementViewFrameInModelSpace.getter();
      double MinY = v56;
      CGFloat v47 = v57;
      CGFloat v48 = v58;
      uint64_t v5 = v97;
      if (*((unsigned char *)v52 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling) == 1)
      {
        id v59 = objc_msgSend(v52, sel_traitCollection);
        id v60 = objc_msgSend(v59, sel_layoutDirection);

        char v69 = v53;
        if (*((unsigned char *)v52 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling) != 1)
        {
          a1 = v101;
          uint64_t v49 = v102;
          uint64_t v6 = v98;
          int v70 = v96;
          CGFloat v71 = v95;
          if (!v60)
          {

            swift_bridgeObjectRelease();
            goto LABEL_43;
          }
          BOOL v67 = 0;
          uint64_t v68 = (void *)v99;
LABEL_35:
          if (v71 == 0.0) {
            char v72 = v70;
          }
          else {
            char v72 = 1;
          }
          if (v72)
          {
            double v73 = v44;
            double v74 = MinY;
            CGFloat v75 = v47;
            CGFloat v76 = v48;
            if ((v67 | (*(void *)&v71 == 2) & ~v70) == 1)
            {
              double v77 = CGRectGetWidth(*(CGRect *)&v73);

              swift_bridgeObjectRelease();
              double v44 = v44 - (v28 - v77);
            }
            else
            {
              CGFloat v78 = CGRectGetMidX(*(CGRect *)&v73) + v28 * -0.5;
              v117.origin.CGFloat x = v44;
              v117.origin.CGFloat y = MinY;
              v117.size.double width = v47;
              v117.size.double height = v48;
              double MinY = CGRectGetMinY(v117);

              swift_bridgeObjectRelease();
              double v44 = v78;
            }
          }
          else
          {

            swift_bridgeObjectRelease();
          }
          goto LABEL_43;
        }
        id v61 = objc_msgSend(v52, sel_traitCollection);
        id v62 = objc_msgSend(v61, sel_layoutDirection);

        BOOL v67 = v62 == (id)1;
        uint64_t v49 = v102;
        uint64_t v6 = v98;
        if (!v60)
        {

          swift_bridgeObjectRelease();
          goto LABEL_20;
        }
        a1 = v101;
        uint64_t v68 = (void *)v99;
      }
      else
      {
        BOOL v67 = 0;
        a1 = v101;
        uint64_t v49 = v102;
        uint64_t v68 = (void *)v99;
        char v69 = v53;
        uint64_t v6 = v98;
      }
    }
    else
    {
      BOOL v67 = 0;
      a1 = v101;
      uint64_t v49 = v102;
      uint64_t v68 = (void *)v99;
      char v69 = v53;
      uint64_t v6 = v98;
      uint64_t v5 = v97;
    }
    int v70 = v96;
    CGFloat v71 = v95;
    goto LABEL_35;
  }
  __break(1u);
}

Swift::Void __swiftcall TextBoxView.setFixedWidth()()
{
  id v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  double v3 = (void *)(*MEMORY[0x263F8EED0] & *v0);
  uint64_t v4 = v3[55];
  uint64_t v5 = v3[56];
  uint64_t v6 = type metadata accessor for Capsule();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  CGFloat v10 = (char *)&v48 - v9;
  uint64_t v11 = (void *)MEMORY[0x210550400]((char *)v0 + direct field offset for TextBoxView.canvasElementView, v8);
  if (v11)
  {
    uint64_t v12 = *(uint64_t (**)(void))((*v2 & *v11) + 0x110);
    id v54 = v11;
    if (v12())
    {
      id v13 = v54;
    }
    else
    {
      id v14 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
      if (v14)
      {
        id v15 = *(id *)((char *)v0 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
      }
      else
      {
        objc_msgSend(v0, sel_bounds);
        id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82D60]), sel_initWithFrame_textContainer_, *(void *)((char *)v0 + direct field offset for TextBoxView.textContainer), v16, v17, v18, v19);
        id v14 = 0;
      }
      uint64_t v20 = one-time initialization token for textBoxTextContainerInset;
      id v21 = v14;
      if (v20 != -1) {
        swift_once();
      }
      objc_msgSend(v15, sel_setTextContainerInset_, static UIConstants.textBoxTextContainerInset, *(double *)&qword_26ACC4578, unk_26ACC4580);
      TextBoxView.maxCanvasModelWidth.getter();
      objc_msgSend(v15, sel_sizeThatFits_);
      double v23 = v22;
      double v25 = v24;
      v60.origin.CGFloat x = CanvasElementView.modelFrame.getter();
      CGFloat v26 = CGRectGetMidX(v60) + v23 * -0.5;
      v61.origin.CGFloat x = CanvasElementView.modelFrame.getter();
      double MinY = CGRectGetMinY(v61);
      uint64_t v28 = CanvasElementView.canvasElement.getter((uint64_t)v10);
      MEMORY[0x270FA5388](v28);
      *((void *)&v48 - 4) = v4;
      *((void *)&v48 - 3) = v5;
      uint64_t v29 = v3[57];
      *((void *)&v48 - 2) = v29;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      CGFloat v30 = v58;
      CGFloat v53 = v26 - v23 * 0.0;
      CGFloat v52 = MinY - v25 * 0.0;
      v62.origin.CGFloat x = v26;
      v62.origin.CGFloat y = MinY;
      v62.size.double width = v23;
      CGFloat v50 = v23;
      v62.size.double height = v25;
      CGFloat v51 = v25;
      double MidX = CGRectGetMidX(v62);
      v63.origin.CGFloat x = v26;
      v63.origin.CGFloat y = MinY;
      v63.size.double width = v23;
      v63.size.double height = v25;
      double MidY = CGRectGetMidY(v63);
      CGAffineTransformMakeRotation(&t1, v30);
      long long v49 = *(_OWORD *)&t1.a;
      long long v48 = *(_OWORD *)&t1.c;
      CGFloat v33 = -MidY;
      tCGFloat x = t1.tx;
      tCGFloat y = t1.ty;
      CGAffineTransformMakeTranslation(&t1, -MidX, v33);
      CGFloat a = t1.a;
      CGFloat b = t1.b;
      CGFloat c = t1.c;
      CGFloat d = t1.d;
      CGFloat v40 = t1.tx;
      CGFloat v41 = t1.ty;
      *(_OWORD *)&t2.CGFloat a = v49;
      *(_OWORD *)&t2.CGFloat c = v48;
      t2.tCGFloat x = tx;
      t2.tCGFloat y = ty;
      CGAffineTransformConcat(&v55, &t1, &t2);
      long long v49 = *(_OWORD *)&v55.a;
      long long v48 = *(_OWORD *)&v55.c;
      CGFloat v42 = v55.tx;
      CGFloat v43 = v55.ty;
      t1.CGFloat a = a;
      t1.CGFloat b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.tCGFloat x = v40;
      t1.tCGFloat y = v41;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.CGFloat a = v49;
      *(_OWORD *)&t1.CGFloat c = v48;
      t1.tCGFloat x = v42;
      t1.tCGFloat y = v43;
      CGAffineTransformConcat(&v55, &t1, &t2);
      t1.CGFloat a = v50;
      t1.CGFloat b = 0.0;
      t1.CGFloat c = 0.0;
      t1.CGFloat d = v51;
      t1.tCGFloat x = v53;
      t1.tCGFloat y = v52;
      CGAffineTransform t2 = v55;
      double v44 = CGAffineTransformConcat(&v55, &t1, &t2);
      long long v45 = *(_OWORD *)&v55.c;
      long long v46 = *(_OWORD *)&v55.tx;
      CGFloat v47 = (char *)v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_liveUneditedModelCoordinateSpace;
      *(_OWORD *)CGFloat v47 = *(_OWORD *)&v55.a;
      *((_OWORD *)v47 + 1) = v45;
      *((_OWORD *)v47 + 2) = v46;
      v47[48] = 0;
      MEMORY[0x270FA5388](v44);
      *((void *)&v48 - 2) = v5;
      *((void *)&v48 - 1) = v29;
      swift_beginAccess();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CanvasElementAutoresizeBehavior?);
      Capsule.callAsFunction<A>(_:)();
      swift_endAccess();
    }
  }
}

uint64_t closure #1 in TextBoxView.setFixedWidth()@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  double v3 = (void (*)(char *, void))Capsule.Ref<>.subscript.modify();
  unint64_t v4 = *v2;
  if (*v2)
  {
    unint64_t *v2 = v4 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = (v4 & 1) == 0;
  v3(v7, 0);
  return swift_release();
}

Swift::Void __swiftcall TextBoxView._updateFrames()()
{
  id v1 = v0;
  uint64_t v2 = MEMORY[0x210550400](&v0[direct field offset for TextBoxView.canvasElementView]);
  if (v2)
  {
    double v3 = (char *)v2;
    TextBoxView.selectionCoordinateSpace.getter(COERCE_DOUBLE(v74));
    tdouble y = 0.0;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v75, 0.0);
    CGFloat a = v75.a;
    CGFloat b = v75.b;
    double c = v75.c;
    CGFloat d = v75.d;
    CGFloat angle = v75.tx;
    uint64_t v9 = MEMORY[0x210550400](&v3[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement]);
    if (v9)
    {
      CGFloat v10 = (void *)v9;
      AnyCanvasElementView.paperBoundsTransform()(&v75);

      double v11 = v75.a;
      CGFloat v12 = v75.b;
      CGFloat v13 = v75.c;
      double v14 = v75.d;
      tdouble x = v75.tx;
      tdouble y = v75.ty;
    }
    else
    {
      double v14 = 1.0;
      tdouble x = 0.0;
      CGFloat v13 = 0.0;
      CGFloat v12 = 0.0;
      double v11 = 1.0;
    }
    t1.CGFloat a = v11;
    t1.CGFloat b = v12;
    t1.double c = v13;
    t1.CGFloat d = v14;
    t1.tdouble x = tx;
    t1.tdouble y = ty;
    double v69 = v11;
    double v70 = v12;
    v76.origin.double x = a;
    double v60 = d;
    CGFloat v61 = a;
    CGFloat v16 = v11;
    v76.origin.double y = b;
    v76.size.double width = c;
    v76.size.double height = d;
    CGFloat v17 = v13;
    CGRect v77 = CGRectApplyAffineTransform(v76, &t1);
    double y = v77.origin.y;
    double x = v77.origin.x;
    double height = v77.size.height;
    double width = v77.size.width;
    t1.CGFloat a = v16;
    t1.CGFloat b = v12;
    t1.double c = v17;
    t1.CGFloat d = v14;
    t1.tdouble x = tx;
    t1.tdouble y = ty;
    v77.origin.double x = v61;
    v77.origin.double y = b;
    v77.size.double width = c;
    v77.size.double height = v60;
    CGRect v78 = CGRectApplyAffineTransform(v77, &t1);
    double v18 = v78.origin.x;
    double v19 = v78.origin.y;
    objc_msgSend(v3, sel_frame);
    double v21 = v18 - v20;
    t1.CGFloat a = 1.0;
    t1.CGFloat b = 0.0;
    double v23 = v19 - v22;
    t1.double c = 0.0;
    t1.CGFloat d = 1.0;
    t1.tdouble x = 0.0;
    t1.tdouble y = 0.0;
    objc_msgSend(v1, sel_setTransform_, &t1);
    objc_msgSend(v1, sel_setFrame_, v21, v23, fabs(c), fabs(v60));
    objc_msgSend(v1, sel_bounds);
    CGFloat v24 = v79.origin.x;
    CGFloat v25 = v79.origin.y;
    CGFloat v26 = v79.size.width;
    CGFloat v27 = v79.size.height;
    double MidX = CGRectGetMidX(v79);
    v80.origin.double x = v24;
    v80.origin.double y = v25;
    v80.size.double width = v26;
    v80.size.double height = v27;
    double MidY = CGRectGetMidY(v80);
    CGAffineTransformMakeRotation(&t1, angle);
    long long v62 = *(_OWORD *)&t1.c;
    *(_OWORD *)angleCGFloat a = *(_OWORD *)&t1.a;
    CGFloat v30 = -MidX;
    CGFloat v31 = -MidY;
    CGFloat v32 = t1.tx;
    CGFloat v33 = t1.ty;
    CGAffineTransformMakeTranslation(&t1, v30, v31);
    CGFloat v34 = t1.a;
    CGFloat v35 = t1.b;
    CGFloat v36 = t1.c;
    CGFloat v37 = t1.d;
    CGFloat v38 = t1.tx;
    CGFloat v39 = t1.ty;
    *(_OWORD *)&t2.CGFloat a = *(_OWORD *)anglea;
    *(_OWORD *)&t2.double c = v62;
    t2.tdouble x = v32;
    t2.tdouble y = v33;
    CGAffineTransformConcat(&v71, &t1, &t2);
    long long v63 = *(_OWORD *)&v71.c;
    *(_OWORD *)angleCGFloat b = *(_OWORD *)&v71.a;
    CGFloat v40 = v71.tx;
    CGFloat v41 = v71.ty;
    t1.CGFloat a = v34;
    t1.CGFloat b = v35;
    t1.double c = v36;
    t1.CGFloat d = v37;
    t1.tdouble x = v38;
    t1.tdouble y = v39;
    CGAffineTransformInvert(&t2, &t1);
    *(_OWORD *)&t1.CGFloat a = *(_OWORD *)angleb;
    *(_OWORD *)&t1.double c = v63;
    t1.tdouble x = v40;
    t1.tdouble y = v41;
    CGAffineTransformConcat(&v71, &t1, &t2);
    long long v64 = *(_OWORD *)&v71.c;
    *(_OWORD *)angledouble c = *(_OWORD *)&v71.a;
    CGFloat v42 = v71.tx;
    CGFloat v43 = v71.ty;
    CGFloat v44 = sqrt(v70 * v70 + v69 * v69);
    CGAffineTransformMakeScale(&t1, v44, v44);
    long long v45 = *(_OWORD *)&t1.a;
    long long v46 = *(_OWORD *)&t1.c;
    long long v47 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = *(_OWORD *)anglec;
    *(_OWORD *)&t1.double c = v64;
    t1.tdouble x = v42;
    t1.tdouble y = v43;
    *(_OWORD *)&t2.CGFloat a = v45;
    *(_OWORD *)&t2.double c = v46;
    *(_OWORD *)&t2.tdouble x = v47;
    CGAffineTransformConcat(&v71, &t1, &t2);
    CGAffineTransform t1 = v71;
    objc_msgSend(v1, sel_setTransform_, &t1);
    long long v48 = &v1[direct field offset for TextBoxView.delegate];
    if (MEMORY[0x210550400](&v1[direct field offset for TextBoxView.delegate]))
    {
      uint64_t v49 = *((void *)v48 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(char *, uint64_t, uint64_t, double, double, double, double))(v49 + 16))(v1, ObjectType, v49, x, y, width, height);
      swift_unknownObjectRelease();
    }
    id v51 = *(id *)&v1[direct field offset for TextBoxView.textContainer];
    objc_msgSend(v1, sel_bounds);
    objc_msgSend(v51, sel_setSize_, v52, v53);

    id v54 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
    if (v54)
    {
      id v55 = v54;
      objc_msgSend(v1, sel_bounds);
      objc_msgSend(v55, sel_setFrame_);
    }
  }
}

Swift::Void __swiftcall TextBoxView._updateScaleFactor()()
{
  id v1 = v0;
  uint64_t v2 = TextBoxView.canvas.getter();
  if (v2)
  {
    double v3 = v2;
    unint64_t v4 = (void *)MEMORY[0x263F8EED0];
    uint64_t v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x308))();
    double v6 = 1.0;
    double v7 = 1.0;
    if (v5)
    {
      double v8 = v5;
      objc_msgSend(v5, sel_zoomScale);
      double v7 = v9;
    }
    (*(void (**)(void *__return_ptr))((*v4 & *v3) + 0x5D0))(v14);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v14, (uint64_t)&v15, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
    if ((v17 & 1) == 0) {
      double v6 = sqrt(v15 * v15 + v16 * v16);
    }
    double v10 = v7 * v6;
    id v11 = objc_msgSend(self, sel_mainScreen);
    objc_msgSend(v11, sel_scale);
    double v13 = v12;

    specialized TextBoxView._applyScaleToView(scale:view:)(v1, v10 * v13);
  }
}

void @objc TextBoxView.textViewDidBeginEditing(_:)()
{
}

Swift::Void __swiftcall TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(Swift::Bool closeUndoGroup)
{
  uint64_t v2 = v1;
  BOOL v75 = closeUndoGroup;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CapsuleUndoAction();
  uint64_t v76 = *(void *)(v6 - 8);
  uint64_t v77 = v6;
  MEMORY[0x270FA5388](v6);
  double v74 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  double v10 = (char *)&v65 - v9;
  uint64_t v11 = type metadata accessor for Capsule();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  MEMORY[0x270FA5388](v14);
  MEMORY[0x270FA5388](v15);
  char v17 = (char *)&v65 - v16;
  MEMORY[0x270FA5388](v18);
  double v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  CGFloat v26 = (char *)&v65 - v25;
  uint64_t v27 = *(void *)(v2 + direct field offset for TextBoxView.currentUndoAction);
  if (v27)
  {
    uint64_t v70 = v23;
    CGAffineTransform v71 = v10;
    uint64_t v73 = v22;
    uint64_t v28 = *(void *)(*(void *)v27 + 104);
    uint64_t v78 = v24;
    uint64_t v29 = v27 + v28;
    swift_beginAccess();
    CGFloat v30 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v72 = v29;
    uint64_t v31 = v29;
    uint64_t v32 = v78;
    v30(v17, v31, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v17, 1, v11) == 1)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
      return;
    }
    uint64_t v68 = v13;
    uint64_t v69 = v12;
    uint64_t v33 = v32 + 32;
    CGFloat v34 = *(void (**)(uint64_t, char *, uint64_t))(v32 + 32);
    uint64_t v35 = v32;
    CGFloat v36 = v26;
    double v66 = v34;
    uint64_t v67 = v33;
    v34((uint64_t)v26, v17, v11);
    uint64_t v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v35 + 16))(v20, v26, v11);
    MEMORY[0x270FA5388](v37);
    *(&v65 - 2) = v2;
    swift_retain();
    Capsule.callAsFunction<A>(_:)();
    Capsule.actionUndoingDifference(from:)();
    uint64_t v39 = v76;
    uint64_t v38 = v77;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v5, 1, v77) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for CapsuleUndoAction?);
      uint64_t v40 = v69;
      if (!v75)
      {
LABEL_6:
        uint64_t v41 = v78;
        (*(void (**)(char *, uint64_t))(v78 + 8))(v36, v11);
        uint64_t v42 = v73;
        v66(v73, v20, v11);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v11);
        uint64_t v43 = v68;
        uint64_t v44 = v70;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 32))(v70, v42, v40);
        uint64_t v45 = v72;
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 40))(v45, v44, v40);
        swift_endAccess();
        swift_release();
        return;
      }
    }
    else
    {
      long long v46 = *(void (**)(unint64_t, char *, uint64_t))(v39 + 32);
      long long v47 = v71;
      uint64_t v65 = v39 + 32;
      long long v48 = v46;
      v46((unint64_t)v71, v5, v38);
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v74, v47, v38);
      uint64_t v49 = (unint64_t *)(v27 + *(void *)(*(void *)v27 + 112));
      swift_beginAccess();
      unint64_t v50 = *v49;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v49 = v50;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v50 + 16) + 1, 1, v50);
        *uint64_t v49 = v50;
      }
      uint64_t v40 = v69;
      unint64_t v53 = *(void *)(v50 + 16);
      unint64_t v52 = *(void *)(v50 + 24);
      uint64_t v54 = v53 + 1;
      if (v53 >= v52 >> 1)
      {
        uint64_t v69 = v53 + 1;
        uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1, v50);
        uint64_t v54 = v69;
        unint64_t v50 = v64;
        *uint64_t v49 = v64;
      }
      *(void *)(v50 + 16) = v54;
      uint64_t v55 = v76;
      unint64_t v56 = v50
          + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))
          + *(void *)(v76 + 72) * v53;
      uint64_t v57 = v77;
      v48(v56, v74, v77);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v71, v57);
      if (!v75) {
        goto LABEL_6;
      }
    }
    uint64_t v58 = v40;
    uint64_t v59 = v78;
    uint64_t v60 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v73, 1, 1, v11);
    CGFloat v61 = v36;
    uint64_t v62 = v72;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 40))(v62, v60, v58);
    swift_endAccess();
    *(void *)(v2 + direct field offset for TextBoxView.currentUndoAction) = 0;
    swift_release();
    swift_release();
    long long v63 = *(void (**)(char *, uint64_t))(v59 + 8);
    v63(v20, v11);
    v63(v61, v11);
  }
}

uint64_t closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *MEMORY[0x263F8EED0] & *a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v9 = *(void *)((char *)a2 + direct field offset for TextBoxView.textStorage)
     + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  double v10 = (uint64_t (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  (*(void (**)(char *, void))(*(void *)(v4 + 456) + 24))(v8, *(void *)(v3 + *MEMORY[0x263F33088]));
  return v10(v13, 0);
}

Swift::Void __swiftcall TextBoxView.breakUndoCoalescing()()
{
}

Swift::Void __swiftcall TextBoxView.breakUndoCoalescing(_:)(NSNotification a1)
{
  if ([(objc_class *)a1.super.isa object])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v6, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  int v2 = swift_dynamicCast();
  uint64_t v3 = (void *)v6;
  id v4 = objc_msgSend(v1, sel_undoManager);
  uint64_t v5 = v4;
  if (!v2 || !v3)
  {
    if (v4)
    {

      return;
    }
    goto LABEL_11;
  }
  swift_unknownObjectRelease();
  if (v5)
  {

    if (v3 == v5) {
LABEL_11:
    }
      TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(1);
  }
}

void @objc TextBoxView.breakUndoCoalescing(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  TextBoxView.breakUndoCoalescing(_:)((NSNotification)v4);
}

Swift::Void __swiftcall TextBoxView.beginUndoGroupIfNecessary()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Capsule();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  long long v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v18 - v8;
  if (!*(void *)(v0 + direct field offset for TextBoxView.currentUndoAction))
  {
    double v10 = TextBoxView.canvas.getter();
    if (v10)
    {
      uint64_t v18 = v10;
      uint64_t v11 = MEMORY[0x210550400](v0 + direct field offset for TextBoxView.canvasElementView);
      if (v11)
      {
        uint64_t v12 = (void *)v11;
        type metadata accessor for TextBoxUndoSnapshot();
        uint64_t v13 = swift_allocObject();
        TextBoxUndoSnapshot.init()();
        uint64_t v14 = v12;
        CanvasElementView.canvasElement.getter((uint64_t)v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v9, 0, 1, v2);
        (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
        uint64_t v15 = v13 + *(void *)(*(void *)v13 + 104);
        swift_beginAccess();
        (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v15, v6, v3);
        swift_endAccess();
        uint64_t v16 = *(void (**)(uint64_t (*)(void *), uint64_t))((*MEMORY[0x263F8EED0] & *v18) + 0x470);
        swift_retain();
        v16(partial apply for closure #1 in TextBoxView.beginUndoGroupIfNecessary(), v13);
        swift_release();
        *(void *)(v1 + direct field offset for TextBoxView.currentUndoAction) = v13;

        swift_release();
      }
      else
      {
        id v17 = v18;
      }
    }
  }
}

uint64_t closure #1 in TextBoxView.beginUndoGroupIfNecessary()(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CapsuleUndoAction();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t *)(a2 + *(void *)(*(void *)a2 + 112));
  swift_beginAccess();
  uint64_t result = *v8;
  uint64_t v10 = *(void *)(*v8 + 16);
  if (v10)
  {
    uint64_t v13 = *(void (**)(char *, void, void, void, void))((*MEMORY[0x263F8EED0] & *a1) + 0x460);
    unint64_t v11 = result + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v12 = result;
    uint64_t result = swift_bridgeObjectRetain();
    while (v10 <= *(void *)(v12 + 16))
    {
      --v10;
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, v11 + *(void *)(v5 + 72) * v10, v4);
      v13(v7, 0, 0, 0, 0);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if (!v10) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
  }
  return result;
}

void TextBoxView.styleController.getter()
{
}

Swift::Void __swiftcall TextBoxView.textFormat(_:)(UIBarButtonItem_optional a1)
{
  uint64_t v2 = v1;
  isCGFloat a = a1.value.super.super.isa;
  uint64_t v3 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<NSTextAlignment>>.Publisher);
  uint64_t v88 = *(void *)(v87 - 8);
  MEMORY[0x270FA5388](v87);
  uint64_t v85 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Inspected<Color>>.Publisher);
  uint64_t v83 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v81 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Bool>>.Publisher);
  uint64_t v102 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  CGRect v79 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Int>>.Publisher);
  uint64_t v95 = *(void *)(v94 - 8);
  MEMORY[0x270FA5388](v94);
  CGFloat v93 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<String>>.Publisher);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
  uint64_t v13 = v12 - 8;
  MEMORY[0x270FA5388](v12);
  uint64_t v86 = (uint64_t)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v84 = (uint64_t)&v78 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v78 - v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C835790;
  *(void *)(inited + 32) = v1;
  *(void *)&long long v104 = inited;
  specialized Array._endMutation()();
  unint64_t v21 = v104;
  uint64_t v22 = v2;
  Array<A>.displayAttributes.getter(v21, (uint64_t *)&v104);
  swift_bridgeObjectRelease();
  uint64_t v23 = *((void *)&v104 + 1);
  uint64_t v24 = v106;
  id v90 = (id)v105;
  id v89 = v24;
  uint64_t v91 = v23;
  swift_bridgeObjectRetain();
  CGFloat v101 = v19;
  TextStyleSelector.init<>(attributes:fontTapHandler:colorTapHandler:)(&v104, 0, 0, 0, 0, (uint64_t)v19);
  *(void *)&v19[*(int *)(v13 + 56) + 8] = &protocol witness table for TextBoxView<A>;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Inspected<String>>);
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  uint64_t v25 = swift_allocObject();
  swift_unknownObjectWeakInit();
  CGFloat v26 = (void *)swift_allocObject();
  uint64_t v99 = *(void *)(v3 + 440);
  void v26[2] = v99;
  uint64_t v27 = *(void *)(v3 + 448);
  uint64_t v28 = v3;
  v26[3] = v27;
  uint64_t v29 = v27;
  uint64_t v98 = v27;
  uint64_t v30 = *(void *)(v28 + 456);
  void v26[4] = v30;
  v26[5] = v25;
  uint64_t v31 = MEMORY[0x263EFDE50];
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Published<Inspected<String>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Inspected<String>>.Publisher);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v32 = &v22[direct field offset for TextBoxView.cancellables];
  long long v103 = v22;
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Int>>);
  uint64_t v33 = v93;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v35 = (void *)swift_allocObject();
  uint64_t v36 = v99;
  v35[2] = v99;
  void v35[3] = v29;
  uint64_t v96 = v30;
  v35[4] = v30;
  v35[5] = v34;
  uint64_t v80 = v31;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Published<Inspected<Int>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Inspected<Int>>.Publisher);
  uint64_t v37 = v94;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v95 + 8))(v33, v37);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Bool>>);
  uint64_t v38 = v79;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  uint64_t v39 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v40 = (void *)swift_allocObject();
  id v40[2] = v36;
  uint64_t v41 = v98;
  v40[3] = v98;
  v40[4] = v30;
  v40[5] = v39;
  uint64_t v94 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Published<Inspected<Bool>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Inspected<Bool>>.Publisher);
  uint64_t v42 = v100;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  CGFloat v93 = *(char **)(v102 + 8);
  v102 += 8;
  ((void (*)(char *, uint64_t))v93)(v38, v42);
  uint64_t v97 = v32;
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  uint64_t v43 = v38;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  uint64_t v44 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v45 = (void *)swift_allocObject();
  uint64_t v46 = v99;
  v45[2] = v99;
  v45[3] = v41;
  uint64_t v47 = v96;
  v45[4] = v96;
  void v45[5] = v44;
  uint64_t v48 = v100;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  uint64_t v49 = (void (*)(char *, uint64_t))v93;
  ((void (*)(char *, uint64_t))v93)(v43, v48);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  uint64_t v50 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v51 = (void *)swift_allocObject();
  uint64_t v52 = v98;
  _OWORD v51[2] = v46;
  v51[3] = v52;
  v51[4] = v47;
  v51[5] = v50;
  uint64_t v53 = v100;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  v49(v43, v53);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  uint64_t v54 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v55 = (void *)swift_allocObject();
  v55[2] = v46;
  v55[3] = v52;
  uint64_t v56 = v96;
  v55[4] = v96;
  v55[5] = v54;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  ((void (*)(char *, uint64_t))v93)(v43, v53);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Color>>);
  uint64_t v57 = v81;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  uint64_t v58 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v59 = (void *)swift_allocObject();
  uint64_t v60 = v99;
  v59[2] = v99;
  v59[3] = v52;
  v59[4] = v56;
  v59[5] = v58;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Published<Inspected<Color>>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<Inspected<Color>>.Publisher);
  uint64_t v61 = v82;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v57, v61);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v62 = (uint64_t)v101;
  swift_beginAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<NSTextAlignment>>);
  long long v63 = v85;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  uint64_t v64 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v65 = (void *)swift_allocObject();
  uint64_t v66 = v98;
  v65[2] = v60;
  v65[3] = v66;
  v65[4] = v56;
  v65[5] = v64;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Published<Inspected<NSTextAlignment>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Inspected<NSTextAlignment>>.Publisher);
  uint64_t v67 = v87;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v88 + 8))(v63, v67);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v68 = v84;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v62, v84, (uint64_t *)&demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
  id v69 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SecureHostingController<TextStyleSelector<TextStyleSelectorModel>>));
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v68, v86, (uint64_t *)&demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
  uint64_t v70 = (void *)UIHostingController.init(rootView:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v68, (uint64_t *)&demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
  objc_msgSend(v70, sel_setModalPresentationStyle_, 7);
  id v71 = objc_msgSend(v70, sel_popoverPresentationController);
  objc_msgSend(v71, sel_setBarButtonItem_, isa);

  id v72 = objc_msgSend(v70, sel_popoverPresentationController);
  if (v72)
  {
    uint64_t v73 = v72;
    objc_msgSend(v72, sel_setDelegate_, v103);
  }
  id v74 = v70;
  dispatch thunk of UIHostingController.sizeThatFits(in:)();
  objc_msgSend(v74, sel_setPreferredContentSize_);

  BOOL v75 = TextBoxView.canvas.getter();
  if (v75)
  {
    uint64_t v76 = v75;
    uint64_t v77 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v75) + 0x620))();

    if (v77)
    {
      objc_msgSend(v77, sel_presentViewController_animated_completion_, v74, 1, 0);
    }
  }
  swift_unknownObjectWeakAssign();

  swift_bridgeObjectRelease();
  outlined destroy of StocksKitCurrencyCache.Provider?(v62, (uint64_t *)&demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
}

void closure #1 in TextBoxView.textFormat(_:)(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    uint64_t v3 = *(void *)a1;
    uint64_t v2 = *(void **)(a1 + 8);
    uint64_t v4 = a2 + 16;
    swift_beginAccess();
    uint64_t v5 = MEMORY[0x210550400](v4);
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      swift_bridgeObjectRetain();
      v7._uint64_t countAndFlagsBits = v3;
      v7._uint64_t object = v2;
      TextBoxView.setFont(_:)(v7);
      swift_bridgeObjectRelease();
    }
  }
}

void closure #3 in TextBoxView.textFormat(_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  if ((a1[1] & 1) == 0)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a2 + 16;
    swift_beginAccess();
    uint64_t v9 = MEMORY[0x210550400](v8);
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      a6(v7);
    }
  }
}

void closure #7 in TextBoxView.textFormat(_:)(uint64_t *a1, uint64_t a2)
{
  if ((a1[1] & 1) == 0)
  {
    uint64_t v2 = *a1;
    uint64_t v3 = a2 + 16;
    swift_beginAccess();
    uint64_t v4 = MEMORY[0x210550400](v3);
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v2);
      TextBoxView.setColor(_:)((UIColor)v6);
    }
  }
}

void closure #2 in TextBoxView.textFormat(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  if ((a1[1] & 1) == 0)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a2 + 16;
    swift_beginAccess();
    uint64_t v9 = MEMORY[0x210550400](v8);
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      a6(v7);
    }
  }
}

void @objc TextBoxView.textFormat(_:)(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  v9.Swift::Bool is_nil = (char)v6;
  id v7 = v6;
  v9.value.super.super.isCGFloat a = (Class)a3;
  TextBoxView.textFormat(_:)(v9);
}

Swift::Void __swiftcall TextBoxView.textStyleSelectorDidTapFontButton()()
{
  uint64_t v1 = *MEMORY[0x263F8EED0] & *v0;
  uint64_t v2 = MEMORY[0x210550400]((char *)v0 + direct field offset for TextBoxView.styleController);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(v1 + 440);
    *(void *)(v5 + 32) = *(void *)(v1 + 456);
    *(void *)(v5 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v4;
    v7[4] = partial apply for closure #1 in TextBoxView.textStyleSelectorDidTapFontButton();
    v7[5] = v5;
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 1107296256;
    _OWORD v7[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v7[3] = &block_descriptor_78_0;
    id v6 = _Block_copy(v7);
    swift_release();
    objc_msgSend(v3, sel_dismissViewControllerAnimated_completion_, 1, v6);
    _Block_release(v6);
  }
}

void closure #1 in TextBoxView.textStyleSelectorDidTapFontButton()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
    if (v4) {
      objc_msgSend(v4, sel_resignFirstResponder);
    }
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82778]), sel_init);
    objc_msgSend(v5, sel_setDelegate_, v3);
    id v6 = TextBoxView.canvas.getter();
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x620))();

      if (v8)
      {
        objc_msgSend(v8, sel_presentViewController_animated_completion_, v5, 1, 0);
      }
    }
  }
}

Swift::Void __swiftcall TextBoxView.fontPickerViewControllerDidPickFont(_:)(UIFontPickerViewController *a1)
{
  uint64_t v2 = v1;
  [(UIFontPickerViewController *)a1 dismissViewControllerAnimated:1 completion:0];
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  if (v4) {
    objc_msgSend(v4, sel_becomeFirstResponder);
  }
  id v5 = [(UIFontPickerViewController *)a1 selectedFontDescriptor];
  if (!v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v6 = v5;
  id v7 = [(UIFontDescriptor *)v5 fontAttributes];

  type metadata accessor for UIFontDescriptorAttributeName(0);
  _s9Coherence9CRKeyPathVACSQAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v8 + 16))
  {
LABEL_9:
    long long v13 = 0u;
    long long v14 = 0u;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  id v9 = (id)*MEMORY[0x263F81738];
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v11 & 1) == 0)
  {
    long long v13 = 0u;
    long long v14 = 0u;

    goto LABEL_11;
  }
  outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v10, (uint64_t)&v13);

  swift_bridgeObjectRelease();
  if (*((void *)&v14 + 1))
  {
    outlined init with take of Any(&v13, &v15);
    swift_dynamicCast();
    TextBoxView.setFont(_:)(v12);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_12:
  __break(1u);
}

void @objc TextBoxView.fontPickerViewControllerDidPickFont(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  id v5 = a1;
  TextBoxView.fontPickerViewControllerDidPickFont(_:)(v4);
}

Swift::Void __swiftcall TextBoxView.fontPickerViewControllerDidCancel(_:)(UIFontPickerViewController *a1)
{
  [(UIFontPickerViewController *)a1 dismissViewControllerAnimated:1 completion:0];
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  if (v2)
  {
    objc_msgSend(v2, sel_becomeFirstResponder);
  }
}

void @objc TextBoxView.fontPickerViewControllerDidCancel(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  id v5 = a1;
  TextBoxView.fontPickerViewControllerDidCancel(_:)(v4);
}

Swift::Void __swiftcall TextBoxView.setColor(_:)(UIColor a1)
{
}

void closure #1 in TextBoxView.setColor(_:)(void *a1@<X1>, void *a2@<X8>)
{
  id v3 = a1;
  Color.init(cgColor:)((CGColor *)objc_msgSend(v3, sel_CGColor), &v4);

  if (v4) {
    *a2 = v4;
  }
  else {
    __break(1u);
  }
}

Swift::Void __swiftcall TextBoxView.setFontSize(_:)(Swift::Int a1)
{
}

Swift::Void __swiftcall TextBoxView.setFont(_:)(Swift::String a1)
{
  uint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  id v3 = TextBoxView.modificationRange.getter();
  uint64_t v5 = v4;
  void v8[2] = countAndFlagsBits;
  v8[3] = object;
  uint64_t KeyPath = (unsigned int (**)(char *, uint64_t, uint64_t))swift_getKeyPath();
  unint64_t v7 = lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  TextBoxView.updateAttributes<A>(in:newValue:keypath:)((uint64_t)v3, v5, (void (*)(char *))partial apply for closure #1 in TextBoxView.setFont(_:), (uint64_t)v8, KeyPath, v7);
  swift_release();
}

uint64_t TextBoxView.setTextAlignment(_:)(uint64_t a1)
{
  return TextBoxView.setColor(_:)(a1, (uint64_t)&unk_20C84AD08, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute, (void (*)(char *))partial apply for closure #1 in TextBoxView.setTextAlignment(_:));
}

uint64_t TextBoxView.setColor(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(char *))
{
  id v7 = TextBoxView.modificationRange.getter();
  uint64_t v9 = v8;
  _OWORD v13[2] = a1;
  uint64_t KeyPath = (unsigned int (**)(char *, uint64_t, uint64_t))swift_getKeyPath();
  uint64_t v11 = a3();
  TextBoxView.updateAttributes<A>(in:newValue:keypath:)((uint64_t)v7, v9, a4, (uint64_t)v13, KeyPath, v11);
  return swift_release();
}

Swift::Void __swiftcall TextBoxView.setBold(_:)(Swift::Bool a1)
{
}

Swift::Void __swiftcall TextBoxView.setItalic(_:)(Swift::Bool a1)
{
}

Swift::Float closure #1 in TextBoxView.setBold(_:)@<S0>(char a1@<W1>, void (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  if (v10 == (void *)1)
  {
    if (one-time initialization token for textBoxDefaultFont != -1) {
      swift_once();
    }
    Font.init(_:)(&v14, (UIFont)(id)static UIConstants.textBoxDefaultFont);
  }
  else
  {
    v14._name.value._uint64_t countAndFlagsBits = v9;
    v14._name.value._uint64_t object = v10;
    v14._Swift::String_optional familyName = v11;
    v14.pointSize = v12;
    v14.traits.Swift::Int rawValue = v13;
  }
  a2(a1 & 1);
  Swift::Float result = v14.pointSize;
  Swift::Int rawValue = v14.traits.rawValue;
  Swift::String_optional familyName = v14._familyName;
  *(Swift::String_optional *)a3 = v14._name;
  *(Swift::String_optional *)(a3 + 16) = familyName;
  *(Swift::Float *)(a3 + 32) = result;
  *(void *)(a3 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = rawValue;
  return result;
}

Swift::Void __swiftcall TextBoxView.setUnderline(_:)(Swift::Bool a1)
{
}

Swift::Void __swiftcall TextBoxView.setStrikethrough(_:)(Swift::Bool a1)
{
}

uint64_t TextBoxView.setBold(_:)(char a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(char *))
{
  id v7 = TextBoxView.modificationRange.getter();
  uint64_t v9 = v8;
  unsigned char v13[16] = a1;
  uint64_t KeyPath = (unsigned int (**)(char *, uint64_t, uint64_t))swift_getKeyPath();
  uint64_t v11 = a3();
  TextBoxView.updateAttributes<A>(in:newValue:keypath:)((uint64_t)v7, v9, a4, (uint64_t)v13, KeyPath, v11);
  return swift_release();
}

Swift::Void __swiftcall TextBoxView.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  isCGFloat a = a1.value.super.isa;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for TextBoxView();
  objc_msgSendSuper2(&v3, sel_traitCollectionDidChange_, isa);
  TextBoxView.updateTextStorageDarkMode()();
  objc_msgSend(v1, sel_setNeedsLayout);
  objc_msgSend(v1, sel_setNeedsDisplay);
}

void @objc TextBoxView.traitCollectionDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  v9.Swift::Bool is_nil = (char)v6;
  id v7 = v6;
  v9.value.super.isCGFloat a = (Class)a3;
  TextBoxView.traitCollectionDidChange(_:)(v9);
}

void TextBoxView.updateAttributes<A>(in:newValue:keypath:)(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, unsigned int (**a5)(char *, uint64_t, uint64_t), uint64_t a6)
{
  id v7 = v6;
  uint64_t v40 = a4;
  uint64_t v41 = a3;
  uint64_t v12 = *(void *)((char *)*a5 + *MEMORY[0x263F8DE50] + 8);
  uint64_t v38 = *(void *)(a6 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v39 = *(void *)(v17 - 8);
  double v18 = MEMORY[0x270FA5388](v17);
  double v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 > 0 || ((*(uint64_t (**)(uint64_t, uint64_t, double))(a6 + 24))(v12, a6, v18) & 1) != 0)
  {
    id v21 = *(id *)&v7[direct field offset for TextBoxView.textStorage];
    CRTextStorage.updateAttribute<A>(in:newValue:keypath:)(a1, a2, v41, v40, a5, (void *)a6);

    TextBoxView.updateCanvasElement(shouldRegisterUndo:)(1);
  }
  if (!a2 || (TextBoxView.string.getter(), uint64_t v22 = String.count.getter(), swift_bridgeObjectRelease(), v22 == a2))
  {
    uint64_t v23 = *(void **)&v7[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
    if (v23)
    {
      id v24 = v23;
      id v37 = v24;
      id v25 = objc_msgSend(v7, sel_traitCollection);
      id v26 = objc_msgSend(v25, sel_userInterfaceStyle);

      BOOL v27 = v26 == (id)2;
      uint64_t v28 = AssociatedTypeWitness;
      char v29 = v27;
      id v30 = objc_msgSend(v24, sel_typingAttributes);
      type metadata accessor for NSAttributedStringKey(0);
      uint64_t v36 = v31;
      _s9Coherence9CRKeyPathVACSQAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
      uint64_t v32 = v17;
      uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(v33, v29);
      swift_retain();
      v41(v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v16, 0, 1, v28);
      CRAttributedString.Attributes.subscript.setter();
      id v34 = v37;
      CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v29);
      isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v34, sel_setTypingAttributes_, isa);

      (*(void (**)(char *, uint64_t))(v39 + 8))(v20, v32);
    }
  }
}

void @objc TextBoxView.presentationControllerDidDismiss(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  specialized TextBoxView.presentationControllerDidDismiss(_:)();
}

uint64_t @objc TextBoxView.textView(_:shouldChangeTextIn:replacementText:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  id v8 = a3;
  id v9 = a1;
  LOBYTE(v5) = specialized TextBoxView.textView(_:shouldChangeTextIn:replacementText:)(v5, v7);

  swift_bridgeObjectRelease();
  return v5 & 1;
}

void @objc TextBoxView.textViewDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  specialized TextBoxView.textViewDidChange(_:)();
}

void @objc TextBoxView.textViewDidChangeSelection(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  specialized TextBoxView.textViewDidChangeSelection(_:)();
}

Swift::Void __swiftcall TextBoxView.updateFrameAfterScribbling()()
{
  uint64_t v1 = MEMORY[0x210550400](v0 + direct field offset for TextBoxView.canvasElementView);
  if (v1)
  {
    uint64_t v19 = v1;
    double v2 = CanvasElementView.modelFrame.getter();
    CGFloat v4 = v3;
    CGFloat v6 = v5;
    double v8 = v7;
    double v9 = TextBoxView.canvasElementViewFrameInModelSpace.getter();
    double v11 = v10;
    double v13 = v12;
    double v15 = v14;
    if (!CGRect.almostEqual(_:threshold:)(v9, v10, v12, v14, 0.1, v2, v4, v6, v8))
    {
      uint64_t v16 = v0 + direct field offset for TextBoxView.delegate;
      if (MEMORY[0x210550400](v0 + direct field offset for TextBoxView.delegate, v19))
      {
        uint64_t v17 = *(void *)(v16 + 8);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, double, double, double, double))(v17 + 24))(v0, ObjectType, v17, v9, v11, v13, v15);
        swift_unknownObjectRelease();
      }
      TextBoxView.updateCanvasElement(shouldRegisterUndo:)(0);
    }
    MEMORY[0x270F9A758]();
  }
}

Swift::Void __swiftcall TextBoxView.textViewDidEndEditing(_:)(UITextView *a1)
{
  uint64_t v2 = v1;
  CGFloat v4 = (void *)MEMORY[0x210550400](v1 + direct field offset for TextBoxView.canvasElementView);
  if (v4)
  {
    double v5 = v4;
    CGFloat v6 = (void *)MEMORY[0x263F8EED0];
    if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x120))()) {
      goto LABEL_15;
    }
    double v7 = [(UITextView *)a1 text];
    if (!v7) {
      goto LABEL_15;
    }
    double v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    if (v9) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = v11 == 0xE000000000000000;
    }
    if (v12)
    {
      uint64_t v14 = swift_bridgeObjectRelease();
    }
    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v14 = swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {
LABEL_15:

        goto LABEL_16;
      }
    }
    if ((*(uint64_t (**)(uint64_t))((*v6 & *v5) + 0x118))(v14))
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v49._uint64_t object = (void *)0x800000020C85DDC0;
      v15._uint64_t countAndFlagsBits = 1954047316;
      v15._uint64_t object = (void *)0xE400000000000000;
      v16.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      v16.value._uint64_t object = (void *)0xEB00000000656C62;
      v17._uint64_t countAndFlagsBits = 0;
      v17._uint64_t object = (void *)0xE000000000000000;
      v49._uint64_t countAndFlagsBits = 0xD000000000000024;
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, paperKitBundle, v17, v49)._countAndFlagsBits;
      uint64_t v19 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
      swift_bridgeObjectRelease();
      [(UITextView *)a1 setText:v19];

      TextBoxView.updateCanvasElement(shouldRegisterUndo:)(1);
    }
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v20 = MEMORY[0x210550400](v2 + direct field offset for TextBoxView.canvasElementView);
  if (v20)
  {
    id v21 = (void *)v20;
    TextBoxView.canvasElementViewFrameInModelSpace.getter();
    CanvasElementView.modelFrame.setter();
  }
  TextBoxView.updateCanvasElement(shouldRegisterUndo:)(0);
  if (TextBoxView.isFormField.getter())
  {
    type metadata accessor for TextBoxTextView();
    uint64_t v22 = swift_dynamicCastClass();
    if (!v22) {
      return;
    }
    uint64_t v23 = (void *)v22;
    id v24 = a1;
    id v25 = objc_msgSend(v23, sel_text);
    if (!v25) {
      goto LABEL_45;
    }
    id v26 = v25;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;

    swift_bridgeObjectRelease();
    uint64_t v30 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0) {
      uint64_t v30 = v27 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v31 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics;
    if (!v30)
    {
      uint64_t v32 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
      *(unsigned char *)(v32 + 18) = 17;
      *(unsigned char *)(v32 + 64) = 0;
    }
    uint64_t v33 = *(char **)(v2 + v31);
    if (v33[19] == 1)
    {
      if (FormAnalyticsKeys.rawValue.getter(v33[18]) == 0x6C6C69666F747561 && v34 == 0xE800000000000000) {
        char v36 = 0;
      }
      else {
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
      }
      swift_retain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      char v36 = 0;
    }
    v33[49] = v36 & 1;
    swift_release();
    uint64_t v37 = *(void *)(v2 + v31);
    swift_retain();
    id v38 = objc_msgSend(v23, sel_text);
    if (!v38) {
      goto LABEL_46;
    }
    uint64_t v39 = v38;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v40 = String.count.getter();
    swift_bridgeObjectRelease();
    *(void *)(v37 + 56) = v40;
    swift_release();
    swift_retain();
    FormTextFieldAnalytics.recordEvent()();

    swift_release();
  }
  uint64_t v41 = [(UITextView *)a1 text];
  if (!v41)
  {
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    return;
  }
  uint64_t v42 = v41;
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v45 = v44;

  swift_bridgeObjectRelease();
  uint64_t v46 = HIBYTE(v45) & 0xF;
  if ((v45 & 0x2000000000000000) == 0) {
    uint64_t v46 = v43 & 0xFFFFFFFFFFFFLL;
  }
  if (!v46)
  {
    [(UITextView *)a1 removeFromSuperview];
    uint64_t v47 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
    *(void *)(v2 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView) = 0;
  }
}

void @objc TextBoxView.textViewDidEndEditing(_:)(void *a1, uint64_t a2, void *a3)
{
  CGFloat v4 = a3;
  id v5 = a1;
  TextBoxView.textViewDidEndEditing(_:)(v4);
}

void @objc TextBoxView.keyboardWillHideNotification(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  TextBoxView.keyboardWillHideNotification(_:)(v4);
}

void TextBoxView.adjustScrollViewForKeyboardNotification(_:)(void *a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  if (!v2) {
    return;
  }
  id v22 = v2;
  id v4 = objc_msgSend(a1, sel_userInfo);
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    AnyHashable.init<A>(_:)();
    if (*(void *)(v6 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29), (v8 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v7, (uint64_t)&v30);
    }
    else
    {
      long long v30 = 0u;
      long long v31 = 0u;
    }
    outlined destroy of AnyHashable((uint64_t)v29);
    if (*((void *)&v31 + 1))
    {
      type metadata accessor for CGRect(0);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_29;
      }
      *(double *)&uint64_t v23 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)());
      CGFloat v26 = v9;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v6 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29), (v11 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v10, (uint64_t)&v30);
      }
      else
      {
        long long v30 = 0u;
        long long v31 = 0u;
      }
      outlined destroy of AnyHashable((uint64_t)v29);
      if (*((void *)&v31 + 1))
      {
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_29;
        }
        CGFloat v12 = *(double *)&v23;
        *(double *)&uint64_t v24 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)());
        AnyHashable.init<A>(_:)();
        if (*(void *)(v6 + 16)
          && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29), (v14 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v13, (uint64_t)&v30);
        }
        else
        {
          long long v30 = 0u;
          long long v31 = 0u;
        }
        outlined destroy of AnyHashable((uint64_t)v29);
        if (*((void *)&v31 + 1))
        {
          if (swift_dynamicCast())
          {
            double v15 = *(double *)&v24;
            id v25 = (void (*)(char *, uint64_t))static String._unconditionallyBridgeFromObjectiveC(_:)();
            AnyHashable.init<A>(_:)();
            if (*(void *)(v6 + 16)
              && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29), (v17 & 1) != 0))
            {
              outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v16, (uint64_t)&v30);
            }
            else
            {
              long long v30 = 0u;
              long long v31 = 0u;
            }
            swift_bridgeObjectRelease();
            outlined destroy of AnyHashable((uint64_t)v29);
            if (*((void *)&v31 + 1))
            {
              if (swift_dynamicCast())
              {
                objc_msgSend(v22, sel_bounds);
                objc_msgSend(v22, sel_convertRect_toView_, 0);
                specialized TextBoxView.adjustScrollViewToAccomodateKeyboard(startingFrame:endingFrame:textBoxFrameInWindow:animationDuration:animationCurve:)(v25, v12, v26, v27, v28, v18, v19, v20, v21, v15);
              }

              return;
            }

LABEL_28:
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v30, &demangling cache variable for type metadata for Any?);
            return;
          }
LABEL_29:

          swift_bridgeObjectRelease();
          return;
        }
      }
    }

    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
}

void TextBoxView.registerForFirstResponderNotifications()()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_firstResponderDidChange_, *MEMORY[0x263F83E28], 0);
}

void TextBoxView.unregisterForFirstResponderNotifications()()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_name_object_, v0, *MEMORY[0x263F83E28], 0);
}

void @objc TextBoxView.firstResponderDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  specialized TextBoxView.firstResponderDidChange(_:)();
}

void TextBoxView.handleTab(direction:)(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = (void *)MEMORY[0x263F8EED0];
  id v5 = TextBoxView.canvas.getter();
  if (v5)
  {
    uint64_t v6 = v5;
    unint64_t v7 = (void *)(*(uint64_t (**)(void))((*v4 & *v5) + 0x2F8))();
    uint64_t v9 = v8;

    uint64_t ObjectType = swift_getObjectType();
    char v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 144))(ObjectType, v9);

    if (v11)
    {
      uint64_t v12 = MEMORY[0x210550400](v2 + direct field offset for TextBoxView.canvasElementView);
      if (v12)
      {
        unint64_t v13 = (void *)v12;
        type metadata accessor for CanvasElementView();
        swift_getWitnessTable();
        _convertToAnyHashable<A>(_:)();
      }
      else
      {
        memset(v14, 0, sizeof(v14));
        uint64_t v15 = 0;
      }
      FormFillingView.focusNextField(from:direction:)((uint64_t)v14, a1);

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for AnyHashable?);
    }
  }
}

uint64_t thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 32);
  id v3 = a2;
  char v4 = v2();

  return v4 & 1;
}

void @objc TextBoxView.draw(_:)(void *a1)
{
  id v1 = a1;
  specialized TextBoxView.draw(_:)();
}

void @objc TextBoxView.init(frame:)()
{
}

uint64_t TextBoxView.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  outlined destroy of weak AnyContainerCanvasElementView?(v0 + direct field offset for TextBoxView.delegate);

  swift_release();
  swift_unknownObjectWeakDestroy();
  return swift_bridgeObjectRelease();
}

id TextBoxView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TextBoxView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc TextBoxView.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  outlined destroy of weak AnyContainerCanvasElementView?(a1 + direct field offset for TextBoxView.delegate);

  swift_release();
  swift_unknownObjectWeakDestroy();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for TextBoxView()
{
  return __swift_instantiateGenericMetadata();
}

void partial apply for closure #1 in TextBoxView.setUnderline(_:)(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

Swift::Float partial apply for closure #1 in TextBoxView.setItalic(_:)@<S0>(uint64_t a1@<X8>)
{
  return closure #1 in TextBoxView.setBold(_:)(*(unsigned char *)(v1 + 16), (void (*)(void))Font.isItalic.setter, a1);
}

Swift::Float partial apply for closure #1 in TextBoxView.setBold(_:)@<S0>(uint64_t a1@<X8>)
{
  return closure #1 in TextBoxView.setBold(_:)(*(unsigned char *)(v1 + 16), (void (*)(void))Font.isBold.setter, a1);
}

void partial apply for closure #1 in TextBoxView.setTextAlignment(_:)(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

Swift::Float partial apply for closure #1 in TextBoxView.setFont(_:)@<S0>(uint64_t a1@<X8>)
{
  return CRAttributedString.Attributes<>.fontWithFamily(_:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void partial apply for closure #1 in TextBoxView.setFontSize(_:)(uint64_t a1@<X8>)
{
  CRAttributedString.Attributes<>.fontWithSize(_:)(a1, (float)*(uint64_t *)(v1 + 16));
}

void partial apply for closure #1 in TextBoxView.setColor(_:)(void *a1@<X8>)
{
  closure #1 in TextBoxView.setColor(_:)(*(void **)(v1 + 16), a1);
}

void sub_20C7DE49C(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  *a3 = (*(double (**)(void))(*(void *)(*(void *)(a2 + a1 - 8) + 8) + 32))(*(void *)(a2 + a1 - 24));
}

uint64_t sub_20C7DE4EC(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, double))(*(void *)(*(void *)(a4 + a3 - 8) + 8) + 40))(*(void *)(a4 + a3 - 24), *(void *)(*(void *)(a4 + a3 - 8) + 8), *a1);
}

uint64_t sub_20C7DE53C()
{
  return 24;
}

__n128 sub_20C7DE548(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in TextBoxView.setFixedWidth()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TextBoxView.setFixedWidth()(a1);
}

void *sub_20C7DE578@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  __n128 result = (*(void *(**)(uint64_t *__return_ptr, void))(*(void *)(a2 + a1 - 8) + 40))(&v5, *(void *)(a2 + a1 - 24));
  *a3 = v5;
  return result;
}

uint64_t sub_20C7DE5D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 24);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = *a1;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 48))(&v7, v4);
}

uint64_t sub_20C7DE62C()
{
  return 24;
}

__n128 sub_20C7DE638(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void *sub_20C7DE64C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  __n128 result = (*(void *(**)(uint64_t *__return_ptr, void))(*(void *)(a2 + a1 - 8) + 88))(&v5, *(void *)(a2 + a1 - 24));
  *a3 = v5;
  return result;
}

uint64_t sub_20C7DE6A8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 24);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  char v7 = *a1;
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 96))(&v7, v4);
}

uint64_t sub_20C7DE700()
{
  return 24;
}

__n128 sub_20C7DE70C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C7DE720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 112))(*(void *)(a3 + a2 - 24));
}

uint64_t sub_20C7DE768()
{
  return 24;
}

__n128 sub_20C7DE774(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C7DE788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 16))(*(void *)(a3 + a2 - 24));
}

uint64_t sub_20C7DE7D0()
{
  return 24;
}

__n128 sub_20C7DE7DC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in TextBoxView.updateCanvasElement(shouldRegisterUndo:)(uint64_t *a1)
{
  return closure #1 in TextBoxView.updateCanvasElement(shouldRegisterUndo:)(a1, *(void **)(v1 + 16));
}

void specialized TextBoxView.init(coder:)()
{
  swift_unknownObjectWeakInit();
  *(void *)&v0[direct field offset for TextBoxView.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[direct field offset for TextBoxView.currentUndoAction] = 0;
  *(void *)&v0[direct field offset for TextBoxView.scribbleDebugView] = 0;
  v0[direct field offset for TextBoxView.shouldAddTextboxView] = 0;
  v0[direct field offset for TextBoxView.hideText] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[direct field offset for TextBoxView.cancellables] = MEMORY[0x263F8EE88];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized TextBoxView.textViewDidBeginEditing(_:)()
{
  *(unsigned char *)(*(void *)(v0 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics) + 18) = 16;
}

uint64_t specialized TextBoxView.presentationControllerDidDismiss(_:)()
{
  uint64_t v1 = (void *)(v0 + direct field offset for TextBoxView.cancellables);
  swift_beginAccess();
  void *v1 = MEMORY[0x263F8EE88];
  swift_bridgeObjectRelease();
  return swift_unknownObjectWeakAssign();
}

uint64_t specialized TextBoxView.textView(_:shouldChangeTextIn:replacementText:)(uint64_t a1, uint64_t a2)
{
  if ((a1 != 9 || a2 != 0xE100000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 1;
  }
  TextBoxView.handleTab(direction:)(0);
  return 0;
}

void specialized TextBoxView.textViewDidChange(_:)()
{
  TextBoxView.beginUndoGroupIfNecessary()();
  TextBoxView.updateCanvasElement(shouldRegisterUndo:)(0);
  uint64_t v1 = MEMORY[0x210550400](v0 + direct field offset for TextBoxView.canvasElementView);
  if (v1)
  {
    objc_super v2 = (void *)v1;
    uint64_t v3 = TextBoxView.string.getter();
    id v4 = (id)MEMORY[0x21054D080](v3);
    swift_bridgeObjectRelease();
    objc_msgSend(v2, sel_setAccessibilityValue_, v4);
  }
}

void specialized TextBoxView.textViewDidChangeSelection(_:)()
{
  uint64_t v1 = v0;
  objc_super v2 = (void *)MEMORY[0x263F8EED0];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
  MEMORY[0x270FA5388](v3 - 8);
  *(void *)&long long v33 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v34 = (uint64_t)&v27 - v6;
  uint64_t v7 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = type metadata accessor for Capsule();
  uint64_t v31 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<TextBox>);
  uint64_t v32 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = TextBoxView.canvas.getter();
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v30 = v11;
    uint64_t v16 = MEMORY[0x210550400](&v0[direct field offset for TextBoxView.canvasElementView]);
    if (v16)
    {
      char v17 = (void *)v16;
      (*(void (**)(void))((*v2 & *v15) + 0x680))();
      double v18 = (char *)v15 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
      swift_beginAccess();
      if (MEMORY[0x210550400](v18))
      {
        uint64_t v28 = *((void *)v18 + 1);
        uint64_t ObjectType = swift_getObjectType();
        CanvasElementView.canvasElement.getter((uint64_t)v10);
        Capsule<>.rootID.getter();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v8);
        type metadata accessor for TextBox();
        _s9Coherence9CRKeyPathVACSQAAWlTm_2(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
        WeakRef.init(id:)();
        (*(void (**)(void *, char *, uint64_t))(v28 + 24))(v15, v13, ObjectType);

        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v30);
      }
      else
      {
      }
    }
    else
    {
    }
  }
  uint64_t v19 = MEMORY[0x210550400](&v1[direct field offset for TextBoxView.styleController]);
  if (v19)
  {
    CGFloat v20 = (void *)v19;
    uint64_t v21 = v33;
    dispatch thunk of UIHostingController.rootView.getter();

    uint64_t v22 = v34;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v21, v34, (uint64_t *)&demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    initeCGFloat d = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C835790;
    *(void *)(inited + 32) = v1;
    unint64_t v35 = inited;
    specialized Array._endMutation()();
    unint64_t v24 = v35;
    id v25 = v1;
    Array<A>.displayAttributes.getter(v24, (uint64_t *)&v35);
    swift_bridgeObjectRelease();
    CGFloat v26 = v37;
    long long v33 = v36;
    swift_retain();
    TextStyleSelectorModel.inspect(_:)((uint64_t *)&v35);
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?(v22, (uint64_t *)&demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);

    swift_bridgeObjectRelease();
  }
}

void specialized TextBoxView.adjustScrollViewToAccomodateKeyboard(startingFrame:endingFrame:textBoxFrameInWindow:animationDuration:animationCurve:)(void (*a1)(char *, uint64_t), CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, CGFloat a7, CGFloat a8, CGFloat a9, double a10)
{
  id v106 = a1;
  double v105 = a6;
  uint64_t v24 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  uint64_t v104 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for DispatchTime();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v89 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = (char *)&v89 - v36;
  id v38 = TextBoxView.canvas.getter();
  if (!v38) {
    return;
  }
  uint64_t v39 = v38;
  id v107 = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v38) + 0x310))();

  if (!v107) {
    return;
  }
  if (!objc_msgSend(v107, sel_isScrollEnabled)) {
    goto LABEL_22;
  }
  id v40 = objc_msgSend(v107, sel_superview);
  if (!v40) {
    goto LABEL_22;
  }
  uint64_t v41 = v40;
  CGFloat v95 = a7;
  CGFloat v96 = a8;
  CGFloat v97 = a9;
  double v98 = a10;
  uint64_t v94 = v25;
  objc_msgSend(v107, sel_frame);
  objc_msgSend(v41, sel_convertRect_toView_, 0);
  CGFloat v43 = v42;
  CGFloat v45 = v44;
  CGFloat v47 = v46;
  CGFloat v49 = v48;

  v115.origin.double x = v43;
  v115.origin.double y = v45;
  v115.size.double width = v47;
  v115.size.double height = v49;
  double v103 = -(a3 - CGRectGetMaxY(v115));
  double v50 = *MEMORY[0x263F001A0];
  double v101 = *(double *)(MEMORY[0x263F001A0] + 8);
  double v102 = v50;
  double v100 = *(double *)(MEMORY[0x263F001A0] + 16);
  double v99 = *(double *)(MEMORY[0x263F001A0] + 24);
  objc_msgSend(v107, sel_bounds);
  objc_msgSend(v107, sel_convertRect_toView_, 0);
  double x = v116.origin.x;
  double y = v116.origin.y;
  double width = v116.size.width;
  double height = v116.size.height;
  v121.origin.double x = a2;
  v121.origin.double y = a3;
  v121.size.double width = a4;
  v121.size.double height = a5;
  if (CGRectIntersectsRect(v116, v121))
  {
    v117.origin.double x = x;
    v117.origin.double y = y;
    v117.size.double width = width;
    v117.size.double height = height;
    v122.origin.double x = a2;
    v122.origin.double y = a3;
    v122.size.double width = a4;
    v122.size.double height = a5;
    CGRect v118 = CGRectIntersection(v117, v122);
    CGRectGetHeight(v118);
    double v90 = UIEdgeInsetsInsetRect(x, y, width, height, 0.0, 0.0);
    CGFloat v91 = v55;
    CGFloat v93 = v56;
    CGFloat v92 = v57;
    CGFloat v58 = v105;
    CGFloat v59 = v95;
    CGFloat v60 = v96;
    CGFloat v61 = v97;
    objc_msgSend(v107, sel_convertRect_fromView_, 0, v105, v95, v96, v97);
    CGFloat v63 = v62;
    CGFloat v65 = v64;
    CGFloat v67 = v66;
    CGFloat v69 = v68;
    v119.origin.double x = v90;
    v119.origin.double y = v91;
    v119.size.double width = v93;
    v119.size.double height = v92;
    v123.origin.double x = v58;
    v123.origin.double y = v59;
    v123.size.double width = v60;
    v123.size.double height = v61;
    if (CGRectContainsRect(v119, v123))
    {
      CGFloat v63 = v102;
      CGFloat v65 = v101;
      CGFloat v67 = v100;
      CGFloat v69 = v99;
    }
    id v70 = v107;
  }
  else
  {
    id v70 = v107;
    CGFloat v65 = v101;
    CGFloat v63 = v102;
    CGFloat v67 = v100;
    CGFloat v69 = v99;
  }
  objc_msgSend(v70, sel_contentInset);
  double v72 = v71;
  objc_msgSend(v107, sel__contentScrollInset);
  double v74 = v73;
  double v76 = v75;
  double v78 = v77;
  if (v72 >= v103) {
    double v79 = 0.0;
  }
  else {
    double v79 = v103 - v72;
  }
  v120.origin.double x = v63;
  v120.origin.double y = v65;
  v120.size.double width = v67;
  v120.size.double height = v69;
  if (CGRectIsNull(v120))
  {
    if (v79 > 0.0)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      double v105 = COERCE_DOUBLE(static OS_dispatch_queue.main.getter());
      static DispatchTime.now()();
      MEMORY[0x21054AB00](v34, v98);
      id v106 = *(void (**)(char *, uint64_t))(v32 + 8);
      v106(v34, v31);
      uint64_t v80 = swift_allocObject();
      *(void *)(v80 + 16) = v107;
      *(double *)(v80 + 24) = v74;
      *(double *)(v80 + 32) = v76;
      *(double *)(v80 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v79;
      *(double *)(v80 + 48) = v78;
      CGRect v112 = partial apply for specialized closure #2 in TextBoxView.adjustScrollViewToAccomodateKeyboard(startingFrame:endingFrame:textBoxFrameInWindow:animationDuration:animationCurve:);
      uint64_t v113 = v80;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v109 = 1107296256;
      uint64_t v110 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      CGRect v111 = &block_descriptor_69_0;
      double v103 = COERCE_DOUBLE(_Block_copy(&aBlock));
      id v107 = v107;
      swift_release();
      static DispatchQoS.unspecified.getter();
      uint64_t aBlock = MEMORY[0x263F8EE78];
      _s9Coherence9CRKeyPathVACSQAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      double v81 = v103;
      double v82 = v105;
      MEMORY[0x21054D9C0](v37, v30, v27, *(void *)&v103);
      _Block_release(*(const void **)&v81);

      (*(void (**)(char *, uint64_t))(v94 + 8))(v27, v24);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v30, v28);
      v106(v37, v31);
      return;
    }
    objc_msgSend(v107, sel__setContentScrollInset_, v74, v76, v79, v78);
LABEL_22:
    id v88 = v107;

    return;
  }
  if ((unint64_t)v106 - 1 >= 3) {
    uint64_t v83 = 4;
  }
  else {
    uint64_t v83 = (((void)v106 - 1) << 16) + 65540;
  }
  uint64_t v84 = self;
  uint64_t v85 = swift_allocObject();
  *(void *)(v85 + 16) = v107;
  *(double *)(v85 + 24) = v74;
  *(double *)(v85 + 32) = v76;
  *(double *)(v85 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v79;
  *(double *)(v85 + 48) = v78;
  *(CGFloat *)(v85 + 56) = v63;
  *(CGFloat *)(v85 + 64) = v65;
  *(CGFloat *)(v85 + 72) = v67;
  *(CGFloat *)(v85 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v69;
  CGRect v112 = partial apply for specialized closure #1 in TextBoxView.adjustScrollViewToAccomodateKeyboard(startingFrame:endingFrame:textBoxFrameInWindow:animationDuration:animationCurve:);
  uint64_t v113 = v85;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v109 = 1107296256;
  uint64_t v110 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  CGRect v111 = &block_descriptor_77;
  uint64_t v86 = _Block_copy(&aBlock);
  id v87 = v107;
  swift_release();
  objc_msgSend(v84, sel_animateWithDuration_delay_options_animations_completion_, v83, v86, 0, v98, 0.0);

  _Block_release(v86);
}

uint64_t sub_20C7DF824()
{
  return MEMORY[0x270FA0238](v0, 88, 7);
}

id partial apply for specialized closure #1 in TextBoxView.adjustScrollViewToAccomodateKeyboard(startingFrame:endingFrame:textBoxFrameInWindow:animationDuration:animationCurve:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  double v2 = *(double *)(v0 + 56);
  double v3 = *(double *)(v0 + 64);
  double v4 = *(double *)(v0 + 72);
  double v5 = *(double *)(v0 + 80);
  objc_msgSend(v1, sel__setContentScrollInset_, *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
  return objc_msgSend(v1, sel_scrollRectToVisible_animated_, 0, v2, v3, v4, v5);
}

uint64_t block_copy_helper_77(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_77()
{
  return swift_release();
}

uint64_t sub_20C7DF8F4()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

id partial apply for specialized closure #2 in TextBoxView.adjustScrollViewToAccomodateKeyboard(startingFrame:endingFrame:textBoxFrameInWindow:animationDuration:animationCurve:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel__setContentScrollInset_, *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t sub_20C7DF944()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in TextBoxView.textStyleSelectorDidTapFontButton()()
{
  closure #1 in TextBoxView.textStyleSelectorDidTapFontButton()(*(void *)(v0 + 40));
}

void partial apply for closure #1 in TextBoxView.textFormat(_:)(uint64_t a1)
{
  closure #1 in TextBoxView.textFormat(_:)(a1, *(void *)(v1 + 40));
}

void partial apply for closure #2 in TextBoxView.textFormat(_:)(uint64_t *a1)
{
  closure #2 in TextBoxView.textFormat(_:)(a1, v1[5], v1[2], v1[3], v1[4], (void (*)(uint64_t))TextBoxView.setFontSize(_:));
}

void partial apply for closure #3 in TextBoxView.textFormat(_:)(unsigned __int8 *a1)
{
  closure #3 in TextBoxView.textFormat(_:)(a1, v1[5], v1[2], v1[3], v1[4], (void (*)(uint64_t))TextBoxView.setBold(_:));
}

void partial apply for closure #4 in TextBoxView.textFormat(_:)(unsigned __int8 *a1)
{
  closure #3 in TextBoxView.textFormat(_:)(a1, v1[5], v1[2], v1[3], v1[4], (void (*)(uint64_t))TextBoxView.setItalic(_:));
}

void partial apply for closure #5 in TextBoxView.textFormat(_:)(unsigned __int8 *a1)
{
  closure #3 in TextBoxView.textFormat(_:)(a1, v1[5], v1[2], v1[3], v1[4], (void (*)(uint64_t))TextBoxView.setUnderline(_:));
}

uint64_t sub_20C7DFA64()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #6 in TextBoxView.textFormat(_:)(unsigned __int8 *a1)
{
  closure #3 in TextBoxView.textFormat(_:)(a1, v1[5], v1[2], v1[3], v1[4], (void (*)(uint64_t))TextBoxView.setStrikethrough(_:));
}

void partial apply for closure #7 in TextBoxView.textFormat(_:)(uint64_t *a1)
{
  closure #7 in TextBoxView.textFormat(_:)(a1, *(void *)(v1 + 40));
}

void partial apply for closure #8 in TextBoxView.textFormat(_:)(uint64_t *a1)
{
  closure #2 in TextBoxView.textFormat(_:)(a1, v1[5], v1[2], v1[3], v1[4], (void (*)(uint64_t))TextBoxView.setTextAlignment(_:));
}

uint64_t partial apply for closure #1 in TextBoxView.beginUndoGroupIfNecessary()(void *a1)
{
  return closure #1 in TextBoxView.beginUndoGroupIfNecessary()(a1, v1);
}

uint64_t partial apply for closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(uint64_t *a1)
{
  return closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(a1, *(void **)(v1 + 16));
}

void specialized TextBoxView.firstResponderDidChange(_:)()
{
  uint64_t v0 = TextBoxView.canvas.getter();
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    id v3 = v2;

    if (v2)
    {
      objc_msgSend(v3, sel_setNeedsLayout);
    }
    else
    {
      __break(1u);
    }
  }
}

void specialized TextBoxView.draw(_:)()
{
  if ((*(unsigned char *)(v0 + direct field offset for TextBoxView.hideText) & 1) == 0)
  {
    uint64_t v1 = UIGraphicsGetCurrentContext();
    if (v1)
    {
      uint64_t v2 = v1;
      id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                                 + direct field offset for TextBoxView.textLayoutManager), sel_documentRange));
      id v4 = objc_msgSend(v3, sel_location);

      double v5 = *(void **)(v0 + direct field offset for TextBoxView.textLayoutManager);
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v2;
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = partial apply for closure #1 in TextBoxView.draw(_:);
      *(void *)(v7 + 24) = v6;
      void v13[4] = _sSo20NSTextLayoutFragmentCSbIggd_ABSbIeggd_TRTA_0;
      v13[5] = v7;
      v13[0] = MEMORY[0x263EF8330];
      v13[1] = 1107296256;
      _OWORD v13[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
      v13[3] = &block_descriptor_119;
      uint64_t v8 = _Block_copy(v13);
      id v9 = v5;
      swift_unknownObjectRetain();
      unint64_t v10 = v2;
      swift_retain();
      swift_release();
      id v11 = objc_msgSend(v9, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, v4, 4, v8);
      swift_unknownObjectRelease();

      swift_unknownObjectRelease_n();
      _Block_release(v8);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        __break(1u);
      }
    }
  }
}

void specialized TextBoxView.init(frame:)()
{
}

uint64_t sub_20C7DFDEC()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in TextBoxView.draw(_:)(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  objc_msgSend(a1, sel_layoutFragmentFrame);
  objc_msgSend(a1, sel_drawAtPoint_inContext_, v3);
  return 1;
}

uint64_t sub_20C7DFE6C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sSo20NSTextLayoutFragmentCSbIggd_ABSbIeggd_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

void sub_20C7DFEA8(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  *a3 = (*(double (**)(void))(*(void *)(a2 + a1 - 8) + 136))(*(void *)(a2 + a1 - 24));
}

uint64_t sub_20C7DFEF4(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, double))(*(void *)(a4 + a3 - 8) + 144))(*(void *)(a4 + a3 - 24), *(void *)(a4 + a3 - 8), *a1);
}

uint64_t sub_20C7DFF40()
{
  return 24;
}

__n128 sub_20C7DFF4C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t _s9Coherence9CRKeyPathVACSQAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id FormatTooNewSynapseLinkView.imageView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit27FormatTooNewSynapseLinkView____lazy_storage___imageView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit27FormatTooNewSynapseLinkView____lazy_storage___imageView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit27FormatTooNewSynapseLinkView____lazy_storage___imageView);
  }
  else
  {
    id v4 = (void *)MEMORY[0x21054D080](0xD000000000000014, 0x800000020C860820);
    id v5 = objc_msgSend(self, sel_systemImageNamed_, v4);

    id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v5);
    uint64_t v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

id FormatTooNewSynapseLinkView.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit27FormatTooNewSynapseLinkView____lazy_storage___imageView] = 0;
  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for FormatTooNewSynapseLinkView();
  id v1 = objc_msgSendSuper2(&v9, sel_init);
  uint64_t v2 = self;
  id v3 = v1;
  id v4 = objc_msgSend(v2, sel_systemFillColor);
  objc_msgSend(v3, sel_setBackgroundColor_, v4);

  id v5 = v3;
  id v6 = FormatTooNewSynapseLinkView.imageView.getter();
  objc_msgSend(v5, sel_addSubview_, v6);

  id v7 = objc_msgSend(v5, sel_layer);
  if (one-time initialization token for resizeCornerRadius != -1) {
    swift_once();
  }
  objc_msgSend(v7, sel_setCornerRadius_, *(double *)&static UIConstants.resizeCornerRadius);

  return v5;
}

void FormatTooNewSynapseLinkView.__ivar_destroyer()
{
}

id FormatTooNewSynapseLinkView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FormatTooNewSynapseLinkView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FormatTooNewSynapseLinkView()
{
  return self;
}

uint64_t specialized Canvas.undoable(newChange:persistSelection:action:)(char a1, char a2, uint64_t (*a3)(double))
{
  id v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v8 - 8);
  CGFloat v58 = &v44[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for CapsuleUndoAction();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  double v57 = &v44[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = &v44[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = &v44[-v20];
  if (*((unsigned char *)v3 + direct field offset for Canvas.isInUndoableGroup) == 1)
  {
    *((unsigned char *)v3 + direct field offset for Canvas.isUndoableGroupNewChange) = (*((unsigned char *)v3
                                                                                + direct field offset for Canvas.isUndoableGroupNewChange) | a1) & 1;
    return a3(v19);
  }
  uint64_t v55 = v11;
  uint64_t v53 = direct field offset for Canvas.isInUndoableGroup;
  *((unsigned char *)v3 + direct field offset for Canvas.isInUndoableGroup) = 1;
  uint64_t v50 = direct field offset for Canvas.isUndoableGroupNewChange;
  *((unsigned char *)v3 + direct field offset for Canvas.isUndoableGroupNewChange) = a1 & 1;
  uint64_t v51 = direct field offset for Canvas.paperView;
  uint64_t v23 = *(void *)((char *)v3 + direct field offset for Canvas.paperView)
      + *(void *)((*MEMORY[0x263F8EED0] & **(void **)((char *)v3 + direct field offset for Canvas.paperView))
                  + 0x380);
  uint64_t v24 = v18;
  swift_beginAccess();
  uint64_t v54 = v14;
  uint64_t v25 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v14 + 16);
  double v56 = v21;
  uint64_t v26 = v21;
  uint64_t v27 = v24;
  uint64_t v52 = v25;
  uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v25)(v26, v23, v24);
  if (a2)
  {
    uint64_t v28 = *(void *)((char *)v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v28)
    {
      __break(1u);
      return result;
    }
    uint64_t v29 = v28 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    uint64_t v30 = *(void *)v29;
    uint64_t v31 = *(void *)(v29 + 8);
    uint64_t v46 = *(void *)(v29 + 16);
    unsigned int v45 = *(unsigned __int8 *)(v29 + 24);
    uint64_t v48 = v30;
    swift_bridgeObjectRetain();
    uint64_t v47 = v31;
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v46 = 0;
    unsigned int v45 = 0;
  }
  ((void (*)(uint64_t))a3)(result);
  if (one-time initialization token for $currentAnalyticsEvents != -1) {
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v49 = v10;
    TaskLocal.get()();
    uint64_t v32 = v59;
    uint64_t v33 = v59[2];
    if (!v33) {
      break;
    }
    uint64_t v10 = 0;
    unint64_t v34 = 0;
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew()(v32);
      }
      if (v34 >= v32[2]) {
        break;
      }
      ++v34;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v32 + v10 + 32, *(void *)((char *)v32 + v10 + 56));
      AnalyticsEvent.send()();
      v10 += 40;
      if (v33 == v34) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_21:
    swift_once();
  }
LABEL_14:
  uint64_t v35 = (void *)MEMORY[0x263F8EED0];
  if (*((unsigned char *)v3 + v50) == 1)
  {
    LOBYTE(v59) = 3;
    (*(void (**)(void **))((*MEMORY[0x263F8EED0] & *v3) + 0x530))(&v59);
  }
  uint64_t v36 = *(void *)((char *)v3 + v51) + *(void *)((*v35 & **(void **)((char *)v3 + v51)) + 0x380);
  swift_beginAccess();
  v52(v16, v36, v27);
  uint64_t v37 = (uint64_t)v58;
  id v38 = v56;
  Capsule.actionUndoingDifference(from:)();
  uint64_t v54 = *(void *)(v54 + 8);
  ((void (*)(unsigned char *, uint64_t))v54)(v16, v27);
  uint64_t v39 = v55;
  id v40 = v35;
  uint64_t v41 = v49;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v37, 1, v49) == 1)
  {
    outlined consume of CanvasMembers?(v48);
    swift_bridgeObjectRelease();
    ((void (*)(unsigned char *, uint64_t))v54)(v38, v27);
    uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v37, &demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    double v42 = v57;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v39 + 32))(v57, v37, v41);
    uint64_t v43 = v48;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, void, void *))((*v40 & *v4) + 0x468))(v42, v48, v47, v46, v45, v32);
    outlined consume of CanvasMembers?(v43);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v57, v41);
    uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v54)(v56, v27);
  }
  *((unsigned char *)v4 + v53) = 0;
  return result;
}

uint64_t Capsule<>.init(drawingData:encryptionDelegate:encryptionContextURL:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PKDrawingCoherence(0);
  id v9 = specialized PKDrawingCoherence.__allocating_init(data:)();
  if (!v4) {
    Capsule<>.init(drawing:)((uint64_t)v9);
  }
  outlined consume of Data._Representation(a1, a2);
  outlined destroy of StocksKitCurrencyCache.Provider?(a4, &demangling cache variable for type metadata for URL?);
  return outlined destroy of StocksKitCurrencyCache.Provider?(a3, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  id v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v6 = v4;
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    swift_retain();
    unint64_t v8 = 0xF000000000000000;
  }
  id v9 = a3;
  v5(v4, v8, a3);

  outlined consume of Data?((uint64_t)v4, v8);
  return swift_release();
}

double key path getter for Paper.frame : Paper@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for Paper.frame : Paper()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

void Capsule<>.init(drawing:)(uint64_t a1)
{
  v20[0] = a1;
  uint64_t v1 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v2);
  long long v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)v20 - v6;
  uint64_t v8 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v21 = 0u;
  long long v22 = 0u;
  CRRegister.init(wrappedValue:)();
  long long v21 = 0u;
  long long v22 = 0u;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v21 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 1, 1, v11);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(void *)&long long v21 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v21 = 0;
  *((void *)&v21 + 1) = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v21 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v12 = (void *)v20[0];
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  CROrderedSet.init()();
  *(void *)&v10[*(int *)(v8 + 48)] = MEMORY[0x263F8EE80];
  CRKeyPath.init(_:)();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule<>.init(_:id:)();
  uint64_t v13 = (void *)PKDrawingCoherence.drawingWithNormalizedCanvasBounds()();
  objc_msgSend(v13, sel__canvasBounds);
  CGFloat x = v23.origin.x;
  CGFloat y = v23.origin.y;
  CGFloat width = v23.size.width;
  CGFloat height = v23.size.height;
  BOOL IsNull = CGRectIsNull(v23);
  if (IsNull)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x270FA5388](IsNull);
    *(CGFloat *)&v20[-6] = x;
    *(CGFloat *)&v20[-5] = y;
    *(CGFloat *)&v20[-4] = width;
    *(CGFloat *)&v20[-3] = height;
    double v19 = v13;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
    Capsule.mutate<A>(_:)();
  }
}

void Capsule<>.init(drawing:context:)(uint64_t a1, void *a2)
{
  Capsule<>.init(drawing:)(a1);
}

uint64_t PKDrawingCoherence.drawingWithNormalizedCanvasBounds()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PKDrawing();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v26 - v12;
  objc_msgSend(v1, sel__canvasBounds, v11);
  double x = v28.origin.x;
  double y = v28.origin.y;
  double width = v28.size.width;
  double height = v28.size.height;
  if (CGRectIsNull(v28)
    && (double width = *MEMORY[0x263F14CE0],
        objc_msgSend(v1, sel_bounds),
        double y = v29.origin.y,
        double height = v29.size.height,
        double x = 0.0,
        CGRectIsNull(v29)))
  {
    double height = 32.0;
    double y = 0.0;
  }
  else if (y != 0.0)
  {
    CGFloat v23 = -y;
    double y = 0.0;
    CGAffineTransformMakeTranslation(&v27, 0.0, v23);
    id v24 = objc_msgSend(v1, sel_drawingByApplyingTransform_, &v27);
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v9, v6);
    type metadata accessor for PKDrawingCoherence(0);
    swift_dynamicCast();
    CGFloat a = v27.a;
    goto LABEL_7;
  }
  uint64_t v18 = &v1[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  double v19 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v19(v5, v18, v2);
  uint64_t v20 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  long long v21 = (char *)objc_allocWithZone(v20);
  v19(&v21[OBJC_IVAR___PKDrawingCoherence_model], v5, v2);
  v26.receiver = v21;
  v26.super_class = v20;
  CGFloat a = COERCE_DOUBLE(objc_msgSendSuper2(&v26, sel_init));
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_7:
  objc_msgSend(*(id *)&a, sel_set_canvasBounds_, x, y, width, height);
  return *(void *)&a;
}

uint64_t closure #1 in Capsule<>.init(drawing:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = a6;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v10 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v27 = (uint64_t)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v24 - v16;
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v18 = (void (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  double v28 = a1;
  double v29 = a2;
  double v30 = a3;
  double v31 = a4;
  uint64_t v24 = type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  v18(v32, 0);
  double v19 = (void (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  double v28 = a1;
  double v29 = a2;
  double v30 = a3;
  double v31 = a4;
  CRRegister.wrappedValue.setter();
  v19(v32, 0);
  uint64_t v20 = v25 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v20, v26);
  type metadata accessor for PKDrawingStruct();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  swift_retain();
  Ref.init<A>(_:_:)();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v17, 0, 1, v21);
  long long v22 = (uint64_t (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v17, v27, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  return v22(v32, 0);
}

uint64_t specialized Capsule<>.addCanvasElement<A>(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule<>.root.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  CGFloat v5 = v12;
  CGFloat v6 = v13;
  CGFloat v7 = v14;
  CGFloat v8 = v15;
  _s8PaperKit0A0VWOhTm_5((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Paper);
  double v12 = v5;
  double v13 = v6;
  double v14 = v7;
  double v15 = v8;
  v16.origin.double x = v5;
  v16.origin.double y = v6;
  v16.size.double width = v7;
  v16.size.double height = v8;
  if (CGRectGetWidth(v16) < 1.0) {
    double v14 = *MEMORY[0x263F14CE0];
  }
  MEMORY[0x270FA5388](v9);
  *(void *)&v11[-16] = a1;
  *(void *)&v11[-8] = &v12;
  return Capsule.mutate<A>(_:)();
}

uint64_t specialized closure #1 in Capsule<>.addCanvasElement<A>(_:)(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  MEMORY[0x270FA5388](v5);
  double v42 = (char *)&KeyPath - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)&KeyPath - v8;
  uint64_t v55 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v55);
  uint64_t v37 = (char *)&KeyPath - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v46 = v10;
  MEMORY[0x270FA5388](v10);
  id v40 = (char *)&KeyPath - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  double v15 = (char *)&KeyPath - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&KeyPath - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a2, v12, v18);
  uint64_t v21 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  swift_retain();
  Ref.init<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = (uint64_t)v37;
  uint64_t v38 = v12;
  uint64_t v39 = a2;
  Capsule<>.root.getter();
  CGFloat v23 = v41;
  Capsule<>.rootID.getter();
  LOBYTE(v54.origin.x) = 1;
  uint64_t v24 = v43;
  uint64_t v25 = v44;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v42, v23, v44);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  uint64_t v26 = v40;
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v25);
  _s8PaperKit0A0VWOhTm_5(v22, (uint64_t (*)(void))type metadata accessor for Image);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v27 = (void (*)(CGRect *, void))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.append(_:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v26, v46);
  v27(&v54, 0);
  swift_release();
  double MaxY = CGRectGetMaxY(*(CGRect *)a3);
  uint64_t v47 = v55;
  uint64_t v48 = v21;
  uint64_t v49 = &protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  double v29 = CGRectGetMaxY(v54) + 64.0;
  if (MaxY > v29) {
    double v29 = MaxY;
  }
  uint64_t v31 = *(void *)a3;
  double v30 = a3[1];
  double v32 = v29 - v30;
  a3[3] = v29 - v30;
  uint64_t v33 = *((void *)a3 + 2);
  unint64_t v34 = (uint64_t (*)(CGRect *, void))Capsule.Ref<>.root.modify();
  uint64_t v50 = v31;
  double v51 = v30;
  uint64_t v52 = v33;
  double v53 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  return v34(&v54, 0);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(CGRect *, void);
  double MaxY;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t (*v34)(CGRect *, void);
  uint64_t KeyPath;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _UNKNOWN **v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  double v53;
  CGRect v54;
  uint64_t v55;

  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  MEMORY[0x270FA5388](v5);
  double v42 = (char *)&KeyPath - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)&KeyPath - v8;
  uint64_t v55 = type metadata accessor for Link();
  MEMORY[0x270FA5388](v55);
  uint64_t v37 = (char *)&KeyPath - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v46 = v10;
  MEMORY[0x270FA5388](v10);
  id v40 = (char *)&KeyPath - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  double v15 = (char *)&KeyPath - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Link>);
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&KeyPath - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a2, v12, v18);
  uint64_t v21 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  swift_retain();
  Ref.init<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = (uint64_t)v37;
  uint64_t v38 = v12;
  uint64_t v39 = a2;
  Capsule<>.root.getter();
  CGFloat v23 = v41;
  Capsule<>.rootID.getter();
  LOBYTE(v54.origin.x) = 4;
  uint64_t v24 = v43;
  uint64_t v25 = v44;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v42, v23, v44);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  uint64_t v26 = v40;
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v25);
  _s8PaperKit0A0VWOhTm_5(v22, (uint64_t (*)(void))type metadata accessor for Link);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v27 = (void (*)(CGRect *, void))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.append(_:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v26, v46);
  v27(&v54, 0);
  swift_release();
  double MaxY = CGRectGetMaxY(*(CGRect *)a3);
  uint64_t v47 = v55;
  uint64_t v48 = v21;
  uint64_t v49 = &protocol witness table for Link;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  double v29 = CGRectGetMaxY(v54) + 64.0;
  if (MaxY > v29) {
    double v29 = MaxY;
  }
  uint64_t v31 = *(void *)a3;
  double v30 = a3[1];
  double v32 = v29 - v30;
  a3[3] = v29 - v30;
  uint64_t v33 = *((void *)a3 + 2);
  unint64_t v34 = (uint64_t (*)(CGRect *, void))Capsule.Ref<>.root.modify();
  uint64_t v50 = v31;
  double v51 = v30;
  uint64_t v52 = v33;
  double v53 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  return v34(&v54, 0);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(CGRect *, void);
  double MaxY;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t (*v34)(CGRect *, void);
  uint64_t KeyPath;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _UNKNOWN **v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  double v53;
  CGRect v54;
  uint64_t v55;

  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  MEMORY[0x270FA5388](v5);
  double v42 = (char *)&KeyPath - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)&KeyPath - v8;
  uint64_t v55 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v55);
  uint64_t v37 = (char *)&KeyPath - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v46 = v10;
  MEMORY[0x270FA5388](v10);
  id v40 = (char *)&KeyPath - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  double v15 = (char *)&KeyPath - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Shape>);
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&KeyPath - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a2, v12, v18);
  uint64_t v21 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  swift_retain();
  Ref.init<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = (uint64_t)v37;
  uint64_t v38 = v12;
  uint64_t v39 = a2;
  Capsule<>.root.getter();
  CGFloat v23 = v41;
  Capsule<>.rootID.getter();
  LOBYTE(v54.origin.x) = 5;
  uint64_t v24 = v43;
  uint64_t v25 = v44;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v42, v23, v44);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  uint64_t v26 = v40;
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v25);
  _s8PaperKit0A0VWOhTm_5(v22, (uint64_t (*)(void))type metadata accessor for Shape);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v27 = (void (*)(CGRect *, void))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.append(_:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v26, v46);
  v27(&v54, 0);
  swift_release();
  double MaxY = CGRectGetMaxY(*(CGRect *)a3);
  uint64_t v47 = v55;
  uint64_t v48 = v21;
  uint64_t v49 = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  double v29 = CGRectGetMaxY(v54) + 64.0;
  if (MaxY > v29) {
    double v29 = MaxY;
  }
  uint64_t v31 = *(void *)a3;
  double v30 = a3[1];
  double v32 = v29 - v30;
  a3[3] = v29 - v30;
  uint64_t v33 = *((void *)a3 + 2);
  unint64_t v34 = (uint64_t (*)(CGRect *, void))Capsule.Ref<>.root.modify();
  uint64_t v50 = v31;
  double v51 = v30;
  uint64_t v52 = v33;
  double v53 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  return v34(&v54, 0);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(CGRect *, void);
  double MaxY;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t (*v34)(CGRect *, void);
  uint64_t KeyPath;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _UNKNOWN **v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  double v53;
  CGRect v54;
  uint64_t v55;

  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  MEMORY[0x270FA5388](v5);
  double v42 = (char *)&KeyPath - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)&KeyPath - v8;
  uint64_t v55 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v55);
  uint64_t v37 = (char *)&KeyPath - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v46 = v10;
  MEMORY[0x270FA5388](v10);
  id v40 = (char *)&KeyPath - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  double v15 = (char *)&KeyPath - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&KeyPath - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a2, v12, v18);
  uint64_t v21 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  swift_retain();
  Ref.init<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = (uint64_t)v37;
  uint64_t v38 = v12;
  uint64_t v39 = a2;
  Capsule<>.root.getter();
  CGFloat v23 = v41;
  Capsule<>.rootID.getter();
  LOBYTE(v54.origin.x) = 2;
  uint64_t v24 = v43;
  uint64_t v25 = v44;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v42, v23, v44);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  uint64_t v26 = v40;
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v25);
  _s8PaperKit0A0VWOhTm_5(v22, (uint64_t (*)(void))type metadata accessor for GraphElement);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v27 = (void (*)(CGRect *, void))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.append(_:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v26, v46);
  v27(&v54, 0);
  swift_release();
  double MaxY = CGRectGetMaxY(*(CGRect *)a3);
  uint64_t v47 = v55;
  uint64_t v48 = v21;
  uint64_t v49 = &protocol witness table for GraphElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  double v29 = CGRectGetMaxY(v54) + 64.0;
  if (MaxY > v29) {
    double v29 = MaxY;
  }
  uint64_t v31 = *(void *)a3;
  double v30 = a3[1];
  double v32 = v29 - v30;
  a3[3] = v29 - v30;
  uint64_t v33 = *((void *)a3 + 2);
  unint64_t v34 = (uint64_t (*)(CGRect *, void))Capsule.Ref<>.root.modify();
  uint64_t v50 = v31;
  double v51 = v30;
  uint64_t v52 = v33;
  double v53 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  return v34(&v54, 0);
}

uint64_t Capsule<>.addElements(fromItemProviders:location:completion:)(unint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  type metadata accessor for CRContext();
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t v10 = (void *)MEMORY[0x21054C990](0, v13);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  uint64_t v11 = CRContext.assetManager.getter();

  LOBYTE(v13[0]) = 9;
  Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(v11, a1, *(uint64_t *)&a4, *(void (***)(char *, uint64_t))&a5, 0, (unsigned __int8 *)v13, a2, a3);
  return swift_release();
}

uint64_t Capsule<>.addElements(assetManager:fromItemProviders:location:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  unsigned __int8 v7 = 9;
  return Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(a1, a2, *(uint64_t *)&a5, *(void (***)(char *, uint64_t))&a6, 0, &v7, a3, a4);
}

uint64_t Capsule<>.addElements(fromItemProviders:location:anchor:completion:)(unint64_t a1, uint64_t a2, void (**a3)(char *, uint64_t), char a4, char *a5, uint64_t a6, uint64_t a7)
{
  char v12 = *a5;
  int v13 = a4 & 1;
  type metadata accessor for CRContext();
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v14 = (void *)MEMORY[0x21054C990](0, v17);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  uint64_t v15 = CRContext.assetManager.getter();

  LOBYTE(v17[0]) = v12;
  Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(v15, a1, a2, a3, v13, (unsigned __int8 *)v17, a6, a7);
  return swift_release();
}

uint64_t Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, void (**a4)(char *, uint64_t), int a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v211 = a8;
  uint64_t v210 = a7;
  LODWORD(v236) = a5;
  int64_t v237 = a4;
  *(void *)&v239.f64[0] = a3;
  unint64_t v234 = a2;
  uint64_t v215 = a1;
  uint64_t v214 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v213 = *(void *)(v214 - 8);
  MEMORY[0x270FA5388](v214);
  v212 = (char *)&v194 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v207 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v205 = *(void *)(v207 - 8);
  MEMORY[0x270FA5388](v207);
  long long v204 = (char *)&v194 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v233 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v224 = *(void (***)(char *, uint64_t))(v233 - 8);
  MEMORY[0x270FA5388](v233);
  char v198 = (char *)&v194 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  v201 = (char *)&v194 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v202 = (char *)&v194 - v15;
  MEMORY[0x270FA5388](v16);
  unint64_t v220 = (char *)&v194 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v216 = (char *)&v194 - v19;
  uint64_t v238 = type metadata accessor for UTType();
  uint64_t v218 = *(uint64_t (***)())(v238 - 8);
  MEMORY[0x270FA5388](v238);
  uint64_t v21 = (char *)&v194 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v232 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v22 = *(void *)(v232 - 8);
  MEMORY[0x270FA5388](v232);
  uint64_t v24 = (char *)&v194 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v25);
  uint64_t v209 = type metadata accessor for DispatchQoS();
  uint64_t v208 = *(void *)(v209 - 8);
  MEMORY[0x270FA5388](v209);
  uint64_t v27 = (char *)&v194 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v219 = *a6;
  dispatch_group_t v231 = dispatch_group_create();
  uint64_t v28 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock = MEMORY[0x263F8EE78];
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v22 + 104))(v24, *MEMORY[0x263F8F130], v232);
  unint64_t v29 = v234;
  uint64_t v206 = v27;
  uint64_t v203 = v28;
  uint64_t v30 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v31 = v224;
  uint64_t v229 = (void *)v30;
  uint64_t v32 = v233;
  uint64_t v232 = swift_allocBox();
  uint64_t v33 = v31[2];
  uint64_t v228 = v34;
  v227 = (void (**)(void, void))(v31 + 2);
  v226 = v33;
  ((void (*)(uint64_t, void, uint64_t))v33)(v34, *(void *)&v235.f64[0], v32);
  uint64_t v230 = swift_allocObject();
  *(void *)(v230 + 16) = 0;
  uint64_t v35 = v237;
  if (v236) {
    uint64_t v35 = 0;
  }
  uint64_t v223 = v35;
  float64_t v36 = v239.f64[0];
  if (v236) {
    float64_t v36 = 0.0;
  }
  float64_t v222 = v36;
  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v37 = result;
  }
  else
  {
    uint64_t v37 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v39 = v238;
  if (v37)
  {
    if (v37 >= 1)
    {
      unint64_t v225 = v29 & 0xC000000000000001;
      swift_beginAccess();
      uint64_t v40 = 0;
      uint64_t v41 = (void (**)(char *, uint64_t))(v218 + 1);
      uint64_t v224 = v31 + 1;
      uint64_t v217 = *MEMORY[0x263F14C60];
      uint64_t v218 = &v245;
      double v42 = &off_2640D6000;
      uint64_t v236 = *MEMORY[0x263F7C260];
      float64x2_t v239 = 0u;
      __asm { FMOV            V0.2D, #1.0 }
      long long v200 = _Q0;
      uint64_t v197 = MEMORY[0x263F8EE58] + 8;
      unint64_t v199 = (unint64_t)"generationFailed";
      unint64_t v196 = 0x800000020C84EE40;
      BOOL v194 = "graphableVariable";
      unint64_t v195 = 0x800000020C8520C0;
      uint64_t v221 = v37;
      int64_t v237 = v41;
      while (1)
      {
        if (v225) {
          id v48 = (id)MEMORY[0x21054E050](v40, v29);
        }
        else {
          id v48 = *(id *)(v29 + 8 * v40 + 32);
        }
        uint64_t v49 = v48;
        static UTType.image.getter();
        uint64_t v50 = UTType.identifier.getter();
        uint64_t v52 = v51;
        double v53 = *v41;
        (*v41)(v21, v39);
        CGRect v54 = (void *)MEMORY[0x21054D080](v50, v52);
        swift_bridgeObjectRelease();
        LODWORD(v52) = objc_msgSend(v49, (SEL)v42[446], v54);

        if (v52 && (objc_msgSend(v49, (SEL)v42[446], v217) & 1) == 0)
        {
          dispatch_group_t v84 = v231;
          dispatch_group_enter(v231);
          objc_msgSend(v49, sel_preferredPresentationSize);
          if (v86 != 0.0 || (double v87 = 0.0, v88 = 0.0, v85 != 0.0))
          {
            objc_msgSend(v49, sel_preferredPresentationSize, v194);
            double v91 = v90;
            if (v90 >= 64.0)
            {
              double v92 = v89;
            }
            else
            {
              if (one-time initialization token for canvasElementDefaultSize != -1) {
                swift_once();
              }
              double v91 = *(double *)&static UIConstants.canvasElementDefaultSize;
              double v92 = *(double *)algn_2676E93F0;
            }
            if (v91 > v92) {
              double v117 = v91;
            }
            else {
              double v117 = v92;
            }
            if (one-time initialization token for maximumDropCanvasElementDimension != -1) {
              swift_once();
            }
            double v118 = fmin(*(double *)&static UIConstants.maximumDropCanvasElementDimension / v117, 1.0);
            double v87 = v91 * v118;
            double v88 = v92 * v118;
          }
          CGRect v119 = v216;
          uint64_t v120 = v233;
          ((void (*)(char *, uint64_t, uint64_t))v226)(v216, v228, v233);
          swift_getKeyPath();
          _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
          Capsule<>.subscript.getter();
          swift_release();
          (*v224)(v119, v120);
          float64x2_t v121 = v240;
          uint64_t v122 = v241;
          uint64_t v123 = v242;
          *(float64_t *)uint64_t v255 = v222;
          v255[1] = v223;
          *(double *)&v255[2] = v87;
          *(double *)&v255[3] = v88;
          char v256 = 0;
          uint64_t v124 = (void *)swift_allocObject();
          id v125 = v229;
          uint64_t v126 = v230;
          v124[2] = v229;
          v124[3] = v126;
          v124[4] = v232;
          v124[5] = v84;
          id v127 = v125;
          swift_retain();
          swift_retain();
          id v128 = v84;
          static UTType.image.getter();
          uint64_t v129 = UTType.identifier.getter();
          uint64_t v131 = v130;
          uint64_t v132 = v238;
          v53(v21, v238);
          uint64_t v133 = (void *)MEMORY[0x21054D080](v129, v131);
          swift_bridgeObjectRelease();
          LOBYTE(v131) = objc_msgSend(v49, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v133, 0);

          if (v131)
          {
            static UTType.image.getter();
            uint64_t v134 = UTType.identifier.getter();
            uint64_t v136 = v135;
            v53(v21, v132);
            id v137 = (void *)MEMORY[0x21054D080](v134, v136);
            swift_bridgeObjectRelease();
            uint64_t v138 = swift_allocObject();
            *(void *)(v138 + 16) = v215;
            *(float64x2_t *)(v138 + 24) = v121;
            *(void *)(v138 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v122;
            *(void *)(v138 + 48) = v123;
            outlined init with take of CGRect?((uint64_t)v255, v138 + 56);
            *(void *)(v138 + 96) = 0;
            *(unsigned char *)(v138 + 104) = v219;
            *(float64x2_t *)(v138 + 112) = v239;
            *(unsigned char *)(v138 + 128) = 0;
            *(void *)(v138 + 136) = v49;
            *(void *)(v138 + 144) = partial apply for closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
            *(void *)(v138 + 152) = v124;
            v247 = (uint64_t (*)())partial apply for closure #1 in static ImageLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
            uint64_t v248 = (void *)v138;
            uint64_t aBlock = MEMORY[0x263EF8330];
            uint64_t v244 = 1107296256;
            double v245 = (uint64_t (*)())thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed Error?) -> ();
            v246 = &block_descriptor_58_0;
            unint64_t v139 = _Block_copy(&aBlock);
            swift_retain();
            id v140 = v49;
            swift_retain();
            swift_release();
            id v141 = objc_msgSend(v140, sel_loadDataRepresentationForTypeIdentifier_completionHandler_, v137, v139);
            _Block_release(v139);
            swift_release();
          }
          else
          {
            swift_release();
            dispatch_group_leave(v128);
          }
          uint64_t v37 = v221;
          unint64_t v29 = v234;
          double v42 = &off_2640D6000;
          if (one-time initialization token for dropItemSpacing != -1) {
            swift_once();
          }
          float64x2_t v235 = (float64x2_t)static UIConstants.dropItemSpacing;

          float64x2_t v239 = vaddq_f64(v239, v235);
          uint64_t v39 = v238;
          uint64_t v41 = v237;
          goto LABEL_13;
        }
        if (objc_msgSend(v49, (SEL)v42[446], v236, v194)) {
          goto LABEL_22;
        }
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
        if (objc_msgSend(v49, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata())) {
          goto LABEL_22;
        }
        static UTType.url.getter();
        uint64_t v55 = UTType.identifier.getter();
        uint64_t v57 = v56;
        v53(v21, v39);
        CGFloat v58 = (void *)MEMORY[0x21054D080](v55, v57);
        swift_bridgeObjectRelease();
        LODWORD(v57) = objc_msgSend(v49, (SEL)v42[446], v58);

        if (v57)
        {
LABEL_22:
          dispatch_group_t v59 = v231;
          dispatch_group_enter(v231);
          if (one-time initialization token for linkSize != -1) {
            swift_once();
          }
          long long v60 = static UIConstants.linkSize;
          CGFloat v61 = v220;
          uint64_t v62 = v233;
          ((void (*)(char *, uint64_t, uint64_t))v226)(v220, v228, v233);
          swift_getKeyPath();
          _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
          Capsule<>.subscript.getter();
          swift_release();
          (*v224)(v61, v62);
          float64x2_t v63 = v240;
          uint64_t v64 = v241;
          uint64_t v65 = v242;
          *(float64_t *)uint64_t v249 = v222;
          v249[1] = v223;
          long long v250 = v60;
          char v251 = 0;
          double v66 = (void *)swift_allocObject();
          CGFloat v67 = v229;
          uint64_t v68 = v230;
          v66[2] = v229;
          uint64_t v66[3] = v68;
          v66[4] = v232;
          v66[5] = v59;
          id v69 = v67;
          swift_retain();
          swift_retain();
          id v70 = v59;
          if (objc_msgSend(v49, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v236, 0))
          {
            unsigned __int8 v71 = 1;
          }
          else
          {
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
            unsigned __int8 v71 = objc_msgSend(v49, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata());
          }
          static UTType.url.getter();
          uint64_t v72 = UTType.identifier.getter();
          uint64_t v74 = v73;
          v53(v21, v238);
          double v75 = (void *)MEMORY[0x21054D080](v72, v74);
          swift_bridgeObjectRelease();
          unsigned __int8 v76 = objc_msgSend(v49, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v75, 0);

          if (v71)
          {
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
            ObjCClassFromMetadatCGFloat a = swift_getObjCClassFromMetadata();
            uint64_t v78 = swift_allocObject();
            *(void *)(v78 + 16) = partial apply for closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
            *(void *)(v78 + 24) = v66;
            *(float64x2_t *)(v78 + 32) = v63;
            *(void *)(v78 + 48) = v64;
            *(void *)(v78 + 56) = v65;
            outlined init with take of CGRect?((uint64_t)v249, v78 + 64);
            *(void *)(v78 + 104) = 0;
            *(unsigned char *)(v78 + 112) = v219;
            *(float64x2_t *)(v78 + 12CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v239;
            *(unsigned char *)(v78 + 136) = 0;
            v247 = (uint64_t (*)())partial apply for closure #1 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
            uint64_t v248 = (void *)v78;
            uint64_t aBlock = MEMORY[0x263EF8330];
            uint64_t v244 = 1107296256;
            double v245 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
            v246 = &block_descriptor_49_0;
            double v79 = _Block_copy(&aBlock);
            swift_retain();
            swift_release();
            id v80 = objc_msgSend(v49, sel_loadObjectOfClass_completionHandler_, ObjCClassFromMetadata, v79);
            uint64_t v37 = v221;
            goto LABEL_31;
          }
          uint64_t v37 = v221;
          if (v76)
          {
            type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSURL);
            uint64_t v81 = swift_getObjCClassFromMetadata();
            uint64_t v82 = swift_allocObject();
            *(void *)(v82 + 16) = partial apply for closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
            *(void *)(v82 + 24) = v66;
            *(float64x2_t *)(v82 + 32) = v63;
            *(void *)(v82 + 48) = v64;
            *(void *)(v82 + 56) = v65;
            outlined init with take of CGRect?((uint64_t)v249, v82 + 64);
            *(void *)(v82 + 104) = 0;
            *(unsigned char *)(v82 + 112) = v219;
            *(float64x2_t *)(v82 + 12CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v239;
            *(unsigned char *)(v82 + 136) = 0;
            v247 = (uint64_t (*)())partial apply for closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
            uint64_t v248 = (void *)v82;
            uint64_t aBlock = MEMORY[0x263EF8330];
            uint64_t v244 = 1107296256;
            double v245 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
            v246 = &block_descriptor_43_0;
            double v79 = _Block_copy(&aBlock);
            swift_retain();
            swift_release();
            id v80 = objc_msgSend(v49, sel_loadObjectOfClass_completionHandler_, v81, v79);
LABEL_31:
            id v83 = v80;
            _Block_release(v79);
            swift_release();
          }
          else
          {
            swift_release();
            dispatch_group_leave(v70);
          }
          unint64_t v29 = v234;
          double v42 = &off_2640D6000;
LABEL_40:
          uint64_t v39 = v238;
          uint64_t v41 = v237;
          if (one-time initialization token for dropItemSpacing != -1) {
            swift_once();
          }
          float64x2_t v235 = (float64x2_t)static UIConstants.dropItemSpacing;

          float64x2_t v239 = vaddq_f64(v239, v235);
          goto LABEL_13;
        }
        static UTType.utf8PlainText.getter();
        uint64_t v93 = UTType.identifier.getter();
        uint64_t v94 = v42;
        uint64_t v96 = v95;
        v53(v21, v39);
        CGFloat v97 = (void *)MEMORY[0x21054D080](v93, v96);
        swift_bridgeObjectRelease();
        LODWORD(v96) = objc_msgSend(v49, (SEL)v94 + 111, v97);

        if (v96)
        {
          dispatch_group_t v98 = v231;
          dispatch_group_enter(v231);
          double v99 = v202;
          uint64_t v100 = v233;
          ((void (*)(char *, uint64_t, uint64_t))v226)(v202, v228, v233);
          swift_getKeyPath();
          _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
          Capsule<>.subscript.getter();
          swift_release();
          (*v224)(v99, v100);
          uint64_t v101 = aBlock;
          uint64_t v102 = v244;
          double v103 = v245;
          uint64_t v104 = v246;
          *(float64_t *)char v252 = v222;
          v252[1] = v223;
          long long v253 = v200;
          char v254 = 0;
          double v105 = (void *)swift_allocObject();
          id v106 = v229;
          uint64_t v107 = v230;
          v105[2] = v229;
          v105[3] = v107;
          v105[4] = v232;
          v105[5] = v98;
          id v108 = v106;
          swift_retain();
          swift_retain();
          uint64_t v109 = v39;
          uint64_t v110 = v98;
          static UTType.utf8PlainText.getter();
          uint64_t v111 = UTType.identifier.getter();
          uint64_t v113 = v112;
          v53(v21, v109);
          CGRect v114 = (void *)MEMORY[0x21054D080](v111, v113);
          swift_bridgeObjectRelease();
          LODWORD(v113) = objc_msgSend(v49, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v114, 0);

          if (v113)
          {
            uint64_t v115 = swift_allocObject();
            *(void *)(v115 + 16) = v101;
            *(void *)(v115 + 24) = v102;
            *(void *)(v115 + 32) = v103;
            *(void *)(v115 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v104;
            outlined init with take of CGRect?((uint64_t)v252, v115 + 48);
            *(void *)(v115 + 88) = 0;
            *(unsigned char *)(v115 + 96) = v219;
            *(float64x2_t *)(v115 + 104) = v239;
            *(unsigned char *)(v115 + 12CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0;
            *(void *)(v115 + 128) = partial apply for closure #3 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
            *(void *)(v115 + 136) = v105;
            lazy protocol witness table accessor for type String and conformance String();
            swift_retain();
            CGRect v116 = NSItemProvider.loadObject<A>(ofClass:completionHandler:)();
            swift_release();

            swift_release();
          }
          else
          {
            swift_release();
            dispatch_group_leave(v110);
          }
          unint64_t v29 = v234;
          double v42 = &off_2640D6000;
          uint64_t v37 = v221;
          goto LABEL_40;
        }
        BOOL v142 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
        int v143 = objc_msgSend(v49, (SEL)v94 + 111, v142);

        if ((v143 & 1) != 0
          || (uint64_t v144 = (void *)MEMORY[0x21054D080](0xD000000000000017, v199 | 0x8000000000000000),
              unsigned int v145 = objc_msgSend(v49, (SEL)v94 + 111, v144),
              v144,
              v145))
        {
          dispatch_group_t v146 = v231;
          dispatch_group_enter(v231);
          uint64_t v147 = v201;
          uint64_t v148 = v233;
          ((void (*)(char *, uint64_t, uint64_t))v226)(v201, v228, v233);
          swift_getKeyPath();
          _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
          Capsule<>.subscript.getter();
          swift_release();
          (*v224)(v147, v148);
          uint64_t v149 = (void *)swift_allocObject();
          uint64_t v150 = v229;
          uint64_t v151 = v230;
          v149[2] = v229;
          v149[3] = v151;
          v149[4] = v232;
          v149[5] = v146;
          id v152 = v150;
          swift_retain();
          swift_retain();
          id v153 = v146;
          unint64_t v154 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
          LODWORD(v146) = objc_msgSend(v49, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v154, 0);

          if (v146)
          {
            uint64_t v155 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
            specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
            v156.super.isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            uint64_t v157 = swift_allocObject();
            *(void *)(v157 + 16) = partial apply for closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
            *(void *)(v157 + 24) = v149;
            v247 = closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)partial apply;
            uint64_t v248 = (void *)v157;
            uint64_t aBlock = MEMORY[0x263EF8330];
            uint64_t v244 = 1107296256;
            double v245 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
            long long v158 = &block_descriptor_28_2;
LABEL_67:
            v246 = v158;
            char v162 = _Block_copy(&aBlock);
            swift_retain();
            swift_release();
            objc_msgSend(v49, sel_loadItemForTypeIdentifier_options_completionHandler_, v155, v156.super.isa, v162);
            _Block_release(v162);

            swift_release();
            uint64_t v39 = v238;
            goto LABEL_11;
          }
          uint64_t v159 = (void *)MEMORY[0x21054D080](0xD000000000000017, v196);
          int v160 = objc_msgSend(v49, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v159, 0);

          if (v160)
          {
            uint64_t v155 = (void *)MEMORY[0x21054D080](0xD000000000000017, v199 | 0x8000000000000000);
            specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
            v156.super.isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            uint64_t v161 = swift_allocObject();
            *(void *)(v161 + 16) = partial apply for closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
            *(void *)(v161 + 24) = v149;
            v247 = (uint64_t (*)())partial apply for closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:);
            uint64_t v248 = (void *)v161;
            uint64_t aBlock = MEMORY[0x263EF8330];
            uint64_t v244 = 1107296256;
            double v245 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
            long long v158 = &block_descriptor_21_0;
            goto LABEL_67;
          }
          swift_release();
          dispatch_group_leave(v153);
        }
        else
        {
          long long v163 = (void *)MEMORY[0x21054D080](0xD000000000000018, v195);
          unsigned int v164 = objc_msgSend(v49, (SEL)v94 + 111, v163);

          if (!v164)
          {

            unint64_t v29 = v234;
            goto LABEL_12;
          }
          dispatch_group_t v165 = v231;
          dispatch_group_enter(v231);
          if (one-time initialization token for defaultGraphSize != -1) {
            swift_once();
          }
          uint64_t v166 = v198;
          uint64_t v167 = v233;
          ((void (*)(char *, uint64_t, uint64_t))v226)(v198, v228, v233);
          swift_getKeyPath();
          _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
          Capsule<>.subscript.getter();
          swift_release();
          (*v224)(v166, v167);
          float64x2_t v235 = v240;
          uint64_t v168 = v241;
          uint64_t v169 = v242;
          uint64_t v170 = (void *)swift_allocObject();
          uint64_t v171 = v229;
          uint64_t v172 = v230;
          v170[2] = v229;
          v170[3] = v172;
          v170[4] = v232;
          v170[5] = v165;
          id v173 = v171;
          swift_retain();
          swift_retain();
          id v174 = v165;
          uint64_t v175 = (void *)MEMORY[0x21054D080](0xD000000000000018, (unint64_t)v194 | 0x8000000000000000);
          uint64_t v176 = swift_allocObject();
          *(float64x2_t *)(v176 + 16) = v235;
          *(void *)(v176 + 32) = v168;
          *(void *)(v176 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v169;
          *(void *)(v176 + 48) = partial apply for closure #5 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
          *(void *)(v176 + 56) = v170;
          v247 = (uint64_t (*)())partial apply for closure #1 in static GraphLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
          uint64_t v248 = (void *)v176;
          uint64_t aBlock = MEMORY[0x263EF8330];
          uint64_t v244 = 1107296256;
          double v245 = (uint64_t (*)())thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed Error?) -> ();
          v246 = &block_descriptor_12_1;
          v177 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          id v178 = objc_msgSend(v49, sel_loadDataRepresentationForTypeIdentifier_completionHandler_, v175, v177);
          _Block_release(v177);
          swift_release();

          if (one-time initialization token for dropItemSpacing != -1) {
            swift_once();
          }
          float64x2_t v235 = (float64x2_t)static UIConstants.dropItemSpacing;

          float64x2_t v239 = vaddq_f64(v239, v235);
        }
LABEL_11:
        unint64_t v29 = v234;
        uint64_t v41 = v237;
LABEL_12:
        double v42 = &off_2640D6000;
LABEL_13:
        if (v37 == ++v40) {
          goto LABEL_75;
        }
      }
    }
    __break(1u);
  }
  else
  {
LABEL_75:
    swift_bridgeObjectRelease();
    uint64_t v179 = v205;
    uint64_t v180 = v204;
    uint64_t v181 = v207;
    (*(void (**)(char *, void, uint64_t))(v205 + 104))(v204, *MEMORY[0x263F8F080], v207);
    *(void *)&v239.f64[0] = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v179 + 8))(v180, v181);
    uint64_t v182 = (void *)swift_allocObject();
    uint64_t v183 = v229;
    dispatch_group_t v184 = v231;
    v182[2] = v229;
    v182[3] = v184;
    uint64_t v185 = v211;
    v182[4] = v210;
    v182[5] = v185;
    uint64_t v186 = v232;
    v182[6] = v230;
    v182[7] = v186;
    v247 = partial apply for closure #6 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
    uint64_t v248 = v182;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v244 = 1107296256;
    double v245 = (uint64_t (*)())thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v246 = &block_descriptor_78;
    uint64_t v187 = _Block_copy(&aBlock);
    id v188 = v183;
    swift_retain();
    swift_retain();
    uint64_t v189 = v184;
    swift_retain();
    uint64_t v190 = v206;
    static DispatchQoS.unspecified.getter();
    *(void *)&v240.f64[0] = MEMORY[0x263F8EE78];
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v191 = v212;
    uint64_t v192 = v214;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    float64_t v193 = v239.f64[0];
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v187);

    (*(void (**)(char *, uint64_t))(v213 + 8))(v191, v192);
    (*(void (**)(char *, uint64_t))(v208 + 8))(v190, v209);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  dispatch_queue_t v27 = a2;
  dispatch_group_t v28 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = swift_projectBox();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v9, &demangling cache variable for type metadata for Capsule<Image>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Capsule<Image>?);
    uint64_t v18 = 0;
LABEL_4:
    dispatch_group_leave(v28);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v18);
  }
  uint64_t v26 = a3 + 16;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v19(v16, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
  unint64_t v20 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v26;
  *(void *)(v21 + 24) = v17;
  v19((char *)(v21 + v20), v13, v10);
  uint64_t v22 = swift_allocObject();
  uint64_t v18 = partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(void *)(v22 + 16) = partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(void *)(v22 + 24) = v21;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_67;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v27, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v23 & 1) == 0) {
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  dispatch_queue_t v27 = a2;
  dispatch_group_t v28 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = swift_projectBox();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v9, &demangling cache variable for type metadata for Capsule<Link>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Capsule<Link>?);
    uint64_t v18 = 0;
LABEL_4:
    dispatch_group_leave(v28);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v18);
  }
  uint64_t v26 = a3 + 16;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v19(v16, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
  unint64_t v20 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v26;
  *(void *)(v21 + 24) = v17;
  v19((char *)(v21 + v20), v13, v10);
  uint64_t v22 = swift_allocObject();
  uint64_t v18 = partial apply for closure #1 in closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(void *)(v22 + 16) = partial apply for closure #1 in closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(void *)(v22 + 24) = v21;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_82;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v27, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v23 & 1) == 0) {
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t closure #3 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  dispatch_queue_t v27 = a2;
  dispatch_group_t v28 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = swift_projectBox();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v9, &demangling cache variable for type metadata for Capsule<Shape>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Capsule<Shape>?);
    uint64_t v18 = 0;
LABEL_4:
    dispatch_group_leave(v28);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v18);
  }
  uint64_t v26 = a3 + 16;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v19(v16, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
  unint64_t v20 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v26;
  *(void *)(v21 + 24) = v17;
  v19((char *)(v21 + v20), v13, v10);
  uint64_t v22 = swift_allocObject();
  uint64_t v18 = partial apply for closure #1 in closure #3 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(void *)(v22 + 16) = partial apply for closure #1 in closure #3 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(void *)(v22 + 24) = v21;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_92_1;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v27, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v23 & 1) == 0) {
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  dispatch_queue_t v30 = a2;
  dispatch_group_t v31 = a5;
  uint64_t v29 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v28 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v28 - v17;
  uint64_t v19 = swift_projectBox();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
    unint64_t v20 = 0;
LABEL_4:
    dispatch_group_leave(v31);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v20);
  }
  v29 += 16;
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v21(v18, v8, v9);
  dispatch_group_t v28 = v15;
  Capsule.copy()();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
  unint64_t v22 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v29;
  *(void *)(v23 + 24) = v19;
  v21((char *)(v23 + v22), v12, v9);
  uint64_t v24 = swift_allocObject();
  unint64_t v20 = partial apply for closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(void *)(v24 + 16) = partial apply for closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(void *)(v24 + 24) = v23;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_102;
  uint64_t v25 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v30, v25);
  _Block_release(v25);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v10 + 8);
  v26(v28, v9);
  v26(v18, v9);
  LOBYTE(v25) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v25 & 1) == 0) {
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(void *a1)
{
  uint64_t result = swift_beginAccess();
  if (__OFADD__(*a1, 1))
  {
    __break(1u);
  }
  else
  {
    ++*a1;
    MEMORY[0x270FA5388](result);
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
    Capsule.callAsFunction<A>(_:)();
    return swift_endAccess();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v35 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  dispatch_queue_t v30 = *(void (***)(char *, uint64_t))(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v26 = v10;
  uint64_t v27 = v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Paper();
  uint64_t v14 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v32 = a1;
  Capsule.Ref.import<A>(_:)();
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v31 = v14;
  Capsule<>.subscript.getter();
  uint64_t v15 = v26;
  swift_release();
  uint64_t v16 = v33;
  CROrderedSet.makeIterator()();
  v30[1](v9, v16);
  uint64_t v17 = v13;
  CROrderedSet.Iterator.next()();
  uint64_t v18 = v35;
  uint64_t v19 = *(void (***)(char *, uint64_t))(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v19)(v7, 1, v2) != 1)
  {
    unint64_t v20 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t v35 = v18 + 32;
    dispatch_group_t v28 = (void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v29 = v20;
    dispatch_queue_t v30 = v19;
    do
    {
      v29(v4, v7, v2);
      swift_getKeyPath();
      uint64_t v21 = v15;
      unint64_t v22 = (void (*)(char *, void))Capsule.Ref<>.subscript.modify();
      CROrderedSet.append(_:)();
      v22(v34, 0);
      uint64_t v15 = v21;
      uint64_t v23 = v30;
      swift_release();
      (*v28)(v4, v2);
      CROrderedSet.Iterator.next()();
    }
    while (((unsigned int (*)(char *, uint64_t, uint64_t))v23)(v7, 1, v2) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v17, v15);
}

uint64_t closure #5 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  dispatch_queue_t v27 = a2;
  dispatch_group_t v28 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<GraphElement>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = swift_projectBox();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v9, &demangling cache variable for type metadata for Capsule<GraphElement>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Capsule<GraphElement>?);
    uint64_t v18 = 0;
LABEL_4:
    dispatch_group_leave(v28);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v18);
  }
  uint64_t v26 = a3 + 16;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v19(v16, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
  unint64_t v20 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v26;
  *(void *)(v21 + 24) = v17;
  v19((char *)(v21 + v20), v13, v10);
  uint64_t v22 = swift_allocObject();
  uint64_t v18 = partial apply for closure #1 in closure #5 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(void *)(v22 + 16) = partial apply for closure #1 in closure #5 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(void *)(v22 + 24) = v21;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_112;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v27, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v23 & 1) == 0) {
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_beginAccess();
  if (__OFADD__(*a1, 1))
  {
    __break(1u);
  }
  else
  {
    ++*a1;
    swift_beginAccess();
    specialized Capsule<>.addCanvasElement<A>(_:)(a3);
    return swift_endAccess();
  }
  return result;
}

uint64_t closure #6 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *), uint64_t a4, uint64_t a5)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v11 = swift_projectBox();
  OS_dispatch_group.wait()();
  swift_beginAccess();
  if (*(uint64_t *)(a5 + 16) < 1)
  {
    uint64_t v12 = *(void *)(v10 - 8);
    uint64_t v13 = 1;
  }
  else
  {
    swift_beginAccess();
    uint64_t v12 = *(void *)(v10 - 8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v9, v11, v10);
    uint64_t v13 = 0;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v9, v13, 1, v10);
  a3(v9);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
}

uint64_t Capsule<>.write(_:at:)()
{
  uint64_t v0 = type metadata accessor for URL();
  void v10[3] = *(void *)(v0 - 8);
  v10[4] = v0;
  MEMORY[0x270FA5388](v0);
  _OWORD v10[2] = (char *)v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v2 = type metadata accessor for CRCodableVersion();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_20C835740;
  unint64_t v7 = v6 + v5;
  uint64_t v8 = *(void (**)(unint64_t, void, uint64_t))(v3 + 104);
  v8(v7, *MEMORY[0x263F32EB0], v2);
  v8(v7 + v4, *MEMORY[0x263F32EB8], v2);
  if (one-time initialization token for allFileFormatVersions != -1) {
    swift_once();
  }
  static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)();
  return swift_bridgeObjectRelease();
}

void Capsule<>.write(at:)()
{
  type metadata accessor for CRContext();
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  uint64_t v0 = (void *)MEMORY[0x21054C990](0, v1);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v1, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  Capsule<>.write(_:at:)();
}

void UITextView.mergeWithUpdatedPaper(_:intoAttachment:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_msgSend(v3, sel__pk_viewProviderForAttachment_atCharacterIndex_createIfNeeded_, a2, a3, 1);
  if (v4)
  {
    uint64_t v8 = v4;
    id v5 = objc_msgSend(v4, sel_view);
    if (v5)
    {
      uint64_t v6 = v5;
      type metadata accessor for PaperTextAttachmentView();
      uint64_t v7 = swift_dynamicCastClass();
      if (v7)
      {
        MEMORY[0x270FA5388](v7);
        specialized Canvas.undoable(newChange:persistSelection:action:)(0, 0, (uint64_t (*)(double))partial apply for closure #1 in UITextView.mergeWithUpdatedPaper(_:intoAttachment:at:));

        return;
      }
    }
  }
}

void closure #1 in UITextView.mergeWithUpdatedPaper(_:intoAttachment:at:)(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  type metadata accessor for Paper();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_13(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule.merge<A>(_:)();
  swift_endAccess();

  char v3 = 3;
  PaperTextAttachmentView.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)&v3);
}

uint64_t partial apply for closure #1 in Capsule<>.init(drawing:)(uint64_t a1)
{
  return closure #1 in Capsule<>.init(drawing:)(*(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), a1, *(void *)(v1 + 48));
}

uint64_t sub_20C7E73B4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C7E73C4()
{
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #6 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)()
{
  return closure #6 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(unsigned char *))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t block_copy_helper_78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_78()
{
  return swift_release();
}

uint64_t partial apply for closure #5 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1)
{
  return closure #5 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_20C7E745C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1)
{
  return closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_20C7E74A4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #3 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1)
{
  return closure #3 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_20C7E74EC()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 144, 7);
}

uint64_t partial apply for closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1)
{
  return closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_20C7E7534()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 137, 7);
}

uint64_t objectdestroy_5Tm_1()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1)
{
  return closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_20C7E75CC()
{
  swift_release();

  swift_release();
  return MEMORY[0x270FA0238](v0, 160, 7);
}

void partial apply for closure #1 in UITextView.mergeWithUpdatedPaper(_:intoAttachment:at:)()
{
  closure #1 in UITextView.mergeWithUpdatedPaper(_:intoAttachment:at:)(*(void *)(v0 + 16));
}

uint64_t sub_20C7E761C()
{
  return objectdestroy_60Tm(&demangling cache variable for type metadata for Capsule<Image>);
}

uint64_t partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)()
{
  return partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(&demangling cache variable for type metadata for Capsule<Image>);
}

uint64_t sub_20C7E7648()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for specialized closure #1 in Capsule<>.addCanvasElement<A>(_:)(uint64_t a1)
{
  return specialized closure #1 in Capsule<>.addCanvasElement<A>(_:)(a1, *(void *)(v1 + 16), *(double **)(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #1 in Capsule<>.addCanvasElement<A>(_:)(a1, *(void *)(v1 + 16), *(double **)(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #1 in Capsule<>.addCanvasElement<A>(_:)(a1, *(void *)(v1 + 16), *(double **)(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #1 in Capsule<>.addCanvasElement<A>(_:)(a1, *(void *)(v1 + 16), *(double **)(v1 + 24));
}

void sub_20C7E7674(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(double *)a3 = (*(double (**)(void))(*(void *)(*(void *)(a2 + a1 - 8) + 8) + 8))(*(void *)(a2 + a1 - 24));
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v6;
}

uint64_t sub_20C7E76C8(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, double, double, double, double))(*(void *)(a4 + a3 - 8) + 16))(*(void *)(a4 + a3 - 24), *(void *)(a4 + a3 - 8), *a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_20C7E7718()
{
  return 24;
}

__n128 sub_20C7E7724(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C7E7738()
{
  return objectdestroy_60Tm(&demangling cache variable for type metadata for Capsule<Link>);
}

uint64_t partial apply for closure #1 in closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)()
{
  return partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(&demangling cache variable for type metadata for Capsule<Link>);
}

uint64_t partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t *a1)
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8);
  return closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(*(void **)(v1 + 16), *(void *)(v1 + 24), v1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
}

uint64_t sub_20C7E77C8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7E77F4()
{
  return objectdestroy_60Tm(&demangling cache variable for type metadata for Capsule<Shape>);
}

uint64_t partial apply for closure #1 in closure #3 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)()
{
  return partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(&demangling cache variable for type metadata for Capsule<Shape>);
}

uint64_t sub_20C7E7820()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7E784C()
{
  return objectdestroy_60Tm((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
}

uint64_t partial apply for closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v1 = *(void **)(v0 + 16);
  return closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(v1);
}

uint64_t sub_20C7E78C0()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(a1);
}

uint64_t sub_20C7E78EC()
{
  return objectdestroy_60Tm((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
}

uint64_t objectdestroy_60Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return MEMORY[0x270FA0238](v1, v6, v7);
}

uint64_t partial apply for closure #1 in closure #5 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)()
{
  return partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
}

uint64_t sub_20C7E79A4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _s8PaperKit0A0VWOhTm_5(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t AnyCanvas.formFieldElements.getter()
{
  uint64_t v1 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2F8);
  uint64_t v2 = (void *)v1();
  uint64_t v4 = v3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(ObjectType, v4);

  specialized Sequence.filter(_:)(v6);
  uint64_t v8 = v7;
  uint64_t v9 = (void *)v1();
  id v10 = objc_msgSend(v9, sel_effectiveUserInterfaceLayoutDirection);

  if (v8 < 0 || (v8 & 0x4000000000000000) != 0)
  {
    unint64_t v13 = swift_bridgeObjectRetain();
    uint64_t v11 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  uint64_t v14 = v11;
  specialized MutableCollection<>.sort(by:)(&v14, v10 == 0);
  swift_bridgeObjectRelease();
  return v14;
}

void AnyCanvas.selectedSignatureElements.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v2 = *(void *)(v1 - 8);
  v3.n128_f64[0] = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)MEMORY[0x263F8EED0];
  uint64_t v7 = (void *)(*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *v0) + 0x2F8))(v3);
  uint64_t v9 = v8;
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 72))(ObjectType, v9);

  uint64_t v20 = MEMORY[0x263F8EE78];
  if (!(v11 >> 62))
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_15;
  }
LABEL_3:
  if (v12 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v17 = v1;
    do
    {
      if ((v11 & 0xC000000000000001) != 0) {
        uint64_t v15 = (void *)MEMORY[0x21054E050](v13, v11);
      }
      else {
        uint64_t v15 = *(id *)(v11 + 8 * v13 + 32);
      }
      uint64_t v16 = v15;
      (*(void (**)(void))((*v6 & *v15) + 0xE8))();
      SharedTagged_9.tag.getter();
      (*v14)(v5, v1);
      if ((v19 & 1) != 0 || v18 != 6)
      {
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        uint64_t v1 = v17;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      ++v13;
    }
    while (v12 != v13);
    swift_bridgeObjectRelease();
  }
}

uint64_t AnyCanvas.isEditingTextBox.getter()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2F8))();
  uint64_t v4 = v3;
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 72))(ObjectType, v4);

  if (v6 >> 62) {
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v8 = 4;
    uint64_t v9 = 0;
    if ((v6 & 0xC000000000000001) != 0)
    {
LABEL_4:
      id v10 = (void *)MEMORY[0x21054E050](v9, v6);
      goto LABEL_6;
    }
    while (1)
    {
      id v10 = *(id *)(v6 + 8 * v8);
LABEL_6:
      unint64_t v11 = v10;
      uint64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      uint64_t v13 = (void *)(*(uint64_t (**)(void))((*v1 & *v10) + 0x2D0))();
      if (v13)
      {
        uint64_t v14 = v13;
        char v15 = (*(uint64_t (**)(void))((*v1 & *v13) + 0x98))();

        if (v15)
        {
          uint64_t v16 = 1;
          goto LABEL_18;
        }
        if (v12 == v7) {
          goto LABEL_17;
        }
      }
      else
      {

        if (v12 == v7) {
          goto LABEL_17;
        }
      }
      uint64_t v9 = ++v8 - 4;
      if ((v6 & 0xC000000000000001) != 0) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  uint64_t v16 = 0;
LABEL_18:
  swift_bridgeObjectRelease_n();
  return v16;
}

void specialized Sequence.filter(_:)(uint64_t a1)
{
  int64_t v2 = 0;
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  if (v6) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v10 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v10 < v7)
    {
      unint64_t v11 = *(void *)(v3 + 8 * v10);
      ++v2;
      if (v11) {
        goto LABEL_22;
      }
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_26;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (v11) {
        goto LABEL_22;
      }
      int64_t v2 = v10 + 2;
      if (v10 + 2 >= v7) {
        goto LABEL_26;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (v11) {
        goto LABEL_22;
      }
      int64_t v2 = v10 + 3;
      if (v10 + 3 >= v7) {
        goto LABEL_26;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (v11)
      {
LABEL_22:
        unint64_t v6 = (v11 - 1) & v11;
        for (unint64_t i = __clz(__rbit64(v11)) + (v2 << 6); ; unint64_t i = v8 | (v2 << 6))
        {
          uint64_t v13 = *(void **)(*(void *)(a1 + 56) + 8 * i);
          uint64_t v14 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v13) + 0x120);
          char v15 = v13;
          if (v14())
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            if (!v6) {
              goto LABEL_7;
            }
          }
          else
          {

            if (!v6) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v8 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }
      int64_t v12 = v10 + 4;
      if (v12 < v7)
      {
        unint64_t v11 = *(void *)(v3 + 8 * v12);
        if (v11)
        {
          int64_t v2 = v12;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v2 = v12 + 1;
          if (__OFADD__(v12, 1)) {
            goto LABEL_28;
          }
          if (v2 >= v7) {
            break;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          ++v12;
          if (v11) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_26:
    swift_release();
    return;
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

id TextStyleView.updateUI()()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit13TextStyleView_boldStyleButton;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit13TextStyleView_boldStyleButton);
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit13TextStyleView_selectedTextStyles;
  uint64_t v5 = *(_DWORD *)(v0 + OBJC_IVAR____TtC8PaperKit13TextStyleView_selectedTextStyles) & 1;
  unint64_t v6 = (objc_class *)type metadata accessor for AttributeStylingButton();
  v22.receiver = v3;
  v22.super_class = v6;
  id v7 = v3;
  objc_msgSendSuper2(&v22, sel_setSelected_, v5);
  AttributeStylingButton.isSelected.didset();

  uint64_t v8 = OBJC_IVAR____TtC8PaperKit13TextStyleView_italicStyleButton;
  uint64_t v9 = (*(void *)(v1 + v4) >> 1) & 1;
  v21.receiver = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit13TextStyleView_italicStyleButton);
  v21.super_class = v6;
  id v10 = v21.receiver;
  objc_msgSendSuper2(&v21, sel_setSelected_, v9);
  AttributeStylingButton.isSelected.didset();

  uint64_t v11 = OBJC_IVAR____TtC8PaperKit13TextStyleView_underlineStyleButton;
  uint64_t v12 = (*(void *)(v1 + v4) >> 2) & 1;
  v20.receiver = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit13TextStyleView_underlineStyleButton);
  v20.super_class = v6;
  id v13 = v20.receiver;
  objc_msgSendSuper2(&v20, sel_setSelected_, v12);
  AttributeStylingButton.isSelected.didset();

  uint64_t v14 = OBJC_IVAR____TtC8PaperKit13TextStyleView_strikethroughStyleButton;
  uint64_t v15 = (*(void *)(v1 + v4) >> 3) & 1;
  v19.receiver = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit13TextStyleView_strikethroughStyleButton);
  v19.super_class = v6;
  id v16 = v19.receiver;
  objc_msgSendSuper2(&v19, sel_setSelected_, v15);
  AttributeStylingButton.isSelected.didset();

  uint64_t v17 = OBJC_IVAR____TtC8PaperKit13TextStyleView_allowedTextStyles;
  objc_msgSend(*(id *)(v1 + v2), sel_setEnabled_, *(_DWORD *)(v1 + OBJC_IVAR____TtC8PaperKit13TextStyleView_allowedTextStyles) & 1);
  objc_msgSend(*(id *)(v1 + v8), sel_setEnabled_, (*(void *)(v1 + v17) >> 1) & 1);
  objc_msgSend(*(id *)(v1 + v11), sel_setEnabled_, (*(void *)(v1 + v17) >> 2) & 1);
  return objc_msgSend(*(id *)(v1 + v14), sel_setEnabled_, (*(void *)(v1 + v17) >> 3) & 1);
}

Swift::Void __swiftcall TextStyleView.layoutSubviews()()
{
  v9.receiver = v0;
  v9.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v9, sel_layoutSubviews);
  id v1 = objc_msgSend(v0, sel_layer);
  if (v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_useCapsuleStyle] == 1)
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_axis];
    objc_msgSend(v0, sel_bounds);
    if (v2) {
      double Width = CGRectGetWidth(*(CGRect *)&v3);
    }
    else {
      double Width = CGRectGetHeight(*(CGRect *)&v3);
    }
    double v8 = Width * 0.5;
  }
  else
  {
    double v8 = *(double *)&v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_regularCornerRadius];
  }
  objc_msgSend(v1, sel_setCornerRadius_, v8);
}

uint64_t type metadata accessor for TextStyleView()
{
  return self;
}

uint64_t protocol witness for TextStyleWidget.selectedTextStyles.getter in conformance TextStyleView()
{
  return *(void *)(v0 + OBJC_IVAR____TtC8PaperKit13TextStyleView_selectedTextStyles);
}

id protocol witness for TextStyleWidget.selectedTextStyles.setter in conformance TextStyleView(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC8PaperKit13TextStyleView_selectedTextStyles) = a1;
  return TextStyleView.updateUI()();
}

id protocol witness for TextStyleWidget.allowedTextStyles.setter in conformance TextStyleView(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC8PaperKit13TextStyleView_allowedTextStyles) = a1;
  return TextStyleView.updateUI()();
}

void specialized TextStyleView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit13TextStyleView_contentStackView;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_regularCornerRadius] = 0x4020000000000000;
  *(_OWORD *)&v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_maximumButtonSize] = xmmword_20C839CD0;
  *(_OWORD *)&v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_minimumButtonSize] = xmmword_20C839CE0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_selectedTextStyles] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_allowedTextStyles] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for TextStyleEditingView()
{
  return self;
}

uint64_t HorizontalTextStyleEditingViewLayout.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HorizontalTextStyleEditingViewLayout()
{
  return self;
}

uint64_t type metadata accessor for VerticalTextStyleEditingViewLayout()
{
  return self;
}

uint64_t type metadata accessor for CompactTextStyleEditingViewLayout()
{
  return self;
}

void specialized TextStyleEditingView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_colorSwatch] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_minFontNameControlWidth] = 0x4066800000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_maxFontNameControlWidth] = 0x4072000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontSizeControlWidth] = 0x4052000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textAlignmentWidgetWidth] = 0x4066800000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleWidgetWidth] = 0x4066800000000000;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ColorSwatch.updateUI()()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit11ColorSwatch_selectedColor];
  if (v1)
  {
    id v2 = v1;
    id v3 = objc_msgSend(v0, sel_window);

    if (!v3) {
      goto LABEL_7;
    }
    id v4 = objc_msgSend(v0, sel_window);
    if (!v4)
    {
      __break(1u);
      return;
    }
    uint64_t v5 = v4;
    id v8 = objc_msgSend(self, sel_activeToolPickerForWindow_, v4);

    if (v8)
    {
      if (objc_msgSend(v8, sel_colorUserInterfaceStyle))
      {
LABEL_9:
        id v7 = (void *)static PKInkingTool.convertColor(_:from:to:)();
        objc_msgSend(v0, sel_setBackgroundColor_, v7);

        return;
      }
    }
    else
    {
LABEL_7:
      id v8 = 0;
    }
    id v6 = objc_msgSend(v0, sel_traitCollection);
    objc_msgSend(v6, sel_userInterfaceStyle);

    goto LABEL_9;
  }
  objc_msgSend(v0, sel_setBackgroundColor_, 0);
}

uint64_t type metadata accessor for ColorSwatch()
{
  return self;
}

id Shadow.init(scaleFactor:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  if (one-time initialization token for defaultShadowOffset != -1)
  {
    double v5 = a2;
    swift_once();
    a2 = v5;
  }
  if (one-time initialization token for defaultShadowColor != -1)
  {
    double v6 = a2;
    swift_once();
    a2 = v6;
  }
  id v3 = (void *)static UIConstants.defaultShadowColor;
  *(float64x2_t *)a1 = vmulq_n_f64((float64x2_t)static UIConstants.defaultShadowOffset, a2);
  *(double *)(a1 + 16) = a2 * 3.0;
  *(void *)(a1 + 24) = v3;
  return v3;
}

uint64_t ShapeSecondaryProperties.shadow.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t ShapeSecondaryProperties.appearanceStreamOffset.setter(double a1, double a2)
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  swift_bridgeObjectRelease();
  if (!v9)
  {
    memset(v7, 0, sizeof(v7));
    uint64_t v8 = 0;
    unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    CRRegister.wrappedValue.setter();
  }
  double v5 = ShapeSecondaryProperties.auxiliaryInfo.modify(v7);
  if (*(void *)(v4 + 40))
  {
    *(double *)(v4 + 16) = a1;
    *(double *)(v4 + 24) = a2;
  }
  return ((uint64_t (*)(_OWORD *, void))v5)(v7, 0);
}

void (*Shape.text.modify(void *a1))(void **a1, char a2)
{
  id v3 = malloc(0x50uLL);
  *a1 = v3;
  void *v3 = v1;
  size_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?)
                             - 8)
                 + 64);
  v3[1] = malloc(v4);
  v3[2] = malloc(v4);
  v3[3] = malloc(v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v3[4] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[5] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[6] = malloc(v7);
  v3[7] = malloc(v7);
  v3[8] = malloc(v7);
  *((_DWORD *)v3 + 18) = *(_DWORD *)(type metadata accessor for Shape() + 52);
  return Shape.text.modify;
}

void Shape.text.modify(void **a1, char a2)
{
  id v2 = (int *)*a1;
  if ((a2 & 1) == 0)
  {
    id v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*((void *)v2 + 5) + 16);
    v3(*((void *)v2 + 8), *(void *)v2 + v2[18], *((void *)v2 + 4));
    size_t v4 = (void *)CRAttributedString.attributedString.getter();
    id v5 = objc_msgSend(v4, sel_string);

    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    uint64_t v9 = *((void *)v2 + 8);
    uint64_t v10 = *((void *)v2 + 4);
    uint64_t v11 = *((void *)v2 + 5);
    if (v6) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = v8 == 0xE000000000000000;
    }
    if (v12)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v14(v9, v10);
      if ((v13 & 1) == 0)
      {
        uint64_t v15 = *((void *)v2 + 6);
        uint64_t v16 = *((void *)v2 + 4);
        uint64_t v17 = *(void *)v2 + v2[18];
        v3(*((void *)v2 + 7), v17, v16);
        v3(v15, v17, v16);
        char v18 = (void *)CRAttributedString.attributedString.getter();
        v14(v15, v16);
        id v19 = objc_msgSend(v18, sel_length);

        if (__OFSUB__(v19, 1))
        {
          __break(1u);
          return;
        }
        uint64_t v20 = *((void *)v2 + 7);
        uint64_t v21 = *((void *)v2 + 3);
        uint64_t v22 = *((void *)v2 + 4);
        uint64_t v24 = *((void *)v2 + 1);
        uint64_t v23 = *((void *)v2 + 2);
        CRAttributedString.attributes(at:effectiveRange:)();
        v14(v20, v22);
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v21, 0, 1, v25);
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v21, v23, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v23, v24, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
        CRRegister.wrappedValue.setter();
        outlined destroy of StocksKitCurrencyCache.Provider?(v23, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v21, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      }
    }
  }
  uint64_t v26 = (void *)*((void *)v2 + 7);
  dispatch_queue_t v27 = (void *)*((void *)v2 + 6);
  uint64_t v29 = (void *)*((void *)v2 + 2);
  dispatch_group_t v28 = (void *)*((void *)v2 + 3);
  dispatch_queue_t v30 = (void *)*((void *)v2 + 1);
  free(*((void **)v2 + 8));
  free(v26);
  free(v27);
  free(v28);
  free(v29);
  free(v30);
  free(v2);
}

uint64_t ShapeSecondaryProperties.maximumNumberOfCharacters.setter(uint64_t a1)
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  swift_bridgeObjectRelease();
  if (!v7)
  {
    memset(v5, 0, sizeof(v5));
    uint64_t v6 = 0;
    unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    CRRegister.wrappedValue.setter();
  }
  id v3 = ShapeSecondaryProperties.auxiliaryInfo.modify(v5);
  if (*(void *)(v2 + 40)) {
    *(void *)(v2 + 32) = a1;
  }
  return ((uint64_t (*)(_OWORD *, void))v3)(v5, 0);
}

id Shadow.init()@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultShadowOffset != -1) {
    swift_once();
  }
  long long v2 = static UIConstants.defaultShadowOffset;
  if (one-time initialization token for defaultShadowColor != -1)
  {
    long long v5 = static UIConstants.defaultShadowOffset;
    swift_once();
    long long v2 = v5;
  }
  id v3 = (void *)static UIConstants.defaultShadowColor;
  *(_OWORD *)a1 = v2;
  *(void *)(a1 + 16) = 0x4008000000000000;
  *(void *)(a1 + 24) = v3;
  return v3;
}

uint64_t Shape.strokeStyle.getter()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t ShapeSecondaryProperties.shadow.getter()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t Shape.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Shape() + 52);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

PaperKit::FormContentType_optional Shape.textContentType.getter@<W0>(unsigned char *a1@<X8>)
{
  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  if (v7)
  {
    char v2 = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    char v2 = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<FormContentType>);
  CRExtensible.rawValue.getter();
  result.CGContextRef value = FormContentType.init(rawValue:)(rawValue).value;
  char v4 = v2;
  if (v2 == 66) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t ShapeSecondaryProperties.resizeBehavior.getter()
{
  return CRRegister.wrappedValue.getter();
}

BOOL Shape.isFormField.getter()
{
  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  if (v1) {
    swift_bridgeObjectRelease();
  }
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  return (static CRExtensible.== infix(_:_:)() & 1) == 0;
}

uint64_t ShapeSecondaryProperties.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v2);
  char v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v18 - v12;
  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  CRAttributedString.init(_:)();
  uint64_t v14 = type metadata accessor for ShapeSecondaryProperties();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 1, 1, v15);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v13, (uint64_t)v10, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  *(void *)&long long v18 = 0;
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v18 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v7, 1, 1, v16);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  lazy protocol witness table accessor for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  long long v18 = 0u;
  long long v19 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shadow?);
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo? and conformance <A> A?(&lazy protocol witness table cache variable for type Shadow? and conformance <A> A?, &demangling cache variable for type metadata for Shadow?, (void (*)(void))lazy protocol witness table accessor for type Shadow and conformance Shadow);
  CRRegister.init(wrappedValue:)();
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeAuxiliaryInfo?);
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo? and conformance <A> A?(&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo? and conformance <A> A?, &demangling cache variable for type metadata for ShapeAuxiliaryInfo?, (void (*)(void))lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  uint64_t result = CRRegister.init(wrappedValue:)();
  *(void *)(a1 + *(int *)(v14 + 44)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t ShapeSecondaryProperties.flags.getter()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t ShapeSecondaryProperties.flags.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t ShapeSecondaryProperties.emptyStringAttributes.getter()
{
  return ShapeSecondaryProperties.emptyStringAttributes.getter(MEMORY[0x263F32C30]);
}

uint64_t ShapeSecondaryProperties.emptyStringAttributes.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
}

uint64_t ShapeSecondaryProperties.resizeBehavior.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t type metadata accessor for ShapeSecondaryProperties()
{
  uint64_t result = type metadata singleton initialization cache for ShapeSecondaryProperties;
  if (!type metadata singleton initialization cache for ShapeSecondaryProperties) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CanvasElementAutoresizeBehavior.rawValue.getter()
{
  return *(void *)v0;
}

PaperKit::CanvasElementAutoresizeBehavior __swiftcall CanvasElementAutoresizeBehavior.init(rawValue:)(PaperKit::CanvasElementAutoresizeBehavior rawValue)
{
  v1->Swift::Int rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CanvasElementAutoresizeBehavior()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CanvasElementAutoresizeBehavior()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t lazy protocol witness table accessor for type ShapeAuxiliaryInfo? and conformance <A> A?(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CanvasElementAutoresizeBehavior(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  unint64_t v7 = lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CanvasElementAutoresizeBehavior()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CanvasElementAutoresizeBehavior()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CanvasElementAutoresizeBehavior(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  unint64_t v3 = lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  uint64_t v4 = MEMORY[0x263F33180];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

uint64_t *Shadow.init(offset:blur:color:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v9 = *result;
  if (one-time initialization token for defaultShadowOffset != -1) {
    uint64_t result = (uint64_t *)swift_once();
  }
  if (one-time initialization token for defaultShadowColor != -1) {
    uint64_t result = (uint64_t *)swift_once();
  }
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(void *)(a2 + 24) = v9;
  return result;
}

PaperKit::Shadow::CodingKeys_optional __swiftcall Shadow.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (PaperKit::Shadow::CodingKeys_optional)rawValue;
}

PaperKit::Shadow::CodingKeys_optional __swiftcall Shadow.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char v2 = v1;
  BOOL v3 = stringValue._countAndFlagsBits == 0x74657366666FLL && stringValue._object == (void *)0xE600000000000000;
  if (v3
    || (uint64_t object = stringValue._object,
        uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.CGContextRef value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 1920298082 && object == (void *)0xE400000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.CGContextRef value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else if (countAndFlagsBits == 0x726F6C6F63 && object == (void *)0xE500000000000000)
  {
    result.CGContextRef value = swift_bridgeObjectRelease();
    char v7 = 2;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.CGContextRef value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 2;
    }
    else {
      char v7 = 3;
    }
  }
  char *v2 = v7;
  return result;
}

PaperKit::Shadow::CodingKeys_optional __swiftcall Shadow.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  char v2 = 3;
  if ((unint64_t)intValue < 3) {
    char v2 = intValue;
  }
  char *v1 = v2;
  return (PaperKit::Shadow::CodingKeys_optional)intValue;
}

void *static Shadow.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static Shadow.CodingKeys.allCases.getter;
}

uint64_t Shadow.CodingKeys.intValue.getter()
{
  return *v0;
}

uint64_t Shadow.CodingKeys.rawValue.getter()
{
  return *v0;
}

uint64_t Shadow.CodingKeys.stringValue.getter()
{
  uint64_t v1 = 1920298082;
  if (*v0 != 1) {
    uint64_t v1 = 0x726F6C6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x74657366666FLL;
  }
}

PaperKit::Shadow::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Shadow.CodingKeys(Swift::Int *a1)
{
  return Shadow.CodingKeys.init(rawValue:)(*a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Shadow.CodingKeys()
{
  uint64_t v1 = 1920298082;
  if (*v0 != 1) {
    uint64_t v1 = 0x726F6C6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x74657366666FLL;
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance Shadow.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Shadow.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Shadow.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Shadow.CodingKeys(a1, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Shadow.CodingKeys and conformance Shadow.CodingKeys, (uint64_t (*)(void))lazy protocol witness table accessor for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Shadow.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Shadow.CodingKeys and conformance Shadow.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Shadow.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Shadow.CodingKeys and conformance Shadow.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void Shadow.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[2];
  BOOL v3 = (void *)v0[3];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *v0;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v1;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v2;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  type metadata accessor for CGColorRef(0);
  _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
  id v7 = v3;
  _CFObject.hash(into:)();
}

uint64_t Shadow.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Shadow.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v9 = v1[1];
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Shadow.CodingKeys and conformance Shadow.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = v8;
  uint64_t v16 = v9;
  char v14 = 0;
  type metadata accessor for CGSize(0);
  _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, type metadata accessor for CGSize);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v15 = v10;
    char v14 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v15 = v11;
    char v14 = 2;
    lazy protocol witness table accessor for type Color and conformance Color();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Shadow.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v3;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  type metadata accessor for CGColorRef(0);
  _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

void Shadow.init(from:)(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Shadow.CodingKeys>);
  uint64_t v16 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  Swift::UInt64 v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for defaultShadowOffset != -1) {
    swift_once();
  }
  if (one-time initialization token for defaultShadowColor != -1) {
    swift_once();
  }
  id v7 = (void *)static UIConstants.defaultShadowColor;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Shadow.CodingKeys and conformance Shadow.CodingKeys();
  id v8 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    type metadata accessor for CGSize(0);
    char v17 = 0;
    _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, type metadata accessor for CGSize);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    id v9 = v18;
    uint64_t v10 = v19;
    char v17 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    id v11 = v18;
    char v17 = 2;
    lazy protocol witness table accessor for type Color and conformance Color();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v4);
    id v12 = v18;

    uint64_t v13 = v15;
    *uint64_t v15 = v9;
    v13[1] = v10;
    _OWORD v13[2] = v11;
    v13[3] = v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Shadow()
{
  Swift::UInt64 v1 = *(void *)(v0 + 16);
  CGSize.hash(into:)(*(double *)v0, *(double *)(v0 + 8));
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  type metadata accessor for CGColorRef(0);
  _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Shadow()
{
  double v1 = *v0;
  double v2 = v0[1];
  Swift::UInt64 v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  CGSize.hash(into:)(v1, v2);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v3;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  type metadata accessor for CGColorRef(0);
  _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance Shadow(void *a1@<X0>, void *a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Shadow(void *a1)
{
  return Shadow.encode(to:)(a1);
}

id protocol witness for CRType.copy(renamingReferences:) in conformance Shadow@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  Swift::UInt64 v3 = *(void **)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v3;
  return v3;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Shadow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type Shadow and conformance Shadow();
  unint64_t v7 = lazy protocol witness table accessor for type Shadow and conformance Shadow();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Shadow()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Shadow()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Shadow(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Shadow and conformance Shadow();
  return MEMORY[0x270F17688](a1, v2);
}

uint64_t ShapeAuxiliaryInfo.additionalFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ShapeAuxiliaryInfo.additionalFields.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = a1;
  return result;
}

uint64_t (*ShapeAuxiliaryInfo.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

PaperKit::ShapeAuxiliaryInfo::CodingKeys_optional __swiftcall ShapeAuxiliaryInfo.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)(rawValue + 1) >= 4) {
    char v2 = 4;
  }
  else {
    char v2 = 0x2010003u >> (8 * (rawValue + 1));
  }
  char *v1 = v2;
  return (PaperKit::ShapeAuxiliaryInfo::CodingKeys_optional)rawValue;
}

PaperKit::ShapeAuxiliaryInfo::CodingKeys_optional __swiftcall ShapeAuxiliaryInfo.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char v2 = v1;
  BOOL v3 = stringValue._countAndFlagsBits == 0x746E6F4374786574 && stringValue._object == (void *)0xEF65707954746E65;
  if (v3
    || (uint64_t object = stringValue._object,
        uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.CGContextRef value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 0xD000000000000016 && object == (void *)0x800000020C860D00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.CGContextRef value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else if (countAndFlagsBits == 0xD000000000000019 && object == (void *)0x800000020C860D20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.CGContextRef value = swift_bridgeObjectRelease();
    char v7 = 2;
  }
  else if (countAndFlagsBits == 0xD000000000000010 && object == (void *)0x800000020C84FB60)
  {
    result.CGContextRef value = swift_bridgeObjectRelease();
    char v7 = 3;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.CGContextRef value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 3;
    }
    else {
      char v7 = 4;
    }
  }
  char *v2 = v7;
  return result;
}

PaperKit::ShapeAuxiliaryInfo::CodingKeys_optional __swiftcall ShapeAuxiliaryInfo.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  if ((unint64_t)(intValue + 1) >= 4) {
    char v2 = 4;
  }
  else {
    char v2 = 0x2010003u >> (8 * (intValue + 1));
  }
  char *v1 = v2;
  return (PaperKit::ShapeAuxiliaryInfo::CodingKeys_optional)intValue;
}

void *static ShapeAuxiliaryInfo.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static ShapeAuxiliaryInfo.CodingKeys.allCases.getter;
}

uint64_t ShapeAuxiliaryInfo.CodingKeys.intValue.getter()
{
  return qword_20C84BF40[*v0];
}

uint64_t ShapeAuxiliaryInfo.CodingKeys.rawValue.getter()
{
  return qword_20C84BF40[*v0];
}

unint64_t ShapeAuxiliaryInfo.CodingKeys.stringValue.getter()
{
  unint64_t result = 0x746E6F4374786574;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ShapeAuxiliaryInfo.CodingKeys(char *a1, char *a2)
{
  return qword_20C84BF40[*a1] == qword_20C84BF40[*a2];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ShapeAuxiliaryInfo.CodingKeys()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_20C84BF40[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ShapeAuxiliaryInfo.CodingKeys()
{
  Hasher._combine(_:)(qword_20C84BF40[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ShapeAuxiliaryInfo.CodingKeys()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_20C84BF40[v1]);
  return Hasher._finalize()();
}

PaperKit::ShapeAuxiliaryInfo::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ShapeAuxiliaryInfo.CodingKeys(Swift::Int *a1)
{
  return ShapeAuxiliaryInfo.CodingKeys.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ShapeAuxiliaryInfo.CodingKeys(void *a1@<X8>)
{
  *a1 = qword_20C84BF40[*v1];
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ShapeAuxiliaryInfo.CodingKeys()
{
  return qword_20C84BF40[*v0];
}

void protocol witness for static CaseIterable.allCases.getter in conformance ShapeAuxiliaryInfo.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ShapeAuxiliaryInfo.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance ShapeAuxiliaryInfo.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Shadow.CodingKeys(a1, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys, (uint64_t (*)(void))lazy protocol witness table accessor for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Shadow.CodingKeys(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v7 = a3();
  uint64_t v8 = a4();
  return MEMORY[0x270F180C8](a1, a2, v7, v8);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ShapeAuxiliaryInfo.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ShapeAuxiliaryInfo.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ShapeAuxiliaryInfo.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ShapeAuxiliaryInfo.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  char v8 = *((unsigned char *)v1 + 8);
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v16 = v1[5];
  uint64_t v17 = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v19 = v7;
  LOBYTE(v2CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v8;
  char v21 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<FormContentType>);
  lazy protocol witness table accessor for type CRExtensible<FormContentType> and conformance <> CRExtensible<A>(&lazy protocol witness table cache variable for type CRExtensible<FormContentType> and conformance <> CRExtensible<A>);
  uint64_t v12 = v18;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v12)
  {
    uint64_t v13 = v16;
    uint64_t v19 = v9;
    uint64_t v20 = v10;
    char v21 = 1;
    type metadata accessor for CGPoint(0);
    _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, type metadata accessor for CGPoint);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v19) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v19 = v13;
    char v21 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : AnyCRValue]);
    lazy protocol witness table accessor for type [Int : AnyCRValue] and conformance <> [A : B]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ShapeAuxiliaryInfo.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ShapeAuxiliaryInfo.CodingKeys>);
  uint64_t v5 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v8 = v5;
    uint64_t v20 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<FormContentType>);
    char v25 = 0;
    lazy protocol witness table accessor for type CRExtensible<FormContentType> and conformance <> CRExtensible<A>(&lazy protocol witness table cache variable for type CRExtensible<FormContentType> and conformance <> CRExtensible<A>);
    uint64_t v9 = v21;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v22;
    int v11 = v23;
    type metadata accessor for CGPoint(0);
    char v25 = 1;
    _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, type metadata accessor for CGPoint);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v24 = v11;
    uint64_t v19 = v10;
    uint64_t v12 = v22;
    uint64_t v13 = v23;
    LOBYTE(v22) = 2;
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : AnyCRValue]);
    char v25 = 3;
    lazy protocol witness table accessor for type [Int : AnyCRValue] and conformance <> [A : B]();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v9);
    uint64_t v16 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v17 = v20;
    void *v20 = v19;
    *((unsigned char *)v17 + 8) = v24;
    _OWORD v17[2] = v12;
    void v17[3] = v13;
    _OWORD v17[4] = v15;
    v17[5] = v16;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ShapeAuxiliaryInfo@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ShapeAuxiliaryInfo.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ShapeAuxiliaryInfo(void *a1)
{
  return ShapeAuxiliaryInfo.encode(to:)(a1);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance ShapeAuxiliaryInfo@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance ShapeAuxiliaryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo();
  unint64_t v7 = lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance ShapeAuxiliaryInfo()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance ShapeAuxiliaryInfo()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance ShapeAuxiliaryInfo(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo();
  return MEMORY[0x270F17688](a1, v2);
}

uint64_t ShapeSecondaryProperties.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t ShapeSecondaryProperties.text.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*ShapeSecondaryProperties.text.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t key path setter for ShapeSecondaryProperties.emptyStringAttributes : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
}

uint64_t (*ShapeSecondaryProperties.emptyStringAttributes.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t ShapeSecondaryProperties.$emptyStringAttributes.getter()
{
  return ShapeSecondaryProperties.emptyStringAttributes.getter(MEMORY[0x263F32C38]);
}

uint64_t ShapeSecondaryProperties.emptyStringAttributes.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for ShapeSecondaryProperties();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  return a1(v2);
}

uint64_t key path setter for ShapeSecondaryProperties.$emptyStringAttributes : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t ShapeSecondaryProperties.$emptyStringAttributes.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*ShapeSecondaryProperties.$emptyStringAttributes.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t key path getter for ShapeSecondaryProperties.resizeBehavior : ShapeSecondaryProperties@<X0>(void *a1@<X8>)
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for ShapeSecondaryProperties.resizeBehavior : ShapeSecondaryProperties()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*ShapeSecondaryProperties.resizeBehavior.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t ShapeSecondaryProperties.$resizeBehavior.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for ShapeSecondaryProperties.$resizeBehavior : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t ShapeSecondaryProperties.$resizeBehavior.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*ShapeSecondaryProperties.$resizeBehavior.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t key path getter for ShapeSecondaryProperties.flags : ShapeSecondaryProperties@<X0>(void *a1@<X8>)
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for ShapeSecondaryProperties.flags : ShapeSecondaryProperties()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*ShapeSecondaryProperties.flags.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t ShapeSecondaryProperties.$flags.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for ShapeSecondaryProperties.$flags : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t ShapeSecondaryProperties.$flags.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*ShapeSecondaryProperties.$flags.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t ShapeSecondaryProperties.strokeStyle.getter()
{
  return ShapeSecondaryProperties.strokeStyle.getter(MEMORY[0x263F32C30]);
}

uint64_t key path setter for ShapeSecondaryProperties.strokeStyle : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
}

uint64_t ShapeSecondaryProperties.strokeStyle.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
}

uint64_t (*ShapeSecondaryProperties.strokeStyle.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t ShapeSecondaryProperties.$strokeStyle.getter()
{
  return ShapeSecondaryProperties.strokeStyle.getter(MEMORY[0x263F32C38]);
}

uint64_t ShapeSecondaryProperties.strokeStyle.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for ShapeSecondaryProperties();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  return a1(v2);
}

uint64_t key path setter for ShapeSecondaryProperties.$strokeStyle : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t ShapeSecondaryProperties.$strokeStyle.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*ShapeSecondaryProperties.$strokeStyle.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 32);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

double key path getter for ShapeSecondaryProperties.shadow : ShapeSecondaryProperties@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  CRRegister.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for ShapeSecondaryProperties.shadow : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  type metadata accessor for ShapeSecondaryProperties();
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*ShapeSecondaryProperties.shadow.modify(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t ShapeSecondaryProperties.$shadow.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for ShapeSecondaryProperties.$shadow : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t ShapeSecondaryProperties.$shadow.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*ShapeSecondaryProperties.$shadow.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 36);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t ShapeSecondaryProperties.auxiliaryInfo.getter()
{
  return CRRegister.wrappedValue.getter();
}

double key path getter for ShapeSecondaryProperties.auxiliaryInfo : ShapeSecondaryProperties@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  *a1 = v3;
  a1[1] = v4;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

uint64_t key path setter for ShapeSecondaryProperties.auxiliaryInfo : ShapeSecondaryProperties()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t ShapeSecondaryProperties.auxiliaryInfo.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*ShapeSecondaryProperties.auxiliaryInfo.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t ShapeSecondaryProperties.$auxiliaryInfo.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for ShapeSecondaryProperties.$auxiliaryInfo : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  long long v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t ShapeSecondaryProperties.$auxiliaryInfo.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*ShapeSecondaryProperties.$auxiliaryInfo.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 40);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t ShapeSecondaryProperties.additionalFields.getter()
{
  type metadata accessor for ShapeSecondaryProperties();
  return swift_bridgeObjectRetain();
}

uint64_t ShapeSecondaryProperties.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for ShapeSecondaryProperties() + 44);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

double (*ShapeSecondaryProperties.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

double static ShapeSecondaryProperties.fields.getter@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  long long v22 = xmmword_26ACB28C0;
  *(_OWORD *)uint64_t v23 = *(_OWORD *)&qword_26ACB28D0;
  *(void *)&v23[16] = qword_26ACB28E0;
  *(_OWORD *)&v19[16] = xmmword_26ACB2880;
  long long v20 = *(_OWORD *)&qword_26ACB2890;
  *(_OWORD *)uint64_t v21 = *(_OWORD *)&qword_26ACB28A0;
  *(_OWORD *)&v21[16] = *(_OWORD *)&qword_26ACB28B0;
  *(_OWORD *)uint64_t v17 = static ShapeSecondaryProperties.fields;
  *(_OWORD *)&unsigned char v17[16] = *(_OWORD *)&qword_26ACB2850;
  long long v18 = xmmword_26ACB2860;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)byte_26ACB2870;
  uint64_t v2 = static ShapeSecondaryProperties.fields;
  uint64_t v3 = unk_26ACB2858;
  uint64_t v4 = *(void *)byte_26ACB2870;
  uint64_t v5 = *((void *)&xmmword_26ACB2880 + 1);
  uint64_t v6 = qword_26ACB28A0;
  uint64_t v7 = unk_26ACB28B8;
  uint64_t v8 = qword_26ACB28D0;
  long long v10 = *(_OWORD *)&v17[8];
  long long v11 = xmmword_26ACB2860;
  long long v12 = *(_OWORD *)&v19[8];
  long long v13 = *(_OWORD *)&qword_26ACB2890;
  long long v14 = *(_OWORD *)&v21[8];
  long long v15 = xmmword_26ACB28C0;
  long long v16 = *(_OWORD *)&v23[8];
  outlined retain of ((String, WritableKeyPath<ShapeSecondaryProperties, CRAttributedString<TextAttributeScope>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CanvasElementAutoresizeBehavior>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<ShapeAuxiliaryInfo?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CanvasElementFlags>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<Shadow?>>))((uint64_t)v17);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v10;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v11;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v12;
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v13;
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v14;
  *(void *)(a1 + 12CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v7;
  *(_OWORD *)(a1 + 128) = v15;
  *(void *)(a1 + 144) = v8;
  double result = *(double *)&v16;
  *(_OWORD *)(a1 + 152) = v16;
  return result;
}

uint64_t ShapeSecondaryProperties.textContentType.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v2 = *((unsigned char *)a1 + 8);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  swift_bridgeObjectRelease();
  if (!v8)
  {
    memset(v6, 0, sizeof(v6));
    uint64_t v7 = 0;
    unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    CRRegister.wrappedValue.setter();
  }
  uint64_t v4 = ShapeSecondaryProperties.auxiliaryInfo.modify(v6);
  if (*(void *)(v3 + 40))
  {
    *(void *)uint64_t v3 = v1;
    *(unsigned char *)(v3 + 8) = v2;
  }
  return ((uint64_t (*)(_OWORD *, void))v4)(v6, 0);
}

double protocol witness for static CRStruct_Base_7.fields.getter in conformance ShapeSecondaryProperties@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  long long v22 = xmmword_26ACB28C0;
  *(_OWORD *)uint64_t v23 = *(_OWORD *)&qword_26ACB28D0;
  *(void *)&v23[16] = qword_26ACB28E0;
  *(_OWORD *)&v19[16] = xmmword_26ACB2880;
  long long v20 = *(_OWORD *)&qword_26ACB2890;
  *(_OWORD *)uint64_t v21 = *(_OWORD *)&qword_26ACB28A0;
  *(_OWORD *)&v21[16] = *(_OWORD *)&qword_26ACB28B0;
  *(_OWORD *)uint64_t v17 = static ShapeSecondaryProperties.fields;
  *(_OWORD *)&unsigned char v17[16] = *(_OWORD *)&qword_26ACB2850;
  long long v18 = xmmword_26ACB2860;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)byte_26ACB2870;
  uint64_t v2 = static ShapeSecondaryProperties.fields;
  uint64_t v3 = unk_26ACB2858;
  uint64_t v4 = *(void *)byte_26ACB2870;
  uint64_t v5 = *((void *)&xmmword_26ACB2880 + 1);
  uint64_t v6 = qword_26ACB28A0;
  uint64_t v7 = unk_26ACB28B8;
  uint64_t v8 = qword_26ACB28D0;
  long long v10 = *(_OWORD *)&v17[8];
  long long v11 = xmmword_26ACB2860;
  long long v12 = *(_OWORD *)&v19[8];
  long long v13 = *(_OWORD *)&qword_26ACB2890;
  long long v14 = *(_OWORD *)&v21[8];
  long long v15 = xmmword_26ACB28C0;
  long long v16 = *(_OWORD *)&v23[8];
  outlined retain of ((String, WritableKeyPath<ShapeSecondaryProperties, CRAttributedString<TextAttributeScope>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CanvasElementAutoresizeBehavior>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<ShapeAuxiliaryInfo?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CanvasElementFlags>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<Shadow?>>))((uint64_t)v17);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v10;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v11;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v12;
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v13;
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v14;
  *(void *)(a1 + 12CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v7;
  *(_OWORD *)(a1 + 128) = v15;
  *(void *)(a1 + 144) = v8;
  double result = *(double *)&v16;
  *(_OWORD *)(a1 + 152) = v16;
  return result;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F17300](a1, v2);
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance ShapeSecondaryProperties()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance ShapeSecondaryProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 44);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t protocol witness for CRDT.context.getter in conformance ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance ShapeSecondaryProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F172A0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance ShapeSecondaryProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F172C8](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance ShapeSecondaryProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F172F8](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance ShapeSecondaryProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F172D0](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance ShapeSecondaryProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F172F0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance ShapeSecondaryProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F172D8](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance ShapeSecondaryProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F172B8](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F172B0](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance ShapeSecondaryProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F17298](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance ShapeSecondaryProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F17280](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance ShapeSecondaryProperties()
{
  _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return CRStruct_7.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance ShapeSecondaryProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F17288](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance ShapeSecondaryProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F172E0](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance ShapeSecondaryProperties()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance ShapeSecondaryProperties()
{
  return CRDT.init(serializedData:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance ShapeSecondaryProperties()
{
  return CRStruct_7.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance ShapeSecondaryProperties()
{
  return CRStruct_7.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2 = _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
  return MEMORY[0x270F17290](a1, v2);
}

uint64_t protocol witness for ShapeTextBox.text.getter in conformance Shape@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for ShapeTextBox.text.setter in conformance Shape(uint64_t a1)
{
  uint64_t v2 = Shape.text.modify(v8);
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v4, a1, v5);
  v2((void **)v8, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

void (*protocol witness for ShapeTextBox.text.modify in conformance Shape(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Shape.text.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for ShapeTextBox.textResizeBehavior.getter in conformance Shape()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for ShapeTextBox.textResizeBehavior.setter in conformance Shape(uint64_t *a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  uint64_t v2 = (uint64_t (*)(uint64_t *, void))CRRegister.wrappedValue.modify();
  void *v3 = v1;
  return v2(&v5, 0);
}

BOOL protocol witness for ShapeTextBox.isFixedWidth.getter in conformance Shape()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  return (v1 & 1) == 0;
}

BOOL protocol witness for ShapeTextBox.isTextBox.getter in conformance Shape()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  return v1 != 0;
}

uint64_t protocol witness for ShapeTextBox.textContentType.setter in conformance Shape(unsigned __int8 *a1)
{
  uint64_t v2 = *a1;
  char v3 = 0;
  return ShapeSecondaryProperties.textContentType.setter(&v2);
}

uint64_t closure #1 in draw #1 <A>() in static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)(void *a1, double *a2, uint64_t a3)
{
  long long v9 = *((_OWORD *)a2 + 1);
  long long v10 = *(_OWORD *)a2;
  CGFloat v5 = a2[4];
  CGFloat v6 = a2[5];
  objc_msgSend(a1, sel_layoutFragmentFrame);
  *(_OWORD *)&v11.CGFloat a = v10;
  *(_OWORD *)&v11.double c = v9;
  v11.tdouble x = v5;
  v11.tdouble y = v6;
  CGPoint v7 = CGPointApplyAffineTransform(v12, &v11);
  objc_msgSend(a1, sel_drawAtPoint_inContext_, a3, v7.x, v7.y);
  return 1;
}

void CGSize.hash(into:)(double a1, double a2)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
}

uint64_t specialized static Shadow.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2
    || *(double *)(a1 + 8) != *(double *)(a2 + 8)
    || *(double *)(a1 + 16) != *(double *)(a2 + 16))
  {
    return 0;
  }
  CGFloat v5 = *(void **)(a2 + 24);
  CGFloat v6 = *(void **)(a1 + 24);
  type metadata accessor for CGColorRef(0);
  _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
  id v7 = v6;
  id v8 = v5;
  char v9 = static _CFObject.== infix(_:_:)();

  return v9 & 1;
}

unint64_t lazy protocol witness table accessor for type Shadow.CodingKeys and conformance Shadow.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys;
  if (!lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys;
  if (!lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys;
  if (!lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys;
  if (!lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys;
  if (!lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys;
  if (!lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys;
  if (!lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
  }
  return result;
}

uint64_t specialized static ShapeAuxiliaryInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a1 + 16);
  double v2 = *(double *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  double v7 = *(double *)(a2 + 16);
  double v6 = *(double *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  char v10 = static CRExtensible.== infix(_:_:)();
  char v11 = 0;
  if ((v10 & 1) != 0 && v3 == v7 && v2 == v6 && v5 == v9) {
    char v11 = specialized static Dictionary<>.== infix(_:_:)(v4, v8);
  }
  return v11 & 1;
}

unint64_t lazy protocol witness table accessor for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CRExtensible<FormContentType> and conformance <> CRExtensible<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRExtensible<FormContentType>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of ((String, WritableKeyPath<ShapeSecondaryProperties, CRAttributedString<TextAttributeScope>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CanvasElementAutoresizeBehavior>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<ShapeAuxiliaryInfo?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CanvasElementFlags>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<Shadow?>>))(uint64_t a1)
{
  return a1;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Shadow.CodingKeys()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [Shadow.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [Shadow.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ShapeAuxiliaryInfo.CodingKeys()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [ShapeAuxiliaryInfo.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [ShapeAuxiliaryInfo.CodingKeys]);
}

uint64_t base witness table accessor for CRStruct_Base_7 in ShapeSecondaryProperties()
{
  return _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
}

uint64_t base witness table accessor for CRStruct_Base in ShapeSecondaryProperties()
{
  return _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
}

uint64_t associated type witness table accessor for CRStruct_Base_7.Type_2 : CRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<CRAttributedString<TextAttributeScope>.Attributes?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_7.Type_3 : CRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<CanvasElementAutoresizeBehavior> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
}

uint64_t associated type witness table accessor for CRStruct_Base_7.Type_4 : CRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<ShapeAuxiliaryInfo?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_7.Type_5 : CRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<CanvasElementFlags> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
}

uint64_t associated type witness table accessor for CRStruct_Base_7.Type_6 : CRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_7.Type_7 : CRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<Shadow?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Shadow?>);
}

uint64_t base witness table accessor for CRDT in ShapeSecondaryProperties()
{
  return _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
}

uint64_t base witness table accessor for CRMergeable in ShapeSecondaryProperties()
{
  return _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
}

uint64_t base witness table accessor for CRType in ShapeSecondaryProperties()
{
  return _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_7<ShapeSecondaryProperties> and conformance CRStructMergeableDelta_7<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_7<ShapeSecondaryProperties>);
}

uint64_t base witness table accessor for CRCodable in ShapeSecondaryProperties()
{
  return _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
}

uint64_t sub_20C7F0F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_4(a1, a2, a3, MEMORY[0x263F32C30]);
}

uint64_t sub_20C7F0F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_4(a1, a2, a3, MEMORY[0x263F32C38]);
}

uint64_t keypath_getTm_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for ShapeSecondaryProperties();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  return a4(v5);
}

uint64_t sub_20C7F0FC8()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C7F1024()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C7F1078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_16Tm(a1, a2, a3, MEMORY[0x263F32C30]);
}

uint64_t sub_20C7F1094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_16Tm(a1, a2, a3, MEMORY[0x263F32C38]);
}

uint64_t keypath_get_16Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for ShapeSecondaryProperties();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  return a4(v5);
}

uint64_t sub_20C7F1110()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C7F116C()
{
  return CRRegister.projectedValue.getter();
}

ValueMetadata *type metadata accessor for CanvasElementAutoresizeBehavior()
{
  return &type metadata for CanvasElementAutoresizeBehavior;
}

void destroy for Shadow(uint64_t a1)
{
}

uint64_t initializeWithCopy for Shadow(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  double v3 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  id v4 = v3;
  return a1;
}

void *assignWithCopy for Shadow(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  double v3 = (void *)a2[3];
  id v4 = (void *)a1[3];
  a1[3] = v3;
  id v5 = v3;

  return a1;
}

uint64_t assignWithTake for Shadow(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for Shadow(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Shadow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Shadow()
{
  return &type metadata for Shadow;
}

unsigned char *storeEnumTagSinglePayload for Shadow.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C7F1408);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Shadow.CodingKeys()
{
  return &type metadata for Shadow.CodingKeys;
}

uint64_t destroy for ShapeAuxiliaryInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ShapeAuxiliaryInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShapeAuxiliaryInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ShapeAuxiliaryInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeAuxiliaryInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeAuxiliaryInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShapeAuxiliaryInfo()
{
  return &type metadata for ShapeAuxiliaryInfo;
}

unsigned char *storeEnumTagSinglePayload for ShapeAuxiliaryInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C7F16B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShapeAuxiliaryInfo.CodingKeys()
{
  return &type metadata for ShapeAuxiliaryInfo.CodingKeys;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShapeSecondaryProperties(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v32 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    char v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    long long v13 = (char *)a1 + v12;
    long long v14 = (char *)a2 + v12;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = a3[7];
    uint64_t v17 = (char *)a1 + v16;
    long long v18 = (char *)a2 + v16;
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    uint64_t v20 = a3[8];
    uint64_t v21 = (char *)a1 + v20;
    long long v22 = (char *)a2 + v20;
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    uint64_t v24 = a3[9];
    char v25 = (char *)a1 + v24;
    uint64_t v26 = (char *)a2 + v24;
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
    uint64_t v28 = a3[10];
    uint64_t v29 = (char *)a1 + v28;
    dispatch_queue_t v30 = (char *)a2 + v28;
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
    *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ShapeSecondaryProperties(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = a1 + a2[8];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = a1 + a2[9];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = a1 + a2[10];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ShapeSecondaryProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
  uint64_t v27 = a3[10];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShapeSecondaryProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 24))(v24, v25, v26);
  uint64_t v27 = a3[10];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 24))(v28, v29, v30);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ShapeSecondaryProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
  uint64_t v27 = a3[10];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  return a1;
}

uint64_t assignWithTake for ShapeSecondaryProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 40))(v24, v25, v26);
  uint64_t v27 = a3[10];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 40))(v28, v29, v30);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeSecondaryProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C7F2514);
}

uint64_t sub_20C7F2514(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_16:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_15:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_16;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_15;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_15;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v12 = *(void *)(v16 - 8);
    uint64_t v13 = a3[8];
    goto LABEL_15;
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v8 = v17;
    uint64_t v12 = *(void *)(v17 - 8);
    uint64_t v13 = a3[9];
    goto LABEL_15;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a2)
  {
    uint64_t v8 = v18;
    uint64_t v12 = *(void *)(v18 - 8);
    uint64_t v13 = a3[10];
    goto LABEL_15;
  }
  unint64_t v20 = *(void *)(a1 + a3[11]);
  if (v20 >= 0xFFFFFFFF) {
    LODWORD(v2CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = -1;
  }
  return (v20 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeSecondaryProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C7F27D4);
}

uint64_t sub_20C7F27D4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
        if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
        {
          uint64_t v10 = v17;
          uint64_t v14 = *(void *)(v17 - 8);
          uint64_t v15 = a4[7];
        }
        else
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
          if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a3)
          {
            uint64_t v10 = v18;
            uint64_t v14 = *(void *)(v18 - 8);
            uint64_t v15 = a4[8];
          }
          else
          {
            uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
            if (*(_DWORD *)(*(void *)(v19 - 8) + 84) == a3)
            {
              uint64_t v10 = v19;
              uint64_t v14 = *(void *)(v19 - 8);
              uint64_t v15 = a4[9];
            }
            else
            {
              uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
              if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
              {
                *(void *)(a1 + a4[11]) = (a2 - 1);
                return result;
              }
              uint64_t v10 = result;
              uint64_t v14 = *(void *)(result - 8);
              uint64_t v15 = a4[10];
            }
          }
        }
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for ShapeSecondaryProperties()
{
  type metadata accessor for CRAttributedString<TextAttributeScope>(319, (unint64_t *)&lazy cache variable for type metadata for CRAttributedString<TextAttributeScope>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope, (uint64_t)&type metadata for TextAttributeScope, MEMORY[0x263F32EE8]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>(319, &lazy cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?, (void (*)(void))lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRAttributedString<TextAttributeScope>(319, &lazy cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>, (uint64_t (*)(void))lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior, (uint64_t)&type metadata for CanvasElementAutoresizeBehavior, MEMORY[0x263F32C50]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRAttributedString<TextAttributeScope>(319, &lazy cache variable for type metadata for CRRegister<CanvasElementFlags>, (uint64_t (*)(void))lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags, (uint64_t)&type metadata for CanvasElementFlags, MEMORY[0x263F32C50]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>(319, &lazy cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?, (void (*)(void))lazy protocol witness table accessor for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?);
          if (v4 <= 0x3F)
          {
            type metadata accessor for CRRegister<Shadow?>(319, &lazy cache variable for type metadata for CRRegister<Shadow?>, &demangling cache variable for type metadata for Shadow?, &lazy protocol witness table cache variable for type Shadow? and conformance <A> A?, (void (*)(void))lazy protocol witness table accessor for type Shadow and conformance Shadow);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CRRegister<Shadow?>(319, &lazy cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>, &demangling cache variable for type metadata for ShapeAuxiliaryInfo?, &lazy protocol witness table cache variable for type ShapeAuxiliaryInfo? and conformance <A> A?, (void (*)(void))lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
              if (v6 <= 0x3F) {
                swift_initStructMetadata();
              }
            }
          }
        }
      }
    }
  }
}

void type metadata accessor for CRAttributedString<TextAttributeScope>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>(uint64_t a1, unint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    a4();
    unint64_t v6 = type metadata accessor for CRRegister();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for CRRegister<Shadow?>(uint64_t a1, unint64_t *a2, uint64_t *a3, unint64_t *a4, void (*a5)(void))
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    lazy protocol witness table accessor for type ShapeAuxiliaryInfo? and conformance <A> A?(a4, a3, a5);
    unint64_t v9 = type metadata accessor for CRRegister();
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t type metadata accessor for ShapeTextBoxRendering()
{
  return self;
}

uint64_t _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void specialized Sequence.min(by:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = type metadata accessor for Date();
  unint64_t v5 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v55 = a1 + 64;
  char v9 = *(unsigned char *)(a1 + 32);
  uint64_t v10 = 1 << v9;
  uint64_t v11 = -1;
  if (1 << v9 < 64) {
    uint64_t v11 = ~(-1 << (1 << v9));
  }
  unint64_t v12 = v11 & v8;
  if (v12)
  {
    double v53 = (void *)a2;
    uint64_t v54 = v2;
    a2 = 0;
    unint64_t v13 = __clz(__rbit64(v12));
    unint64_t v14 = (v12 - 1) & v12;
    int64_t v56 = (unint64_t)(v10 + 63) >> 6;
    while (2)
    {
      uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
      uint64_t v16 = *v15;
      unint64_t v17 = v15[1];
      uint64_t v18 = *(void *)(a1 + 56) + 24 * v13;
      uint64_t v20 = *(void *)v18;
      uint64_t v19 = *(void **)(v18 + 8);
      int v21 = *(unsigned __int8 *)(v18 + 16);
      swift_bridgeObjectRetain();
      uint64_t v62 = v16;
      outlined copy of Data._Representation(v16, v17);
      int v60 = v21;
      outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v20, v19, v21);
      uint64_t v23 = v20;
      uint64_t v24 = v19;
      unint64_t v25 = v17;
      uint64_t v57 = a1;
      CGFloat v58 = (void (**)(char *, uint64_t))(v5 + 8);
LABEL_7:
      uint64_t v61 = v23;
      double v26 = *(double *)&v23;
      if (v14)
      {
LABEL_8:
        uint64_t v63 = (v14 - 1) & v14;
        uint64_t v64 = a2;
        unint64_t v27 = __clz(__rbit64(v14)) | (a2 << 6);
        goto LABEL_25;
      }
      while (1)
      {
        int64_t v28 = a2 + 1;
        if (__OFADD__(a2, 1)) {
          break;
        }
        unint64_t v5 = v62;
        if (v28 >= v56) {
          goto LABEL_34;
        }
        unint64_t v29 = *(void *)(v55 + 8 * v28);
        int64_t v30 = a2 + 1;
        if (!v29)
        {
          int64_t v30 = a2 + 2;
          if (a2 + 2 >= v56) {
            goto LABEL_34;
          }
          unint64_t v29 = *(void *)(v55 + 8 * v30);
          if (!v29)
          {
            int64_t v30 = a2 + 3;
            if (a2 + 3 >= v56) {
              goto LABEL_34;
            }
            unint64_t v29 = *(void *)(v55 + 8 * v30);
            if (!v29)
            {
              int64_t v30 = a2 + 4;
              if (a2 + 4 >= v56) {
                goto LABEL_34;
              }
              unint64_t v29 = *(void *)(v55 + 8 * v30);
              if (!v29)
              {
                uint64_t v31 = a2 + 5;
                if (a2 + 5 >= v56)
                {
LABEL_34:
                  swift_release();
                  char v47 = v60 & 1;
                  id v48 = v53;
                  *double v53 = v5;
                  v48[1] = v25;
                  v48[2] = v61;
                  v48[3] = v24;
                  *((unsigned char *)v48 + 32) = v47;
                  return;
                }
                unint64_t v29 = *(void *)(v55 + 8 * v31);
                if (!v29)
                {
                  while (1)
                  {
                    int64_t v30 = v31 + 1;
                    if (__OFADD__(v31, 1)) {
                      break;
                    }
                    if (v30 >= v56) {
                      goto LABEL_34;
                    }
                    unint64_t v29 = *(void *)(v55 + 8 * v30);
                    ++v31;
                    if (v29) {
                      goto LABEL_24;
                    }
                  }
                  __break(1u);
LABEL_51:
                  uint64_t v50 = 0;
                  uint64_t v51 = 6;
                  if (v56 > 6) {
                    uint64_t v51 = v56;
                  }
                  uint64_t v52 = v51 - 6;
                  while (v52 != v50)
                  {
                    unint64_t v49 = *(void *)(a1 + 112 + 8 * v50++);
                    if (v49)
                    {
                      a2 = v50 + 5;
                      goto LABEL_38;
                    }
                  }
                  goto LABEL_57;
                }
                int64_t v30 = a2 + 5;
              }
            }
          }
        }
LABEL_24:
        uint64_t v63 = (v29 - 1) & v29;
        uint64_t v64 = v30;
        unint64_t v27 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_25:
        uint64_t v32 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v27);
        uint64_t v34 = *v32;
        unint64_t v33 = v32[1];
        uint64_t v35 = *(void *)(a1 + 56) + 24 * v27;
        uint64_t v36 = *(uint64_t *)v35;
        uint64_t v37 = *(void **)(v35 + 8);
        LODWORD(v35) = *(unsigned __int8 *)(v35 + 16);
        char v68 = v35;
        int v65 = v35;
        unint64_t v66 = v33;
        if (v35)
        {
          double v38 = *(double *)&v36;
          char v39 = 1;
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v36, v37, 1);
          outlined copy of Data._Representation(v34, v33);
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v36, v37, 1);
          outlined copy of Data._Representation(v34, v33);
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v36, v37, 1);
        }
        else
        {
          outlined copy of Data._Representation(v34, v33);
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v36, v37, 0);
          outlined copy of Data._Representation(v34, v33);
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v36, v37, 0);
          static Date.distantFuture.getter();
          Date.timeIntervalSinceReferenceDate.getter();
          double v38 = v40;
          (*v58)(v7, v59);
          char v39 = v68;
        }
        outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v36, (uint64_t)v37, v39);
        char v67 = v60 & 1;
        if (v60)
        {
          char v41 = 1;
          unint64_t v5 = v25;
          uint64_t v42 = v61;
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v61, v24, 1);
          uint64_t v43 = v62;
          outlined copy of Data._Representation(v62, v5);
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v42, v24, 1);

          double v44 = v26;
        }
        else
        {
          uint64_t v43 = v62;
          outlined copy of Data._Representation(v62, v25);
          unint64_t v5 = v25;
          uint64_t v42 = v61;
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v61, v24, 0);
          static Date.distantFuture.getter();
          Date.timeIntervalSinceReferenceDate.getter();
          double v44 = v45;
          (*v58)(v7, v59);
          char v41 = v67;
        }
        outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v42, (uint64_t)v24, v41);
        outlined consume of Data._Representation(v43, v5);
        unint64_t v46 = v66;
        outlined consume of Data._Representation(v34, v66);
        unint64_t v25 = v5;
        if (v38 < v44)
        {
          outlined consume of Data._Representation(v43, v5);
          outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v61, (uint64_t)v24, v60 & 1);
          uint64_t v62 = v34;
          unint64_t v25 = v46;
          uint64_t v23 = v36;
          uint64_t v24 = v37;
          int v60 = v65;
          a1 = v57;
          unint64_t v14 = v63;
          a2 = v64;
          goto LABEL_7;
        }
        outlined consume of Data._Representation(v34, v46);
        outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v36, (uint64_t)v37, v65);
        a1 = v57;
        unint64_t v14 = v63;
        a2 = v64;
        if (v63) {
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_45:
      if (v22 >= 9)
      {
        unint64_t v49 = *(void *)(a1 + 96);
        if (v49)
        {
          a2 = 4;
        }
        else
        {
          unint64_t v49 = *(void *)(a1 + 104);
          if (!v49) {
            goto LABEL_51;
          }
          a2 = 5;
        }
LABEL_38:
        unint64_t v14 = (v49 - 1) & v49;
        unint64_t v13 = __clz(__rbit64(v49)) + (a2 << 6);
        continue;
      }
      break;
    }
  }
  else
  {
    unsigned int v22 = v9 & 0x3F;
    if (v22 > 6)
    {
      int64_t v56 = (unint64_t)(v10 + 63) >> 6;
      unint64_t v49 = *(void *)(a1 + 72);
      if (v49)
      {
        double v53 = (void *)a2;
        uint64_t v54 = v2;
        a2 = 1;
        goto LABEL_38;
      }
      if (v22 >= 8)
      {
        unint64_t v49 = *(void *)(a1 + 80);
        double v53 = (void *)a2;
        uint64_t v54 = v2;
        if (v49)
        {
          a2 = 2;
        }
        else
        {
          unint64_t v49 = *(void *)(a1 + 88);
          if (!v49) {
            goto LABEL_45;
          }
          a2 = 3;
        }
        goto LABEL_38;
      }
    }
  }
LABEL_57:
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(unsigned char *)(a2 + 32) = -1;
}

uint64_t CGImageRef.imageData(compressionQuality:asPng:)(char a1, double a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  uint64_t v11 = (void *)*MEMORY[0x263F0EFE8];
  *(void *)(inited + 32) = *MEMORY[0x263F0EFE8];
  *(void *)(inited + 64) = MEMORY[0x263F8EF38];
  *(double *)(inited + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = a2;
  id v12 = v11;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  if (a1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v23 = Mutable;
  static UTType.heic.getter();
  uint64_t v24 = UTType.identifier.getter();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  unint64_t v27 = (__CFString *)MEMORY[0x21054D080](v24, v26);
  swift_bridgeObjectRelease();
  int64_t v28 = CGImageDestinationCreateWithData(v23, v27, 1uLL, 0);

  if (!v28)
  {

    goto LABEL_12;
  }
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CGImageDestinationAddImage(v28, v3, isa);

  if (CGImageDestinationFinalize(v28))
  {
    int64_t v30 = v23;
    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

    return v21;
  }

LABEL_3:
  CFMutableDataRef v13 = CFDataCreateMutable(0, 0);
  if (!v13) {
    return 0;
  }
  unint64_t v14 = v13;
  static UTType.png.getter();
  uint64_t v15 = UTType.identifier.getter();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v18 = (__CFString *)MEMORY[0x21054D080](v15, v17);
  swift_bridgeObjectRelease();
  uint64_t v19 = CGImageDestinationCreateWithData(v14, v18, 1uLL, 0);

  if (!v19)
  {

    return 0;
  }
  CGImageDestinationAddImage(v19, v3, 0);
  CGImageDestinationFinalize(v19);
  uint64_t v20 = v14;
  uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v21;
}

uint64_t specialized AsyncCache.addCached(_:for:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t *)(v3 + 112);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v3 + 112);
  if (!*(void *)(v12 + 16))
  {
LABEL_30:
    outlined copy of Data._Representation(a2, a3);
    static Date.timeIntervalSinceReferenceDate.getter();
    uint64_t v32 = v31;
    unsigned __int8 v58 = 1;
    swift_beginAccess();
    if (v58 == 255)
    {
      id v36 = a1;
      uint64_t v37 = specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
      uint64_t v39 = v38;
      unsigned __int8 v41 = v40;
      outlined consume of Data._Representation(a2, a3);
      outlined consume of AsyncCache<Data, CGImageRef>.CacheState?(v37, v39, v41);
    }
    else
    {
      char v33 = v58 & 1;
      id v34 = a1;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v55 = *v11;
      *uint64_t v11 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, (uint64_t)a1, v33, a2, a3, isUniquelyReferenced_nonNull_native);
      *uint64_t v11 = v55;
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(a2, a3);
    }
    uint64_t result = swift_endAccess();
    if (*(void *)(*v11 + 16) >= 0xBuLL)
    {
      uint64_t v42 = swift_bridgeObjectRetain();
      specialized Sequence.min(by:)(v42, (uint64_t)v56);
      uint64_t result = swift_bridgeObjectRelease();
      if (v57 != 255)
      {
        uint64_t v43 = v56[0];
        unint64_t v44 = v56[1];
        outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v56[2], v56[3], v57 & 1);
        swift_beginAccess();
        outlined copy of Data._Representation(v43, v44);
        uint64_t v45 = specialized Dictionary._Variant.removeValue(forKey:)(v43, v44);
        uint64_t v47 = v46;
        unsigned __int8 v49 = v48;
        swift_endAccess();
        outlined consume of Data._Representation(v43, v44);
        outlined consume of AsyncCache<Data, CGImageRef>.CacheState?(v45, v47, v49);
        return outlined consume of Data._Representation(v43, v44);
      }
    }
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  uint64_t v52 = a2;
  uint64_t v15 = *(void *)(v12 + 56) + 24 * v13;
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = *(void **)(v15 + 8);
  char v18 = *(unsigned char *)(v15 + 16);
  outlined copy of AsyncCache<Data, CGImageRef>.CacheState(*(void *)v15, v17, v18);
  uint64_t result = swift_bridgeObjectRelease();
  if (v18)
  {
    outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v16, (uint64_t)v17, 1);
LABEL_29:
    a2 = v52;
    goto LABEL_30;
  }
  unint64_t v50 = a3;
  uint64_t v51 = v11;
  int64_t v20 = 0;
  uint64_t v21 = *(void *)(v16 + 64);
  uint64_t v53 = v16 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v21;
  int64_t v54 = (unint64_t)(v22 + 63) >> 6;
  while (1)
  {
    if (v24)
    {
      unint64_t v25 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v26 = v25 | (v20 << 6);
      goto LABEL_10;
    }
    int64_t v28 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v28 >= v54) {
      goto LABEL_28;
    }
    unint64_t v29 = *(void *)(v53 + 8 * v28);
    ++v20;
    if (!v29)
    {
      int64_t v20 = v28 + 1;
      if (v28 + 1 >= v54) {
        goto LABEL_28;
      }
      unint64_t v29 = *(void *)(v53 + 8 * v20);
      if (!v29)
      {
        int64_t v20 = v28 + 2;
        if (v28 + 2 >= v54) {
          goto LABEL_28;
        }
        unint64_t v29 = *(void *)(v53 + 8 * v20);
        if (!v29)
        {
          int64_t v20 = v28 + 3;
          if (v28 + 3 >= v54) {
            goto LABEL_28;
          }
          unint64_t v29 = *(void *)(v53 + 8 * v20);
          if (!v29) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v24 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v20 << 6);
LABEL_10:
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, *(void *)(v16 + 56) + *(void *)(v8 + 72) * v26, v7);
    v56[0] = a1;
    id v27 = a1;
    CheckedContinuation.resume(returning:)();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  int64_t v30 = v28 + 4;
  if (v30 >= v54)
  {
LABEL_28:
    swift_release();
    a3 = v50;
    uint64_t v11 = v51;
    goto LABEL_29;
  }
  unint64_t v29 = *(void *)(v53 + 8 * v30);
  if (v29)
  {
    int64_t v20 = v30;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v20 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v20 >= v54) {
      goto LABEL_28;
    }
    unint64_t v29 = *(void *)(v53 + 8 * v20);
    ++v30;
    if (v29) {
      goto LABEL_27;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t ImageThumbnailManager.receiveThumbnailMessage(_:)(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return MEMORY[0x270FA2498](ImageThumbnailManager.receiveThumbnailMessage(_:), v2, 0);
}

uint64_t ImageThumbnailManager.receiveThumbnailMessage(_:)()
{
  unint64_t v2 = *(void *)(v0 + 96);
  unint64_t v3 = v2 >> 62;
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      int v5 = *(_DWORD *)(v0 + 88);
      int v6 = *(_DWORD *)(v0 + 92);
      BOOL v7 = __OFSUB__(v6, v5);
      int v8 = v6 - v5;
      if (v7) {
        goto LABEL_62;
      }
      uint64_t v4 = v8;
      goto LABEL_6;
    case 2uLL:
      uint64_t v9 = *(void *)(*(void *)(v0 + 88) + 16);
      uint64_t v10 = *(void *)(*(void *)(v0 + 88) + 24);
      uint64_t v4 = v10 - v9;
      if (!__OFSUB__(v10, v9)) {
        goto LABEL_6;
      }
      goto LABEL_63;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v4 = BYTE6(v2);
LABEL_6:
      if (one-time initialization token for magicNumber != -1) {
        swift_once();
      }
      uint64_t v1 = static ImageThumbnailManager.magicNumber;
      unint64_t v11 = unk_2676D0510;
      uint64_t v12 = 0;
      switch(unk_2676D0510 >> 62)
      {
        case 1:
          LODWORD(v12) = HIDWORD(static ImageThumbnailManager.magicNumber) - static ImageThumbnailManager.magicNumber;
          if (__OFSUB__(HIDWORD(static ImageThumbnailManager.magicNumber), static ImageThumbnailManager.magicNumber))
          {
            goto LABEL_64;
          }
          uint64_t v12 = (int)v12;
          break;
        case 2:
          uint64_t v14 = *(void *)(static ImageThumbnailManager.magicNumber + 16);
          uint64_t v13 = *(void *)(static ImageThumbnailManager.magicNumber + 24);
          BOOL v7 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (v7) {
            goto LABEL_65;
          }
          break;
        case 3:
          break;
        default:
          uint64_t v12 = byte_2676D0516[0];
          break;
      }
      BOOL v7 = __OFADD__(v12, 32);
      uint64_t v15 = v12 + 32;
      if (v7)
      {
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        swift_once();
        goto LABEL_42;
      }
      int v65 = (size_t *)(v0 + 64);
      unint64_t v66 = (size_t *)(v0 + 72);
      if (v4 >= v15)
      {
        switch(unk_2676D0510 >> 62)
        {
          case 1:
            if (__OFSUB__(HIDWORD(static ImageThumbnailManager.magicNumber), static ImageThumbnailManager.magicNumber))
            {
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
LABEL_74:
              __break(1u);
LABEL_75:
              __break(1u);
LABEL_76:
              __break(1u);
LABEL_77:
              __break(1u);
              JUMPOUT(0x20C7F4620);
            }
            uint64_t v16 = HIDWORD(static ImageThumbnailManager.magicNumber) - (int)static ImageThumbnailManager.magicNumber;
LABEL_19:
            if (v16 < 0) {
              goto LABEL_61;
            }
LABEL_20:
            uint64_t v19 = v0 + 88;
            uint64_t v20 = Data._Representation.subscript.getter();
            unint64_t v22 = v21;
            uint64_t v1 = specialized static Data.== infix(_:_:)(v20, v21, v1, v11);
            outlined consume of Data._Representation(v20, v22);
            if ((v1 & 1) == 0) {
              goto LABEL_46;
            }
            uint64_t v24 = static ImageThumbnailManager.magicNumber;
            unsigned __int8 v23 = byte_2676D0516[0];
            uint64_t v4 = unk_2676D0510 >> 62;
            uint64_t v25 = 0;
            switch(unk_2676D0510 >> 62)
            {
              case 1:
                if (__OFSUB__(HIDWORD(static ImageThumbnailManager.magicNumber), static ImageThumbnailManager.magicNumber))
                {
                  goto LABEL_73;
                }
                uint64_t v25 = HIDWORD(static ImageThumbnailManager.magicNumber) - (int)static ImageThumbnailManager.magicNumber;
LABEL_26:
                if (__OFADD__(v25, 32)) {
                  goto LABEL_66;
                }
                if (v25 + 32 < v25) {
                  goto LABEL_67;
                }
                uint64_t v64 = (void *)(v0 + 80);
                uint64_t v28 = Data._Representation.subscript.getter();
                uint64_t v30 = specialized Data.init<A>(_:)(v28, v29);
                *(void *)(v0 + 112) = v30;
                *(void *)(v0 + 12CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v31;
                uint64_t v32 = v30;
                unint64_t v33 = v31;
                uint64_t v34 = 0;
                switch((int)v4)
                {
                  case 1:
                    LODWORD(v34) = HIDWORD(v24) - v24;
                    if (__OFSUB__(HIDWORD(v24), v24)) {
                      goto LABEL_75;
                    }
                    uint64_t v34 = (int)v34;
LABEL_33:
                    uint64_t v37 = v34 + 32;
                    if (__OFADD__(v34, 32)) {
                      goto LABEL_68;
                    }
                    uint64_t v38 = 0;
                    uint64_t v39 = 0;
                    switch((int)v3)
                    {
                      case 1:
                        uint64_t v39 = (int)*(void *)v19;
                        uint64_t v38 = *(uint64_t *)v19 >> 32;
                        break;
                      case 2:
                        uint64_t v39 = *(void *)(*(void *)v19 + 16);
                        uint64_t v38 = *(void *)(*(void *)v19 + 24);
                        break;
                      case 3:
                        break;
                      default:
                        uint64_t v39 = 0;
                        uint64_t v38 = *(unsigned __int8 *)(v0 + 102);
                        break;
                    }
                    if (v38 < v37 || v38 < v39) {
                      goto LABEL_69;
                    }
                    uint64_t v40 = Data._Representation.subscript.getter();
                    uint64_t v1 = specialized Data.init<A>(_:)(v40, v41);
                    unint64_t v3 = v42;
                    *(void *)(v0 + 128) = v1;
                    *(void *)(v0 + 136) = v42;
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Bool)>);
                    initeCGFloat d = swift_initStackObject();
                    *(_OWORD *)(inited + 16) = xmmword_20C832C20;
                    unint64_t v44 = (void *)*MEMORY[0x263F0F600];
                    *(void *)(inited + 32) = *MEMORY[0x263F0F600];
                    *(unsigned char *)(inited + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0;
                    id v45 = v44;
                    specialized Dictionary.init(dictionaryLiteral:)(inited);
                    type metadata accessor for CFStringRef(0);
                    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
                    v46.super.isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
                    *(NSDictionary *)(v0 + 144) = v46;
                    swift_bridgeObjectRelease();
                    isCGFloat a = Data._bridgeToObjectiveC()().super.isa;
                    CGImageSourceRef v48 = CGImageSourceCreateWithData(isa, v46.super.isa);
                    *(void *)(v0 + 152) = v48;

                    CGImageRef v49 = specialized static CRAsset.loadImageSrc(_:digest:maxDimensionInPixels:isHDRAllowed:)(v48, 0, 0xF000000000000000, 1024, 0);
                    *(void *)(v0 + 16CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v49;
                    if (!v49)
                    {
                      outlined consume of Data._Representation(v1, v3);

                      outlined consume of Data._Representation(v32, v33);
                      goto LABEL_46;
                    }
                    uint64_t v4 = (uint64_t)v49;
                    if (one-time initialization token for logger != -1) {
                      goto LABEL_70;
                    }
                    break;
                  case 2:
                    uint64_t v36 = *(void *)(v24 + 16);
                    uint64_t v35 = *(void *)(v24 + 24);
                    BOOL v7 = __OFSUB__(v35, v36);
                    uint64_t v34 = v35 - v36;
                    if (!v7) {
                      goto LABEL_33;
                    }
                    goto LABEL_76;
                  case 3:
                    goto LABEL_33;
                  default:
                    uint64_t v34 = v23;
                    goto LABEL_33;
                }
                break;
              case 2:
                uint64_t v27 = *(void *)(static ImageThumbnailManager.magicNumber + 16);
                uint64_t v26 = *(void *)(static ImageThumbnailManager.magicNumber + 24);
                uint64_t v25 = v26 - v27;
                if (!__OFSUB__(v26, v27)) {
                  goto LABEL_26;
                }
                goto LABEL_74;
              case 3:
                goto LABEL_26;
              default:
                uint64_t v25 = byte_2676D0516[0];
                goto LABEL_26;
            }
            break;
          case 2:
            uint64_t v18 = *(void *)(static ImageThumbnailManager.magicNumber + 16);
            uint64_t v17 = *(void *)(static ImageThumbnailManager.magicNumber + 24);
            uint64_t v16 = v17 - v18;
            if (!__OFSUB__(v17, v18)) {
              goto LABEL_19;
            }
            goto LABEL_72;
          default:
            goto LABEL_20;
        }
LABEL_42:
        uint64_t v50 = type metadata accessor for Logger();
        __swift_project_value_buffer(v50, (uint64_t)logger);
        uint64_t v51 = (CGImage *)(id)v4;
        outlined copy of Data._Representation(v1, v3);
        outlined copy of Data._Representation(v1, v3);
        uint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v52, v53))
        {
          os_log_type_t v63 = v53;
          uint64_t v54 = swift_slowAlloc();
          *(_DWORD *)uint64_t v54 = 134218496;
          *int v65 = CGImageGetWidth(v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v54 + 12) = 2048;
          size_t Height = CGImageGetHeight(v51);

          *unint64_t v66 = Height;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v54 + 22) = 2048;
          switch(v3 >> 62)
          {
            case 1uLL:
              outlined consume of Data._Representation(v1, v3);
              LODWORD(v56) = HIDWORD(v1) - v1;
              if (__OFSUB__(HIDWORD(v1), v1)) {
                goto LABEL_77;
              }
              uint64_t v56 = (int)v56;
              break;
            case 2uLL:
              uint64_t v60 = *(void *)(v1 + 16);
              uint64_t v59 = *(void *)(v1 + 24);
              outlined consume of Data._Representation(v1, v3);
              uint64_t v56 = v59 - v60;
              if (!__OFSUB__(v59, v60)) {
                break;
              }
              __break(1u);
LABEL_55:
              outlined consume of Data._Representation(v1, v3);
              uint64_t v56 = 0;
              break;
            case 3uLL:
              goto LABEL_55;
            default:
              outlined consume of Data._Representation(v1, v3);
              uint64_t v56 = BYTE6(v3);
              break;
          }
          *uint64_t v64 = v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          outlined consume of Data._Representation(v1, v3);
          _os_log_impl(&dword_20C2D7000, v52, v63, "Received thumbnail %ldx%ld size:%ld", (uint8_t *)v54, 0x20u);
          MEMORY[0x210550270](v54, -1, -1);
        }
        else
        {
          outlined consume of Data._Representation(v1, v3);

          outlined consume of Data._Representation(v1, v3);
        }
        uint64_t v61 = *(void *)(v0 + 104);

        uint64_t v62 = *(void *)(v61 + 112);
        *(void *)(v0 + 168) = v62;
        return MEMORY[0x270FA2498](ImageThumbnailManager.receiveThumbnailMessage(_:), v62, 0);
      }
LABEL_46:
      unsigned __int8 v57 = *(uint64_t (**)(void))(v0 + 8);
      return v57();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 104);
  specialized AsyncCache.addCached(_:for:)(*(void **)(v0 + 160), *(void *)(v0 + 112), *(void *)(v0 + 120));
  return MEMORY[0x270FA2498](ImageThumbnailManager.receiveThumbnailMessage(_:), v1, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  unint64_t v2 = (void *)v0[19];
  uint64_t v1 = (void *)v0[20];
  unint64_t v3 = (void *)v0[18];
  uint64_t v4 = v0[15];
  int v5 = v0[14];
  outlined consume of Data._Representation(v0[16], v0[17]);

  outlined consume of Data._Representation(v5, v4);
  int v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t ImageThumbnailManager.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t type metadata accessor for ImageThumbnailManager()
{
  return self;
}

uint64_t CGImageRef.jpegData(compressionQuality:)(double a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UTType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  BOOL v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v33 - v9;
  unint64_t v11 = (id)CGImageGetUTType(v2);
  if (v11)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

    uint64_t v12 = v34;
    unint64_t v11 = v35;
  }
  else
  {
    uint64_t v12 = 0;
  }
  static UTType.jpeg.getter();
  uint64_t v13 = UTType.identifier.getter();
  uint64_t v15 = v14;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v10, v4);
  if (v11)
  {
    if (v12 == v13 && v11 == v15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18) {
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (CGImageHasAlpha()) {
    return 0;
  }
  if (CGImageGetMask()) {
    return 0;
  }
  CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable) {
    return 0;
  }
  uint64_t v20 = Mutable;
  static UTType.jpeg.getter();
  uint64_t v21 = UTType.identifier.getter();
  uint64_t v23 = v22;
  v16(v7, v4);
  uint64_t v24 = (__CFString *)MEMORY[0x21054D080](v21, v23);
  swift_bridgeObjectRelease();
  uint64_t v25 = CGImageDestinationCreateWithData(v20, v24, 1uLL, 0);

  if (!v25)
  {

    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  uint64_t v27 = (void *)*MEMORY[0x263F0EFE8];
  *(void *)(inited + 32) = *MEMORY[0x263F0EFE8];
  *(void *)(inited + 64) = MEMORY[0x263F8D538];
  *(double *)(inited + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = a1;
  id v28 = v27;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CGImageDestinationAddImage(v25, v2, isa);

  CGImageDestinationFinalize(v25);
  uint64_t v30 = v20;
  uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v31;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      uint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size_0(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

uint64_t specialized Data.init(capacity:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        unint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t specialized static ImageThumbnailManager.generateThumbnailMessage(from:)(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v2 = type metadata accessor for CRAsset();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  unint64_t v3 = (void *)swift_task_alloc();
  v1[9] = v3;
  void *v3 = v1;
  v3[1] = specialized static ImageThumbnailManager.generateThumbnailMessage(from:);
  return CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(1024, 0, 0);
}

{
  uint64_t v1;
  uint64_t v3;

  *(void *)(*(void *)v1 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized static ImageThumbnailManager.generateThumbnailMessage(from:), 0, 0);
}

uint64_t specialized static ImageThumbnailManager.generateThumbnailMessage(from:)()
{
  unint64_t v1 = (void *)v0[10];
  if (!v1) {
    goto LABEL_4;
  }
  uint64_t v2 = CGImageRef.imageData(compressionQuality:asPng:)(0, 0.2);
  if (v3 >> 60 == 15)
  {

LABEL_4:
    uint64_t v4 = 0;
    unint64_t v5 = 0xF000000000000000;
    goto LABEL_37;
  }
  uint64_t v6 = v2;
  unint64_t v7 = v3;
  (*(void (**)(void, void, void))(v0[7] + 16))(v0[8], v0[5], v0[6]);
  unint64_t v8 = CRAsset.digest.getter();
  uint64_t v10 = v8;
  unint64_t v11 = v9;
  switch(v9 >> 62)
  {
    case 1uLL:
      unint64_t v12 = HIDWORD(v8);
      outlined consume of Data._Representation(v8, v9);
      if (__OFSUB__(v12, v10))
      {
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        JUMPOUT(0x20C7F54E0);
      }
      unint64_t v11 = (int)v12 - (int)v10;
      break;
    case 2uLL:
      uint64_t v14 = *(void *)(v8 + 16);
      uint64_t v13 = *(void *)(v8 + 24);
      outlined consume of Data._Representation(v8, v9);
      unint64_t v11 = v13 - v14;
      if (__OFSUB__(v13, v14))
      {
        __break(1u);
        goto LABEL_12;
      }
      break;
    case 3uLL:
LABEL_12:
      outlined consume of Data._Representation(v10, v11);
      unint64_t v11 = 0;
      break;
    default:
      outlined consume of Data._Representation(v8, v9);
      unint64_t v11 = BYTE6(v11);
      break;
  }
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  if (v11 == 32)
  {
    if (one-time initialization token for magicNumber == -1) {
      goto LABEL_15;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_15:
  uint64_t v15 = 0;
  switch(unk_2676D0510 >> 62)
  {
    case 1:
      LODWORD(v15) = HIDWORD(static ImageThumbnailManager.magicNumber) - static ImageThumbnailManager.magicNumber;
      if (__OFSUB__(HIDWORD(static ImageThumbnailManager.magicNumber), static ImageThumbnailManager.magicNumber))
      {
        goto LABEL_46;
      }
      uint64_t v15 = (int)v15;
LABEL_20:
      BOOL v18 = __OFADD__(v15, 32);
      uint64_t v19 = v15 + 32;
      if (!v18)
      {
        uint64_t v20 = 0;
        switch(v7 >> 62)
        {
          case 1uLL:
            LODWORD(v2CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = HIDWORD(v6) - v6;
            if (__OFSUB__(HIDWORD(v6), v6)) {
              goto LABEL_48;
            }
            uint64_t v20 = (int)v20;
LABEL_26:
            if (__OFADD__(v19, v20)) {
              goto LABEL_43;
            }
            unint64_t v38 = v7 >> 62;
            uint64_t v39 = specialized Data.init(capacity:)(v19 + v20);
            unint64_t v40 = v23;
            Data.append(_:)();
            uint64_t v24 = CRAsset.digest.getter();
            unint64_t v26 = v25;
            Data.append(_:)();
            outlined consume of Data._Representation(v24, v26);
            Data.append(_:)();
            if (one-time initialization token for logger == -1) {
              goto LABEL_28;
            }
            goto LABEL_44;
          case 2uLL:
            uint64_t v22 = *(void *)(v6 + 16);
            uint64_t v21 = *(void *)(v6 + 24);
            BOOL v18 = __OFSUB__(v21, v22);
            uint64_t v20 = v21 - v22;
            if (!v18) {
              goto LABEL_26;
            }
            goto LABEL_49;
          case 3uLL:
            goto LABEL_26;
          default:
            uint64_t v20 = BYTE6(v7);
            goto LABEL_26;
        }
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      swift_once();
LABEL_28:
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)logger);
      id v28 = v1;
      outlined copy of Data?(v6, v7);
      unint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 134218496;
        v0[2] = CGImageGetWidth(v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v31 + 12) = 2048;
        v0[3] = CGImageGetHeight(v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v31 + 22) = 2048;
        uint64_t v32 = 0;
        switch((int)v38)
        {
          case 1:
            LODWORD(v32) = HIDWORD(v6) - v6;
            if (__OFSUB__(HIDWORD(v6), v6)) {
              goto LABEL_50;
            }
            uint64_t v32 = (int)v32;
LABEL_35:
            v0[4] = v32;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            outlined consume of Data?(v6, v7);
            _os_log_impl(&dword_20C2D7000, v29, v30, "Sent thumbnail %ldx%ld size:%ld", (uint8_t *)v31, 0x20u);
            MEMORY[0x210550270](v31, -1, -1);
            uint64_t v33 = v29;
            break;
          case 2:
            uint64_t v35 = *(void *)(v6 + 16);
            uint64_t v34 = *(void *)(v6 + 24);
            BOOL v18 = __OFSUB__(v34, v35);
            uint64_t v32 = v34 - v35;
            if (!v18) {
              goto LABEL_35;
            }
            goto LABEL_51;
          case 3:
            goto LABEL_35;
          default:
            uint64_t v32 = BYTE6(v7);
            goto LABEL_35;
        }
      }
      else
      {
        outlined consume of Data?(v6, v7);

        uint64_t v33 = v28;
        id v28 = (CGImage *)v29;
      }

      outlined consume of Data?(v6, v7);
      uint64_t v4 = v39;
      unint64_t v5 = v40;
      break;
    case 2:
      uint64_t v17 = *(void *)(static ImageThumbnailManager.magicNumber + 16);
      uint64_t v16 = *(void *)(static ImageThumbnailManager.magicNumber + 24);
      BOOL v18 = __OFSUB__(v16, v17);
      uint64_t v15 = v16 - v17;
      if (!v18) {
        goto LABEL_20;
      }
      goto LABEL_47;
    case 3:
      goto LABEL_20;
    default:
      uint64_t v15 = unk_2676D0516;
      goto LABEL_20;
  }
LABEL_37:
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v36(v4, v5);
}

ValueMetadata *type metadata accessor for RoundedCorner()
{
  return &type metadata for RoundedCorner;
}

unint64_t lazy protocol witness table accessor for type _ShapeView<RoundedCorner, ForegroundStyle> and conformance _ShapeView<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeView<RoundedCorner, ForegroundStyle> and conformance _ShapeView<A, B>;
  if (!lazy protocol witness table cache variable for type _ShapeView<RoundedCorner, ForegroundStyle> and conformance _ShapeView<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ShapeView<RoundedCorner, ForegroundStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeView<RoundedCorner, ForegroundStyle> and conformance _ShapeView<A, B>);
  }
  return result;
}

double protocol witness for Shape.path(in:) in conformance RoundedCorner@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  id v7 = objc_msgSend(self, sel_bezierPathWithRoundedRect_byRoundingCorners_cornerRadii_, *((void *)v5 + 1), a2, a3, a4, a5, *v5, *v5);
  id v8 = objc_msgSend(v7, sel_CGPath);
  Path.init(_:)();

  double result = *(double *)&v10;
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v11;
  *(unsigned char *)(a1 + 32) = v12;
  return result;
}

uint64_t protocol witness for static Shape.role.getter in conformance RoundedCorner()
{
  return MEMORY[0x270F047E8]();
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance RoundedCorner()
{
  return MEMORY[0x270F047D8]();
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance RoundedCorner()
{
  return MEMORY[0x270F047C8]();
}

void (*protocol witness for Animatable.animatableData.modify in conformance RoundedCorner(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance RoundedCorner()
{
  return MEMORY[0x270EFEBB8]();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance RoundedCorner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type RoundedCorner and conformance RoundedCorner();
  return MEMORY[0x270F04808](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance RoundedCorner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type RoundedCorner and conformance RoundedCorner();
  return MEMORY[0x270F047D0](a1, a2, a3, v6);
}

uint64_t protocol witness for View.body.getter in conformance RoundedCorner(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RoundedCorner and conformance RoundedCorner();
  return MEMORY[0x270F047E0](a1, v2);
}

unint64_t lazy protocol witness table accessor for type EmptyAnimatableData and conformance EmptyAnimatableData()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData;
  if (!lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RoundedCorner and conformance RoundedCorner()
{
  unint64_t result = lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner;
  if (!lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner;
  if (!lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner;
  if (!lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner);
  }
  return result;
}

uint64_t dispatch thunk of MagicGenerativePlaygroundContainer.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of MagicGenerativePlaygroundContainer.magicGenerativePlaygroundContainerStateObserver.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of MagicGenerativePlaygroundContainer.magicGenerativePlaygroundContainerStateObserver.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of MagicGenerativePlaygroundContainer.magicGenerativePlaygroundContainerStateObserver.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of MagicGenerativePlaygroundContainer.magicGenerativePlaygroundContainerState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of MagicGenerativePlaygroundContainer.magicGenerativePlaygroundUndoManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of MagicGenerativePlaygroundContainerStateObserver.magicGenerativePlaygroundContainer(_:stateDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t *initializeBufferWithCopyOfBuffer for MiniStyleButtons(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_weakCopyInit();
  }
  return a1;
}

uint64_t destroy for MiniStyleButtons(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_weakDestroy();
}

uint64_t initializeWithCopy for MiniStyleButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  swift_weakCopyInit();
  return a1;
}

uint64_t assignWithCopy for MiniStyleButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  swift_weakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for MiniStyleButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  swift_weakTakeInit();
  return a1;
}

uint64_t assignWithTake for MiniStyleButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniStyleButtons(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C7F5D98);
}

uint64_t sub_20C7F5D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MiniStyleButtons(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C7F5E1C);
}

uint64_t sub_20C7F5E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MiniStyleButtons()
{
  uint64_t result = type metadata singleton initialization cache for MiniStyleButtons;
  if (!type metadata singleton initialization cache for MiniStyleButtons) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for MiniStyleButtons()
{
  type metadata accessor for Bindable<MiniMenuState>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t associated type witness table accessor for View.Body : View in MiniStyleButtons()
{
  return swift_getOpaqueTypeConformance2();
}

void *MiniStyleButtons.body.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  id v70 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  *(void *)&long long v88 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v8 = (char *)&v66 - v7;
  Bindable.wrappedValue.getter();
  uint64_t v9 = *(void *)v93;
  swift_getKeyPath();
  *(void *)uint64_t v93 = v9;
  unint64_t v10 = lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v11 = *(void *)(v9 + 40);
  swift_release();
  uint64_t v72 = v8;
  uint64_t v73 = v4;
  if (v11)
  {
    Bindable.projectedValue.getter();
    swift_getKeyPath();
    Bindable<A>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
    long long v86 = *(_OWORD *)v93;
    uint64_t v85 = *(void *)&v93[16];
    *(void *)&long long v87 = v2;
    char v12 = v93[24];
    uint64_t KeyPath = swift_getKeyPath();
    *(void *)&v94[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGColorRef?);
    State.init(wrappedValue:)();
    uint64_t v14 = v97;
    unint64_t v15 = v10;
    uint64_t v16 = *((void *)&v97 + 1);
    LOBYTE(v94[0]) = 0;
    State.init(wrappedValue:)();
    char v17 = v97;
    uint64_t v18 = *((void *)&v97 + 1);
    LOBYTE(v94[0]) = 0;
    State.init(wrappedValue:)();
    char v19 = v97;
    LOBYTE(v97) = 0;
    *(void *)uint64_t v93 = KeyPath;
    v93[8] = 0;
    *(_OWORD *)&v93[16] = v86;
    *(void *)&v93[32] = v85;
    v93[40] = v12;
    *(void *)&v93[48] = v14;
    *(void *)&v93[56] = v16;
    unint64_t v10 = v15;
    memset(&v93[64], 0, 26);
    v93[96] = v17;
    id v8 = v72;
    *(void *)&v93[104] = v18;
    v93[112] = v19;
    *(void *)&v93[120] = *((void *)&v97 + 1);
    UnknownCanvasElementView.flags.modify(v93, v20);
  }
  else
  {
    _s8PaperKit15MiniColorButtonVSgWOi0_(v93);
  }
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v93, (uint64_t)v116, &demangling cache variable for type metadata for MiniColorButton?);
  Bindable.wrappedValue.getter();
  uint64_t v21 = *(void *)v93;
  swift_getKeyPath();
  *(void *)uint64_t v93 = v21;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v22 = *(void *)(v21 + 40);
  swift_release();
  if ((v22 & 2) != 0)
  {
    Bindable.wrappedValue.getter();
    uint64_t v23 = *(void *)v93;
    swift_getKeyPath();
    *(void *)uint64_t v93 = v23;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v24 = *(unsigned __int8 *)(v23 + 73);
    swift_release();
    unint64_t v25 = (void (**)(char *, uint64_t))(v73 + 8);
    unint64_t v71 = v10;
    Bindable.projectedValue.getter();
    swift_getKeyPath();
    Bindable<A>.subscript.getter();
    swift_release();
    if (v24 == 1)
    {
      unint64_t v26 = *v25;
      (*v25)(v8, v3);
      long long v87 = *(_OWORD *)v93;
      *(void *)&long long v86 = *(void *)&v93[16];
      LODWORD(v85) = v93[24];
      uint64_t v27 = (char *)v88;
      Bindable.projectedValue.getter();
      swift_getKeyPath();
      Bindable<A>.subscript.getter();
      swift_release();
      v26(v27, v3);
      long long v88 = v97;
      uint64_t v84 = v98;
      LODWORD(v83) = BYTE8(v98);
      Bindable.wrappedValue.getter();
      uint64_t v28 = *(void *)&v94[0];
      swift_getKeyPath();
      *(void *)&v94[0] = v28;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      char v29 = *(unsigned char *)(v28 + 89);
      swift_release();
      uint64_t v30 = swift_getKeyPath();
      v92[0] = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGColorRef?);
      State.init(wrappedValue:)();
      long long v31 = v94[0];
      LOBYTE(v92[0]) = 0;
      State.init(wrappedValue:)();
      char v32 = v94[0];
      uint64_t v33 = *((void *)&v94[0] + 1);
      LOBYTE(v92[0]) = 0;
      State.init(wrappedValue:)();
      LOBYTE(v92[0]) = 0;
      *(void *)&long long v97 = v30;
      BYTE8(v97) = 0;
      long long v98 = v87;
      uint64_t v99 = v86;
      char v100 = v85;
      long long v101 = v31;
      long long v102 = v88;
      uint64_t v103 = v84;
      LOBYTE(v104) = v83;
      HIBYTE(v104) = v29;
      char v105 = v32;
      uint64_t v106 = v33;
      char v107 = v94[0];
      uint64_t v108 = *((void *)&v94[0] + 1);
      _s7SwiftUI19_ConditionalContentV7StorageOy8PaperKit15MiniColorButtonVAH_GWOi_((uint64_t)&v97);
    }
    else
    {
      (*v25)(v8, v3);
      long long v88 = *(_OWORD *)v93;
      *(void *)&long long v87 = *(void *)&v93[16];
      char v34 = v93[24];
      uint64_t v35 = swift_getKeyPath();
      *(void *)&v94[0] = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGColorRef?);
      State.init(wrappedValue:)();
      long long v36 = v97;
      LOBYTE(v94[0]) = 0;
      State.init(wrappedValue:)();
      char v37 = v97;
      uint64_t v38 = *((void *)&v97 + 1);
      LOBYTE(v94[0]) = 0;
      State.init(wrappedValue:)();
      char v39 = v97;
      uint64_t v40 = *((void *)&v97 + 1);
      LOBYTE(v92[0]) = 0;
      *(void *)&long long v97 = v35;
      BYTE8(v97) = 0;
      long long v98 = v88;
      uint64_t v99 = v87;
      char v100 = v34;
      long long v101 = v36;
      uint64_t v103 = 0;
      long long v102 = 0uLL;
      __int16 v104 = 0;
      char v105 = v37;
      uint64_t v106 = v38;
      char v107 = v39;
      uint64_t v108 = v40;
      _s7SwiftUI19_ConditionalContentV7StorageOy8PaperKit15MiniColorButtonVAH_GWOi0_((uint64_t)&v97);
    }
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v97, (uint64_t)v94, &demangling cache variable for type metadata for _ConditionalContent<MiniColorButton, MiniColorButton>.Storage);
    lazy protocol witness table accessor for type MiniColorButton and conformance MiniColorButton();
    _ConditionalContent<>.init(storage:)();
    v94[6] = *(_OWORD *)&v93[96];
    v94[7] = *(_OWORD *)&v93[112];
    char v95 = v93[128];
    v94[2] = *(_OWORD *)&v93[32];
    v94[3] = *(_OWORD *)&v93[48];
    v94[4] = *(_OWORD *)&v93[64];
    v94[5] = *(_OWORD *)&v93[80];
    v94[0] = *(_OWORD *)v93;
    v94[1] = *(_OWORD *)&v93[16];
    UnknownCanvasElementView.flags.modify(v94, v41);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v94, (uint64_t)&v97, &demangling cache variable for type metadata for _ConditionalContent<MiniColorButton, MiniColorButton>?);
  }
  else
  {
    _s7SwiftUI19_ConditionalContentVy8PaperKit15MiniColorButtonVAFGSgWOi0_((uint64_t)v93);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v93, (uint64_t)&v97, &demangling cache variable for type metadata for _ConditionalContent<MiniColorButton, MiniColorButton>?);
  }
  Bindable.wrappedValue.getter();
  uint64_t v42 = *(void *)v93;
  swift_getKeyPath();
  *(void *)uint64_t v93 = v42;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v43 = *(void *)(v42 + 40);
  swift_release();
  if ((v43 & 4) != 0)
  {
    Bindable.wrappedValue.getter();
    specialized MiniTextButton.init(state:isShowingTextStyleSelector:isShowingFontPopover:isShowingColorPopover:)((uint64_t)v109);
    *(void *)&long long v88 = v109[1];
    uint64_t v79 = v110;
    uint64_t v80 = v109[0];
    *(void *)&long long v87 = v111;
    uint64_t v78 = v112;
    uint64_t v77 = v114;
    uint64_t v85 = v115;
    *(void *)&long long v86 = v113;
  }
  else
  {
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    *(void *)&long long v88 = 0;
    *(void *)&long long v87 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v85 = 0;
    *(void *)&long long v86 = 0;
  }
  uint64_t v44 = v73;
  Bindable.wrappedValue.getter();
  uint64_t v45 = *(void *)v93;
  swift_getKeyPath();
  *(void *)uint64_t v93 = v45;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v46 = *(void *)(v45 + 40);
  swift_release();
  if ((v46 & 8) != 0)
  {
    uint64_t v47 = (uint64_t)v72;
    Bindable.projectedValue.getter();
    swift_getKeyPath();
    Bindable<A>.subscript.getter();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v47, v3);
    uint64_t v83 = *(void *)&v93[8];
    uint64_t v84 = *(void *)v93;
    uint64_t v74 = v93[24];
    uint64_t v75 = *(void *)&v93[16];
    uint64_t v82 = *(void *)&v93[32];
    int v48 = v93[40];
    int v49 = v93[41];
    LOBYTE(v92[0]) = 0;
    State.init(wrappedValue:)();
    uint64_t v76 = LOBYTE(v94[0]);
    uint64_t v69 = *((void *)&v94[0] + 1);
    if (v49) {
      int v50 = 256;
    }
    else {
      int v50 = 0;
    }
    int v81 = v50 | v48;
  }
  else
  {
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v69 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    uint64_t v74 = 0;
    uint64_t v82 = 0;
    int v81 = 0;
  }
  Bindable.wrappedValue.getter();
  uint64_t v51 = *(void *)v93;
  swift_getKeyPath();
  *(void *)uint64_t v93 = v51;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v52 = *(void *)(v51 + 40);
  swift_release();
  if ((v52 & 0x10) != 0)
  {
    uint64_t v54 = (uint64_t)v72;
    Bindable.projectedValue.getter();
    swift_getKeyPath();
    Bindable<A>.subscript.getter();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v54, v3);
    uint64_t v73 = *(void *)v93;
    uint64_t v67 = *(void *)&v93[16];
    uint64_t v68 = *(void *)&v93[8];
    int v55 = v93[24];
    Bindable.wrappedValue.getter();
    uint64_t v56 = *(void *)&v94[0];
    swift_getKeyPath();
    *(void *)&v94[0] = v56;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v57 = *(unsigned __int8 *)(v56 + 201);
    swift_release();
    LOBYTE(v92[0]) = 0;
    State.init(wrappedValue:)();
    uint64_t v53 = LOBYTE(v94[0]);
    uint64_t v72 = (char *)*((void *)&v94[0] + 1);
    if (v57) {
      int v58 = 256;
    }
    else {
      int v58 = 0;
    }
    LODWORD(v71) = v58 | v55;
  }
  else
  {
    uint64_t v53 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    LODWORD(v71) = 0;
  }
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v116, (uint64_t)v90, &demangling cache variable for type metadata for MiniColorButton?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v97, (uint64_t)v89, &demangling cache variable for type metadata for _ConditionalContent<MiniColorButton, MiniColorButton>?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v90, (uint64_t)v91, &demangling cache variable for type metadata for MiniColorButton?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v89, (uint64_t)v92, &demangling cache variable for type metadata for _ConditionalContent<MiniColorButton, MiniColorButton>?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v91, (uint64_t)v93, &demangling cache variable for type metadata for MiniColorButton?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v92, (uint64_t)&v93[128], &demangling cache variable for type metadata for _ConditionalContent<MiniColorButton, MiniColorButton>?);
  uint64_t v59 = v80;
  *(void *)&v93[264] = v80;
  *(void *)&v93[272] = v88;
  *(void *)&v93[280] = v79;
  *(void *)&v93[288] = v87;
  *(void *)&v93[296] = v78;
  *(void *)&v93[304] = v86;
  *(void *)&v93[312] = v77;
  *(void *)&v93[320] = v85;
  uint64_t v60 = v76;
  *(void *)&v93[328] = v76;
  uint64_t v62 = v68;
  uint64_t v61 = v69;
  *(void *)&v93[336] = v69;
  *(void *)&v93[344] = v84;
  *(void *)&v93[352] = v83;
  *(void *)&v93[360] = v75;
  *(void *)&v93[368] = v74;
  *(void *)&v93[376] = v82;
  *(_WORD *)&v93[384] = v81;
  *(void *)&v93[392] = v53;
  *(void *)&v93[400] = v72;
  *(void *)&v93[408] = v73;
  *(void *)&v93[416] = v68;
  *(void *)&v93[424] = v67;
  *(_WORD *)&v93[432] = v71;
  memcpy(v70, v93, 0x1B2uLL);
  outlined retain of MiniColorButton?(v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of MiniColorButton?);
  outlined retain of _ConditionalContent<MiniColorButton, MiniColorButton>?((uint64_t)v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of _ConditionalContent<MiniColorButton, MiniColorButton>?);
  outlined copy of MiniTextButton?(v59, v88);
  outlined copy of MiniLineEndsButton?(v60, v61, v84, v83);
  uint64_t v63 = (uint64_t)v72;
  uint64_t v64 = v73;
  outlined copy of MiniLineEndsButton?(v53, (uint64_t)v72, v73, v62);
  outlined consume of MiniObjectPropertiesButton?(v53, v63, v64, v62);
  outlined consume of MiniObjectPropertiesButton?(v76, v61, v84, v83);
  outlined consume of MiniTextButton?(v80, v88);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v89, (uint64_t)v94, &demangling cache variable for type metadata for _ConditionalContent<MiniColorButton, MiniColorButton>?);
  outlined retain of _ConditionalContent<MiniColorButton, MiniColorButton>?((uint64_t)v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ConditionalContent<MiniColorButton, MiniColorButton>?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v90, (uint64_t)v96, &demangling cache variable for type metadata for MiniColorButton?);
  return outlined retain of MiniColorButton?(v96, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of MiniColorButton?);
}

unint64_t lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState()
{
  unint64_t result = lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState;
  if (!lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState)
  {
    type metadata accessor for MiniMenuState();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState);
  }
  return result;
}

double _s8PaperKit15MiniColorButtonVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double _s7SwiftUI19_ConditionalContentVy8PaperKit15MiniColorButtonVAFGSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 128) = -1;
  return result;
}

uint64_t outlined copy of MiniColorButton?(uint64_t result, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a4)
  {
    outlined copy of Environment<MiniMenuController?>.Content(result, a2 & 1);
    swift_retain();
    swift_retain();
    swift_retain();
    id v12 = a5;
    id v13 = a7;
    outlined copy of Binding<Inspected<CGFloat>>?(a9, a10);
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of Binding<Inspected<CGFloat>>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of _ConditionalContent<MiniColorButton, MiniColorButton>?(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  if (a17 != 255) {
    return outlined copy of _ConditionalContent<MiniColorButton, MiniColorButton>.Storage(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return a1;
}

uint64_t outlined copy of _ConditionalContent<MiniColorButton, MiniColorButton>.Storage(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  outlined copy of Environment<MiniMenuController?>.Content(a1, a2 & 1);
  swift_retain();
  swift_retain();
  swift_retain();
  id v12 = a5;
  id v13 = a7;
  outlined copy of Binding<Inspected<CGFloat>>?(a9, a10);
  swift_retain();
  return swift_retain();
}

uint64_t outlined copy of MiniTextButton?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of MiniLineEndsButton?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of MiniObjectPropertiesButton?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of MiniTextButton?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined retain of _ConditionalContent<MiniColorButton, MiniColorButton>?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 128);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), v4);
  return a1;
}

uint64_t outlined consume of _ConditionalContent<MiniColorButton, MiniColorButton>?(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  if (a17 != 255) {
    return outlined consume of _ConditionalContent<MiniColorButton, MiniColorButton>.Storage(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return a1;
}

uint64_t outlined consume of _ConditionalContent<MiniColorButton, MiniColorButton>.Storage(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  outlined consume of Environment<MiniMenuController?>.Content(a1, a2 & 1);
  swift_release();
  swift_release();

  swift_release();
  outlined consume of Binding<Inspected<CGFloat>>?(a9, a10);
  swift_release();
  return swift_release();
}

uint64_t outlined consume of Binding<Inspected<CGFloat>>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

void *outlined retain of MiniColorButton?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined consume of MiniColorButton?(uint64_t result, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a4)
  {
    outlined consume of Environment<MiniMenuController?>.Content(result, a2 & 1);
    swift_release();
    swift_release();

    swift_release();
    outlined consume of Binding<Inspected<CGFloat>>?(a9, a10);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOy8PaperKit15MiniColorButtonVAH_GWOi0_(uint64_t result)
{
  *(unsigned char *)(result + 128) = 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type MiniColorButton and conformance MiniColorButton()
{
  unint64_t result = lazy protocol witness table cache variable for type MiniColorButton and conformance MiniColorButton;
  if (!lazy protocol witness table cache variable for type MiniColorButton and conformance MiniColorButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniColorButton and conformance MiniColorButton);
  }
  return result;
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOy8PaperKit15MiniColorButtonVAH_GWOi_(uint64_t result)
{
  *(unsigned char *)(result + 128) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(MiniColorButton?, _ConditionalContent<MiniColorButton, MiniColorButton>?, MiniTextButton?, MiniLineEndsButton?, MiniObjectPropertiesButton?, MiniDivider)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(MiniColorButton?, _ConditionalContent<MiniColorButton, MiniColorButton>?, MiniTextButton?, MiniLineEndsButton?, MiniObjectPropertiesButton?, MiniDivider)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(MiniColorButton?, _ConditionalContent<MiniColorButton, MiniColorButton>?, MiniTextButton?, MiniLineEndsButton?, MiniObjectPropertiesButton?, MiniDivider)> and conformance TupleView<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TupleView<(MiniColorButton?, _ConditionalContent<MiniColorButton, MiniColorButton>?, MiniTextButton?, MiniLineEndsButton?, MiniObjectPropertiesButton?, MiniDivider)>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(MiniColorButton?, _ConditionalContent<MiniColorButton, MiniColorButton>?, MiniTextButton?, MiniLineEndsButton?, MiniObjectPropertiesButton?, MiniDivider)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t type metadata accessor for CalculateScrubberViewController()
{
  uint64_t result = type metadata singleton initialization cache for CalculateScrubberViewController;
  if (!type metadata singleton initialization cache for CalculateScrubberViewController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for CalculateScrubberViewController()
{
  uint64_t result = type metadata accessor for CalculateScrubberView();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void @objc CalculateScrubberViewController.init(coder:)()
{
}

void @objc CalculateScrubberViewController.viewDidLayoutSubviews()(void *a1)
{
  v8.receiver = a1;
  v8.super_class = (Class)swift_getObjectType();
  id v1 = v8.receiver;
  objc_msgSendSuper2(&v8, sel_viewDidLayoutSubviews);
  id v2 = objc_msgSend(v1, sel_view, v8.receiver, v8.super_class);
  if (v2)
  {
    uint64_t v3 = v2;
    objc_msgSend(v2, sel_systemLayoutSizeFittingSize_, *MEMORY[0x263F83810], *(double *)(MEMORY[0x263F83810] + 8));
    double v5 = v4;
    double v7 = v6;

    objc_msgSend(v1, sel_setPreferredContentSize_, v5, v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t @objc CalculateScrubberViewController._canShowWhileLocked()()
{
  return 1;
}

void CalculateScrubberViewController.__allocating_init(rootView:)()
{
}

void CalculateScrubberViewController.__allocating_init(coder:rootView:)()
{
}

uint64_t CalculateScrubberViewController.__ivar_destroyer()
{
  swift_release();
  uint64_t v1 = v0 + direct field offset for CalculateScrubberViewController.scrubberView;
  uint64_t v2 = type metadata accessor for CalculateScrubberView();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(v1, v2);
}

uint64_t @objc CalculateScrubberViewController.__ivar_destroyer(uint64_t a1)
{
  swift_release();
  uint64_t v2 = a1 + direct field offset for CalculateScrubberViewController.scrubberView;
  uint64_t v3 = type metadata accessor for CalculateScrubberView();
  double v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t ObjC metadata update function for CalculateScrubberViewController()
{
  return type metadata accessor for CalculateScrubberViewController();
}

Swift::Void __swiftcall CalculateScrubberController.showScrubber(for:frame:compact:)(Swift::String a1, __C::CGRect frame, Swift::Bool compact)
{
  uint64_t v4 = v3;
  double height = frame.size.height;
  double width = frame.size.width;
  double y = frame.origin.y;
  double x = frame.origin.x;
  uint64_t v9 = type metadata accessor for CalculateScrubberView();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  id v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CalculateScrubber();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v13 = CalculateScrubber.init(formattedValue:)();
  uint64_t v14 = OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_scrubber;
  *(void *)(v3 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_scrubber) = v13;
  swift_release();
  uint64_t v15 = *(void *)(v3 + v14);
  if (!v15)
  {
    __break(1u);
    return;
  }
  uint64_t v16 = (char *)objc_allocWithZone((Class)type metadata accessor for CalculateScrubberViewController());
  *(void *)&v16[direct field offset for CalculateScrubberViewController.scrubber] = v15;
  swift_retain_n();
  char v17 = v16;
  CalculateScrubberView.init(scrubber:isCompact:isUsingPopoverPresentationController:)();
  uint64_t v18 = &v17[direct field offset for CalculateScrubberViewController.scrubberView];
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v17[direct field offset for CalculateScrubberViewController.scrubberView], v12, v9);

  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v18, v9);
  id v19 = (id)UIHostingController.init(rootView:)();
  objc_msgSend(v19, sel_setModalPresentationStyle_, 7);

  swift_release();
  uint64_t v20 = OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_viewController;
  uint64_t v21 = *(void **)(v4 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_viewController);
  *(void *)(v4 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_viewController) = v19;

  uint64_t v22 = (void *)(v4 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestValue);
  *uint64_t v22 = 0;
  v22[1] = 0;
  swift_bridgeObjectRelease();
  *(void *)(v4 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestUpdateTimestamp) = 0;
  if (*(void *)(v4 + v14))
  {
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    swift_retain();
    CalculateScrubber.didScrub.setter();
    swift_release();
    uint64_t v23 = (void *)MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_view);
    if (v23)
    {
      int v24 = v23;
      id v25 = objc_msgSend(v23, sel_window);
      if (v25)
      {
        unint64_t v26 = v25;
        id v27 = objc_msgSend(v25, sel_rootViewController);
        if (v27)
        {
          uint64_t v28 = v27;
          char v29 = *(void **)(v4 + v20);
          if (v29)
          {
            id v30 = v29;
            id v31 = objc_msgSend(v30, sel_popoverPresentationController);
            if (v31)
            {
              char v32 = v31;
              objc_msgSend(v31, sel_setSourceView_, v24);
            }
            id v33 = objc_msgSend(v30, sel_popoverPresentationController);
            if (v33)
            {
              char v34 = v33;
              objc_msgSend(v33, sel_setPermittedArrowDirections_, 3);
            }
            id v35 = objc_msgSend(v30, sel_popoverPresentationController);
            objc_msgSend(v35, sel_setSourceRect_, x, y, width, height);

            id v36 = objc_msgSend(v30, sel_popoverPresentationController);
            if (v36)
            {
              char v37 = v36;
              objc_msgSend(v36, sel_setCanOverlapSourceViewRect_, 0);
            }
            id v38 = objc_msgSend(v30, sel_popoverPresentationController);
            if (v38)
            {
              char v39 = v38;
              objc_msgSend(v38, sel__setShouldDimPresentingViewTint_, 0);
            }
            id v40 = objc_msgSend(v30, sel_popoverPresentationController);
            if (v40)
            {
              uint64_t v41 = v40;
              objc_msgSend(v40, sel_setDelegate_, v4);
            }
            objc_msgSend(v28, sel_presentViewController_animated_completion_, v30, 1, 0);
            swift_release();
          }
          else
          {
            swift_release();
          }
          return;
        }
      }
      else
      {
      }
    }
    swift_release();
  }
}

void closure #1 in CalculateScrubberController.showScrubber(for:frame:compact:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  if (v6)
  {
    double v7 = (char *)v6;
    objc_super v8 = (void *)(v6 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestValue);
    uint64_t v9 = *(void *)(v6 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestValue + 8);
    if (!v9
      || (*v8 == a1 ? (BOOL v10 = v9 == a2) : (BOOL v10 = 0), !v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
    {
      *objc_super v8 = a1;
      v8[1] = a2;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      if (CACurrentMediaTime()
         - *(double *)&v7[OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestUpdateTimestamp] >= 0.05)
      {
        CalculateScrubberController.sendValueChanged()();
      }
      else
      {
        objc_msgSend(self, sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v7, sel_sendValueChanged, 0);
        objc_msgSend(v7, sel_performSelector_withObject_afterDelay_, sel_sendValueChanged, 0, 0.05);
      }
    }
  }
}

Swift::Void __swiftcall CalculateScrubberController.hideScrubber()()
{
  objc_msgSend(self, sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v0, sel_sendValueChanged, 0);
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_viewController;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_viewController);
  if (v2)
  {
    objc_msgSend(v2, sel_dismissViewControllerAnimated_completion_, 1, 0);
    uint64_t v2 = *(void **)(v0 + v1);
  }
  *(void *)(v0 + v1) = 0;
}

Swift::Void __swiftcall CalculateScrubberController.sendValueChanged()()
{
  uint64_t v1 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_delegate);
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestValue + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestValue);
      swift_bridgeObjectRetain();
      uint64_t v5 = (void *)MEMORY[0x21054D080](v4, v3);
      swift_bridgeObjectRelease();
      objc_msgSend(v2, sel_scrubberController_valueDidChange_, v0, v5);

      *(CFTimeInterval *)(v0 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestUpdateTimestamp) = CACurrentMediaTime();
      objc_msgSend(self, sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v0, sel_sendValueChanged, 0);
    }
    swift_unknownObjectRelease();
  }
}

uint64_t type metadata accessor for CalculateScrubberController()
{
  return self;
}

uint64_t sub_20C7F828C()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in CalculateScrubberController.showScrubber(for:frame:compact:)(uint64_t a1, uint64_t a2)
{
  closure #1 in CalculateScrubberController.showScrubber(for:frame:compact:)(a1, a2, v2);
}

id specialized CalculateScrubberController.init(view:delegate:)()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_viewController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_scrubber] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_kSendValueTimeInterval] = 0x3FA999999999999ALL;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestUpdateTimestamp] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestValue];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

id specialized CanvasElementView.updateUI()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v2);
  objc_super v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v6 = *(void *)(v5 - 8);
  v7.n128_f64[0] = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v10 = (void *)MEMORY[0x263F8EED0];
  uint64_t v11 = (*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *v0) + 0x480))(v7);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))((*v10 & *v0) + 0x288))(v11);
  uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t))((*v10 & *v0) + 0x88))(v12);
  if (v13)
  {
    uint64_t v14 = v13;
    (*(void (**)(void))((*v10 & *v13) + 0x680))();
  }
  uint64_t v15 = (char *)v1 + *(void *)((*v10 & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v15, v5);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  id result = (id)_s8PaperKit15PKDrawingStructVWOhTm_2((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Shape);
  if ((v17 & 2) != 0) {
    return objc_msgSend(v1, sel_setUserInteractionEnabled_, 0);
  }
  return result;
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char *v15;
  id result;
  uint64_t v17;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v2);
  objc_super v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v6 = *(void *)(v5 - 8);
  v7.n128_f64[0] = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v10 = (void *)MEMORY[0x263F8EED0];
  uint64_t v11 = (*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *v0) + 0x480))(v7);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))((*v10 & *v0) + 0x288))(v11);
  uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t))((*v10 & *v0) + 0x88))(v12);
  if (v13)
  {
    uint64_t v14 = v13;
    (*(void (**)(void))((*v10 & *v13) + 0x680))();
  }
  uint64_t v15 = (char *)v1 + *(void *)((*v10 & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v15, v5);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  id result = (id)_s8PaperKit15PKDrawingStructVWOhTm_2((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Paper);
  if ((v17 & 2) != 0) {
    return objc_msgSend(v1, sel_setUserInteractionEnabled_, 0);
  }
  return result;
}

void key path getter for ContainerCanvasElement.bounds : <A>A(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(double *)a3 = (*(double (**)(void))(*(void *)(a2 + a1 - 8) + 16))(*(void *)(a2 + a1 - 24));
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v6;
}

uint64_t key path setter for ContainerCanvasElement.bounds : <A>A(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, double, double, double, double))(*(void *)(a4 + a3 - 8) + 24))(*(void *)(a4 + a3 - 24), *(void *)(a4 + a3 - 8), *a1, a1[1], a1[2], a1[3]);
}

uint64_t specialized CanvasElementDrawingView.merge<A>(_:)(uint64_t a1, void (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  v31[0] = a4;
  v31[1] = a5;
  uint64_t v8 = type metadata accessor for PKDrawing();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v31 - v13;
  double v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v31 - v17;
  id v19 = objc_msgSend(v5, sel_drawing, v16);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v14, v8);
  type metadata accessor for PKDrawingCoherence(0);
  swift_dynamicCast();
  uint64_t v20 = v33;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  a2(0);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5(a3, v31[0]);
  char v21 = Capsule.merge<A>(_:)();
  swift_endAccess();
  if (v21)
  {
    uint64_t v22 = v9;
    objc_msgSend(v20, sel_invalidateVisibleStrokes);

    uint64_t v23 = (objc_class *)type metadata accessor for CanvasElementDrawingView();
    v32.receiver = v5;
    v32.super_class = v23;
    objc_msgSendSuper2(&v32, sel_drawingDidChange);
    id v24 = objc_msgSend(v5, sel_tiledView);
    if (v24)
    {
      id v25 = v24;
      id v26 = objc_msgSend(v5, sel_drawing);
      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

      PKDrawing._bridgeToObjectiveC()(v27);
      char v29 = v28;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v8);
      objc_msgSend(v25, sel_updateCurrentSelectionWithNewDrawingIfNecessary_, v29);
    }
  }
  else
  {
  }
  return v21 & 1;
}

uint64_t specialized CanvasElement.isHidden.setter(char a1)
{
  type metadata accessor for Paper();
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    uint64_t v3 = (uint64_t (*)(uint64_t *, void))CRRegister.wrappedValue.modify();
    if ((*v2 & 1) == 0)
    {
      unint64_t v4 = *v2 | 1;
LABEL_6:
      unint64_t *v2 = v4;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    uint64_t v3 = (uint64_t (*)(uint64_t *, void))CRRegister.wrappedValue.modify();
    if (*v2)
    {
      unint64_t v4 = *v2 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_6;
    }
  }
  return v3(&v6, 0);
}

void specialized ContainerCanvasElementView.updateSubelements()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
  MEMORY[0x270FA5388](v2);
  unint64_t v4 = (char *)&v187 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  __n128 v7 = (char *)&v187 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<AnyCanvasElementView>);
  uint64_t v196 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v203 = (char *)&v187 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v195 = (char *)&v187 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v212 = (uint64_t)&v187 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v234 = (void *)type metadata accessor for CRKeyPath();
  dispatch_group_t v231 = (char *)*(v234 - 1);
  MEMORY[0x270FA5388](v234);
  uint64_t v235 = (uint64_t)&v187 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v202 = (char *)&v187 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v230 = (char *)&v187 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v206 = (char *)&v187 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  unint64_t v220 = (char *)&v187 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v24 - 8);
  float64_t v222 = (char *)&v187 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v26 = *(void *)(v198 - 8);
  MEMORY[0x270FA5388](v198);
  uint64_t v197 = (char *)&v187 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v224 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v28 = *(void *)(v224 - 8);
  MEMORY[0x270FA5388](v224);
  uint64_t v223 = (char *)&v187 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v226 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v30 = *(void *)(v226 - 8);
  double v31 = MEMORY[0x270FA5388](v226);
  unint64_t v225 = (char *)&v187 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v207 = (char *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas, v31);
  if (!v207) {
    return;
  }
  uint64_t v221 = v22;
  uint64_t v201 = v8;
  id v33 = self;
  objc_msgSend(v33, sel_begin);
  id v193 = v33;
  objc_msgSend(v33, sel_setAnimationDuration_, 0.0);
  char v34 = (void *)MEMORY[0x263F8EED0];
  id v35 = (void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4D8));
  swift_beginAccess();
  uint64_t v233 = v35;
  uint64_t v36 = *v35;
  uint64_t v232 = *(void (***)(char *, uint64_t))((*v34 & *v1) + 0x4D0);
  char v37 = *(void (**)(char *, uint64_t))((char *)v232 + (void)v1);
  uint64_t v205 = v21;
  long long v204 = v7;
  uint64_t v192 = v2;
  uint64_t v191 = v4;
  uint64_t v194 = v30;
  swift_bridgeObjectRetain();
  if (v37)
  {
    id v38 = v37;
    uint64_t v39 = FormFillingView.unorderedFormFields.getter();
  }
  else
  {
    uint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  uint64_t v40 = specialized Dictionary.merging(_:uniquingKeysWith:)(v39, v36);
  uint64_t v229 = 0;
  v227 = (char *)specialized Set.init<A>(_:)(v40);
  float64x2_t v240 = v227;
  uint64_t v41 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
  swift_beginAccess();
  uint64_t v42 = v28;
  uint64_t v43 = v28 + 16;
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  uint64_t v45 = v223;
  uint64_t v217 = v41;
  uint64_t v46 = v224;
  uint64_t v216 = v43;
  uint64_t v215 = v44;
  uint64_t v47 = ((uint64_t (*)(char *, char *, uint64_t))v44)(v223, v41, v224);
  MEMORY[0x270FA5388](v47);
  uint64_t v214 = type metadata accessor for Image();
  *(&v187 - 4) = v214;
  uint64_t v48 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  *(&v187 - 3) = v48;
  *(&v187 - 2) = (uint64_t)&protocol witness table for Image;
  swift_getKeyPath();
  int v49 = v197;
  uint64_t v189 = v48;
  Capsule<>.subscript.getter();
  swift_release();
  int v50 = *(void (**)(char *, uint64_t))(v42 + 8);
  uint64_t v218 = v42 + 8;
  uint64_t v213 = v50;
  v50(v45, v46);
  uint64_t v51 = v198;
  CROrderedSet.makeIterator()();
  uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  uint64_t v190 = v26 + 8;
  id v188 = v52;
  v52((uint64_t)v49, v51);
  uint64_t v53 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v228 = *(void *)(v53 + 0x4C8);
  uint64_t v199 = *(void *)(v53 + 1216);
  int v219 = &v207[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasViewController];
  uint64_t v54 = v222;
  CROrderedSet.Iterator.next()();
  uint64_t v55 = v221;
  uint64_t v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v221 + 48);
  uint64_t v57 = v205;
  uint64_t v211 = v221 + 48;
  uint64_t v210 = v56;
  if (v56(v54, 1, v205) == 1)
  {
    int v58 = v229;
    uint64_t v59 = v227;
    goto LABEL_42;
  }
  uint64_t v209 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
  v227 = v231 + 8;
  uint64_t v221 = v55 + 32;
  uint64_t v208 = (void (**)(char *, uint64_t))(v55 + 8);
  long long v200 = v231 + 16;
  int v58 = v229;
  uint64_t v60 = (uint64_t)v206;
  v209(v220, v54, v57);
  while (1)
  {
    MEMORY[0x21054BEC0](v57);
    uint64_t v63 = v212;
    specialized Set._Variant.remove(_:)(v60, v212);
    outlined destroy of StocksKitCurrencyCache.Provider?(v63, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    uint64_t v64 = *v233;
    int v65 = *(void (**)(char *, uint64_t))((char *)v232 + (void)v1);
    swift_bridgeObjectRetain();
    if (v65)
    {
      id v66 = v65;
      uint64_t v67 = FormFillingView.unorderedFormFields.getter();
    }
    else
    {
      uint64_t v67 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v236 = v64;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v67, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v236);
    uint64_t v69 = v236;
    swift_bridgeObjectRelease();
    if (v58) {
      goto LABEL_124;
    }
    if (*(void *)(v69 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v60);
      char v71 = v70;
      swift_bridgeObjectRelease();
      if (v71)
      {
        uint64_t v72 = *v233;
        uint64_t v73 = *(void (**)(char *, uint64_t))((char *)v232 + (void)v1);
        swift_bridgeObjectRetain();
        if (v73)
        {
          id v74 = v73;
          uint64_t v75 = FormFillingView.unorderedFormFields.getter();
        }
        else
        {
          uint64_t v75 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        }
        char v77 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v236 = v72;
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v75, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v77, (uint64_t)&v236);
        uint64_t v78 = v236;
        swift_bridgeObjectRelease();
        if (!*(void *)(v78 + 16)) {
          goto LABEL_123;
        }
        unint64_t v79 = specialized __RawDictionaryStorage.find<A>(_:)(v60);
        if ((v80 & 1) == 0) {
          goto LABEL_123;
        }
        int v81 = *(id *)(*(void *)(v78 + 56) + 8 * v79);
        swift_bridgeObjectRelease();
        uint64_t v82 = v223;
        uint64_t v83 = v224;
        v215(v223, v217, v224);
        uint64_t v84 = *(void (**)(char *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v81) + 0x130);
        uint64_t v85 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
        v84(v82, v214, v85);

        v213(v82, v83);
        (*(void (**)(uint64_t, void *))v227)(v60, v234);
        uint64_t v61 = v220;
        (*v208)(v220, v57);
        int v58 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (!*(void *)((char *)v1 + v228))
    {
      id v76 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
      objc_msgSend(v1, sel_bounds);
      objc_msgSend(v76, sel_setFrame_);
      objc_msgSend(v76, sel_setClipsToBounds_, 1);
      objc_msgSend(v76, sel_setUserInteractionEnabled_, 0);
      if (*(void *)((char *)v1 + v199)) {
        objc_msgSend(v1, sel_insertSubview_belowSubview_, v76);
      }
      else {
        objc_msgSend(v1, sel_addSubview_, v76);
      }
      long long v86 = *(void **)((char *)v1 + v228);
      *(void *)((char *)v1 + v228) = v76;
    }
    uint64_t v229 = 0;
    SharedTagged_9<>.layout()(&v236);
    uint64_t v87 = v237;
    uint64_t v88 = v238;
    __swift_project_boxed_opaque_existential_1(&v236, v237);
    double v89 = v223;
    uint64_t v90 = v224;
    v215(v223, v217, v224);
    double v91 = *(uint64_t (**)(char *, char *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 8);
    uint64_t v92 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    uint64_t v93 = v207;
    uint64_t v94 = v207;
    char v95 = v1;
    uint64_t v96 = v94;
    long long v97 = v93;
    long long v98 = v95;
    uint64_t v99 = (void *)v91(v89, v97, v95, v214, v92, v87, v88);

    v213(v89, v90);
    if (!v99)
    {
      uint64_t v60 = (uint64_t)v206;
      (*(void (**)(char *, void *))v227)(v206, v234);
      uint64_t v61 = v220;
      uint64_t v57 = v205;
      (*v208)(v220, v205);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v236);
      uint64_t v1 = v98;
      int v58 = v229;
LABEL_9:
      uint64_t v62 = v222;
      goto LABEL_10;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v236);
    swift_unknownObjectWeakAssign();
    uint64_t v100 = (uint64_t)v202;
    uint64_t v60 = (uint64_t)v206;
    long long v101 = v234;
    (*(void (**)(char *, char *, void *))v200)(v202, v206, v234);
    long long v102 = v233;
    swift_beginAccess();
    uint64_t v103 = v99;
    char v104 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v239 = *v102;
    *long long v102 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v103, v100, v104);
    *long long v102 = v239;
    swift_bridgeObjectRelease();
    char v105 = *(void (**)(uint64_t, void *))v227;
    (*(void (**)(uint64_t, void *))v227)(v100, v101);
    swift_endAccess();
    uint64_t v106 = MEMORY[0x210550400](v219);
    uint64_t v1 = v98;
    int v58 = v229;
    uint64_t v61 = v220;
    uint64_t v62 = v222;
    if (!v106) {
      goto LABEL_37;
    }
    char v107 = (void *)v106;
    uint64_t v108 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v103) + 0x360))();
    if (!v108)
    {

LABEL_37:
      uint64_t v111 = *(void **)((char *)v1 + v228);
      if (v111) {
        objc_msgSend(v111, sel_addSubview_, v103);
      }

      goto LABEL_40;
    }
    uint64_t v109 = (void *)v108;
    objc_msgSend(v107, sel_addChildViewController_, v108);
    unsigned __int8 v110 = *(void **)((char *)v1 + v228);
    if (v110) {
      objc_msgSend(v110, sel_addSubview_, v103);
    }
    objc_msgSend(v109, sel_didMoveToParentViewController_, v107);

LABEL_40:
    v105(v60, v234);
    uint64_t v57 = v205;
    (*v208)(v61, v205);
LABEL_10:
    CROrderedSet.Iterator.next()();
    if (v210(v62, 1, v57) == 1) {
      break;
    }
    v209(v61, v62, v57);
  }
  uint64_t v59 = v240;
LABEL_42:
  (*(void (**)(char *, uint64_t))(v194 + 8))(v225, v226);
  uint64_t v112 = *((void *)v59 + 7);
  uint64_t v226 = (uint64_t)(v59 + 56);
  uint64_t v113 = 1 << v59[32];
  uint64_t v114 = -1;
  if (v113 < 64) {
    uint64_t v114 = ~(-1 << v113);
  }
  unint64_t v115 = v114 & v112;
  v227 = (char *)((unint64_t)(v113 + 63) >> 6);
  uint64_t v229 = v231 + 16;
  unint64_t v116 = (unint64_t)(v231 + 8);
  swift_bridgeObjectRetain();
  uint64_t v117 = 0;
  if (v115) {
    goto LABEL_47;
  }
  while (2)
  {
    if (__OFADD__(v117++, 1))
    {
      __break(1u);
      goto LABEL_94;
    }
    if (v117 >= (uint64_t)v227) {
      goto LABEL_77;
    }
    unint64_t v121 = *(void *)(v226 + 8 * v117);
    if (v121) {
      goto LABEL_58;
    }
    uint64_t v122 = v117 + 1;
    if (v117 + 1 >= (uint64_t)v227) {
      goto LABEL_77;
    }
    unint64_t v121 = *(void *)(v226 + 8 * v122);
    if (v121) {
      goto LABEL_57;
    }
    uint64_t v122 = v117 + 2;
    if (v117 + 2 >= (uint64_t)v227) {
      goto LABEL_77;
    }
    unint64_t v121 = *(void *)(v226 + 8 * v122);
    if (v121) {
      goto LABEL_57;
    }
    uint64_t v122 = v117 + 3;
    if (v117 + 3 >= (uint64_t)v227)
    {
LABEL_77:
      swift_release();
      int v143 = *(void **)((char *)v1 + v228);
      if (!v143)
      {
        swift_bridgeObjectRelease();
LABEL_99:
        objc_msgSend(v193, sel_commit);

        return;
      }
      dispatch_group_t v231 = v143;
      id v144 = objc_msgSend(v231, sel_subviews);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      unint64_t v116 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v236 = MEMORY[0x263F8EE78];
      if (v116 >> 62) {
        goto LABEL_95;
      }
      uint64_t v145 = *(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v145) {
        goto LABEL_80;
      }
LABEL_96:
      swift_bridgeObjectRelease();
      uint64_t v149 = MEMORY[0x263F8EE78];
LABEL_97:
      swift_bridgeObjectRelease();
      uint64_t v150 = v223;
      uint64_t v151 = v224;
      uint64_t v152 = ((uint64_t (*)(char *, char *, uint64_t))v215)(v223, v217, v224);
      MEMORY[0x270FA5388](v152);
      uint64_t v153 = v189;
      *(&v187 - 4) = v214;
      *(&v187 - 3) = v153;
      *(&v187 - 2) = (uint64_t)&protocol witness table for Image;
      swift_getKeyPath();
      uint64_t v154 = (uint64_t)v197;
      Capsule<>.subscript.getter();
      swift_release();
      v213(v150, v151);
      uint64_t v155 = v1;
      uint64_t v156 = specialized Sequence.compactMap<A>(_:)(v154, v155);

      v188(v154, v198);
      swift_bridgeObjectRelease();
      uint64_t v236 = v156;
      uint64_t v239 = v149;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyCanvasElementView]);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [AnyCanvasElementView] and conformance [A], &demangling cache variable for type metadata for [AnyCanvasElementView]);
      _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5(&lazy protocol witness table cache variable for type AnyCanvasElementView and conformance NSObject, (void (*)(uint64_t))type metadata accessor for AnyCanvasElementView);
      uint64_t v157 = v195;
      BidirectionalCollection<>.difference<A>(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v158 = (uint64_t)v191;
      uint64_t v159 = v201;
      unint64_t v234 = *(void **)(v196 + 16);
      uint64_t v235 = v196 + 16;
      ((void (*)(char *, char *, uint64_t))v234)(v191, v157, v201);
      uint64_t v160 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CollectionDifference<AnyCanvasElementView> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<AnyCanvasElementView>);
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v161 = v192;
      *(void *)(v158 + *(int *)(v192 + 36)) = v236;
      uint64_t v162 = (uint64_t)v204;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v158, (uint64_t)v204, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
      long long v163 = (uint64_t *)(v162 + *(int *)(v161 + 36));
      uint64_t v164 = *v163;
      dispatch thunk of Collection.endIndex.getter();
      if (v164 == v236)
      {
LABEL_98:

        outlined destroy of StocksKitCurrencyCache.Provider?(v162, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
        (*(void (**)(char *, uint64_t))(v196 + 8))(v195, v159);
        goto LABEL_99;
      }
      uint64_t v232 = (void (**)(char *, uint64_t))(v196 + 8);
      uint64_t v233 = (uint64_t *)v160;
      while (1)
      {
        uint64_t v167 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v170 = *v168;
        uint64_t v169 = (void *)v168[1];
        uint64_t v171 = *((unsigned __int8 *)v168 + 25);
        outlined copy of CollectionDifference<PDFPage>.Change(*v168, v169, v168[2], *((unsigned __int8 *)v168 + 24), v171);
        v167(&v236, 0);
        uint64_t v172 = v203;
        ((void (*)(char *, uint64_t, uint64_t))v234)(v203, v162, v159);
        dispatch thunk of Collection.formIndex(after:)();
        (*v232)(v172, v159);
        uint64_t v173 = MEMORY[0x210550400](v219);
        id v174 = (id)v173;
        if (v171 == 1) {
          break;
        }
        if (v173)
        {
          uint64_t v181 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v169) + 0x360);
          uint64_t v182 = v169;
          uint64_t v183 = v181();
          if (v183)
          {
            dispatch_group_t v184 = (void *)v183;
            objc_msgSend(v174, sel_addChildViewController_, v183);
            objc_msgSend(v231, sel_insertSubview_atIndex_, v182, v170);
            id v185 = v174;
            objc_msgSend(v184, sel_didMoveToParentViewController_, v185);
            outlined consume of CollectionDifference<PDFPage>.Change();
            outlined consume of CollectionDifference<PDFPage>.Change();

            uint64_t v159 = v201;
            goto LABEL_106;
          }

          uint64_t v159 = v201;
        }
        else
        {
          uint64_t v186 = v169;
        }
        objc_msgSend(v231, sel_insertSubview_atIndex_, v169, v170);
        outlined consume of CollectionDifference<PDFPage>.Change();
LABEL_105:
        outlined consume of CollectionDifference<PDFPage>.Change();
LABEL_106:
        uint64_t v166 = *v163;
        uint64_t v162 = (uint64_t)v204;
        dispatch thunk of Collection.endIndex.getter();
        if (v166 == v236) {
          goto LABEL_98;
        }
      }
      if (v173)
      {
        uint64_t v175 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v169) + 0x360);
        uint64_t v176 = v169;
        v177 = (void *)v175();
        if (v177)
        {
          id v178 = v177;
          objc_msgSend(v177, sel_willMoveToParentViewController_, 0);
          objc_msgSend(v176, sel_removeFromSuperview);
          id v179 = objc_msgSend(v178, sel_parentViewController);
          uint64_t v159 = v201;
          if (v179 && (id v180 = v179, v179, v180 == v174)) {
            objc_msgSend(v174, sel_removeChildViewController_, v178);
          }
          else {
            objc_msgSend(v178, sel_removeFromParentViewController);
          }

          goto LABEL_104;
        }

        uint64_t v159 = v201;
      }
      else
      {
        dispatch_group_t v165 = v169;
      }
      objc_msgSend(v169, sel_removeFromSuperview);
LABEL_104:
      outlined consume of CollectionDifference<PDFPage>.Change();
      goto LABEL_105;
    }
    unint64_t v121 = *(void *)(v226 + 8 * v122);
    if (v121)
    {
LABEL_57:
      uint64_t v117 = v122;
LABEL_58:
      unint64_t v115 = (v121 - 1) & v121;
      unint64_t v119 = __clz(__rbit64(v121)) + (v117 << 6);
LABEL_59:
      uint64_t v123 = v59;
      id v125 = v230;
      uint64_t v124 = v231;
      unint64_t v126 = *((void *)v59 + 6) + *((void *)v231 + 9) * v119;
      id v127 = v234;
      (*((void (**)(char *, unint64_t, void *))v231 + 2))(v230, v126, v234);
      (*((void (**)(uint64_t, char *, void *))v124 + 4))(v235, v125, v127);
      uint64_t v128 = *v233;
      uint64_t v129 = v1;
      uint64_t v130 = *(void (**)(char *, uint64_t))((char *)v232 + (void)v1);
      swift_bridgeObjectRetain();
      if (v130)
      {
        id v131 = v130;
        uint64_t v132 = FormFillingView.unorderedFormFields.getter();
      }
      else
      {
        uint64_t v132 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      }
      char v133 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v236 = v128;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v132, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v133, (uint64_t)&v236);
      uint64_t v134 = v236;
      swift_bridgeObjectRelease();
      if (v58) {
        goto LABEL_124;
      }
      uint64_t v1 = v129;
      if (*(void *)(v134 + 16))
      {
        unint64_t v135 = specialized __RawDictionaryStorage.find<A>(_:)(v235);
        if (v136)
        {
          id v137 = *(id *)(*(void *)(v134 + 56) + 8 * v135);
          swift_bridgeObjectRelease();
          id v138 = objc_msgSend(v137, sel_superview);
          id v139 = *(id *)((char *)v129 + v228);
          if (v138)
          {
            id v140 = v138;

            if (v139 && v140 == v139)
            {
LABEL_68:
              swift_beginAccess();
              uint64_t v141 = v235;
              BOOL v142 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v235);
              swift_endAccess();

              (*(void (**)(uint64_t, void *))v116)(v141, v234);
LABEL_71:
              uint64_t v1 = v129;
              uint64_t v59 = v123;
              if (!v115) {
                continue;
              }
LABEL_47:
              unint64_t v118 = __clz(__rbit64(v115));
              v115 &= v115 - 1;
              unint64_t v119 = v118 | (v117 << 6);
              goto LABEL_59;
            }
          }
          else if (!v139)
          {
            goto LABEL_68;
          }
          (*(void (**)(uint64_t, void *))v116)(v235, v234);

          goto LABEL_71;
        }
      }
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void *))v116)(v235, v234);
      uint64_t v59 = v123;
      if (!v115) {
        continue;
      }
      goto LABEL_47;
    }
    break;
  }
  while (1)
  {
    uint64_t v117 = v122 + 1;
    if (__OFADD__(v122, 1)) {
      break;
    }
    if (v117 >= (uint64_t)v227) {
      goto LABEL_77;
    }
    unint64_t v121 = *(void *)(v226 + 8 * v117);
    ++v122;
    if (v121) {
      goto LABEL_58;
    }
  }
LABEL_94:
  __break(1u);
LABEL_95:
  swift_bridgeObjectRetain();
  uint64_t v145 = _CocoaArrayWrapper.endIndex.getter();
  if (!v145) {
    goto LABEL_96;
  }
LABEL_80:
  if (v145 >= 1)
  {
    for (uint64_t i = 0; i != v145; ++i)
    {
      if ((v116 & 0xC000000000000001) != 0) {
        id v147 = (id)MEMORY[0x21054E050](i, v116);
      }
      else {
        id v147 = *(id *)(v116 + 8 * i + 32);
      }
      uint64_t v148 = v147;
      type metadata accessor for AnyCanvasElementView();
      if (swift_dynamicCastClass())
      {
        MEMORY[0x21054D330]();
        if (*(void *)((v236 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v236 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v149 = v236;
    goto LABEL_97;
  }
  __break(1u);
LABEL_123:
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_124:
  swift_bridgeObjectRelease();
  __break(1u);
}

{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  void *v59;
  void (**v60)(uint64_t, void *);
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  void *v78;
  id v79;
  uint64_t v80;
  char *v81;
  id v82;
  char v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  void *v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t);
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t (*v96)(char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  void *v102;
  uint64_t v103;
  void *v104;
  char v105;
  void (*v106)(uint64_t, void *);
  uint64_t v107;
  void *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  void *v112;
  void (*v113)(uint64_t, void *);
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void (**v117)(unint64_t, void *);
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  id v121;
  unint64_t v123;
  uint64_t v124;
  void (**v125)(uint64_t, void *);
  void (*v126)(uint64_t, void *);
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  id v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  id v138;
  id v139;
  id v140;
  id v141;
  unint64_t v142;
  char v143;
  char v144;
  uint64_t *v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  id v151;
  id v152;
  uint64_t v153;
  uint64_t i;
  id v155;
  void *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(uint64_t, uint64_t);
  uint64_t v162;
  void *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  void (*v176)(uint64_t *, void);
  uint64_t *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  id v183;
  uint64_t (*v184)(void);
  void *v185;
  void *v186;
  void *v187;
  id v188;
  id v189;
  uint64_t (*v190)(void);
  void *v191;
  uint64_t v192;
  void *v193;
  id v194;
  void *v195;
  void (*v196)(uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  id v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  void (**v208)(char *, char *, void *);
  char *v209;
  char *v210;
  char *v211;
  uint64_t v212;
  char *v213;
  void (**v214)(char *, uint64_t);
  void (*v215)(char *, char *, uint64_t);
  unsigned int (*v216)(char *, uint64_t, uint64_t);
  uint64_t v217;
  uint64_t v218;
  void (*v219)(char *, uint64_t);
  uint64_t v220;
  void (*v221)(char *, char *, uint64_t);
  uint64_t v222;
  char *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  char *v232;
  void *v233;
  char *v234;
  int64_t v235;
  uint64_t v236;
  char *v237;
  void (**v238)(uint64_t, void *);
  char *v239;
  char *v240;
  void (**v241)(char *, uint64_t);
  uint64_t *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void (**v249)(uint64_t, void *);

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
  MEMORY[0x270FA5388](v2);
  unint64_t v4 = (char *)&v196 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  __n128 v7 = (char *)&v196 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<AnyCanvasElementView>);
  long long v204 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v211 = (char *)&v196 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v203 = (char *)&v196 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v218 = (uint64_t)&v196 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CRKeyPath();
  float64x2_t v240 = *(char **)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v244 = (uint64_t)&v196 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v239 = (char *)&v196 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v210 = (char *)&v196 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v196 - v21;
  uint64_t v229 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v23 = *(void *)(v229 - 8);
  MEMORY[0x270FA5388](v229);
  uint64_t v226 = (char *)&v196 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v228 = (char *)&v196 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v27 = *(void *)(v206 - 8);
  MEMORY[0x270FA5388](v206);
  uint64_t v205 = (char *)&v196 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v231 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v29 = *(void *)(v231 - 8);
  MEMORY[0x270FA5388](v231);
  uint64_t v230 = (char *)&v196 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v202 = *(void *)(v235 - 8);
  double v31 = MEMORY[0x270FA5388](v235);
  unint64_t v234 = (char *)&v196 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v213 = (char *)MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas], v31);
  if (!v213) {
    return;
  }
  v227 = v23;
  uint64_t v209 = v7;
  id v33 = self;
  objc_msgSend(v33, sel_begin);
  uint64_t v201 = v33;
  objc_msgSend(v33, sel_setAnimationDuration_, 0.0);
  char v34 = (void *)MEMORY[0x263F8EED0];
  id v35 = (uint64_t *)&v1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v1) + 0x4D8)];
  swift_beginAccess();
  uint64_t v242 = v35;
  uint64_t v36 = *v35;
  uint64_t v241 = *(void (***)(char *, uint64_t))((*v34 & *(void *)v1) + 0x4D0);
  char v37 = *(void (**)(char *, uint64_t))((char *)v241 + (void)v1);
  uint64_t v233 = (void *)v14;
  uint64_t v212 = v8;
  long long v200 = v2;
  uint64_t v199 = v4;
  uint64_t v232 = v22;
  swift_bridgeObjectRetain();
  if (v37)
  {
    id v38 = v37;
    uint64_t v39 = FormFillingView.unorderedFormFields.getter();
  }
  else
  {
    uint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  uint64_t v40 = 0;
  uint64_t v41 = specialized Dictionary.merging(_:uniquingKeysWith:)(v39, v36);
  uint64_t v238 = (void (**)(uint64_t, void *))specialized Set.init<A>(_:)(v41);
  uint64_t v249 = v238;
  uint64_t v42 = &v1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v1) + 0x380)];
  swift_beginAccess();
  uint64_t v43 = v29;
  uint64_t v44 = v29 + 16;
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  uint64_t v46 = v230;
  uint64_t v223 = v42;
  uint64_t v47 = v231;
  float64_t v222 = v44;
  uint64_t v221 = v45;
  uint64_t v48 = ((uint64_t (*)(char *, char *, uint64_t))v45)(v230, v42, v231);
  MEMORY[0x270FA5388](v48);
  unint64_t v220 = type metadata accessor for Paper();
  *(&v196 - 4) = (void (*)(uint64_t, uint64_t))v220;
  int v49 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  *(&v196 - 3) = (void (*)(uint64_t, uint64_t))v49;
  *(&v196 - 2) = (void (*)(uint64_t, uint64_t))&protocol witness table for Paper;
  swift_getKeyPath();
  int v50 = v205;
  uint64_t v197 = v49;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v51 = *(void (**)(char *, uint64_t))(v43 + 8);
  uint64_t v224 = v43 + 8;
  int v219 = v51;
  v51(v46, v47);
  uint64_t v52 = v206;
  CROrderedSet.makeIterator()();
  uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  uint64_t v198 = v27 + 8;
  uint64_t v196 = v53;
  v53((uint64_t)v50, v52);
  unint64_t v225 = &v213[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasViewController];
  uint64_t v54 = *MEMORY[0x263F8EED0] & *(void *)v1;
  uint64_t v236 = *(void *)(v54 + 0x4C8);
  uint64_t v243 = v1;
  uint64_t v207 = *(void *)(v54 + 1216);
  uint64_t v55 = v228;
  CROrderedSet.Iterator.next()();
  uint64_t v56 = v227;
  uint64_t v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v227 + 48);
  int v58 = v229;
  uint64_t v217 = v227 + 48;
  uint64_t v216 = v57;
  if (v57(v55, 1, v229) == 1)
  {
    uint64_t v59 = v233;
    uint64_t v60 = v238;
    goto LABEL_42;
  }
  uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
  uint64_t v61 = v56 + 32;
  uint64_t v215 = v62;
  uint64_t v238 = (void (**)(uint64_t, void *))(v240 + 8);
  uint64_t v214 = (void (**)(char *, uint64_t))(v61 - 24);
  uint64_t v208 = (void (**)(char *, char *, void *))(v240 + 16);
  uint64_t v59 = v233;
  uint64_t v63 = v242;
  uint64_t v64 = (uint64_t)v232;
  v227 = v61;
  int v65 = v231;
  v62(v226, v55, v58);
  while (1)
  {
    MEMORY[0x21054BEC0](v58);
    uint64_t v68 = v218;
    specialized Set._Variant.remove(_:)(v64, v218);
    outlined destroy of StocksKitCurrencyCache.Provider?(v68, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    uint64_t v69 = *v63;
    char v70 = *(void (**)(char *, uint64_t))((char *)v241 + (void)v243);
    swift_bridgeObjectRetain();
    if (v70)
    {
      char v71 = v70;
      uint64_t v72 = FormFillingView.unorderedFormFields.getter();
    }
    else
    {
      uint64_t v72 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    double v245 = v69;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v72, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v245);
    id v74 = v245;
    swift_bridgeObjectRelease();
    if (v40) {
      goto LABEL_131;
    }
    if (*(void *)(v74 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v64);
      id v76 = v75;
      swift_bridgeObjectRelease();
      if (v76)
      {
        char v77 = *v63;
        uint64_t v78 = *(void (**)(char *, uint64_t))((char *)v241 + (void)v243);
        swift_bridgeObjectRetain();
        if (v78)
        {
          unint64_t v79 = v78;
          char v80 = FormFillingView.unorderedFormFields.getter();
        }
        else
        {
          char v80 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        }
        uint64_t v83 = swift_isUniquelyReferenced_nonNull_native();
        double v245 = v77;
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v80, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v83, (uint64_t)&v245);
        uint64_t v84 = v245;
        swift_bridgeObjectRelease();
        if (!*(void *)(v84 + 16)) {
          goto LABEL_130;
        }
        uint64_t v85 = specialized __RawDictionaryStorage.find<A>(_:)(v64);
        if ((v86 & 1) == 0) {
          goto LABEL_130;
        }
        uint64_t v87 = *(id *)(*(void *)(v84 + 56) + 8 * v85);
        swift_bridgeObjectRelease();
        uint64_t v88 = v230;
        double v89 = v231;
        v221(v230, v223, v231);
        uint64_t v90 = *(void (**)(char *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v87) + 0x130);
        double v91 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
        v90(v88, v220, v91);

        v219(v88, v89);
        (*v238)(v64, v59);
        id v66 = v226;
        int v58 = v229;
        (*v214)(v226, v229);
        uint64_t v40 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    int v81 = v243;
    if (!*(void *)&v243[v236])
    {
      uint64_t v82 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
      objc_msgSend(v81, sel_bounds);
      objc_msgSend(v82, sel_setFrame_);
      objc_msgSend(v82, sel_setClipsToBounds_, 1);
      objc_msgSend(v82, sel_setUserInteractionEnabled_, 0);
      if (*(void *)&v81[v207]) {
        objc_msgSend(v81, sel_insertSubview_belowSubview_, v82);
      }
      else {
        objc_msgSend(v81, sel_addSubview_, v82);
      }
      uint64_t v92 = *(void **)&v81[v236];
      *(void *)&v81[v236] = v82;
    }
    uint64_t v237 = 0;
    SharedTagged_9<>.layout()(&v245);
    uint64_t v93 = v246;
    uint64_t v94 = v247;
    __swift_project_boxed_opaque_existential_1(&v245, v246);
    char v95 = v230;
    v221(v230, v223, v65);
    uint64_t v96 = *(uint64_t (**)(char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 8);
    long long v97 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    long long v98 = v213;
    uint64_t v99 = v213;
    uint64_t v100 = v81;
    long long v101 = v99;
    long long v102 = (void *)v96(v95, v98, v100, v220, v97, v93, v94);

    v219(v95, v65);
    if (!v102)
    {
      uint64_t v64 = (uint64_t)v232;
      uint64_t v59 = v233;
      (*v238)((uint64_t)v232, v233);
      id v66 = v226;
      int v58 = v229;
      (*v214)(v226, v229);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v245);
      uint64_t v40 = v237;
LABEL_9:
      uint64_t v63 = v242;
      uint64_t v67 = v228;
      goto LABEL_10;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v245);
    swift_unknownObjectWeakAssign();
    uint64_t v103 = (uint64_t)v210;
    uint64_t v59 = v233;
    (*v208)(v210, v232, v233);
    uint64_t v63 = v242;
    swift_beginAccess();
    char v104 = v102;
    char v105 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v248 = *v63;
    *uint64_t v63 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v104, v103, v105);
    *uint64_t v63 = v248;
    swift_bridgeObjectRelease();
    uint64_t v106 = *v238;
    (*v238)(v103, v59);
    swift_endAccess();
    char v107 = MEMORY[0x210550400](v225);
    uint64_t v40 = v237;
    uint64_t v67 = v228;
    if (!v107) {
      goto LABEL_37;
    }
    uint64_t v108 = (void *)v107;
    uint64_t v109 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v104) + 0x360))();
    if (!v109)
    {

LABEL_37:
      uint64_t v112 = *(void **)&v243[v236];
      if (v112) {
        objc_msgSend(v112, sel_addSubview_, v104);
      }

      goto LABEL_40;
    }
    unsigned __int8 v110 = (void *)v109;
    objc_msgSend(v108, sel_addChildViewController_, v109);
    uint64_t v111 = *(void **)&v243[v236];
    if (v111) {
      objc_msgSend(v111, sel_addSubview_, v104);
    }
    objc_msgSend(v110, sel_didMoveToParentViewController_, v108);

LABEL_40:
    uint64_t v64 = (uint64_t)v232;
    v106((uint64_t)v232, v59);
    id v66 = v226;
    int v58 = v229;
    (*v214)(v226, v229);
LABEL_10:
    CROrderedSet.Iterator.next()();
    if (v216(v67, 1, v58) == 1) {
      break;
    }
    v215(v66, v67, v58);
  }
  uint64_t v60 = v249;
LABEL_42:
  (*(void (**)(char *, int64_t))(v202 + 8))(v234, v235);
  uint64_t v113 = v60[7];
  unint64_t v234 = (char *)(v60 + 7);
  uint64_t v114 = 1 << *((unsigned char *)v60 + 32);
  unint64_t v115 = -1;
  if (v114 < 64) {
    unint64_t v115 = ~(-1 << v114);
  }
  unint64_t v116 = v115 & (unint64_t)v113;
  uint64_t v235 = (unint64_t)(v114 + 63) >> 6;
  uint64_t v238 = (void (**)(uint64_t, void *))(v240 + 16);
  uint64_t v237 = v240 + 32;
  uint64_t v117 = (void (**)(unint64_t, void *))(v240 + 8);
  swift_bridgeObjectRetain();
  unint64_t v118 = 0;
  if (v116) {
    goto LABEL_48;
  }
  while (2)
  {
    if (__OFADD__(v118++, 1))
    {
      __break(1u);
      goto LABEL_101;
    }
    if (v118 >= v235) {
      goto LABEL_84;
    }
    uint64_t v123 = *(void *)&v234[8 * v118];
    if (v123) {
      goto LABEL_62;
    }
    uint64_t v124 = v118 + 1;
    if (v118 + 1 >= v235) {
      goto LABEL_84;
    }
    uint64_t v123 = *(void *)&v234[8 * v124];
    if (v123) {
      goto LABEL_61;
    }
    uint64_t v124 = v118 + 2;
    if (v118 + 2 >= v235) {
      goto LABEL_84;
    }
    uint64_t v123 = *(void *)&v234[8 * v124];
    if (v123) {
      goto LABEL_61;
    }
    uint64_t v124 = v118 + 3;
    if (v118 + 3 >= v235) {
      goto LABEL_84;
    }
    uint64_t v123 = *(void *)&v234[8 * v124];
    if (v123) {
      goto LABEL_61;
    }
    uint64_t v124 = v118 + 4;
    if (v118 + 4 >= v235)
    {
LABEL_84:
      swift_release();
      uint64_t v59 = v243;
      uint64_t v150 = *(void **)&v243[v236];
      uint64_t v151 = v213;
      if (!v150)
      {
        swift_bridgeObjectRelease();
LABEL_106:
        objc_msgSend(v201, sel_commit);

        return;
      }
      float64x2_t v240 = v150;
      uint64_t v152 = objc_msgSend(v240, sel_subviews);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      unint64_t v118 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      double v245 = MEMORY[0x263F8EE78];
      if ((unint64_t)v118 >> 62) {
        goto LABEL_102;
      }
      uint64_t v153 = *(void *)((v118 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v153) {
        goto LABEL_87;
      }
LABEL_103:
      swift_bridgeObjectRelease();
      uint64_t v157 = MEMORY[0x263F8EE78];
LABEL_104:
      swift_bridgeObjectRelease();
      uint64_t v158 = v230;
      uint64_t v159 = v231;
      uint64_t v160 = ((uint64_t (*)(char *, char *, uint64_t))v221)(v230, v223, v231);
      MEMORY[0x270FA5388](v160);
      uint64_t v161 = (void (*)(uint64_t, uint64_t))v197;
      *(&v196 - 4) = (void (*)(uint64_t, uint64_t))v220;
      *(&v196 - 3) = v161;
      *(&v196 - 2) = (void (*)(uint64_t, uint64_t))&protocol witness table for Paper;
      swift_getKeyPath();
      uint64_t v162 = (uint64_t)v205;
      Capsule<>.subscript.getter();
      swift_release();
      v219(v158, v159);
      long long v163 = v59;
      uint64_t v164 = specialized Sequence.compactMap<A>(_:)(v162, v163);

      v196(v162, v206);
      swift_bridgeObjectRelease();
      double v245 = v164;
      uint64_t v248 = v157;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyCanvasElementView]);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [AnyCanvasElementView] and conformance [A], &demangling cache variable for type metadata for [AnyCanvasElementView]);
      _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5(&lazy protocol witness table cache variable for type AnyCanvasElementView and conformance NSObject, (void (*)(uint64_t))type metadata accessor for AnyCanvasElementView);
      dispatch_group_t v165 = v203;
      BidirectionalCollection<>.difference<A>(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v166 = (uint64_t)v199;
      uint64_t v167 = v212;
      uint64_t v243 = *(char **)(v204 + 16);
      uint64_t v244 = v204 + 16;
      ((void (*)(char *, char *, uint64_t))v243)(v199, v165, v212);
      uint64_t v168 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CollectionDifference<AnyCanvasElementView> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<AnyCanvasElementView>);
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v169 = v200;
      *(void *)(v166 + *(int *)(v200 + 36)) = v245;
      uint64_t v170 = v166;
      uint64_t v171 = (uint64_t)v209;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v170, (uint64_t)v209, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
      uint64_t v172 = (uint64_t *)(v171 + *(int *)(v169 + 36));
      uint64_t v173 = *v172;
      dispatch thunk of Collection.endIndex.getter();
      if (v173 == v245)
      {
LABEL_105:

        outlined destroy of StocksKitCurrencyCache.Provider?(v171, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
        (*(void (**)(char *, uint64_t))(v204 + 8))(v203, v167);
        uint64_t v151 = v213;
        goto LABEL_106;
      }
      uint64_t v241 = (void (**)(char *, uint64_t))(v204 + 8);
      uint64_t v242 = (uint64_t *)v168;
      while (1)
      {
        uint64_t v176 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
        id v179 = *v177;
        id v178 = (void *)v177[1];
        id v180 = *((unsigned __int8 *)v177 + 25);
        outlined copy of CollectionDifference<PDFPage>.Change(*v177, v178, v177[2], *((unsigned __int8 *)v177 + 24), v180);
        v176(&v245, 0);
        uint64_t v181 = v211;
        ((void (*)(char *, uint64_t, uint64_t))v243)(v211, v171, v167);
        dispatch thunk of Collection.formIndex(after:)();
        (*v241)(v181, v167);
        uint64_t v182 = MEMORY[0x210550400](v225);
        uint64_t v183 = (id)v182;
        if (v180 == 1) {
          break;
        }
        if (v182)
        {
          uint64_t v190 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v178) + 0x360);
          uint64_t v191 = v178;
          uint64_t v192 = v190();
          if (v192)
          {
            id v193 = (void *)v192;
            objc_msgSend(v183, sel_addChildViewController_, v192);
            objc_msgSend(v240, sel_insertSubview_atIndex_, v191, v179);
            uint64_t v194 = v183;
            objc_msgSend(v193, sel_didMoveToParentViewController_, v194);
            outlined consume of CollectionDifference<PDFPage>.Change();
            outlined consume of CollectionDifference<PDFPage>.Change();

            uint64_t v171 = (uint64_t)v209;
            goto LABEL_113;
          }

          uint64_t v171 = (uint64_t)v209;
        }
        else
        {
          unint64_t v195 = v178;
        }
        objc_msgSend(v240, sel_insertSubview_atIndex_, v178, v179);
        outlined consume of CollectionDifference<PDFPage>.Change();
LABEL_112:
        outlined consume of CollectionDifference<PDFPage>.Change();
LABEL_113:
        uint64_t v175 = *v172;
        uint64_t v167 = v212;
        dispatch thunk of Collection.endIndex.getter();
        if (v175 == v245) {
          goto LABEL_105;
        }
      }
      if (v182)
      {
        dispatch_group_t v184 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v178) + 0x360);
        id v185 = v178;
        uint64_t v186 = (void *)v184();
        if (v186)
        {
          uint64_t v187 = v186;
          objc_msgSend(v186, sel_willMoveToParentViewController_, 0);
          objc_msgSend(v185, sel_removeFromSuperview);
          id v188 = objc_msgSend(v187, sel_parentViewController);
          uint64_t v171 = (uint64_t)v209;
          if (v188 && (uint64_t v189 = v188, v188, v189 == v183)) {
            objc_msgSend(v183, sel_removeChildViewController_, v187);
          }
          else {
            objc_msgSend(v187, sel_removeFromParentViewController);
          }

          goto LABEL_111;
        }

        uint64_t v171 = (uint64_t)v209;
      }
      else
      {
        id v174 = v178;
      }
      objc_msgSend(v178, sel_removeFromSuperview);
LABEL_111:
      outlined consume of CollectionDifference<PDFPage>.Change();
      goto LABEL_112;
    }
    uint64_t v123 = *(void *)&v234[8 * v124];
    if (v123)
    {
LABEL_61:
      unint64_t v118 = v124;
LABEL_62:
      unint64_t v116 = (v123 - 1) & v123;
      uint64_t v120 = __clz(__rbit64(v123)) + (v118 << 6);
LABEL_63:
      id v125 = v60;
      unint64_t v126 = v60[6];
      uint64_t v128 = v239;
      id v127 = v240;
      uint64_t v129 = *((void *)v240 + 9);
      (*((void (**)(char *, unint64_t, void *))v240 + 2))(v239, (unint64_t)v126 + v129 * v120, v59);
      (*((void (**)(uint64_t, char *, void *))v127 + 4))(v244, v128, v59);
      uint64_t v130 = *v242;
      id v131 = *(void (**)(char *, uint64_t))((char *)v241 + (void)v243);
      swift_bridgeObjectRetain();
      if (v131)
      {
        uint64_t v132 = v131;
        char v133 = FormFillingView.unorderedFormFields.getter();
      }
      else
      {
        char v133 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      }
      uint64_t v134 = swift_isUniquelyReferenced_nonNull_native();
      double v245 = v130;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v133, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v134, (uint64_t)&v245);
      unint64_t v135 = v245;
      swift_bridgeObjectRelease();
      if (v40) {
        goto LABEL_131;
      }
      if (*(void *)(v135 + 16) && (char v136 = specialized __RawDictionaryStorage.find<A>(_:)(v244), (v137 & 1) != 0))
      {
        id v138 = *(id *)(*(void *)(v135 + 56) + 8 * v136);
        swift_bridgeObjectRelease();
        id v139 = objc_msgSend(v138, sel_superview);
        id v140 = *(id *)&v243[v236];
        if (v139)
        {
          uint64_t v141 = v139;

          if (v140 && v141 == v140)
          {
LABEL_72:
            swift_beginAccess();
            swift_bridgeObjectRetain();
            BOOL v142 = specialized __RawDictionaryStorage.find<A>(_:)(v244);
            id v144 = v143;
            swift_bridgeObjectRelease();
            if (v144)
            {
              uint64_t v145 = v242;
              dispatch_group_t v146 = swift_isUniquelyReferenced_nonNull_native();
              id v147 = *v145;
              uint64_t v248 = *v145;
              *uint64_t v145 = 0x8000000000000000;
              if ((v146 & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                id v147 = v248;
              }
              (*v117)(*(void *)(v147 + 48) + v142 * v129, v233);
              uint64_t v148 = v248;
              uint64_t v149 = *(void **)(*(void *)(v248 + 56) + 8 * v142);
              specialized _NativeDictionary._delete(at:)(v142, v248);
              *uint64_t v145 = v148;

              swift_bridgeObjectRelease();
            }
            swift_endAccess();

            uint64_t v59 = v233;
            (*v117)(v244, v233);
            goto LABEL_78;
          }
        }
        else if (!v140)
        {
          unint64_t v121 = 0;
          goto LABEL_72;
        }
        (*v117)(v244, v59);

        uint64_t v60 = v125;
        if (!v116) {
          continue;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        (*v117)(v244, v59);
LABEL_78:
        uint64_t v60 = v125;
        if (!v116) {
          continue;
        }
      }
LABEL_48:
      unint64_t v119 = __clz(__rbit64(v116));
      v116 &= v116 - 1;
      uint64_t v120 = v119 | (v118 << 6);
      goto LABEL_63;
    }
    break;
  }
  while (1)
  {
    unint64_t v118 = v124 + 1;
    if (__OFADD__(v124, 1)) {
      break;
    }
    if (v118 >= v235) {
      goto LABEL_84;
    }
    uint64_t v123 = *(void *)&v234[8 * v118];
    ++v124;
    if (v123) {
      goto LABEL_62;
    }
  }
LABEL_101:
  __break(1u);
LABEL_102:
  swift_bridgeObjectRetain();
  uint64_t v153 = _CocoaArrayWrapper.endIndex.getter();
  if (!v153) {
    goto LABEL_103;
  }
LABEL_87:
  if (v153 >= 1)
  {
    for (uint64_t i = 0; i != v153; ++i)
    {
      if ((v118 & 0xC000000000000001) != 0) {
        uint64_t v155 = (id)MEMORY[0x21054E050](i, v118);
      }
      else {
        uint64_t v155 = *(id *)(v118 + 8 * i + 32);
      }
      uint64_t v156 = v155;
      type metadata accessor for AnyCanvasElementView();
      if (swift_dynamicCastClass())
      {
        MEMORY[0x21054D330]();
        if (*(void *)((v245 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v245 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v157 = v245;
    goto LABEL_104;
  }
  __break(1u);
LABEL_130:
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_131:
  swift_bridgeObjectRelease();
  __break(1u);
}

void specialized ContainerCanvasElementView.updateDrawing()()
{
}

void specialized ContainerCanvasElementView.updateDrawing()(uint64_t *a1, uint64_t (*a2)(void, double), unint64_t *a3, void (*a4)(uint64_t), void (*a5)(char *, uint64_t), uint64_t a6, void (*a7)(void), unint64_t *a8, void (*a9)(uint64_t))
{
  uint64_t v197 = a8;
  dispatch_group_t v184 = a7;
  uint64_t v206 = a6;
  uint64_t v203 = a5;
  uint64_t v207 = a4;
  uint64_t v202 = a3;
  uint64_t v201 = a2;
  uint64_t v11 = v9;
  uint64_t v196 = a9;
  uint64_t v190 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v173 = *(void *)(v190 - 8);
  MEMORY[0x270FA5388](v190);
  uint64_t v172 = (char *)&v167 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v186 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v186);
  id v185 = (char *)&v167 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v204 = *(void *)(v205 - 8);
  MEMORY[0x270FA5388](v205);
  id v178 = (char *)&v167 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CRKeyPath();
  uint64_t v199 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v171 = (char *)&v167 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x270FA5388](v182);
  uint64_t v183 = (uint64_t)&v167 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v187 = *(void *)(v188 - 8);
  MEMORY[0x270FA5388](v188);
  uint64_t v170 = (char *)&v167 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v191 = (char *)&v167 - v20;
  uint64_t v192 = type metadata accessor for PKDrawing();
  uint64_t v177 = *(void *)(v192 - 8);
  MEMORY[0x270FA5388](v192);
  uint64_t v176 = (char *)&v167 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  id v179 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v167 - v23);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v26 = (char *)&v167 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v189 = (uint64_t)&v167 - v28;
  MEMORY[0x270FA5388](v29);
  uint64_t v198 = (uint64_t)&v167 - v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v208 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  id v33 = (char *)&v167 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  uint64_t v175 = (char *)&v167 - v35;
  MEMORY[0x270FA5388](v36);
  uint64_t v181 = (char *)&v167 - v37;
  MEMORY[0x270FA5388](v38);
  uint64_t v40 = (char *)&v167 - v39;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v41 - 8);
  id v174 = (char *)&v167 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v43);
  id v180 = (char *)&v167 - v44;
  MEMORY[0x270FA5388](v45);
  uint64_t v47 = (char *)&v167 - v46;
  uint64_t v48 = (void *)MEMORY[0x263F8EED0];
  BOOL v49 = 1;
  uint64_t v200 = *(void *)((*MEMORY[0x263F8EED0] & *v9) + 0x4F8);
  *((unsigned char *)v9 + v20CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 1;
  if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) == 0)
  {
    id v193 = v26;
    uint64_t v194 = v15;
    unint64_t v195 = v33;
    uint64_t v50 = *(void *)((*v48 & *v9) + 0x380);
    uint64_t v169 = v9;
    uint64_t v51 = (char *)v9 + v50;
    swift_beginAccess();
    uint64_t v52 = v208;
    uint64_t v168 = *(uint64_t (**)(char *, char *, uint64_t))(v208 + 16);
    uint64_t v53 = v168(v40, v51, v31);
    double v54 = MEMORY[0x270FA5388](v53);
    uint64_t v167 = v201(0, v54);
    *(&v167 - 4) = v167;
    uint64_t v55 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5(v202, v207);
    uint64_t v56 = v206;
    *(&v167 - 3) = v55;
    *(&v167 - 2) = v56;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v57 = *(void (**)(char *, uint64_t))(v52 + 8);
    v57(v40, v31);
    uint64_t v58 = v204;
    uint64_t v59 = v205;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v204 + 48))(v47, 1, v205) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v47, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      BOOL v49 = 0;
      uint64_t v11 = v169;
      uint64_t v48 = (void *)MEMORY[0x263F8EED0];
      id v33 = v195;
    }
    else
    {
      uint64_t v60 = v195;
      v168(v195, v51, v31);
      _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5(v197, v207);
      uint64_t v61 = (uint64_t)v185;
      Ref.subscript.getter();
      v57(v60, v31);
      id v33 = v60;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v47, v59);
      uint64_t v62 = v173;
      uint64_t v63 = v172;
      uint64_t v64 = v190;
      (*(void (**)(char *, uint64_t, uint64_t))(v173 + 16))(v172, v61 + *(int *)(v186 + 20), v190);
      _s8PaperKit15PKDrawingStructVWOhTm_2(v61, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
      uint64_t v65 = CROrderedSet.count.getter();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v64);
      BOOL v49 = v65 > 0;
      uint64_t v11 = v169;
      uint64_t v48 = (void *)MEMORY[0x263F8EED0];
    }
    uint64_t v15 = v194;
    uint64_t v26 = v193;
  }
  uint64_t v66 = *(void *)((*v48 & *v11) + 0x4C0);
  uint64_t v67 = *(void **)((char *)v11 + v66);
  if (!v67) {
    goto LABEL_25;
  }
  uint64_t v190 = v31;
  uint64_t v68 = v67;
  uint64_t v69 = v68;
  if (v49)
  {
    id v193 = v26;
    id v70 = objc_msgSend(v68, sel_drawing);
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    type metadata accessor for PKDrawingCoherence(0);
    int v71 = swift_dynamicCast();
    unint64_t v195 = v33;
    uint64_t v173 = v66;
    uint64_t v194 = v15;
    uint64_t v169 = v69;
    if (v71)
    {
      uint64_t v72 = v15;
      uint64_t v73 = (void *)v211;
      uint64_t v74 = v211 + OBJC_IVAR___PKDrawingCoherence_model;
      swift_beginAccess();
      uint64_t v75 = v187;
      id v76 = v191;
      uint64_t v77 = v188;
      (*(void (**)(char *, uint64_t, uint64_t))(v187 + 16))(v191, v74, v188);

      _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
      uint64_t v78 = v198;
      Capsule<>.rootID.getter();
      (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v77);
      unint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v199 + 56);
      uint64_t v80 = v78;
      uint64_t v81 = 0;
      uint64_t v82 = v72;
    }
    else
    {
      unint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v199 + 56);
      uint64_t v80 = v198;
      uint64_t v81 = 1;
      uint64_t v82 = v15;
    }
    id v179 = v79;
    v79(v80, v81, 1, v82);
    uint64_t v83 = v207;
    uint64_t v84 = v189;
    uint64_t v85 = (char *)v11 + *(void *)((*v48 & *v11) + 0x380);
    swift_beginAccess();
    uint64_t v86 = v208;
    uint64_t v87 = v181;
    uint64_t v88 = v190;
    uint64_t v89 = (*(uint64_t (**)(char *, char *, uint64_t))(v208 + 16))(v181, v85, v190);
    double v90 = MEMORY[0x270FA5388](v89);
    *(&v167 - 4) = v201(0, v90);
    uint64_t v91 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5(v202, v83);
    uint64_t v92 = v206;
    *(&v167 - 3) = v91;
    *(&v167 - 2) = v92;
    swift_getKeyPath();
    uint64_t v93 = v180;
    Capsule<>.subscript.getter();
    uint64_t v94 = (uint64_t)v93;
    swift_release();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
    uint64_t v95 = v204;
    uint64_t v96 = v93;
    uint64_t v97 = v205;
    int v98 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v204 + 48))(v96, 1, v205);
    LODWORD(v172) = v49;
    if (v98 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v94, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      uint64_t v99 = 1;
    }
    else
    {
      Ref.id.getter();
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v97);
      uint64_t v99 = 0;
    }
    uint64_t v100 = (uint64_t)v193;
    uint64_t v101 = v198;
    uint64_t v102 = v199;
    uint64_t v103 = v194;
    v179(v84, v99, 1, v194);
    uint64_t v104 = v183;
    uint64_t v105 = v183 + *(int *)(v182 + 48);
    outlined init with copy of CRKeyPath?(v101, v183);
    outlined init with copy of CRKeyPath?(v84, v105);
    uint64_t v106 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
    int v107 = v106(v104, 1, v103);
    id v33 = v195;
    if (v107 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v84, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v101, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      int v108 = v106(v105, 1, v103);
      uint64_t v48 = (void *)MEMORY[0x263F8EED0];
      uint64_t v66 = v173;
      BOOL v49 = (int)v172;
      if (v108 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v104, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        uint64_t v69 = v169;
        goto LABEL_22;
      }
    }
    else
    {
      outlined init with copy of CRKeyPath?(v104, v100);
      int v109 = v106(v105, 1, v103);
      BOOL v49 = (int)v172;
      if (v109 != 1)
      {
        uint64_t v110 = v103;
        uint64_t v111 = v199;
        uint64_t v112 = v100;
        uint64_t v113 = v171;
        (*(void (**)(char *, uint64_t, uint64_t))(v199 + 32))(v171, v105, v110);
        _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
        char v114 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v115 = *(void (**)(char *, uint64_t))(v111 + 8);
        v115(v113, v110);
        outlined destroy of StocksKitCurrencyCache.Provider?(v189, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v198, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        v115((char *)v112, v110);
        outlined destroy of StocksKitCurrencyCache.Provider?(v104, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        uint64_t v48 = (void *)MEMORY[0x263F8EED0];
        uint64_t v66 = v173;
        uint64_t v69 = v169;
        if (v114) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v189, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v198, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      (*(void (**)(uint64_t, uint64_t))(v199 + 8))(v100, v103);
      uint64_t v48 = (void *)MEMORY[0x263F8EED0];
      uint64_t v66 = v173;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v104, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
    uint64_t v69 = v169;
  }
LABEL_21:
  objc_msgSend(v69, sel_removeFromSuperview);
  unint64_t v116 = *(void **)((char *)v11 + v66);
  *(void *)((char *)v11 + v66) = 0;

  uint64_t v69 = v116;
LABEL_22:

  uint64_t v117 = *(void **)((char *)v11 + v66);
  uint64_t v31 = v190;
  if (v117)
  {
    unint64_t v118 = (char *)v11 + *(void *)((*v48 & *v11) + 0x380);
    swift_beginAccess();
    uint64_t v119 = v208;
    (*(void (**)(char *, char *, uint64_t))(v208 + 16))(v33, v118, v31);
    id v120 = v117;
    char v121 = specialized CanvasElementDrawingView.merge<A>(_:)((uint64_t)v33, v184, v197, v207, v196);

    (*(void (**)(char *, uint64_t))(v119 + 8))(v33, v31);
    if ((v121 & 1) == 0) {
      goto LABEL_32;
    }
    goto LABEL_30;
  }
LABEL_25:
  if (!v49) {
    goto LABEL_32;
  }
  uint64_t v173 = v66;
  uint64_t v122 = (uint64_t)v11 + *(void *)((*v48 & *v11) + 0x380);
  swift_beginAccess();
  uint64_t v123 = v208;
  uint64_t v124 = *(void (**)(uint64_t))(v208 + 16);
  id v125 = v175;
  uint64_t v198 = v122;
  uint64_t v197 = (unint64_t *)(v208 + 16);
  uint64_t v196 = v124;
  uint64_t v126 = ((uint64_t (*)(char *, uint64_t, uint64_t))v124)(v175, v122, v31);
  double v127 = MEMORY[0x270FA5388](v126);
  uint64_t v201 = (uint64_t (*)(void, double))v201(0, v127);
  *(&v167 - 4) = (uint64_t)v201;
  uint64_t v128 = (void (*)(uint64_t))_s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5(v202, v207);
  uint64_t v129 = v206;
  *(&v167 - 3) = (uint64_t)v128;
  *(&v167 - 2) = v129;
  swift_getKeyPath();
  uint64_t v130 = (uint64_t)v174;
  uint64_t v207 = v128;
  Capsule<>.subscript.getter();
  swift_release();
  id v131 = *(void (**)(char *, uint64_t))(v123 + 8);
  v131(v125, v31);
  uint64_t v132 = v204;
  uint64_t v133 = v205;
  int v134 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v204 + 48))(v130, 1, v205);
  uint64_t v203 = v131;
  if (v134 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v130, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    long long v135 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
    long long v211 = *MEMORY[0x263F001A0];
    long long v212 = v135;
    type metadata accessor for CGRect(0);
    _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
    char v136 = v185;
    CRRegister.init(wrappedValue:)();
    uint64_t v137 = v186;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    uint64_t v208 = v123 + 8;
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    CROrderedSet.init()();
    *(void *)&v136[*(int *)(v137 + 24)] = MEMORY[0x263F8EE80];
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRKeyPath>);
    uint64_t v138 = swift_allocObject();
    *(_OWORD *)(v138 + 16) = xmmword_20C835740;
    ((void (*)(char *, uint64_t, uint64_t))v196)(v33, v198, v31);
    Capsule<>.rootID.getter();
    v131(v33, v31);
    CRKeyPath.init(_:)();
    *(void *)&long long v211 = v138;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A], &demangling cache variable for type metadata for [CRKeyPath]);
    CRKeyPath.init<A>(_:)();
    _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
    id v139 = v191;
    Capsule<>.init(_:id:)();
    uint64_t v140 = v187;
    uint64_t v141 = *(void (**)(char *, char *, uint64_t))(v187 + 16);
    BOOL v142 = v170;
    uint64_t v143 = v188;
    v141(v170, v139, v188);
    id v144 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
    uint64_t v145 = (char *)objc_allocWithZone(v144);
    v141(&v145[OBJC_IVAR___PKDrawingCoherence_model], v142, v143);
    v210.receiver = v145;
    v210.super_class = v144;
    id v146 = objc_msgSendSuper2(&v210, sel_init);
    id v147 = *(void (**)(char *, uint64_t))(v140 + 8);
    v147(v142, v143);
    v147(v191, v143);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v132 + 32))(v178, v130, v133);
    ((void (*)(char *, uint64_t, uint64_t))v196)(v33, v198, v31);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
    uint64_t v148 = v191;
    Capsule.encapsulate<A>(_:)();
    v131(v33, v31);
    uint64_t v149 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
    id v150 = objc_allocWithZone(v149);
    uint64_t v151 = v132;
    uint64_t v152 = v187;
    uint64_t v153 = v188;
    (*(void (**)(uint64_t, char *, uint64_t))(v187 + 16))((uint64_t)v150 + OBJC_IVAR___PKDrawingCoherence_model, v148, v188);
    v209.receiver = v150;
    v209.super_class = v149;
    id v146 = objc_msgSendSuper2(&v209, sel_init);
    (*(void (**)(char *, uint64_t))(v152 + 8))(v148, v153);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v178, v205);
  }
  uint64_t v154 = ((uint64_t (*)(char *, uint64_t, uint64_t))v196)(v33, v198, v31);
  MEMORY[0x270FA5388](v154);
  uint64_t v155 = v207;
  *(&v167 - 4) = (uint64_t)v201;
  *(&v167 - 3) = (uint64_t)v155;
  *(&v167 - 2) = v206;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v203(v33, v31);
  long long v156 = v212;
  id v157 = v146;
  uint64_t v158 = v176;
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  id v159 = objc_allocWithZone((Class)type metadata accessor for CanvasElementDrawingView());
  PKDrawing._bridgeToObjectiveC()(v160);
  uint64_t v162 = v161;
  id v163 = objc_msgSend(v159, sel_initWithFrame_drawing_, v161, 0.0, 0.0, v156);

  (*(void (**)(char *, uint64_t))(v177 + 8))(v158, v192);
  objc_msgSend(v163, sel_setUserInteractionEnabled_, 0);
  swift_unknownObjectWeakAssign();
  objc_msgSend(v11, sel_addSubview_, v163);
  uint64_t v164 = *(void **)((char *)v11 + v173);
  *(void *)((char *)v11 + v173) = v163;

  uint64_t v48 = (void *)MEMORY[0x263F8EED0];
LABEL_30:
  dispatch_group_t v165 = (void *)MEMORY[0x210550400]((char *)v11 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v165)
  {
    uint64_t v166 = v165;
    (*(void (**)(void))((*v48 & *v165) + 0x578))();
  }
LABEL_32:
  *((unsigned char *)v11 + v20CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0;
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

void @objc PaperView.init(coder:)()
{
}

Swift::Void __swiftcall PaperView.updateUI()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v30 - v7;
  specialized CanvasElementView.updateUI()();
  specialized ContainerCanvasElementView.updateDrawing()((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>, (uint64_t (*)(void, double))type metadata accessor for Paper, (unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper, (void (*)(char *, uint64_t))&protocol conformance descriptor for Paper, (uint64_t)&protocol witness table for Paper, (void (*)(void))type metadata accessor for Paper, &lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))&protocol conformance descriptor for Paper);
  specialized ContainerCanvasElementView.updateSubelements()();
  uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  uint64_t v10 = *MEMORY[0x263F8EED0] & *v0;
  uint64_t v11 = *(void **)((char *)v0 + *(void *)(v10 + 0x4D0));
  if (v11)
  {
    id v12 = v11;
    FormFillingView.updateUI()();

    uint64_t v10 = *v9 & *v1;
  }
  uint64_t v13 = (char *)v1 + *(void *)(v10 + 896);
  swift_beginAccess();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v14(v8, v13, v2);
  swift_getKeyPath();
  uint64_t v33 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v35 = v3 + 8;
  uint64_t v32 = v15;
  v15(v8, v2);
  uint64_t v16 = v36;
  if (v36)
  {
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v36);

    goto LABEL_8;
  }
  uint64_t v18 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  if (v18)
  {

LABEL_7:
    id v17 = objc_msgSend(self, sel_systemBackgroundColor);
    goto LABEL_8;
  }
  uint64_t v28 = (unsigned char *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (!v28) {
    goto LABEL_7;
  }
  char v29 = v28[OBJC_IVAR____TtC8PaperKit9AnyCanvas_transparentBackground];

  if ((v29 & 1) == 0) {
    goto LABEL_7;
  }
  id v17 = 0;
LABEL_8:
  id v19 = objc_msgSend(v1, sel_backgroundColor);
  id v34 = v17;
  if (v19)
  {
    uint64_t v20 = v19;
    if (v17)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      id v21 = v17;
      uint64_t v31 = v14;
      id v22 = v21;
      id v23 = v20;
      char v24 = static NSObject.== infix(_:_:)();

      id v17 = v34;
      uint64_t v14 = v31;
      if (v24) {
        goto LABEL_16;
      }
    }
    else
    {
    }
LABEL_15:
    objc_msgSend(v1, sel_setBackgroundColor_, v17);
    goto LABEL_16;
  }
  if (v17) {
    goto LABEL_15;
  }
LABEL_16:
  unsigned int v25 = objc_msgSend(v1, sel_isHidden);
  v14(v5, v13, v2);
  swift_getKeyPath();
  uint64_t v26 = v14;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v27 = v32;
  v32(v5, v2);
  if (v25 != v36)
  {
    v26(v5, v13, v2);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v27(v5, v2);
    objc_msgSend(v1, sel_setHidden_, v36);
  }
}

uint64_t key path getter for CanvasElement.isHidden : Paper@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3 & 1;
  return result;
}

uint64_t PaperView.modifiableProperties.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v5, v1);
  swift_getKeyPath();
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v6 = 13;
  if ((v9 & 0x80) == 0) {
    uint64_t v6 = 15;
  }
  uint64_t v7 = 5;
  if ((v9 & 0x80) == 0) {
    uint64_t v7 = 7;
  }
  if ((v9 & 0x10) != 0) {
    uint64_t v6 = v7;
  }
  if ((v9 & 4) != 0) {
    return 0;
  }
  else {
    return v6;
  }
}

id PaperView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PaperView()
{
  uint64_t result = type metadata singleton initialization cache for PaperView;
  if (!type metadata singleton initialization cache for PaperView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PaperView()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for PaperView()
{
  return type metadata accessor for PaperView();
}

uint64_t sub_20C7FEAE4(char *a1)
{
  return specialized CanvasElement.isHidden.setter(*a1);
}

uint64_t sub_20C7FEB14()
{
  return 24;
}

__n128 sub_20C7FEB20(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

id specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView))
              + 48);
  uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView))
              + 48);
  id v8 = *(id *)(a1 + v4);
  uint64_t v6 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  *(void *)(a2 + v5) = v8;
  return v8;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView)?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = *v1;
  uint64_t v15 = v1[1];
  uint64_t v17 = v1[2];
  int64_t v16 = v1[3];
  int64_t v18 = v16;
  unint64_t v19 = v1[4];
  uint64_t v38 = v6;
  uint64_t v41 = v17;
  if (v19)
  {
    uint64_t v39 = v15;
    uint64_t v40 = v10;
    uint64_t v20 = a1;
    uint64_t v21 = (v19 - 1) & v19;
    unint64_t v22 = __clz(__rbit64(v19)) | (v16 << 6);
LABEL_3:
    uint64_t v23 = *(void *)(v14 + 48);
    uint64_t v24 = v14;
    uint64_t v25 = type metadata accessor for CRKeyPath();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v13, v23 + *(void *)(*(void *)(v25 - 8) + 72) * v22, v25);
    uint64_t v26 = *(void **)(*(void *)(v24 + 56) + 8 * v22);
    *(void *)&v13[*(int *)(v3 + 48)] = v26;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
    id v27 = v26;
    a1 = v20;
    uint64_t v15 = v39;
    uint64_t v10 = v40;
    goto LABEL_23;
  }
  int64_t v28 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v29 = (unint64_t)(v17 + 64) >> 6;
  if (v28 < v29)
  {
    unint64_t v30 = *(void *)(v15 + 8 * v28);
    if (v30)
    {
LABEL_7:
      uint64_t v39 = v15;
      uint64_t v40 = v10;
      uint64_t v20 = a1;
      uint64_t v21 = (v30 - 1) & v30;
      unint64_t v22 = __clz(__rbit64(v30)) + (v28 << 6);
      int64_t v18 = v28;
      goto LABEL_3;
    }
    int64_t v31 = v16 + 2;
    int64_t v18 = v16 + 1;
    if (v16 + 2 < v29)
    {
      unint64_t v30 = *(void *)(v15 + 8 * v31);
      if (v30)
      {
LABEL_10:
        int64_t v28 = v31;
        goto LABEL_7;
      }
      int64_t v18 = v16 + 2;
      if (v16 + 3 < v29)
      {
        unint64_t v30 = *(void *)(v15 + 8 * (v16 + 3));
        if (v30)
        {
          int64_t v28 = v16 + 3;
          goto LABEL_7;
        }
        int64_t v31 = v16 + 4;
        int64_t v18 = v16 + 3;
        if (v16 + 4 < v29)
        {
          unint64_t v30 = *(void *)(v15 + 8 * v31);
          if (v30) {
            goto LABEL_10;
          }
          int64_t v28 = v16 + 5;
          int64_t v18 = v16 + 4;
          if (v16 + 5 < v29)
          {
            unint64_t v30 = *(void *)(v15 + 8 * v28);
            if (v30) {
              goto LABEL_7;
            }
            int64_t v18 = v29 - 1;
            int64_t v32 = v16 + 6;
            while (v29 != v32)
            {
              unint64_t v30 = *(void *)(v15 + 8 * v32++);
              if (v30)
              {
                int64_t v28 = v32 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v24 = v14;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, 1, 1, v3);
  uint64_t v21 = 0;
LABEL_23:
  uint64_t *v1 = v24;
  v1[1] = v15;
  _OWORD v1[2] = v41;
  v1[3] = v18;
  v1[4] = v21;
  uint64_t v33 = (void (*)(uint64_t))v1[5];
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v13, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView)?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(a1, 1, 1, v34);
  }
  else
  {
    uint64_t v35 = (uint64_t)v10;
    uint64_t v36 = (uint64_t)v38;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v35, (uint64_t)v38, &demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
    v33(v36);
    outlined destroy of StocksKitCurrencyCache.Provider?(v36, &demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(a1, 0, 1, v37);
  }
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  uint64_t *v1 = v3;
  v1[1] = v4;
  _OWORD v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  unint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v23, (uint64_t)v22, &demangling cache variable for type metadata for (key: String, value: Any)?);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for (key: String, value: Any));
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_20C7FFBC4()
{
  return 24;
}

__n128 sub_20C7FFBD0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void sub_20C7FFBE4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(double *)a3 = (*(double (**)(void))(*(void *)(a2 + a1 - 8) + 16))(*(void *)(a2 + a1 - 24));
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v6;
}

uint64_t sub_20C7FFC34(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, double, double, double, double))(*(void *)(a4 + a3 - 8) + 24))(*(void *)(a4 + a3 - 24), *(void *)(a4 + a3 - 8), *a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_20C7FFC84()
{
  return 24;
}

__n128 sub_20C7FFC90(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_5(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8PaperKit15PKDrawingStructVWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *specialized PaperView.init(canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, a1, v6, v8);
  uint64_t v11 = specialized ContainerCanvasElementView.init(canvasElement:canvas:parentCanvasElement:)((uint64_t)v10, a2, a3);
  id v12 = objc_msgSend(v11, sel_layer);
  objc_msgSend(v12, sel_setCornerRadius_, 4.0);

  uint64_t v13 = (void *)MEMORY[0x21054D080](0xD000000000000019, 0x800000020C861110);
  objc_msgSend(v11, sel_setAccessibilityIdentifier_, v13);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v11;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v38 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v37 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v36 = (char *)v32 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v35 = (char *)v32 - v14;
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15) {
    return MEMORY[0x263F8EE78];
  }
  v32[2] = v1;
  uint64_t v16 = *(void *)(type metadata accessor for PKStroke() - 8);
  uint64_t v17 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  int64_t v18 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v33 = *(void *)(v16 + 72);
  v32[1] = a1;
  swift_bridgeObjectRetain();
  unint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t v34 = v8;
  uint64_t v40 = v7;
  uint64_t v39 = v10;
  do
  {
    isCGFloat a = PKStroke._bridgeToObjectiveC()().super.isa;
    id v21 = [(objc_class *)isa _strokeUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    CRKeyPath.init(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
    unint64_t v22 = v18;
    long long v23 = v36;
    WeakRef.init(id:)();

    uint64_t v24 = v40;
    uint64_t v25 = *v22;
    uint64_t v26 = v35;
    id v27 = v23;
    int64_t v18 = v22;
    (*v22)(v35, v27, v40);
    v25(v39, v26, v24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, v19);
    }
    unint64_t v29 = *(void *)(v19 + 16);
    unint64_t v28 = *(void *)(v19 + 24);
    uint64_t v30 = v34;
    if (v29 >= v28 >> 1) {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1, v19);
    }
    *(void *)(v19 + 16) = v29 + 1;
    v25((char *)(v19+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v29), v39, v40);
    v17 += v33;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v19;
}

CGPathRef_optional __swiftcall AnyCanvas.modelSpacePathForPath(_:)(CGPathRef a1)
{
  objc_super v2 = v1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x2F8))();
  (*(void (**)(void *__return_ptr))((*v4 & *v5) + 0x2A0))(v22);
  CGFloat v17 = *(double *)&v22[1];
  CGFloat v18 = *(double *)v22;
  CGFloat v6 = *(double *)&v22[4];
  CGFloat v15 = *(double *)&v22[3];
  CGFloat v16 = *(double *)&v22[2];
  CGFloat v7 = *(double *)&v22[5];

  (*(void (**)(void *__return_ptr))((*v4 & *v2) + 0x5D0))(v23);
  CGFloat v9 = *(double *)v23;
  CGFloat v8 = *(double *)&v23[1];
  CGFloat v10 = *(double *)&v23[2];
  CGFloat v11 = *(double *)&v23[3];
  CGFloat v12 = *(double *)&v23[4];
  CGFloat v13 = *(double *)&v23[5];
  outlined init with take of CGAffineTransform?((uint64_t)v23, (uint64_t)v24);
  if (v24[48])
  {
    CGFloat v11 = 1.0;
    CGFloat v13 = 0.0;
    CGFloat v12 = 0.0;
    CGFloat v10 = 0.0;
    CGFloat v8 = 0.0;
    CGFloat v9 = 1.0;
  }
  t1.CGFloat a = v18;
  t1.CGFloat b = v17;
  t1.double c = v16;
  t1.CGFloat d = v15;
  t1.tdouble x = v6;
  t1.tdouble y = v7;
  t2.CGFloat a = v9;
  t2.CGFloat b = v8;
  t2.double c = v10;
  t2.CGFloat d = v11;
  t2.tdouble x = v12;
  t2.tdouble y = v13;
  CGAffineTransformConcat(&v19, &t1, &t2);
  CGAffineTransform t1 = v19;
  CGAffineTransformInvert(&t2, &t1);
  CGAffineTransform t1 = t2;
  return (CGPathRef_optional)MEMORY[0x21054F0D0](a1, &t1);
}

id AnyCanvas.canvasGenerationToolFrameForSelection(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CGFloat v6 = v5;
  CGFloat v9 = (void *)MEMORY[0x263F8EED0];
  if (*(void *)(a2 + 16))
  {
    v82[0] = a2;
    CGFloat v10 = *(double (**)(void *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v5) + 0x3D8);
    swift_bridgeObjectRetain();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    uint64_t v12 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance Set<A>, (uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    double v13 = v10(v82, v11, v12);
    double v15 = v14;
    double v17 = v16;
    double v19 = v18;
    swift_bridgeObjectRelease();
    double v20 = v19;
    double v21 = v17;
    double v22 = v15;
    CGFloat v23 = v13;
    CGFloat x = *MEMORY[0x263F001A0];
    CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
    CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
    CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
  }
  else
  {
    CGFloat x = *MEMORY[0x263F001A0];
    CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
    CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
    CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
    CGFloat v23 = *MEMORY[0x263F001A0];
    double v22 = y;
    double v21 = width;
    double v20 = height;
  }
  CGFloat v73 = v22;
  CGFloat v74 = v23;
  CGFloat r1 = v21;
  CGFloat rect = v20;
  v88.origin.CGFloat x = x;
  v88.origin.CGFloat y = y;
  v88.size.CGFloat width = width;
  v88.size.CGFloat height = height;
  if (CGRectEqualToRect(*(CGRect *)&v23, v88))
  {
    CGFloat v28 = rect;
    if (!*(void *)(a1 + 16))
    {
LABEL_32:
      CGFloat v62 = v73;
      CGFloat v61 = v74;
      CGFloat v63 = r1;
      v89.origin.CGFloat x = x;
      v89.origin.CGFloat y = y;
      v89.size.CGFloat width = width;
      v89.size.CGFloat height = height;
      CGRect v87 = CGRectUnion(*(CGRect *)(&v28 - 3), v89);
      return objc_msgSend(v6, sel_convertRect_toCoordinateSpace_, a5, v87.origin.x, v87.origin.y, v87.size.width, v87.size.height);
    }
  }
  else
  {
    unint64_t v29 = (void *)(*(uint64_t (**)(void))((*v9 & *v5) + 0x2F8))();
    (*(void (**)(void *__return_ptr))((*v9 & *v29) + 0x2A0))(v80);
    CGFloat v70 = *(double *)&v80[1];
    CGFloat v71 = *(double *)v80;
    CGFloat v68 = *(double *)&v80[3];
    CGFloat v69 = *(double *)&v80[2];
    CGFloat v66 = *(double *)&v80[5];
    CGFloat v67 = *(double *)&v80[4];

    (*(void (**)(void *__return_ptr))((*v9 & *v6) + 0x5D0))(v81);
    CGFloat v31 = *(double *)v81;
    CGFloat v30 = *(double *)&v81[1];
    CGFloat v32 = *(double *)&v81[2];
    CGFloat v33 = *(double *)&v81[4];
    double v64 = *(double *)&v81[5];
    double v65 = *(double *)&v81[3];
    outlined init with take of CGAffineTransform?((uint64_t)v81, (uint64_t)v82);
    if (v83)
    {
      CGFloat v34 = 1.0;
      CGFloat v35 = 0.0;
      CGFloat v33 = 0.0;
      CGFloat v32 = 0.0;
      CGFloat v30 = 0.0;
      CGFloat v31 = 1.0;
    }
    else
    {
      CGFloat v35 = v64;
      CGFloat v34 = v65;
    }
    t1.CGFloat a = v71;
    t1.CGFloat b = v70;
    t1.double c = v69;
    t1.CGFloat d = v68;
    t1.tCGFloat x = v67;
    t1.tCGFloat y = v66;
    t2.CGFloat a = v31;
    t2.CGFloat b = v30;
    t2.double c = v32;
    t2.CGFloat d = v34;
    t2.tCGFloat x = v33;
    t2.tCGFloat y = v35;
    CGAffineTransformConcat(&v77, &t1, &t2);
    CGAffineTransform t1 = v77;
    v84.origin.CGFloat y = v73;
    v84.origin.CGFloat x = v74;
    v84.size.CGFloat width = r1;
    v84.size.CGFloat height = rect;
    *(CGRect *)(&v28 - 3) = CGRectApplyAffineTransform(v84, &t1);
    CGFloat v73 = v37;
    CGFloat v74 = v36;
    CGFloat r1 = v38;
    if (!*(void *)(a1 + 16)) {
      goto LABEL_32;
    }
  }
  rectCGFloat a = v28;
  uint64_t v39 = v6;
  uint64_t v40 = swift_bridgeObjectRetain();
  unint64_t v41 = specialized Sequence.compactMap<A>(_:)(v40, v39);
  swift_bridgeObjectRelease();

  if (!(v41 >> 62))
  {
    uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (v42) {
      goto LABEL_13;
    }
LABEL_25:
    uint64_t v45 = (void *)MEMORY[0x263F8EE78];
LABEL_26:
    swift_bridgeObjectRelease_n();
    uint64_t v59 = v45[2];
    if (v59)
    {
      swift_bridgeObjectRetain();
      uint64_t v60 = v45 + 7;
      do
      {
        v85.origin.CGFloat x = x;
        v85.origin.CGFloat y = y;
        v85.size.CGFloat width = width;
        v85.size.CGFloat height = height;
        CGRect v86 = CGRectUnion(v85, *(CGRect *)(v60 - 3));
        CGFloat x = v86.origin.x;
        CGFloat y = v86.origin.y;
        CGFloat width = v86.size.width;
        CGFloat height = v86.size.height;
        v60 += 4;
        --v59;
      }
      while (v59);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    CGFloat v28 = recta;
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  id result = (id)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v42 = (uint64_t)result;
  if (!result) {
    goto LABEL_25;
  }
LABEL_13:
  if (v42 >= 1)
  {
    uint64_t v44 = 0;
    uint64_t v45 = (void *)MEMORY[0x263F8EE78];
    do
    {
      if ((v41 & 0xC000000000000001) != 0) {
        id v46 = (id)MEMORY[0x21054E050](v44, v41);
      }
      else {
        id v46 = *(id *)(v41 + 8 * v44 + 32);
      }
      uint64_t v47 = v46;
      objc_msgSend(v46, sel_frame);
      uint64_t v49 = v48;
      uint64_t v51 = v50;
      uint64_t v53 = v52;
      uint64_t v55 = v54;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
      }
      unint64_t v57 = v45[2];
      unint64_t v56 = v45[3];
      if (v57 >= v56 >> 1) {
        uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v57 + 1, 1, v45);
      }
      ++v44;
      v45[2] = v57 + 1;
      uint64_t v58 = &v45[4 * v57];
      _OWORD v58[4] = v49;
      v58[5] = v51;
      v58[6] = v53;
      v58[7] = v55;
    }
    while (v42 != v44);
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall AnyCanvas.updateCanvasAttachmentProvider()()
{
  uint64_t v1 = v0;
  objc_super v2 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2F8);
  uint64_t v3 = (void *)v2();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  id v27 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);

  if (v27)
  {
    id v7 = objc_msgSend(v27, sel_recognitionController);
    unsigned int v8 = objc_msgSend(v7, sel_respondsToSelector_, sel_setCanvasAttachmentProvider_);

    CGFloat v9 = v27;
    if (v8)
    {
      id v10 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasAttachmentProvider()), sel_init);
      uint64_t v11 = (void *)v2();
      uint64_t v13 = v12;
      uint64_t v14 = swift_getObjectType();
      unint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 64))(v14, v13);

      double v16 = (char *)v10;
      id v17 = v1;
      uint64_t v18 = specialized Sequence.compactMap<A>(_:)(v15, (uint64_t)v16, v17);
      swift_bridgeObjectRelease();

      *(void *)&v16[OBJC_IVAR____TtC8PaperKit24CanvasAttachmentProvider_paperkitAttachments] = v18;
      uint64_t v19 = swift_bridgeObjectRelease();
      double v20 = (void *)((uint64_t (*)(uint64_t))v2)(v19);
      uint64_t v22 = v21;
      uint64_t v23 = swift_getObjectType();
      uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 16))(v23, v22);

      if (v24)
      {
        id v25 = objc_msgSend(v24, sel_recognitionController);

        uint64_t v26 = v16;
        objc_msgSend(v25, sel_setCanvasAttachmentProvider_, v26);
      }
      CGFloat v9 = v27;
    }
  }
}

void AnyCanvas.textPromptsFromElementCanvasMembers(_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unint64_t *a5@<X8>)
{
  LODWORD(v6) = a4;
  char v83 = a5;
  uint64_t v10 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v91 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v80 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90);
  CGRect v89 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v94 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  int v98 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for CharacterSet();
  uint64_t v14 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  uint64_t v92 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = v5;
  uint64_t v17 = swift_bridgeObjectRetain();
  unint64_t v18 = specialized Sequence.compactMap<A>(_:)(v17, v16);
  uint64_t v81 = 0;
  uint64_t v84 = a1;
  swift_bridgeObjectRelease();
  id v82 = v16;

  uint64_t v103 = MEMORY[0x263F8EE78];
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  double v20 = (void *)MEMORY[0x263F8EED0];
  if (v19)
  {
    if (v19 < 1)
    {
      __break(1u);
      goto LABEL_53;
    }
    LODWORD(v97) = v6;
    uint64_t v6 = v14;
    uint64_t v21 = a3;
    unint64_t v22 = a2;
    for (uint64_t i = 0; i != v19; ++i)
    {
      if ((v18 & 0xC000000000000001) != 0) {
        uint64_t v24 = (void *)MEMORY[0x21054E050](i, v18);
      }
      else {
        uint64_t v24 = *(id *)(v18 + 8 * i + 32);
      }
      id v25 = v24;
      if ((*(uint64_t (**)(void))((*v20 & *v24) + 0x118))())
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        double v20 = (void *)MEMORY[0x263F8EED0];
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v26 = v103;
    a2 = v22;
    a3 = v21;
    uint64_t v14 = v6;
    LOBYTE(v6) = v97;
    if (v103 < 0) {
      goto LABEL_50;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_50;
    }
  }
  if ((v26 & 0x4000000000000000) != 0)
  {
LABEL_50:
    swift_retain();
    a1 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!a1) {
      goto LABEL_51;
    }
    goto LABEL_18;
  }
  a1 = *(void *)(v26 + 16);
  if (!a1)
  {
LABEL_51:
    char v65 = v6 & 1;
    swift_release();
    uint64_t v66 = v84;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v18 = MEMORY[0x263F8EE78];
LABEL_72:
    uint64_t v78 = v83;
    *char v83 = v18;
    v78[1] = v66;
    v78[2] = a2;
    v78[3] = a3;
    *((unsigned char *)v78 + 32) = v65;
    return;
  }
LABEL_18:
  if (a1 < 1)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  unint64_t v95 = v26 & 0xC000000000000001;
  CGRect v86 = (void (**)(char *, uint64_t))(v14 + 8);
  swift_retain();
  uint64_t v27 = 0;
  unint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t v87 = v26;
  uint64_t v85 = a1;
  CGFloat v28 = v86;
  do
  {
    if (v95) {
      unint64_t v29 = (void *)MEMORY[0x21054E050](v27, v26);
    }
    else {
      unint64_t v29 = *(id *)(v26 + 8 * v27 + 32);
    }
    CGFloat v30 = v29;
    CGFloat v31 = (void *)(*(uint64_t (**)(void))((*v20 & *v29) + 0x2D0))();
    if (v31)
    {
      CGFloat v32 = v31;
      unint64_t v97 = v18;
      uint64_t v33 = (*(uint64_t (**)(void))((*v20 & *v31) + 0xF0))();
      unint64_t v35 = v34;
      unint64_t v96 = v34;

      uint64_t v103 = v33;
      unint64_t v104 = v35;
      uint64_t v101 = 10;
      unint64_t v102 = 0xE100000000000000;
      uint64_t v99 = 32;
      unint64_t v100 = 0xE100000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v103 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      unint64_t v104 = v36;
      uint64_t v101 = 9;
      unint64_t v102 = 0xE100000000000000;
      uint64_t v99 = 32;
      unint64_t v100 = 0xE100000000000000;
      uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      unint64_t v39 = v38;
      swift_bridgeObjectRelease();
      uint64_t v103 = v37;
      unint64_t v104 = v39;
      uint64_t v40 = v92;
      static CharacterSet.whitespacesAndNewlines.getter();
      uint64_t v41 = StringProtocol.trimmingCharacters(in:)();
      unint64_t v43 = v42;
      uint64_t v44 = *v28;
      uint64_t v45 = v93;
      (*v28)(v40, v93);
      swift_bridgeObjectRelease();
      uint64_t v103 = v41;
      unint64_t v104 = v43;
      static CharacterSet.punctuationCharacters.getter();
      uint64_t v46 = StringProtocol.trimmingCharacters(in:)();
      unint64_t v48 = v47;
      v44(v40, v45);
      swift_bridgeObjectRelease();
      uint64_t v103 = v46;
      unint64_t v104 = v48;
      static CharacterSet.whitespacesAndNewlines.getter();
      uint64_t v49 = StringProtocol.trimmingCharacters(in:)();
      unint64_t v51 = v50;
      v44(v40, v45);
      swift_bridgeObjectRelease();
      if ((v51 & 0x2000000000000000) != 0) {
        uint64_t v52 = HIBYTE(v51) & 0xF;
      }
      else {
        uint64_t v52 = v49 & 0xFFFFFFFFFFFFLL;
      }

      swift_bridgeObjectRelease();
      if (v52)
      {
        unint64_t v18 = v97;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        a1 = v85;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          unint64_t v18 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1, (void *)v18);
        }
        double v20 = (void *)MEMORY[0x263F8EED0];
        unint64_t v55 = *(void *)(v18 + 16);
        unint64_t v54 = *(void *)(v18 + 24);
        if (v55 >= v54 >> 1) {
          unint64_t v18 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v55 + 1, 1, (void *)v18);
        }
        *(void *)(v18 + 16) = v55 + 1;
        unint64_t v56 = v18 + 16 * v55;
        *(void *)(v56 + 32) = v49;
        *(void *)(v56 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v51;
        uint64_t v26 = v87;
      }
      else
      {
        swift_bridgeObjectRelease();
        double v20 = (void *)MEMORY[0x263F8EED0];
        unint64_t v18 = v97;
        uint64_t v26 = v87;
        a1 = v85;
      }
    }
    else
    {
    }
    ++v27;
  }
  while (a1 != v27);
  swift_release_n();
  unint64_t v57 = v82;
  uint64_t v58 = swift_bridgeObjectRetain();
  a1 = specialized Sequence.compactMap<A>(_:)(v58, v57);
  swift_bridgeObjectRelease();

  uint64_t v103 = MEMORY[0x263F8EE78];
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v59 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v59) {
      goto LABEL_38;
    }
LABEL_55:
    swift_bridgeObjectRelease();
    uint64_t v64 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_69;
    }
    goto LABEL_56;
  }
LABEL_54:
  swift_bridgeObjectRetain();
  uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v59) {
    goto LABEL_55;
  }
LABEL_38:
  if (v59 < 1)
  {
    __break(1u);
    goto LABEL_74;
  }
  unint64_t v60 = v18;
  for (uint64_t j = 0; j != v59; ++j)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      CGFloat v62 = (void *)MEMORY[0x21054E050](j, a1);
    }
    else {
      CGFloat v62 = *(id *)(a1 + 8 * j + 32);
    }
    CGFloat v63 = v62;
    if ((*(uint64_t (**)(void))((*v20 & *v62) + 0x118))())
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v64 = v103;
  unint64_t v18 = v60;
  if (v103 < 0) {
    goto LABEL_69;
  }
LABEL_56:
  if ((v64 & 0x4000000000000000) == 0)
  {
    uint64_t v67 = *(void *)(v64 + 16);
    if (!v67)
    {
LABEL_70:
      swift_release();
      uint64_t v75 = MEMORY[0x263F8EE78];
LABEL_71:
      uint64_t v66 = specialized Set.init<A>(_:)(v75);
      swift_bridgeObjectRelease();
      char v65 = 0;
      a2 = MEMORY[0x263F8EE88];
      a3 = 6;
      goto LABEL_72;
    }
    goto LABEL_58;
  }
LABEL_69:
  swift_bridgeObjectRetain();
  uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v67) {
    goto LABEL_70;
  }
LABEL_58:
  uint64_t v99 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67 & ~(v67 >> 63), 0);
  if ((v67 & 0x8000000000000000) == 0)
  {
    unint64_t v97 = v18;
    uint64_t v68 = 0;
    unint64_t v96 = v64 & 0xC000000000000001;
    CGFloat v69 = (void (**)(char *, uint64_t))(v80 + 8);
    uint64_t v70 = v64;
    do
    {
      if (v96) {
        CGFloat v71 = (void *)MEMORY[0x21054E050](v68, v64);
      }
      else {
        CGFloat v71 = *(id *)(v64 + 8 * v68 + 32);
      }
      uint64_t v72 = v71;
      CGFloat v73 = v89;
      (*(void (**)(void))((*v20 & *v71) + 0xE8))();
      uint64_t v74 = v90;
      SharedTagged_9.tag.getter();
      uint64_t v101 = v103;
      LOBYTE(v102) = v104;
      MEMORY[0x21054BDF0](v74);
      lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
      WeakTagged_9.init(_:id:)();
      (*v69)(v73, v74);

      uint64_t v75 = v99;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v75 + 16) + 1, 1);
        uint64_t v75 = v99;
      }
      unint64_t v77 = *(void *)(v75 + 16);
      unint64_t v76 = *(void *)(v75 + 24);
      uint64_t v64 = v70;
      if (v77 >= v76 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v76 > 1, v77 + 1, 1);
        uint64_t v75 = v99;
      }
      ++v68;
      *(void *)(v75 + 16) = v77 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v94 + 32))(v75+ ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))+ *(void *)(v94 + 72) * v77, v98, v88);
      double v20 = (void *)MEMORY[0x263F8EED0];
    }
    while (v67 != v68);
    swift_release();
    unint64_t v18 = v97;
    goto LABEL_71;
  }
LABEL_74:
  __break(1u);
}

uint64_t AnyCanvas.textPromptLookupFor(_:)(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v3[9] = type metadata accessor for MainActor();
  v3[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[11] = v5;
  v3[12] = v4;
  return MEMORY[0x270FA2498](AnyCanvas.textPromptLookupFor(_:), v5, v4);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v3[9] = type metadata accessor for MainActor();
  v3[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[11] = v5;
  v3[12] = v4;
  return MEMORY[0x270FA2498](AnyCanvas.textPromptLookupFor(_:), v5, v4);
}

uint64_t AnyCanvas.textPromptLookupFor(_:)()
{
  if (!*(void *)(*(void *)(v0 + 56) + 16)) {
    goto LABEL_7;
  }
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)(v0 + 64)) + 0x2F8))();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);

  if (!v5) {
    goto LABEL_7;
  }
  id v6 = objc_msgSend(v5, sel_recognitionController);
  *(void *)(v0 + 104) = v6;

  if (v6)
  {
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v8 = static MainActor.shared.getter();
    *(void *)(v0 + 112) = v8;
    uint64_t v9 = swift_task_alloc();
    *(void *)(v0 + 12CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v9;
    *(void *)(v9 + 16) = v6;
    *(void *)(v9 + 24) = v7;
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v10;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([PKStroke]?, [PKStroke]?, [String]?, [String]?));
    *uint64_t v10 = v0;
    v10[1] = AnyCanvas.textPromptLookupFor(_:);
    uint64_t v12 = MEMORY[0x263F8F500];
    return MEMORY[0x270FA2318](v0 + 16, v8, v12, 0xD000000000000017, 0x800000020C861130, partial apply for closure #1 in AnyCanvas.textPromptLookupFor(_:), v9, v11);
  }
  else
  {
LABEL_7:
    swift_release();
    uint64_t v13 = *(void *)(v0 + 48);
    *(_OWORD *)(v13 + 25) = 0u;
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
    *(void *)(v13 + 48) = 0;
    *(unsigned char *)(v13 + 72) = 0;
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return MEMORY[0x270FA2498](AnyCanvas.textPromptLookupFor(_:), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  swift_release();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  if (!v2 || !v1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v6 = 0;
    uint64_t v7 = 0;
    uint64_t v10 = 0;
    uint64_t v4 = 0;
LABEL_7:
    uint64_t v11 = 0;
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  if (!v4)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v6 = 0;
    uint64_t v7 = 0;
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = *(void **)(v0 + 104);
  if (v3)
  {
    id v6 = specialized AnyCanvas.textResultsFromLookupResults(_:)(*(void *)(v0 + 32));
    uint64_t v7 = specialized AnyCanvas.textResultsFromLookupResults(_:)(v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = specialized Sequence.compactMap<A>(_:)(v2);
    uint64_t v4 = specialized Set.init<A>(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = specialized Sequence.compactMap<A>(_:)(v1);
    uint64_t v3 = specialized Set.init<A>(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v10 = MEMORY[0x263F8EE88];
    uint64_t v11 = 6;
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v6 = 0;
    uint64_t v7 = 0;
    uint64_t v10 = 0;
    uint64_t v4 = 0;
    uint64_t v11 = 0;
  }
LABEL_8:
  uint64_t v12 = *(void *)(v0 + 48);
  *(void *)uint64_t v12 = v6;
  *(void *)(v12 + 8) = v7;
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v4;
  *(void *)(v12 + 32) = v11;
  *(unsigned char *)(v12 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0;
  *(void *)(v12 + 48) = v10;
  *(void *)(v12 + 56) = v3;
  *(void *)(v12 + 64) = v11;
  *(unsigned char *)(v12 + 72) = 0;
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  if (CGPathIsEmpty(*(CGPathRef *)(v0 + 56))) {
    goto LABEL_7;
  }
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)(v0 + 64)) + 0x2F8))();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);

  if (!v5) {
    goto LABEL_7;
  }
  id v6 = objc_msgSend(v5, sel_recognitionController);
  *(void *)(v0 + 104) = v6;

  if (v6)
  {
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v8 = static MainActor.shared.getter();
    *(void *)(v0 + 112) = v8;
    uint64_t v9 = swift_task_alloc();
    *(void *)(v0 + 12CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v9;
    *(void *)(v9 + 16) = v6;
    *(void *)(v9 + 24) = v7;
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v10;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([PKStroke]?, [PKStroke]?, [String]?, [String]?));
    *uint64_t v10 = v0;
    v10[1] = AnyCanvas.textPromptLookupFor(_:);
    uint64_t v12 = MEMORY[0x263F8F500];
    return MEMORY[0x270FA2318](v0 + 16, v8, v12, 0xD000000000000017, 0x800000020C861130, partial apply for closure #1 in AnyCanvas.textPromptLookupFor(_:), v9, v11);
  }
  else
  {
LABEL_7:
    swift_release();
    uint64_t v13 = *(void *)(v0 + 48);
    *(_OWORD *)(v13 + 25) = 0u;
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
    *(void *)(v13 + 48) = 0;
    *(unsigned char *)(v13 + 72) = 0;
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return MEMORY[0x270FA2498](AnyCanvas.textPromptLookupFor(_:), v3, v2);
}

uint64_t AnyCanvas.elementCanvasMembers(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v9 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v9 - 8);
  CGFloat v62 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v11 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  unint64_t v60 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21.n128_f64[0] = MEMORY[0x270FA5388](v20);
  uint64_t v67 = (char *)&v59 - v22;
  uint64_t v23 = (void *)(*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *v4) + 0x2F8))(v21);
  uint64_t v25 = v24;
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 64))(ObjectType, v25);

  if (!(v27 >> 62))
  {
    uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v28) {
      goto LABEL_3;
    }
LABEL_23:
    uint64_t v75 = MEMORY[0x263F8EE78];
LABEL_24:
    swift_bridgeObjectRelease_n();
    uint64_t v58 = specialized Set.init<A>(_:)(v75);
    swift_bridgeObjectRelease();
    return v58;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v28 = result;
  if (!result) {
    goto LABEL_23;
  }
LABEL_3:
  if (v28 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v72 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    unint64_t v73 = v27 & 0xC000000000000001;
    uint64_t v59 = (void (**)(char *, uint64_t))(v11 + 8);
    CGFloat v71 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    uint64_t v74 = (void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v75 = MEMORY[0x263F8EE78];
    CGFloat v31 = (void *)MEMORY[0x263F8EED0];
    uint64_t v68 = v28;
    unint64_t v69 = v27;
    double v66 = a4;
    double v65 = a3;
    double v64 = a2;
    double v63 = a1;
    do
    {
      if (v73) {
        CGFloat v32 = (void *)MEMORY[0x21054E050](v30, v27);
      }
      else {
        CGFloat v32 = *(id *)(v27 + 8 * v30 + 32);
      }
      uint64_t v33 = v32;
      unint64_t v34 = (const CGPath *)(*(uint64_t (**)(void))((*v31 & *v32) + 0x1D8))();
      BoundingBoCGFloat x = CGPathGetBoundingBox(v34);
      CGFloat x = BoundingBox.origin.x;
      CGFloat y = BoundingBox.origin.y;
      CGFloat width = BoundingBox.size.width;
      CGFloat height = BoundingBox.size.height;

      v81.origin.CGFloat x = a1;
      v81.origin.CGFloat y = a2;
      v81.size.CGFloat width = a3;
      v81.size.CGFloat height = a4;
      v87.origin.CGFloat x = x;
      v87.origin.CGFloat y = y;
      v87.size.CGFloat width = width;
      v87.size.CGFloat height = height;
      if (CGRectIntersectsRect(v81, v87))
      {
        v82.origin.CGFloat x = a1;
        v82.origin.CGFloat y = a2;
        v82.size.CGFloat width = a3;
        v82.size.CGFloat height = a4;
        v88.origin.CGFloat x = x;
        v88.origin.CGFloat y = y;
        v88.size.CGFloat width = width;
        v88.size.CGFloat height = height;
        CGRect v83 = CGRectIntersection(v82, v88);
        CGFloat v39 = v83.origin.x;
        CGFloat v40 = v83.origin.y;
        CGFloat v41 = v83.size.width;
        CGFloat v42 = v83.size.height;
        double v70 = CGRectGetWidth(v83);
        v84.origin.CGFloat x = v39;
        v84.origin.CGFloat y = v40;
        v84.size.CGFloat width = v41;
        v84.size.CGFloat height = v42;
        double v43 = v70 * CGRectGetHeight(v84);
        v85.origin.CGFloat x = x;
        v85.origin.CGFloat y = y;
        v85.size.CGFloat width = width;
        v85.size.CGFloat height = height;
        double v44 = CGRectGetWidth(v85);
        v86.origin.CGFloat x = x;
        v86.origin.CGFloat y = y;
        v86.size.CGFloat width = width;
        v86.size.CGFloat height = height;
        if (v43 / (v44 * CGRectGetHeight(v86)) >= 0.75)
        {
          uint64_t v46 = *(void (**)(void))((*v31 & *v33) + 0xE8);
          unint64_t v47 = v19;
          unint64_t v48 = v60;
          v46();
          uint64_t v49 = v17;
          uint64_t v50 = v61;
          SharedTagged_9.tag.getter();
          uint64_t v76 = v78;
          char v77 = v79;
          MEMORY[0x21054BDF0](v50);
          lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
          unint64_t v27 = v69;
          WeakTagged_9.init(_:id:)();
          unint64_t v51 = v48;
          uint64_t v19 = v47;
          CGFloat v31 = (void *)MEMORY[0x263F8EED0];
          uint64_t v52 = v50;
          uint64_t v17 = v49;
          uint64_t v28 = v68;
          (*v59)(v51, v52);
          uint64_t v45 = 0;
        }
        else
        {
          uint64_t v45 = 1;
        }
        a4 = v66;
        a3 = v65;
        a2 = v64;
        a1 = v63;
      }
      else
      {
        uint64_t v45 = 1;
      }
      (*v72)(v15, v45, 1, v16);

      if ((*v71)(v15, 1, v16) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      }
      else
      {
        uint64_t v53 = *v74;
        unint64_t v54 = v67;
        (*v74)(v67, v15, v16);
        v53(v19, v54, v16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v75 + 16) + 1, 1, v75);
        }
        unint64_t v56 = *(void *)(v75 + 16);
        unint64_t v55 = *(void *)(v75 + 24);
        uint64_t v28 = v68;
        if (v56 >= v55 >> 1) {
          uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1, v75);
        }
        uint64_t v57 = v75;
        *(void *)(v75 + 16) = v56 + 1;
        v53((char *)(v57+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(void *)(v17 + 72) * v56), v19, v16);
        unint64_t v27 = v69;
      }
      ++v30;
    }
    while (v28 != v30);
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t AnyCanvas.strokeCanvasMembers(for:)(unint64_t a1)
{
  unint64_t v115 = a1;
  uint64_t v1 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v112 = (char *)&v97 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v111 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v113 = *(void *)(v8 - 8);
  uint64_t v114 = v8;
  MEMORY[0x270FA5388](v8);
  unint64_t v116 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v110 = (char *)&v97 - v11;
  uint64_t v118 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v99 = *(void *)(v118 - 8);
  MEMORY[0x270FA5388](v118);
  uint64_t v117 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for PKDrawing();
  uint64_t v103 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105);
  int v107 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v14 - 8);
  unint64_t v104 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v102 = (uint64_t)&v97 - v17;
  MEMORY[0x270FA5388](v18);
  int v108 = (char *)&v97 - v19;
  uint64_t v20 = type metadata accessor for PKInkingTool.InkType();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for PKInk();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  unint64_t v27 = (char *)&v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for PKStroke();
  uint64_t v109 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  unint64_t v100 = (char *)&v97 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  CGFloat v32 = (char *)&v97 - v31;
  double v34 = MEMORY[0x270FA5388](v33);
  unint64_t v36 = (char *)&v97 - v35;
  (*(void (**)(char *, void, uint64_t, double))(v21 + 104))(v23, *MEMORY[0x263F14A48], v20, v34);
  id v37 = objc_msgSend(self, sel_blackColor);
  PKInk.init(_:color:)();
  isCGFloat a = PKInk._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  CGFloat v39 = (objc_class *)MEMORY[0x263F14BB0];
  CGFloat v40 = isa;
  id v41 = [v39 alloc];
  CGFloat v42 = (void *)[v41 _initWithPath:v115 ink:v40 inputScale:1.0];

  id v43 = v42;
  if (!v43) {
    return MEMORY[0x263F8EE88];
  }
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

  double v44 = *(uint64_t (**)(char *, char *, uint64_t))(v109 + 32);
  uint64_t v106 = v28;
  uint64_t v45 = v44(v36, v32, v28);
  uint64_t v46 = v101;
  unint64_t v47 = (void *)MEMORY[0x263F8EED0];
  unint64_t v48 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v101) + 0x320);
  unint64_t v115 = (*MEMORY[0x263F8EED0] & *v101) + 800;
  int v98 = v48;
  uint64_t v49 = (void *)v48(v45);
  if (v49)
  {
    uint64_t v50 = v49;
    if (objc_msgSend(v49, sel_respondsToSelector_, sel_smoothedHullForStroke_))
    {
      Class v51 = PKStroke._bridgeToObjectiveC()().super.isa;
      id v52 = objc_msgSend(v50, sel_smoothedHullForStroke_, v51);

      uint64_t v53 = v100;
      static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v54 = v106;
      (*(void (**)(char *, uint64_t))(v109 + 8))(v36, v106);
      v44(v36, v53, v54);
    }
    else
    {
    }
  }
  unint64_t v100 = v36;
  unint64_t v55 = (void *)(*(uint64_t (**)(void))((*v47 & *v46) + 0x2F8))();
  uint64_t v57 = v56;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v59 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v57 + 16))(ObjectType, v57);

  if (v59)
  {
    id v60 = objc_msgSend(v59, sel_drawing);

    uint64_t v61 = (uint64_t)v108;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v62 = 0;
  }
  else
  {
    uint64_t v62 = 1;
    uint64_t v61 = (uint64_t)v108;
  }
  uint64_t v63 = v105;
  uint64_t v64 = (uint64_t)v104;
  uint64_t v65 = v103;
  double v66 = v107;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 56))(v61, v62, 1, v105);
  uint64_t v67 = v102;
  outlined init with copy of PKDrawing?(v61, v102);
  uint64_t v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
  if (v68(v67, 1, v63) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v67, &demangling cache variable for type metadata for PKDrawing?);
LABEL_17:
    uint64_t v76 = 0;
    goto LABEL_18;
  }
  uint64_t v69 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 32))(v66, v67, v63);
  double v70 = (void *)v98(v69);
  if (!v70)
  {
    (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v63);
    goto LABEL_17;
  }
  CGFloat v71 = v70;
  if ((objc_msgSend(v70, sel_respondsToSelector_, sel_visibleOnScreenStrokesForDrawing_) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v65 + 8))(v107, v63);

    goto LABEL_17;
  }
  PKDrawing._bridgeToObjectiveC()((PKDrawing *)&v124);
  uint64_t v72 = v65;
  uint64_t v74 = v73;
  id v75 = objc_msgSend(v71, sel_visibleOnScreenStrokesForDrawing_, v73);

  uint64_t v76 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v107, v63);
LABEL_18:
  outlined init with copy of PKDrawing?(v61, v64);
  if (v68(v64, 1, v63) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of StocksKitCurrencyCache.Provider?(v64, &demangling cache variable for type metadata for PKDrawing?);
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
    swift_dynamicCast();
    char v77 = (void *)v122;
    v78.super.isCGFloat a = PKStroke._bridgeToObjectiveC()().super.isa;
    if (v76)
    {
      v79.super.isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v79.super.isCGFloat a = 0;
    }
    id v80 = objc_msgSend(v77, sel_intersectedStrokesFromStroke_visibleOnscreenStrokes_, v78.super.isa, v79.super.isa);

    CGRect v81 = (char *)v80;
    NSOrderedSet.makeIterator()();
    int v107 = v81;

    unint64_t v115 = lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator();
    dispatch thunk of IteratorProtocol.next()();
    if (v123)
    {
      uint64_t v82 = v114;
      CGRect v83 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v113 + 56);
      CGRect v84 = (unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48);
      CGRect v85 = (void (**)(char *, char *, uint64_t))(v113 + 32);
      uint64_t v86 = MEMORY[0x263F8EE78];
      do
      {
        outlined init with take of Any(&v122, v121);
        outlined init with copy of Any((uint64_t)v121, (uint64_t)v120);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKStroke);
        if (swift_dynamicCast())
        {
          id v87 = v119;
          id v88 = objc_msgSend(v119, sel__strokeUUID);
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          CRKeyPath.init(_:)();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
          lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
          uint64_t v82 = v114;
          WeakRef.init(id:)();

          uint64_t v89 = 0;
        }
        else
        {
          uint64_t v89 = 1;
        }
        (*v83)(v7, v89, 1, v82);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v121);
        if ((*v84)(v7, 1, v82) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
        }
        else
        {
          uint64_t v90 = *v85;
          uint64_t v91 = v110;
          (*v85)(v110, v7, v82);
          v90(v116, v91, v82);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v86 + 16) + 1, 1, v86);
          }
          unint64_t v93 = *(void *)(v86 + 16);
          unint64_t v92 = *(void *)(v86 + 24);
          if (v93 >= v92 >> 1) {
            uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v92 > 1, v93 + 1, 1, v86);
          }
          *(void *)(v86 + 16) = v93 + 1;
          v90((char *)(v86+ ((*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80))+ *(void *)(v113 + 72) * v93), v116, v82);
        }
        dispatch thunk of IteratorProtocol.next()();
      }
      while (v123);
    }
    else
    {
      uint64_t v86 = MEMORY[0x263F8EE78];
    }
    (*(void (**)(char *, uint64_t))(v99 + 8))(v117, v118);

    specialized Set.init<A>(_:)(v86);
    swift_bridgeObjectRelease();
    uint64_t v61 = (uint64_t)v108;
  }
  uint64_t v94 = v106;
  uint64_t v95 = v109;
  outlined destroy of StocksKitCurrencyCache.Provider?(v61, &demangling cache variable for type metadata for PKDrawing?);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v100, v94);
  return MEMORY[0x263F8EE88];
}

Swift::String_optional __swiftcall String.replaceNewlineTabAndTrim()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v3;
  uint64_t v31 = v2;
  uint64_t v28 = 10;
  unint64_t v29 = 0xE100000000000000;
  uint64_t v26 = 32;
  unint64_t v27 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v31 = v8;
  uint64_t v28 = 9;
  unint64_t v29 = 0xE100000000000000;
  uint64_t v26 = 32;
  unint64_t v27 = 0xE100000000000000;
  uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  uint64_t v30 = v9;
  uint64_t v31 = v11;
  static CharacterSet.whitespacesAndNewlines.getter();
  uint64_t v12 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v14 = v13;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, v4);
  swift_bridgeObjectRelease();
  uint64_t v30 = v12;
  uint64_t v31 = v14;
  static CharacterSet.punctuationCharacters.getter();
  uint64_t v16 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v18 = v17;
  v15(v7, v4);
  swift_bridgeObjectRelease();
  uint64_t v30 = v16;
  uint64_t v31 = v18;
  static CharacterSet.whitespacesAndNewlines.getter();
  uint64_t v19 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v21 = v20;
  v15(v7, v4);
  swift_bridgeObjectRelease();
  uint64_t v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0) {
    uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (!v22)
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = 0;
    unint64_t v21 = 0;
  }
  uint64_t v23 = v19;
  uint64_t v24 = (void *)v21;
  result.value._uint64_t object = v24;
  result.value._uint64_t countAndFlagsBits = v23;
  return result;
}

void AnyCanvas.suggestionsFromOnScreenTextCanvasElements()()
{
  uint64_t v49 = type metadata accessor for CharacterSet();
  uint64_t v1 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  unint64_t v48 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyCanvas.elementCanvasMembersVisibleOnScreen()();
  uint64_t v3 = v0;
  uint64_t v4 = swift_bridgeObjectRetain();
  unint64_t v5 = specialized Sequence.compactMap<A>(_:)(v4, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  uint64_t v57 = MEMORY[0x263F8EE78];
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v7 = (void *)MEMORY[0x263F8EED0];
  if (v6)
  {
    if (v6 < 1)
    {
      __break(1u);
      goto LABEL_40;
    }
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0) {
        uint64_t v9 = (void *)MEMORY[0x21054E050](i, v5);
      }
      else {
        uint64_t v9 = *(id *)(v5 + 8 * i + 32);
      }
      uint64_t v10 = v9;
      if ((*(uint64_t (**)(void))((*v7 & *v9) + 0x118))())
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v57;
    if (v57 < 0) {
      goto LABEL_37;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_37;
    }
  }
  if ((v11 & 0x4000000000000000) == 0)
  {
    uint64_t v12 = *(void *)(v11 + 16);
    swift_retain();
    if (!v12)
    {
LABEL_38:
      swift_release_n();
      return;
    }
    goto LABEL_18;
  }
LABEL_37:
  swift_retain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  if (!v12) {
    goto LABEL_38;
  }
LABEL_18:
  if (v12 >= 1)
  {
    uint64_t v13 = 0;
    unint64_t v50 = v11 & 0xC000000000000001;
    uint64_t v14 = (void (**)(char *, uint64_t))(v1 + 8);
    uint64_t v46 = v1 + 8;
    uint64_t v15 = (void *)MEMORY[0x263F8EE78];
    uint64_t v45 = v11;
    uint64_t v47 = v12;
    uint64_t v16 = v14;
    do
    {
      if (v50) {
        uint64_t v17 = (void *)MEMORY[0x21054E050](v13, v11);
      }
      else {
        uint64_t v17 = *(id *)(v11 + 8 * v13 + 32);
      }
      uint64_t v18 = v17;
      uint64_t v19 = (void *)(*(uint64_t (**)(void))((*v7 & *v17) + 0x2D0))();
      if (v19)
      {
        unint64_t v20 = v19;
        id v52 = v15;
        uint64_t v21 = (*(uint64_t (**)(void))((*v7 & *v19) + 0xF0))();
        uint64_t v23 = v22;
        uint64_t v51 = v22;

        uint64_t v57 = v21;
        uint64_t v58 = v23;
        uint64_t v55 = 10;
        unint64_t v56 = 0xE100000000000000;
        uint64_t v53 = 32;
        unint64_t v54 = 0xE100000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v57 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v58 = v24;
        uint64_t v55 = 9;
        unint64_t v56 = 0xE100000000000000;
        uint64_t v53 = 32;
        unint64_t v54 = 0xE100000000000000;
        uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v27 = v26;
        swift_bridgeObjectRelease();
        uint64_t v57 = v25;
        uint64_t v58 = v27;
        uint64_t v28 = v48;
        static CharacterSet.whitespacesAndNewlines.getter();
        uint64_t v29 = StringProtocol.trimmingCharacters(in:)();
        uint64_t v31 = v30;
        CGFloat v32 = *v16;
        uint64_t v33 = v49;
        (*v16)(v28, v49);
        swift_bridgeObjectRelease();
        uint64_t v57 = v29;
        uint64_t v58 = v31;
        static CharacterSet.punctuationCharacters.getter();
        uint64_t v34 = StringProtocol.trimmingCharacters(in:)();
        uint64_t v36 = v35;
        v32(v28, v33);
        swift_bridgeObjectRelease();
        uint64_t v57 = v34;
        uint64_t v58 = v36;
        static CharacterSet.whitespacesAndNewlines.getter();
        uint64_t v37 = StringProtocol.trimmingCharacters(in:)();
        unint64_t v39 = v38;
        v32(v28, v33);
        swift_bridgeObjectRelease();
        if ((v39 & 0x2000000000000000) != 0) {
          uint64_t v40 = HIBYTE(v39) & 0xF;
        }
        else {
          uint64_t v40 = v37 & 0xFFFFFFFFFFFFLL;
        }

        swift_bridgeObjectRelease();
        if (v40)
        {
          uint64_t v15 = v52;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
          }
          uint64_t v7 = (void *)MEMORY[0x263F8EED0];
          uint64_t v11 = v45;
          unint64_t v42 = v15[2];
          unint64_t v41 = v15[3];
          if (v42 >= v41 >> 1) {
            uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v15);
          }
          _OWORD v15[2] = v42 + 1;
          id v43 = &v15[2 * v42];
          v43[4] = v37;
          v43[5] = v39;
          uint64_t v12 = v47;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v7 = (void *)MEMORY[0x263F8EED0];
          uint64_t v11 = v45;
          uint64_t v12 = v47;
          uint64_t v15 = v52;
        }
      }
      else
      {
      }
      ++v13;
    }
    while (v12 != v13);
    goto LABEL_38;
  }
LABEL_40:
  __break(1u);
}

uint64_t AnyCanvas.suggestionsFromOnScreenTextStrokes()()
{
  uint64_t v1 = type metadata accessor for CharacterSet();
  v0[30] = v1;
  v0[31] = *(void *)(v1 - 8);
  v0[32] = swift_task_alloc();
  v0[33] = type metadata accessor for MainActor();
  v0[34] = static MainActor.shared.getter();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[35] = v2;
  void *v2 = v0;
  v2[1] = AnyCanvas.suggestionsFromOnScreenTextStrokes();
  uint64_t v3 = MEMORY[0x263F8EE78];
  return AnyCanvas.textPromptLookupFor(_:)((uint64_t)(v0 + 2), v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *v0;
  *(void *)(*v0 + 288) = *(void *)(*v0 + 24);
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 64);
  swift_task_dealloc();
  outlined consume of CanvasMembers?(v3);
  outlined consume of CanvasMembers?(v2);
  swift_bridgeObjectRelease();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](AnyCanvas.suggestionsFromOnScreenTextStrokes(), v5, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t (*v26)(void *);
  void (**v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;

  uint64_t v1 = v0[36];
  swift_release();
  if (v1)
  {
    uint64_t v2 = v0[36];
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      uint64_t v28 = (void (**)(uint64_t, uint64_t))(v0[31] + 8);
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      uint64_t v4 = (uint64_t *)(v2 + 40);
      uint64_t v5 = (void *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v6 = v0[32];
        uint64_t v7 = v0[30];
        uint64_t v29 = *v4;
        v0[12] = *(v4 - 1);
        v0[13] = v29;
        v0[14] = 10;
        v0[15] = 0xE100000000000000;
        v0[16] = 32;
        v0[17] = 0xE100000000000000;
        swift_bridgeObjectRetain();
        v0[18] = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v0[19] = v8;
        v0[20] = 9;
        v0[21] = 0xE100000000000000;
        v0[22] = 32;
        v0[23] = 0xE100000000000000;
        uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v11 = v10;
        swift_bridgeObjectRelease();
        v0[24] = v9;
        v0[25] = v11;
        static CharacterSet.whitespacesAndNewlines.getter();
        uint64_t v12 = StringProtocol.trimmingCharacters(in:)();
        uint64_t v14 = v13;
        uint64_t v15 = *v28;
        (*v28)(v6, v7);
        swift_bridgeObjectRelease();
        v0[26] = v12;
        v0[27] = v14;
        static CharacterSet.punctuationCharacters.getter();
        uint64_t v16 = StringProtocol.trimmingCharacters(in:)();
        uint64_t v18 = v17;
        v15(v6, v7);
        swift_bridgeObjectRelease();
        v0[28] = v16;
        v0[29] = v18;
        static CharacterSet.whitespacesAndNewlines.getter();
        uint64_t v19 = StringProtocol.trimmingCharacters(in:)();
        uint64_t v21 = v20;
        v15(v6, v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v22 = HIBYTE(v21) & 0xF;
        if ((v21 & 0x2000000000000000) == 0) {
          uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
        }
        if (v22)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
          }
          uint64_t v24 = v5[2];
          uint64_t v23 = v5[3];
          if (v24 >= v23 >> 1) {
            uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v5);
          }
          _OWORD v5[2] = v24 + 1;
          uint64_t v25 = &v5[2 * v24];
          void v25[4] = v19;
          v25[5] = v21;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v4 += 2;
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = 0;
  }
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void *))v0[1];
  return v26(v5);
}

uint64_t AnyCanvas.elementCanvasMembersVisibleOnScreen()()
{
  uint64_t v1 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v67 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  unint64_t v3 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  uint64_t v65 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v68 = *(void *)(v8 - 8);
  uint64_t v69 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v74 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v64 = (char *)&v58 - v11;
  uint64_t v12 = type metadata accessor for PKDrawing();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17.n128_f64[0] = MEMORY[0x270FA5388](v16);
  uint64_t v61 = (char *)&v58 - v18;
  uint64_t v19 = (void *)MEMORY[0x263F8EED0];
  id v62 = (id)(*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *v0) + 0x320))(v17);
  if (!v62) {
    return MEMORY[0x263F8EE88];
  }
  unint64_t v73 = v3;
  unint64_t v20 = *(uint64_t (**)(void))((*v19 & *v0) + 0x2F8);
  uint64_t v21 = (void *)v20();
  uint64_t v23 = v22;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v25 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(ObjectType, v23);

  if (!v25)
  {

    return MEMORY[0x263F8EE88];
  }
  id v26 = objc_msgSend(v25, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v61, v15, v12);
  PKDrawing._bridgeToObjectiveC()(v27);
  uint64_t v29 = v28;
  objc_msgSend(v62, sel_visibleOnscreenBoundsForDrawing_slack_, v28, 0.0, 0.0);

  uint64_t v30 = (void *)v20();
  uint64_t v32 = v31;
  uint64_t v33 = swift_getObjectType();
  unint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 64))(v33, v32);

  if (v34 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v35 = result;
  }
  else
  {
    uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v59 = v13;
  uint64_t v60 = v12;
  uint64_t v37 = (void *)MEMORY[0x263F8EED0];
  if (!v35)
  {
    uint64_t v41 = MEMORY[0x263F8EE78];
LABEL_25:
    swift_bridgeObjectRelease_n();
    uint64_t v57 = specialized Set.init<A>(_:)(v41);

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v60);
    return v57;
  }
  if (v35 >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = v69;
    CGFloat v71 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56);
    unint64_t v72 = v34 & 0xC000000000000001;
    uint64_t v63 = (void (**)(char *, uint64_t))(v73 + 8);
    double v70 = (unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48);
    uint64_t v40 = (void (**)(char *, char *, uint64_t))(v68 + 32);
    uint64_t v41 = MEMORY[0x263F8EE78];
    unint64_t v73 = v34;
    do
    {
      uint64_t v42 = v35;
      if (v72) {
        id v43 = (void *)MEMORY[0x21054E050](v38, v34);
      }
      else {
        id v43 = *(id *)(v34 + 8 * v38 + 32);
      }
      uint64_t v44 = v43;
      uint64_t v45 = (void *)(*(uint64_t (**)(void))((*v37 & *v43) + 0x1D8))();
      int v46 = CGPathIntersectsRect();

      if (v46)
      {
        uint64_t v47 = v65;
        (*(void (**)(void))((*v37 & *v44) + 0xE8))();
        unint64_t v48 = v7;
        uint64_t v49 = v66;
        SharedTagged_9.tag.getter();
        uint64_t v75 = v77;
        char v76 = v78;
        MEMORY[0x21054BDF0](v49);
        lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
        WeakTagged_9.init(_:id:)();
        unint64_t v50 = v47;
        uint64_t v39 = v69;
        uint64_t v51 = v49;
        uint64_t v7 = v48;
        uint64_t v37 = (void *)MEMORY[0x263F8EED0];
        (*v63)(v50, v51);
        uint64_t v52 = 0;
      }
      else
      {
        uint64_t v52 = 1;
      }
      (*v71)(v7, v52, 1, v39);

      if ((*v70)(v7, 1, v39) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      }
      else
      {
        uint64_t v53 = *v40;
        unint64_t v54 = v64;
        (*v40)(v64, v7, v39);
        v53(v74, v54, v39);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v41 + 16) + 1, 1, v41);
        }
        unint64_t v56 = *(void *)(v41 + 16);
        unint64_t v55 = *(void *)(v41 + 24);
        uint64_t v37 = (void *)MEMORY[0x263F8EED0];
        if (v56 >= v55 >> 1) {
          uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1, v41);
        }
        *(void *)(v41 + 16) = v56 + 1;
        v53((char *)(v41+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(void *)(v68 + 72) * v56), v74, v39);
      }
      unint64_t v34 = v73;
      uint64_t v35 = v42;
      ++v38;
    }
    while (v42 != v38);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

void closure #1 in AnyCanvas.textPromptLookupFor(_:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<([PKStroke]?, [PKStroke]?, [String]?, [String]?), Never>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  double v9 = MEMORY[0x270FA5388](v6);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v9);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = partial apply for closure #1 in closure #1 in AnyCanvas.textPromptLookupFor(_:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [PKStroke]?, @guaranteed [PKStroke]?, @guaranteed [String]?, @guaranteed [String]?) -> ();
  aBlock[3] = &block_descriptor_10_0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_release();
  id v13 = objc_msgSend(a2, sel_contextLookupResultsForPath_completion_, a3, v12);
  _Block_release(v12);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [PKStroke]?, @guaranteed [PKStroke]?, @guaranteed [String]?, @guaranteed [String]?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a2;
  double v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    type metadata accessor for PKStroke();
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (a3)
  {
    type metadata accessor for PKStroke();
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (a4) {
    a4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (a5) {
    a5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v9(v8, a3, a4, a5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void closure #1 in AnyCanvas.textPromptLookupFor(_:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<([PKStroke]?, [PKStroke]?, [String]?, [String]?), Never>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  type metadata accessor for PKStroke();
  isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in AnyCanvas.textPromptLookupFor(_:);
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [PKStroke]?, @guaranteed [PKStroke]?, @guaranteed [String]?, @guaranteed [String]?) -> ();
  aBlock[3] = &block_descriptor_79;
  unint64_t v10 = _Block_copy(aBlock);
  swift_release();
  id v11 = objc_msgSend(a2, sel_contextLookupResultsWithSelectedStrokes_completion_, isa, v10);
  _Block_release(v10);
}

uint64_t closure #1 in closure #1 in AnyCanvas.textPromptLookupFor(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v75 = type metadata accessor for CharacterSet();
  MEMORY[0x270FA5388](v75);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    uint64_t v74 = 0;
    if (a4) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }
  id v13 = *(char **)(a3 + 16);
  if (!v13)
  {
    uint64_t v74 = (void *)MEMORY[0x263F8EE78];
    if (a4) {
      goto LABEL_18;
    }
LABEL_33:
    uint64_t v41 = 0;
    goto LABEL_35;
  }
  uint64_t v66 = a4;
  uint64_t v67 = a2;
  uint64_t v68 = a1;
  uint64_t v69 = a5;
  double v70 = v10;
  CGFloat v71 = v10 + 1;
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v65 = a3;
  uint64_t v14 = (void *)(a3 + 40);
  uint64_t v74 = (void *)MEMORY[0x263F8EE78];
  uint64_t v15 = v71;
  do
  {
    uint64_t v18 = *(v14 - 1);
    __n128 v17 = (void *)*v14;
    unint64_t v72 = v13;
    unint64_t v73 = v17;
    uint64_t v80 = v18;
    CGRect v81 = (char *)v17;
    uint64_t v78 = 10;
    unint64_t v79 = 0xE100000000000000;
    uint64_t v76 = 32;
    unint64_t v77 = 0xE100000000000000;
    swift_bridgeObjectRetain();
    uint64_t v80 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    CGRect v81 = (char *)v19;
    uint64_t v78 = 9;
    unint64_t v79 = 0xE100000000000000;
    uint64_t v76 = 32;
    unint64_t v77 = 0xE100000000000000;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v80 = v20;
    CGRect v81 = (char *)v22;
    static CharacterSet.whitespacesAndNewlines.getter();
    uint64_t v23 = StringProtocol.trimmingCharacters(in:)();
    uint64_t v25 = v24;
    id v26 = *v15;
    uint64_t v27 = v75;
    (*v15)(v12, v75);
    swift_bridgeObjectRelease();
    uint64_t v80 = v23;
    CGRect v81 = (char *)v25;
    static CharacterSet.punctuationCharacters.getter();
    uint64_t v28 = StringProtocol.trimmingCharacters(in:)();
    uint64_t v30 = v29;
    v26(v12, v27);
    swift_bridgeObjectRelease();
    uint64_t v80 = v28;
    CGRect v81 = (char *)v30;
    static CharacterSet.whitespacesAndNewlines.getter();
    uint64_t v31 = StringProtocol.trimmingCharacters(in:)();
    unint64_t v33 = v32;
    v26(v12, v27);
    swift_bridgeObjectRelease();
    if ((v33 & 0x2000000000000000) != 0) {
      uint64_t v34 = HIBYTE(v33) & 0xF;
    }
    else {
      uint64_t v34 = v31 & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRelease();
    if (v34)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74[2] + 1, 1, v74);
      }
      uint64_t v16 = v72;
      unint64_t v36 = v74[2];
      unint64_t v35 = v74[3];
      if (v36 >= v35 >> 1) {
        uint64_t v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v74);
      }
      uint64_t v37 = v74;
      v74[2] = v36 + 1;
      uint64_t v38 = &v37[2 * v36];
      v38[4] = v31;
      v38[5] = v33;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = v72;
    }
    v14 += 2;
    id v13 = v16 - 1;
  }
  while (v13);
  swift_bridgeObjectRelease();
  a1 = v68;
  a5 = v69;
  a4 = v66;
  a2 = v67;
  unint64_t v10 = v70;
  if (!v66) {
    goto LABEL_33;
  }
LABEL_18:
  uint64_t v39 = *(void (***)(char *, uint64_t))(a4 + 16);
  if (v39)
  {
    uint64_t v67 = a2;
    uint64_t v68 = a1;
    uint64_t v69 = a5;
    double v70 = v10 + 1;
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v66 = a4;
    uint64_t v40 = (char **)(a4 + 40);
    uint64_t v41 = (void *)MEMORY[0x263F8EE78];
    do
    {
      unint64_t v73 = v41;
      uint64_t v44 = (uint64_t)*(v40 - 1);
      id v43 = *v40;
      CGFloat v71 = v39;
      unint64_t v72 = v43;
      uint64_t v80 = v44;
      CGRect v81 = v43;
      uint64_t v78 = 10;
      unint64_t v79 = 0xE100000000000000;
      uint64_t v76 = 32;
      unint64_t v77 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      uint64_t v80 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      CGRect v81 = (char *)v45;
      uint64_t v78 = 9;
      unint64_t v79 = 0xE100000000000000;
      uint64_t v76 = 32;
      unint64_t v77 = 0xE100000000000000;
      uint64_t v46 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      unint64_t v48 = v47;
      swift_bridgeObjectRelease();
      uint64_t v80 = v46;
      CGRect v81 = (char *)v48;
      static CharacterSet.whitespacesAndNewlines.getter();
      uint64_t v49 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v51 = v50;
      uint64_t v52 = *v70;
      uint64_t v53 = v75;
      (*v70)(v12, v75);
      swift_bridgeObjectRelease();
      uint64_t v80 = v49;
      CGRect v81 = (char *)v51;
      static CharacterSet.punctuationCharacters.getter();
      uint64_t v54 = StringProtocol.trimmingCharacters(in:)();
      unint64_t v56 = v55;
      v52(v12, v53);
      swift_bridgeObjectRelease();
      uint64_t v80 = v54;
      CGRect v81 = (char *)v56;
      static CharacterSet.whitespacesAndNewlines.getter();
      uint64_t v57 = StringProtocol.trimmingCharacters(in:)();
      unint64_t v59 = v58;
      v52(v12, v53);
      swift_bridgeObjectRelease();
      if ((v59 & 0x2000000000000000) != 0) {
        uint64_t v60 = HIBYTE(v59) & 0xF;
      }
      else {
        uint64_t v60 = v57 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRelease();
      if (v60)
      {
        uint64_t v41 = v73;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1, v41);
        }
        uint64_t v42 = v71;
        unint64_t v62 = v41[2];
        unint64_t v61 = v41[3];
        if (v62 >= v61 >> 1) {
          uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v61 > 1), v62 + 1, 1, v41);
        }
        v41[2] = v62 + 1;
        uint64_t v63 = &v41[2 * v62];
        v63[4] = v57;
        v63[5] = v59;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v41 = v73;
        uint64_t v42 = v71;
      }
      v40 += 2;
      uint64_t v39 = (void (**)(char *, uint64_t))((char *)v42 - 1);
    }
    while (v39);
    swift_bridgeObjectRelease();
    a1 = v68;
    a2 = v67;
  }
  else
  {
    uint64_t v41 = (void *)MEMORY[0x263F8EE78];
  }
LABEL_35:
  uint64_t v80 = a1;
  CGRect v81 = (char *)a2;
  uint64_t v82 = v74;
  CGRect v83 = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<([PKStroke]?, [PKStroke]?, [String]?, [String]?), Never>);
  return CheckedContinuation.resume(returning:)();
}

void closure #1 in AnyCanvas.updateCanvasAttachmentProvider()(void **a1@<X0>, void *a2@<X2>, void *a3@<X8>)
{
  id v24 = a2;
  uint64_t v25 = a3;
  uint64_t v4 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  id v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  (*(void (**)(double))((*MEMORY[0x263F8EED0] & **a1) + 0xE8))(v11);
  SharedTagged_9.tag.getter();
  uint64_t v26 = v28;
  char v27 = v29;
  MEMORY[0x21054BDF0](v5);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  WeakTagged_9.tag.getter();
  if (v29) {
    goto LABEL_6;
  }
  uint64_t v15 = v28;
  if (v28 == 1)
  {
    char v16 = 0;
    goto LABEL_7;
  }
  if (v28 == 5)
  {
    char v16 = 0;
    uint64_t v15 = 3;
    goto LABEL_7;
  }
  if (v28 != 2)
  {
LABEL_6:
    uint64_t v15 = 0;
    char v16 = 1;
  }
  else
  {
    char v16 = 0;
    uint64_t v15 = 2;
  }
LABEL_7:
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  if ((v16 & 1) != 0
    || (uint64_t v18 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v14) + 0x1D8),
        uint64_t v19 = (void *)((uint64_t (*)(uint64_t))v18)(v17),
        objc_msgSend(v24, sel_bounds),
        int v20 = CGPathIntersectsRect(),
        v19,
        !v20))
  {
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasAttachment()), sel_init);
    uint64_t v22 = v18();
    uint64_t v23 = *(void **)&v21[OBJC_IVAR____TtC8PaperKit16CanvasAttachment_boundingPath];
    *(void *)&v21[OBJC_IVAR____TtC8PaperKit16CanvasAttachment_boundingPath] = v22;

    *(void *)&v21[OBJC_IVAR____TtC8PaperKit16CanvasAttachment_type] = v15;
  }
  *uint64_t v25 = v21;
}

void partial apply for closure #1 in AnyCanvas.textPromptLookupFor(_:)(uint64_t a1)
{
  closure #1 in AnyCanvas.textPromptLookupFor(_:)(a1, *(void **)(v1 + 16));
}

{
  uint64_t v1;

  closure #1 in AnyCanvas.textPromptLookupFor(_:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      uint64_t v7 = (a1 & 0xC000000000000001) != 0
         ? (void *)MEMORY[0x21054E050](i - 4, a1)
         : *(id *)(a1 + 8 * i);
      unint64_t v8 = v7;
      uint64_t v9 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v13 = v7;
      closure #1 in AnyCanvas.updateCanvasAttachmentProvider()(&v13, a3, &v12);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v12)
      {
        MEMORY[0x21054D330]();
        if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v9 == v5)
      {
        swift_bridgeObjectRelease();
        return v14;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

void *specialized AnyCanvas.textResultsFromLookupResults(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (uint64_t *)(v1 + 40);
    uint64_t v5 = v3;
    do
    {
      uint64_t v7 = *(v4 - 1);
      uint64_t v6 = *v4;
      id v8 = objc_allocWithZone(MEMORY[0x263F14040]);
      swift_bridgeObjectRetain();
      id v9 = objc_msgSend(v8, sel_initWithUnit_, 0);
      uint64_t v10 = (void *)MEMORY[0x21054D080](v7, v6);
      objc_msgSend(v9, sel_setString_, v10);

      MEMORY[0x270FA5388](v11);
      NLTokenizer.enumerateTokens(in:using:)();

      swift_bridgeObjectRelease();
      v4 += 2;
      --v5;
    }
    while (v5);
    uint64_t v1 = a1;
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  uint64_t v12 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v14 = v13;
  swift_release();
  uint64_t v31 = v2;
  if (v3)
  {
    uint64_t v29 = v12;
    swift_bridgeObjectRetain();
    uint64_t v15 = (uint64_t *)(v1 + 40);
    uint64_t v2 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v17 = *(v15 - 1);
      uint64_t v16 = *v15;
      id v18 = objc_allocWithZone(MEMORY[0x263F14040]);
      swift_bridgeObjectRetain();
      id v19 = objc_msgSend(v18, sel_initWithUnit_, 0);
      int v20 = (void *)MEMORY[0x21054D080](v17, v16);
      objc_msgSend(v19, sel_setString_, v20);

      MEMORY[0x270FA5388](v21);
      NLTokenizer.enumerateTokens(in:using:)();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1);
      }
      uint64_t v2 = v31;
      unint64_t v23 = v31[2];
      unint64_t v22 = v31[3];
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t v2 = v31;
      }
      v2[2] = v23 + 1;
      id v24 = &v2[2 * v23];
      v24[4] = v17;
      v24[5] = v16;
      v15 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    uint64_t v12 = v29;
  }
  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
    }
    unint64_t v26 = v2[2];
    unint64_t v25 = v2[3];
    if (v26 >= v25 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v2);
    }
    v2[2] = v26 + 1;
    char v27 = &v2[2 * v26];
    v27[4] = v12;
    v27[5] = v14;
  }
  return v2;
}

uint64_t partial apply for closure #1 in String.wordCount.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (__OFADD__(*v1, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v1;
    return 1;
  }
  return result;
}

uint64_t block_copy_helper_79(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_79()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator;
  if (!lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator)
  {
    type metadata accessor for NSFastEnumerationIterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator);
  }
  return result;
}

uint64_t objectdestroyTm_10()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<([PKStroke]?, [PKStroke]?, [String]?, [String]?), Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in AnyCanvas.textPromptLookupFor(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<([PKStroke]?, [PKStroke]?, [String]?, [String]?), Never>)
                 - 8);
  return closure #1 in closure #1 in AnyCanvas.textPromptLookupFor(_:)(a1, a2, a3, a4, v4 + ((*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)));
}

uint64_t specialized static MagicGenerativePlaygroundContext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  unint64_t v6 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (v4 == 1)
    {
      if (v7 == 1)
      {
        type metadata accessor for CGImageRef(0);
        outlined copy of MagicGenerativePlaygroundContext((id)v6, (id)v5, 1);
        outlined copy of MagicGenerativePlaygroundContext(v3, v2, 1);
        lazy protocol witness table accessor for type CGImageRef and conformance CGImageRef();
        char v8 = static _CFObject.== infix(_:_:)();
        outlined consume of MagicGenerativePlaygroundContext(v3, v2, 1);
        uint64_t v9 = (void *)v6;
        uint64_t v10 = (void *)v5;
        char v11 = 1;
LABEL_19:
        outlined consume of MagicGenerativePlaygroundContext(v9, v10, v11);
        return v8 & 1;
      }
    }
    else if (v7 == 2 && (v5 | v6) == 0)
    {
      outlined consume of MagicGenerativePlaygroundContext(*(void **)a1, v2, 2);
      outlined consume of MagicGenerativePlaygroundContext(0, 0, 2);
      char v8 = 1;
      return v8 & 1;
    }
  }
  else if (!*(unsigned char *)(a2 + 16))
  {
    if (v3 == (id)v6 && v2 == (void *)v5) {
      char v8 = 1;
    }
    else {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    outlined copy of MagicGenerativePlaygroundContext((id)v6, (id)v5, 0);
    outlined copy of MagicGenerativePlaygroundContext(v3, v2, 0);
    outlined consume of MagicGenerativePlaygroundContext(v3, v2, 0);
    uint64_t v9 = (void *)v6;
    uint64_t v10 = (void *)v5;
    char v11 = 0;
    goto LABEL_19;
  }
  outlined copy of MagicGenerativePlaygroundContext(*(id *)a2, *(id *)(a2 + 8), v7);
  outlined copy of MagicGenerativePlaygroundContext(v3, v2, v4);
  outlined consume of MagicGenerativePlaygroundContext(v3, v2, v4);
  outlined consume of MagicGenerativePlaygroundContext((void *)v6, (id)v5, v7);
  char v8 = 0;
  return v8 & 1;
}

void destroy for MagicGenerativePlaygroundContext(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for MagicGenerativePlaygroundContext(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  int v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of MagicGenerativePlaygroundContext(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MagicGenerativePlaygroundContext(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  int v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of MagicGenerativePlaygroundContext(*(id *)a2, v4, v5);
  unint64_t v6 = *(void **)a1;
  int v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of MagicGenerativePlaygroundContext(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MagicGenerativePlaygroundContext(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  int v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of MagicGenerativePlaygroundContext(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for MagicGenerativePlaygroundContext()
{
  return &type metadata for MagicGenerativePlaygroundContext;
}

unint64_t lazy protocol witness table accessor for type CGImageRef and conformance CGImageRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CGImageRef and conformance CGImageRef;
  if (!lazy protocol witness table cache variable for type CGImageRef and conformance CGImageRef)
  {
    type metadata accessor for CGImageRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGImageRef and conformance CGImageRef);
  }
  return result;
}

double ReflowElement.minWidth.getter()
{
  return CGRectGetWidth(*(CGRect *)(v0 + 16));
}

double ReflowElement.initialBaselineOnLine.getter()
{
  return *(double *)(v0 + 88);
}

void ReflowElement.initialBaselineOnLine.setter(double a1, double a2, double a3, double a4)
{
  v4[11] = a1;
  v4[12] = a2;
  v4[13] = a3;
  v4[14] = a4;
}

uint64_t ReflowElement.baseline.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t ReflowElement.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReflowElement()
{
  return self;
}

uint64_t ReflowEnum.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ReflowEnum.SpaceCodingKeys>);
  uint64_t v17 = *(void *)(v4 - 8);
  uint64_t v18 = v4;
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ReflowEnum.WordCodingKeys>);
  uint64_t v19 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ReflowEnum.CodingKeys>);
  uint64_t v10 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (a2 < 0)
  {
    LOBYTE(v21) = 1;
    lazy protocol witness table accessor for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys();
    swift_retain();
    uint64_t v13 = v20;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v21 = a2 & 0x7FFFFFFFFFFFFFFFLL;
    type metadata accessor for ReflowSpace();
    lazy protocol witness table accessor for type ReflowSpace and conformance ReflowSpace(&lazy protocol witness table cache variable for type ReflowSpace and conformance ReflowSpace, (void (*)(uint64_t))type metadata accessor for ReflowSpace);
    uint64_t v14 = v18;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v14);
  }
  else
  {
    LOBYTE(v21) = 0;
    lazy protocol witness table accessor for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys();
    swift_retain();
    uint64_t v13 = v20;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v21 = a2;
    type metadata accessor for ReflowWord();
    lazy protocol witness table accessor for type ReflowSpace and conformance ReflowSpace(&lazy protocol witness table cache variable for type ReflowWord and conformance ReflowWord, (void (*)(uint64_t))type metadata accessor for ReflowWord);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v7);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v13);
  return swift_release();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ReflowEnum.CodingKeys()
{
  if (*v0) {
    return 0x6563617073;
  }
  else {
    return 1685221239;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ReflowEnum.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ReflowEnum.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReflowEnum.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReflowEnum.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ReflowEnum.SpaceCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReflowEnum.SpaceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReflowEnum.SpaceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ReflowEnum.SpaceCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReflowEnum.WordCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReflowEnum.WordCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t protocol witness for Decodable.init(from:) in conformance ReflowEnum@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized ReflowEnum.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ReflowEnum(void *a1)
{
  return ReflowEnum.encode(to:)(a1, *v1);
}

uint64_t specialized static ReflowEnum.typeArray(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_30;
  }
LABEL_3:
  if (v2 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v4 = 0;
      char v5 = (void *)MEMORY[0x263F8EE78];
      while (1)
      {
        MEMORY[0x21054E050](v4, a1);
        type metadata accessor for ReflowWord();
        uint64_t v6 = swift_dynamicCastClass();
        if (v6) {
          break;
        }
        type metadata accessor for ReflowSpace();
        uint64_t v8 = swift_dynamicCastClass();
        if (v8)
        {
          unint64_t v7 = v8 | 0x8000000000000000;
          goto LABEL_12;
        }
        swift_unknownObjectRelease();
LABEL_7:
        if (v2 == ++v4) {
          goto LABEL_28;
        }
      }
      unint64_t v7 = v6;
LABEL_12:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      _OWORD v5[2] = v10 + 1;
      v5[v10 + 4] = v7;
      goto LABEL_7;
    }
    type metadata accessor for ReflowWord();
    uint64_t v11 = 0;
    char v5 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v12 = swift_dynamicCastClass();
      if (v12) {
        break;
      }
      type metadata accessor for ReflowSpace();
      uint64_t v14 = swift_dynamicCastClass();
      if (v14)
      {
        unint64_t v13 = v14 | 0x8000000000000000;
        goto LABEL_24;
      }
LABEL_19:
      if (v2 == ++v11)
      {
LABEL_28:
        swift_bridgeObjectRelease();
        return (uint64_t)v5;
      }
    }
    unint64_t v13 = v12;
LABEL_24:
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    }
    unint64_t v16 = v5[2];
    unint64_t v15 = v5[3];
    if (v16 >= v15 >> 1) {
      char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v5);
    }
    _OWORD v5[2] = v16 + 1;
    v5[v16 + 4] = v13;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t specialized static ReflowEnum.untypeArray(_:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v5 = swift_retain();
      MEMORY[0x21054D330](v5);
      if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    swift_bridgeObjectRelease();
    return v6;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ReflowEnum(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for ReflowEnum()
{
  return swift_release();
}

void *assignWithCopy for ReflowEnum(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for ReflowEnum(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReflowEnum(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ReflowEnum(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)uint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for ReflowEnum(void *a1)
{
  return *a1 >> 63;
}

void *destructiveProjectEnumData for ReflowEnum(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *destructiveInjectEnumTag for ReflowEnum(uint64_t *result, uint64_t a2)
{
  *uint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for ReflowEnum()
{
  return &type metadata for ReflowEnum;
}

uint64_t specialized ReflowEnum.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1685221239 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6563617073 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t specialized ReflowEnum.init(from:)(void *a1)
{
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ReflowEnum.SpaceCodingKeys>);
  uint64_t v23 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ReflowEnum.WordCodingKeys>);
  uint64_t v22 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ReflowEnum.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  id v24 = a1;
  unint64_t v12 = (unint64_t)__swift_project_boxed_opaque_existential_1(a1, v11);
  lazy protocol witness table accessor for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys();
  uint64_t v13 = v25;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    uint64_t v25 = v8;
    uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v14 + 16) == 1)
    {
      if (*(unsigned char *)(v14 + 32))
      {
        LOBYTE(v26) = 1;
        lazy protocol witness table accessor for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        type metadata accessor for ReflowSpace();
        lazy protocol witness table accessor for type ReflowSpace and conformance ReflowSpace(&lazy protocol witness table cache variable for type ReflowSpace and conformance ReflowSpace, (void (*)(uint64_t))type metadata accessor for ReflowSpace);
        uint64_t v15 = v21;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v23 + 8))(v3, v15);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v7);
        unint64_t v12 = v26 | 0x8000000000000000;
      }
      else
      {
        LOBYTE(v26) = 0;
        lazy protocol witness table accessor for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        type metadata accessor for ReflowWord();
        lazy protocol witness table accessor for type ReflowSpace and conformance ReflowSpace(&lazy protocol witness table cache variable for type ReflowWord and conformance ReflowWord, (void (*)(uint64_t))type metadata accessor for ReflowWord);
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v7);
        unint64_t v12 = v26;
      }
    }
    else
    {
      unint64_t v12 = (unint64_t)v10;
      uint64_t v16 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v18 = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v18 = &type metadata for ReflowEnum;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x263F8DCB0], v16);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v25 + 8))(v12, v7);
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return v12;
}

unint64_t lazy protocol witness table accessor for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum.CodingKeys and conformance ReflowEnum.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum.SpaceCodingKeys and conformance ReflowEnum.SpaceCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum.WordCodingKeys and conformance ReflowEnum.WordCodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ReflowSpace and conformance ReflowSpace(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ReflowEnum.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C807F54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ReflowEnum.CodingKeys()
{
  return &unk_26C164A98;
}

void *type metadata accessor for ReflowEnum.WordCodingKeys()
{
  return &unk_26C164B28;
}

unsigned char *storeEnumTagSinglePayload for ReflowEnum.WordCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x20C80803CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for ReflowEnum.SpaceCodingKeys()
{
  return &unk_26C164BB8;
}

uint64_t _finalizeUninitializedArray<A>(_:)(uint64_t a1)
{
  return a1;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  uint64_t result = specialized Set.startIndex.getter(a1);
  if (v4) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 2;
  }
  else {
    return specialized Set.subscript.getter(result, v3, 0, a1) & 1;
  }
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))specialized Set.subscript.getter);
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))specialized Set.subscript.getter);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized Set.startIndex.getter(a1);
  if (v6) {
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = a2;
    uint64_t v11 = 1;
  }
  else
  {
    specialized Set.subscript.getter(result, v5, a1, a2);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v9 = v12;
    uint64_t v10 = a2;
    uint64_t v11 = 0;
  }
  return v8(v10, v11, 1, v9);
}

{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t vars8;

  uint64_t result = specialized Set.startIndex.getter(a1);
  if (v6) {
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    uint64_t v7 = type metadata accessor for CRAsset();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = a2;
    uint64_t v11 = 1;
  }
  else
  {
    specialized Set.subscript.getter(result, v5, a1, a2);
    uint64_t v12 = type metadata accessor for CRAsset();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v9 = v12;
    uint64_t v10 = a2;
    uint64_t v11 = 0;
  }
  return v8(v10, v11, 1, v9);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X8>)
{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, &lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, a1);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, &lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, a1);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(a2, a1);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v15[4] == v15[0])
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a3);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a4, 1, 1, v8);
  }
  else
  {
    uint64_t v10 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v12 = v11;
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a4, v12, v13);
    v10(v15, 0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a4, 0, 1, v13);
  }
}

uint64_t specialized Collection.first.getter(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, BOOL, uint64_t))
{
  unint64_t v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = __CocoaSet.startIndex.getter();
    uint64_t v7 = v6;
    uint64_t v8 = __CocoaSet.endIndex.getter();
    char v10 = MEMORY[0x21054DF00](v5, v7, v8, v9);
    swift_bridgeObjectRelease();
    if (v10)
    {
LABEL_3:
      outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(v5, v7, v4 != 0);
      return 0;
    }
LABEL_7:
    uint64_t v11 = a2(v5, v7, v4 != 0, a1);
    outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(v5, v7, v4 != 0);
    return v11;
  }
  uint64_t result = specialized _NativeSet.startIndex.getter(a1);
  if ((v14 & 1) == 0)
  {
    uint64_t v7 = v13;
    if (*(_DWORD *)(a1 + 36) == v13)
    {
      uint64_t v5 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PaperPage<>.updateAnnotations<A>(in:use:capsule:options:)(char *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v288 = a6;
  uint64_t v259 = a5;
  uint64_t v287 = a3;
  v307 = a1;
  uint64_t v281 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (SharedTagged_9<TaggedCanvasElement>, PDFAnnotation));
  MEMORY[0x270FA5388](v281);
  v280 = (char *)&v239 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v250 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, [PDFAnnotation]>);
  MEMORY[0x270FA5388](v250);
  char v252 = (char *)&v239 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v251 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, [PDFAnnotation]>.Iterator);
  MEMORY[0x270FA5388](v251);
  uint64_t v285 = (uint64_t)&v239 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v316 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x270FA5388](v316);
  uint64_t v312 = (uint64_t)&v239 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for PDFAnnotationElement();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v258 = (char *)&v239 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v261 = (char *)&v239 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v304 = (uint64_t)&v239 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v324 = (uint64_t)&v239 - v24;
  MEMORY[0x270FA5388](v25);
  v320 = (uint64_t *)((char *)&v239 - v26);
  MEMORY[0x270FA5388](v27);
  v321 = (uint64_t *)((char *)&v239 - v28);
  uint64_t v299 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
  MEMORY[0x270FA5388](v299);
  uint64_t v303 = (char **)((char *)&v239 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v30);
  uint64_t v298 = (uint64_t)&v239 - v31;
  uint64_t v264 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
  MEMORY[0x270FA5388](v264);
  uint64_t v263 = (char *)&v239 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v302 = (uint64_t)&v239 - v34;
  uint64_t v289 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<CRKeyPath>);
  uint64_t v256 = *(void *)(v289 - 8);
  MEMORY[0x270FA5388](v289);
  uint64_t v297 = (char *)&v239 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v36);
  long long v253 = (char *)&v239 - v37;
  uint64_t v38 = type metadata accessor for CRKeyPath();
  unint64_t v319 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v268 = (char *)&v239 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  v310 = (char *)&v239 - v41;
  MEMORY[0x270FA5388](v42);
  unint64_t v323 = (unint64_t)&v239 - v43;
  MEMORY[0x270FA5388](v44);
  v322 = (uint64_t *)((char *)&v239 - v45);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PDFAnnotationElement>?);
  MEMORY[0x270FA5388](v46 - 8);
  uint64_t v266 = (char *)&v239 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v48);
  uint64_t v295 = (void (*)(char *, uint64_t, uint64_t))((char *)&v239 - v49);
  uint64_t v301 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>);
  uint64_t v290 = *(void *)(v301 - 8);
  MEMORY[0x270FA5388](v301);
  int64_t v257 = (char *)&v239 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v51);
  v318 = (char *)&v239 - v52;
  MEMORY[0x270FA5388](v53);
  v317 = (char *)&v239 - v54;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v254 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  v305 = (char *)&v239 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v57);
  int64_t v283 = (char *)&v239 - v58;
  MEMORY[0x270FA5388](v59);
  unint64_t v296 = (char *)&v239 - v60;
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v61 - 8);
  uint64_t v279 = (char *)&v239 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v63);
  v284 = (char *)&v239 - v64;
  MEMORY[0x270FA5388](v65);
  uint64_t v267 = (char *)&v239 - v66;
  uint64_t v311 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v265 = *(void *)(v311 - 8);
  MEMORY[0x270FA5388](v311);
  uint64_t v68 = (char *)&v239 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v70 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  unint64_t v72 = (char *)&v239 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v282 = *a2;
  os_log_t v278 = *(void (**)(char *, unint64_t))a4;
  uint64_t v277 = *(void *)(a4 + 8);
  uint64_t v276 = *(void *)(a4 + 16);
  uint64_t v275 = *(void *)(a4 + 24);
  uint64_t v274 = *(void *)(a4 + 32);
  uint64_t v273 = *(void *)(a4 + 40);
  uint64_t v272 = *(void *)(a4 + 48);
  uint64_t v271 = *(void *)(a4 + 56);
  uint64_t v270 = *(void *)(a4 + 64);
  int v241 = *(unsigned __int8 *)(a4 + 74);
  int v240 = *(unsigned __int16 *)(a4 + 72);
  unint64_t v306 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v73 = *(void (**)(uint64_t, uint64_t))(a8 + 72);
  v73(v259, a8);
  v314 = (void (**)(void, void))v38;
  uint64_t v262 = CROrderedSet.map<A>(_:)();
  uint64_t v246 = v70;
  uint64_t v74 = *(void (**)(char *, uint64_t))(v70 + 8);
  v74(v72, v69);
  uint64_t v249 = a8;
  uint64_t v243 = a8 + 72;
  uint64_t v242 = v73;
  v73(v259, a8);
  uint64_t v75 = v68;
  uint64_t v76 = v267;
  CROrderedSet.makeIterator()();
  v247 = v72;
  uint64_t v248 = v69;
  uint64_t v245 = v70 + 8;
  uint64_t v244 = v74;
  v74(v72, v69);
  CROrderedSet.Iterator.next()();
  uint64_t v77 = v254;
  uint64_t v78 = *(unsigned int (**)(void, void, void))(v254 + 48);
  uint64_t v309 = v254 + 48;
  v308 = (unsigned int (*)(char *, uint64_t, uint64_t))v78;
  unsigned int v79 = v78(v76, 1, v55);
  uint64_t v313 = v55;
  if (v79 != 1)
  {
    uint64_t v97 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
    int v98 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))(v290 + 48);
    uint64_t v300 = (void (**)(char *, uint64_t, unint64_t))(v290 + 32);
    int64_t v294 = (void (**)(char *, char *, unint64_t))(v290 + 16);
    unint64_t v286 = v319 + 16;
    unint64_t v269 = v290 + 40;
    v292 = (void (**)(uint64_t *, void))(v319 + 8);
    v291 = (void (**)(char *, unint64_t))(v290 + 8);
    v315 = (void (**)(char *, uint64_t))(v77 + 8);
    unint64_t v81 = v301;
    uint64_t v99 = (uint64_t)v295;
    unint64_t v100 = v296;
    v293 = (void (**)(char *, uint64_t))(v290 + 48);
    v97(v296, v76, v55);
    while (1)
    {
      SharedTagged_9.tagged9.getter();
      if ((*v98)(v99, 1, v81) == 1)
      {
        (*v315)(v100, v55);
        outlined destroy of StocksKitCurrencyCache.Provider?(v99, &demangling cache variable for type metadata for Ref<PDFAnnotationElement>?);
      }
      else
      {
        uint64_t v101 = v76;
        uint64_t v102 = v75;
        uint64_t v103 = *v300;
        unint64_t v104 = v317;
        (*v300)(v317, v99, v81);
        uint64_t v105 = v322;
        MEMORY[0x21054BDF0](v55);
        (*v294)(v318, v104, v81);
        unint64_t v106 = v306;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v327 = (void (*)(char *, unint64_t))v106;
        unint64_t v81 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v105);
        uint64_t v109 = *(void *)(v106 + 16);
        BOOL v110 = (v108 & 1) == 0;
        uint64_t v111 = v109 + v110;
        if (__OFADD__(v109, v110)) {
          goto LABEL_123;
        }
        char v112 = v108;
        if (*(void *)(v106 + 24) >= v111)
        {
          unint64_t v100 = v296;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v111, isUniquelyReferenced_nonNull_native);
          unint64_t v113 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v322);
          unint64_t v100 = v296;
          if ((v112 & 1) != (v114 & 1)) {
            goto LABEL_129;
          }
          unint64_t v81 = v113;
        }
        uint64_t v55 = v313;
        unint64_t v115 = v327;
        if (v112)
        {
          unint64_t v306 = (unint64_t)v327;
          unint64_t v116 = *((void *)v327 + 7) + *(void *)(v290 + 72) * v81;
          unint64_t v81 = v301;
          (*(void (**)(unint64_t, char *, uint64_t))(v290 + 40))(v116, v318, v301);
        }
        else
        {
          *((void *)v327 + (v81 >> 6) + 8) |= 1 << v81;
          (*(void (**)(unint64_t, uint64_t *, void (**)(void, void)))(v319 + 16))(*((void *)v115 + 6) + *(void *)(v319 + 72) * v81, v322, v314);
          unint64_t v117 = *((void *)v115 + 7) + *(void *)(v290 + 72) * v81;
          unint64_t v81 = v301;
          v103((char *)v117, (uint64_t)v318, v301);
          uint64_t v118 = *((void *)v115 + 2);
          BOOL v119 = __OFADD__(v118, 1);
          uint64_t v120 = v118 + 1;
          if (v119) {
            goto LABEL_126;
          }
          *((void *)v115 + 2) = v120;
          unint64_t v306 = (unint64_t)v327;
        }
        swift_bridgeObjectRelease();
        (*v292)(v322, v314);
        (*v291)(v317, v81);
        (*v315)(v100, v55);
        uint64_t v99 = (uint64_t)v295;
        uint64_t v75 = v102;
        uint64_t v76 = v101;
        int v98 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))v293;
      }
      CROrderedSet.Iterator.next()();
      if (v308(v76, 1, v55) == 1) {
        break;
      }
      v97(v100, v76, v55);
    }
  }
  (*(void (**)(char *, uint64_t))(v265 + 8))(v75, v311);
  id v80 = objc_msgSend(v307, sel_annotations);
  unint64_t v269 = type metadata accessor for PDFAnnotation();
  unint64_t v81 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v81 >> 62) {
    goto LABEL_127;
  }
  uint64_t v82 = *(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
  uint64_t v83 = (uint64_t)v320;
  CGRect v84 = v314;
  if (!v82)
  {
    swift_bridgeObjectRelease();
    unint64_t v93 = (void (*)(char *, unint64_t))MEMORY[0x263F8EE78];
LABEL_38:
    unint64_t v286 = a10;
    v327 = (void (*)(char *, unint64_t))v262;
    v338 = v93;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A], &demangling cache variable for type metadata for [CRKeyPath]);
    uint64_t v121 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
    long long v122 = v253;
    uint64_t v267 = (char *)v121;
    BidirectionalCollection<>.difference<A>(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v123 = *(char **)(v256 + 16);
    uint64_t v124 = (uint64_t)v263;
    uint64_t v125 = v289;
    unint64_t v296 = (char *)(v256 + 16);
    uint64_t v295 = (void (*)(char *, uint64_t, uint64_t))v123;
    ((void (*)(char *, char *, uint64_t))v123)(v263, v122, v289);
    uint64_t v126 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CollectionDifference<CRKeyPath> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>);
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v127 = v264;
    *(void *)(v124 + *(int *)(v264 + 36)) = v327;
    uint64_t v128 = v302;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v124, v302, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
    uint64_t v129 = (void (**)(char *, unint64_t))(v128 + *(int *)(v127 + 36));
    uint64_t v262 = OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_appearanceStreamAnnotations;
    uint64_t v130 = *v129;
    dispatch thunk of Collection.endIndex.getter();
    id v131 = v303;
    if (v130 == v327)
    {
LABEL_40:
      LODWORD(v321) = v240 | (v241 << 16);
      outlined destroy of StocksKitCurrencyCache.Provider?(v128, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
      id v132 = v307;
      objc_msgSend(v307, sel_boundsForBox_, 0);
      uint64_t v134 = v133;
      uint64_t v136 = v135;
      uint64_t v138 = v137;
      uint64_t v140 = v139;
      uint64_t v141 = v247;
      v242(v259, v249);
      id v142 = objc_msgSend(v132, sel_annotations);
      uint64_t v143 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v144 = v246;
      uint64_t v145 = v252;
      uint64_t v146 = v248;
      (*(void (**)(char *, char *, uint64_t))(v246 + 16))(v252, v141, v248);
      uint64_t v147 = *(int *)(v250 + 52);
      *(void *)&v145[v147] = v143;
      v244(v141, v146);
      (*(void (**)(char *, char *, uint64_t))(v144 + 32))(v141, v145, v146);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
      uint64_t v148 = v285;
      dispatch thunk of Sequence.makeIterator()();
      uint64_t v149 = *(void *)&v145[v147];
      uint64_t v150 = v148;
      uint64_t v151 = v251;
      uint64_t v152 = (void *)(v148 + *(int *)(v251 + 52));
      void *v152 = v149;
      v152[1] = 0;
      unint64_t v323 = *(int *)(v151 + 56);
      *(unsigned char *)(v148 + v323) = 0;
      uint64_t v324 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
      uint64_t v153 = (void (**)(char *, uint64_t, uint64_t))(v254 + 32);
      v318 = (char *)(v254 + 16);
      v317 = (char *)(v254 + 56);
      v322 = (uint64_t *)(v254 + 8);
      uint64_t v154 = v313;
      v320 = v152;
      unint64_t v319 = v254 + 32;
      while (1)
      {
        uint64_t v162 = (uint64_t)v284;
        dispatch thunk of IteratorProtocol.next()();
        if (v308((char *)v162, 1, v154) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v162, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
          goto LABEL_117;
        }
        id v163 = *v153;
        uint64_t v164 = v283;
        (*v153)(v283, v162, v154);
        uint64_t v166 = *v152;
        unint64_t v165 = v152[1];
        if (*v152 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v167 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v167 = *(void *)((v166 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        unint64_t v81 = v282;
        if (v165 == v167) {
          break;
        }
        if ((v166 & 0xC000000000000001) != 0)
        {
          id v168 = (id)MEMORY[0x21054E050](v165, v166);
        }
        else
        {
          if ((v165 & 0x8000000000000000) != 0) {
            goto LABEL_120;
          }
          if (v165 >= *(void *)((v166 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_122;
          }
          id v168 = *(id *)(v166 + 8 * v165 + 32);
        }
        uint64_t v169 = v168;
        if (__OFADD__(v165, 1)) {
          goto LABEL_121;
        }
        v152[1] = v165 + 1;
        uint64_t v170 = *(int *)(v281 + 48);
        uint64_t v171 = v280;
        uint64_t v172 = v313;
        v163(v280, (uint64_t)v164, v313);
        *(void *)&v171[v170] = v169;
        v163(v305, (uint64_t)v171, v172);
        if (v81 == 0x8000000000000000)
        {
          outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
          outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
          if (!PDFAnnotation.shouldMirrorAsPDFAnnotationElement()())
          {
            SharedTagged_9.tag.getter();
            v338 = v327;
            char v339 = v328;
            uint64_t v325 = 8;
            char v326 = 0;
            lazy protocol witness table accessor for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum();
            uint64_t v173 = static CRExtensible.== infix(_:_:)() & 1;
            if (v173 != objc_msgSend(v169, sel_shouldDisplay)) {
              objc_msgSend(v169, sel_setShouldDisplay_, v173);
            }
          }
        }
        else
        {
          outlined copy of PaperDocument.PDFDocumentUse(v81);
          outlined consume of PaperDocument.PDFDocumentUse(v81);
          outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
        }
        uint64_t v155 = v287;
        uint64_t v154 = v313;
        uint64_t v156 = v288;
        unint64_t v157 = v286;
        uint64_t v158 = v305;
        SharedTagged_9.subscript.getter();
        uint64_t v160 = v340;
        uint64_t v159 = v341;
        __swift_project_boxed_opaque_existential_1(&v338, v340);
        uint64_t v325 = v81;
        uint64_t v161 = (uint64_t)v279;
        (*(void (**)(char *, char *, uint64_t))v318)(v279, v158, v154);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))v317)(v161, 0, 1, v154);
        v342[0] = v134;
        v342[1] = v136;
        v342[2] = v138;
        v342[3] = v140;
        char v343 = 0;
        v327 = v278;
        uint64_t v328 = v277;
        uint64_t v329 = v276;
        uint64_t v330 = v275;
        uint64_t v331 = v274;
        uint64_t v332 = v273;
        uint64_t v333 = v272;
        uint64_t v334 = v271;
        uint64_t v335 = v270;
        char v337 = BYTE2(v321);
        __int16 v336 = (__int16)v321;
        (*(void (**)(uint64_t *, uint64_t, void *, void *, uint64_t, void (**)(char *, unint64_t), uint64_t, unint64_t, uint64_t, uint64_t))(v159 + 96))(&v325, v161, v169, v342, v155, &v327, v156, v157, v160, v159);

        outlined destroy of StocksKitCurrencyCache.Provider?(v161, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
        ((void (*)(char *, uint64_t))*v322)(v158, v154);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v338);
        uint64_t v150 = v285;
        uint64_t v125 = v289;
        uint64_t v152 = v320;
        uint64_t v153 = (void (**)(char *, uint64_t, uint64_t))v319;
        if (*(unsigned char *)(v285 + v323) == 1) {
          goto LABEL_118;
        }
      }
      ((void (*)(char *, uint64_t))*v322)(v164, v313);
      uint64_t v150 = v285;
LABEL_117:
      *(unsigned char *)(v150 + v323) = 1;
LABEL_118:
      outlined destroy of StocksKitCurrencyCache.Provider?(v150, &demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, [PDFAnnotation]>.Iterator);
      (*(void (**)(char *, uint64_t))(v256 + 8))(v253, v125);
      return swift_bridgeObjectRelease();
    }
    v293 = (void (**)(char *, uint64_t))(v256 + 8);
    uint64_t v300 = (void (**)(char *, uint64_t, unint64_t))(v319 + 32);
    uint64_t v265 = v290 + 56;
    uint64_t v260 = (void (**)(char *, uint64_t, uint64_t))(v290 + 16);
    uint64_t v264 = v290 + 48;
    v322 = (uint64_t *)(v319 + 56);
    v321 = (uint64_t *)(v319 + 16);
    v315 = (void (**)(char *, uint64_t))(v319 + 48);
    v314 = (void (**)(void, void))(v319 + 8);
    uint64_t v255 = (void (**)(char *, uint64_t))(v290 + 8);
    v292 = (void (**)(uint64_t *, void))v126;
    v291 = v129;
    while (1)
    {
      id v178 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
      uint64_t v179 = v298;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v180, v298, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
      v178(&v327, 0);
      uint64_t v181 = v297;
      v295(v297, v128, v125);
      dispatch thunk of Collection.formIndex(after:)();
      (*v293)(v181, v125);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v179, (uint64_t)v131, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
      EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
      uint64_t v183 = *v131;
      if (EnumCaseMultiPayload != 1) {
        break;
      }
      unint64_t v81 = (unint64_t)objc_msgSend(v307, sel_annotations);
      uint64_t v184 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v184 & 0xC000000000000001) != 0)
      {
        id v185 = (id)MEMORY[0x21054E050](v183, v184);
      }
      else
      {
        if (((unint64_t)v183 & 0x8000000000000000) != 0) {
          goto LABEL_124;
        }
        if ((unint64_t)v183 >= *(void *)((v184 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_125;
        }
        id v185 = *(id *)(v184 + 8 * (void)v183 + 32);
      }
      uint64_t v186 = v185;
      swift_bridgeObjectRelease();
      id v187 = objc_msgSend(v186, sel_type);
      if (v187)
      {
        uint64_t v188 = v187;
        uint64_t v189 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v191 = v190;

        if (v189 == 0x746567646957 && v191 == 0xE600000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_101:
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v227 = type metadata accessor for Logger();
          __swift_project_value_buffer(v227, (uint64_t)logger);
          uint64_t v228 = Logger.logObject.getter();
          os_log_type_t v229 = static os_log_type_t.error.getter();
          BOOL v230 = os_log_type_enabled(v228, v229);
          id v174 = v291;
          if (v230)
          {
            dispatch_group_t v231 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)dispatch_group_t v231 = 0;
            _os_log_impl(&dword_20C2D7000, v228, v229, "Attempted to remove a Widget annotation.", v231, 2u);
            MEMORY[0x210550270](v231, -1, -1);
          }

          uint64_t v128 = v302;
          goto LABEL_59;
        }
        char v193 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v193) {
          goto LABEL_101;
        }
      }
      objc_msgSend(v307, sel_removeAnnotation_atIndex_, v186, v183);
      uint64_t v128 = v302;
      id v174 = v291;
LABEL_59:

      uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CRKeyPath, associatedWith: Int?));
      id v131 = v303;
      uint64_t v176 = (char *)v303 + *(int *)(v175 + 48);
LABEL_60:
      (*v314)(v176, v84);
      uint64_t v177 = *v174;
      dispatch thunk of Collection.endIndex.getter();
      if (v177 == v327) {
        goto LABEL_40;
      }
    }
    uint64_t v194 = (char *)v131
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CRKeyPath, associatedWith: Int?))
                  + 48);
    uint64_t v195 = (uint64_t)v310;
    int64_t v294 = (void (**)(char *, char *, unint64_t))*v300;
    ((void (*)(char *, char *, void (**)(void, void)))v294)(v310, v194, v84);
    unint64_t v196 = v306;
    if (*(void *)(v306 + 16))
    {
      unint64_t v197 = specialized __RawDictionaryStorage.find<A>(_:)(v195);
      uint64_t v198 = v301;
      if (v199)
      {
        uint64_t v200 = (uint64_t)v266;
        (*(void (**)(char *, unint64_t, uint64_t))(v290 + 16))(v266, *(void *)(v196 + 56) + *(void *)(v290 + 72) * v197, v301);
        uint64_t v201 = 0;
      }
      else
      {
        uint64_t v201 = 1;
        uint64_t v200 = (uint64_t)v266;
      }
    }
    else
    {
      uint64_t v201 = 1;
      uint64_t v200 = (uint64_t)v266;
      uint64_t v198 = v301;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v265)(v200, v201, 1, v198);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v264)(v200, 1, v198))
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v200, &demangling cache variable for type metadata for Ref<PDFAnnotationElement>?);
      uint64_t v202 = *(char **)&v307[v262];
      if (v202)
      {
        uint64_t v263 = v183;
        if ((unint64_t)v202 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v203 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v203 = *(void *)(((unint64_t)v202 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
        }
        uint64_t v204 = v312;
        uint64_t v205 = v310;
        uint64_t v206 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
        if (v203)
        {
          unint64_t v319 = (unint64_t)v202 & 0xC000000000000001;
          uint64_t v207 = 4;
          v318 = v202;
          v317 = (char *)v203;
          while (1)
          {
            if (v319) {
              id v209 = (id)MEMORY[0x21054E050](v207 - 4, v202);
            }
            else {
              id v209 = *(id *)&v202[8 * v207];
            }
            unint64_t v81 = (unint64_t)v209;
            objc_super v210 = (char *)(v207 - 3);
            if (__OFADD__(v207 - 4, 1))
            {
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              swift_bridgeObjectRetain();
              uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_4;
            }
            type metadata accessor for CanvasElementPDFAnnotation();
            unint64_t v323 = v81;
            uint64_t v211 = swift_dynamicCastClass();
            if (v211)
            {
              uint64_t v212 = v211 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
              swift_beginAccess();
              outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v212, v83, v206);
              uint64_t v213 = v322;
            }
            else
            {
              uint64_t v213 = v322;
              ((void (*)(uint64_t, uint64_t, uint64_t, void (**)(void, void)))*v322)(v83, 1, 1, v84);
            }
            uint64_t v214 = v206;
            uint64_t v215 = v324;
            ((void (*)(uint64_t, char *, void (**)(void, void)))*v321)(v324, v205, v84);
            ((void (*)(uint64_t, void, uint64_t, void (**)(void, void)))*v213)(v215, 0, 1, v84);
            uint64_t v216 = v204 + *(int *)(v316 + 48);
            outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v83, v204, v214);
            outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v215, v216, v214);
            uint64_t v217 = v204;
            uint64_t v218 = *v315;
            uint64_t v206 = v214;
            if (((unsigned int (*)(uint64_t, uint64_t, void (**)(void, void)))*v315)(v217, 1, v84) == 1)break; {
            uint64_t v219 = v304;
            }
            outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v217, v304, v214);
            if (((unsigned int (*)(uint64_t, uint64_t, void (**)(void, void)))v218)(v216, 1, v84) == 1)
            {
              (*v314)(v219, v84);
              uint64_t v206 = v214;
LABEL_85:
              uint64_t v204 = v312;
              outlined destroy of StocksKitCurrencyCache.Provider?(v312, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
              outlined destroy of StocksKitCurrencyCache.Provider?(v324, v206);
              uint64_t v83 = (uint64_t)v320;
              outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v320, v206);
              id v208 = (id)v323;
              goto LABEL_86;
            }
            unint64_t v220 = v268;
            ((void (*)(char *, uint64_t, void (**)(void, void)))v294)(v268, v216, v84);
            char v221 = dispatch thunk of static Equatable.== infix(_:_:)();
            float64_t v222 = (void (*)(char *, void))*v314;
            (*v314)(v219, v84);
            uint64_t v223 = v220;
            uint64_t v205 = v310;
            v222(v223, v84);
            outlined destroy of StocksKitCurrencyCache.Provider?(v217, v214);
            outlined destroy of StocksKitCurrencyCache.Provider?(v324, v214);
            uint64_t v224 = (uint64_t)v320;
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v320, v214);
            uint64_t v204 = v217;
            uint64_t v83 = v224;
            uint64_t v206 = v214;
            id v208 = (id)v323;
            if (v221) {
              goto LABEL_112;
            }
LABEL_86:

            ++v207;
            uint64_t v202 = v318;
            if (v210 == v317) {
              goto LABEL_106;
            }
          }
          if (((unsigned int (*)(uint64_t, uint64_t, void (**)(void, void)))v218)(v216, 1, v84) == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v312, v214);
            outlined destroy of StocksKitCurrencyCache.Provider?(v324, v214);
            uint64_t v83 = (uint64_t)v320;
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v320, v214);
            id v208 = (id)v323;
LABEL_112:
            swift_bridgeObjectRelease_n();
            uint64_t v125 = v289;
            uint64_t v183 = v263;
            goto LABEL_108;
          }
          goto LABEL_85;
        }
LABEL_106:
        swift_bridgeObjectRelease_n();
        uint64_t v125 = v289;
        uint64_t v183 = v263;
      }
      id v208 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasElementPDFAnnotation()), sel_init);
    }
    else
    {
      unint64_t v225 = v257;
      (*v260)(v257, v200, v198);
      outlined destroy of StocksKitCurrencyCache.Provider?(v200, &demangling cache variable for type metadata for Ref<PDFAnnotationElement>?);
      uint64_t v226 = (uint64_t)v258;
      Ref.subscript.getter();
      (*v255)(v225, v198);
      type metadata accessor for Capsule();
      swift_getWitnessTable();
      id v208 = specialized PDFAnnotationElement.newPDFAnnotation<A>(in:)();
      outlined destroy of ShapeSecondaryProperties(v226, (uint64_t (*)(void))type metadata accessor for PDFAnnotationElement);
    }
LABEL_108:
    type metadata accessor for CanvasElementPDFAnnotation();
    uint64_t v232 = swift_dynamicCastClass();
    uint64_t v233 = v310;
    if (v232)
    {
      uint64_t v234 = v232;
      uint64_t v235 = (uint64_t)v261;
      ((void (*)(char *, char *, void (**)(void, void)))*v321)(v261, v310, v84);
      ((void (*)(uint64_t, void, uint64_t, void (**)(void, void)))*v322)(v235, 0, 1, v84);
      uint64_t v236 = v234 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
      swift_beginAccess();
      id v237 = v208;
      outlined assign with take of CRKeyPath?(v235, v236);
      swift_endAccess();
    }
    objc_msgSend(v307, sel_insertAnnotation_atIndex_, v208, v183);

    uint64_t v176 = v233;
    id v131 = v303;
    uint64_t v128 = v302;
    id v174 = v291;
    goto LABEL_60;
  }
  v327 = (void (*)(char *, unint64_t))MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82 & ~(v82 >> 63), 0);
  if ((v82 & 0x8000000000000000) == 0)
  {
    uint64_t v85 = 0;
    v322 = (uint64_t *)(v81 & 0xC000000000000001);
    uint64_t v86 = (unsigned int (**)(uint64_t *, uint64_t, void (**)(void, void)))(v319 + 48);
    id v87 = (void (**)(char *, uint64_t *, void (**)(void, void)))(v319 + 32);
    v318 = (char *)(v319 + 56);
    while (1)
    {
      id v88 = v322 ? (id)MEMORY[0x21054E050](v85, v81) : *(id *)(v81 + 8 * v85 + 32);
      uint64_t v89 = v88;
      type metadata accessor for CanvasElementPDFAnnotation();
      uint64_t v90 = swift_dynamicCastClass();
      if (!v90) {
        break;
      }
      uint64_t v91 = v90 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
      swift_beginAccess();
      unint64_t v92 = v321;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v91, (uint64_t)v321, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      if ((*v86)(v92, 1, v84) == 1) {
        goto LABEL_14;
      }
      (*v87)((char *)v323, v92, v84);
LABEL_15:

      unint64_t v93 = v327;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v93 + 2) + 1, 1);
        unint64_t v93 = v327;
      }
      unint64_t v94 = v319;
      unint64_t v96 = *((void *)v93 + 2);
      unint64_t v95 = *((void *)v93 + 3);
      if (v96 >= v95 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1, v96 + 1, 1);
        unint64_t v94 = v319;
        unint64_t v93 = v327;
      }
      ++v85;
      *((void *)v93 + 2) = v96 + 1;
      (*(void (**)(unint64_t, unint64_t, void (**)(void, void)))(v94 + 32))((unint64_t)v93+ ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))+ *(void *)(v94 + 72) * v96, v323, v84);
      v327 = v93;
      if (v82 == v85)
      {
        swift_bridgeObjectRelease();
        uint64_t v83 = (uint64_t)v320;
        goto LABEL_38;
      }
    }
    unint64_t v92 = v321;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, void (**)(void, void)))v318)(v321, 1, 1, v84);
LABEL_14:
    static CRKeyPath.unique.getter();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v92, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    goto LABEL_15;
  }
  __break(1u);
LABEL_129:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void protocol witness for PaperPage.setVellum<A>(opacity:in:) in conformance PaperDocumentPage(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  PaperPage<>.setVellum<A>(opacity:in:)(a1, a5, a2, v10, (uint64_t)&protocol witness table for PaperDocumentPage, a6);
}

void PaperPage<>.setVellum<A>(opacity:in:)(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v108 = a6;
  uint64_t v113 = a1;
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v120 = *(void *)(v119 - 8);
  MEMORY[0x270FA5388](v119);
  uint64_t v102 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v100);
  uint64_t v99 = (uint64_t)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  int v98 = (char *)&v93 - v13;
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v96);
  uint64_t v95 = (uint64_t)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v94 = (char *)&v93 - v16;
  uint64_t v112 = type metadata accessor for ShapeSecondaryProperties();
  MEMORY[0x270FA5388](v112);
  uint64_t v101 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v105 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v116 = *(void *)(v117 - 8);
  MEMORY[0x270FA5388](v117);
  unint64_t v104 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  unint64_t v115 = (char *)&v93 - v22;
  uint64_t v107 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v23);
  unint64_t v106 = (char *)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v111);
  uint64_t v114 = (uint64_t)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v110 = (uint64_t)&v93 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)&v93 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v32 - 8);
  uint64_t v34 = (char *)&v93 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Shape>?);
  MEMORY[0x270FA5388](v35 - 8);
  uint64_t v37 = (char *)&v93 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Shape>);
  uint64_t v39 = *(void *)(v38 - 8);
  double v40 = MEMORY[0x270FA5388](v38);
  unint64_t v93 = (char *)&v93 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, double))(a5 + 72);
  uint64_t v118 = v6;
  uint64_t v109 = a2;
  uint64_t v103 = a5;
  v42(a2, a5, v40);
  specialized Collection.first.getter(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, &lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, (uint64_t)v34);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v44 = v120;
  uint64_t v97 = v28;
  v43(v31, v28);
  uint64_t v45 = v119;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v34, 1, v119) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v37, 1, 1, v38);
LABEL_4:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v37, &demangling cache variable for type metadata for Ref<Shape>?);
    goto LABEL_5;
  }
  SharedTagged_9.tagged6.getter();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v34, v45);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38) == 1) {
    goto LABEL_4;
  }
  unsigned int v79 = v93;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v93, v37, v38);
  uint64_t v80 = v110;
  Ref.subscript.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  outlined destroy of ShapeSecondaryProperties(v80, (uint64_t (*)(void))type metadata accessor for Shape);
  if ((v122 & 2) != 0)
  {
    unint64_t v81 = (void (*)(long long *, void))Ref.subscript.modify();
    v121[0] = a3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.setter();
    v81(&v122, 0);
    uint64_t v82 = v107;
    uint64_t v83 = v106;
    uint64_t v84 = v109;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v106, v118, v109);
    double v85 = (*(double (**)(uint64_t))(v108 + 56))(v84);
    uint64_t v87 = v86;
    uint64_t v89 = v88;
    uint64_t v91 = v90;
    (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v84);
    unint64_t v92 = (void (*)(long long *, void))Ref.subscript.modify();
    v121[0] = v85;
    *(void *)&v121[1] = v87;
    *(void *)&_OWORD v121[2] = v89;
    *(void *)&v121[3] = v91;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.setter();
    v92(&v122, 0);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v79, v38);
    return;
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v79, v38);
LABEL_5:
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  uint64_t v46 = v115;
  TaggedValue_9.init(_:)();
  uint64_t v47 = v104;
  (*(void (**)(char *, char *, uint64_t))(v116 + 16))(v104, v46, v117);
  *(void *)&long long v122 = 0;
  v121[0] = 0.0;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v49 = (uint64_t)v105;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v105, 1, 1, v48);
  uint64_t v126 = 0;
  Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v47, (uint64_t *)&v122, (uint64_t *)v121, v49, &v126, v114, 0.0, 0.0, 0.0, 0.0, 5.0);
  __asm { FMOV            V0.2D, #1.0 }
  v125[0] = _Q0;
  v125[1] = _Q0;
  uint64_t v55 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (!v55)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v56 = v55;
  CGColorRef v57 = CGColorCreate(v55, (const CGFloat *)v125);

  if (!v57)
  {
LABEL_14:
    __break(1u);
    return;
  }
  *(void *)&long long v122 = v57;
  uint64_t v58 = v111;
  uint64_t v59 = v114;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.setter();
  *(void *)&long long v122 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.setter();
  uint64_t v60 = v107;
  uint64_t v61 = v106;
  uint64_t v62 = v109;
  (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v106, v118, v109);
  double v63 = (*(double (**)(uint64_t))(v108 + 56))(v62);
  uint64_t v65 = v64;
  uint64_t v67 = v66;
  uint64_t v69 = v68;
  (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
  *(double *)&long long v122 = v63;
  *((void *)&v122 + 1) = v65;
  *(void *)&long long v123 = v67;
  *((void *)&v123 + 1) = v69;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  *(double *)&long long v122 = a3;
  CRRegister.wrappedValue.setter();
  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  uint64_t v70 = (uint64_t)v101;
  CRAttributedString.init(_:)();
  uint64_t v71 = v112;
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v73 = (uint64_t)v94;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v94, 1, 1, v72);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v73, v95, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v73, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  *(void *)&long long v122 = 0;
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v122 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  uint64_t v75 = (uint64_t)v98;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v98, 1, 1, v74);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v75, v99, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  lazy protocol witness table accessor for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v75, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  long long v122 = 0u;
  long long v123 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shadow?);
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo? and conformance <A> A?(&lazy protocol witness table cache variable for type Shadow? and conformance <A> A?, &demangling cache variable for type metadata for Shadow?, (void (*)(void))lazy protocol witness table accessor for type Shadow and conformance Shadow);
  CRRegister.init(wrappedValue:)();
  long long v123 = 0u;
  long long v124 = 0u;
  long long v122 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeAuxiliaryInfo?);
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo? and conformance <A> A?(&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo? and conformance <A> A?, &demangling cache variable for type metadata for ShapeAuxiliaryInfo?, (void (*)(void))lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  CRRegister.init(wrappedValue:)();
  *(void *)(v70 + *(int *)(v71 + 44)) = MEMORY[0x263F8EE80];
  uint64_t v76 = unk_26C14DB50;
  if ((unk_26C14DB50 & ~qword_26C14DB48) == 0) {
    uint64_t v76 = 0;
  }
  *(void *)&long long v122 = v76 | qword_26C14DB48;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.setter();
  outlined assign with copy of ShapeSecondaryProperties(v70, v59 + *(int *)(v58 + 52));
  outlined init with copy of Shape(v59, v110);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  swift_retain();
  uint64_t v77 = v102;
  SharedTagged_9.init<A>(_:_:)();
  uint64_t v78 = (void (*)(long long *, void))(*(uint64_t (**)(long long *, uint64_t))(v103 + 88))(&v122, v62);
  CROrderedSet.insert(_:at:)();
  (*(void (**)(char *, uint64_t))(v120 + 8))(v77, v119);
  v78(&v122, 0);
  outlined destroy of ShapeSecondaryProperties(v70, (uint64_t (*)(void))type metadata accessor for ShapeSecondaryProperties);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v115, v117);
  outlined destroy of ShapeSecondaryProperties(v59, (uint64_t (*)(void))type metadata accessor for Shape);
}

char *protocol witness for PaperPage.createPageView<A>(id:in:pdfView:documentView:pdfPage:) in conformance PaperDocumentPage(uint64_t a1, void *a2, void *a3, char *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return specialized PaperPage<>.createPageView<A>(id:in:pdfView:documentView:pdfPage:)(a1, a2, a3, a4, a5, a8, a6, v17, (uint64_t)&protocol witness table for PaperDocumentPage, a9, a7);
}

char *PaperPage<>.createPageView<A>(id:in:pdfView:documentView:pdfPage:)(uint64_t a1, void *a2, void *a3, char *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return specialized PaperPage<>.createPageView<A>(id:in:pdfView:documentView:pdfPage:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t protocol witness for PaperPage.addDrawingAnnotation<A>(pdfPage:use:in:options:) in conformance PaperDocumentPage(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  void *v14 = v7;
  v14[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return PaperPage<>.addDrawingAnnotation<A>(pdfPage:use:in:options:)(a1, a2, a3, a4, a7, a5, v15, (uint64_t)&protocol witness table for PaperDocumentPage);
}

uint64_t PaperPage<>.addDrawingAnnotation<A>(pdfPage:use:in:options:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v9 + 168) = *(_OWORD *)a4;
  *(_OWORD *)(v9 + 184) = v10;
  long long v11 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v9 + 20CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = *(_OWORD *)(a4 + 32);
  *(void *)(v9 + 136) = a8;
  *(void *)(v9 + 144) = v14;
  *(void *)(v9 + 12CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = a5;
  *(void *)(v9 + 128) = a6;
  *(void *)(v9 + 104) = a1;
  *(void *)(v9 + 112) = a3;
  uint64_t v12 = *a2;
  *(void *)(v9 + 152) = v8;
  *(void *)(v9 + 16CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v12;
  *(_OWORD *)(v9 + 216) = v11;
  *(void *)(v9 + 232) = *(void *)(a4 + 64);
  LOWORD(v12) = *(_WORD *)(a4 + 72);
  *(unsigned char *)(v9 + 94) = *(unsigned char *)(a4 + 74);
  *(_WORD *)(v9 + 92) = v12;
  return MEMORY[0x270FA2498](PaperPage<>.addDrawingAnnotation<A>(pdfPage:use:in:options:), 0, 0);
}

uint64_t PaperPage<>.addDrawingAnnotation<A>(pdfPage:use:in:options:)()
{
  uint64_t v1 = *(void **)(v0 + 104);
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v2 = swift_dynamicCastClass();
  *(void *)(v0 + 24CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v2;
  if (v2)
  {
    int v3 = (void *)v2;
    __int16 v4 = *(_WORD *)(v0 + 92);
    char v5 = *(unsigned char *)(v0 + 94);
    uint64_t v6 = *(void *)(v0 + 232);
    long long v26 = *(_OWORD *)(v0 + 200);
    long long v27 = *(_OWORD *)(v0 + 216);
    long long v24 = *(_OWORD *)(v0 + 168);
    long long v25 = *(_OWORD *)(v0 + 184);
    *(void *)(v0 + 96) = *(void *)(v0 + 160);
    id v7 = v1;
    objc_msgSend(v3, sel_boundsForBox_, 0);
    double v9 = v8;
    double v11 = v10;
    double v13 = v12;
    double v15 = v14;
    *(_OWORD *)(v0 + 16) = v24;
    *(_OWORD *)(v0 + 32) = v25;
    *(_OWORD *)(v0 + 48) = v26;
    *(_OWORD *)(v0 + 64) = v27;
    *(void *)(v0 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v6;
    *(unsigned char *)(v0 + 9CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v5;
    *(_WORD *)(v0 + 88) = v4;
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v16;
    void *v16 = v0;
    v16[1] = PaperPage<>.addDrawingAnnotation<A>(pdfPage:use:in:options:);
    uint64_t v17 = *(void *)(v0 + 144);
    uint64_t v18 = *(void *)(v0 + 128);
    uint64_t v19 = *(void *)(v0 + 136);
    uint64_t v20 = *(void *)(v0 + 112);
    uint64_t v21 = *(void *)(v0 + 120);
    return ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)((uint64_t *)(v0 + 96), v20, v0 + 16, v21, v18, v19, v17, v9, v11, v13, v15);
  }
  else
  {
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 256);
  if (v1)
  {
    objc_msgSend(*(id *)(v0 + 240), sel_addAnnotation_, *(void *)(v0 + 256));
  }
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t PaperPage<>.addDrawingAnnotation<A>(pdfPage:use:in:options:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 256) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](PaperPage<>.addDrawingAnnotation<A>(pdfPage:use:in:options:), 0, 0);
}

uint64_t protocol witness for PaperPage.addCanvasElement<A, B>(_:capsule:) in conformance PaperDocumentPage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return PaperPage<>.addCanvasElement<A, B>(_:capsule:)(a1, a2, a6, a3, (uint64_t)&protocol witness table for PaperDocumentPage, a4, a7, a5);
}

uint64_t PaperPage<>.addCanvasElement<A, B>(_:capsule:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v13 = type metadata accessor for Capsule();
  type metadata accessor for _ContiguousArrayStorage();
  uint64_t v14 = *(void *)(v13 - 8);
  swift_allocObject();
  uint64_t v15 = 1;
  uint64_t v16 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17, a1, v13);
  type metadata accessor for Array();
  uint64_t v18 = ContainerCanvasElement.addCanvasElements<A, B>(_:capsule:)(v16, a2, a3, a4, a5, a6, a8);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v18 + 16);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v21 = *(void *)(v20 - 8);
  if (v19)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(a7, v18+ ((*(unsigned __int8 *)(*(void *)(v20 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v20 - 8) + 80)), v20);
    uint64_t v15 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(a7, v15, 1, v20);
  return swift_bridgeObjectRelease();
}

uint64_t ContainerCanvasElement.addCanvasElements<A, B>(_:capsule:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v82 = a2;
  uint64_t v83 = a3;
  uint64_t v81 = type metadata accessor for CRKeyPath();
  uint64_t v86 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v80 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v14);
  unsigned int v79 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v90 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v89 = (char *)&v57 - v20;
  uint64_t v78 = type metadata accessor for Ref();
  uint64_t v21 = *(void *)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  uint64_t v77 = (char *)&v57 - v22;
  uint64_t v84 = a4;
  uint64_t v85 = a6;
  uint64_t v23 = a1;
  uint64_t v24 = type metadata accessor for Capsule();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v76 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v88 = (char *)&v57 - v28;
  uint64_t v57 = v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v57 - v31;
  uint64_t v33 = swift_bridgeObjectRetain();
  if (!MEMORY[0x21054D3F0](v33, v24))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v34 = a7;
  uint64_t v35 = 0;
  uint64_t v75 = v34;
  uint64_t v69 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 88);
  uint64_t v70 = v34 + 88;
  uint64_t v67 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 88);
  uint64_t v68 = a5 + 88;
  uint64_t v87 = (uint64_t (**)(char *, uint64_t *, uint64_t))(v25 + 16);
  uint64_t v66 = (void (**)(char *, char *, uint64_t))(v25 + 32);
  uint64_t v65 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v64 = (void (**)(char *, uint64_t))(v86 + 8);
  double v63 = (void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v62 = (void (**)(char *, char *, uint64_t))(v17 + 16);
  uint64_t v61 = v17 + 32;
  uint64_t v60 = v17 + 8;
  uint64_t v59 = (void (**)(char *, uint64_t))(v25 + 8);
  unint64_t v36 = MEMORY[0x263F8EE78];
  uint64_t v74 = v23;
  uint64_t v73 = a5;
  uint64_t v58 = v17;
  uint64_t v72 = v25;
  uint64_t v71 = v32;
  while (1)
  {
    IsNativeint Type = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (!IsNativeType) {
      break;
    }
    unint64_t v38 = v23
        + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))
        + *(void *)(v25 + 72) * v35;
    uint64_t v39 = *(uint64_t (**)(char *, uint64_t *, uint64_t))(v25 + 16);
    uint64_t result = v39(v32, (uint64_t *)v38, v24);
    uint64_t v41 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v86 = v41;
    uint64_t v42 = v88;
    (*v66)(v88, v32, v24);
    v39(v76, (uint64_t *)v42, v24);
    swift_retain();
    unint64_t v43 = v36;
    uint64_t v44 = v77;
    uint64_t v45 = v16;
    uint64_t v46 = v84;
    Ref.init<A>(_:_:)();
    (*v65)(v44, v78);
    uint64_t v47 = v79;
    Capsule<>.root.getter();
    uint64_t v48 = v80;
    Capsule<>.rootID.getter();
    uint64_t v49 = v89;
    v69(v48, v46, v75);
    (*v64)(v48, v81);
    uint64_t v50 = v46;
    uint64_t v16 = v45;
    (*v63)(v47, v50);
    uint64_t v51 = (void (*)(uint64_t *, void))v67(&v91, v83, v73);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
    CROrderedSet.append(_:)();
    v51(&v91, 0);
    uint64_t v52 = v49;
    unint64_t v36 = v43;
    (*v62)(v90, v52, v45);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v43 + 16) + 1, 1, v43);
    }
    uint64_t v53 = v58;
    unint64_t v55 = *(void *)(v36 + 16);
    unint64_t v54 = *(void *)(v36 + 24);
    uint64_t v25 = v72;
    uint64_t v32 = v71;
    if (v55 >= v54 >> 1) {
      unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1, v36);
    }
    *(void *)(v36 + 16) = v55 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v53 + 32))(v36+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v55, v90, v16);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v89, v16);
    (*v59)(v88, v24);
    uint64_t v23 = v74;
    uint64_t v56 = MEMORY[0x21054D3F0](v74, v24);
    ++v35;
    if (v86 == v56)
    {
      swift_bridgeObjectRelease();
      return v36;
    }
  }
  uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
  if (v57 != 8) {
    goto LABEL_18;
  }
  uint64_t v91 = result;
  uint64_t v39 = *v87;
  (*v87)(v32, &v91, v24);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v41 = v35 + 1;
  if (!__OFADD__(v35, 1)) {
    goto LABEL_5;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void protocol witness for PaperPage.setVellum<A>(opacity:in:) in conformance Image(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_6(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  PaperPage<>.setVellum<A>(opacity:in:)(a1, a5, a2, v10, (uint64_t)&protocol witness table for Image, a6);
}

char *protocol witness for PaperPage.createPageView<A>(id:in:pdfView:documentView:pdfPage:) in conformance Image(uint64_t a1, void *a2, void *a3, char *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_6(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return specialized PaperPage<>.createPageView<A>(id:in:pdfView:documentView:pdfPage:)(a1, a2, a3, a4, a5, a8, a6, v17, (uint64_t)&protocol witness table for Image, a9, a7);
}

uint64_t protocol witness for PaperPage.addDrawingAnnotation<A>(pdfPage:use:in:options:) in conformance Image(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_6(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  void *v14 = v7;
  v14[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return PaperPage<>.addDrawingAnnotation<A>(pdfPage:use:in:options:)(a1, a2, a3, a4, a7, a5, v15, (uint64_t)&protocol witness table for Image);
}

uint64_t protocol witness for PaperPage.addCanvasElement<A, B>(_:capsule:) in conformance Image@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_6(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return PaperPage<>.addCanvasElement<A, B>(_:capsule:)(a1, a2, a6, a3, (uint64_t)&protocol witness table for Image, a4, a7, a5);
}

void protocol witness for PaperPage.setVellum<A>(opacity:in:) in conformance Paper(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  PaperPage<>.setVellum<A>(opacity:in:)(a1, a5, a2, v10, (uint64_t)&protocol witness table for Paper, a6);
}

char *protocol witness for PaperPage.createPageView<A>(id:in:pdfView:documentView:pdfPage:) in conformance Paper(uint64_t a1, void *a2, void *a3, char *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return specialized PaperPage<>.createPageView<A>(id:in:pdfView:documentView:pdfPage:)(a1, a2, a3, a4, a5, a8, a6, v17, (uint64_t)&protocol witness table for Paper, a9, a7);
}

uint64_t protocol witness for PaperPage.addDrawingAnnotation<A>(pdfPage:use:in:options:) in conformance Paper(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  void *v14 = v7;
  v14[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return PaperPage<>.addDrawingAnnotation<A>(pdfPage:use:in:options:)(a1, a2, a3, a4, a7, a5, v15, (uint64_t)&protocol witness table for Paper);
}

uint64_t protocol witness for PaperPage.addCanvasElement<A, B>(_:capsule:) in conformance Paper@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return PaperPage<>.addCanvasElement<A, B>(_:capsule:)(a1, a2, a6, a3, (uint64_t)&protocol witness table for Paper, a4, a7, a5);
}

uint64_t outlined assign with copy of ShapeSecondaryProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShapeSecondaryProperties();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void closure #1 in PaperPage<>.createPageView<A>(id:in:pdfView:documentView:pdfPage:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a2 + 16;
  swift_beginAccess();
  uint64_t v11 = MEMORY[0x210550400](v10);
  if (v11)
  {
    uint64_t v12 = (void *)v11;
    unsigned __int8 v13 = 4;
    PaperDocumentView.merge<A>(_:from:page:)(a1, &v13, a3, a4, *(void *)(a6 + 16));
  }
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  double v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

char *specialized PaperPage<>.createPageView<A>(id:in:pdfView:documentView:pdfPage:)(uint64_t a1, void *a2, void *a3, char *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v77 = a7;
  id v71 = a2;
  uint64_t v70 = a1;
  uint64_t v78 = type metadata accessor for Capsule();
  uint64_t v73 = *(void *)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  uint64_t v76 = (char *)&v63 - v16;
  uint64_t v17 = type metadata accessor for CRKeyPath();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for WeakRef();
  uint64_t v72 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v63 - v22;
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v24 = (void *)swift_dynamicCastClass();
  if (!v24) {
    return 0;
  }
  id v63 = a3;
  uint64_t v25 = a8;
  uint64_t v66 = a11;
  uint64_t v67 = a10;
  uint64_t v74 = v24;
  uint64_t v75 = a9;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v70, v17);
  id v26 = a5;
  uint64_t v68 = v23;
  WeakRef.init(id:)();
  type metadata accessor for Capsule();
  uint64_t v69 = v21;
  swift_getWitnessTable();
  uint64_t v27 = (ValueMetadata *)v76;
  Capsule.encapsulate<A>(_:)();
  uint64_t v65 = a6;
  uint64_t v64 = a8;
  uint64_t v28 = v75;
  type metadata accessor for PaperDocumentPageView();
  id v29 = *(id *)&a4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_context];
  objc_msgSend(v63, sel_bounds);
  double v31 = v30;
  double v33 = v32;
  double v35 = v34;
  double v37 = v36;
  id v71 = v26;
  unint64_t v38 = a4;
  uint64_t v39 = v27;
  double v40 = v74;
  specialized PaperDocumentPageView.__allocating_init(context:frame:paper:documentView:pdfPage:)(v29, v39, v38, v74, v31, v33, v35, v37);
  uint64_t v42 = v41;
  unint64_t v43 = (void **)&v38[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
  swift_beginAccess();
  uint64_t v44 = *v43;
  id v45 = v44;
  specialized PaperDocumentPageView.toolPicker.setter(v44);

  uint64_t v46 = &v42[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate];
  swift_beginAccess();
  *((void *)v46 + 1) = &protocol witness table for PaperDocumentView;
  swift_unknownObjectWeakAssign();
  uint64_t v47 = v42;
  uint64_t v48 = Canvas.livePublisher.getter();

  uint64_t v79 = v48;
  uint64_t v49 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v50 = (void *)swift_allocObject();
  v50[2] = a6;
  uint64_t v51 = v77;
  v50[3] = v77;
  v50[4] = v25;
  uint64_t v52 = v67;
  v50[5] = v28;
  v50[6] = v52;
  uint64_t v53 = v66;
  v50[7] = v66;
  v50[8] = v49;
  v50[9] = v40;
  type metadata accessor for AnyPublisher();
  id v54 = v71;
  swift_getWitnessTable();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  unint64_t v55 = v47;
  uint64_t v56 = Canvas.publisher.getter();

  uint64_t v79 = v56;
  uint64_t v57 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v58 = (void *)swift_allocObject();
  v58[2] = v65;
  v58[3] = v51;
  uint64_t v59 = v75;
  _OWORD v58[4] = v64;
  v58[5] = v59;
  v58[6] = v52;
  v58[7] = v53;
  uint64_t v60 = v74;
  v58[8] = v57;
  v58[9] = v60;
  id v61 = v54;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();

  swift_release();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v76, v78);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v68, v69);
  return v55;
}

uint64_t sub_20C80E034()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t objectdestroy_6Tm()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

void partial apply for closure #1 in PaperPage<>.createPageView<A>(id:in:pdfView:documentView:pdfPage:)(uint64_t a1)
{
  closure #1 in PaperPage<>.createPageView<A>(id:in:pdfView:documentView:pdfPage:)(a1, *(void *)(v1 + 64), *(void **)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_6(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of ShapeSecondaryProperties(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t dispatch thunk of PaperDocumentViewControllerDelegate.documentViewController(_:didSetupDocumentView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v25 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_OWORD *)(a9 + 56) = v30;
  *(_OWORD *)(a9 + 72) = v31;
  *(_OWORD *)(a9 + 88) = v32;
  *(_OWORD *)(a9 + 104) = v33;
  *(_OWORD *)(a9 + 8) = v27;
  *(_OWORD *)(a9 + 24) = v28;
  *(void *)a9 = a16;
  *(_OWORD *)(a9 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v29;
  return swift_retain();
}

double specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t *)&demangling cache variable for type metadata for Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, &demangling cache variable for type metadata for ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>).n128_u64[0];
  return result;
}

{
  double result;

  *(void *)&double result = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>).n128_u64[0];
  return result;
}

{
  double result;

  *(void *)&double result = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t *)&demangling cache variable for type metadata for Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>).n128_u64[0];
  return result;
}

__n128 specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v19 = a16;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v19 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(a9, v17, v29);
  long long v30 = (_OWORD *)(a9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(a17) + 36));
  v30[4] = v36;
  v30[5] = v37;
  v30[6] = v38;
  _OWORD *v30 = v32;
  v30[1] = v33;
  __n128 result = v35;
  void v30[2] = v34;
  v30[3] = v35;
  return result;
}

uint64_t specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    id v26 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a9 = a16;
  *(void *)(a9 + 8) = a17;
  *(_OWORD *)(a9 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v32;
  *(_OWORD *)(a9 + 96) = v33;
  *(_OWORD *)(a9 + 112) = v34;
  *(_OWORD *)(a9 + 16) = v28;
  *(_OWORD *)(a9 + 32) = v29;
  *(_OWORD *)(a9 + 48) = v30;
  *(_OWORD *)(a9 + 64) = v31;
  swift_retain();
  return swift_retain();
}

__n128 specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v24 = type metadata accessor for ButtonStyleConfiguration.Label();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(a9, v13, v24);
  uint64_t v25 = (_OWORD *)(a9
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>)
                          + 36));
  void v25[4] = v31;
  v25[5] = v32;
  v25[6] = v33;
  *uint64_t v25 = v27;
  v25[1] = v28;
  __n128 result = v30;
  void v25[2] = v29;
  void v25[3] = v30;
  return result;
}

uint64_t one-time initialization function for solidWhite()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  double v1 = MEMORY[0x270FA5388](v0);
  (*(void (**)(char *, void, double))(v3 + 104))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F1B388], v1);
  uint64_t result = Color.init(_:white:opacity:)();
  static MiniDefaultColor.solidWhite = 0x69685764696C6F73;
  unk_2676E9840 = 0xEA00000000006574;
  qword_2676E9848 = result;
  return result;
}

uint64_t one-time initialization function for solidGray()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  double v1 = MEMORY[0x270FA5388](v0);
  (*(void (**)(char *, void, double))(v3 + 104))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F1B388], v1);
  uint64_t result = Color.init(_:white:opacity:)();
  static MiniDefaultColor.solidGraCGFloat y = 0x61724764696C6F73;
  *(void *)algn_2676E9858 = 0xE900000000000079;
  qword_2676E9860 = result;
  return result;
}

uint64_t one-time initialization function for solidBlack()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  double v1 = MEMORY[0x270FA5388](v0);
  (*(void (**)(char *, void, double))(v3 + 104))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F1B388], v1);
  uint64_t result = Color.init(_:white:opacity:)();
  static MiniDefaultColor.solidBlack = 0x616C4264696C6F73;
  unk_2676E9870 = 0xEA00000000006B63;
  qword_2676E9878 = result;
  return result;
}

uint64_t one-time initialization function for solidTeal()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  double v1 = MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, double))(v4 + 104))(v3, *MEMORY[0x263F1B388], v1);
  uint64_t result = MEMORY[0x21054A6A0](v3, 0.423529412, 0.894117647, 0.811764706, 1.0);
  static MiniDefaultColor.solidTeal = 0x61655464696C6F73;
  *(void *)algn_2676E9888 = 0xE90000000000006CLL;
  qword_2676E9890 = result;
  return result;
}

uint64_t one-time initialization function for solidPink()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  double v1 = MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, double))(v4 + 104))(v3, *MEMORY[0x263F1B388], v1);
  uint64_t result = MEMORY[0x21054A6A0](v3, 0.921568627, 0.325490196, 0.623529412, 1.0);
  static MiniDefaultColor.solidPink = 0x6E695064696C6F73;
  unk_2676E98A0 = 0xE90000000000006BLL;
  qword_2676E98A8 = result;
  return result;
}

uint64_t one-time initialization function for solidPurple()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  double v1 = MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, double))(v4 + 104))(v3, *MEMORY[0x263F1B388], v1);
  uint64_t result = MEMORY[0x21054A6A0](v3, 0.470588235, 0.17254902, 0.964705882, 1.0);
  static MiniDefaultColor.solidPurple = 0x72755064696C6F73;
  *(void *)algn_2676E98B8 = 0xEB00000000656C70;
  qword_2676E98C0 = result;
  return result;
}

uint64_t one-time initialization function for solidRed()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  double v1 = MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, double))(v4 + 104))(v3, *MEMORY[0x263F1B388], v1);
  uint64_t result = MEMORY[0x21054A6A0](v3, 0.917647059, 0.301960784, 0.239215686, 1.0);
  static MiniDefaultColor.solidReCGFloat d = 0x64655264696C6F73;
  unk_2676E98D0 = 0xE800000000000000;
  qword_2676E98D8 = result;
  return result;
}

uint64_t one-time initialization function for solidOrange()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  double v1 = MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, double))(v4 + 104))(v3, *MEMORY[0x263F1B388], v1);
  uint64_t result = MEMORY[0x21054A6A0](v3, 0.937254902, 0.549019608, 0.0, 1.0);
  static MiniDefaultColor.solidOrange = 0x61724F64696C6F73;
  *(void *)algn_2676E98E8 = 0xEB0000000065676ELL;
  qword_2676E98F0 = result;
  return result;
}

uint64_t one-time initialization function for solidYellow()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  double v1 = MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, double))(v4 + 104))(v3, *MEMORY[0x263F1B388], v1);
  uint64_t result = MEMORY[0x21054A6A0](v3, 0.964705882, 0.807843137, 0.274509804, 1.0);
  static MiniDefaultColor.solidYellow = 0x6C655964696C6F73;
  unk_2676E9900 = 0xEB00000000776F6CLL;
  qword_2676E9908 = result;
  return result;
}

uint64_t one-time initialization function for solidGreen()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  double v1 = MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, double))(v4 + 104))(v3, *MEMORY[0x263F1B388], v1);
  uint64_t result = MEMORY[0x21054A6A0](v3, 0.392156863, 0.768627451, 0.4, 1.0);
  static MiniDefaultColor.solidGreen = 0x65724764696C6F73;
  *(void *)algn_2676E9918 = 0xEA00000000006E65;
  qword_2676E9920 = result;
  return result;
}

uint64_t one-time initialization function for solidCyan()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  double v1 = MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, double))(v4 + 104))(v3, *MEMORY[0x263F1B388], v1);
  uint64_t result = MEMORY[0x21054A6A0](v3, 0.352941176, 0.768627451, 0.964705882, 1.0);
  static MiniDefaultColor.solidCyan = 0x61794364696C6F73;
  unk_2676E9930 = 0xE90000000000006ELL;
  qword_2676E9938 = result;
  return result;
}

uint64_t one-time initialization function for solidBlue()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  double v1 = MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, double))(v4 + 104))(v3, *MEMORY[0x263F1B388], v1);
  uint64_t result = MEMORY[0x21054A6A0](v3, 0.160784314, 0.37254902, 0.956862745, 1.0);
  static MiniDefaultColor.solidBlue = 0x756C4264696C6F73;
  *(void *)algn_2676E9948 = 0xE900000000000065;
  qword_2676E9950 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance MiniDefaultColor@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MiniColorSwatch.displayColor.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 8);
  uint64_t v3 = (void *)v0[4];
  outlined copy of Environment<MiniMenuController?>.Content(*v0, v2);
  id v4 = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<MiniMenuController?>.Content(v1, v2);
  uint64_t v5 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<MiniMenuController?>.Content(v1, v2);
  if (v5)
  {
    uint64_t v6 = (CGColor *)Color.cgColor.getter();
    if (v6)
    {
      Color.init(cgColor:)(v6, &v10);
      unint64_t v7 = v10;
    }
    else
    {
      unint64_t v7 = 0;
    }
    double v9 = v7;
    MiniMenuController.convert(color:)(&v9, &v11);
    swift_release();

    outlined consume of Environment<MiniMenuController?>.Content(v1, v2);
    swift_release();
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    if (v11)
    {
      JUMPOUT(0x21054A5B0);
    }
  }
  else
  {
    outlined consume of Environment<MiniMenuController?>.Content(v1, v2);
    swift_release();
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
  }
  return swift_retain();
}

uint64_t MiniColorSwatch.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v2 = type metadata accessor for PlainButtonStyle();
  uint64_t v21 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?)>>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v22 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  unint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v11 = *(_OWORD *)(v1 + 48);
  void v30[2] = *(_OWORD *)(v1 + 32);
  long long v31 = v11;
  uint64_t v32 = *(void *)(v1 + 64);
  long long v12 = *(_OWORD *)(v1 + 16);
  v30[0] = *(_OWORD *)v1;
  v30[1] = v12;
  uint64_t v13 = swift_allocObject();
  long long v14 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v13 + 64) = v14;
  *(void *)(v13 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = *(void *)(v1 + 64);
  long long v15 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v13 + 32) = v15;
  uint64_t v24 = v30;
  outlined retain of MiniColorSwatch((uint64_t)v30);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?)>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?)>>);
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  uint64_t v16 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Button<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?)>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?)>>>);
  uint64_t v17 = lazy protocol witness table accessor for type ColorPickerRepresentable and conformance ColorPickerRepresentable((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  long long v29 = v31;
  uint64_t v25 = v5;
  uint64_t v26 = v2;
  uint64_t v27 = v16;
  uint64_t v28 = v17;
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v18 = v20;
  View.accessibilityLabel<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v10, v18);
}

void closure #1 in MiniColorSwatch.body.getter(uint64_t a1)
{
  uint64_t v2 = (CGColor *)Color.cgColor.getter();
  if (v2)
  {
    Color.init(cgColor:)(v2, (CGColor **)v8);
    if (*(void *)v8) {
      goto LABEL_5;
    }
  }
  memset(v7, 0, sizeof(v7));
  uint64_t v3 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (v3)
  {
    id v4 = v3;
    CGColorRef v5 = CGColorCreate(v3, (const CGFloat *)v7);

    if (v5)
    {
LABEL_5:
      *(_OWORD *)unint64_t v8 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v8[9] = *(_OWORD *)(a1 + 25);
      outlined retain of MiniColorSwatch(a1);
      outlined retain of Binding<Inspected<Color?>>((uint64_t)v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<Color?>>);
      MEMORY[0x21054A870](v6);

      Binding.wrappedValue.setter();
      outlined release of Binding<Inspected<Color?>>((uint64_t)v8);
      outlined release of MiniColorSwatch(a1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void closure #2 in MiniColorSwatch.body.getter(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = static Alignment.center.getter();
  a2[1] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?)>>);
  closure #1 in closure #2 in MiniColorSwatch.body.getter(a1, (uint64_t)a2 + *(int *)(v5 + 44));
}

void closure #1 in closure #2 in MiniColorSwatch.body.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v110 = a2;
  uint64_t v3 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v118 = *(CGColor **)(v3 - 8);
  uint64_t v119 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v117 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
  MEMORY[0x270FA5388](v131);
  uint64_t v6 = (uint64_t *)((char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for ColorScheme();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>);
  MEMORY[0x270FA5388](v130);
  long long v12 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v132 = (uint64_t)&v100 - v14;
  long long v15 = *(_OWORD *)(a1 + 48);
  long long v137 = *(_OWORD *)(a1 + 32);
  long long v138 = v15;
  uint64_t v139 = *(void *)(a1 + 64);
  long long v16 = *(_OWORD *)(a1 + 16);
  v136[0] = *(_OWORD *)a1;
  v136[1] = v16;
  uint64_t v17 = MiniColorSwatch.displayColor.getter();
  if (one-time initialization token for colorSwatchSize != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v129 = v140;
  LODWORD(v128) = v141;
  uint64_t v127 = v142;
  LODWORD(v126) = v143;
  uint64_t v124 = v145;
  uint64_t v125 = v144;
  char v18 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F18508], v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v6 + *(int *)(v131 + 28), v10, v7);
  *uint64_t v6 = KeyPath;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v6, (uint64_t)&v12[*(int *)(v130 + 36)], &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
  *(void *)long long v12 = v17;
  *((_WORD *)v12 + 4) = 256;
  *((void *)v12 + 2) = v129;
  v12[24] = v128;
  *((void *)v12 + 4) = v127;
  v12[40] = (char)v126;
  uint64_t v28 = v124;
  *((void *)v12 + 6) = v125;
  *((void *)v12 + 7) = v28;
  v12[64] = v18;
  *((void *)v12 + 9) = v20;
  *((void *)v12 + 1CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v22;
  *((void *)v12 + 11) = v24;
  *((void *)v12 + 12) = v26;
  v12[104] = 0;
  swift_retain();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v12, v132, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>);
  v136[0] = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)v136 + 9) = *(_OWORD *)(a1 + 25);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<Color?>>);
  MEMORY[0x21054A870](&v151, v29);
  CGColorRef v30 = v151;
  if (!v151)
  {
    uint64_t v33 = (uint64_t)v12;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    uint64_t v128 = 0;
    uint64_t v129 = 0;
    uint64_t v36 = 0;
    uint64_t v124 = 0;
    uint64_t v125 = 0;
    CGColorRef v126 = 0;
    uint64_t v127 = 0;
    uint64_t v122 = 0;
    uint64_t v123 = 0;
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    goto LABEL_16;
  }
  *(void *)&v136[0] = v151;
  long long v31 = (CGColor *)Color.cgColor.getter();
  if (v31)
  {
    Color.init(cgColor:)(v31, &v151);
    CGColorRef v32 = v151;
    if (v151) {
      goto LABEL_11;
    }
  }
  else
  {
    CGColorRef v151 = 0;
  }
  memset(v133, 0, sizeof(v133));
  long long v37 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (!v37)
  {
    __break(1u);
    goto LABEL_35;
  }
  long long v38 = v37;
  CGColorRef v32 = CGColorCreate(v37, v133);

  if (!v32)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
LABEL_11:
  uint64_t v33 = (uint64_t)v12;
  CGColorRef v151 = v32;
  unsigned __int8 v39 = Color.almostEqual(_:)((void **)&v151);

  if (v39)
  {
    uint64_t v36 = static Color.white.getter();
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    uint64_t v34 = v146;
    uint64_t v35 = v147;
    uint64_t v130 = v149;
    uint64_t v131 = v148;
    uint64_t v129 = v150;
    uint64_t v40 = static Alignment.center.getter();
    uint64_t v127 = v41;
    uint64_t v128 = v40;
    if (one-time initialization token for colorSwatchSelectionSize != -1) {
      swift_once();
    }
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v125 = v152;
    CGColorRef v126 = v151;
    uint64_t v122 = v154;
    uint64_t v123 = v153;
    uint64_t v120 = v156;
    uint64_t v121 = v155;

    uint64_t v124 = 256;
  }
  else
  {

    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    uint64_t v128 = 0;
    uint64_t v129 = 0;
    uint64_t v36 = 0;
    uint64_t v124 = 0;
    uint64_t v125 = 0;
    CGColorRef v126 = 0;
    uint64_t v127 = 0;
    uint64_t v122 = 0;
    uint64_t v123 = 0;
    uint64_t v120 = 0;
    uint64_t v121 = 0;
  }
LABEL_16:
  uint64_t v42 = *(void *)(a1 + 48);
  uint64_t v43 = *(void *)(a1 + 56);
  uint64_t v111 = v33;
  uint64_t v113 = v35;
  uint64_t v114 = v36;
  if ((v42 != 0x69685764696C6F73 || v43 != 0xEA00000000006574)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v49 = v34;
    uint64_t v50 = v132;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    uint64_t v53 = 0;
    id v54 = 0;
    uint64_t v112 = 0;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    unint64_t v115 = 0;
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    uint64_t v55 = v33;
    uint64_t v56 = 0;
LABEL_33:
    uint64_t v107 = v56;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v50, v55, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>);
    uint64_t v68 = v110;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v55, v110, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>);
    uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?));
    uint64_t v70 = (uint64_t *)(v68 + *(int *)(v69 + 48));
    uint64_t v71 = v49;
    uint64_t v109 = v49;
    uint64_t v72 = v113;
    *uint64_t v70 = v49;
    v70[1] = v72;
    uint64_t v73 = v72;
    uint64_t v74 = v131;
    v70[2] = v131;
    uint64_t v75 = v74;
    uint64_t v131 = v74;
    uint64_t v76 = v130;
    v70[3] = v130;
    uint64_t v77 = v76;
    uint64_t v130 = v76;
    uint64_t v78 = v129;
    v70[4] = v129;
    uint64_t v129 = v78;
    v70[5] = v114;
    uint64_t v79 = v124;
    uint64_t v80 = v125;
    v70[6] = v124;
    uint64_t v124 = v79;
    uint64_t v125 = v80;
    uint64_t v81 = v128;
    v70[7] = v128;
    uint64_t v128 = v81;
    uint64_t v83 = v126;
    uint64_t v82 = v127;
    v70[8] = v127;
    v70[9] = (uint64_t)v83;
    CGColorRef v126 = v83;
    uint64_t v127 = v82;
    uint64_t v85 = v122;
    uint64_t v84 = v123;
    v70[10] = v80;
    v70[11] = v84;
    uint64_t v122 = v85;
    uint64_t v123 = v84;
    uint64_t v87 = v120;
    uint64_t v86 = v121;
    v70[12] = v85;
    v70[13] = v86;
    uint64_t v120 = v87;
    uint64_t v121 = v86;
    v70[14] = v87;
    uint64_t v88 = (CGColor **)(v68 + *(int *)(v69 + 64));
    *uint64_t v88 = v51;
    v88[1] = v52;
    unint64_t v104 = v51;
    uint64_t v105 = v54;
    unint64_t v106 = v52;
    uint64_t v89 = v119;
    v88[2] = v118;
    v88[3] = v53;
    uint64_t v108 = v53;
    v88[4] = v54;
    v88[5] = (CGColor *)v89;
    uint64_t v119 = v89;
    uint64_t v90 = v112;
    v88[6] = (CGColor *)v56;
    v88[7] = (CGColor *)v90;
    unint64_t v92 = v116;
    uint64_t v91 = v117;
    v88[8] = (CGColor *)v117;
    v88[9] = v92;
    uint64_t v116 = v92;
    uint64_t v117 = v91;
    unint64_t v94 = v102;
    unint64_t v93 = v103;
    v88[10] = v115;
    v88[11] = v93;
    uint64_t v96 = v100;
    uint64_t v95 = v101;
    v88[12] = v94;
    v88[13] = v95;
    v88[14] = v96;
    outlined copy of ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?(v71, v73, v75, v77);
    uint64_t v97 = (uint64_t)v51;
    uint64_t v98 = (uint64_t)v106;
    uint64_t v99 = (uint64_t)v108;
    outlined copy of ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?(v97, (uint64_t)v106, (uint64_t)v118, (uint64_t)v108);
    outlined destroy of StocksKitCurrencyCache.Provider?(v132, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>);
    outlined consume of ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?((uint64_t)v104, v98, (uint64_t)v118, v99);
    outlined consume of ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?(v109, v113, v131, v130);
    outlined destroy of StocksKitCurrencyCache.Provider?(v111, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>);
    return;
  }
  uint64_t v44 = *(void *)a1;
  uint64_t v45 = *(unsigned __int8 *)(a1 + 8);
  outlined retain of MiniColorSwatch(a1);
  outlined copy of Environment<MiniMenuController?>.Content(v44, v45);
  uint64_t v46 = specialized Environment.wrappedValue.getter(v44, v45);
  outlined consume of Environment<MiniMenuController?>.Content(v44, v45);
  if (!v46)
  {
    outlined release of MiniColorSwatch(a1);
LABEL_30:
    uint64_t v49 = v34;
    uint64_t v50 = v132;
    goto LABEL_31;
  }
  uint64_t v47 = (CGColor *)Color.cgColor.getter();
  if (v47)
  {
    Color.init(cgColor:)(v47, v157);
    uint64_t v48 = v157[0];
  }
  else
  {
    uint64_t v48 = 0;
  }
  v134[0] = v48;
  MiniMenuController.convert(color:)((CGColor **)v134, (CGColor **)v136);
  swift_release();

  outlined release of MiniColorSwatch(a1);
  uint64_t v57 = *(void **)&v136[0];
  if (!*(void *)&v136[0]) {
    goto LABEL_30;
  }
  v157[0] = *(CGColor **)&v136[0];
  __asm { FMOV            V0.2D, #1.0 }
  v135[0] = _Q0;
  v135[1] = _Q0;
  id v63 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (!v63)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v64 = v63;
  CGColorRef v65 = CGColorCreate(v63, (const CGFloat *)v135);

  if (v65)
  {
    uint64_t v49 = v34;
    uint64_t v50 = v132;
    v134[0] = v65;
    unsigned __int8 v66 = Color.almostEqual(_:)(v134);

    if (v66)
    {
      (*((void (**)(char *, void, uint64_t))v118 + 13))(v117, *MEMORY[0x263F1B388], v119);
      uint64_t v119 = Color.init(_:white:opacity:)();
      StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
      uint64_t v51 = v157[0];
      uint64_t v52 = v157[1];
      uint64_t v53 = v157[3];
      uint64_t v118 = v157[2];
      id v54 = v157[4];
      uint64_t v112 = static Alignment.center.getter();
      uint64_t v117 = v67;
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      unint64_t v115 = (CGColor *)BYTE8(v136[0]);
      uint64_t v116 = *(CGColor **)&v136[0];
      uint64_t v102 = (CGColor *)BYTE8(v136[1]);
      uint64_t v103 = *(CGColor **)&v136[1];
      uint64_t v56 = 256;
      uint64_t v100 = (CGColor *)*((void *)&v137 + 1);
      uint64_t v101 = (CGColor *)v137;
LABEL_32:
      uint64_t v55 = v111;
      goto LABEL_33;
    }
LABEL_31:
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    uint64_t v53 = 0;
    id v54 = 0;
    uint64_t v56 = 0;
    uint64_t v112 = 0;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    unint64_t v115 = 0;
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    goto LABEL_32;
  }
LABEL_37:
  __break(1u);
}

uint64_t MiniTextButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v1 = type metadata accessor for AutomaticHoverEffect();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v53 = v1;
  uint64_t v54 = v2;
  MEMORY[0x270FA5388](v1);
  uint64_t v52 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>);
  MEMORY[0x270FA5388](v49);
  long long v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0);
  uint64_t v50 = *(void *)(v17 - 8);
  uint64_t v51 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v48 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>>);
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  static Alignment.center.getter();
  __n128 v23 = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(46.0, 0, 0.0, 1, INFINITY, 0, 36.0, 0, (uint64_t)v10, 0.0, 1, 36.0, 0);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v23);
  uint64_t v24 = self;
  uint64_t v25 = MEMORY[0x21054A6C0](objc_msgSend(v24, sel_labelColor));
  uint64_t KeyPath = swift_getKeyPath();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>);
  uint64_t v27 = (uint64_t *)&v14[*(int *)(v12 + 44)];
  *uint64_t v27 = KeyPath;
  v27[1] = v25;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>);
  uint64_t v28 = MEMORY[0x21054A6C0](objc_msgSend(v24, sel_systemFillColor));
  LOBYTE(v1CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = static Edge.Set.all.getter();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v14, (uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v29 = &v16[*(int *)(v49 + 36)];
  *(void *)uint64_t v29 = v28;
  v29[8] = (char)v10;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>>);
  CGColorRef v30 = v52;
  static CustomHoverEffect<>.automatic.getter();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type ColorPickerRepresentable and conformance ColorPickerRepresentable(&lazy protocol witness table cache variable for type AutomaticHoverEffect and conformance AutomaticHoverEffect, MEMORY[0x263F19B68]);
  long long v31 = v48;
  uint64_t v32 = v53;
  View.hoverEffect<A>(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v30, v32);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>);
  uint64_t v34 = v50;
  uint64_t v33 = v51;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v22, v31, v51);
  uint64_t v35 = &v22[*(int *)(v20 + 44)];
  *(void *)uint64_t v35 = 0x4024000000000000;
  *((void *)v35 + 1) = -1;
  *((_WORD *)v35 + 8) = 256;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v31, v33);
  if (one-time initialization token for buttonSpacing != -1) {
    swift_once();
  }
  char v36 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v45 = v55;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v22, v55, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>>);
  uint64_t v46 = v45
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>>, _PaddingLayout>)
               + 36);
  *(unsigned char *)uint64_t v46 = v36;
  *(void *)(v46 + 8) = v38;
  *(void *)(v46 + 16) = v40;
  *(void *)(v46 + 24) = v42;
  *(void *)(v46 + 32) = v44;
  *(unsigned char *)(v46 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0;
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>>);
}

CGColorRef MultiColorSwatchButton.displayColor.getter()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = type metadata accessor for MultiColorSwatchButton(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  uint64_t v6 = *(unsigned __int8 *)(v1 + 8);
  outlined copy of Environment<MiniMenuController?>.Content(v5, v6);
  uint64_t v7 = specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<MiniMenuController?>.Content(v5, v6);
  if (!v7)
  {
    outlined init with copy of ColorPickerRepresentable(v1, (uint64_t)v4, type metadata accessor for MultiColorSwatchButton);
LABEL_5:
    uint64_t v13 = *((void *)v4 + 2);
    long long v14 = *(_OWORD *)(v4 + 24);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<CGColorRef>);
    MEMORY[0x21054A870](&v15, v11);
    CGColorRef v10 = v15;
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v1 + 16);
  long long v14 = *(_OWORD *)(v1 + 24);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<CGColorRef>);
  MEMORY[0x21054A870](&v15, v8);
  CGColorRef v9 = v15;
  CGColorRef v10 = MiniMenuController.convert(cgColor:)(v15);
  swift_release();

  outlined init with copy of ColorPickerRepresentable(v1, (uint64_t)v4, type metadata accessor for MultiColorSwatchButton);
  if (!v10) {
    goto LABEL_5;
  }
LABEL_6:
  outlined destroy of ColorPickerRepresentable((uint64_t)v4, type metadata accessor for MultiColorSwatchButton);
  return v10;
}

void closure #2 in MultiColorSwatchButton.swiftUIColor.getter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = type metadata accessor for EnvironmentValues();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MultiColorSwatchButton(0);
  specialized Environment.wrappedValue.getter((uint64_t)v8);
  Color.resolve(in:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  CGColorRef v9 = (CGColor *)Color.Resolved.cgColor.getter();
  uint64_t v10 = *a4;
  uint64_t v11 = *((unsigned __int8 *)a4 + 8);
  outlined copy of Environment<MiniMenuController?>.Content(*a4, v11);
  uint64_t v12 = specialized Environment.wrappedValue.getter(v10, v11);
  outlined consume of Environment<MiniMenuController?>.Content(v10, v11);
  if (v12)
  {
    CGColorRef v13 = MiniMenuController.convert(cgColor:)(v9);
    swift_release();
  }
  else
  {
    CGColorRef v13 = v9;
  }
  uint64_t v14 = a4[2];
  v15[0] = v13;
  v15[1] = v14;
  long long v16 = *(_OWORD *)(a4 + 3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<CGColorRef>);
  Binding.wrappedValue.setter();
}

uint64_t MultiColorSwatchButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v46 = a1;
  uint64_t v2 = type metadata accessor for MultiColorSwatchButton(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColorPicker<Text>);
  uint64_t v44 = *(void *)(v6 - 8);
  uint64_t v45 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v43 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ColorPicker<Text>, _FrameLayout>)
      - 8;
  MEMORY[0x270FA5388](v42);
  CGColorRef v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v40 = v11;
  uint64_t v41 = v10;
  v38[1] = v12;
  uint64_t v39 = v13;
  outlined init with copy of ColorPickerRepresentable(v1, (uint64_t)v5, type metadata accessor for MultiColorSwatchButton);
  type metadata accessor for MainActor();
  uint64_t v14 = static MainActor.shared.getter();
  unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = MEMORY[0x263F8F500];
  *(void *)(v16 + 16) = v14;
  *(void *)(v16 + 24) = v17;
  outlined init with take of MultiColorSwatchButton((uint64_t)v5, v16 + v15, type metadata accessor for MultiColorSwatchButton);
  outlined init with copy of ColorPickerRepresentable(v1, (uint64_t)v5, type metadata accessor for MultiColorSwatchButton);
  uint64_t v18 = static MainActor.shared.getter();
  uint64_t v19 = (uint64_t)v9;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v18;
  *(void *)(v20 + 24) = MEMORY[0x263F8F500];
  outlined init with take of MultiColorSwatchButton((uint64_t)v5, v20 + v15, type metadata accessor for MultiColorSwatchButton);
  Binding.init(get:set:)();
  uint64_t v21 = v43;
  ColorPicker<>.init(_:selection:supportsOpacity:)();
  static Alignment.trailing.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v23 = v44;
  uint64_t v22 = v45;
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v19, v21, v45);
  uint64_t v24 = (_OWORD *)(v19 + *(int *)(v42 + 44));
  long long v25 = v48;
  *uint64_t v24 = v47;
  v24[1] = v25;
  _OWORD v24[2] = v49;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
  if (one-time initialization token for buttonSpacing != -1) {
    swift_once();
  }
  char v26 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v35 = v46;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v19, v46, &demangling cache variable for type metadata for ModifiedContent<ColorPicker<Text>, _FrameLayout>);
  uint64_t v36 = v35
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ColorPicker<Text>, _FrameLayout>, _PaddingLayout>)
               + 36);
  *(unsigned char *)uint64_t v36 = v26;
  *(void *)(v36 + 8) = v28;
  *(void *)(v36 + 16) = v30;
  *(void *)(v36 + 24) = v32;
  *(void *)(v36 + 32) = v34;
  *(unsigned char *)(v36 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0;
  return outlined destroy of StocksKitCurrencyCache.Provider?(v19, &demangling cache variable for type metadata for ModifiedContent<ColorPicker<Text>, _FrameLayout>);
}

uint64_t LineWidthStepperView.Coordinator.didChange(_:)()
{
  ValueStepper.currentValue.getter();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>);
  MEMORY[0x21054A870](&v1);
  Binding.wrappedValue.setter();
  swift_release();
  return swift_release();
}

id LineWidthStepperView.Coordinator.__deallocating_deinit(uint64_t a1)
{
  return LineWidthStepperView.Coordinator.__deallocating_deinit(a1, type metadata accessor for LineWidthStepperView.Coordinator);
}

uint64_t type metadata accessor for LineWidthStepperView.Coordinator()
{
  return self;
}

char *LineWidthStepperView.makeUIView(context:)(uint64_t a1, void *a2)
{
  if (one-time initialization token for textBoxFontUnitString != -1) {
    swift_once();
  }
  long long v3 = static UIConstants.textBoxFontUnitString;
  objc_allocWithZone((Class)type metadata accessor for ValueStepper());
  swift_bridgeObjectRetain();
  ValueStepper.init(minValue:maxValue:unit:)(1, 30, v3, *((uint64_t *)&v3 + 1));
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>);
  uint64_t result = (char *)MEMORY[0x21054A870](v10, v6);
  if ((~*(void *)&v10[0] & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v10[0] <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v10[0] >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v8 = (uint64_t)v10[0];
  if (*(void *)&v5[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue] > (uint64_t)v10[0]) {
    uint64_t v8 = *(void *)&v5[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue];
  }
  if (v8 >= *(void *)&v5[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue]) {
    uint64_t v8 = *(void *)&v5[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue];
  }
  CGColorRef v9 = &v5[OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue];
  *(void *)CGColorRef v9 = v8;
  v9[8] = 0;
  ValueStepper.updateUI()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIViewRepresentableContext<LineWidthStepperView>);
  UIViewRepresentableContext.coordinator.getter();
  objc_msgSend(v5, sel_addTarget_action_forControlEvents_, a2, sel_didChange_, 4096);

  return v5;
}

char *protocol witness for UIViewRepresentable.makeUIView(context:) in conformance LineWidthStepperView(uint64_t a1)
{
  return LineWidthStepperView.makeUIView(context:)(a1, *v1);
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance LineWidthStepperView@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  char v5 = *((unsigned char *)v1 + 24);
  uint64_t v14 = *v1;
  uint64_t v15 = v3;
  uint64_t v16 = v4;
  char v17 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>);
  Binding.projectedValue.getter();
  uint64_t v6 = v19;
  uint64_t v7 = v20;
  char v8 = v21;
  CGColorRef v9 = (objc_class *)type metadata accessor for LineWidthStepperView.Coordinator();
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  uint64_t v11 = &v10[OBJC_IVAR____TtCV8PaperKit20LineWidthStepperView11Coordinator__width];
  *(void *)uint64_t v11 = v18;
  *((void *)v11 + 1) = v6;
  *((void *)v11 + 2) = v7;
  v11[24] = v8;
  v13.receiver = v10;
  v13.super_class = v9;
  id result = objc_msgSendSuper2(&v13, sel_init);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LineWidthStepperView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type LineWidthStepperView and conformance LineWidthStepperView();
  return MEMORY[0x270F01780](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LineWidthStepperView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type LineWidthStepperView and conformance LineWidthStepperView();
  return MEMORY[0x270F01718](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance LineWidthStepperView()
{
}

uint64_t one-time initialization function for colors1()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<MiniDefaultColor>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_20C837460;
  if (one-time initialization token for solidWhite != -1) {
    swift_once();
  }
  uint64_t v1 = unk_2676E9840;
  uint64_t v2 = qword_2676E9848;
  *(void *)(v0 + 32) = static MiniDefaultColor.solidWhite;
  *(void *)(v0 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v1;
  *(void *)(v0 + 48) = v2;
  uint64_t v3 = one-time initialization token for solidGray;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void *)algn_2676E9858;
  uint64_t v5 = qword_2676E9860;
  *(void *)(v0 + 56) = static MiniDefaultColor.solidGray;
  *(void *)(v0 + 64) = v4;
  *(void *)(v0 + 72) = v5;
  uint64_t v6 = one-time initialization token for solidBlack;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = unk_2676E9870;
  uint64_t v8 = qword_2676E9878;
  *(void *)(v0 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = static MiniDefaultColor.solidBlack;
  *(void *)(v0 + 88) = v7;
  *(void *)(v0 + 96) = v8;
  uint64_t v9 = one-time initialization token for solidTeal;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v10 = *(void *)algn_2676E9888;
  uint64_t v11 = qword_2676E9890;
  *(void *)(v0 + 104) = static MiniDefaultColor.solidTeal;
  *(void *)(v0 + 112) = v10;
  *(void *)(v0 + 12CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v11;
  uint64_t v12 = one-time initialization token for solidPink;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = unk_2676E98A0;
  uint64_t v14 = qword_2676E98A8;
  *(void *)(v0 + 128) = static MiniDefaultColor.solidPink;
  *(void *)(v0 + 136) = v13;
  *(void *)(v0 + 144) = v14;
  uint64_t v15 = one-time initialization token for solidPurple;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = *(void *)algn_2676E98B8;
  uint64_t v17 = qword_2676E98C0;
  *(void *)(v0 + 152) = static MiniDefaultColor.solidPurple;
  *(void *)(v0 + 16CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v16;
  *(void *)(v0 + 168) = v17;
  static MiniColorButton.colors1 = v0;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t one-time initialization function for colors2()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<MiniDefaultColor>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_20C837460;
  if (one-time initialization token for solidRed != -1) {
    swift_once();
  }
  uint64_t v1 = unk_2676E98D0;
  uint64_t v2 = qword_2676E98D8;
  *(void *)(v0 + 32) = static MiniDefaultColor.solidRed;
  *(void *)(v0 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v1;
  *(void *)(v0 + 48) = v2;
  uint64_t v3 = one-time initialization token for solidOrange;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void *)algn_2676E98E8;
  uint64_t v5 = qword_2676E98F0;
  *(void *)(v0 + 56) = static MiniDefaultColor.solidOrange;
  *(void *)(v0 + 64) = v4;
  *(void *)(v0 + 72) = v5;
  uint64_t v6 = one-time initialization token for solidYellow;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = unk_2676E9900;
  uint64_t v8 = qword_2676E9908;
  *(void *)(v0 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = static MiniDefaultColor.solidYellow;
  *(void *)(v0 + 88) = v7;
  *(void *)(v0 + 96) = v8;
  uint64_t v9 = one-time initialization token for solidGreen;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v10 = *(void *)algn_2676E9918;
  uint64_t v11 = qword_2676E9920;
  *(void *)(v0 + 104) = static MiniDefaultColor.solidGreen;
  *(void *)(v0 + 112) = v10;
  *(void *)(v0 + 12CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v11;
  uint64_t v12 = one-time initialization token for solidCyan;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = unk_2676E9930;
  uint64_t v14 = qword_2676E9938;
  *(void *)(v0 + 128) = static MiniDefaultColor.solidCyan;
  *(void *)(v0 + 136) = v13;
  *(void *)(v0 + 144) = v14;
  uint64_t v15 = one-time initialization token for solidBlue;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = *(void *)algn_2676E9948;
  uint64_t v17 = qword_2676E9950;
  *(void *)(v0 + 152) = static MiniDefaultColor.solidBlue;
  *(void *)(v0 + 16CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v16;
  *(void *)(v0 + 168) = v17;
  static MiniColorButton.colors2 = v0;
  swift_bridgeObjectRetain();
  return swift_retain();
}

void one-time initialization function for builtinColors()
{
  if (one-time initialization token for colors1 != -1) {
    swift_once();
  }
  uint64_t v0 = static MiniColorButton.colors1;
  if (one-time initialization token for colors2 != -1) {
    swift_once();
  }
  uint64_t v17 = v0;
  swift_bridgeObjectRetain();
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v1);
  int64_t v2 = *(void *)(v0 + 16);
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_25:
    static MiniColorButton.builtinColors = v13;
    return;
  }
  uint64_t v17 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  CFStringRef v3 = (const __CFString *)*MEMORY[0x263F00238];
  uint64_t v4 = v0 + 48;
  while (1)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v5 = (CGColor *)Color.cgColor.getter();
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = CGColorGetColorSpace(v5);
      if (one-time initialization token for extendedSRGBColorSpace != -1) {
        swift_once();
      }
      int v8 = CFEqual(v7, (CFTypeRef)static Color.extendedSRGBColorSpace);

      if (v8)
      {
        swift_release();
        swift_bridgeObjectRelease();
        CGColorRef v9 = v6;
        goto LABEL_18;
      }
      CGColorRef CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static Color.extendedSRGBColorSpace, kCGRenderingIntentDefault, v6, 0);
      if (CopyByMatchingToColorSpace)
      {
        CGColorRef v9 = CopyByMatchingToColorSpace;
        swift_release();
        swift_bridgeObjectRelease();

        goto LABEL_18;
      }
    }
    memset(v16, 0, sizeof(v16));
    uint64_t v11 = CGColorSpaceCreateWithName(v3);
    if (!v11) {
      break;
    }
    uint64_t v12 = v11;
    CGColorRef v9 = CGColorCreate(v11, v16);

    if (!v9) {
      goto LABEL_27;
    }
    swift_release();
    swift_bridgeObjectRelease();
LABEL_18:
    uint64_t v13 = v17;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
      uint64_t v13 = v17;
    }
    unint64_t v15 = *(void *)(v13 + 16);
    unint64_t v14 = *(void *)(v13 + 24);
    if (v15 >= v14 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      uint64_t v13 = v17;
    }
    *(void *)(v13 + 16) = v15 + 1;
    *(void *)(v13 + 8 * v15 + 32) = v9;
    v4 += 24;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
}

void closure #1 in MiniColorButton.pickerColor.getter(uint64_t a1@<X2>, void *a2@<X8>)
{
  *(_OWORD *)&v7[9] = *(_OWORD *)(a1 + 25);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<Color?>>);
  MEMORY[0x21054A870](&v8, v4);
  id v5 = v8;
  if (!v8)
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)(a1 + 48);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<CGColorRef?>);
    State.wrappedValue.getter();
    id v5 = v8;
    if (!v8)
    {
      id v6 = objc_msgSend(self, sel_blackColor, *(void *)v7, *(void *)&v7[8], *(void *)&v7[16], *(void *)&v7[24]);
      id v5 = objc_msgSend(v6, sel_CGColor);
    }
  }
  *a2 = v5;
}

uint64_t closure #2 in MiniColorButton.pickerColor.getter(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Color.init(cgColor:)((CGColor *)*a1, &v7);
  *(_OWORD *)int v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&v8[9] = *(_OWORD *)(a4 + 25);
  outlined retain of MiniColorButton(a4);
  outlined retain of Binding<Inspected<Color?>>((uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<Color?>>);
  MEMORY[0x21054A870](v6);

  Binding.wrappedValue.setter();
  outlined release of Binding<Inspected<Color?>>((uint64_t)v8);
  return outlined release of MiniColorButton(a4);
}

uint64_t MiniColorButton.multicolorSwatch.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MultiColorSwatchButton(0);
  uint64_t v4 = (int *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v6 = &v45[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  MEMORY[0x270FA5388](v7);
  CGColorRef v9 = &v45[-v8 - 16];
  long long v10 = v1[5];
  long long v51 = v1[4];
  long long v52 = v10;
  long long v11 = v1[7];
  long long v53 = v1[6];
  long long v54 = v11;
  long long v12 = v1[1];
  long long v47 = *v1;
  long long v48 = v12;
  long long v13 = v1[3];
  long long v49 = v1[2];
  long long v50 = v13;
  type metadata accessor for MainActor();
  outlined retain of MiniColorButton((uint64_t)&v47);
  outlined retain of MiniColorButton((uint64_t)&v47);
  uint64_t v14 = static MainActor.shared.getter();
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = MEMORY[0x263F8F500];
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = v16;
  long long v17 = v52;
  *(_OWORD *)(v15 + 96) = v51;
  *(_OWORD *)(v15 + 112) = v17;
  long long v18 = v54;
  *(_OWORD *)(v15 + 128) = v53;
  *(_OWORD *)(v15 + 144) = v18;
  long long v19 = v48;
  *(_OWORD *)(v15 + 32) = v47;
  *(_OWORD *)(v15 + 48) = v19;
  long long v20 = v50;
  *(_OWORD *)(v15 + 64) = v49;
  *(_OWORD *)(v15 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v20;
  outlined retain of MiniColorButton((uint64_t)&v47);
  uint64_t v21 = static MainActor.shared.getter();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = v16;
  long long v23 = v52;
  *(_OWORD *)(v22 + 96) = v51;
  *(_OWORD *)(v22 + 112) = v23;
  long long v24 = v54;
  *(_OWORD *)(v22 + 128) = v53;
  *(_OWORD *)(v22 + 144) = v24;
  long long v25 = v48;
  *(_OWORD *)(v22 + 32) = v47;
  *(_OWORD *)(v22 + 48) = v25;
  long long v26 = v50;
  *(_OWORD *)(v22 + 64) = v49;
  *(_OWORD *)(v22 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v26;
  type metadata accessor for CGColorRef(0);
  Binding.init(get:set:)();
  outlined release of MiniColorButton((uint64_t)&v47);
  uint64_t v27 = *(void *)v45;
  long long v44 = *(_OWORD *)&v45[8];
  uint64_t v28 = (uint64_t (*)())swift_allocObject();
  long long v29 = v52;
  *((_OWORD *)v28 + 5) = v51;
  *((_OWORD *)v28 + 6) = v29;
  long long v30 = v54;
  *((_OWORD *)v28 + 7) = v53;
  *((_OWORD *)v28 + 8) = v30;
  long long v31 = v48;
  *((_OWORD *)v28 + 1) = v47;
  *((_OWORD *)v28 + 2) = v31;
  long long v32 = v50;
  *((_OWORD *)v28 + 3) = v49;
  *((_OWORD *)v28 + 4) = v32;
  uint64_t v33 = (uint64_t (*)(void *))swift_allocObject();
  long long v34 = v52;
  *((_OWORD *)v33 + 5) = v51;
  *((_OWORD *)v33 + 6) = v34;
  long long v35 = v54;
  *((_OWORD *)v33 + 7) = v53;
  *((_OWORD *)v33 + 8) = v35;
  long long v36 = v48;
  *((_OWORD *)v33 + 1) = v47;
  *((_OWORD *)v33 + 2) = v36;
  long long v37 = v50;
  *((_OWORD *)v33 + 3) = v49;
  *((_OWORD *)v33 + 4) = v37;
  *(void *)id v6 = swift_getKeyPath();
  v6[8] = 0;
  uint64_t v38 = (uint64_t *)&v6[v4[8]];
  *uint64_t v38 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v39 = (uint64_t (**)())&v6[v4[9]];
  *((void *)v6 + 2) = v27;
  *(_OWORD *)(v6 + 24) = v44;
  *uint64_t v39 = partial apply for closure #1 in MiniColorButton.multicolorSwatch.getter;
  v39[1] = v28;
  uint64_t v40 = (uint64_t (**)(void *))&v6[v4[10]];
  *uint64_t v40 = partial apply for closure #2 in MiniColorButton.multicolorSwatch.getter;
  v40[1] = v33;
  outlined init with take of MultiColorSwatchButton((uint64_t)v6, (uint64_t)v9, type metadata accessor for MultiColorSwatchButton);
  outlined retain of MiniColorButton((uint64_t)&v47);
  outlined retain of MiniColorButton((uint64_t)&v47);
  if (one-time initialization token for colorSwatchSize != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined init with copy of ColorPickerRepresentable((uint64_t)v9, a1, type metadata accessor for MultiColorSwatchButton);
  uint64_t v41 = (_OWORD *)(a1
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<MultiColorSwatchButton, _FrameLayout>)
                          + 36));
  long long v42 = *(_OWORD *)&v45[16];
  _OWORD *v41 = *(_OWORD *)v45;
  v41[1] = v42;
  v41[2] = v46;
  return outlined destroy of ColorPickerRepresentable((uint64_t)v9, type metadata accessor for MultiColorSwatchButton);
}

uint64_t closure #1 in MiniColorButton.multicolorSwatch.getter(uint64_t a1)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  outlined retain of MiniColorButton(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.setter();
  long long v3 = *(_OWORD *)(a1 + 96);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v3 + 8, (uint64_t)v4, &demangling cache variable for type metadata for AnyLocation<Bool>?);
  outlined retain of ReflowSpacingAdjustment?((uint64_t)v4);
  State.wrappedValue.getter();
  State.wrappedValue.setter();
  outlined release of ObservedObject<MiniMenuState>((uint64_t)&v3);
  return outlined release of MiniColorButton(a1);
}

uint64_t closure #2 in MiniColorButton.multicolorSwatch.getter(void *a1)
{
  Color.init(cgColor:)((CGColor *)a1, &v9);
  uint64_t v1 = v9;
  if (v9)
  {
    if (one-time initialization token for builtinColors != -1) {
      swift_once();
    }
    uint64_t v2 = static MiniColorButton.builtinColors;
    uint64_t v3 = *(void *)(static MiniColorButton.builtinColors + 16);
    if (!v3)
    {

      return 1;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *(CGColor **)(v2 + 8 * v4 + 32);
      uint64_t v8 = v1;
      CGColorRef v9 = v5;
      id v6 = v5;
      if (Color.almostEqual(_:)((void **)&v8)) {
        break;
      }
      ++v4;

      if (v3 == v4)
      {

        swift_bridgeObjectRelease_n();
        return 1;
      }
    }

    swift_bridgeObjectRelease_n();
  }
  return 0;
}

void *closure #1 in MiniColorButton.strokePreview.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned __int8 *)(a1 + 8);
  outlined retain of MiniColorButton(a1);
  outlined copy of Environment<MiniMenuController?>.Content(v4, v5);
  uint64_t v6 = specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<MiniMenuController?>.Content(v4, v5);
  if (!v6)
  {
    outlined release of MiniColorButton(a1);
    goto LABEL_5;
  }
  *(_OWORD *)__dst = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&__dst[9] = *(_OWORD *)(a1 + 25);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<Color?>>);
  MEMORY[0x21054A870](&v31, v7);
  uint64_t v8 = v31;
  *(void *)__dst = v31;
  MiniMenuController.convert(color:)((CGColor **)__dst, v45);
  swift_release();

  outlined release of MiniColorButton(a1);
  CGColorRef v9 = v45[0];
  if (!v45[0])
  {
LABEL_5:
    uint64_t v23 = static Alignment.center.getter();
    long long v25 = v24;
    closure #2 in closure #1 in MiniColorButton.strokePreview.getter((uint64_t)v33);
    long long v31 = (void *)v23;
    long long v32 = v25;
    _s7SwiftUI19_ConditionalContentV7StorageOyAA15StrokeShapeViewVyAA4PathVAA5ColorVAA05EmptyH0VGAA6ZStackVyAA05TupleH0VyAGyAikNG_ANtGG_GWOi0_((uint64_t)&v31);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v31, (uint64_t)__src, &demangling cache variable for type metadata for _ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>.Storage);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StrokeShapeView<Path, Color, EmptyView>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type StrokeShapeView<Path, Color, EmptyView> and conformance StrokeShapeView<A, B, C>, &demangling cache variable for type metadata for StrokeShapeView<Path, Color, EmptyView>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>);
    _ConditionalContent<>.init(storage:)();
    return memcpy(a2, __dst, 0x161uLL);
  }
  Path.init(_:)();
  long long v10 = v45[1];
  long long v11 = v45[2];
  long long v12 = v45[3];
  long long v13 = v45[4];
  uint64_t v28 = a2;
  unsigned __int8 v14 = v46;
  uint64_t v27 = v9;
  uint64_t v15 = MEMORY[0x21054A5B0]();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v16 = v47;
  uint64_t v17 = v49;
  uint64_t v18 = v50;
  uint64_t v19 = v51;
  uint64_t v20 = static Alignment.center.getter();
  long long v31 = v10;
  long long v32 = v11;
  v33[0] = v12;
  v33[1] = v13;
  unsigned __int8 v34 = v14;
  uint64_t v35 = v16;
  uint64_t v36 = v48;
  uint64_t v37 = v17;
  uint64_t v38 = v18;
  uint64_t v39 = v19;
  uint64_t v40 = v15;
  __int16 v41 = 256;
  uint64_t v42 = v20;
  uint64_t v43 = v21;
  _s7SwiftUI19_ConditionalContentV7StorageOyAA15StrokeShapeViewVyAA4PathVAA5ColorVAA05EmptyH0VGAA6ZStackVyAA05TupleH0VyAGyAikNG_ANtGG_GWOi_((uint64_t)&v31);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v31, (uint64_t)v29, &demangling cache variable for type metadata for _ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>.Storage);
  outlined copy of Path.Storage((uint64_t)v10, (uint64_t)v11, (uint64_t)v12, (uint64_t)v13, v14);
  swift_bridgeObjectRetain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StrokeShapeView<Path, Color, EmptyView>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type StrokeShapeView<Path, Color, EmptyView> and conformance StrokeShapeView<A, B, C>, &demangling cache variable for type metadata for StrokeShapeView<Path, Color, EmptyView>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>);
  _ConditionalContent<>.init(storage:)();

  unsigned __int8 v22 = v14;
  a2 = v28;
  outlined consume of Path.Storage((uint64_t)v10, (uint64_t)v11, (uint64_t)v12, (uint64_t)v13, v22);
  swift_release();
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, sizeof(__dst));
  return memcpy(a2, __dst, 0x161uLL);
}

uint64_t closure #2 in closure #1 in MiniColorButton.strokePreview.getter@<X0>(uint64_t a1@<X8>)
{
  Path.init(_:)();
  uint64_t v2 = v54[0];
  uint64_t v3 = v54[1];
  uint64_t v44 = v54[3];
  uint64_t v45 = v54[2];
  char v43 = v55;
  uint64_t v53 = static Color.gray.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v4 = v56;
  unsigned int v51 = v58;
  unsigned int v52 = v57;
  uint64_t v5 = v59;
  uint64_t v50 = v60;
  uint64_t v6 = v61;
  uint64_t v7 = static Alignment.center.getter();
  uint64_t v48 = v8;
  uint64_t v49 = v7;
  uint64_t v47 = static Color.white.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v9 = v62;
  uint64_t v41 = v62;
  unsigned int v10 = v63;
  unsigned int v40 = v63;
  unsigned int v46 = v64;
  uint64_t v11 = v65;
  uint64_t v12 = v66;
  uint64_t v39 = v66;
  uint64_t v13 = v67;
  outlined init with take of Path.Storage((uint64_t)v54, (uint64_t)v78);
  outlined retain of Path.Storage((uint64_t)v78);
  uint64_t v38 = static Alignment.center.getter();
  uint64_t v42 = v14;
  Path.init(_:)();
  uint64_t v15 = v68;
  uint64_t v16 = v69;
  uint64_t v17 = v70;
  uint64_t v36 = v71;
  unsigned __int8 v35 = v72;
  uint64_t v37 = static Color.red.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v18 = v73;
  uint64_t v34 = v75;
  uint64_t v19 = v76;
  uint64_t v20 = v77;
  uint64_t v21 = static Alignment.center.getter();
  *(void *)&long long v79 = v2;
  *((void *)&v79 + 1) = v3;
  *(void *)&long long v80 = v45;
  *((void *)&v80 + 1) = v44;
  LOBYTE(v81) = v43;
  *((void *)&v81 + 1) = v9;
  *(void *)&long long v82 = __PAIR64__(v46, v10);
  *((void *)&v82 + 1) = v11;
  *(void *)&long long v83 = v12;
  *((void *)&v83 + 1) = v13;
  *(void *)&long long v84 = v47;
  WORD4(v84) = 256;
  *(void *)&long long v85 = v2;
  *((void *)&v85 + 1) = v3;
  *(void *)&long long v86 = v45;
  *((void *)&v86 + 1) = v44;
  LOBYTE(v87) = v43;
  *((void *)&v87 + 1) = v4;
  *(void *)&long long v88 = __PAIR64__(v51, v52);
  *((void *)&v88 + 1) = v5;
  *(void *)&long long v89 = v50;
  *((void *)&v89 + 1) = v6;
  *(void *)&long long v90 = v53;
  WORD4(v9CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 256;
  *(void *)&long long v91 = v49;
  *((void *)&v91 + 1) = v48;
  *(void *)&long long v92 = v38;
  *((void *)&v92 + 1) = v42;
  long long v22 = v85;
  long long v23 = v86;
  long long v24 = v88;
  *(_OWORD *)(a1 + 128) = v87;
  *(_OWORD *)(a1 + 144) = v24;
  *(_OWORD *)(a1 + 96) = v22;
  *(_OWORD *)(a1 + 112) = v23;
  long long v25 = v80;
  *(_OWORD *)a1 = v79;
  *(_OWORD *)(a1 + 16) = v25;
  long long v26 = v81;
  long long v27 = v82;
  long long v28 = v84;
  *(_OWORD *)(a1 + 64) = v83;
  *(_OWORD *)(a1 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v28;
  *(_OWORD *)(a1 + 32) = v26;
  *(_OWORD *)(a1 + 48) = v27;
  long long v29 = v89;
  long long v30 = v90;
  long long v31 = v92;
  *(_OWORD *)(a1 + 192) = v91;
  *(_OWORD *)(a1 + 208) = v31;
  *(_OWORD *)(a1 + 16CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v29;
  *(_OWORD *)(a1 + 176) = v30;
  *(void *)(a1 + 224) = v15;
  *(void *)(a1 + 232) = v16;
  *(void *)(a1 + 24CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v17;
  *(void *)(a1 + 248) = v36;
  *(unsigned char *)(a1 + 256) = v35;
  *(void *)&long long v29 = v74;
  *(void *)(a1 + 264) = v18;
  *(void *)(a1 + 272) = v29;
  *(void *)(a1 + 28CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v34;
  *(void *)(a1 + 288) = v19;
  *(void *)(a1 + 296) = v20;
  *(void *)(a1 + 304) = v37;
  *(_WORD *)(a1 + 312) = 256;
  *(void *)(a1 + 32CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v21;
  *(void *)(a1 + 328) = v32;
  outlined retain of StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>((uint64_t)&v79);
  outlined copy of Path.Storage(v15, v16, v17, v36, v35);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of Path.Storage(v15, v16, v17, v36, v35);
  swift_release();
  swift_bridgeObjectRelease();
  v93[0] = v2;
  v93[1] = v3;
  v93[2] = v45;
  v93[3] = v44;
  char v94 = v43;
  uint64_t v95 = v41;
  unsigned int v96 = v40;
  unsigned int v97 = v46;
  uint64_t v98 = v11;
  uint64_t v99 = v39;
  uint64_t v100 = v13;
  uint64_t v101 = v47;
  __int16 v102 = 256;
  uint64_t v103 = v2;
  uint64_t v104 = v3;
  uint64_t v105 = v45;
  uint64_t v106 = v44;
  char v107 = v43;
  uint64_t v108 = v4;
  unsigned int v109 = v52;
  unsigned int v110 = v51;
  uint64_t v111 = v5;
  uint64_t v112 = v50;
  uint64_t v113 = v6;
  uint64_t v114 = v53;
  __int16 v115 = 256;
  uint64_t v116 = v49;
  uint64_t v117 = v48;
  uint64_t v118 = v38;
  uint64_t v119 = v42;
  return outlined release of StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>((uint64_t)v93);
}

void closure #1 in closure #1 in MiniColorButton.strokePreview.getter()
{
  if (one-time initialization token for strokeSwatchEndPoint != -1) {
    swift_once();
  }
  unint64_t v1 = *((void *)&static MiniMenuConstants.strokeSwatchEndPoint + 1);
  unint64_t v0 = static MiniMenuConstants.strokeSwatchEndPoint;
  Path.move(to:)((CGPoint)static MiniMenuConstants.strokeSwatchEndPoint);
  Path.addLine(to:)((CGPoint)__PAIR128__(v0, v1));
}

void closure #2 in closure #2 in closure #1 in MiniColorButton.strokePreview.getter()
{
  if (one-time initialization token for strokeSwatchEndPoint != -1) {
    swift_once();
  }
  Path.move(to:)((CGPoint)__PAIR128__(static MiniMenuConstants.strokeSwatchEndPoint, static MiniMenuConstants.strokeSwatchEndPoint));
  Path.addLine(to:)((CGPoint)__PAIR128__(*((unint64_t *)&static MiniMenuConstants.strokeSwatchEndPoint + 1), *((unint64_t *)&static MiniMenuConstants.strokeSwatchEndPoint + 1)));
}

void closure #1 in MiniColorButton.fillPreview.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>.Storage);
  MEMORY[0x270FA5388](v57);
  uint64_t v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContentShapeKindModifier<Circle>);
  MEMORY[0x270FA5388](v52);
  uint64_t v53 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ContentShapeKinds();
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>);
  MEMORY[0x270FA5388](v59);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v54 = (uint64_t)&v49 - v16;
  uint64_t v17 = *(void *)a1;
  uint64_t v18 = *(unsigned __int8 *)(a1 + 8);
  outlined retain of MiniColorButton(a1);
  outlined copy of Environment<MiniMenuController?>.Content(v17, v18);
  uint64_t v19 = specialized Environment.wrappedValue.getter(v17, v18);
  outlined consume of Environment<MiniMenuController?>.Content(v17, v18);
  if (v19)
  {
    *(_OWORD *)uint64_t v62 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&v62[9] = *(_OWORD *)(a1 + 25);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<Color?>>);
    MEMORY[0x21054A870](&v60, v20);
    uint64_t v21 = v60;
    *(void *)uint64_t v62 = v60;
    MiniMenuController.convert(color:)((CGColor **)v62, &v61);
    swift_release();

    outlined release of MiniColorButton(a1);
    if (v61)
    {
      long long v22 = v61;
      uint64_t v23 = MEMORY[0x21054A5B0]();
      if (one-time initialization token for colorSwatchPadding != -1) {
        swift_once();
      }
      char v24 = static Edge.Set.all.getter();
      EdgeInsets.init(_all:)();
      *(void *)uint64_t v4 = v23;
      *((_WORD *)v4 + 4) = 256;
      v4[16] = v24;
      *((void *)v4 + 3) = v25;
      *((void *)v4 + 4) = v26;
      *((void *)v4 + 5) = v27;
      *((void *)v4 + 6) = v28;
      v4[56] = 0;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>);
      lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
      lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>> and conformance <> ModifiedContent<A, B>();
      _ConditionalContent<>.init(storage:)();
      swift_release();

      return;
    }
  }
  else
  {
    outlined release of MiniColorButton(a1);
  }
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x263F1B388], v9);
  uint64_t v29 = Color.init(_:white:opacity:)();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  long long v30 = *(_OWORD *)v62;
  uint64_t v31 = *(void *)&v62[16];
  uint64_t v32 = *(void *)&v62[24];
  uint64_t v33 = v63;
  uint64_t v51 = static Alignment.center.getter();
  uint64_t v50 = v34;
  if (one-time initialization token for colorSwatchPadding != -1) {
    swift_once();
  }
  char v35 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  static ContentShapeKinds.interaction.getter();
  uint64_t v44 = v53;
  uint64_t v46 = v55;
  uint64_t v45 = v56;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(&v53[*(int *)(v52 + 40)], v8, v56);
  *uint64_t v44 = 0;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v44, (uint64_t)&v14[*(int *)(v59 + 36)], &demangling cache variable for type metadata for _ContentShapeKindModifier<Circle>);
  *(_OWORD *)uint64_t v14 = v30;
  *((void *)v14 + 2) = v31;
  *((void *)v14 + 3) = v32;
  *((void *)v14 + 4) = v33;
  *((void *)v14 + 5) = v29;
  *((_WORD *)v14 + 24) = 256;
  uint64_t v47 = v50;
  *((void *)v14 + 7) = v51;
  *((void *)v14 + 8) = v47;
  v14[72] = v35;
  *((void *)v14 + 1CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v37;
  *((void *)v14 + 11) = v39;
  *((void *)v14 + 12) = v41;
  *((void *)v14 + 13) = v43;
  v14[112] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v44, &demangling cache variable for type metadata for _ContentShapeKindModifier<Circle>);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v45);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v48 = v54;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v14, v54, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v48, (uint64_t)v4, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>);
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>);
  lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>> and conformance <> ModifiedContent<A, B>();
  _ConditionalContent<>.init(storage:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>);
}

uint64_t MiniColorButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v52 = a1;
  uint64_t v48 = type metadata accessor for PopoverAttachmentAnchor();
  uint64_t v55 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v3 = (uint64_t *)((char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for <<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0);
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v49 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v6 = v1[5];
  long long v75 = v1[4];
  long long v76 = v6;
  long long v7 = v1[7];
  long long v77 = v1[6];
  long long v78 = v7;
  long long v8 = v1[1];
  long long v71 = *v1;
  long long v72 = v8;
  long long v9 = v1[3];
  long long v73 = v1[2];
  long long v74 = v9;
  long long v69 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  uint64_t v53 = v57;
  uint64_t v54 = v56;
  int v47 = v58;
  uint64_t v10 = (_OWORD *)swift_allocObject();
  long long v11 = v76;
  void v10[5] = v75;
  v10[6] = v11;
  long long v12 = v78;
  v10[7] = v77;
  v10[8] = v12;
  long long v13 = v72;
  v10[1] = v71;
  double v10[2] = v13;
  long long v14 = v74;
  void v10[3] = v73;
  v10[4] = v14;
  uint64_t v15 = (_OWORD *)swift_allocObject();
  long long v16 = v76;
  void v15[5] = v75;
  v15[6] = v16;
  long long v17 = v78;
  v15[7] = v77;
  v15[8] = v17;
  long long v18 = v72;
  v15[1] = v71;
  void v15[2] = v18;
  long long v19 = v74;
  v15[3] = v73;
  void v15[4] = v19;
  long long v69 = 0uLL;
  char v70 = 1;
  outlined retain of MiniColorButton((uint64_t)&v71);
  outlined retain of MiniColorButton((uint64_t)&v71);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CGSize?);
  State.init(wrappedValue:)();
  uint64_t v40 = v57;
  uint64_t v41 = v56;
  int v39 = v58;
  uint64_t v20 = v59;
  uint64_t v42 = v59;
  type metadata accessor for MiniPopoverState();
  lazy protocol witness table accessor for type ColorPickerRepresentable and conformance ColorPickerRepresentable((unint64_t *)&lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState, (void (*)(uint64_t))type metadata accessor for MiniPopoverState);
  uint64_t v21 = EnvironmentObject.init()();
  uint64_t v43 = v21;
  uint64_t v38 = v22;
  long long v69 = v77;
  State.projectedValue.getter();
  uint64_t v45 = v57;
  uint64_t v46 = v56;
  int v44 = v58;
  uint64_t v23 = (_OWORD *)swift_allocObject();
  long long v24 = v76;
  v23[5] = v75;
  v23[6] = v24;
  long long v25 = v78;
  void v23[7] = v77;
  v23[8] = v25;
  long long v26 = v72;
  v23[1] = v71;
  long long v23[2] = v26;
  long long v27 = v74;
  v23[3] = v73;
  v23[4] = v27;
  outlined retain of MiniColorButton((uint64_t)&v71);
  uint64_t *v3 = static Anchor.Source<A>.bounds.getter();
  uint64_t v28 = v3;
  uint64_t v29 = v3;
  uint64_t v30 = v48;
  (*(void (**)(uint64_t *, void, uint64_t))(v55 + 104))(v28, *MEMORY[0x263F1A030], v48);
  uint64_t v56 = v41;
  uint64_t v57 = v40;
  unsigned __int8 v58 = v39;
  uint64_t v59 = v20;
  uint64_t v60 = v54;
  uint64_t v61 = v53;
  char v62 = v47;
  uint64_t v63 = v21;
  uint64_t v64 = v38;
  uint64_t v65 = partial apply for closure #1 in MiniColorButton.body.getter;
  uint64_t v66 = v10;
  uint64_t v67 = partial apply for closure #2 in MiniColorButton.body.getter;
  uint64_t v68 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiniPopoverButton<HStack<_ConditionalContent<ModifiedContent<ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>, AccessibilityAttachmentModifier>, ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier>>>, <<opaque return type of View.allowsSecureDrawing()>>.0>);
  type metadata accessor for ColorPickerRepresentable(0);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type MiniPopoverButton<HStack<_ConditionalContent<ModifiedContent<ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>, AccessibilityAttachmentModifier>, ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier>>>, <<opaque return type of View.allowsSecureDrawing()>>.0> and conformance MiniPopoverButton<A, B>, &demangling cache variable for type metadata for MiniPopoverButton<HStack<_ConditionalContent<ModifiedContent<ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>, AccessibilityAttachmentModifier>, ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier>>>, <<opaque return type of View.allowsSecureDrawing()>>.0>);
  lazy protocol witness table accessor for type ColorPickerRepresentable and conformance ColorPickerRepresentable(&lazy protocol witness table cache variable for type ColorPickerRepresentable and conformance ColorPickerRepresentable, (void (*)(uint64_t))type metadata accessor for ColorPickerRepresentable);
  uint64_t v31 = v49;
  View.popoverCore<A>(isPresented:attachmentAnchor:arrowEdges:isDetachable:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t *, uint64_t))(v55 + 8))(v29, v30);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v32 = static VerticalAlignment.firstTextBaseline.getter();
  uint64_t v34 = v50;
  uint64_t v33 = v51;
  uint64_t v35 = v52;
  (*(void (**)(uint64_t, char *, uint64_t))(v50 + 16))(v52, v31, v51);
  uint64_t v36 = (uint64_t *)(v35
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0, _AlignmentWritingModifier>)
                           + 36));
  *uint64_t v36 = v32;
  v36[1] = (uint64_t)closure #1 in MiniDivider.body.getter;
  _OWORD v36[2] = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v31, v33);
}

uint64_t closure #1 in MiniColorButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = static VerticalAlignment.center.getter();
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, _ConditionalContent<ModifiedContent<ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>, AccessibilityAttachmentModifier>, ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier>>>);
  return closure #1 in closure #1 in MiniColorButton.body.getter(a1, a2 + *(int *)(v4 + 44));
}

uint64_t closure #1 in closure #1 in MiniColorButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>);
  MEMORY[0x270FA5388](v32);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier>);
  MEMORY[0x270FA5388](v41);
  uint64_t v31 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v33 = (uint64_t)&v31 - v7;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>, AccessibilityAttachmentModifier>, ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier>>.Storage);
  MEMORY[0x270FA5388](v39);
  uint64_t v40 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContentShapeKindModifier<Circle>);
  MEMORY[0x270FA5388](v34);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ContentShapeKinds();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  long long v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>);
  MEMORY[0x270FA5388](v35);
  long long v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>, AccessibilityAttachmentModifier>);
  MEMORY[0x270FA5388](v38);
  long long v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v36 = (uint64_t)&v31 - v20;
  uint64_t v21 = a1;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a1 + 64, (uint64_t)v44, (uint64_t *)&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v44, (uint64_t)v45, (uint64_t *)&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>?);
  if (v46)
  {
    outlined retain of MiniColorButton(a1);
    uint64_t v22 = static Alignment.center.getter();
    uint64_t v24 = v23;
    closure #1 in MiniColorButton.strokePreview.getter(v21, v42);
    memcpy(&v43[2], v42, 0x161uLL);
    v43[0] = v22;
    v43[1] = v24;
    static ContentShapeKinds.interaction.getter();
    (*(void (**)(unsigned char *, char *, uint64_t))(v12 + 16))(&v10[*(int *)(v34 + 40)], v14, v11);
    *uint64_t v10 = 0;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)&v16[*(int *)(v35 + 36)], &demangling cache variable for type metadata for _ContentShapeKindModifier<Circle>);
    memcpy(v16, v43, 0x171uLL);
    outlined retain of ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>((uint64_t)v43);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for _ContentShapeKindModifier<Circle>);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    outlined release of _ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>((uint64_t)v42);
    outlined release of MiniColorButton(v21);
    LocalizedStringKey.init(stringLiteral:)();
    lazy protocol witness table accessor for type ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>> and conformance <> ModifiedContent<A, B>();
    View.accessibilityLabel(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>);
    long long v25 = &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>, AccessibilityAttachmentModifier>;
    uint64_t v26 = v36;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v18, v36, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>, AccessibilityAttachmentModifier>);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v26, v40, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>, AccessibilityAttachmentModifier>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>> and conformance <A> Group<A>);
    _ConditionalContent<>.init(storage:)();
    uint64_t v27 = v26;
  }
  else
  {
    outlined retain of MiniColorButton(a1);
    closure #1 in MiniColorButton.fillPreview.getter(a1, (uint64_t)v4);
    outlined release of MiniColorButton(a1);
    LocalizedStringKey.init(stringLiteral:)();
    lazy protocol witness table accessor for type Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>> and conformance <A> Group<A>();
    uint64_t v28 = (uint64_t)v31;
    View.accessibilityLabel(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>);
    long long v25 = &demangling cache variable for type metadata for ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier>;
    uint64_t v29 = v33;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v28, v33, &demangling cache variable for type metadata for ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier>);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v29, v40, &demangling cache variable for type metadata for ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ZStack<_ConditionalContent<StrokeShapeView<Path, Color, EmptyView>, ZStack<TupleView<(StrokeShapeView<Path, Color, StrokeShapeView<Path, Color, EmptyView>>, StrokeShapeView<Path, Color, EmptyView>)>>>>, _ContentShapeKindModifier<Circle>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type Group<_ConditionalContent<ModifiedContent<_ShapeView<Circle, Color>, _PaddingLayout>, ModifiedContent<ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _PaddingLayout>, _ContentShapeKindModifier<Circle>>>> and conformance <A> Group<A>);
    _ConditionalContent<>.init(storage:)();
    uint64_t v27 = v29;
  }
  return outlined destroy of StocksKitCurrencyCache.Provider?(v27, v25);
}

uint64_t closure #2 in MiniColorButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v3 = type metadata accessor for PresentationAdaptation();
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v42 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PlainButtonStyle();
  uint64_t v41 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Grid<TupleView<(ModifiedContent<GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _PaddingLayout>, GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _ConditionalContent<HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>>)>>);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Grid<TupleView<(ModifiedContent<GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _PaddingLayout>, GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _ConditionalContent<HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>>)>>, _PaddingLayout>);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v38 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  long long v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.presentationCompactAdaptation(_:)>>.0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v39 = v17;
  uint64_t v40 = v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v10 = static Alignment.center.getter();
  *((void *)v10 + 1) = v21;
  *((void *)v10 + 2) = 0;
  char v10[24] = 1;
  *((void *)v10 + 4) = 0;
  v10[40] = 1;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<GridLayout, TupleView<(ModifiedContent<GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _PaddingLayout>, GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _ConditionalContent<HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>>)>>);
  closure #1 in closure #2 in MiniColorButton.body.getter(a1, (uint64_t)&v10[*(int *)(v22 + 44)]);
  LOBYTE(a1) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)v13, &demangling cache variable for type metadata for Grid<TupleView<(ModifiedContent<GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _PaddingLayout>, GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _ConditionalContent<HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>>)>>);
  uint64_t v31 = &v13[*(int *)(v11 + 36)];
  *uint64_t v31 = a1;
  *((void *)v31 + 1) = v24;
  *((void *)v31 + 2) = v26;
  *((void *)v31 + 3) = v28;
  *((void *)v31 + 4) = v30;
  v31[40] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Grid<TupleView<(ModifiedContent<GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _PaddingLayout>, GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _ConditionalContent<HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>>)>>);
  PlainButtonStyle.init()();
  unint64_t v32 = lazy protocol witness table accessor for type ModifiedContent<Grid<TupleView<(ModifiedContent<GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _PaddingLayout>, GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _ConditionalContent<HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
  uint64_t v33 = lazy protocol witness table accessor for type ColorPickerRepresentable and conformance ColorPickerRepresentable((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v7, v5);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for ModifiedContent<Grid<TupleView<(ModifiedContent<GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _PaddingLayout>, GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _ConditionalContent<HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>>)>>, _PaddingLayout>);
  uint64_t v34 = v42;
  static PresentationAdaptation.popover.getter();
  uint64_t v46 = v11;
  uint64_t v47 = v5;
  unint64_t v48 = v32;
  uint64_t v49 = v33;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  View.presentationCompactAdaptation(_:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v34, v44);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v14);
  uint64_t v46 = v14;
  uint64_t v47 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v36 = v39;
  View.allowsSecureDrawing()();
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v20, v36);
}

uint64_t closure #1 in closure #2 in MiniColorButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v97 = a2;
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>);
  MEMORY[0x270FA5388](v94);
  uint64_t v106 = (uint64_t)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v102 = (uint64_t)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v105 = (uint64_t *)((char *)&v88 - v7);
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>>.Storage);
  MEMORY[0x270FA5388](v89);
  uint64_t v91 = (uint64_t)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>);
  MEMORY[0x270FA5388](v90);
  uint64_t v103 = (uint64_t *)((char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>>);
  MEMORY[0x270FA5388](v10 - 8);
  unsigned int v96 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v95 = (char *)&v88 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>);
  MEMORY[0x270FA5388](v14);
  long long v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v88 - v18;
  uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _PaddingLayout>);
  MEMORY[0x270FA5388](v107);
  uint64_t v21 = (char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v88 - v23;
  *(void *)uint64_t v19 = 0;
  v19[8] = 1;
  uint64_t v104 = v14;
  unsigned int v109 = &v19[*(int *)(v14 + 36)];
  if (one-time initialization token for colors1 != -1) {
    swift_once();
  }
  *(void *)uint64_t v111 = static MiniColorButton.colors1;
  uint64_t v25 = (_OWORD *)swift_allocObject();
  long long v26 = *(_OWORD *)(a1 + 80);
  v25[5] = *(_OWORD *)(a1 + 64);
  v25[6] = v26;
  long long v27 = *(_OWORD *)(a1 + 112);
  v25[7] = *(_OWORD *)(a1 + 96);
  v25[8] = v27;
  long long v28 = *(_OWORD *)(a1 + 16);
  v25[1] = *(_OWORD *)a1;
  void v25[2] = v28;
  long long v29 = *(_OWORD *)(a1 + 48);
  void v25[3] = *(_OWORD *)(a1 + 32);
  void v25[4] = v29;
  swift_bridgeObjectRetain();
  outlined retain of MiniColorButton(a1);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MiniDefaultColor]);
  uint64_t v31 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [MiniDefaultColor] and conformance [A], &demangling cache variable for type metadata for [MiniDefaultColor]);
  lazy protocol witness table accessor for type MiniColorSwatch and conformance MiniColorSwatch();
  lazy protocol witness table accessor for type MiniDefaultColor and conformance MiniDefaultColor();
  uint64_t v108 = v31;
  unsigned int v109 = (char *)v30;
  ForEach<>.init(_:content:)();
  LOBYTE(v3CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v19, (uint64_t)v21, &demangling cache variable for type metadata for GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>);
  uint64_t v40 = &v21[*(int *)(v107 + 36)];
  *uint64_t v40 = v30;
  *((void *)v40 + 1) = v33;
  *((void *)v40 + 2) = v35;
  *((void *)v40 + 3) = v37;
  *((void *)v40 + 4) = v39;
  v40[40] = 0;
  unint64_t v93 = v19;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>);
  long long v92 = v21;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v21, (uint64_t)v24, &demangling cache variable for type metadata for ModifiedContent<GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _PaddingLayout>);
  *(void *)long long v16 = 0;
  v16[8] = 1;
  if (one-time initialization token for colors2 != -1) {
    swift_once();
  }
  *(void *)uint64_t v111 = static MiniColorButton.colors2;
  uint64_t v41 = (_OWORD *)swift_allocObject();
  long long v42 = *(_OWORD *)(a1 + 80);
  v41[5] = *(_OWORD *)(a1 + 64);
  v41[6] = v42;
  long long v43 = *(_OWORD *)(a1 + 112);
  v41[7] = *(_OWORD *)(a1 + 96);
  v41[8] = v43;
  long long v44 = *(_OWORD *)(a1 + 16);
  v41[1] = *(_OWORD *)a1;
  v41[2] = v44;
  long long v45 = *(_OWORD *)(a1 + 48);
  v41[3] = *(_OWORD *)(a1 + 32);
  _DWORD v41[4] = v45;
  outlined retain of MiniColorButton(a1);
  swift_bridgeObjectRetain();
  ForEach<>.init(_:content:)();
  char v46 = *(unsigned char *)(a1 + 89);
  uint64_t v99 = v16;
  uint64_t v98 = v24;
  if ((v46 & 1) == 0 || (uint64_t v47 = *(void *)(a1 + 72)) == 0)
  {
    uint64_t v57 = static VerticalAlignment.center.getter();
    unsigned __int8 v58 = v105;
    *uint64_t v105 = v57;
    v58[1] = 0;
    *((unsigned char *)v58 + 16) = 1;
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>);
    closure #4 in closure #1 in closure #2 in MiniColorButton.body.getter((Swift::String *)a1, (char *)v58 + *(int *)(v59 + 44));
    uint64_t v60 = *(void *)(a1 + 72);
    uint64_t v61 = *(void *)(a1 + 80);
    uint64_t v108 = *(void *)(a1 + 64);
    unsigned int v109 = (char *)v60;
    char v62 = *(unsigned char *)(a1 + 88);
    if (v46)
    {
      uint64_t v63 = v102;
      if (v109) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v63 = v102;
      if (v109)
      {
        *(_OWORD *)uint64_t v111 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v111[9] = *(_OWORD *)(a1 + 25);
        outlined retain of MiniColorButton(a1);
        uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<Color?>>);
        MEMORY[0x21054A870](v110, v64);
        if (v110[0])
        {

          outlined release of MiniColorButton(a1);
LABEL_13:
          uint64_t v100 = v61;
          uint64_t v65 = v62 & 1;
          swift_retain();
          swift_retain();
          uint64_t v101 = static VerticalAlignment.center.getter();
          uint64_t v66 = one-time initialization token for buttonSize;
          swift_retain();
          swift_retain();
          if (v66 != -1) {
            swift_once();
          }
          static Alignment.center.getter();
          _FrameLayout.init(width:height:alignment:)();
          uint64_t v107 = v111[8];
          uint64_t v67 = *(void *)&v111[16];
          uint64_t v68 = v111[24];
          uint64_t v69 = v113;
          uint64_t v103 = *(uint64_t **)v111;
          uint64_t v104 = v112;
          swift_release();
          swift_release();
          uint64_t v70 = 1;
          uint64_t v71 = v100;
          uint64_t v72 = v101;
          goto LABEL_18;
        }
        outlined release of MiniColorButton(a1);
      }
    }
    uint64_t v72 = 0;
    uint64_t v70 = 0;
    uint64_t v108 = 0;
    unsigned int v109 = 0;
    uint64_t v71 = 0;
    uint64_t v65 = 0;
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    uint64_t v107 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
LABEL_18:
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v105, v63, &demangling cache variable for type metadata for HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>);
    uint64_t v73 = v106;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v63, v106, &demangling cache variable for type metadata for HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>);
    long long v74 = (uint64_t *)(v73
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?))
                             + 48));
    *long long v74 = v72;
    v74[1] = 0;
    uint64_t v76 = v108;
    uint64_t v75 = (uint64_t)v109;
    v74[2] = v70;
    v74[3] = v76;
    v74[4] = v75;
    v74[5] = v71;
    long long v77 = v103;
    uint64_t v78 = v104;
    v74[6] = v65;
    v74[7] = (uint64_t)v77;
    uint64_t v103 = v77;
    uint64_t v79 = v107;
    v74[8] = v107;
    v74[9] = v67;
    v74[10] = v68;
    v74[11] = v78;
    v74[12] = v69;
    uint64_t v100 = v69;
    uint64_t v107 = v79;
    outlined copy of HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?(v72, 0, v70, v76, v75);
    uint64_t v101 = v72;
    uint64_t v88 = v65;
    outlined copy of HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?(v72, 0, v70, v76, v75);
    outlined consume of HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?(v72, 0, v70, v76, v75);
    outlined destroy of StocksKitCurrencyCache.Provider?(v102, &demangling cache variable for type metadata for HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v106, v91, &demangling cache variable for type metadata for TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>);
    uint64_t v54 = (uint64_t)v95;
    _ConditionalContent<>.init(storage:)();
    outlined consume of HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?(v101, 0, v70, v108, (uint64_t)v109);
    outlined destroy of StocksKitCurrencyCache.Provider?(v106, &demangling cache variable for type metadata for TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>);
    uint64_t v55 = v105;
    uint64_t v56 = &demangling cache variable for type metadata for HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>;
    goto LABEL_19;
  }
  double v48 = *(double *)(a1 + 80);
  uint64_t v49 = *(void *)(a1 + 64);
  char v50 = *(unsigned char *)(a1 + 88) & 1;
  swift_retain();
  swift_retain();
  uint64_t v51 = static VerticalAlignment.center.getter();
  uint64_t v52 = (uint64_t)v103;
  *uint64_t v103 = v51;
  *(void *)(v52 + 8) = 0;
  *(unsigned char *)(v52 + 16) = 1;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>);
  closure #3 in closure #1 in closure #2 in MiniColorButton.body.getter(v49, v47, v50, a1, (_OWORD *)(v52 + *(int *)(v53 + 44)), v48);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v52, v91, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>);
  swift_storeEnumTagMultiPayload();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>);
  uint64_t v54 = (uint64_t)v95;
  _ConditionalContent<>.init(storage:)();
  swift_release();
  swift_release();
  uint64_t v55 = (void *)v52;
  uint64_t v56 = &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>;
LABEL_19:
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v55, v56);
  uint64_t v80 = v97;
  uint64_t v81 = (uint64_t)v96;
  uint64_t v82 = (uint64_t)v93;
  uint64_t v83 = (uint64_t)v92;
  uint64_t v84 = (uint64_t)v98;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v98, (uint64_t)v92, &demangling cache variable for type metadata for ModifiedContent<GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _PaddingLayout>);
  uint64_t v85 = (uint64_t)v99;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v99, v82, &demangling cache variable for type metadata for GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v54, v81, &demangling cache variable for type metadata for _ConditionalContent<HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v83, v80, &demangling cache variable for type metadata for ModifiedContent<GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _PaddingLayout>);
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _PaddingLayout>, GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _ConditionalContent<HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>>));
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v82, v80 + *(int *)(v86 + 48), &demangling cache variable for type metadata for GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v81, v80 + *(int *)(v86 + 64), &demangling cache variable for type metadata for _ConditionalContent<HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v54, &demangling cache variable for type metadata for _ConditionalContent<HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v85, &demangling cache variable for type metadata for GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v84, &demangling cache variable for type metadata for ModifiedContent<GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _PaddingLayout>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v81, &demangling cache variable for type metadata for _ConditionalContent<HStack<TupleView<(ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, TupleView<(HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>)>>, HStack<ModifiedContent<LineWidthStepperView, _FrameLayout>>?)>>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v82, &demangling cache variable for type metadata for GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v83, &demangling cache variable for type metadata for ModifiedContent<GridRow<ForEach<[MiniDefaultColor], String, MiniColorSwatch>>, _PaddingLayout>);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #2 in MiniColorButton.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<Color?>>);
  Binding.projectedValue.getter();
  *(void *)a2 = swift_getKeyPath();
  *(unsigned char *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = v7;
  *(void *)(a2 + 32) = v8;
  *(unsigned char *)(a2 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v9;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v3;
  *(void *)(a2 + 64) = v5;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t closure #3 in closure #1 in closure #2 in MiniColorButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _OWORD *a5@<X8>, double a6@<D0>)
{
  uint64_t v63 = a4;
  double v65 = a6;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<MultiColorSwatchButton, _FrameLayout>);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>);
  MEMORY[0x270FA5388](v62);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v55 - v16;
  uint64_t v18 = one-time initialization token for buttonSize;
  *(void *)&long long v64 = a1;
  swift_retain();
  *((void *)&v64 + 1) = a2;
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  unsigned __int8 v19 = v68;
  uint64_t v60 = v69;
  uint64_t v61 = v67;
  unsigned __int8 v20 = v70;
  uint64_t v58 = v72;
  uint64_t v59 = v71;
  int v66 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  unsigned __int8 v75 = v19;
  unsigned __int8 v74 = v20;
  char v29 = a3 & 1;
  int v57 = a3 & 1;
  unsigned __int8 v73 = 0;
  MiniColorButton.multicolorSwatch.getter((uint64_t)v12);
  char v30 = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<MultiColorSwatchButton, _FrameLayout>);
  uint64_t v39 = &v14[*(int *)(v62 + 36)];
  *uint64_t v39 = v30;
  *((void *)v39 + 1) = v32;
  *((void *)v39 + 2) = v34;
  *((void *)v39 + 3) = v36;
  *((void *)v39 + 4) = v38;
  v39[40] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<MultiColorSwatchButton, _FrameLayout>);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>);
  unsigned __int8 v40 = v75;
  int v56 = v75;
  unsigned __int8 v41 = v74;
  LODWORD(v63) = v74;
  unsigned __int8 v42 = v73;
  LODWORD(v62) = v73;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v17, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>);
  long long v43 = v64;
  long long v76 = v64;
  double v44 = v65;
  *(double *)&long long v77 = v65;
  BYTE8(v77) = v29;
  uint64_t v55 = v17;
  uint64_t v45 = v61;
  *(void *)&long long v78 = v61;
  BYTE8(v78) = v40;
  uint64_t v46 = v60;
  *(void *)&long long v79 = v60;
  BYTE8(v79) = v41;
  uint64_t v48 = v58;
  uint64_t v47 = v59;
  *(void *)&long long v80 = v59;
  *((void *)&v80 + 1) = v58;
  LOBYTE(v81) = v66;
  *((void *)&v81 + 1) = v22;
  *(void *)&v82[0] = v24;
  *((void *)&v82[0] + 1) = v26;
  *(void *)&v82[1] = v28;
  BYTE8(v82[1]) = v42;
  long long v49 = v79;
  a5[2] = v78;
  a5[3] = v49;
  *(_OWORD *)((char *)a5 + 105) = *(_OWORD *)((char *)v82 + 9);
  long long v50 = v82[0];
  long long v51 = v80;
  a5[5] = v81;
  a5[6] = v50;
  a5[4] = v51;
  long long v52 = v77;
  *a5 = v76;
  a5[1] = v52;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<LineWidthStepperView, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>));
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v14, (uint64_t)a5 + *(int *)(v53 + 48), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>);
  outlined retain of Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>((uint64_t)&v76);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v55, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>);
  long long v83 = v43;
  double v84 = v44;
  char v85 = v57;
  uint64_t v86 = v45;
  char v87 = v56;
  uint64_t v88 = v46;
  char v89 = v63;
  uint64_t v90 = v47;
  uint64_t v91 = v48;
  char v92 = v66;
  uint64_t v93 = v22;
  uint64_t v94 = v24;
  uint64_t v95 = v26;
  uint64_t v96 = v28;
  char v97 = v62;
  return outlined release of Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>((uint64_t)&v83);
}

uint64_t closure #4 in closure #1 in closure #2 in MiniColorButton.body.getter@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<MultiColorSwatchButton, _FrameLayout>);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v61 = (uint64_t)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>);
  MEMORY[0x270FA5388](v59);
  uint64_t v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v62 = (uint64_t)&v58 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v60 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v58 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v58 - v20;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&a1[4], (uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v72, (uint64_t)v73, (uint64_t *)&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>?);
  if (v74)
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    isCGFloat a = paperKitBundle.super.isa;
    unint64_t v23 = 0xD000000000000030;
    unint64_t v57 = 0x800000020C8613B0;
    uint64_t v24 = 0x6B6F727453206F4ELL;
    unint64_t v25 = 0xE900000000000065;
    uint64_t v26 = 0x617A696C61636F4CLL;
    unint64_t v27 = 0xEB00000000656C62;
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    isCGFloat a = paperKitBundle.super.isa;
    unint64_t v57 = 0x800000020C861380;
    uint64_t v24 = 0x6C6C6946206F4ELL;
    unint64_t v25 = 0xE700000000000000;
    uint64_t v26 = 0x617A696C61636F4CLL;
    unint64_t v27 = 0xEB00000000656C62;
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    unint64_t v23 = 0xD00000000000002ELL;
  }
  Swift::String v64 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v24, *(Swift::String_optional *)&v26, (NSBundle)isa, *(Swift::String *)&v28, *(Swift::String *)&v23);
  char v30 = (_OWORD *)swift_allocObject();
  Swift::String v31 = a1[5];
  v30[5] = a1[4];
  v30[6] = v31;
  Swift::String v32 = a1[7];
  v30[7] = a1[6];
  v30[8] = v32;
  Swift::String v33 = a1[1];
  v30[1] = *a1;
  void v30[2] = v33;
  Swift::String v34 = a1[3];
  _OWORD v30[3] = a1[2];
  v30[4] = v34;
  outlined retain of MiniColorButton((uint64_t)a1);
  lazy protocol witness table accessor for type String and conformance String();
  Button<>.init<A>(_:action:)();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
  lazy protocol witness table accessor for type MiniTextButtonStyle and conformance MiniTextButtonStyle();
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v21, v18, v13);
  Swift::String v35 = a1[5];
  Swift::String v68 = a1[4];
  Swift::String v69 = v35;
  Swift::String v36 = a1[7];
  Swift::String v70 = a1[6];
  Swift::String v71 = v36;
  Swift::String v37 = a1[1];
  Swift::String v64 = *a1;
  Swift::String v65 = v37;
  Swift::String v38 = a1[3];
  Swift::String v66 = a1[2];
  Swift::String v67 = v38;
  uint64_t v39 = v61;
  MiniColorButton.multicolorSwatch.getter(v61);
  char v40 = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v39, (uint64_t)v6, &demangling cache variable for type metadata for ModifiedContent<MultiColorSwatchButton, _FrameLayout>);
  long long v49 = &v6[*(int *)(v59 + 36)];
  *long long v49 = v40;
  *((void *)v49 + 1) = v42;
  *((void *)v49 + 2) = v44;
  *((void *)v49 + 3) = v46;
  *((void *)v49 + 4) = v48;
  v49[40] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for ModifiedContent<MultiColorSwatchButton, _FrameLayout>);
  uint64_t v50 = v62;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v6, v62, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>);
  long long v51 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  long long v52 = v60;
  v51(v60, v21, v13);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v50, (uint64_t)v6, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>);
  uint64_t v53 = v63;
  v51(v63, v52, v13);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (<<opaque return type of View.buttonStyle<A>(_:)>>.0, ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>));
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v6, (uint64_t)&v53[*(int *)(v54 + 48)], &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v14 + 8);
  v55(v21, v13);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<MultiColorSwatchButton, _FrameLayout>, _PaddingLayout>);
  return ((uint64_t (*)(char *, uint64_t))v55)(v52, v13);
}

uint64_t closure #1 in closure #4 in closure #1 in closure #2 in MiniColorButton.body.getter(_OWORD *a1)
{
  type metadata accessor for MainActor();
  outlined retain of MiniColorButton((uint64_t)a1);
  outlined retain of MiniColorButton((uint64_t)a1);
  outlined retain of MiniColorButton((uint64_t)a1);
  uint64_t v2 = static MainActor.shared.getter();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = MEMORY[0x263F8F500];
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v4;
  long long v5 = a1[5];
  *(_OWORD *)(v3 + 96) = a1[4];
  *(_OWORD *)(v3 + 112) = v5;
  long long v6 = a1[7];
  *(_OWORD *)(v3 + 128) = a1[6];
  *(_OWORD *)(v3 + 144) = v6;
  long long v7 = a1[1];
  *(_OWORD *)(v3 + 32) = *a1;
  *(_OWORD *)(v3 + 48) = v7;
  long long v8 = a1[3];
  *(_OWORD *)(v3 + 64) = a1[2];
  *(_OWORD *)(v3 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v8;
  outlined retain of MiniColorButton((uint64_t)a1);
  uint64_t v9 = static MainActor.shared.getter();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v4;
  long long v11 = a1[5];
  *(_OWORD *)(v10 + 96) = a1[4];
  *(_OWORD *)(v10 + 112) = v11;
  long long v12 = a1[7];
  *(_OWORD *)(v10 + 128) = a1[6];
  *(_OWORD *)(v10 + 144) = v12;
  long long v13 = a1[1];
  *(_OWORD *)(v10 + 32) = *a1;
  *(_OWORD *)(v10 + 48) = v13;
  long long v14 = a1[3];
  *(_OWORD *)(v10 + 64) = a1[2];
  *(_OWORD *)(v10 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v14;
  type metadata accessor for CGColorRef(0);
  Binding.init(get:set:)();
  outlined release of MiniColorButton((uint64_t)a1);
  uint64_t v15 = *(void **)&v20[16];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<CGColorRef>);
  MEMORY[0x21054A870](v18, v16);

  swift_release();
  swift_release();
  *(_OWORD *)uint64_t v20 = a1[3];
  v19[0] = v18[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<CGColorRef?>);
  State.wrappedValue.setter();
  outlined release of MiniColorButton((uint64_t)a1);
  *(_OWORD *)uint64_t v20 = a1[1];
  *(_OWORD *)&v20[9] = *(_OWORD *)((char *)a1 + 25);
  *(_OWORD *)uint64_t v18 = a1[1];
  *(_OWORD *)((char *)&v18[1] + 1) = *(_OWORD *)((char *)a1 + 25);
  outlined retain of MiniColorButton((uint64_t)a1);
  outlined retain of Binding<Inspected<Color?>>((uint64_t)v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<Color?>>);
  MEMORY[0x21054A870](v19);

  *(_OWORD *)uint64_t v18 = *(_OWORD *)v20;
  *(_OWORD *)((char *)&v18[1] + 1) = *(_OWORD *)&v20[9];
  Binding.wrappedValue.setter();
  outlined release of Binding<Inspected<Color?>>((uint64_t)v20);
  return outlined release of MiniColorButton((uint64_t)a1);
}

uint64_t closure #3 in MiniColorButton.body.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ColorPickerRepresentable(0);
  MEMORY[0x270FA5388](v4);
  long long v6 = (uint64_t *)&v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = &v21[-v8];
  *(_OWORD *)uint64_t v21 = a1[1];
  *(_OWORD *)&v21[9] = *(_OWORD *)((char *)a1 + 25);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<Color?>>);
  MEMORY[0x21054A870](&v22, v10);
  long long v11 = v22;
  long long v12 = (uint64_t (*)(void *))swift_allocObject();
  long long v13 = a1[5];
  *((_OWORD *)v12 + 5) = a1[4];
  *((_OWORD *)v12 + 6) = v13;
  long long v14 = a1[7];
  *((_OWORD *)v12 + 7) = a1[6];
  *((_OWORD *)v12 + 8) = v14;
  long long v15 = a1[1];
  *((_OWORD *)v12 + 1) = *a1;
  *((_OWORD *)v12 + 2) = v15;
  long long v16 = a1[3];
  *((_OWORD *)v12 + 3) = a1[2];
  *((_OWORD *)v12 + 4) = v16;
  *long long v6 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = (uint64_t (**)(void *))((char *)v6 + *(int *)(v4 + 20));
  *uint64_t v17 = partial apply for closure #1 in closure #3 in MiniColorButton.body.getter;
  v17[1] = v12;
  if (v11)
  {
    id v18 = objc_allocWithZone(MEMORY[0x263F825C8]);
    outlined retain of MiniColorButton((uint64_t)a1);
    id v19 = objc_msgSend(v18, sel_initWithCGColor_, v11);
  }
  else
  {
    outlined retain of MiniColorButton((uint64_t)a1);
    id v19 = 0;
  }
  *(uint64_t *)((char *)v6 + *(int *)(v4 + 24)) = (uint64_t)v19;
  outlined init with take of MultiColorSwatchButton((uint64_t)v6, (uint64_t)v9, type metadata accessor for ColorPickerRepresentable);
  return outlined init with take of MultiColorSwatchButton((uint64_t)v9, a2, type metadata accessor for ColorPickerRepresentable);
}

uint64_t closure #1 in closure #3 in MiniColorButton.body.getter(void *a1, _OWORD *a2)
{
  type metadata accessor for MainActor();
  outlined retain of MiniColorButton((uint64_t)a2);
  outlined retain of MiniColorButton((uint64_t)a2);
  uint64_t v4 = static MainActor.shared.getter();
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = MEMORY[0x263F8F500];
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v6;
  long long v7 = a2[5];
  *(_OWORD *)(v5 + 96) = a2[4];
  *(_OWORD *)(v5 + 112) = v7;
  long long v8 = a2[7];
  *(_OWORD *)(v5 + 128) = a2[6];
  *(_OWORD *)(v5 + 144) = v8;
  long long v9 = a2[1];
  *(_OWORD *)(v5 + 32) = *a2;
  *(_OWORD *)(v5 + 48) = v9;
  long long v10 = a2[3];
  *(_OWORD *)(v5 + 64) = a2[2];
  *(_OWORD *)(v5 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v10;
  outlined retain of MiniColorButton((uint64_t)a2);
  uint64_t v11 = static MainActor.shared.getter();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v6;
  long long v13 = a2[5];
  *(_OWORD *)(v12 + 96) = a2[4];
  *(_OWORD *)(v12 + 112) = v13;
  long long v14 = a2[7];
  *(_OWORD *)(v12 + 128) = a2[6];
  *(_OWORD *)(v12 + 144) = v14;
  long long v15 = a2[1];
  *(_OWORD *)(v12 + 32) = *a2;
  *(_OWORD *)(v12 + 48) = v15;
  long long v16 = a2[3];
  *(_OWORD *)(v12 + 64) = a2[2];
  *(_OWORD *)(v12 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = v16;
  type metadata accessor for CGColorRef(0);
  Binding.init(get:set:)();
  outlined release of MiniColorButton((uint64_t)a2);
  objc_msgSend(a1, sel_CGColor);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<CGColorRef>);
  Binding.wrappedValue.setter();

  swift_release();
  return swift_release();
}

id ColorPickerRepresentable.makeUIViewController(context:)()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825E0]), sel_init);
  objc_msgSend(v1, sel__setShouldUseDarkGridInDarkMode_, 1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIViewControllerRepresentableContext<ColorPickerRepresentable>);
  UIViewControllerRepresentableContext.coordinator.getter();
  objc_msgSend(v1, sel_setDelegate_, v3);

  if (*(void *)(v0 + *(int *)(type metadata accessor for ColorPickerRepresentable(0) + 24))) {
    objc_msgSend(v1, sel_setSelectedColor_);
  }
  return v1;
}

id ColorPickerRepresentable.Coordinator.__deallocating_deinit()
{
  return LineWidthStepperView.Coordinator.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for ColorPickerRepresentable.Coordinator);
}

id LineWidthStepperView.Coordinator.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t ObjC metadata update function for ColorPickerRepresentable.Coordinator()
{
  return type metadata accessor for ColorPickerRepresentable.Coordinator(0);
}

uint64_t type metadata accessor for ColorPickerRepresentable.Coordinator(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, type metadata singleton initialization cache for ColorPickerRepresentable.Coordinator);
}

uint64_t type metadata completion function for ColorPickerRepresentable.Coordinator()
{
  uint64_t result = type metadata accessor for ColorPickerRepresentable(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ColorPickerRepresentable(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, type metadata singleton initialization cache for ColorPickerRepresentable);
}

ValueMetadata *type metadata accessor for MiniTextButtonStyle()
{
  return &type metadata for MiniTextButtonStyle;
}

uint64_t initializeWithCopy for LineWidthStepperView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LineWidthStepperView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for LineWidthStepperView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for LineWidthStepperView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LineWidthStepperView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LineWidthStepperView()
{
  return &type metadata for LineWidthStepperView;
}

uint64_t destroy for MiniColorSwatch(uint64_t a1)
{
  outlined consume of Environment<MiniMenuController?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for MiniColorSwatch(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<MiniMenuController?>.Content(*a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v6;
  long long v7 = (void *)a2[4];
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = *((unsigned char *)a2 + 40);
  uint64_t v8 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = a2[8];
  swift_retain();
  swift_retain();
  id v9 = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for MiniColorSwatch(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<MiniMenuController?>.Content(*a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<MiniMenuController?>.Content(v6, v7);
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  uint64_t v8 = (void *)a1[4];
  id v9 = (void *)a2[4];
  a1[4] = (uint64_t)v9;
  id v10 = v9;

  *((unsigned char *)a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = *((unsigned char *)a2 + 40);
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t *assignWithTake for MiniColorSwatch(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<MiniMenuController?>.Content(v6, v7);
  swift_release();
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release();
  uint64_t v8 = (void *)a1[4];
  a1[4] = a2[4];

  *((unsigned char *)a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = *((unsigned char *)a2 + 40);
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniColorSwatch(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MiniColorSwatch(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MiniColorSwatch()
{
  return &type metadata for MiniColorSwatch;
}

uint64_t destroy for MiniDefaultColor()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for MiniDefaultColor(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for MiniDefaultColor(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MiniDefaultColor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for MiniDefaultColor()
{
  return &type metadata for MiniDefaultColor;
}

uint64_t *initializeBufferWithCopyOfBuffer for ColorPickerRepresentable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      id v9 = (char *)a1 + v8;
      id v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = *(int *)(a3 + 20);
    uint64_t v14 = *(int *)(a3 + 24);
    long long v15 = (uint64_t *)((char *)a1 + v13);
    long long v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *long long v15 = *v16;
    v15[1] = v17;
    id v18 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = (uint64_t)v18;
    swift_retain();
    id v19 = v18;
  }
  return a1;
}

void destroy for ColorPickerRepresentable(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  swift_release();
  if (EnumCaseMultiPayload == 1)
  {
    swift_release();
    uint64_t v5 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                + 32);
    uint64_t v6 = type metadata accessor for PresentationMode();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  swift_release();
  uint64_t v7 = *(void **)(a1 + *(int *)(a2 + 24));
}

void *initializeWithCopy for ColorPickerRepresentable(void *a1, void *a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                + 32);
    uint64_t v8 = (char *)a1 + v7;
    id v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for PresentationMode();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v11);
  uint64_t v14 = (void *)((char *)a2 + v11);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  long long v16 = *(void **)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = v16;
  swift_retain();
  id v17 = v16;
  return a1;
}

void *assignWithCopy for ColorPickerRepresentable(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1, (uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      uint64_t v8 = (char *)a1 + v7;
      id v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  uint64_t v15 = *(int *)(a3 + 24);
  long long v16 = *(void **)((char *)a1 + v15);
  id v17 = *(void **)((char *)a2 + v15);
  *(void *)((char *)a1 + v15) = v17;
  id v18 = v17;

  return a1;
}

void *initializeWithTake for ColorPickerRepresentable(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                + 32);
    id v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for PresentationMode();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v12 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  return a1;
}

void *assignWithTake for ColorPickerRepresentable(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1, (uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      id v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_release();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = *(void **)((char *)a1 + v12);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);

  return a1;
}

uint64_t getEnumTagSinglePayload for ColorPickerRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C817810);
}

uint64_t sub_20C817810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v1CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ColorPickerRepresentable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C8178E8);
}

uint64_t sub_20C8178E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

void type metadata completion function for ColorPickerRepresentable()
{
  type metadata accessor for Environment<Binding<PresentationMode>>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Environment<Binding<PresentationMode>>.Content()
{
  if (!lazy cache variable for type metadata for Environment<Binding<PresentationMode>>.Content)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Binding<PresentationMode>);
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for MultiColorSwatchButton(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)a1 = *a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    uint64_t v7 = *a2;
    unsigned __int8 v8 = *((unsigned char *)a2 + 8);
    outlined copy of Environment<MiniMenuController?>.Content(*a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v9;
    unint64_t v10 = (void *)a2[4];
    *(void *)(a1 + 32) = v10;
    uint64_t v11 = a3[6];
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    swift_retain();
    swift_retain();
    id v14 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for EnvironmentValues();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v12, v13, v15);
    }
    else
    {
      *uint64_t v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = a3[7];
    id v18 = (void *)(a1 + v17);
    id v19 = (uint64_t *)((char *)a2 + v17);
    if (*v19)
    {
      uint64_t v20 = v19[1];
      *id v18 = *v19;
      v18[1] = v20;
      swift_retain();
    }
    else
    {
      *(_OWORD *)id v18 = *(_OWORD *)v19;
    }
    uint64_t v21 = a3[8];
    uint64_t v22 = (void *)(a1 + v21);
    unint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for MultiColorSwatchButton(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<MiniMenuController?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  swift_release();
  swift_release();

  uint64_t v4 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for EnvironmentValues();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  if (*(void *)(a1 + *(int *)(a2 + 28))) {
    swift_release();
  }
  return swift_release();
}

uint64_t initializeWithCopy for MultiColorSwatchButton(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unsigned __int8 v7 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<MiniMenuController?>.Content(*a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v8;
  uint64_t v9 = (void *)a2[4];
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)((char *)a2 + v10);
  swift_retain();
  swift_retain();
  id v13 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for EnvironmentValues();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v11, v12, v14);
  }
  else
  {
    *uint64_t v11 = *v12;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  if (*v17)
  {
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  }
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = v21[1];
  void *v20 = *v21;
  v20[1] = v22;
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for MultiColorSwatchButton(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unsigned __int8 v7 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<MiniMenuController?>.Content(*a2, v7);
  uint64_t v8 = *a1;
  uint64_t v9 = *((unsigned __int8 *)a1 + 8);
  *a1 = v6;
  *((unsigned char *)a1 + 8) = v7;
  outlined consume of Environment<MiniMenuController?>.Content(v8, v9);
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  uint64_t v10 = (void *)a2[4];
  uint64_t v11 = (void *)a1[4];
  a1[4] = (uint64_t)v10;
  id v12 = v10;

  if (a1 != a2)
  {
    uint64_t v13 = a3[6];
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1 + v13, &demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for EnvironmentValues();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      void *v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v17 = a3[7];
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = (uint64_t)a2 + v17;
  uint64_t v20 = *(uint64_t *)((char *)a1 + v17);
  uint64_t v21 = *(uint64_t *)((char *)a2 + v17);
  if (!v20)
  {
    if (v21)
    {
      uint64_t v23 = *(void *)(v19 + 8);
      *uint64_t v18 = v21;
      v18[1] = v23;
      swift_retain();
      goto LABEL_13;
    }
LABEL_12:
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    goto LABEL_13;
  }
  if (!v21)
  {
    swift_release();
    goto LABEL_12;
  }
  uint64_t v22 = *(void *)(v19 + 8);
  *uint64_t v18 = v21;
  v18[1] = v22;
  swift_retain();
  swift_release();
LABEL_13:
  uint64_t v24 = a3[8];
  unint64_t v25 = (uint64_t *)((char *)a1 + v24);
  uint64_t v26 = (uint64_t *)((char *)a2 + v24);
  uint64_t v27 = v26[1];
  *unint64_t v25 = *v26;
  v25[1] = v27;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for MultiColorSwatchButton(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = a3[6];
  unsigned __int8 v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for EnvironmentValues();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[7];
  id v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  if (*v13)
  {
    uint64_t v15 = v13[1];
    *id v12 = v14;
    v12[1] = v15;
  }
  else
  {
    *(_OWORD *)id v12 = *(_OWORD *)v13;
  }
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t *assignWithTake for MultiColorSwatchButton(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *a1;
  uint64_t v9 = *((unsigned __int8 *)a1 + 8);
  *a1 = v6;
  *((unsigned char *)a1 + 8) = v7;
  outlined consume of Environment<MiniMenuController?>.Content(v8, v9);
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  uint64_t v10 = (void *)a1[4];
  a1[4] = a2[4];

  if (a1 != a2)
  {
    uint64_t v11 = a3[6];
    id v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1 + v11, &demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for EnvironmentValues();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = (uint64_t *)((char *)a1 + v16);
  uint64_t v18 = (uint64_t)a2 + v16;
  uint64_t v19 = *(uint64_t *)((char *)a1 + v16);
  uint64_t v20 = *(uint64_t *)((char *)a2 + v16);
  if (!v19)
  {
    if (v20)
    {
      uint64_t v22 = *(void *)(v18 + 8);
      *uint64_t v17 = v20;
      v17[1] = v22;
      goto LABEL_12;
    }
LABEL_11:
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    goto LABEL_12;
  }
  if (!v20)
  {
    swift_release();
    goto LABEL_11;
  }
  uint64_t v21 = *(void *)(v18 + 8);
  *uint64_t v17 = v20;
  v17[1] = v21;
  swift_release();
LABEL_12:
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiColorSwatchButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C818348);
}

uint64_t sub_20C818348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MultiColorSwatchButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C818410);
}

uint64_t sub_20C818410(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for MultiColorSwatchButton(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, type metadata singleton initialization cache for MultiColorSwatchButton);
}

void type metadata completion function for MultiColorSwatchButton()
{
  type metadata accessor for Environment<EnvironmentValues>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t associated type witness table accessor for View.Body : View in MultiColorSwatchButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for View in ColorPickerRepresentable()
{
  return lazy protocol witness table accessor for type ColorPickerRepresentable and conformance ColorPickerRepresentable(&lazy protocol witness table cache variable for type ColorPickerRepresentable and conformance ColorPickerRepresentable, (void (*)(uint64_t))type metadata accessor for ColorPickerRepresentable);
}

uint64_t protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance ColorPickerRepresentable@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1 - 8;
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ColorPickerRepresentable(v2, (uint64_t)v6, type metadata accessor for ColorPickerRepresentable);
  uint64_t v7 = (uint64_t *)(v2 + *(int *)(v4 + 28));
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  uint64_t v10 = (objc_class *)type metadata accessor for ColorPickerRepresentable.Coordinator(0);
  uint64_t v11 = (char *)objc_allocWithZone(v10);
  outlined init with copy of ColorPickerRepresentable((uint64_t)v6, (uint64_t)&v11[OBJC_IVAR____TtCV8PaperKit24ColorPickerRepresentable11Coordinator_parent], type metadata accessor for ColorPickerRepresentable);
  id v12 = &v11[OBJC_IVAR____TtCV8PaperKit24ColorPickerRepresentable11Coordinator_pickedColor];
  *(void *)id v12 = v9;
  *((void *)v12 + 1) = v8;
  v15.receiver = v11;
  v15.super_class = v10;
  swift_retain();
  id v13 = objc_msgSendSuper2(&v15, sel_init);
  uint64_t result = outlined destroy of ColorPickerRepresentable((uint64_t)v6, type metadata accessor for ColorPickerRepresentable);
  *a2 = v13;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in MiniColorSwatch()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type LineWidthStepperView and conformance LineWidthStepperView()
{
  unint64_t result = lazy protocol witness table cache variable for type LineWidthStepperView and conformance LineWidthStepperView;
  if (!lazy protocol witness table cache variable for type LineWidthStepperView and conformance LineWidthStepperView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LineWidthStepperView and conformance LineWidthStepperView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LineWidthStepperView and conformance LineWidthStepperView;
  if (!lazy protocol witness table cache variable for type LineWidthStepperView and conformance LineWidthStepperView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LineWidthStepperView and conformance LineWidthStepperView);
  }
  return result;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in MiniTextButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ColorPickerRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ColorPickerRepresentable and conformance ColorPickerRepresentable(&lazy protocol witness table cache variable for type ColorPickerRepresentable and conformance ColorPickerRepresentable, (void (*)(uint64_t))type metadata accessor for ColorPickerRepresentable);
  return MEMORY[0x270F02710](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ColorPickerRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ColorPickerRepresentable and conformance ColorPickerRepresentable(&lazy protocol witness table cache variable for type ColorPickerRepresentable and conformance ColorPickerRepresentable, (void (*)(uint64_t))type metadata accessor for ColorPickerRepresentable);
  return MEMORY[0x270F026D8](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance ColorPickerRepresentable()
{
}

uint64_t lazy protocol witness table accessor for type ColorPickerRepresentable and conformance ColorPickerRepresentable(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v2, (uint64_t)v10, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorScheme();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    uint64_t v14 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v19[1] = a1;
      uint64_t v18 = v17;
      uint64_t v20 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      id v19[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x686353726F6C6F43, 0xEB00000000656D65, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v18, -1, -1);
      MEMORY[0x210550270](v16, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_log_type_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  void v18[3];
  uint64_t v19;

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v2, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v10, a1, &demangling cache variable for type metadata for Binding<PresentationMode>);
  }
  id v12 = static os_log_type_t.fault.getter();
  os_log_type_t v13 = static Log.runtimeIssuesLog.getter();
  uint64_t v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v18[1] = a1;
    uint64_t v17 = v16;
    uint64_t v19 = v16;
    *(_DWORD *)os_log_type_t v15 = 136315138;
    _OWORD v18[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x800000020C861360, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v17, -1, -1);
    MEMORY[0x210550270](v15, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_log_type_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  void v18[3];
  uint64_t v19;

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v2, (uint64_t)v10, &demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v10, v4);
  }
  id v12 = static os_log_type_t.fault.getter();
  os_log_type_t v13 = static Log.runtimeIssuesLog.getter();
  uint64_t v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v18[1] = a1;
    uint64_t v17 = v16;
    uint64_t v19 = v16;
    *(_DWORD *)os_log_type_t v15 = 136315138;
    _OWORD v18[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000020C861340, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v17, -1, -1);
    MEMORY[0x210550270](v15, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  if ((a2 & 1) == 0)
  {
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    uint64_t v9 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v15 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000020C861320, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v12, -1, -1);
      MEMORY[0x210550270](v11, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<MiniMenuController?>.Content(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v15;
  }
  return a1;
}

uint64_t key path getter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_20C819390@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_20C8193E8()
{
  return EnvironmentValues.foregroundColor.setter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>);
    lazy protocol witness table accessor for type ColorPickerRepresentable and conformance ColorPickerRepresentable(&lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label, MEMORY[0x263F1A0D0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_20C819654()
{
  outlined consume of Environment<MiniMenuController?>.Content(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 88, 7);
}

void partial apply for closure #1 in MiniColorSwatch.body.getter()
{
  closure #1 in MiniColorSwatch.body.getter(v0 + 16);
}

void partial apply for closure #2 in MiniColorSwatch.body.getter(uint64_t *a1@<X8>)
{
  closure #2 in MiniColorSwatch.body.getter(*(void *)(v1 + 16), a1);
}

uint64_t outlined retain of MiniColorSwatch(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  outlined copy of Environment<MiniMenuController?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  id v3 = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined copy of ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined release of MiniColorSwatch(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  outlined consume of Environment<MiniMenuController?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return a1;
}

uint64_t outlined retain of Binding<Inspected<Color?>>(uint64_t a1)
{
  id v2 = *(id *)(a1 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of Binding<Inspected<Color?>>(uint64_t a1)
{
  id v2 = *(void **)(a1 + 16);
  swift_release();
  swift_release();

  return a1;
}

uint64_t outlined init with copy of ColorPickerRepresentable(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in MultiColorSwatchButton.swiftUIColor.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for MultiColorSwatchButton(0);
  CGColorRef v2 = MultiColorSwatchButton.displayColor.getter();
  uint64_t result = MEMORY[0x21054A5B0](v2);
  *a1 = result;
  return result;
}

uint64_t objectdestroy_28Tm_0()
{
  uint64_t v1 = type metadata accessor for MultiColorSwatchButton(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_unknownObjectRelease();
  outlined consume of Environment<MiniMenuController?>.Content(*(void *)(v0 + v3), *(unsigned __int8 *)(v0 + v3 + 8));
  swift_release();
  swift_release();

  uint64_t v5 = v0 + v3 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for EnvironmentValues();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  if (*(void *)(v0 + v3 + *(int *)(v1 + 28))) {
    swift_release();
  }
  swift_release();
  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

void partial apply for closure #2 in MultiColorSwatchButton.swiftUIColor.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MultiColorSwatchButton(0) - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  closure #2 in MultiColorSwatchButton.swiftUIColor.getter(a1, v4, v5, v6);
}

uint64_t outlined destroy of ColorPickerRepresentable(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_20C819BE8()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t *)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>);
    type metadata accessor for AutomaticHoverEffect();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ColorPickerRepresentable and conformance ColorPickerRepresentable(&lazy protocol witness table cache variable for type AutomaticHoverEffect and conformance AutomaticHoverEffect, MEMORY[0x263F19B68]);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type _ClipEffect<RoundedCorner> and conformance _ClipEffect<A>, &demangling cache variable for type metadata for _ClipEffect<RoundedCorner>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?)>>>);
    type metadata accessor for PlainButtonStyle();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Button<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?)>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?, ModifiedContent<StrokeShapeView<Circle, Color, EmptyView>, _FrameLayout>?)>>>);
    lazy protocol witness table accessor for type ColorPickerRepresentable and conformance ColorPickerRepresentable((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type ColorPickerRepresentable and conformance ColorPickerRepresentable(&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_20C819EA0()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ColorPicker<Text>, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ColorPicker<Text>, _FrameLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ColorPicker<Text>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _ClipEffect<RoundedCorner>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ColorPicker<Text>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ColorPicker<Text>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ColorPicker<Text>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ColorPicker<Text>, _FrameLayout>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type ColorPicker<Text> and conformance ColorPicker<A>, &demangling cache variable for type metadata for ColorPicker<Text>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ColorPicker<Text>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t destroy for MiniColorButton(uint64_t a1)
{
  outlined consume of Environment<MiniMenuController?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  swift_release();
  swift_release();

  swift_release();
  if (*(void *)(a1 + 72))
  {
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MiniColorButton(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<MiniMenuController?>.Content(*a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = (void *)a2[4];
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 4CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = *((unsigned char *)a2 + 40);
  uint64_t v9 = (void *)a2[6];
  uint64_t v8 = a2[7];
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v8;
  uint64_t v10 = a2[9];
  swift_retain();
  swift_retain();
  id v11 = v7;
  id v12 = v9;
  swift_retain();
  if (v10)
  {
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 8CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = a2[10];
    *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)a2 + 73);
  }
  *(unsigned char *)(a1 + 89) = *((unsigned char *)a2 + 89);
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(void *)(a1 + 104) = a2[13];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(void *)(a1 + 12CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0) = a2[15];
  swift_retain();
  swift_retain();
  return a1;
}